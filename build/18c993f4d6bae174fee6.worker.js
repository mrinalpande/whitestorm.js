/*! WhitestormJS Framework v1.2.6 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.THREE = global.THREE || {})));
}(this, (function (exports) { 'use strict';

	// Polyfills

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( Function.prototype.name === undefined ) {

		// Missing in IE9-11.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// Missing in IE.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		( function () {

			Object.assign = function ( target ) {

				'use strict';

				if ( target === undefined || target === null ) {

					throw new TypeError( 'Cannot convert undefined or null to object' );

				}

				var output = Object( target );

				for ( var index = 1; index < arguments.length; index ++ ) {

					var source = arguments[ index ];

					if ( source !== undefined && source !== null ) {

						for ( var nextKey in source ) {

							if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

								output[ nextKey ] = source[ nextKey ];

							}

						}

					}

				}

				return output;

			};

		} )();

	}

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	function EventDispatcher() {}

	Object.assign( EventDispatcher.prototype, {

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return false;

			var listeners = this._listeners;

			if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

				return true;

			}

			return false;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = [], i = 0;
				var length = listenerArray.length;

				for ( i = 0; i < length; i ++ ) {

					array[ i ] = listenerArray[ i ];

				}

				for ( i = 0; i < length; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	} );

	var REVISION = '82';
	var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
	var CullFaceNone = 0;
	var CullFaceBack = 1;
	var CullFaceFront = 2;
	var CullFaceFrontBack = 3;
	var FrontFaceDirectionCW = 0;
	var FrontFaceDirectionCCW = 1;
	var BasicShadowMap = 0;
	var PCFShadowMap = 1;
	var PCFSoftShadowMap = 2;
	var FrontSide = 0;
	var BackSide = 1;
	var DoubleSide = 2;
	var FlatShading = 1;
	var SmoothShading = 2;
	var NoColors = 0;
	var FaceColors = 1;
	var VertexColors = 2;
	var NoBlending = 0;
	var NormalBlending = 1;
	var AdditiveBlending = 2;
	var SubtractiveBlending = 3;
	var MultiplyBlending = 4;
	var CustomBlending = 5;
	var BlendingMode = {
		NoBlending: NoBlending,
		NormalBlending: NormalBlending,
		AdditiveBlending: AdditiveBlending,
		SubtractiveBlending: SubtractiveBlending,
		MultiplyBlending: MultiplyBlending,
		CustomBlending: CustomBlending
	};
	var AddEquation = 100;
	var SubtractEquation = 101;
	var ReverseSubtractEquation = 102;
	var MinEquation = 103;
	var MaxEquation = 104;
	var ZeroFactor = 200;
	var OneFactor = 201;
	var SrcColorFactor = 202;
	var OneMinusSrcColorFactor = 203;
	var SrcAlphaFactor = 204;
	var OneMinusSrcAlphaFactor = 205;
	var DstAlphaFactor = 206;
	var OneMinusDstAlphaFactor = 207;
	var DstColorFactor = 208;
	var OneMinusDstColorFactor = 209;
	var SrcAlphaSaturateFactor = 210;
	var NeverDepth = 0;
	var AlwaysDepth = 1;
	var LessDepth = 2;
	var LessEqualDepth = 3;
	var EqualDepth = 4;
	var GreaterEqualDepth = 5;
	var GreaterDepth = 6;
	var NotEqualDepth = 7;
	var MultiplyOperation = 0;
	var MixOperation = 1;
	var AddOperation = 2;
	var NoToneMapping = 0;
	var LinearToneMapping = 1;
	var ReinhardToneMapping = 2;
	var Uncharted2ToneMapping = 3;
	var CineonToneMapping = 4;
	var UVMapping = 300;
	var CubeReflectionMapping = 301;
	var CubeRefractionMapping = 302;
	var EquirectangularReflectionMapping = 303;
	var EquirectangularRefractionMapping = 304;
	var SphericalReflectionMapping = 305;
	var CubeUVReflectionMapping = 306;
	var CubeUVRefractionMapping = 307;
	var TextureMapping = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		SphericalReflectionMapping: SphericalReflectionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};
	var RepeatWrapping = 1000;
	var ClampToEdgeWrapping = 1001;
	var MirroredRepeatWrapping = 1002;
	var TextureWrapping = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};
	var NearestFilter = 1003;
	var NearestMipMapNearestFilter = 1004;
	var NearestMipMapLinearFilter = 1005;
	var LinearFilter = 1006;
	var LinearMipMapNearestFilter = 1007;
	var LinearMipMapLinearFilter = 1008;
	var TextureFilter = {
		NearestFilter: NearestFilter,
		NearestMipMapNearestFilter: NearestMipMapNearestFilter,
		NearestMipMapLinearFilter: NearestMipMapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipMapNearestFilter: LinearMipMapNearestFilter,
		LinearMipMapLinearFilter: LinearMipMapLinearFilter
	};
	var UnsignedByteType = 1009;
	var ByteType = 1010;
	var ShortType = 1011;
	var UnsignedShortType = 1012;
	var IntType = 1013;
	var UnsignedIntType = 1014;
	var FloatType = 1015;
	var HalfFloatType = 1016;
	var UnsignedShort4444Type = 1017;
	var UnsignedShort5551Type = 1018;
	var UnsignedShort565Type = 1019;
	var UnsignedInt248Type = 1020;
	var AlphaFormat = 1021;
	var RGBFormat = 1022;
	var RGBAFormat = 1023;
	var LuminanceFormat = 1024;
	var LuminanceAlphaFormat = 1025;
	var RGBEFormat = RGBAFormat;
	var DepthFormat = 1026;
	var DepthStencilFormat = 1027;
	var RGB_S3TC_DXT1_Format = 2001;
	var RGBA_S3TC_DXT1_Format = 2002;
	var RGBA_S3TC_DXT3_Format = 2003;
	var RGBA_S3TC_DXT5_Format = 2004;
	var RGB_PVRTC_4BPPV1_Format = 2100;
	var RGB_PVRTC_2BPPV1_Format = 2101;
	var RGBA_PVRTC_4BPPV1_Format = 2102;
	var RGBA_PVRTC_2BPPV1_Format = 2103;
	var RGB_ETC1_Format = 2151;
	var LoopOnce = 2200;
	var LoopRepeat = 2201;
	var LoopPingPong = 2202;
	var InterpolateDiscrete = 2300;
	var InterpolateLinear = 2301;
	var InterpolateSmooth = 2302;
	var ZeroCurvatureEnding = 2400;
	var ZeroSlopeEnding = 2401;
	var WrapAroundEnding = 2402;
	var TrianglesDrawMode = 0;
	var TriangleStripDrawMode = 1;
	var TriangleFanDrawMode = 2;
	var LinearEncoding = 3000;
	var sRGBEncoding = 3001;
	var GammaEncoding = 3007;
	var RGBEEncoding = 3002;
	var LogLuvEncoding = 3003;
	var RGBM7Encoding = 3004;
	var RGBM16Encoding = 3005;
	var RGBDEncoding = 3006;
	var BasicDepthPacking = 3200;
	var RGBADepthPacking = 3201;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _Math = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,

		generateUUID: function () {

			// http://www.broofa.com/Tools/Math.uuid.htm

			var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
			var uuid = new Array( 36 );
			var rnd = 0, r;

			return function generateUUID() {

				for ( var i = 0; i < 36; i ++ ) {

					if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

						uuid[ i ] = '-';

					} else if ( i === 14 ) {

						uuid[ i ] = '4';

					} else {

						if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
						r = rnd & 0xf;
						rnd = rnd >> 4;
						uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

					}

				}

				return uuid.join( '' );

			};

		}(),

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// https://en.wikipedia.org/wiki/Linear_interpolation

		lerp: function ( x, y, t ) {

			return ( 1 - t ) * x + t * y;

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		random16: function () {

			console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * _Math.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * _Math.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		nearestPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

		},

		nextPowerOfTwo: function ( value ) {

			value --;
			value |= value >> 1;
			value |= value >> 2;
			value |= value >> 4;
			value |= value >> 8;
			value |= value >> 16;
			value ++;

			return value;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	function Vector2( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	}

	Vector2.prototype = {

		constructor: Vector2,

		isVector2: true,

		get width() {

			return this.x;

		},

		set width( value ) {

			this.x = value;

		},

		get height() {

			return this.y;

		},

		set height( value ) {

			this.y = value;

		},

		//

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}
			
			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;

			} else {

				this.x = 0;
				this.y = 0;

			}

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector2();
					max = new Vector2();

				}

				min.set( minVal, minVal );
				max.set( maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		lengthManhattan: function() {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( this.y, this.x );

			if ( angle < 0 ) angle += 2 * Math.PI;

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		distanceToManhattan: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		Object.defineProperty( this, 'id', { value: TextureIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.sourceFile = '';

		this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : RGBAFormat;
		this.type = type !== undefined ? type : UnsignedByteType;

		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)


		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding !== undefined ? encoding :  LinearEncoding;

		this.version = 0;
		this.onUpdate = null;

	}

	Texture.DEFAULT_IMAGE = undefined;
	Texture.DEFAULT_MAPPING = UVMapping;

	Texture.prototype = {

		constructor: Texture,

		isTexture: true,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;

			return this;

		},

		toJSON: function ( meta ) {

			if ( meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			function getDataURL( image ) {

				var canvas;

				if ( image.toDataURL !== undefined ) {

					canvas = image;

				} else {

					canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = image.width;
					canvas.height = image.height;

					canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

				}

				if ( canvas.width > 2048 || canvas.height > 2048 ) {

					return canvas.toDataURL( 'image/jpeg', 0.6 );

				} else {

					return canvas.toDataURL( 'image/png' );

				}

			}

			var output = {
				metadata: {
					version: 4.4,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				wrap: [ this.wrapS, this.wrapT ],

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,

				flipY: this.flipY
			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = _Math.generateUUID(); // UGH

				}

				if ( meta.images[ image.uuid ] === undefined ) {

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: getDataURL( image )
					};

				}

				output.image = image.uuid;

			}

			meta.textures[ this.uuid ] = output;

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== UVMapping )  return;

			uv.multiply( this.repeat );
			uv.add( this.offset );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

		}

	};

	Object.assign( Texture.prototype, EventDispatcher.prototype );

	var count = 0;
	function TextureIdCount() { return count++; }

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector4( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	}

	Vector4.prototype = {

		constructor: Vector4,

		isVector4: true,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}
			
			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;
				this.w = 0;

			}

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				 this.x = 1;
				 this.y = 0;
				 this.z = 0;

			} else {

				 this.x = q.x / s;
				 this.y = q.y / s;
				 this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector4();
					max = new Vector4();

				}

				min.set( minVal, minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];
			this.w = attribute.array[ index + 3 ];

			return this;

		}

	};

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	function WebGLRenderTarget( width, height, options ) {

		this.uuid = _Math.generateUUID();

		this.width = width;
		this.height = height;

		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new Vector4( 0, 0, width, height );

		options = options || {};

		if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

		this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

	}

	Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {

		isWebGLRenderTarget: true,

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com
	 */

	function WebGLRenderTargetCube( width, height, options ) {

		WebGLRenderTarget.call( this, width, height, options );

		this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
		this.activeMipMapLevel = 0;

	}

	WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
	WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

	WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Quaternion( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	}

	Quaternion.prototype = {

		constructor: Quaternion,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get w () {

			return this._w;

		},

		set w ( value ) {

			this._w = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this.onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( (euler && euler.isEuler) === false ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var c1 = Math.cos( euler._x / 2 );
			var c2 = Math.cos( euler._y / 2 );
			var c3 = Math.cos( euler._z / 2 );
			var s1 = Math.sin( euler._x / 2 );
			var s2 = Math.sin( euler._y / 2 );
			var s3 = Math.sin( euler._z / 2 );

			var order = euler.order;

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this.onChangeCallback();

			return this;

		},

		setFromUnitVectors: function () {

			// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

			// assumes direction vectors vFrom and vTo are normalized

			var v1, r;

			var EPS = 0.000001;

			return function setFromUnitVectors( vFrom, vTo ) {

				if ( v1 === undefined ) v1 = new Vector3();

				r = vFrom.dot( vTo ) + 1;

				if ( r < EPS ) {

					r = 0;

					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

						v1.set( - vFrom.y, vFrom.x, 0 );

					} else {

						v1.set( 0, - vFrom.z, vFrom.y );

					}

				} else {

					v1.crossVectors( vFrom, vTo );

				}

				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;

				return this.normalize();

			};

		}(),

		inverse: function () {

			return this.conjugate().normalize();

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this.onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this.onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		premultiply: function ( q ) {

			return this.multiplyQuaternions( q, this );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this.onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

			if ( Math.abs( sinHalfTheta ) < 0.001 ) {

				this._w = 0.5 * ( w + this._w );
				this._x = 0.5 * ( x + this._x );
				this._y = 0.5 * ( y + this._y );
				this._z = 0.5 * ( z + this._z );

				return this;

			}

			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this.onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	Object.assign( Quaternion, {

		slerp: function( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function(
				dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author *kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector3( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	}

	Vector3.prototype = {

		constructor: Vector3,

		isVector3: true,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}
			
			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;

			}

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function () {

			var quaternion;

			return function applyEuler( euler ) {

				if ( (euler && euler.isEuler) === false ) {

					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

				}

				if ( quaternion === undefined ) quaternion = new Quaternion();

				return this.applyQuaternion( quaternion.setFromEuler( euler ) );

			};

		}(),

		applyAxisAngle: function () {

			var quaternion;

			return function applyAxisAngle( axis, angle ) {

				if ( quaternion === undefined ) quaternion = new Quaternion();

				return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

			};

		}(),

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyMatrix4: function ( m ) {

			// input: THREE.Matrix4 affine matrix

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];

			return this;

		},

		applyProjection: function ( m ) {

			// input: THREE.Matrix4 projection matrix

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;
			var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			var ix =  qw * x + qy * z - qz * y;
			var iy =  qw * y + qz * x - qx * z;
			var iz =  qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function () {

			var matrix;

			return function project( camera ) {

				if ( matrix === undefined ) matrix = new Matrix4();

				matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
				return this.applyProjection( matrix );

			};

		}(),

		unproject: function () {

			var matrix;

			return function unproject( camera ) {

				if ( matrix === undefined ) matrix = new Matrix4();

				matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
				return this.applyProjection( matrix );

			};

		}(),

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector3();
					max = new Vector3();

				}

				min.set( minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			var x = this.x, y = this.y, z = this.z;

			this.x = y * v.z - z * v.y;
			this.y = z * v.x - x * v.z;
			this.z = x * v.y - y * v.x;

			return this;

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function ( vector ) {

			var scalar = vector.dot( this ) / vector.lengthSq();

			return this.copy( vector ).multiplyScalar( scalar );

		},

		projectOnPlane: function () {

			var v1;

			return function projectOnPlane( planeNormal ) {

				if ( v1 === undefined ) v1 = new Vector3();

				v1.copy( this ).projectOnVector( planeNormal );

				return this.sub( v1 );

			};

		}(),

		reflect: function () {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			var v1;

			return function reflect( normal ) {

				if ( v1 === undefined ) v1 = new Vector3();

				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

			};

		}(),

		angleTo: function ( v ) {

			var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

			// clamp, to handle numerical problems

			return Math.acos( _Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		distanceToManhattan: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		},

		setFromSpherical: function( s ) {

			var sinPhiRadius = Math.sin( s.phi ) * s.radius;

			this.x = sinPhiRadius * Math.sin( s.theta );
			this.y = Math.cos( s.phi ) * s.radius;
			this.z = sinPhiRadius * Math.cos( s.theta );

			return this;

		},

		setFromMatrixPosition: function ( m ) {

			return this.setFromMatrixColumn( m, 3 );

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( m, index ) {

			if ( typeof m === 'number' ) {

				console.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );
				var temp = m;
				m = index;
				index = temp;

			}

			return this.fromArray( m.elements, index * 4 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];

			return this;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Matrix4() {

		this.elements = new Float32Array( [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Matrix4.prototype = {

		constructor: Matrix4,

		isMatrix4: true,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			this.elements.set( m.elements );

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0,       0,       0,       1
			);

			return this;

		},

		extractRotation: function () {

			var v1;

			return function extractRotation( m ) {

				if ( v1 === undefined ) v1 = new Vector3();

				var te = this.elements;
				var me = m.elements;

				var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
				var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
				var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;

				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;

				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;

				return this;

			};

		}(),

		makeRotationFromEuler: function ( euler ) {

			if ( (euler && euler.isEuler) === false ) {

				console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			var te = this.elements;

			var x = q.x, y = q.y, z = q.z, w = q.w;
			var x2 = x + x, y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			te[ 0 ] = 1 - ( yy + zz );
			te[ 4 ] = xy - wz;
			te[ 8 ] = xz + wy;

			te[ 1 ] = xy + wz;
			te[ 5 ] = 1 - ( xx + zz );
			te[ 9 ] = yz - wx;

			te[ 2 ] = xz - wy;
			te[ 6 ] = yz + wx;
			te[ 10 ] = 1 - ( xx + yy );

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		lookAt: function () {

			var x, y, z;

			return function lookAt( eye, target, up ) {

				if ( x === undefined ) {

					x = new Vector3();
					y = new Vector3();
					z = new Vector3();

				}

				var te = this.elements;

				z.subVectors( eye, target ).normalize();

				if ( z.lengthSq() === 0 ) {

					z.z = 1;

				}

				x.crossVectors( up, z ).normalize();

				if ( x.lengthSq() === 0 ) {

					z.z += 0.0001;
					x.crossVectors( up, z ).normalize();

				}

				y.crossVectors( z, x );


				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

				return this;

			};

		}(),

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyToArray: function ( a, b, r ) {

			var te = this.elements;

			this.multiplyMatrices( a, b );

			r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
			r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
			r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
			r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function applyToVector3Array( array, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix4( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix4( this );

					buffer.setXYZ( j, v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
					"- just use .toArray instead." );

			return this.toArray( array, offset );

		},

		getPosition: function () {

			var v1;

			return function getPosition() {

				if ( v1 === undefined ) v1 = new Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

				return v1.setFromMatrixColumn( this, 3 );

			};

		}(),

		setPosition: function ( v ) {

			var te = this.elements;

			te[ 12 ] = v.x;
			te[ 13 ] = v.y;
			te[ 14 ] = v.z;

			return this;

		},

		getInverse: function ( m, throwOnDegenerate ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements,
				me = m.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) {

				var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0,  0, 0,
				0, c, - s, 0,
				0, s,  c, 0,
				0, 0,  0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s,  c, 0, 0,
				0,  0, 1, 0,
				0,  0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			this.makeRotationFromQuaternion( quaternion );
			this.scale( scale );
			this.setPosition( position );

			return this;

		},

		decompose: function () {

			var vector, matrix;

			return function decompose( position, quaternion, scale ) {

				if ( vector === undefined ) {

					vector = new Vector3();
					matrix = new Matrix4();

				}

				var te = this.elements;

				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) {

					sx = - sx;

				}

				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];

				// scale the rotation part

				matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;

				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;

				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;

				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;

				quaternion.setFromRotationMatrix( matrix );

				scale.x = sx;
				scale.y = sy;
				scale.z = sz;

				return this;

			};

		}(),

		makeFrustum: function ( left, right, bottom, top, near, far ) {

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makePerspective: function ( fov, aspect, near, far ) {

			var ymax = near * Math.tan( _Math.DEG2RAD * fov * 0.5 );
			var ymin = - ymax;
			var xmin = ymin * aspect;
			var xmax = ymax * aspect;

			return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );

			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for( var i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ]  = te[ 8 ];
			array[ offset + 9 ]  = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

		Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.flipY = false;

	}

	CubeTexture.prototype = Object.create( Texture.prototype );
	CubeTexture.prototype.constructor = CubeTexture;

	CubeTexture.prototype.isCubeTexture = true;

	Object.defineProperty( CubeTexture.prototype, 'images', {

		get: function () {

			return this.image;

		},

		set: function ( value ) {

			this.image = value;

		}

	} );

	/**
	 * @author tschw
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [renderer] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'renderer' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (renderer factorizations):
	 *
	 * .upload( gl, seq, values, renderer )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (renderer factorizations):
	 *
	 * .setValue( gl, name, value )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .set( gl, obj, prop )
	 *
	 * 		sets uniform from object and property with same name than uniform
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */

	var emptyTexture = new Texture();
	var emptyCubeTexture = new CubeTexture();

	// --- Base for inner nodes (including the root) ---

	function UniformContainer() {

		this.seq = [];
		this.map = {};

	}

	// --- Utilities ---

	// Array Caches (provide typed arrays for temporary by size)

	var arrayCacheF32 = [];
	var arrayCacheI32 = [];

	// Flattening for arrays of vectors and matrices

	function flatten( array, nBlocks, blockSize ) {

		var firstElem = array[ 0 ];

		if ( firstElem <= 0 || firstElem > 0 ) return array;
		// unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		var n = nBlocks * blockSize,
			r = arrayCacheF32[ n ];

		if ( r === undefined ) {

			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;

		}

		if ( nBlocks !== 0 ) {

			firstElem.toArray( r, 0 );

			for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

				offset += blockSize;
				array[ i ].toArray( r, offset );

			}

		}

		return r;

	}

	// Texture unit allocation

	function allocTexUnits( renderer, n ) {

		var r = arrayCacheI32[ n ];

		if ( r === undefined ) {

			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;

		}

		for ( var i = 0; i !== n; ++ i )
			r[ i ] = renderer.allocTextureUnit();

		return r;

	}

	// --- Setters ---

	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.

	// Single scalar

	function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }
	function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }

	// Single float vector (from flat array or THREE.VectorN)

	function setValue2fv( gl, v ) {

		if ( v.x === undefined ) gl.uniform2fv( this.addr, v );
		else gl.uniform2f( this.addr, v.x, v.y );

	}

	function setValue3fv( gl, v ) {

		if ( v.x !== undefined )
			gl.uniform3f( this.addr, v.x, v.y, v.z );
		else if ( v.r !== undefined )
			gl.uniform3f( this.addr, v.r, v.g, v.b );
		else
			gl.uniform3fv( this.addr, v );

	}

	function setValue4fv( gl, v ) {

		if ( v.x === undefined ) gl.uniform4fv( this.addr, v );
		else gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

	}

	// Single matrix (from flat array or MatrixN)

	function setValue2fm( gl, v ) {

		gl.uniformMatrix2fv( this.addr, false, v.elements || v );

	}

	function setValue3fm( gl, v ) {

		gl.uniformMatrix3fv( this.addr, false, v.elements || v );

	}

	function setValue4fm( gl, v ) {

		gl.uniformMatrix4fv( this.addr, false, v.elements || v );

	}

	// Single texture (2D / Cube)

	function setValueT1( gl, v, renderer ) {

		var unit = renderer.allocTextureUnit();
		gl.uniform1i( this.addr, unit );
		renderer.setTexture2D( v || emptyTexture, unit );

	}

	function setValueT6( gl, v, renderer ) {

		var unit = renderer.allocTextureUnit();
		gl.uniform1i( this.addr, unit );
		renderer.setTextureCube( v || emptyCubeTexture, unit );

	}

	// Integer / Boolean vectors or arrays thereof (always flat arrays)

	function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }
	function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }
	function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }

	// Helper to pick the right setter for the singular case

	function getSingularSetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1f; // FLOAT
			case 0x8b50: return setValue2fv; // _VEC2
			case 0x8b51: return setValue3fv; // _VEC3
			case 0x8b52: return setValue4fv; // _VEC4

			case 0x8b5a: return setValue2fm; // _MAT2
			case 0x8b5b: return setValue3fm; // _MAT3
			case 0x8b5c: return setValue4fm; // _MAT4

			case 0x8b5e: return setValueT1; // SAMPLER_2D
			case 0x8b60: return setValueT6; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// Array of scalars

	function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }
	function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }

	// Array of vectors (flat or from THREE classes)

	function setValueV2a( gl, v ) {

		gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

	}

	function setValueV3a( gl, v ) {

		gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

	}

	function setValueV4a( gl, v ) {

		gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

	}

	// Array of matrices (flat or from THREE clases)

	function setValueM2a( gl, v ) {

		gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

	}

	function setValueM3a( gl, v ) {

		gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

	}

	function setValueM4a( gl, v ) {

		gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

	}

	// Array of textures (2D / Cube)

	function setValueT1a( gl, v, renderer ) {

		var n = v.length,
			units = allocTexUnits( renderer, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

		}

	}

	function setValueT6a( gl, v, renderer ) {

		var n = v.length,
			units = allocTexUnits( renderer, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

		}

	}

	// Helper to pick the right setter for a pure (bottom-level) array

	function getPureArraySetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1fv; // FLOAT
			case 0x8b50: return setValueV2a; // _VEC2
			case 0x8b51: return setValueV3a; // _VEC3
			case 0x8b52: return setValueV4a; // _VEC4

			case 0x8b5a: return setValueM2a; // _MAT2
			case 0x8b5b: return setValueM3a; // _MAT3
			case 0x8b5c: return setValueM4a; // _MAT4

			case 0x8b5e: return setValueT1a; // SAMPLER_2D
			case 0x8b60: return setValueT6a; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// --- Uniform Classes ---

	function SingleUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.setValue = getSingularSetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function PureArrayUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function StructuredUniform( id ) {

		this.id = id;

		UniformContainer.call( this ); // mix-in

	}

	StructuredUniform.prototype.setValue = function( gl, value ) {

		// Note: Don't need an extra 'renderer' parameter, since samplers
		// are not allowed in structured uniforms.

		var seq = this.seq;

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			u.setValue( gl, value[ u.id ] );

		}

	};

	// --- Top-level ---

	// Parser - builds up the property tree from the path strings

	var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

	// extracts
	// 	- the identifier (member name or array index)
	//  - followed by an optional right bracket (found when array index)
	//  - followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform( container, uniformObject ) {

		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;

	}

	function parseUniform( activeInfo, addr, container ) {

		var path = activeInfo.name,
			pathLength = path.length;

		// reset RegExp object, because of the early exit of a previous run
		RePathPart.lastIndex = 0;

		for (; ;) {

			var match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex,

				id = match[ 1 ],
				idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];

			if ( idIsIndex ) id = id | 0; // convert to integer

			if ( subscript === undefined ||
					subscript === '[' && matchEnd + 2 === pathLength ) {
				// bare name or "pure" bottom-level array "[0]" suffix

				addUniform( container, subscript === undefined ?
						new SingleUniform( id, activeInfo, addr ) :
						new PureArrayUniform( id, activeInfo, addr ) );

				break;

			} else {
				// step into inner node / create it in case it doesn't exist

				var map = container.map,
					next = map[ id ];

				if ( next === undefined ) {

					next = new StructuredUniform( id );
					addUniform( container, next );

				}

				container = next;

			}

		}

	}

	// Root Container

	function WebGLUniforms( gl, program, renderer ) {

		UniformContainer.call( this );

		this.renderer = renderer;

		var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

		for ( var i = 0; i !== n; ++ i ) {

			var info = gl.getActiveUniform( program, i ),
				path = info.name,
				addr = gl.getUniformLocation( program, path );

			parseUniform( info, addr, this );

		}

	}

	WebGLUniforms.prototype.setValue = function( gl, name, value ) {

		var u = this.map[ name ];

		if ( u !== undefined ) u.setValue( gl, value, this.renderer );

	};

	WebGLUniforms.prototype.set = function( gl, object, name ) {

		var u = this.map[ name ];

		if ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );

	};

	WebGLUniforms.prototype.setOptional = function( gl, object, name ) {

		var v = object[ name ];

		if ( v !== undefined ) this.setValue( gl, name, v );

	};


	// Static interface

	WebGLUniforms.upload = function( gl, seq, values, renderer ) {

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ],
				v = values[ u.id ];

			if ( v.needsUpdate !== false ) {
				// note: always updating when .needsUpdate is undefined

				u.setValue( gl, v.value, renderer );

			}

		}

	};

	WebGLUniforms.seqWithValue = function( seq, values ) {

		var r = [];

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			if ( u.id in values ) r.push( u );

		}

		return r;

	};

	/**
	 * Uniform Utilities
	 */

	var UniformsUtils = {

		merge: function ( uniforms ) {

			var merged = {};

			for ( var u = 0; u < uniforms.length; u ++ ) {

				var tmp = this.clone( uniforms[ u ] );

				for ( var p in tmp ) {

					merged[ p ] = tmp[ p ];

				}

			}

			return merged;

		},

		clone: function ( uniforms_src ) {

			var uniforms_dst = {};

			for ( var u in uniforms_src ) {

				uniforms_dst[ u ] = {};

				for ( var p in uniforms_src[ u ] ) {

					var parameter_src = uniforms_src[ u ][ p ];

					if ( parameter_src && ( parameter_src.isColor ||
						parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
						parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
						parameter_src.isTexture ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.clone();

					} else if ( Array.isArray( parameter_src ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.slice();

					} else {

						uniforms_dst[ u ][ p ] = parameter_src;

					}

				}

			}

			return uniforms_dst;

		}

	};

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

	var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "\nvec3 transformed = vec3( position );\n";

	var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

	var bsdfs = "bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

	var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

	var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

	var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

	var defaultnormal_vertex = "#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

	var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

	var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

	var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

	var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#include <normal_flip>\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#include <normal_flip>\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

	var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\t\t\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

	var logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

	var map_particle_fragment = "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

	var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

	var normal_flip = "#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n";

	var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

	var project_vertex = "#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

	var tonemapping_pars_fragment = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

	var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

	var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";

	var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n";

	var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

	var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

	var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var distanceRGBA_frag = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";

	var distanceRGBA_vert = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n";

	var equirect_frag = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

	var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight;\n\treflectedLight.directDiffuse = vec3( 0.0 );\n\treflectedLight.directSpecular = vec3( 0.0 );\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\n\treflectedLight.indirectSpecular = vec3( 0.0 );\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n}\n";

	var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var normal_frag = "uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n\t#include <logdepthbuf_fragment>\n}\n";

	var normal_vert = "varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var shadow_frag = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n";

	var shadow_vert = "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_vertex: envmap_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars: lights_pars,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_template: lights_template,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_flip: normal_flip,
		normal_fragment: normal_fragment,
		normalmap_pars_fragment: normalmap_pars_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,

		cube_frag: cube_frag,
		cube_vert: cube_vert,
		depth_frag: depth_frag,
		depth_vert: depth_vert,
		distanceRGBA_frag: distanceRGBA_frag,
		distanceRGBA_vert: distanceRGBA_vert,
		equirect_frag: equirect_frag,
		equirect_vert: equirect_vert,
		linedashed_frag: linedashed_frag,
		linedashed_vert: linedashed_vert,
		meshbasic_frag: meshbasic_frag,
		meshbasic_vert: meshbasic_vert,
		meshlambert_frag: meshlambert_frag,
		meshlambert_vert: meshlambert_vert,
		meshphong_frag: meshphong_frag,
		meshphong_vert: meshphong_vert,
		meshphysical_frag: meshphysical_frag,
		meshphysical_vert: meshphysical_vert,
		normal_frag: normal_frag,
		normal_vert: normal_vert,
		points_frag: points_frag,
		points_vert: points_vert,
		shadow_frag: shadow_frag,
		shadow_vert: shadow_vert
	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Color( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string
			return this.set( r );

		}

		return this.setRGB( r, g, b );

	}

	Color.prototype = {

		constructor: Color,

		isColor: true,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( (value && value.isColor) ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

			return this;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function () {

			function hue2rgb( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			}

			return function setHSL( h, s, l ) {

				// h,s,l ranges are in 0.0 - 1.0
				h = _Math.euclideanModulo( h, 1 );
				s = _Math.clamp( s, 0, 1 );
				l = _Math.clamp( l, 0, 1 );

				if ( s === 0 ) {

					this.r = this.g = this.b = l;

				} else {

					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;

					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );

				}

				return this;

			};

		}(),

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				// color keywords
				var hex = ColorKeywords[ style ];

				if ( hex !== undefined ) {

					// red
					this.setHex( hex );

				} else {

					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );

				}

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function () {

			var r = this.r, g = this.g, b = this.b;

			this.r = r * r;
			this.g = g * g;
			this.b = b * b;

			return this;

		},

		convertLinearToGamma: function () {

			this.r = Math.sqrt( this.r );
			this.g = Math.sqrt( this.g );
			this.b = Math.sqrt( this.b );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( optionalTarget ) {

			// h,s,l ranges are in 0.0 - 1.0

			var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			hsl.h = hue;
			hsl.s = saturation;
			hsl.l = lightness;

			return hsl;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function ( h, s, l ) {

			var hsl = this.getHSL();

			hsl.h += h; hsl.s += s; hsl.l += l;

			this.setHSL( hsl.h, hsl.s, hsl.l );

			return this;

		},

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		sub: function( color ) {

			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		},

		toJSON: function () {

			return this.getHex();

		}

	};

	var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	/**
	 * Uniforms library for shared webgl shaders
	 */

	var UniformsLib = {

		common: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },

			map: { value: null },
			offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },

			specularMap: { value: null },
			alphaMap: { value: null },

			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 },
			refractionRatio: { value: 0.98 }

		},

		aomap: {

			aoMap: { value: null },
			aoMapIntensity: { value: 1 }

		},

		lightmap: {

			lightMap: { value: null },
			lightMapIntensity: { value: 1 }

		},

		emissivemap: {

			emissiveMap: { value: null }

		},

		bumpmap: {

			bumpMap: { value: null },
			bumpScale: { value: 1 }

		},

		normalmap: {

			normalMap: { value: null },
			normalScale: { value: new Vector2( 1, 1 ) }

		},

		displacementmap: {

			displacementMap: { value: null },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }

		},

		roughnessmap: {

			roughnessMap: { value: null }

		},

		metalnessmap: {

			metalnessMap: { value: null }

		},

		fog: {

			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: new Color( 0xffffff ) }

		},

		lights: {

			ambientLightColor: { value: [] },

			directionalLights: { value: [], properties: {
				direction: {},
				color: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },

			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			spotShadowMap: { value: [] },
			spotShadowMatrix: { value: [] },

			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },

			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} }

		},

		points: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */

	var ShaderLib = {

		basic: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.fog

			] ),

			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag

		},

		lambert: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.fog,
				UniformsLib.lights,

				{
					emissive : { value: new Color( 0x000000 ) }
				}

			] ),

			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag

		},

		phong: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				UniformsLib.lights,

				{
					emissive : { value: new Color( 0x000000 ) },
					specular : { value: new Color( 0x111111 ) },
					shininess: { value: 30 }
				}

			] ),

			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag

		},

		standard: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,

				{
					emissive : { value: new Color( 0x000000 ) },
					roughness: { value: 0.5 },
					metalness: { value: 0 },
					envMapIntensity : { value: 1 }, // temporary
				}

			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		},

		points: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.points,
				UniformsLib.fog

			] ),

			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag

		},

		dashed: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.fog,

				{
					scale    : { value: 1 },
					dashSize : { value: 1 },
					totalSize: { value: 2 }
				}

			] ),

			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag

		},

		depth: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.displacementmap

			] ),

			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag

		},

		normal: {

			uniforms: {

				opacity : { value: 1.0 }

			},

			vertexShader: ShaderChunk.normal_vert,
			fragmentShader: ShaderChunk.normal_frag

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		cube: {

			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},

			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		equirect: {

			uniforms: {
				tEquirect: { value: null },
				tFlip: { value: - 1 }
			},

			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag

		},

		distanceRGBA: {

			uniforms: {

				lightPos: { value: new Vector3() }

			},

			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag

		}

	};

	ShaderLib.physical = {

		uniforms: UniformsUtils.merge( [

			ShaderLib.standard.uniforms,

			{
				clearCoat: { value: 0 },
				clearCoatRoughness: { value: 0 }
			}

		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	};

	/**
	 * @author bhouston / http://clara.io
	 */

	function Box2( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

	}

	Box2.prototype = {

		constructor: Box2,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector2();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
			     point.y < this.min.y || point.y > this.max.y ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new Vector2();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
			     box.max.y < this.min.y || box.min.y > this.max.y ) {

				return false;

			}

			return true;

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector2();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function LensFlarePlugin( renderer, flares ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var shader, program, attributes, uniforms;

		var tempTexture, occlusionTexture;

		function init() {

			var vertices = new Float32Array( [
				- 1, - 1,  0, 0,
				 1, - 1,  1, 0,
				 1,  1,  1, 1,
				- 1,  1,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			// buffers

			vertexBuffer     = gl.createBuffer();
			elementBuffer    = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			// textures

			tempTexture      = gl.createTexture();
			occlusionTexture = gl.createTexture();

			state.bindTexture( gl.TEXTURE_2D, tempTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			shader = {

				vertexShader: [

					"uniform lowp int renderType;",

					"uniform vec3 screenPosition;",
					"uniform vec2 scale;",
					"uniform float rotation;",

					"uniform sampler2D occlusionMap;",

					"attribute vec2 position;",
					"attribute vec2 uv;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						"vUV = uv;",

						"vec2 pos = position;",

						"if ( renderType == 2 ) {",

							"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

							"vVisibility =        visibility.r / 9.0;",
							"vVisibility *= 1.0 - visibility.g / 9.0;",
							"vVisibility *=       visibility.b / 9.0;",
							"vVisibility *= 1.0 - visibility.a / 9.0;",

							"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
							"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

						"}",

						"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

					"}"

				].join( "\n" ),

				fragmentShader: [

					"uniform lowp int renderType;",

					"uniform sampler2D map;",
					"uniform float opacity;",
					"uniform vec3 color;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						// pink square

						"if ( renderType == 0 ) {",

							"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

						// restore

						"} else if ( renderType == 1 ) {",

							"gl_FragColor = texture2D( map, vUV );",

						// flare

						"} else {",

							"vec4 texture = texture2D( map, vUV );",
							"texture.a *= opacity * vVisibility;",
							"gl_FragColor = texture;",
							"gl_FragColor.rgb *= color;",

						"}",

					"}"

				].join( "\n" )

			};

			program = createProgram( shader );

			attributes = {
				vertex: gl.getAttribLocation ( program, "position" ),
				uv:     gl.getAttribLocation ( program, "uv" )
			};

			uniforms = {
				renderType:     gl.getUniformLocation( program, "renderType" ),
				map:            gl.getUniformLocation( program, "map" ),
				occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
				opacity:        gl.getUniformLocation( program, "opacity" ),
				color:          gl.getUniformLocation( program, "color" ),
				scale:          gl.getUniformLocation( program, "scale" ),
				rotation:       gl.getUniformLocation( program, "rotation" ),
				screenPosition: gl.getUniformLocation( program, "screenPosition" )
			};

		}

		/*
		 * Render lens flares
		 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
		 *         reads these back and calculates occlusion.
		 */

		this.render = function ( scene, camera, viewport ) {

			if ( flares.length === 0 ) return;

			var tempPosition = new Vector3();

			var invAspect = viewport.w / viewport.z,
				halfViewportWidth = viewport.z * 0.5,
				halfViewportHeight = viewport.w * 0.5;

			var size = 16 / viewport.w,
				scale = new Vector2( size * invAspect, size );

			var screenPosition = new Vector3( 1, 1, 0 ),
				screenPositionPixels = new Vector2( 1, 1 );

			var validArea = new Box2();

			validArea.min.set( viewport.x, viewport.y );
			validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.vertex );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			// loop through all lens flares to update their occlusion and positions
			// setup gl and common used attribs/uniforms

			gl.uniform1i( uniforms.occlusionMap, 0 );
			gl.uniform1i( uniforms.map, 1 );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			state.disable( gl.CULL_FACE );
			state.setDepthWrite( false );

			for ( var i = 0, l = flares.length; i < l; i ++ ) {

				size = 16 / viewport.w;
				scale.set( size * invAspect, size );

				// calc object screen position

				var flare = flares[ i ];

				tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

				tempPosition.applyMatrix4( camera.matrixWorldInverse );
				tempPosition.applyProjection( camera.projectionMatrix );

				// setup arrays for gl programs

				screenPosition.copy( tempPosition );

				// horizontal and vertical coordinate of the lower left corner of the pixels to copy

				screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
				screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

				// screen cull

				if ( validArea.containsPoint( screenPositionPixels ) === true ) {

					// save current RGB to temp texture

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, null );
					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// render pink quad

					gl.uniform1i( uniforms.renderType, 0 );
					gl.uniform2f( uniforms.scale, scale.x, scale.y );
					gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

					state.disable( gl.BLEND );
					state.enable( gl.DEPTH_TEST );

					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// copy result to occlusionMap

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// restore graphics

					gl.uniform1i( uniforms.renderType, 1 );
					state.disable( gl.DEPTH_TEST );

					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// update object positions

					flare.positionScreen.copy( screenPosition );

					if ( flare.customUpdateCallback ) {

						flare.customUpdateCallback( flare );

					} else {

						flare.updateLensFlares();

					}

					// render flares

					gl.uniform1i( uniforms.renderType, 2 );
					state.enable( gl.BLEND );

					for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

						var sprite = flare.lensFlares[ j ];

						if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

							screenPosition.x = sprite.x;
							screenPosition.y = sprite.y;
							screenPosition.z = sprite.z;

							size = sprite.size * sprite.scale / viewport.w;

							scale.x = size * invAspect;
							scale.y = size;

							gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
							gl.uniform2f( uniforms.scale, scale.x, scale.y );
							gl.uniform1f( uniforms.rotation, sprite.rotation );

							gl.uniform1f( uniforms.opacity, sprite.opacity );
							gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

							state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
							renderer.setTexture2D( sprite.texture, 1 );

							gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

						}

					}

				}

			}

			// restore gl

			state.enable( gl.CULL_FACE );
			state.enable( gl.DEPTH_TEST );
			state.setDepthWrite( true );

			renderer.resetGLState();

		};

		function createProgram( shader ) {

			var program = gl.createProgram();

			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
			var vertexShader = gl.createShader( gl.VERTEX_SHADER );

			var prefix = "precision " + renderer.getPrecision() + " float;\n";

			gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
			gl.shaderSource( vertexShader, prefix + shader.vertexShader );

			gl.compileShader( fragmentShader );
			gl.compileShader( vertexShader );

			gl.attachShader( program, fragmentShader );
			gl.attachShader( program, vertexShader );

			gl.linkProgram( program );

			return program;

		}

	}

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpritePlugin( renderer, sprites ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;

		var texture;

		// decompose matrixWorld

		var spritePosition = new Vector3();
		var spriteRotation = new Quaternion();
		var spriteScale = new Vector3();

		function init() {

			var vertices = new Float32Array( [
				- 0.5, - 0.5,  0, 0,
				  0.5, - 0.5,  1, 0,
				  0.5,   0.5,  1, 1,
				- 0.5,   0.5,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			vertexBuffer  = gl.createBuffer();
			elementBuffer = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			program = createProgram();

			attributes = {
				position:			gl.getAttribLocation ( program, 'position' ),
				uv:					gl.getAttribLocation ( program, 'uv' )
			};

			uniforms = {
				uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
				uvScale:			gl.getUniformLocation( program, 'uvScale' ),

				rotation:			gl.getUniformLocation( program, 'rotation' ),
				scale:				gl.getUniformLocation( program, 'scale' ),

				color:				gl.getUniformLocation( program, 'color' ),
				map:				gl.getUniformLocation( program, 'map' ),
				opacity:			gl.getUniformLocation( program, 'opacity' ),

				modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
				projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

				fogType:			gl.getUniformLocation( program, 'fogType' ),
				fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
				fogNear:			gl.getUniformLocation( program, 'fogNear' ),
				fogFar:				gl.getUniformLocation( program, 'fogFar' ),
				fogColor:			gl.getUniformLocation( program, 'fogColor' ),

				alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
			};

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = 8;
			canvas.height = 8;

			var context = canvas.getContext( '2d' );
			context.fillStyle = 'white';
			context.fillRect( 0, 0, 8, 8 );

			texture = new Texture( canvas );
			texture.needsUpdate = true;

		}

		this.render = function ( scene, camera ) {

			if ( sprites.length === 0 ) return;

			// setup gl

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.position );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			state.disable( gl.CULL_FACE );
			state.enable( gl.BLEND );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			state.activeTexture( gl.TEXTURE0 );
			gl.uniform1i( uniforms.map, 0 );

			var oldFogType = 0;
			var sceneFogType = 0;
			var fog = scene.fog;

			if ( fog ) {

				gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

				if ( (fog && fog.isFog) ) {

					gl.uniform1f( uniforms.fogNear, fog.near );
					gl.uniform1f( uniforms.fogFar, fog.far );

					gl.uniform1i( uniforms.fogType, 1 );
					oldFogType = 1;
					sceneFogType = 1;

				} else if ( (fog && fog.isFogExp2) ) {

					gl.uniform1f( uniforms.fogDensity, fog.density );

					gl.uniform1i( uniforms.fogType, 2 );
					oldFogType = 2;
					sceneFogType = 2;

				}

			} else {

				gl.uniform1i( uniforms.fogType, 0 );
				oldFogType = 0;
				sceneFogType = 0;

			}


			// update positions and sort

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];

				sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
				sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

			}

			sprites.sort( painterSortStable );

			// render all sprites

			var scale = [];

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];
				var material = sprite.material;

				if ( material.visible === false ) continue;

				gl.uniform1f( uniforms.alphaTest, material.alphaTest );
				gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

				sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

				scale[ 0 ] = spriteScale.x;
				scale[ 1 ] = spriteScale.y;

				var fogType = 0;

				if ( scene.fog && material.fog ) {

					fogType = sceneFogType;

				}

				if ( oldFogType !== fogType ) {

					gl.uniform1i( uniforms.fogType, fogType );
					oldFogType = fogType;

				}

				if ( material.map !== null ) {

					gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
					gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

				} else {

					gl.uniform2f( uniforms.uvOffset, 0, 0 );
					gl.uniform2f( uniforms.uvScale, 1, 1 );

				}

				gl.uniform1f( uniforms.opacity, material.opacity );
				gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

				gl.uniform1f( uniforms.rotation, material.rotation );
				gl.uniform2fv( uniforms.scale, scale );

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
				state.setDepthTest( material.depthTest );
				state.setDepthWrite( material.depthWrite );

				if ( material.map ) {

					renderer.setTexture2D( material.map, 0 );

				} else {

					renderer.setTexture2D( texture, 0 );

				}

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			}

			// restore gl

			state.enable( gl.CULL_FACE );

			renderer.resetGLState();

		};

		function createProgram() {

			var program = gl.createProgram();

			var vertexShader = gl.createShader( gl.VERTEX_SHADER );
			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

			gl.shaderSource( vertexShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform float rotation;',
				'uniform vec2 scale;',
				'uniform vec2 uvOffset;',
				'uniform vec2 uvScale;',

				'attribute vec2 position;',
				'attribute vec2 uv;',

				'varying vec2 vUV;',

				'void main() {',

					'vUV = uvOffset + uv * uvScale;',

					'vec2 alignedPosition = position * scale;',

					'vec2 rotatedPosition;',
					'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
					'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

					'vec4 finalPosition;',

					'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
					'finalPosition.xy += rotatedPosition;',
					'finalPosition = projectionMatrix * finalPosition;',

					'gl_Position = finalPosition;',

				'}'

			].join( '\n' ) );

			gl.shaderSource( fragmentShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform vec3 color;',
				'uniform sampler2D map;',
				'uniform float opacity;',

				'uniform int fogType;',
				'uniform vec3 fogColor;',
				'uniform float fogDensity;',
				'uniform float fogNear;',
				'uniform float fogFar;',
				'uniform float alphaTest;',

				'varying vec2 vUV;',

				'void main() {',

					'vec4 texture = texture2D( map, vUV );',

					'if ( texture.a < alphaTest ) discard;',

					'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

					'if ( fogType > 0 ) {',

						'float depth = gl_FragCoord.z / gl_FragCoord.w;',
						'float fogFactor = 0.0;',

						'if ( fogType == 1 ) {',

							'fogFactor = smoothstep( fogNear, fogFar, depth );',

						'} else {',

							'const float LOG2 = 1.442695;',
							'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
							'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

						'}',

						'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

					'}',

				'}'

			].join( '\n' ) );

			gl.compileShader( vertexShader );
			gl.compileShader( fragmentShader );

			gl.attachShader( program, vertexShader );
			gl.attachShader( program, fragmentShader );

			gl.linkProgram( program );

			return program;

		}

		function painterSortStable( a, b ) {

			if ( a.renderOrder !== b.renderOrder ) {

				return a.renderOrder - b.renderOrder;

			} else if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return b.id - a.id;

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Material() {

		Object.defineProperty( this, 'id', { value: MaterialIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.fog = true;
		this.lights = true;

		this.blending = NormalBlending;
		this.side = FrontSide;
		this.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading
		this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

		this.opacity = 1;
		this.transparent = false;

		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.alphaTest = 0;
		this.premultipliedAlpha = false;

		this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

		this.visible = true;

		this._needsUpdate = true;

	}

	Material.prototype = {

		constructor: Material,

		isMaterial: true,

		get needsUpdate() {

			return this._needsUpdate;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.update();
			this._needsUpdate = value;

		},

		setValues: function ( values ) {

			if ( values === undefined ) return;

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( (currentValue && currentValue.isColor) ) {

					currentValue.set( newValue );

				} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {

					currentValue.copy( newValue );

				} else if ( key === 'overdraw' ) {

					// ensure overdraw is backwards-compatible with legacy boolean type
					this[ key ] = Number( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = meta === undefined;

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.4,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) data.name = this.name;

			if ( (this.color && this.color.isColor) ) data.color = this.color.getHex();

			if ( this.roughness !== undefined ) data.roughness = this.roughness;
			if ( this.metalness !== undefined ) data.metalness = this.metalness;

			if ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();
			if ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;

			if ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;
			if ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
			if ( (this.bumpMap && this.bumpMap.isTexture) ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}
			if ( (this.normalMap && this.normalMap.isTexture) ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalScale = this.normalScale.toArray();

			}
			if ( (this.displacementMap && this.displacementMap.isTexture) ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}
			if ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

			if ( (this.envMap && this.envMap.isTexture) ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap

			}

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.blending !== NormalBlending ) data.blending = this.blending;
			if ( this.shading !== SmoothShading ) data.shading = this.shading;
			if ( this.side !== FrontSide ) data.side = this.side;
			if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;

			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;

			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
			if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
			if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

			data.skinning = this.skinning;
			data.morphTargets = this.morphTargets;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.fog = source.fog;
			this.lights = source.lights;

			this.blending = source.blending;
			this.side = source.side;
			this.shading = source.shading;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.alphaTest = source.alphaTest;

			this.premultipliedAlpha = source.premultipliedAlpha;

			this.overdraw = source.overdraw;

			this.visible = source.visible;
			this.clipShadows = source.clipShadows;
			this.clipIntersection = source.clipIntersection;

			var srcPlanes = source.clippingPlanes,
				dstPlanes = null;

			if ( srcPlanes !== null ) {

				var n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( var i = 0; i !== n; ++ i )
					dstPlanes[ i ] = srcPlanes[ i ].clone();

			}

			this.clippingPlanes = dstPlanes;

			return this;

		},

		update: function () {

			this.dispatchEvent( { type: 'update' } );

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	Object.assign( Material.prototype, EventDispatcher.prototype );

	var count$1 = 0;
	function MaterialIdCount() { return count$1++; }

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function ShaderMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
		this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.skinning = false; // set to use skinning attribute streams
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	}

	ShaderMaterial.prototype = Object.create( Material.prototype );
	ShaderMaterial.prototype.constructor = ShaderMaterial;

	ShaderMaterial.prototype.isShaderMaterial = true;

	ShaderMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = UniformsUtils.clone( source.uniforms );

		this.defines = source.defines;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.lights = source.lights;
		this.clipping = source.clipping;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = Material.prototype.toJSON.call( this, meta );

		data.uniforms = this.uniforms;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		return data;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshDepthMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	MeshDepthMaterial.prototype = Object.create( Material.prototype );
	MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	MeshDepthMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.depthPacking = source.depthPacking;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

	}

	Box3.prototype = {

		constructor: Box3,

		isBox3: true,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromArray: function ( array ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];

				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;

				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector3();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		setFromObject: function () {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			var v1 = new Vector3();

			return function setFromObject( object ) {

				var scope = this;

				object.updateMatrixWorld( true );

				this.makeEmpty();

				object.traverse( function ( node ) {

					var geometry = node.geometry;

					if ( geometry !== undefined ) {

						if ( (geometry && geometry.isGeometry) ) {

							var vertices = geometry.vertices;

							for ( var i = 0, il = vertices.length; i < il; i ++ ) {

								v1.copy( vertices[ i ] );
								v1.applyMatrix4( node.matrixWorld );

								scope.expandByPoint( v1 );

							}

						} else if ( (geometry && geometry.isBufferGeometry) ) {

							var attribute = geometry.attributes.position;

							if ( attribute !== undefined ) {

								var array, offset, stride;

								if ( (attribute && attribute.isInterleavedBufferAttribute) ) {

									array = attribute.data.array;
									offset = attribute.offset;
									stride = attribute.data.stride;

								} else {

									array = attribute.array;
									offset = 0;
									stride = 3;

								}

								for ( var i = offset, il = array.length; i < il; i += stride ) {

									v1.fromArray( array, i );
									v1.applyMatrix4( node.matrixWorld );

									scope.expandByPoint( v1 );

								}

							}

						}

					}

				} );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
					 point.y < this.min.y || point.y > this.max.y ||
					 point.z < this.min.z || point.z > this.max.z ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
				 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
				 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new Vector3();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
					 box.max.y < this.min.y || box.min.y > this.max.y ||
					 box.max.z < this.min.z || box.min.z > this.max.z ) {

				return false;

			}

			return true;

		},

		intersectsSphere: ( function () {

			var closestPoint;

			return function intersectsSphere( sphere ) {

				if ( closestPoint === undefined ) closestPoint = new Vector3();

				// Find the point on the AABB closest to the sphere center.
				this.clampPoint( sphere.center, closestPoint );

				// If that point is inside the sphere, the AABB and sphere intersect.
				return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

			};

		} )(),

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= plane.constant && max >= plane.constant );

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector3();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		getBoundingSphere: function () {

			var v1 = new Vector3();

			return function getBoundingSphere( optionalTarget ) {

				var result = optionalTarget || new Sphere();

				this.getCenter( result.center );

				result.radius = this.getSize( v1 ).length() * 0.5;

				return result;

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if( this.isEmpty() ) this.makeEmpty();

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function () {

			var points = [
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3()
			];

			return function applyMatrix4( matrix ) {

				// transform of empty box is an empty box.
				if( this.isEmpty() ) return this;

				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

				this.setFromPoints( points );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Sphere( center, radius ) {

		this.center = ( center !== undefined ) ? center : new Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	}

	Sphere.prototype = {

		constructor: Sphere,

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function () {

			var box = new Box3();

			return function setFromPoints( points, optionalCenter ) {

				var center = this.center;

				if ( optionalCenter !== undefined ) {

					center.copy( optionalCenter );

				} else {

					box.setFromPoints( points ).getCenter( center );

				}

				var maxRadiusSq = 0;

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

				}

				this.radius = Math.sqrt( maxRadiusSq );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			// We use the following equation to compute the signed distance from
			// the center of the sphere to the plane.
			//
			// distance = q * n - d
			//
			// If this distance is greater than the radius of the sphere,
			// then there is no intersection.

			return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

		},

		clampPoint: function ( point, optionalTarget ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			var result = optionalTarget || new Vector3();

			result.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				result.sub( this.center ).normalize();
				result.multiplyScalar( this.radius ).add( this.center );

			}

			return result;

		},

		getBoundingBox: function ( optionalTarget ) {

			var box = optionalTarget || new Box3();

			box.set( this.center, this.center );
			box.expandByScalar( this.radius );

			return box;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */

	function Matrix3() {

		this.elements = new Float32Array( [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Matrix3.prototype = {

		constructor: Matrix3,

		isMatrix3: true,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 3 ], me[ 6 ],
				me[ 1 ], me[ 4 ], me[ 7 ],
				me[ 2 ], me[ 5 ], me[ 8 ]

			);

			return this;

		},

		setFromMatrix4: function( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[  8 ],
				me[ 1 ], me[ 5 ], me[  9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function applyToVector3Array( array, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix3( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix3( this );

					buffer.setXYZ( j, v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			if ( (matrix && matrix.isMatrix4) ) {

				console.error( "THREE.Matrix3.getInverse no longer takes a Matrix4 argument." );

			}

			var me = matrix.elements,
				te = this.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) {

				var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();
			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
					"- just use .toArray instead." );

			return this.toArray( array, offset );

		},

		getNormalMatrix: function ( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for( var i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ]  = te[ 8 ];

			return array;

		}

	};

	/**
	 * @author bhouston / http://clara.io
	 */

	function Plane( normal, constant ) {

		this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	}

	Plane.prototype = {

		constructor: Plane,

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

			return this;

		},

		setFromCoplanarPoints: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function setFromCoplanarPoints( a, b, c ) {

				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

				this.setFromNormalAndCoplanarPoint( normal, a );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, optionalTarget ) {

			return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

		},

		orthoPoint: function ( point, optionalTarget ) {

			var perpendicularMagnitude = this.distanceToPoint( point );

			var result = optionalTarget || new Vector3();
			return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

		},

		intersectLine: function () {

			var v1 = new Vector3();

			return function intersectLine( line, optionalTarget ) {

				var result = optionalTarget || new Vector3();

				var direction = line.delta( v1 );

				var denominator = this.normal.dot( direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {

						return result.copy( line.start );

					}

					// Unsure if this is the correct method to handle this case.
					return undefined;

				}

				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

				if ( t < 0 || t > 1 ) {

					return undefined;

				}

				return result.copy( direction ).multiplyScalar( t ).add( line.start );

			};

		}(),

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function () {

			var v1 = new Vector3();
			var m1 = new Matrix3();

			return function applyMatrix4( matrix, optionalNormalMatrix ) {

				var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

				// transform normal based on theory here:
				// http://www.songho.ca/opengl/gl_normaltransform.html
				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
				var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

				// recalculate constant (like in setFromNormalAndCoplanarPoint)
				this.constant = - referencePoint.dot( normal );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.constant = this.constant - offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	function Frustum( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new Plane(),
			( p1 !== undefined ) ? p1 : new Plane(),
			( p2 !== undefined ) ? p2 : new Plane(),
			( p3 !== undefined ) ? p3 : new Plane(),
			( p4 !== undefined ) ? p4 : new Plane(),
			( p5 !== undefined ) ? p5 : new Plane()

		];

	}

	Frustum.prototype = {

		constructor: Frustum,

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function () {

			var sphere = new Sphere();

			return function intersectsObject( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere )
					.applyMatrix4( object.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSprite: function () {

			var sphere = new Sphere();

			return function intersectsSprite( sprite ) {

				sphere.center.set( 0, 0, 0 );
				sphere.radius = 0.7071067811865476;
				sphere.applyMatrix4( sprite.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function () {

			var p1 = new Vector3(),
				p2 = new Vector3();

			return function intersectsBox( box ) {

				var planes = this.planes;

				for ( var i = 0; i < 6 ; i ++ ) {

					var plane = planes[ i ];

					p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
					p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
					p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
					p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

					var d1 = plane.distanceToPoint( p1 );
					var d2 = plane.distanceToPoint( p2 );

					// if both outside plane, no intersection

					if ( d1 < 0 && d2 < 0 ) {

						return false;

					}

				}

				return true;

			};

		}(),


		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {

		var _gl = _renderer.context,
		_state = _renderer.state,
		_frustum = new Frustum(),
		_projScreenMatrix = new Matrix4(),

		_lightShadows = _lights.shadows,

		_shadowMapSize = new Vector2(),
		_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),

		_lookTarget = new Vector3(),
		_lightPositionWorld = new Vector3(),

		_renderList = [],

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants ),

		_materialCache = {};

		var cubeDirections = [
			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
		];

		var cubeUps = [
			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
		];

		var cube2DViewPorts = [
			new Vector4(), new Vector4(), new Vector4(),
			new Vector4(), new Vector4(), new Vector4()
		];

		// init

		var depthMaterialTemplate = new MeshDepthMaterial();
		depthMaterialTemplate.depthPacking = RGBADepthPacking;
		depthMaterialTemplate.clipping = true;

		var distanceShader = ShaderLib[ "distanceRGBA" ];
		var distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );

		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;

			var depthMaterial = depthMaterialTemplate.clone();
			depthMaterial.morphTargets = useMorphing;
			depthMaterial.skinning = useSkinning;

			_depthMaterials[ i ] = depthMaterial;

			var distanceMaterial = new ShaderMaterial( {
				defines: {
					'USE_SHADOWMAP': ''
				},
				uniforms: distanceUniforms,
				vertexShader: distanceShader.vertexShader,
				fragmentShader: distanceShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning,
				clipping: true
			} );

			_distanceMaterials[ i ] = distanceMaterial;

		}

		//

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = PCFShadowMap;

		this.renderReverseSided = true;
		this.renderSingleSided = true;

		this.render = function ( scene, camera ) {

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			if ( _lightShadows.length === 0 ) return;

			// Set GL state for depth map.
			_state.clearColor( 1, 1, 1, 1 );
			_state.disable( _gl.BLEND );
			_state.setDepthTest( true );
			_state.setScissorTest( false );

			// render depth map

			var faceCount, isPointLight;

			for ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {

				var light = _lightShadows[ i ];
				var shadow = light.shadow;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				var shadowCamera = shadow.camera;

				_shadowMapSize.copy( shadow.mapSize );
				_shadowMapSize.min( _maxShadowMapSize );

				if ( (light && light.isPointLight) ) {

					faceCount = 6;
					isPointLight = true;

					var vpWidth = _shadowMapSize.x;
					var vpHeight = _shadowMapSize.y;

					// These viewports map a cube-map onto a 2D texture with the
					// following orientation:
					//
					//  xzXZ
					//   y Y
					//
					// X - Positive x direction
					// x - Negative x direction
					// Y - Positive y direction
					// y - Negative y direction
					// Z - Positive z direction
					// z - Negative z direction

					// positive X
					cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
					// negative X
					cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
					// positive Z
					cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
					// negative Z
					cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
					// positive Y
					cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
					// negative Y
					cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

					_shadowMapSize.x *= 4.0;
					_shadowMapSize.y *= 2.0;

				} else {

					faceCount = 1;
					isPointLight = false;

				}

				if ( shadow.map === null ) {

					var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

					shadowCamera.updateProjectionMatrix();

				}

				if ( (shadow && shadow.isSpotLightShadow) ) {

					shadow.update( light );

				}

				var shadowMap = shadow.map;
				var shadowMatrix = shadow.matrix;

				_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( _lightPositionWorld );

				_renderer.setRenderTarget( shadowMap );
				_renderer.clear();

				// render shadow map for each cube face (if omni-directional) or
				// run a single pass if not

				for ( var face = 0; face < faceCount; face ++ ) {

					if ( isPointLight ) {

						_lookTarget.copy( shadowCamera.position );
						_lookTarget.add( cubeDirections[ face ] );
						shadowCamera.up.copy( cubeUps[ face ] );
						shadowCamera.lookAt( _lookTarget );

						var vpDimensions = cube2DViewPorts[ face ];
						_state.viewport( vpDimensions );

					} else {

						_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
						shadowCamera.lookAt( _lookTarget );

					}

					shadowCamera.updateMatrixWorld();
					shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

					// compute shadow matrix

					shadowMatrix.set(
						0.5, 0.0, 0.0, 0.5,
						0.0, 0.5, 0.0, 0.5,
						0.0, 0.0, 0.5, 0.5,
						0.0, 0.0, 0.0, 1.0
					);

					shadowMatrix.multiply( shadowCamera.projectionMatrix );
					shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

					// update camera matrices and frustum

					_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
					_frustum.setFromMatrix( _projScreenMatrix );

					// set object matrices & frustum culling

					_renderList.length = 0;

					projectObject( scene, camera, shadowCamera );

					// render shadow map
					// render regular objects

					for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {

						var object = _renderList[ j ];
						var geometry = _objects.update( object );
						var material = object.material;

						if ( (material && material.isMultiMaterial) ) {

							var groups = geometry.groups;
							var materials = material.materials;

							for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

								var group = groups[ k ];
								var groupMaterial = materials[ group.materialIndex ];

								if ( groupMaterial.visible === true ) {

									var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
									_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

								}

							}

						} else {

							var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

						}

					}

				}

			}

			// Restore GL state.
			var clearColor = _renderer.getClearColor(),
			clearAlpha = _renderer.getClearAlpha();
			_renderer.setClearColor( clearColor, clearAlpha );

			scope.needsUpdate = false;

		};

		function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

			var geometry = object.geometry;

			var result = null;

			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;

			if ( isPointLight ) {

				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;

			}

			if ( ! customMaterial ) {

				var useMorphing = false;

				if ( material.morphTargets ) {

					if ( (geometry && geometry.isBufferGeometry) ) {

						useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

					} else if ( (geometry && geometry.isGeometry) ) {

						useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

					}

				}

				var useSkinning = object.isSkinnedMesh && material.skinning;

				var variantIndex = 0;

				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;

				result = materialVariants[ variantIndex ];

			} else {

				result = customMaterial;

			}

			if ( _renderer.localClippingEnabled &&
				 material.clipShadows === true &&
					material.clippingPlanes.length !== 0 ) {

				// in this case we need a unique material instance reflecting the
				// appropriate state

				var keyA = result.uuid, keyB = material.uuid;

				var materialsForVariant = _materialCache[ keyA ];

				if ( materialsForVariant === undefined ) {

					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;

				}

				var cachedMaterial = materialsForVariant[ keyB ];

				if ( cachedMaterial === undefined ) {

					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;

				}

				result = cachedMaterial;

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			var side = material.side;

			if ( scope.renderSingleSided && side == DoubleSide ) {

				side = FrontSide;

			}

			if ( scope.renderReverseSided ) {

				if ( side === FrontSide ) side = BackSide;
				else if ( side === BackSide ) side = FrontSide;

			}

			result.side = side;

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( isPointLight && result.uniforms.lightPos !== undefined ) {

				result.uniforms.lightPos.value.copy( lightPositionWorld );

			}

			return result;

		}

		function projectObject( object, camera, shadowCamera ) {

			if ( object.visible === false ) return;

			var visible = ( object.layers.mask & camera.layers.mask ) !== 0;

			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

				if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {

					var material = object.material;

					if ( material.visible === true ) {

						object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
						_renderList.push( object );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, shadowCamera );

			}

		}

	}

	/**
	 * @author bhouston / http://clara.io
	 */

	function Ray( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new Vector3();
		this.direction = ( direction !== undefined ) ? direction : new Vector3();

	}

	Ray.prototype = {

		constructor: Ray,

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		lookAt: function ( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		},

		recast: function () {

			var v1 = new Vector3();

			return function recast( t ) {

				this.origin.copy( this.at( t, v1 ) );

				return this;

			};

		}(),

		closestPointToPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			result.subVectors( point, this.origin );
			var directionDistance = result.dot( this.direction );

			if ( directionDistance < 0 ) {

				return result.copy( this.origin );

			}

			return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function () {

			var v1 = new Vector3();

			return function distanceSqToPoint( point ) {

				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

				// point behind the ray

				if ( directionDistance < 0 ) {

					return this.origin.distanceToSquared( point );

				}

				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

				return v1.distanceToSquared( point );

			};

		}(),

		distanceSqToSegment: function () {

			var segCenter = new Vector3();
			var segDir = new Vector3();
			var diff = new Vector3();

			return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment

				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );

				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;

				if ( det > 0 ) {

					// The ray and segment are not parallel.

					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;

					if ( s0 >= 0 ) {

						if ( s1 >= - extDet ) {

							if ( s1 <= extDet ) {

								// region 0
								// Minimum at interior points of ray and segment.

								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

							} else {

								// region 1

								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							// region 5

							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						if ( s1 <= - extDet ) {

							// region 4

							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						} else if ( s1 <= extDet ) {

							// region 3

							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;

						} else {

							// region 2

							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					}

				} else {

					// Ray and segment are parallel.

					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

				if ( optionalPointOnRay ) {

					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

				}

				if ( optionalPointOnSegment ) {

					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

				}

				return sqrDist;

			};

		}(),

		intersectSphere: function () {

			var v1 = new Vector3();

			return function intersectSphere( sphere, optionalTarget ) {

				v1.subVectors( sphere.center, this.origin );
				var tca = v1.dot( this.direction );
				var d2 = v1.dot( v1 ) - tca * tca;
				var radius2 = sphere.radius * sphere.radius;

				if ( d2 > radius2 ) return null;

				var thc = Math.sqrt( radius2 - d2 );

				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;

				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;

				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) return null;

				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) return this.at( t1, optionalTarget );

				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, optionalTarget );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) <= sphere.radius;

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t :  null;

		},

		intersectPlane: function ( plane, optionalTarget ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, optionalTarget );

		},



		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, optionalTarget ) {

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

		},

		intersectsBox: ( function () {

			var v = new Vector3();

			return function intersectsBox( box ) {

				return this.intersectBox( box, v ) !== null;

			};

		} )(),

		intersectTriangle: function () {

			// Compute the offset origin, edges, and normal.
			var diff = new Vector3();
			var edge1 = new Vector3();
			var edge2 = new Vector3();
			var normal = new Vector3();

			return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );

				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( normal );
				var sign;

				if ( DdN > 0 ) {

					if ( backfaceCulling ) return null;
					sign = 1;

				} else if ( DdN < 0 ) {

					sign = - 1;
					DdN = - DdN;

				} else {

					return null;

				}

				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {

					return null;

				}

				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {

					return null;

				}

				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {

					return null;

				}

				// Line intersects triangle, check if ray does.
				var QdN = - sign * diff.dot( normal );

				// t < 0, no intersection
				if ( QdN < 0 ) {

					return null;

				}

				// Ray intersects triangle.
				return this.at( QdN / DdN, optionalTarget );

			};

		}(),

		applyMatrix4: function ( matrix4 ) {

			this.direction.add( this.origin ).applyMatrix4( matrix4 );
			this.origin.applyMatrix4( matrix4 );
			this.direction.sub( this.origin );
			this.direction.normalize();

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Euler( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || Euler.DefaultOrder;

	}

	Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	Euler.DefaultOrder = 'XYZ';

	Euler.prototype = {

		constructor: Euler,

		isEuler: true,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get order () {

			return this._order;

		},

		set order ( value ) {

			this._order = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = _Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.99999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.99999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

			}

			this._order = order;

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromQuaternion: function () {

			var matrix;

			return function setFromQuaternion( q, order, update ) {

				if ( matrix === undefined ) matrix = new Matrix4();

				matrix.makeRotationFromQuaternion( q );

				return this.setFromRotationMatrix( matrix, order, update );

			};

		}(),

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function () {

			// WARNING: this discards revolution information -bhouston

			var q = new Quaternion();

			return function reorder( newOrder ) {

				q.setFromEuler( this );

				return this.setFromQuaternion( q, newOrder );

			};

		}(),

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new Vector3( this._x, this._y, this._z );

			}

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Layers() {

		this.mask = 1;

	}

	Layers.prototype = {

		constructor: Layers,

		set: function ( channel ) {

			this.mask = 1 << channel;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel );

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	function Object3D() {

		Object.defineProperty( this, 'id', { value: Object3DIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D.DefaultUp.clone();

		var position = new Vector3();
		var rotation = new Euler();
		var quaternion = new Quaternion();
		var scale = new Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation.onChange( onRotationChange );
		quaternion.onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				enumerable: true,
				value: position
			},
			rotation: {
				enumerable: true,
				value: rotation
			},
			quaternion: {
				enumerable: true,
				value: quaternion
			},
			scale: {
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );

		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();

		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

		this.onBeforeRender = function(){}; 
		this.onAfterRender = function(){};

	}

	Object3D.DefaultUp = new Vector3( 0, 1, 0 );
	Object3D.DefaultMatrixAutoUpdate = true;

	Object.assign( Object3D.prototype, EventDispatcher.prototype, {

		isObject3D: true,

		applyMatrix: function ( matrix ) {

			this.matrix.multiplyMatrices( matrix, this.matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function () {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			var q1 = new Quaternion();

			return function rotateOnAxis( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.multiply( q1 );

				return this;

			};

		}(),

		rotateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function rotateX( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function rotateY( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function rotateZ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		translateOnAxis: function () {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			var v1 = new Vector3();

			return function translateOnAxis( axis, distance ) {

				v1.copy( axis ).applyQuaternion( this.quaternion );

				this.position.add( v1.multiplyScalar( distance ) );

				return this;

			};

		}(),

		translateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function translateX( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function translateY( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function translateZ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function () {

			var m1 = new Matrix4();

			return function worldToLocal( vector ) {

				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

			};

		}(),

		lookAt: function () {

			// This routine does not support objects with rotated and/or translated parent(s)

			var m1 = new Matrix4();

			return function lookAt( vector ) {

				m1.lookAt( vector, this.position, this.up );

				this.quaternion.setFromRotationMatrix( m1 );

			};

		}(),

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( (object && object.isObject3D) ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				object.dispatchEvent( { type: 'added' } );

				this.children.push( object );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;

				object.dispatchEvent( { type: 'removed' } );

				this.children.splice( index, 1 );

			}

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.updateMatrixWorld( true );

			return result.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function () {

			var position = new Vector3();
			var scale = new Vector3();

			return function getWorldQuaternion( optionalTarget ) {

				var result = optionalTarget || new Quaternion();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, result, scale );

				return result;

			};

		}(),

		getWorldRotation: function () {

			var quaternion = new Quaternion();

			return function getWorldRotation( optionalTarget ) {

				var result = optionalTarget || new Euler();

				this.getWorldQuaternion( quaternion );

				return result.setFromQuaternion( quaternion, this.rotation.order, false );

			};

		}(),

		getWorldScale: function () {

			var position = new Vector3();
			var quaternion = new Quaternion();

			return function getWorldScale( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, quaternion, result );

				return result;

			};

		}(),

		getWorldDirection: function () {

			var quaternion = new Quaternion();

			return function getWorldDirection( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.getWorldQuaternion( quaternion );

				return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

			};

		}(),

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate === true ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate === true || force === true ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( force );

			}

		},

		toJSON: function ( meta ) {

			// meta is '' when called from JSON.stringify
			var isRootObject = ( meta === undefined || meta === '' );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {}
				};

				output.metadata = {
					version: 4.4,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;

			object.matrix = this.matrix.toArray();

			//

			if ( this.geometry !== undefined ) {

				if ( meta.geometries[ this.geometry.uuid ] === undefined ) {

					meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );

				}

				object.geometry = this.geometry.uuid;

			}

			if ( this.material !== undefined ) {

				if ( meta.materials[ this.material.uuid ] === undefined ) {

					meta.materials[ this.material.uuid ] = this.material.toJSON( meta );

				}

				object.material = this.material.uuid;

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) recursive = true;

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	} );

	var count$2 = 0;
	function Object3DIdCount() { return count$2++; }

	/**
	 * @author bhouston / http://clara.io
	 */

	function Line3( start, end ) {

		this.start = ( start !== undefined ) ? start : new Vector3();
		this.end = ( end !== undefined ) ? end : new Vector3();

	}

	Line3.prototype = {

		constructor: Line3,

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function () {

			var startP = new Vector3();
			var startEnd = new Vector3();

			return function closestPointToPointParameter( point, clampToLine ) {

				startP.subVectors( point, this.start );
				startEnd.subVectors( this.end, this.start );

				var startEnd2 = startEnd.dot( startEnd );
				var startEnd_startP = startEnd.dot( startP );

				var t = startEnd_startP / startEnd2;

				if ( clampToLine ) {

					t = _Math.clamp( t, 0, 1 );

				}

				return t;

			};

		}(),

		closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			var result = optionalTarget || new Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Triangle( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new Vector3();
		this.b = ( b !== undefined ) ? b : new Vector3();
		this.c = ( c !== undefined ) ? c : new Vector3();

	}

	Triangle.normal = function () {

		var v0 = new Vector3();

		return function normal( a, b, c, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}();

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	Triangle.barycoordFromPoint = function () {

		var v0 = new Vector3();
		var v1 = new Vector3();
		var v2 = new Vector3();

		return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}();

	Triangle.containsPoint = function () {

		var v1 = new Vector3();

		return function containsPoint( point, a, b, c ) {

			var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}();

	Triangle.prototype = {

		constructor: Triangle,

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		area: function () {

			var v0 = new Vector3();
			var v1 = new Vector3();

			return function area() {

				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );

				return v0.cross( v1 ).length() * 0.5;

			};

		}(),

		midpoint: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		normal: function ( optionalTarget ) {

			return Triangle.normal( this.a, this.b, this.c, optionalTarget );

		},

		plane: function ( optionalTarget ) {

			var result = optionalTarget || new Plane();

			return result.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		barycoordFromPoint: function ( point, optionalTarget ) {

			return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

		},

		containsPoint: function ( point ) {

			return Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		closestPointToPoint: function () {

			var plane, edgeList, projectedPoint, closestPoint;

			return function closestPointToPoint( point, optionalTarget ) {

				if ( plane === undefined ) {

					plane = new Plane();
					edgeList = [ new Line3(), new Line3(), new Line3() ];
					projectedPoint = new Vector3();
					closestPoint = new Vector3();

				}

				var result = optionalTarget || new Vector3();
				var minDistance = Infinity;

				// project the point onto the plane of the triangle

				plane.setFromCoplanarPoints( this.a, this.b, this.c );
				plane.projectPoint( point, projectedPoint );

				// check if the projection lies within the triangle

				if( this.containsPoint( projectedPoint ) === true ) {

					// if so, this is the closest point

					result.copy( projectedPoint );

				} else {

					// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

					edgeList[ 0 ].set( this.a, this.b );
					edgeList[ 1 ].set( this.b, this.c );
					edgeList[ 2 ].set( this.c, this.a );

					for( var i = 0; i < edgeList.length; i ++ ) {

						edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

						var distance = projectedPoint.distanceToSquared( closestPoint );

						if( distance < minDistance ) {

							minDistance = distance;

							result.copy( closestPoint );

						}

					}

				}

				return result;

			};

		}(),

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Face3( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = (normal && normal.isVector3) ? normal : new Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = (color && color.isColor) ? color : new Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	}

	Face3.prototype = {

		constructor: Face3,

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */

	function MeshBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new Color( 0xffffff ); // emissive

		this.map = null;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;

		this.lights = false;

		this.setValues( parameters );

	}

	MeshBasicMaterial.prototype = Object.create( Material.prototype );
	MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	MeshBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferAttribute( array, itemSize, normalized ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.uuid = _Math.generateUUID();

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	BufferAttribute.prototype = {

		constructor: BufferAttribute,

		isBufferAttribute: true,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.itemSize : 0;
			this.array = array;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;

			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyIndicesArray: function ( indices ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				var index = indices[ i ];

				array[ offset ++ ] = index.a;
				array[ offset ++ ] = index.b;
				array[ offset ++ ] = index.c;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	//

	function Int8Attribute( array, itemSize ) {

		return new BufferAttribute( new Int8Array( array ), itemSize );

	}

	function Uint8Attribute( array, itemSize ) {

		return new BufferAttribute( new Uint8Array( array ), itemSize );

	}

	function Uint8ClampedAttribute( array, itemSize ) {

		return new BufferAttribute( new Uint8ClampedArray( array ), itemSize );

	}

	function Int16Attribute( array, itemSize ) {

		return new BufferAttribute( new Int16Array( array ), itemSize );

	}

	function Uint16Attribute( array, itemSize ) {

		return new BufferAttribute( new Uint16Array( array ), itemSize );

	}

	function Int32Attribute( array, itemSize ) {

		return new BufferAttribute( new Int32Array( array ), itemSize );

	}

	function Uint32Attribute( array, itemSize ) {

		return new BufferAttribute( new Uint32Array( array ), itemSize );

	}

	function Float32Attribute( array, itemSize ) {

		return new BufferAttribute( new Float32Array( array ), itemSize );

	}

	function Float64Attribute( array, itemSize ) {

		return new BufferAttribute( new Float64Array( array ), itemSize );

	}

	// Deprecated

	function DynamicBufferAttribute( array, itemSize ) {

		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new BufferAttribute( array, itemSize ).setDynamic( true );

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	function Geometry() {

		Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [ [] ];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.elementsNeedUpdate = false;
		this.verticesNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( Geometry.prototype, EventDispatcher.prototype, {

		isGeometry: true,

		applyMatrix: function ( matrix ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

			var tempNormals = [];
			var tempUVs = [];
			var tempUVs2 = [];

			for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

				scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

				if ( normals !== undefined ) {

					tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

				}

				if ( colors !== undefined ) {

					scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

				}

				if ( uvs !== undefined ) {

					tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

				}

				if ( uvs2 !== undefined ) {

					tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

				}

			}

			function addFace( a, b, c, materialIndex ) {

				var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
				var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

				var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

				}

			}

			if ( indices !== undefined ) {

				var groups = geometry.groups;

				if ( groups.length > 0 ) {

					for ( var i = 0; i < groups.length; i ++ ) {

						var group = groups[ i ];

						var start = group.start;
						var count = group.count;

						for ( var j = start, jl = start + count; j < jl; j += 3 ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );

						}

					}

				} else {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				}

			} else {

				for ( var i = 0; i < positions.length / 3; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.getCenter().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new Vector3(), ab = new Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			if ( areaWeighted === undefined ) areaWeighted = true;

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new Vector3(), ab = new Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				this.computeFaceNormals();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeFlatVertexNormals: function () {

			var f, fl, face;

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( face.normal );
					vertexNormals[ 1 ].copy( face.normal );
					vertexNormals[ 2 ].copy( face.normal );

				} else {

					vertexNormals[ 0 ] = face.normal.clone();
					vertexNormals[ 1 ] = face.normal.clone();
					vertexNormals[ 2 ] = face.normal.clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new Vector3();
						vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeTangents: function () {

			console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

		},

		computeLineDistances: function () {

			var d = 0;
			var vertices = this.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				if ( i > 0 ) {

					d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

				}

				this.lineDistances[ i ] = d;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( (geometry && geometry.isGeometry) === false ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ],
			colors1 = this.colors,
			colors2 = geometry.colors;

			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

			if ( matrix !== undefined ) {

				normalMatrix = new Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

				vertices1.push( vertexCopy );

			}

			// colors

			for ( var i = 0, il = colors2.length; i < il; i ++ ) {

				colors1.push( colors2[ i ].clone() );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

				faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( i = 0, il = uvs2.length; i < il; i ++ ) {

				var uv = uvs2[ i ], uvCopy = [];

				if ( uv === undefined ) {

					continue;

				}

				for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

					uvCopy.push( uv[ j ].clone() );

				}

				uvs1.push( uvCopy );

			}

		},

		mergeMesh: function ( mesh ) {

			if ( (mesh && mesh.isMesh) === false ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			mesh.matrixAutoUpdate && mesh.updateMatrix();

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				var dupIndex = - 1;

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						dupIndex = n;
						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

			}

			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new Geometry().copy( this );

		},

		copy: function ( source ) {

			this.vertices = [];
			this.faces = [];
			this.faceVertexUvs = [ [] ];
			this.colors = [];

			var vertices = source.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			var colors = source.colors;

			for ( var i = 0, il = colors.length; i < il; i ++ ) {

				this.colors.push( colors[ i ].clone() );

			}

			var faces = source.faces;

			for ( var i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	var count$3 = 0;
	function GeometryIdCount() { return count$3++; }

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectGeometry() {

		Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'DirectGeometry';

		this.indices = [];
		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {

		computeBoundingBox: Geometry.prototype.computeBoundingBox,
		computeBoundingSphere: Geometry.prototype.computeBoundingSphere,

		computeFaceNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );

		},

		computeVertexNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );

		},

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = [];

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = [];

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometry() {

		Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

	}

	Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {

		isBufferGeometry: true,

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			this.index = index;

		},

		addAttribute: function ( name, attribute ) {

			if ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

				return;

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return;

			}

			this.attributes[ name ] = attribute;

			return this;

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		removeAttribute: function ( name ) {

			delete this.attributes[ name ];

			return this;

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToVector3Array( position.array );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToVector3Array( normal.array );
				normal.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.getCenter().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( (object && object.isPoints) || (object && object.isLine) ) {

				var positions = new Float32Attribute( geometry.vertices.length * 3, 3 );
				var colors = new Float32Attribute( geometry.colors.length * 3, 3 );

				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );

					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( (object && object.isMesh) ) {

				if ( (geometry && geometry.isGeometry) ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( (object && object.isMesh) ) {

				var direct = geometry.__directGeometry;

				if ( geometry.elementsNeedUpdate === true ) {

					direct = undefined;
					geometry.elementsNeedUpdate = false;

				}

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			var attribute;

			if ( geometry.verticesNeedUpdate === true ) {

				attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			if ( geometry.indices.length > 0 ) {

				var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
				var indices = new TypeArray( geometry.indices.length * 3 );
				this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new Float32Attribute( morphTarget.length * 3, 3 );

					array.push( attribute.copyVector3sArray( morphTarget ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			var positions = this.attributes.position.array;

			if ( positions !== undefined ) {

				this.boundingBox.setFromArray( positions );

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		},

		computeBoundingSphere: function () {

			var box = new Box3();
			var vector = new Vector3();

			return function computeBoundingSphere() {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new Sphere();

				}

				var positions = this.attributes.position;

				if ( positions ) {

					var array = positions.array;
					var center = this.boundingSphere.center;

					box.setFromArray( array );
					box.getCenter( center );

					// hoping to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

					var maxRadiusSq = 0;

					for ( var i = 0, il = array.length; i < il; i += 3 ) {

						vector.fromArray( array, i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

					}

					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

					if ( isNaN( this.boundingSphere.radius ) ) {

						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

					}

				}

			};

		}(),

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;
			var groups = this.groups;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC,

				pA = new Vector3(),
				pB = new Vector3(),
				pC = new Vector3(),

				cb = new Vector3(),
				ab = new Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					if ( groups.length === 0 ) {

						this.addGroup( 0, indices.length );

					}

					for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

						var group = groups[ j ];

						var start = group.start;
						var count = group.count;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;

							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;

							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;

							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;

						}

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		merge: function ( geometry, offset ) {

			if ( (geometry && geometry.isBufferGeometry) === false ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) offset = 0;

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) continue;

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeSize = attribute2.itemSize;

				for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var normals = this.attributes.normal.array;

			var x, y, z, n;

			for ( var i = 0, il = normals.length; i < il; i += 3 ) {

				x = normals[ i ];
				y = normals[ i + 1 ];
				z = normals[ i + 2 ];

				n = 1.0 / Math.sqrt( x * x + y * y + z * z );

				normals[ i ] *= n;
				normals[ i + 1 ] *= n;
				normals[ i + 2 ] *= n;

			}

		},

		toNonIndexed: function () {

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;

			}

			var geometry2 = new BufferGeometry();

			var indices = this.index.array;
			var attributes = this.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];

				var array = attribute.array;
				var itemSize = attribute.itemSize;

				var array2 = new array.constructor( indices.length * itemSize );

				var index = 0, index2 = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					index = indices[ i ] * itemSize;

					for ( var j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

			}

			return geometry2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				var array = Array.prototype.slice.call( index.array );

				data.data.index = {
					type: index.array.constructor.name,
					array: array
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var array = Array.prototype.slice.call( attribute.array );

				data.data.attributes[ key ] = {
					itemSize: attribute.itemSize,
					type: attribute.array.constructor.name,
					array: array,
					normalized: attribute.normalized
				};

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			var attributes = source.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );

			}

			var groups = source.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	BufferGeometry.MaxIndex = 65535;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	function Mesh( geometry, material ) {

		Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = TrianglesDrawMode;

		this.updateMorphTargets();

	}

	Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Mesh,

		isMesh: true,

		setDrawMode: function ( value ) {

			this.drawMode = value;

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.drawMode = source.drawMode;

			return this;

		},

		updateMorphTargets: function () {

			var morphTargets = this.geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {

					this.morphTargetInfluences.push( 0 );
					this.morphTargetDictionary[ morphTargets[ m ].name ] = m;

				}

			}

		},

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			var vA = new Vector3();
			var vB = new Vector3();
			var vC = new Vector3();

			var tempA = new Vector3();
			var tempB = new Vector3();
			var tempC = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			var barycoord = new Vector3();

			var intersectionPoint = new Vector3();
			var intersectionPointWorld = new Vector3();

			function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

				Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

				uv1.multiplyScalar( barycoord.x );
				uv2.multiplyScalar( barycoord.y );
				uv3.multiplyScalar( barycoord.z );

				uv1.add( uv2 ).add( uv3 );

				return uv1.clone();

			}

			function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {

				var intersect;
				var material = object.material;

				if ( material.side === BackSide ) {

					intersect = ray.intersectTriangle( pC, pB, pA, true, point );

				} else {

					intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

				}

				if ( intersect === null ) return null;

				intersectionPointWorld.copy( point );
				intersectionPointWorld.applyMatrix4( object.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

				if ( distance < raycaster.near || distance > raycaster.far ) return null;

				return {
					distance: distance,
					point: intersectionPointWorld.clone(),
					object: object
				};

			}

			function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {

				vA.fromArray( positions, a * 3 );
				vB.fromArray( positions, b * 3 );
				vC.fromArray( positions, c * 3 );

				var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

				if ( intersection ) {

					if ( uvs ) {

						uvA.fromArray( uvs, a * 2 );
						uvB.fromArray( uvs, b * 2 );
						uvC.fromArray( uvs, c * 2 );

						intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );

					}

					intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
					intersection.faceIndex = a;

				}

				return intersection;

			}

			return function raycast( raycaster, intersects ) {

				var geometry = this.geometry;
				var material = this.material;
				var matrixWorld = this.matrixWorld;

				if ( material === undefined ) return;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				// Check boundingBox before continuing

				if ( geometry.boundingBox !== null ) {

					if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

				}

				var uvs, intersection;

				if ( (geometry && geometry.isBufferGeometry) ) {

					var a, b, c;
					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( attributes.uv !== undefined ) {

						uvs = attributes.uv.array;

					}

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length; i < l; i += 3 ) {

							a = indices[ i ];
							b = indices[ i + 1 ];
							c = indices[ i + 2 ];

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
								intersects.push( intersection );

							}

						}

					} else {


						for ( var i = 0, l = positions.length; i < l; i += 9 ) {

							a = i / 3;
							b = a + 1;
							c = a + 2;

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

							if ( intersection ) {

								intersection.index = a; // triangle number in positions buffer semantics
								intersects.push( intersection );

							}

						}

					}

				} else if ( (geometry && geometry.isGeometry) ) {

					var fvA, fvB, fvC;
					var isFaceMaterial = (material && material.isMultiMaterial);
					var materials = isFaceMaterial === true ? material.materials : null;

					var vertices = geometry.vertices;
					var faces = geometry.faces;
					var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
					if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

					for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

						var face = faces[ f ];
						var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;

						if ( faceMaterial === undefined ) continue;

						fvA = vertices[ face.a ];
						fvB = vertices[ face.b ];
						fvC = vertices[ face.c ];

						if ( faceMaterial.morphTargets === true ) {

							var morphTargets = geometry.morphTargets;
							var morphInfluences = this.morphTargetInfluences;

							vA.set( 0, 0, 0 );
							vB.set( 0, 0, 0 );
							vC.set( 0, 0, 0 );

							for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

								var influence = morphInfluences[ t ];

								if ( influence === 0 ) continue;

								var targets = morphTargets[ t ].vertices;

								vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
								vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
								vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

							}

							vA.add( fvA );
							vB.add( fvB );
							vC.add( fvC );

							fvA = vA;
							fvB = vB;
							fvC = vC;

						}

						intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

						if ( intersection ) {

							if ( uvs ) {

								var uvs_f = uvs[ f ];
								uvA.copy( uvs_f[ 0 ] );
								uvB.copy( uvs_f[ 1 ] );
								uvC.copy( uvs_f[ 2 ] );

								intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

							}

							intersection.face = face;
							intersection.faceIndex = f;
							intersects.push( intersection );

						}

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		BufferGeometry.call( this );

		this.type = 'BoxBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		var scope = this;

		// segments
		widthSegments = Math.floor( widthSegments ) || 1;
		heightSegments = Math.floor( heightSegments ) || 1;
		depthSegments = Math.floor( depthSegments ) || 1;

		// these are used to calculate buffer length
		var vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );
		var indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );

		// buffers
		var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
		var vertices = new Float32Array( vertexCount * 3 );
		var normals = new Float32Array( vertexCount * 3 );
		var uvs = new Float32Array( vertexCount * 2 );

		// offset variables
		var vertexBufferOffset = 0;
		var uvBufferOffset = 0;
		var indexBufferOffset = 0;
		var numberOfVertices = 0;

		// group variables
		var groupStart = 0;

		// build each side of the box geometry
		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
		buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
		buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
		buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
		buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz

		// build geometry
		this.setIndex( new BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

		// helper functions

		function calculateVertexCount( w, h, d ) {

			var vertices = 0;

			// calculate the amount of vertices for each side (plane)
			vertices += (w + 1) * (h + 1) * 2; // xy
			vertices += (w + 1) * (d + 1) * 2; // xz
			vertices += (d + 1) * (h + 1) * 2; // zy

			return vertices;

		}

		function calculateIndexCount( w, h, d ) {

			var index = 0;

			// calculate the amount of squares for each side
			index += w * h * 2; // xy
			index += w * d * 2; // xz
			index += d * h * 2; // zy

			return index * 6; // two triangles per square => six vertices per square

		}

		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

			var segmentWidth	= width / gridX;
			var segmentHeight = height / gridY;

			var widthHalf = width / 2;
			var heightHalf = height / 2;
			var depthHalf = depth / 2;

			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;

			var vertexCounter = 0;
			var groupCount = 0;

			var vector = new Vector3();

			// generate vertices, normals and uvs

			for ( var iy = 0; iy < gridY1; iy ++ ) {

				var y = iy * segmentHeight - heightHalf;

				for ( var ix = 0; ix < gridX1; ix ++ ) {

					var x = ix * segmentWidth - widthHalf;

					// set values to correct vector component
					vector[ u ] = x * udir;
					vector[ v ] = y * vdir;
					vector[ w ] = depthHalf;

					// now apply vector to vertex buffer
					vertices[ vertexBufferOffset ] = vector.x;
					vertices[ vertexBufferOffset + 1 ] = vector.y;
					vertices[ vertexBufferOffset + 2 ] = vector.z;

					// set values to correct vector component
					vector[ u ] = 0;
					vector[ v ] = 0;
					vector[ w ] = depth > 0 ? 1 : - 1;

					// now apply vector to normal buffer
					normals[ vertexBufferOffset ] = vector.x;
					normals[ vertexBufferOffset + 1 ] = vector.y;
					normals[ vertexBufferOffset + 2 ] = vector.z;

					// uvs
					uvs[ uvBufferOffset ] = ix / gridX;
					uvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );

					// update offsets and counters
					vertexBufferOffset += 3;
					uvBufferOffset += 2;
					vertexCounter += 1;

				}

			}

			// 1. you need three indices to draw a single face
			// 2. a single segment consists of two faces
			// 3. so we need to generate six (2*3) indices per segment

			for ( iy = 0; iy < gridY; iy ++ ) {

				for ( ix = 0; ix < gridX; ix ++ ) {

					// indices
					var a = numberOfVertices + ix + gridX1 * iy;
					var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
					var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

					// face one
					indices[ indexBufferOffset ] = a;
					indices[ indexBufferOffset + 1 ] = b;
					indices[ indexBufferOffset + 2 ] = d;

					// face two
					indices[ indexBufferOffset + 3 ] = b;
					indices[ indexBufferOffset + 4 ] = c;
					indices[ indexBufferOffset + 5 ] = d;

					// update offsets and counters
					indexBufferOffset += 6;
					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, materialIndex );

			// calculate new start value for groups
			groupStart += groupCount;

			// update total number of vertices
			numberOfVertices += vertexCounter;

		}

	}

	BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

		BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var vertices = new Float32Array( gridX1 * gridY1 * 3 );
		var normals = new Float32Array( gridX1 * gridY1 * 3 );
		var uvs = new Float32Array( gridX1 * gridY1 * 2 );

		var offset = 0;
		var offset2 = 0;

		for ( var iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( var ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices[ offset ] = x;
				vertices[ offset + 1 ] = - y;

				normals[ offset + 2 ] = 1;

				uvs[ offset2 ] = ix / gridX;
				uvs[ offset2 + 1 ] = 1 - ( iy / gridY );

				offset += 3;
				offset2 += 2;

			}

		}

		offset = 0;

		var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );

		for ( var iy = 0; iy < gridY; iy ++ ) {

			for ( var ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				indices[ offset ] = a;
				indices[ offset + 1 ] = b;
				indices[ offset + 2 ] = d;

				indices[ offset + 3 ] = b;
				indices[ offset + 4 ] = c;
				indices[ offset + 5 ] = d;

				offset += 6;

			}

		}

		this.setIndex( new BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	}

	PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function Camera() {

		Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4();
		this.projectionMatrix = new Matrix4();

	}

	Camera.prototype = Object.create( Object3D.prototype );
	Camera.prototype.constructor = Camera;

	Camera.prototype.isCamera = true;

	Camera.prototype.getWorldDirection = function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}();

	Camera.prototype.lookAt = function () {

		// This routine does not support cameras with rotated and/or translated parent(s)

		var m1 = new Matrix4();

		return function lookAt( vector ) {

			m1.lookAt( this.position, vector, this.up );

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}();

	Camera.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	Camera.prototype.copy = function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */

	function PerspectiveCamera( fov, aspect, near, far ) {

		Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.fov = fov !== undefined ? fov : 50;
		this.zoom = 1;

		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
		this.focus = 10;

		this.aspect = aspect !== undefined ? aspect : 1;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: PerspectiveCamera,

		isPerspectiveCamera: true,

		copy: function ( source ) {

			Camera.prototype.copy.call( this, source );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		},

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength: function ( focalLength ) {

			// see http://www.bobatkins.com/photography/technical/field_of_view.html
			var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		},

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength: function () {

			var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		},

		getEffectiveFOV: function () {

			return _Math.RAD2DEG * 2 * Math.atan(
					Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

		},

		getFilmWidth: function () {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		},

		getFilmHeight: function () {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		},

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			this.view = {
				fullWidth: fullWidth,
				fullHeight: fullHeight,
				offsetX: x,
				offsetY: y,
				width: width,
				height: height
			};

			this.updateProjectionMatrix();

		},

		clearViewOffset: function() {

			this.view = null;
			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var near = this.near,
				top = near * Math.tan(
						_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
				height = 2 * top,
				width = this.aspect * height,
				left = - 0.5 * width,
				view = this.view;

			if ( view !== null ) {

				var fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			var skew = this.filmOffset;
			if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

			this.projectionMatrix.makeFrustum(
					left, left + width, top - height, top, near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */

	function OrthographicCamera( left, right, top, bottom, near, far ) {

		Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	}

	OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: OrthographicCamera,

		isOrthographicCamera: true,

		copy: function ( source ) {

			Camera.prototype.copy.call( this, source );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		},

		setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {

			this.view = {
				fullWidth: fullWidth,
				fullHeight: fullHeight,
				offsetX: x,
				offsetY: y,
				width: width,
				height: height
			};

			this.updateProjectionMatrix();

		},

		clearViewOffset: function() {

			this.view = null;
			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var dx = ( this.right - this.left ) / ( 2 * this.zoom );
			var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			var cx = ( this.right + this.left ) / 2;
			var cy = ( this.top + this.bottom ) / 2;

			var left = cx - dx;
			var right = cx + dx;
			var top = cy + dy;
			var bottom = cy - dy;

			if ( this.view !== null ) {

				var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
				var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
				var scaleW = ( this.right - this.left ) / this.view.width;
				var scaleH = ( this.top - this.bottom ) / this.view.height;

				left += scaleW * ( this.view.offsetX / zoomW );
				right = left + scaleW * ( this.view.width / zoomW );
				top -= scaleH * ( this.view.offsetY / zoomH );
				bottom = top - scaleH * ( this.view.height / zoomH );

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, size;

		function setIndex( index ) {

			if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {

				type = gl.UNSIGNED_INT;
				size = 4;

			} else {

				type = gl.UNSIGNED_SHORT;
				size = 2;

			}

		}

		function render( start, count ) {

			gl.drawElements( mode, count, type, start * size );

			infoRender.calls ++;
			infoRender.vertices += count;

			if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

		}

		function renderInstances( geometry, start, count ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			extension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );

			infoRender.calls ++;
			infoRender.vertices += count * geometry.maxInstancedCount;

			if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

		}

		return {

			setMode: setMode,
			setIndex: setIndex,
			render: render,
			renderInstances: renderInstances

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBufferRenderer( gl, extensions, infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			gl.drawArrays( mode, start, count );

			infoRender.calls ++;
			infoRender.vertices += count;

			if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

		}

		function renderInstances( geometry ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			var position = geometry.attributes.position;

			var count = 0;

			if ( (position && position.isInterleavedBufferAttribute) ) {

				count = position.data.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			} else {

				count = position.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			}

			infoRender.calls ++;
			infoRender.vertices += count * geometry.maxInstancedCount;

			if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

		}

		return {
			setMode: setMode,
			render: render,
			renderInstances: renderInstances
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLLights() {

		var lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				var uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color(),

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function addLineNumbers( string ) {

		var lines = string.split( '\n' );

		for ( var i = 0; i < lines.length; i ++ ) {

			lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

		}

		return lines.join( '\n' );

	}

	function WebGLShader( gl, type, string ) {

		var shader = gl.createShader( type );

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

			console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

		}

		if ( gl.getShaderInfoLog( shader ) !== '' ) {

			console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

		}

		// --enable-privileged-webgl-extension
		// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		return shader;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var programIdCount = 0;

	function getEncodingComponents( encoding ) {

		switch ( encoding ) {

			case LinearEncoding:
				return [ 'Linear','( value )' ];
			case sRGBEncoding:
				return [ 'sRGB','( value )' ];
			case RGBEEncoding:
				return [ 'RGBE','( value )' ];
			case RGBM7Encoding:
				return [ 'RGBM','( value, 7.0 )' ];
			case RGBM16Encoding:
				return [ 'RGBM','( value, 16.0 )' ];
			case RGBDEncoding:
				return [ 'RGBD','( value, 256.0 )' ];
			case GammaEncoding:
				return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
			default:
				throw new Error( 'unsupported encoding: ' + encoding );

		}

	}

	function getTexelDecodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

	}

	function getTexelEncodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

	}

	function getToneMappingFunction( functionName, toneMapping ) {

		var toneMappingName;

		switch ( toneMapping ) {

			case LinearToneMapping:
				toneMappingName = "Linear";
				break;

			case ReinhardToneMapping:
				toneMappingName = "Reinhard";
				break;

			case Uncharted2ToneMapping:
				toneMappingName = "Uncharted2";
				break;

			case CineonToneMapping:
				toneMappingName = "OptimizedCineon";
				break;

			default:
				throw new Error( 'unsupported toneMapping: ' + toneMapping );

		}

		return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

	}

	function generateExtensions( extensions, parameters, rendererExtensions ) {

		extensions = extensions || {};

		var chunks = [
			( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
			( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateDefines( defines ) {

		var chunks = [];

		for ( var name in defines ) {

			var value = defines[ name ];

			if ( value === false ) continue;

			chunks.push( '#define ' + name + ' ' + value );

		}

		return chunks.join( '\n' );

	}

	function fetchAttributeLocations( gl, program, identifiers ) {

		var attributes = {};

		var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

		for ( var i = 0; i < n; i ++ ) {

			var info = gl.getActiveAttrib( program, i );
			var name = info.name;

			// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

			attributes[ name ] = gl.getAttribLocation( program, name );

		}

		return attributes;

	}

	function filterEmptyLine( string ) {

		return string !== '';

	}

	function replaceLightNums( string, parameters ) {

		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

	}

	function parseIncludes( string ) {

		var pattern = /#include +<([\w\d.]+)>/g;

		function replace( match, include ) {

			var replace = ShaderChunk[ include ];

			if ( replace === undefined ) {

				throw new Error( 'Can not resolve #include <' + include + '>' );

			}

			return parseIncludes( replace );

		}

		return string.replace( pattern, replace );

	}

	function unrollLoops( string ) {

		var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

		function replace( match, start, end, snippet ) {

			var unroll = '';

			for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

				unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

			}

			return unroll;

		}

		return string.replace( pattern, replace );

	}

	function WebGLProgram( renderer, code, material, parameters ) {

		var gl = renderer.context;

		var extensions = material.extensions;
		var defines = material.defines;

		var vertexShader = material.__webglShader.vertexShader;
		var fragmentShader = material.__webglShader.fragmentShader;

		var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if ( parameters.shadowMapType === PCFShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

		}

		var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
		var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
		var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

		if ( parameters.envMap ) {

			switch ( material.envMap.mapping ) {

				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;

				case EquirectangularReflectionMapping:
				case EquirectangularRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
					break;

				case SphericalReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
					break;

			}

			switch ( material.envMap.mapping ) {

				case CubeRefractionMapping:
				case EquirectangularRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;

			}

			switch ( material.combine ) {

				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;

			}

		}

		var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

		// console.log( 'building new program ' );

		//

		var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

		var customDefines = generateDefines( defines );

		//

		var program = gl.createProgram();

		var prefixVertex, prefixFragment;

		if ( material.isRawShaderMaterial ) {

			prefixVertex = [

				customDefines,

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,
				customDefines,

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		} else {

			prefixVertex = [

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + material.__webglShader.name,

				customDefines,

				parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				'#define MAX_BONES ' + parameters.maxBones,

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.skinning ? '#define USE_SKINNING' : '',
				parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',

				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',

				'#ifdef USE_COLOR',

				'	attribute vec3 color;',

				'#endif',

				'#ifdef USE_MORPHTARGETS',

				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',

				'	#ifdef USE_MORPHNORMALS',

				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',

				'	#else',

				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',

				'	#endif',

				'#endif',

				'#ifdef USE_SKINNING',

				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',

				'#endif',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + material.__webglShader.name,

				customDefines,

				parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
				'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

				parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',

				( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

				( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
				parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
				parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
				parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
				parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

				parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		}

		vertexShader = parseIncludes( vertexShader, parameters );
		vertexShader = replaceLightNums( vertexShader, parameters );

		fragmentShader = parseIncludes( fragmentShader, parameters );
		fragmentShader = replaceLightNums( fragmentShader, parameters );

		if ( ! material.isShaderMaterial ) {

			vertexShader = unrollLoops( vertexShader );
			fragmentShader = unrollLoops( fragmentShader );

		}

		var vertexGlsl = prefixVertex + vertexShader;
		var fragmentGlsl = prefixFragment + fragmentShader;

		// console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
		var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );

		// Force a particular attribute to index 0.

		if ( material.index0AttributeName !== undefined ) {

			gl.bindAttribLocation( program, 0, material.index0AttributeName );

		} else if ( parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation( program, 0, 'position' );

		}

		gl.linkProgram( program );

		var programLog = gl.getProgramInfoLog( program );
		var vertexLog = gl.getShaderInfoLog( glVertexShader );
		var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

		var runnable = true;
		var haveDiagnostics = true;

		// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
		// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

		if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

			runnable = false;

			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

		} else if ( programLog !== '' ) {

			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

		} else if ( vertexLog === '' || fragmentLog === '' ) {

			haveDiagnostics = false;

		}

		if ( haveDiagnostics ) {

			this.diagnostics = {

				runnable: runnable,
				material: material,

				programLog: programLog,

				vertexShader: {

					log: vertexLog,
					prefix: prefixVertex

				},

				fragmentShader: {

					log: fragmentLog,
					prefix: prefixFragment

				}

			};

		}

		// clean up

		gl.deleteShader( glVertexShader );
		gl.deleteShader( glFragmentShader );

		// set up caching for uniform locations

		var cachedUniforms;

		this.getUniforms = function() {

			if ( cachedUniforms === undefined ) {

				cachedUniforms =
						new WebGLUniforms( gl, program, renderer );

			}

			return cachedUniforms;

		};

		// set up caching for attribute locations

		var cachedAttributes;

		this.getAttributes = function() {

			if ( cachedAttributes === undefined ) {

				cachedAttributes = fetchAttributeLocations( gl, program );

			}

			return cachedAttributes;

		};

		// free resource

		this.destroy = function() {

			gl.deleteProgram( program );
			this.program = undefined;

		};

		// DEPRECATED

		Object.defineProperties( this, {

			uniforms: {
				get: function() {

					console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
					return this.getUniforms();

				}
			},

			attributes: {
				get: function() {

					console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
					return this.getAttributes();

				}
			}

		} );


		//

		this.id = programIdCount ++;
		this.code = code;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;

		return this;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLPrograms( renderer, capabilities ) {

		var programs = [];

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points'
		};

		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
			"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap",
			"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights",
			"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
			"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking"
		];


		function allocateBones( object ) {

			if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = nVertexMatrices;

				if ( object !== undefined && (object && object.isSkinnedMesh) ) {

					maxBones = Math.min( object.skeleton.bones.length, maxBones );

					if ( maxBones < object.skeleton.bones.length ) {

						console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );

					}

				}

				return maxBones;

			}

		}

		function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

			var encoding;

			if ( ! map ) {

				encoding = LinearEncoding;

			} else if ( (map && map.isTexture) ) {

				encoding = map.encoding;

			} else if ( (map && map.isWebGLRenderTarget) ) {

				console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
				encoding = map.texture.encoding;

			}

			// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
			if ( encoding === LinearEncoding && gammaOverrideLinear ) {

				encoding = GammaEncoding;

			}

			return encoding;

		}

		this.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {

			var shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = allocateBones( object );
			var precision = renderer.getPrecision();

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var currentRenderTarget = renderer.getCurrentRenderTarget();

			var parameters = {

				shaderID: shaderID,

				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,
				outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
				map: !! material.map,
				mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
				envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				combine: material.combine,

				vertexColors: material.vertexColors,

				fog: !! fog,
				useFog: material.fog,
				fogExp: (fog && fog.isFogExp2),

				flatShading: material.shading === FlatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

				skinning: material.skinning,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numHemiLights: lights.hemi.length,

				numClippingPlanes: nClipPlanes,
				numClipIntersection: nClipIntersection,

				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: renderer.toneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,

				premultipliedAlpha: material.premultipliedAlpha,

				alphaTest: material.alphaTest,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,

				depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

			};

			return parameters;

		};

		this.getProgramCode = function ( material, parameters ) {

			var array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( material.fragmentShader );
				array.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					array.push( name );
					array.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				array.push( parameters[ parameterNames[ i ] ] );

			}

			return array.join();

		};

		this.acquireProgram = function ( material, parameters, code ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var programInfo = programs[ p ];

				if ( programInfo.code === code ) {

					program = programInfo;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new WebGLProgram( renderer, code, material, parameters );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLGeometries( gl, properties, info ) {

		var geometries = {};

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry.index !== null ) {

				deleteAttribute( buffergeometry.index );

			}

			deleteAttributes( buffergeometry.attributes );

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			// TODO

			var property = properties.get( geometry );

			if ( property.wireframe ) {

				deleteAttribute( property.wireframe );

			}

			properties.delete( geometry );

			var bufferproperty = properties.get( buffergeometry );

			if ( bufferproperty.wireframe ) {

				deleteAttribute( bufferproperty.wireframe );

			}

			properties.delete( buffergeometry );

			//

			info.memory.geometries --;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function deleteAttribute( attribute ) {

			var buffer = getAttributeBuffer( attribute );

			if ( buffer !== undefined ) {

				gl.deleteBuffer( buffer );
				removeAttributeBuffer( attribute );

			}

		}

		function deleteAttributes( attributes ) {

			for ( var name in attributes ) {

				deleteAttribute( attributes[ name ] );

			}

		}

		function removeAttributeBuffer( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) {

				properties.delete( attribute.data );

			} else {

				properties.delete( attribute );

			}

		}

		return {

			get: function ( object ) {

				var geometry = object.geometry;

				if ( geometries[ geometry.id ] !== undefined ) {

					return geometries[ geometry.id ];

				}

				geometry.addEventListener( 'dispose', onGeometryDispose );

				var buffergeometry;

				if ( geometry.isBufferGeometry ) {

					buffergeometry = geometry;

				} else if ( geometry.isGeometry ) {

					if ( geometry._bufferGeometry === undefined ) {

						geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

					}

					buffergeometry = geometry._bufferGeometry;

				}

				geometries[ geometry.id ] = buffergeometry;

				info.memory.geometries ++;

				return buffergeometry;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLObjects( gl, properties, info ) {

		var geometries = new WebGLGeometries( gl, properties, info );

		//

		function update( object ) {

			// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.

			var geometry = geometries.get( object );

			if ( object.geometry.isGeometry ) {

				geometry.updateFromObject( object );

			}

			var index = geometry.index;
			var attributes = geometry.attributes;

			if ( index !== null ) {

				updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			for ( var name in attributes ) {

				updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					updateAttribute( array[ i ], gl.ARRAY_BUFFER );

				}

			}

			return geometry;

		}

		function updateAttribute( attribute, bufferType ) {

			var data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;

			var attributeProperties = properties.get( data );

			if ( attributeProperties.__webglBuffer === undefined ) {

				createBuffer( attributeProperties, data, bufferType );

			} else if ( attributeProperties.version !== data.version ) {

				updateBuffer( attributeProperties, data, bufferType );

			}

		}

		function createBuffer( attributeProperties, data, bufferType ) {

			attributeProperties.__webglBuffer = gl.createBuffer();
			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

			gl.bufferData( bufferType, data.array, usage );

			attributeProperties.version = data.version;

		}

		function updateBuffer( attributeProperties, data, bufferType ) {

			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			if ( data.dynamic === false ) {

				gl.bufferData( bufferType, data.array, gl.STATIC_DRAW );

			} else if ( data.updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, data.array );

			} else if ( data.updateRange.count === 0 ) {

				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

			} else {

				gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
								  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );

				data.updateRange.count = 0; // reset range

			}

			attributeProperties.version = data.version;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function getWireframeAttribute( geometry ) {

			var property = properties.get( geometry );

			if ( property.wireframe !== undefined ) {

				return property.wireframe;

			}

			var indices = [];

			var index = geometry.index;
			var attributes = geometry.attributes;
			var position = attributes.position;

			// console.time( 'wireframe' );

			if ( index !== null ) {

				var edges = {};
				var array = index.array;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					indices.push( a, b, b, c, c, a );

				}

			} else {

				var array = attributes.position.array;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			// console.timeEnd( 'wireframe' );

			var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
			var attribute = new BufferAttribute( new TypeArray( indices ), 1 );

			updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );

			property.wireframe = attribute;

			return attribute;

		}

		return {

			getAttributeBuffer: getAttributeBuffer,
			getWireframeAttribute: getWireframeAttribute,

			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {

		var _infoMemory = info.memory;
		var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );

		//

		function clampToMaxSize( image, maxSize ) {

			if ( image.width > maxSize || image.height > maxSize ) {

				// Warning: Scaling through the canvas will only work with images that use
				// premultiplied alpha.

				var scale = maxSize / Math.max( image.width, image.height );

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = Math.floor( image.width * scale );
				canvas.height = Math.floor( image.height * scale );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

		}

		function makePowerOfTwo( image ) {

			if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = _Math.nearestPowerOfTwo( image.width );
				canvas.height = _Math.nearestPowerOfTwo( image.height );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;
			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;

			return false;

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback( f ) {

			if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		//

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			_infoMemory.textures --;


		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			_infoMemory.textures --;

		}

		//

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( texture.image && textureProperties.__image__webglTextureCube ) {

				// cube texture

				_gl.deleteTexture( textureProperties.__image__webglTextureCube );

			} else {

				// 2D texture

				if ( textureProperties.__webglInit === undefined ) return;

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			// remove all webgl properties
			properties.delete( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget ) return;

			if ( textureProperties.__webglTexture !== undefined ) {

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

			}

			properties.delete( renderTarget.texture );
			properties.delete( renderTarget );

		}

		//



		function setTexture2D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		}

		function setTextureCube( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.image.length === 6 ) {

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					if ( ! textureProperties.__image__webglTextureCube ) {

						texture.addEventListener( 'dispose', onTextureDispose );

						textureProperties.__image__webglTextureCube = _gl.createTexture();

						_infoMemory.textures ++;

					}

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

					var isCompressed = (texture && texture.isCompressedTexture);
					var isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);

					var cubeImage = [];

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed && ! isDataTexture ) {

							cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

						} else {

							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

						}

					}

					var image = cubeImage[ 0 ],
					isPowerOfTwoImage = isPowerOfTwo( image ),
					glFormat = paramThreeToGL( texture.format ),
					glType = paramThreeToGL( texture.type );

					setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed ) {

							if ( isDataTexture ) {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

							}

						} else {

							var mipmap, mipmaps = cubeImage[ i ].mipmaps;

							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

								mipmap = mipmaps[ j ];

								if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									} else {

										console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()" );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

					if ( texture.generateMipmaps && isPowerOfTwoImage ) {

						_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

					}

					textureProperties.__version = texture.version;

					if ( texture.onUpdate ) texture.onUpdate( texture );

				} else {

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				}

			}

		}

		function setTextureCubeDynamic( texture, slot ) {

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

		}

		function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

			var extension;

			if ( isPowerOfTwoImage ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

				}

			}

			extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				_infoMemory.textures ++;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

			if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

				image = makePowerOfTwo( image );

			}

			var isPowerOfTwoImage = isPowerOfTwo( image ),
			glFormat = paramThreeToGL( texture.format ),
			glType = paramThreeToGL( texture.type );

			setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

			var mipmap, mipmaps = texture.mipmaps;

			if ( (texture && texture.isDepthTexture) ) {

				// populate depth texture with dummy data

				var internalFormat = _gl.DEPTH_COMPONENT;

				if ( texture.type === FloatType ) {

					if ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');
					internalFormat = _gl.DEPTH_COMPONENT32F;

				} else if ( _isWebGL2 ) {

					// WebGL 2.0 requires signed internalformat for glTexImage2D
					internalFormat = _gl.DEPTH_COMPONENT16;

				}

				// Depth stencil textures need the DEPTH_STENCIL internal format
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.format === DepthStencilFormat ) {

					internalFormat = _gl.DEPTH_STENCIL;

				}

				state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

			} else if ( (texture && texture.isDataTexture) ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

				}

			} else if ( (texture && texture.isCompressedTexture) ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

							state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

						}

					} else {

						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

				}

			}

			if ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = paramThreeToGL( renderTarget.texture.format );
			var glType = paramThreeToGL( renderTarget.texture.type );
			state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage( renderbuffer, renderTarget ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				// FIXME: We don't support !depth !stencil
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture( framebuffer, renderTarget ) {

			var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
			if ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {

				throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

			}

			// upload an empty depth texture with framebuffer size
			if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {
				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;
			}

			setTexture2D( renderTarget.depthTexture, 0 );

			var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

			if ( renderTarget.depthTexture.format === DepthFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else {

				throw new Error('Unknown depthTexture format')

			}

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );

			if ( renderTarget.depthTexture ) {

				if ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

					}

				} else {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

				}

			}

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			_infoMemory.textures ++;

			var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

				}

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
				state.bindTexture( _gl.TEXTURE_2D, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			var texture = renderTarget.texture;

			if ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&
					texture.minFilter !== NearestFilter &&
					texture.minFilter !== LinearFilter ) {

				var target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
				var webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				_gl.generateMipmap( target );
				state.bindTexture( target, null );

			}

		}

		this.setTexture2D = setTexture2D;
		this.setTextureCube = setTextureCube;
		this.setTextureCubeDynamic = setTextureCubeDynamic;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;

	}

	/**
	 * @author fordacious / fordacious.github.io
	 */

	function WebGLProperties() {

		var properties = {};

		return {

			get: function ( object ) {

				var uuid = object.uuid;
				var map = properties[ uuid ];

				if ( map === undefined ) {

					map = {};
					properties[ uuid ] = map;

				}

				return map;

			},

			delete: function ( object ) {

				delete properties[ object.uuid ];

			},

			clear: function () {

				properties = {};

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLState( gl, extensions, paramThreeToGL ) {

		function ColorBuffer() {

			var locked = false;

			var color = new Vector4();
			var currentColorMask = null;
			var currentColorClear = new Vector4();

			return {

				setMask: function ( colorMask ) {

					if ( currentColorMask !== colorMask && ! locked ) {

						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( r, g, b, a ) {

					color.set( r, g, b, a );

					if ( currentColorClear.equals( color ) === false ) {

						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );

					}

				},

				reset: function () {

					locked = false;

					currentColorMask = null;
					currentColorClear.set( 0, 0, 0, 1 );

				}

			};

		}

		function DepthBuffer() {

			var locked = false;

			var currentDepthMask = null;
			var currentDepthFunc = null;
			var currentDepthClear = null;

			return {

				setTest: function ( depthTest ) {

					if ( depthTest ) {

						enable( gl.DEPTH_TEST );

					} else {

						disable( gl.DEPTH_TEST );

					}

				},

				setMask: function ( depthMask ) {

					if ( currentDepthMask !== depthMask && ! locked ) {

						gl.depthMask( depthMask );
						currentDepthMask = depthMask;

					}

				},

				setFunc: function ( depthFunc ) {

					if ( currentDepthFunc !== depthFunc ) {

						if ( depthFunc ) {

							switch ( depthFunc ) {

								case NeverDepth:

									gl.depthFunc( gl.NEVER );
									break;

								case AlwaysDepth:

									gl.depthFunc( gl.ALWAYS );
									break;

								case LessDepth:

									gl.depthFunc( gl.LESS );
									break;

								case LessEqualDepth:

									gl.depthFunc( gl.LEQUAL );
									break;

								case EqualDepth:

									gl.depthFunc( gl.EQUAL );
									break;

								case GreaterEqualDepth:

									gl.depthFunc( gl.GEQUAL );
									break;

								case GreaterDepth:

									gl.depthFunc( gl.GREATER );
									break;

								case NotEqualDepth:

									gl.depthFunc( gl.NOTEQUAL );
									break;

								default:

									gl.depthFunc( gl.LEQUAL );

							}

						} else {

							gl.depthFunc( gl.LEQUAL );

						}

						currentDepthFunc = depthFunc;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( depth ) {

					if ( currentDepthClear !== depth ) {

						gl.clearDepth( depth );
						currentDepthClear = depth;

					}

				},

				reset: function () {

					locked = false;

					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;

				}

			};

		}

		function StencilBuffer() {

			var locked = false;

			var currentStencilMask = null;
			var currentStencilFunc = null;
			var currentStencilRef = null;
			var currentStencilFuncMask = null;
			var currentStencilFail  = null;
			var currentStencilZFail = null;
			var currentStencilZPass = null;
			var currentStencilClear = null;

			return {

				setTest: function ( stencilTest ) {

					if ( stencilTest ) {

						enable( gl.STENCIL_TEST );

					} else {

						disable( gl.STENCIL_TEST );

					}

				},

				setMask: function ( stencilMask ) {

					if ( currentStencilMask !== stencilMask && ! locked ) {

						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;

					}

				},

				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef 	!== stencilRef 	||
					     currentStencilFuncMask !== stencilMask ) {

						gl.stencilFunc( stencilFunc,  stencilRef, stencilMask );

						currentStencilFunc = stencilFunc;
						currentStencilRef  = stencilRef;
						currentStencilFuncMask = stencilMask;

					}

				},

				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

					if ( currentStencilFail	 !== stencilFail 	||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {

						gl.stencilOp( stencilFail,  stencilZFail, stencilZPass );

						currentStencilFail  = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( stencil ) {

					if ( currentStencilClear !== stencil ) {

						gl.clearStencil( stencil );
						currentStencilClear = stencil;

					}

				},

				reset: function () {

					locked = false;

					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;

				}

			};

		}

		//

		var colorBuffer = new ColorBuffer();
		var depthBuffer = new DepthBuffer();
		var stencilBuffer = new StencilBuffer();

		var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var newAttributes = new Uint8Array( maxVertexAttributes );
		var enabledAttributes = new Uint8Array( maxVertexAttributes );
		var attributeDivisors = new Uint8Array( maxVertexAttributes );

		var capabilities = {};

		var compressedTextureFormats = null;

		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
		var currentPremultipledAlpha = false;

		var currentFlipSided = null;
		var currentCullFace = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var currentScissorTest = null;

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );

		var currentTextureSlot = null;
		var currentBoundTextures = {};

		var currentScissor = new Vector4();
		var currentViewport = new Vector4();

		function createTexture( type, target, count ) {

			var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			var texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
			gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

			for ( var i = 0; i < count; i ++ ) {

				gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

			}

			return texture;

		}

		var emptyTextures = {};
		emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
		emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

		//

		function init() {

			clearColor( 0, 0, 0, 1 );
			clearDepth( 1 );
			clearStencil( 0 );

			enable( gl.DEPTH_TEST );
			setDepthFunc( LessEqualDepth );

			setFlipSided( false );
			setCullFace( CullFaceBack );
			enable( gl.CULL_FACE );

			enable( gl.BLEND );
			setBlending( NormalBlending );

		}

		function initAttributes() {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		}

		function enableAttribute( attribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== 0 ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				extension.vertexAttribDivisorANGLE( attribute, 0 );
				attributeDivisors[ attribute ] = 0;

			}

		}

		function enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		}

		function disableUnusedAttributes() {

			for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		}

		function enable( id ) {

			if ( capabilities[ id ] !== true ) {

				gl.enable( id );
				capabilities[ id ] = true;

			}

		}

		function disable( id ) {

			if ( capabilities[ id ] !== false ) {

				gl.disable( id );
				capabilities[ id ] = false;

			}

		}

		function getCompressedTextureFormats() {

			if ( compressedTextureFormats === null ) {

				compressedTextureFormats = [];

				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

					var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

					for ( var i = 0; i < formats.length; i ++ ) {

						compressedTextureFormats.push( formats[ i ] );

					}

				}

			}

			return compressedTextureFormats;

		}

		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

			if ( blending !== NoBlending ) {

				enable( gl.BLEND );

			} else {

				disable( gl.BLEND );

			}

			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

				if ( blending === AdditiveBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

					}

				} else if ( blending === SubtractiveBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

					}

				} else if ( blending === MultiplyBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

					}

				} else {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

					} else {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

					}

				}

				currentBlending = blending;
				currentPremultipledAlpha = premultipliedAlpha;

			}

			if ( blending === CustomBlending ) {

				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;

				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

					gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;

				}

				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

					gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;

				}

			} else {

				currentBlendEquation = null;
				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendEquationAlpha = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

			}

		}

		// TODO Deprecate

		function setColorWrite( colorWrite ) {

			colorBuffer.setMask( colorWrite );

		}

		function setDepthTest( depthTest ) {

			depthBuffer.setTest( depthTest );

		}

		function setDepthWrite( depthWrite ) {

			depthBuffer.setMask( depthWrite );

		}

		function setDepthFunc( depthFunc ) {

			depthBuffer.setFunc( depthFunc );

		}

		function setStencilTest( stencilTest ) {

			stencilBuffer.setTest( stencilTest );

		}

		function setStencilWrite( stencilWrite ) {

			stencilBuffer.setMask( stencilWrite );

		}

		function setStencilFunc( stencilFunc, stencilRef, stencilMask ) {

			stencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );

		}

		function setStencilOp( stencilFail, stencilZFail, stencilZPass ) {

			stencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );

		}

		//

		function setFlipSided( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		}

		function setCullFace( cullFace ) {

			if ( cullFace !== CullFaceNone ) {

				enable( gl.CULL_FACE );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === CullFaceBack ) {

						gl.cullFace( gl.BACK );

					} else if ( cullFace === CullFaceFront ) {

						gl.cullFace( gl.FRONT );

					} else {

						gl.cullFace( gl.FRONT_AND_BACK );

					}

				}

			} else {

				disable( gl.CULL_FACE );

			}

			currentCullFace = cullFace;

		}

		function setLineWidth( width ) {

			if ( width !== currentLineWidth ) {

				gl.lineWidth( width );

				currentLineWidth = width;

			}

		}

		function setPolygonOffset( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				enable( gl.POLYGON_OFFSET_FILL );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				disable( gl.POLYGON_OFFSET_FILL );

			}

		}

		function getScissorTest() {

			return currentScissorTest;

		}

		function setScissorTest( scissorTest ) {

			currentScissorTest = scissorTest;

			if ( scissorTest ) {

				enable( gl.SCISSOR_TEST );

			} else {

				disable( gl.SCISSOR_TEST );

			}

		}

		// texture

		function activeTexture( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		function bindTexture( webglType, webglTexture ) {

			if ( currentTextureSlot === null ) {

				activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		}

		function compressedTexImage2D() {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		}

		function texImage2D() {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		}

		// TODO Deprecate

		function clearColor( r, g, b, a ) {

			colorBuffer.setClear( r, g, b, a );

		}

		function clearDepth( depth ) {

			depthBuffer.setClear( depth );

		}

		function clearStencil( stencil ) {

			stencilBuffer.setClear( stencil );

		}

		//

		function scissor( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		}

		function viewport( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		}

		//

		function reset() {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			capabilities = {};

			compressedTextureFormats = null;

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentBlending = null;

			currentFlipSided = null;
			currentCullFace = null;

			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();

		}

		return {

			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},

			init: init,
			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			enableAttributeAndDivisor: enableAttributeAndDivisor,
			disableUnusedAttributes: disableUnusedAttributes,
			enable: enable,
			disable: disable,
			getCompressedTextureFormats: getCompressedTextureFormats,

			setBlending: setBlending,

			setColorWrite: setColorWrite,
			setDepthTest: setDepthTest,
			setDepthWrite: setDepthWrite,
			setDepthFunc: setDepthFunc,
			setStencilTest: setStencilTest,
			setStencilWrite: setStencilWrite,
			setStencilFunc: setStencilFunc,
			setStencilOp: setStencilOp,

			setFlipSided: setFlipSided,
			setCullFace: setCullFace,

			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,

			getScissorTest: getScissorTest,
			setScissorTest: setScissorTest,

			activeTexture: activeTexture,
			bindTexture: bindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,

			clearColor: clearColor,
			clearDepth: clearDepth,
			clearStencil: clearStencil,

			scissor: scissor,
			viewport: viewport,

			reset: reset

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLCapabilities( gl, extensions, parameters ) {

		var maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) return maxAnisotropy;

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension !== null ) {

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		var maxPrecision = getMaxPrecision( precision );

		if ( maxPrecision !== precision ) {

			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;

		}

		var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		var vertexTextures = maxVertexTextures > 0;
		var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
		var floatVertexTextures = vertexTextures && floatFragmentTextures;

		return {

			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,

			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,

			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,

			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLExtensions( gl ) {

		var extensions = {};

		return {

			get: function ( name ) {

				if ( extensions[ name ] !== undefined ) {

					return extensions[ name ];

				}

				var extension;

				switch ( name ) {

					case 'WEBGL_depth_texture':
						extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
						break;

					case 'EXT_texture_filter_anisotropic':
						extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
						break;

					case 'WEBGL_compressed_texture_s3tc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
						break;

					case 'WEBGL_compressed_texture_pvrtc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
						break;

					case 'WEBGL_compressed_texture_etc1':
						extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
						break;

					default:
						extension = gl.getExtension( name );

				}

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				extensions[ name ] = extension;

				return extension;

			}

		};

	}

	/**
	 * @author tschw
	 */

	function WebGLClipping() {

		var scope = this,

			globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false,

			plane = new Plane(),
			viewNormalMatrix = new Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function( planes, enableLocalClipping, camera ) {

			var enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			globalState = projectPlanes( planes, camera, 0 );
			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function() {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function() {

			renderingShadows = false;
			resetGlobalState();

		};

		this.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

			if ( ! localClippingEnabled ||
					planes === null || planes.length === 0 ||
					renderingShadows && ! clipShadows ) {
				// there's no local clipping

				if ( renderingShadows ) {
					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();
				}

			} else {

				var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4,

					dstArray = cache.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

				for ( var i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				cache.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			var nPlanes = planes !== null ? planes.length : 0,
				dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					var flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( var i = 0, i4 = dstOffset;
										i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).
								applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;
			
			return dstArray;

		}

	}

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */

	function WebGLRenderer( parameters ) {

		console.log( 'THREE.WebGLRenderer', REVISION );

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

		var lights = [];

		var opaqueObjects = [];
		var opaqueObjectsLastIndex = - 1;
		var transparentObjects = [];
		var transparentObjectsLastIndex = - 1;

		var morphInfluences = new Float32Array( 8 );

		var sprites = [];
		var lensFlares = [];

		// public properties

		this.domElement = _canvas;
		this.context = null;

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// physical lights

		this.physicallyCorrectLights = false;

		// tone mapping

		this.toneMapping = LinearToneMapping;
		this.toneMappingExposure = 1.0;
		this.toneMappingWhitePoint = 1.0;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// internal properties

		var _this = this,

		// internal state cache

		_currentProgram = null,
		_currentRenderTarget = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',
		_currentCamera = null,

		_currentScissor = new Vector4(),
		_currentScissorTest = null,

		_currentViewport = new Vector4(),

		//

		_usedTextureUnits = 0,

		//

		_clearColor = new Color( 0x000000 ),
		_clearAlpha = 0,

		_width = _canvas.width,
		_height = _canvas.height,

		_pixelRatio = 1,

		_scissor = new Vector4( 0, 0, _width, _height ),
		_scissorTest = false,

		_viewport = new Vector4( 0, 0, _width, _height ),

		// frustum

		_frustum = new Frustum(),

		// clipping

		_clipping = new WebGLClipping(),
		_clippingEnabled = false,
		_localClippingEnabled = false,

		_sphere = new Sphere(),

		// camera matrices cache

		_projScreenMatrix = new Matrix4(),

		_vector3 = new Vector3(),

		// light arrays cache

		_lights = {

			hash: '',

			ambient: [ 0, 0, 0 ],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],

			shadows: []

		},

		// info

		_infoRender = {

			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

		this.info = {

			render: _infoRender,
			memory: {

				geometries: 0,
				textures: 0

			},
			programs: null

		};


		// initialize

		var _gl;

		try {

			var attributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer
			};

			_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw 'Error creating WebGL context with your selected attributes.';

				} else {

					throw 'Error creating WebGL context.';

				}

			}

			// Some experimental-webgl implementations do not have getShaderPrecisionFormat

			if ( _gl.getShaderPrecisionFormat === undefined ) {

				_gl.getShaderPrecisionFormat = function () {

					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

				};

			}

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error );

		}

		var extensions = new WebGLExtensions( _gl );

		extensions.get( 'WEBGL_depth_texture' );
		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'ANGLE_instanced_arrays' );

		if ( extensions.get( 'OES_element_index_uint' ) ) {

			BufferGeometry.MaxIndex = 4294967296;

		}

		var capabilities = new WebGLCapabilities( _gl, extensions, parameters );

		var state = new WebGLState( _gl, extensions, paramThreeToGL );
		var properties = new WebGLProperties();
		var textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );
		var objects = new WebGLObjects( _gl, properties, this.info );
		var programCache = new WebGLPrograms( this, capabilities );
		var lightCache = new WebGLLights();

		this.info.programs = programCache.programs;

		var bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
		var indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

		//

		var backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
		var backgroundCamera2 = new PerspectiveCamera();
		var backgroundPlaneMesh = new Mesh(
			new PlaneBufferGeometry( 2, 2 ),
			new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
		);
		var backgroundBoxShader = ShaderLib[ 'cube' ];
		var backgroundBoxMesh = new Mesh(
			new BoxBufferGeometry( 5, 5, 5 ),
			new ShaderMaterial( {
				uniforms: backgroundBoxShader.uniforms,
				vertexShader: backgroundBoxShader.vertexShader,
				fragmentShader: backgroundBoxShader.fragmentShader,
				side: BackSide,
				depthTest: false,
				depthWrite: false,
				fog: false
			} )
		);

		//

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		function glClearColor( r, g, b, a ) {

			if ( _premultipliedAlpha === true ) {

				r *= a; g *= a; b *= a;

			}

			state.clearColor( r, g, b, a );

		}

		function setDefaultGLState() {

			state.init();

			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		}

		function resetGLState() {

			_currentProgram = null;
			_currentCamera = null;

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;

			state.reset();

		}

		setDefaultGLState();

		this.context = _gl;
		this.capabilities = capabilities;
		this.extensions = extensions;
		this.properties = properties;
		this.state = state;

		// shadow map

		var shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );

		this.shadowMap = shadowMap;


		// Plugins

		var spritePlugin = new SpritePlugin( this, sprites );
		var lensFlarePlugin = new LensFlarePlugin( this, lensFlares );

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			extensions.get( 'WEBGL_lose_context' ).loseContext();

		};

		this.getMaxAnisotropy = function () {

			return capabilities.getMaxAnisotropy();

		};

		this.getPrecision = function () {

			return capabilities.precision;

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) return;

			_pixelRatio = value;

			this.setSize( _viewport.z, _viewport.w, false );

		};

		this.getSize = function () {

			return {
				width: _width,
				height: _height
			};

		};

		this.setSize = function ( width, height, updateStyle ) {

			_width = width;
			_height = height;

			_canvas.width = width * _pixelRatio;
			_canvas.height = height * _pixelRatio;

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.setViewport = function ( x, y, width, height ) {

			state.viewport( _viewport.set( x, y, width, height ) );

		};

		this.setScissor = function ( x, y, width, height ) {

			state.scissor( _scissor.set( x, y, width, height ) );

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return _clearColor;

		};

		this.setClearColor = function ( color, alpha ) {

			_clearColor.set( color );

			_clearAlpha = alpha !== undefined ? alpha : 1;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.getClearAlpha = function () {

			return _clearAlpha;

		};

		this.setClearAlpha = function ( alpha ) {

			_clearAlpha = alpha;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
			if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		this.clearTarget = function ( renderTarget, color, depth, stencil ) {

			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		};

		// Reset

		this.resetGLState = resetGLState;

		this.dispose = function() {

			transparentObjects = [];
			transparentObjectsLastIndex = -1;
			opaqueObjects = [];
			opaqueObjectsLastIndex = -1;

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			resetGLState();
			setDefaultGLState();

			properties.clear();

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.delete( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		this.renderBufferImmediate = function ( object, program, material ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

			var attributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

				if ( ! material.isMeshPhongMaterial &&
				     ! material.isMeshStandardMaterial &&
				       material.shading === FlatShading ) {

					for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

						var array = object.normalArray;

						var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
						var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
						var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

						array[ i + 0 ] = nx;
						array[ i + 1 ] = ny;
						array[ i + 2 ] = nz;

						array[ i + 3 ] = nx;
						array[ i + 4 ] = ny;
						array[ i + 5 ] = nz;

						array[ i + 6 ] = nx;
						array[ i + 7 ] = ny;
						array[ i + 8 ] = nz;

					}

				}

				_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.normal );

				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasUvs && material.map ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.uv );

				_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasColors && material.vertexColors !== NoColors ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.color );

				_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			setMaterial( material );

			var program = setProgram( camera, fog, material, object );

			var updateBuffers = false;
			var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;

			if ( geometryProgram !== _currentGeometryProgram ) {

				_currentGeometryProgram = geometryProgram;
				updateBuffers = true;

			}

			// morph targets

			var morphTargetInfluences = object.morphTargetInfluences;

			if ( morphTargetInfluences !== undefined ) {

				var activeInfluences = [];

				for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

					var influence = morphTargetInfluences[ i ];
					activeInfluences.push( [ influence, i ] );

				}

				activeInfluences.sort( absNumericalSort );

				if ( activeInfluences.length > 8 ) {

					activeInfluences.length = 8;

				}

				var morphAttributes = geometry.morphAttributes;

				for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

					var influence = activeInfluences[ i ];
					morphInfluences[ i ] = influence[ 0 ];

					if ( influence[ 0 ] !== 0 ) {

						var index = influence[ 1 ];

						if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
						if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );

					} else {

						if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
						if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );

					}

				}

				for ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {

					morphInfluences[ i ] = 0.0;

				}

				program.getUniforms().setValue(
						_gl, 'morphTargetInfluences', morphInfluences );

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;
			var rangeFactor = 1;

			if ( material.wireframe === true ) {

				index = objects.getWireframeAttribute( geometry );
				rangeFactor = 2;

			}

			var renderer;

			if ( index !== null ) {

				renderer = indexedBufferRenderer;
				renderer.setIndex( index );

			} else {

				renderer = bufferRenderer;

			}

			if ( updateBuffers ) {

				setupVertexAttributes( material, program, geometry );

				if ( index !== null ) {

					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );

				}

			}

			//

			var dataCount = 0;

			if ( index !== null ) {

				dataCount = index.count;

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start * rangeFactor;
			var rangeCount = geometry.drawRange.count * rangeFactor;

			var groupStart = group !== null ? group.start * rangeFactor : 0;
			var groupCount = group !== null ? group.count * rangeFactor : Infinity;

			var drawStart = Math.max( rangeStart, groupStart );
			var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			if ( drawCount === 0 ) return;

			//

			if ( object.isMesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( _gl.LINES );

				} else {

					switch ( object.drawMode ) {

						case TrianglesDrawMode:
							renderer.setMode( _gl.TRIANGLES );
							break;

						case TriangleStripDrawMode:
							renderer.setMode( _gl.TRIANGLE_STRIP );
							break;

						case TriangleFanDrawMode:
							renderer.setMode( _gl.TRIANGLE_FAN );
							break;

					}

				}


			} else if ( object.isLine ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object.isLineSegments ) {

					renderer.setMode( _gl.LINES );

				} else {

					renderer.setMode( _gl.LINE_STRIP );

				}

			} else if ( object.isPoints ) {

				renderer.setMode( _gl.POINTS );

			}

			if ( geometry && geometry.isInstancedBufferGeometry ) {

				if ( geometry.maxInstancedCount > 0 ) {

					renderer.renderInstances( geometry, drawStart, drawCount );

				}

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( material, program, geometry, startIndex ) {

			var extension;

			if ( geometry && geometry.isInstancedBufferGeometry ) {

				extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			if ( startIndex === undefined ) startIndex = 0;

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var type = _gl.FLOAT;
						var array = geometryAttribute.array;
						var normalized = geometryAttribute.normalized;

						if ( array instanceof Float32Array ) {

							type = _gl.FLOAT;

						} else if ( array instanceof Float64Array ) {

							console.warn( "Unsupported data buffer format: Float64Array" );

						} else if ( array instanceof Uint16Array ) {

							type = _gl.UNSIGNED_SHORT;

						} else if ( array instanceof Int16Array ) {

							type = _gl.SHORT;

						} else if ( array instanceof Uint32Array ) {

							type = _gl.UNSIGNED_INT;

						} else if ( array instanceof Int32Array ) {

							type = _gl.INT;

						} else if ( array instanceof Int8Array ) {

							type = _gl.BYTE;

						} else if ( array instanceof Uint8Array ) {

							type = _gl.UNSIGNED_BYTE;

						}

						var size = geometryAttribute.itemSize;
						var buffer = objects.getAttributeBuffer( geometryAttribute );

						if ( geometryAttribute.isInterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data && data.isInstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );

						} else {

							if ( geometryAttribute.isInstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Sorting

		function absNumericalSort( a, b ) {

			return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );

		}

		function painterSortStable( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {

				return a.material.program.id - b.material.program.id;

			} else if ( a.material.id !== b.material.id ) {

				return a.material.id - b.material.id;

			} else if ( a.z !== b.z ) {

				return a.z - b.z;

			} else {

				return a.id - b.id;

			}

		}

		function reversePainterSortStable( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return a.id - b.id;

			}

		}

		// Rendering

		this.render = function ( scene, camera, renderTarget, forceClear ) {

			if ( camera !== undefined && camera.isCamera !== true ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			// reset caching for this frame

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			// update camera matrices and frustum

			if ( camera.parent === null ) camera.updateMatrixWorld();

			camera.matrixWorldInverse.getInverse( camera.matrixWorld );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			lights.length = 0;

			opaqueObjectsLastIndex = - 1;
			transparentObjectsLastIndex = - 1;

			sprites.length = 0;
			lensFlares.length = 0;

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

			projectObject( scene, camera );

			opaqueObjects.length = opaqueObjectsLastIndex + 1;
			transparentObjects.length = transparentObjectsLastIndex + 1;

			if ( _this.sortObjects === true ) {

				opaqueObjects.sort( painterSortStable );
				transparentObjects.sort( reversePainterSortStable );

			}

			//

			if ( _clippingEnabled ) _clipping.beginShadows();

			setupShadows( lights );

			shadowMap.render( scene, camera );

			setupLights( lights, camera );

			if ( _clippingEnabled ) _clipping.endShadows();

			//

			_infoRender.calls = 0;
			_infoRender.vertices = 0;
			_infoRender.faces = 0;
			_infoRender.points = 0;

			if ( renderTarget === undefined ) {

				renderTarget = null;

			}

			this.setRenderTarget( renderTarget );

			//

			var background = scene.background;

			if ( background === null ) {

				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

			} else if ( background && background.isColor ) {

				glClearColor( background.r, background.g, background.b, 1 );
				forceClear = true;

			}

			if ( this.autoClear || forceClear ) {

				this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

			}

			if ( background && background.isCubeTexture ) {

				backgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );

				backgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );
				backgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );

				backgroundBoxMesh.material.uniforms[ "tCube" ].value = background;
				backgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );

				objects.update( backgroundBoxMesh );

				_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );

			} else if ( background && background.isTexture ) {

				backgroundPlaneMesh.material.map = background;

				objects.update( backgroundPlaneMesh );

				_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );

			}

			//

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				renderObjects( opaqueObjects, scene, camera, overrideMaterial );
				renderObjects( transparentObjects, scene, camera, overrideMaterial );

			} else {

				// opaque pass (front-to-back order)

				state.setBlending( NoBlending );
				renderObjects( opaqueObjects, scene, camera );

				// transparent pass (back-to-front order)

				renderObjects( transparentObjects, scene, camera );

			}

			// custom render plugins (post pass)

			spritePlugin.render( scene, camera );
			lensFlarePlugin.render( scene, camera, _currentViewport );

			// Generate mipmap if we're using any kind of mipmap filtering

			if ( renderTarget ) {

				textures.updateRenderTargetMipmap( renderTarget );

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.setDepthTest( true );
			state.setDepthWrite( true );
			state.setColorWrite( true );

			// _gl.finish();

		};

		function pushRenderItem( object, geometry, material, z, group ) {

			var array, index;

			// allocate the next position in the appropriate array

			if ( material.transparent ) {

				array = transparentObjects;
				index = ++ transparentObjectsLastIndex;

			} else {

				array = opaqueObjects;
				index = ++ opaqueObjectsLastIndex;

			}

			// recycle existing render item or grow the array

			var renderItem = array[ index ];

			if ( renderItem !== undefined ) {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.z = _vector3.z;
				renderItem.group = group;

			} else {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					z: _vector3.z,
					group: group
				};

				// assert( index === array.length );
				array.push( renderItem );

			}

		}

		// TODO Duplicated code (Frustum)

		function isObjectViewable( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			_sphere.copy( geometry.boundingSphere ).
				applyMatrix4( object.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSpriteViewable( sprite ) {

			_sphere.center.set( 0, 0, 0 );
			_sphere.radius = 0.7071067811865476;
			_sphere.applyMatrix4( sprite.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSphereViewable( sphere ) {

			if ( ! _frustum.intersectsSphere( sphere ) ) return false;

			var numPlanes = _clipping.numPlanes;

			if ( numPlanes === 0 ) return true;

			var planes = _this.clippingPlanes,

				center = sphere.center,
				negRad = - sphere.radius,
				i = 0;

			do {

				// out when deeper than radius in the negative halfspace
				if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

			} while ( ++ i !== numPlanes );

			return true;

		}

		function projectObject( object, camera ) {

			if ( object.visible === false ) return;

			var visible = ( object.layers.mask & camera.layers.mask ) !== 0;

			if ( visible ) {

				if ( object.isLight ) {

					lights.push( object );

				} else if ( object.isSprite ) {

					if ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {

						sprites.push( object );

					}

				} else if ( object.isLensFlare ) {

					lensFlares.push( object );

				} else if ( object.isImmediateRenderObject ) {

					if ( _this.sortObjects === true ) {

						_vector3.setFromMatrixPosition( object.matrixWorld );
						_vector3.applyProjection( _projScreenMatrix );

					}

					pushRenderItem( object, null, object.material, _vector3.z, null );

				} else if ( object.isMesh || object.isLine || object.isPoints ) {

					if ( object.isSkinnedMesh ) {

						object.skeleton.update();

					}

					if ( object.frustumCulled === false || isObjectViewable( object ) === true ) {

						var material = object.material;

						if ( material.visible === true ) {

							if ( _this.sortObjects === true ) {

								_vector3.setFromMatrixPosition( object.matrixWorld );
								_vector3.applyProjection( _projScreenMatrix );

							}

							var geometry = objects.update( object );

							if ( material.isMultiMaterial ) {

								var groups = geometry.groups;
								var materials = material.materials;

								for ( var i = 0, l = groups.length; i < l; i ++ ) {

									var group = groups[ i ];
									var groupMaterial = materials[ group.materialIndex ];

									if ( groupMaterial.visible === true ) {

										pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );

									}

								}

							} else {

								pushRenderItem( object, geometry, material, _vector3.z, null );

							}

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera );

			}

		}

		function renderObjects( renderList, scene, camera, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

				object.onBeforeRender( _this, scene, camera, geometry, material, group );

				if ( object.isImmediateRenderObject ) {

					setMaterial( material );

					var program = setProgram( camera, scene.fog, material, object );

					_currentGeometryProgram = '';

					object.render( function ( object ) {

						_this.renderBufferImmediate( object, program, material );

					} );

				} else {

					_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

				}

				object.onAfterRender( _this, scene, camera, geometry, material, group );


			}

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var parameters = programCache.getParameters(
					material, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );

			var code = programCache.getProgramCode( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.code !== code ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = ShaderLib[ parameters.shaderID ];

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.__webglShader = materialProperties.__webglShader;

				program = programCache.acquireProgram( material, parameters, code );

				materialProperties.program = program;
				material.program = program;

			}

			var attributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( attributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( attributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			var uniforms = materialProperties.__webglShader.uniforms;

			if ( ! material.isShaderMaterial &&
			     ! material.isRawShaderMaterial ||
			       material.clipping === true ) {

				materialProperties.numClippingPlanes = _clipping.numPlanes;
				materialProperties.numIntersection = _clipping.numIntersection;
				uniforms.clippingPlanes = _clipping.uniform;

			}

			materialProperties.fog = fog;

			// store the light setup it was created for

			materialProperties.lightsHash = _lights.hash;

			if ( material.lights ) {

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = _lights.ambient;
				uniforms.directionalLights.value = _lights.directional;
				uniforms.spotLights.value = _lights.spot;
				uniforms.pointLights.value = _lights.point;
				uniforms.hemisphereLights.value = _lights.hemi;

				uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
				uniforms.spotShadowMap.value = _lights.spotShadowMap;
				uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
				uniforms.pointShadowMap.value = _lights.pointShadowMap;
				uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;

			}

			var progUniforms = materialProperties.program.getUniforms(),
				uniformsList =
						WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

			materialProperties.uniformsList = uniformsList;

		}

		function setMaterial( material ) {

			material.side === DoubleSide
				? state.disable( _gl.CULL_FACE )
				: state.enable( _gl.CULL_FACE );

			state.setFlipSided( material.side === BackSide );

			material.transparent === true
				? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
				: state.setBlending( NoBlending );

			state.setDepthFunc( material.depthFunc );
			state.setDepthTest( material.depthTest );
			state.setDepthWrite( material.depthWrite );
			state.setColorWrite( material.colorWrite );
			state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		function setProgram( camera, fog, material, object ) {

			_usedTextureUnits = 0;

			var materialProperties = properties.get( material );

			if ( _clippingEnabled ) {

				if ( _localClippingEnabled || camera !== _currentCamera ) {

					var useCache =
							camera === _currentCamera &&
							material.id === _currentMaterialId;

					// we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)
					_clipping.setState(
							material.clippingPlanes, material.clipIntersection, material.clipShadows,
							camera, materialProperties, useCache );

				}

			}

			if ( material.needsUpdate === false ) {

				if ( materialProperties.program === undefined ) {

					material.needsUpdate = true;

				} else if ( material.fog && materialProperties.fog !== fog ) {

					material.needsUpdate = true;

				} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {

					material.needsUpdate = true;

				} else if ( materialProperties.numClippingPlanes !== undefined &&
					( materialProperties.numClippingPlanes !== _clipping.numPlanes || 
	 				  materialProperties.numIntersection  !== _clipping.numIntersection ) ) {

					material.needsUpdate = true;

				}

			}

			if ( material.needsUpdate ) {

				initMaterial( material, fog, object );
				material.needsUpdate = false;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.__webglShader.uniforms;

			if ( program.id !== _currentProgram ) {

				_gl.useProgram( program.program );
				_currentProgram = program.id;

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || camera !== _currentCamera ) {

				p_uniforms.set( _gl, camera, 'projectionMatrix' );

				if ( capabilities.logarithmicDepthBuffer ) {

					p_uniforms.setValue( _gl, 'logDepthBufFC',
							2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}


				if ( camera !== _currentCamera ) {

					_currentCamera = camera;

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material.isShaderMaterial ||
				     material.isMeshPhongMaterial ||
				     material.isMeshStandardMaterial ||
				     material.envMap ) {

					var uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl,
								_vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

				}

				if ( material.isMeshPhongMaterial ||
				     material.isMeshLambertMaterial ||
				     material.isMeshBasicMaterial ||
				     material.isMeshStandardMaterial ||
				     material.isShaderMaterial ||
				     material.skinning ) {

					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

				}

				p_uniforms.set( _gl, _this, 'toneMappingExposure' );
				p_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

				var skeleton = object.skeleton;

				if ( skeleton ) {

					if ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {

						p_uniforms.set( _gl, skeleton, 'boneTexture' );
						p_uniforms.set( _gl, skeleton, 'boneTextureWidth' );
						p_uniforms.set( _gl, skeleton, 'boneTextureHeight' );

					} else {

						p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

					}

				}

			}

			if ( refreshMaterial ) {

				if ( material.lights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material.isMeshBasicMaterial ||
				     material.isMeshLambertMaterial ||
				     material.isMeshPhongMaterial ||
				     material.isMeshStandardMaterial ||
				     material.isMeshDepthMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				}

				// refresh single material specific uniforms

				if ( material.isLineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

				} else if ( material.isLineDashedMaterial ) {

					refreshUniformsLine( m_uniforms, material );
					refreshUniformsDash( m_uniforms, material );

				} else if ( material.isPointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material.isMeshLambertMaterial ) {

					refreshUniformsLambert( m_uniforms, material );

				} else if ( material.isMeshPhongMaterial ) {

					refreshUniformsPhong( m_uniforms, material );

				} else if ( material.isMeshPhysicalMaterial ) {

					refreshUniformsPhysical( m_uniforms, material );

				} else if ( material.isMeshStandardMaterial ) {

					refreshUniformsStandard( m_uniforms, material );

				} else if ( material.isMeshDepthMaterial ) {

					if ( material.displacementMap ) {

						m_uniforms.displacementMap.value = material.displacementMap;
						m_uniforms.displacementScale.value = material.displacementScale;
						m_uniforms.displacementBias.value = material.displacementBias;

					}

				} else if ( material.isMeshNormalMaterial ) {

					m_uniforms.opacity.value = material.opacity;

				}

				WebGLUniforms.upload(
						_gl, materialProperties.uniformsList, m_uniforms, _this );

			}


			// common matrices

			p_uniforms.set( _gl, object, 'modelViewMatrix' );
			p_uniforms.set( _gl, object, 'normalMatrix' );
			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

			return program;

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			uniforms.diffuse.value = material.color;

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			uniforms.map.value = material.map;
			uniforms.specularMap.value = material.specularMap;
			uniforms.alphaMap.value = material.alphaMap;

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				// backwards compatibility
				if ( uvScaleMap.isWebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				var offset = uvScaleMap.offset;
				var repeat = uvScaleMap.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

			uniforms.envMap.value = material.envMap;

			// don't flip CubeTexture envMaps, flip everything else:
			//  WebGLRenderTargetCube will be flipped for backwards compatibility
			//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
			// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
			uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		function refreshUniformsLine( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _height * 0.5;

			uniforms.map.value = material.map;

			if ( material.map !== null ) {

				var offset = material.map.offset;
				var repeat = material.map.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

		}

		function refreshUniformsFog( uniforms, fog ) {

			uniforms.fogColor.value = fog.color;

			if ( fog.isFog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog.isFogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsLambert( uniforms, material ) {

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

		}

		function refreshUniformsPhong( uniforms, material ) {

			uniforms.specular.value = material.specular;
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsStandard( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical( uniforms, material ) {

			uniforms.clearCoat.value = material.clearCoat;
			uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

			refreshUniformsStandard( uniforms, material );

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		// Lighting

		function setupShadows( lights ) {

			var lightShadowsLength = 0;

			for ( var i = 0, l = lights.length; i < l; i ++ ) {

				var light = lights[ i ];

				if ( light.castShadow ) {

					_lights.shadows[ lightShadowsLength ++ ] = light;

				}

			}

			_lights.shadows.length = lightShadowsLength;

		}

		function setupLights( lights, camera ) {

			var l, ll, light,
			r = 0, g = 0, b = 0,
			color,
			intensity,
			distance,
			shadowMap,

			viewMatrix = camera.matrixWorldInverse,

			directionalLength = 0,
			pointLength = 0,
			spotLength = 0,
			hemiLength = 0;

			for ( l = 0, ll = lights.length; l < ll; l ++ ) {

				light = lights[ l ];

				color = light.color;
				intensity = light.intensity;
				distance = light.distance;

				shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light.isAmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light.isDirectionalLight ) {

					var uniforms = lightCache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.directionalShadowMap[ directionalLength ] = shadowMap;
					_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
					_lights.directional[ directionalLength ++ ] = uniforms;

				} else if ( light.isSpotLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.spotShadowMap[ spotLength ] = shadowMap;
					_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
					_lights.spot[ spotLength ++ ] = uniforms;

				} else if ( light.isPointLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.pointShadowMap[ pointLength ] = shadowMap;

					if ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {

						_lights.pointShadowMatrix[ pointLength ] = new Matrix4();

					}

					// for point lights we set the shadow matrix to be a translation-only matrix
					// equal to inverse of the light's position
					_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
					_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );

					_lights.point[ pointLength ++ ] = uniforms;

				} else if ( light.isHemisphereLight ) {

					var uniforms = lightCache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					_lights.hemi[ hemiLength ++ ] = uniforms;

				}

			}

			_lights.ambient[ 0 ] = r;
			_lights.ambient[ 1 ] = g;
			_lights.ambient[ 2 ] = b;

			_lights.directional.length = directionalLength;
			_lights.spot.length = spotLength;
			_lights.point.length = pointLength;
			_lights.hemi.length = hemiLength;

			_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;

		}

		// GL state setting

		this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

			state.setCullFace( cullFace );
			state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

		};

		// Textures

		function allocTextureUnit() {

			var textureUnit = _usedTextureUnits;

			if ( textureUnit >= capabilities.maxTextures ) {

				console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

			}

			_usedTextureUnits += 1;

			return textureUnit;

		}

		this.allocTextureUnit = allocTextureUnit;

		// this.setTexture2D = setTexture2D;
		this.setTexture2D = ( function() {

			var warned = false;

			// backwards compatibility: peel texture.texture
			return function setTexture2D( texture, slot ) {

				if ( texture && texture.isWebGLRenderTarget ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTexture = ( function() {

			var warned = false;

			return function setTexture( texture, slot ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
					warned = true;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTextureCube = ( function() {

			var warned = false;

			return function setTextureCube( texture, slot ) {

				// backwards compatibility: peel texture.texture
				if ( texture && texture.isWebGLRenderTargetCube ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
				// TODO: unify these code paths
				if ( ( texture && texture.isCubeTexture ) ||
					 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

					// CompressedTexture can have Array in image :/

					// this function alone should take care of cube textures
					textures.setTextureCube( texture, slot );

				} else {

					// assumed: texture property of THREE.WebGLRenderTargetCube

					textures.setTextureCubeDynamic( texture, slot );

				}

			};

		}() );

		this.getCurrentRenderTarget = function() {

			return _currentRenderTarget;

		};

		this.setRenderTarget = function ( renderTarget ) {

			_currentRenderTarget = renderTarget;

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				textures.setupRenderTarget( renderTarget );

			}

			var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
			var framebuffer;

			if ( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );

				if ( isCube ) {

					framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

				} else {

					framebuffer = renderTargetProperties.__webglFramebuffer;

				}

				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

				_currentViewport.copy( renderTarget.viewport );

			} else {

				framebuffer = null;

				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
				_currentScissorTest = _scissorTest;

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );

			}

			if ( _currentFramebuffer !== framebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_currentFramebuffer = framebuffer;

			}

			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			state.viewport( _currentViewport );

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

			}

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

			if ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;
					var textureFormat = texture.format;
					var textureType = texture.type;

					if ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
					     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
					     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );

						}

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

					}

				}

			}

		};

		// Map three.js constants to WebGL constants

		function paramThreeToGL( p ) {

			var extension;

			if ( p === RepeatWrapping ) return _gl.REPEAT;
			if ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
			if ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

			if ( p === NearestFilter ) return _gl.NEAREST;
			if ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
			if ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

			if ( p === LinearFilter ) return _gl.LINEAR;
			if ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
			if ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

			if ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;
			if ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
			if ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

			if ( p === ByteType ) return _gl.BYTE;
			if ( p === ShortType ) return _gl.SHORT;
			if ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;
			if ( p === IntType ) return _gl.INT;
			if ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;
			if ( p === FloatType ) return _gl.FLOAT;

			if ( p === HalfFloatType ) {

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) return extension.HALF_FLOAT_OES;

			}

			if ( p === AlphaFormat ) return _gl.ALPHA;
			if ( p === RGBFormat ) return _gl.RGB;
			if ( p === RGBAFormat ) return _gl.RGBA;
			if ( p === LuminanceFormat ) return _gl.LUMINANCE;
			if ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
			if ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;
			if ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;

			if ( p === AddEquation ) return _gl.FUNC_ADD;
			if ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;
			if ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

			if ( p === ZeroFactor ) return _gl.ZERO;
			if ( p === OneFactor ) return _gl.ONE;
			if ( p === SrcColorFactor ) return _gl.SRC_COLOR;
			if ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
			if ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;
			if ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
			if ( p === DstAlphaFactor ) return _gl.DST_ALPHA;
			if ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

			if ( p === DstColorFactor ) return _gl.DST_COLOR;
			if ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
			if ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
				p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

				if ( extension !== null ) {

					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

				}

			}

			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
				 p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

				}

			}

			if ( p === RGB_ETC1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

			}

			if ( p === MinEquation || p === MaxEquation ) {

				extension = extensions.get( 'EXT_blend_minmax' );

				if ( extension !== null ) {

					if ( p === MinEquation ) return extension.MIN_EXT;
					if ( p === MaxEquation ) return extension.MAX_EXT;

				}

			}

			if ( p === UnsignedInt248Type ) {

				extension = extensions.get( 'WEBGL_depth_texture' );

				if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

			}

			return 0;

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function FogExp2 ( color, density ) {

		this.name = '';

		this.color = new Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	}

	FogExp2.prototype.isFogExp2 = true;

	FogExp2.prototype.clone = function () {

		return new FogExp2( this.color.getHex(), this.density );

	};

	FogExp2.prototype.toJSON = function ( meta ) {

		return {
			type: 'FogExp2',
			color: this.color.getHex(),
			density: this.density
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Fog ( color, near, far ) {

		this.name = '';

		this.color = new Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	}

	Fog.prototype.isFog = true;

	Fog.prototype.clone = function () {

		return new Fog( this.color.getHex(), this.near, this.far );

	};

	Fog.prototype.toJSON = function ( meta ) {

		return {
			type: 'Fog',
			color: this.color.getHex(),
			near: this.near,
			far: this.far
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Scene () {

		Object3D.call( this );

		this.type = 'Scene';

		this.background = null;
		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

	}

	Scene.prototype = Object.create( Object3D.prototype );

	Scene.prototype.constructor = Scene;

	Scene.prototype.copy = function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		if ( source.background !== null ) this.background = source.background.clone();
		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	};

	Scene.prototype.toJSON = function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

		return data;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function LensFlare( texture, size, distance, blending, color ) {

		Object3D.call( this );

		this.lensFlares = [];

		this.positionScreen = new Vector3();
		this.customUpdateCallback = undefined;

		if ( texture !== undefined ) {

			this.add( texture, size, distance, blending, color );

		}

	}

	LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LensFlare,

		isLensFlare: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.positionScreen.copy( source.positionScreen );
			this.customUpdateCallback = source.customUpdateCallback;

			for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

				this.lensFlares.push( source.lensFlares[ i ] );

			}

			return this;

		},

		add: function ( texture, size, distance, blending, color, opacity ) {

			if ( size === undefined ) size = - 1;
			if ( distance === undefined ) distance = 0;
			if ( opacity === undefined ) opacity = 1;
			if ( color === undefined ) color = new Color( 0xffffff );
			if ( blending === undefined ) blending = NormalBlending;

			distance = Math.min( distance, Math.max( 0, distance ) );

			this.lensFlares.push( {
				texture: texture,	// THREE.Texture
				size: size, 		// size in pixels (-1 = use texture.width)
				distance: distance, 	// distance (0-1) from light source (0=at light source)
				x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
				scale: 1, 		// scale
				rotation: 0, 		// rotation
				opacity: opacity,	// opacity
				color: color,		// color
				blending: blending	// blending
			} );

		},

		/*
		 * Update lens flares update positions on all flares based on the screen position
		 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
		 */

		updateLensFlares: function () {

			var f, fl = this.lensFlares.length;
			var flare;
			var vecX = - this.positionScreen.x * 2;
			var vecY = - this.positionScreen.y * 2;

			for ( f = 0; f < fl; f ++ ) {

				flare = this.lensFlares[ f ];

				flare.x = this.positionScreen.x + vecX * flare.distance;
				flare.y = this.positionScreen.y + vecY * flare.distance;

				flare.wantedRotation = flare.x * Math.PI * 0.25;
				flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *	uvOffset: new THREE.Vector2(),
	 *	uvScale: new THREE.Vector2()
	 * }
	 */

	function SpriteMaterial( parameters ) {

		Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new Color( 0xffffff );
		this.map = null;

		this.rotation = 0;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	SpriteMaterial.prototype = Object.create( Material.prototype );
	SpriteMaterial.prototype.constructor = SpriteMaterial;

	SpriteMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.map = source.map;

		this.rotation = source.rotation;

		return this;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Sprite( material ) {

		Object3D.call( this );

		this.type = 'Sprite';

		this.material = ( material !== undefined ) ? material : new SpriteMaterial();

	}

	Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Sprite,

		isSprite: true,

		raycast: ( function () {

			var matrixPosition = new Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
				var guessSizeSq = this.scale.x * this.scale.y / 4;

				if ( distanceSq > guessSizeSq ) {

					return;

				}

				intersects.push( {

					distance: Math.sqrt( distanceSq ),
					point: this.position,
					face: null,
					object: this

				} );

			};

		}() ),

		clone: function () {

			return new this.constructor( this.material ).copy( this );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LOD() {

		Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			}
		} );

	}


	LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LOD,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source, false );

			var levels = source.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				this.addLevel( level.object.clone(), level.distance );

			}

			return this;

		},

		addLevel: function ( object, distance ) {

			if ( distance === undefined ) distance = 0;

			distance = Math.abs( distance );

			var levels = this.levels;

			for ( var l = 0; l < levels.length; l ++ ) {

				if ( distance < levels[ l ].distance ) {

					break;

				}

			}

			levels.splice( l, 0, { distance: distance, object: object } );

			this.add( object );

		},

		getObjectForDistance: function ( distance ) {

			var levels = this.levels;

			for ( var i = 1, l = levels.length; i < l; i ++ ) {

				if ( distance < levels[ i ].distance ) {

					break;

				}

			}

			return levels[ i - 1 ].object;

		},

		raycast: ( function () {

			var matrixPosition = new Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( matrixPosition );

				this.getObjectForDistance( distance ).raycast( raycaster, intersects );

			};

		}() ),

		update: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function update( camera ) {

				var levels = this.levels;

				if ( levels.length > 1 ) {

					v1.setFromMatrixPosition( camera.matrixWorld );
					v2.setFromMatrixPosition( this.matrixWorld );

					var distance = v1.distanceTo( v2 );

					levels[ 0 ].object.visible = true;

					for ( var i = 1, l = levels.length; i < l; i ++ ) {

						if ( distance >= levels[ i ].distance ) {

							levels[ i - 1 ].object.visible = false;
							levels[ i ].object.visible = true;

						} else {

							break;

						}

					}

					for ( ; i < l; i ++ ) {

						levels[ i ].object.visible = false;

					}

				}

			};

		}(),

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.levels = [];

			var levels = this.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				data.object.levels.push( {
					object: level.object.uuid,
					distance: level.distance
				} );

			}

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { data: data, width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.generateMipmaps  = false;
		this.flipY = false;
		this.unpackAlignment = 1;

	}

	DataTexture.prototype = Object.create( Texture.prototype );
	DataTexture.prototype.constructor = DataTexture;

	DataTexture.prototype.isDataTexture = true;

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	function Skeleton( bones, boneInverses, useVertexTexture ) {

		this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

		this.identityMatrix = new Matrix4();

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );

		// create a bone texture or an array of floats

		if ( this.useVertexTexture ) {

			// layout (1 matrix = 4 pixels)
			//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
			//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
			//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
			//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


			var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
			size = _Math.nextPowerOfTwo( Math.ceil( size ) );
			size = Math.max( size, 4 );

			this.boneTextureWidth = size;
			this.boneTextureHeight = size;

			this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
			this.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );

		} else {

			this.boneMatrices = new Float32Array( 16 * this.bones.length );

		}

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					this.boneInverses.push( new Matrix4() );

				}

			}

		}

	}

	Object.assign( Skeleton.prototype, {

		calculateInverses: function () {

			this.boneInverses = [];

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				var inverse = new Matrix4();

				if ( this.bones[ b ] ) {

					inverse.getInverse( this.bones[ b ].matrixWorld );

				}

				this.boneInverses.push( inverse );

			}

		},

		pose: function () {

			var bone;

			// recover the bind-time world matrices

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				bone = this.bones[ b ];

				if ( bone ) {

					bone.matrixWorld.getInverse( this.boneInverses[ b ] );

				}

			}

			// compute the local matrices, positions, rotations and scales

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				bone = this.bones[ b ];

				if ( bone ) {

					if ( (bone.parent && bone.parent.isBone) ) {

						bone.matrix.getInverse( bone.parent.matrixWorld );
						bone.matrix.multiply( bone.matrixWorld );

					} else {

						bone.matrix.copy( bone.matrixWorld );

					}

					bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

				}

			}

		},

		update: ( function () {

			var offsetMatrix = new Matrix4();

			return function update() {

				// flatten bone matrices to array

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					// compute the offset between the current and the original transform

					var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;

					offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
					offsetMatrix.toArray( this.boneMatrices, b * 16 );

				}

				if ( this.useVertexTexture ) {

					this.boneTexture.needsUpdate = true;

				}

			};

		} )(),

		clone: function () {

			return new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function Bone( skin ) {

		Object3D.call( this );

		this.type = 'Bone';

		this.skin = skin;

	}

	Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Bone,

		isBone: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.skin = source.skin;

			return this;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function SkinnedMesh( geometry, material, useVertexTexture ) {

		Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = "attached";
		this.bindMatrix = new Matrix4();
		this.bindMatrixInverse = new Matrix4();

		// init bones

		// TODO: remove bone creation as there is no reason (other than
		// convenience) for THREE.SkinnedMesh to do this.

		var bones = [];

		if ( this.geometry && this.geometry.bones !== undefined ) {

			var bone, gbone;

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				bone = new Bone( this );
				bones.push( bone );

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

			}

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				if ( gbone.parent !== - 1 && gbone.parent !== null &&
						bones[ gbone.parent ] !== undefined ) {

					bones[ gbone.parent ].add( bones[ b ] );

				} else {

					this.add( bones[ b ] );

				}

			}

		}

		this.normalizeSkinWeights();

		this.updateMatrixWorld( true );
		this.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );

	}


	SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

		constructor: SkinnedMesh,

		isSkinnedMesh: true,

		bind: function( skeleton, bindMatrix ) {

			this.skeleton = skeleton;

			if ( bindMatrix === undefined ) {

				this.updateMatrixWorld( true );

				this.skeleton.calculateInverses();

				bindMatrix = this.matrixWorld;

			}

			this.bindMatrix.copy( bindMatrix );
			this.bindMatrixInverse.getInverse( bindMatrix );

		},

		pose: function () {

			this.skeleton.pose();

		},

		normalizeSkinWeights: function () {

			if ( (this.geometry && this.geometry.isGeometry) ) {

				for ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {

					var sw = this.geometry.skinWeights[ i ];

					var scale = 1.0 / sw.lengthManhattan();

					if ( scale !== Infinity ) {

						sw.multiplyScalar( scale );

					} else {

						sw.set( 1, 0, 0, 0 ); // do something reasonable

					}

				}

			} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {

				var vec = new Vector4();

				var skinWeight = this.geometry.attributes.skinWeight;

				for ( var i = 0; i < skinWeight.count; i ++ ) {

					vec.x = skinWeight.getX( i );
					vec.y = skinWeight.getY( i );
					vec.z = skinWeight.getZ( i );
					vec.w = skinWeight.getW( i );

					var scale = 1.0 / vec.lengthManhattan();

					if ( scale !== Infinity ) {

						vec.multiplyScalar( scale );

					} else {

						vec.set( 1, 0, 0, 0 ); // do something reasonable

					}

					skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

				}

			}

		},

		updateMatrixWorld: function( force ) {

			Mesh.prototype.updateMatrixWorld.call( this, true );

			if ( this.bindMode === "attached" ) {

				this.bindMatrixInverse.getInverse( this.matrixWorld );

			} else if ( this.bindMode === "detached" ) {

				this.bindMatrixInverse.getInverse( this.bindMatrix );

			} else {

				console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );

			}

		},

		clone: function() {

			return new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */

	function LineBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.lights = false;

		this.setValues( parameters );

	}

	LineBasicMaterial.prototype = Object.create( Material.prototype );
	LineBasicMaterial.prototype.constructor = LineBasicMaterial;

	LineBasicMaterial.prototype.isLineBasicMaterial = true;

	LineBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Line( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
			return new LineSegments( geometry, material );

		}

		Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

	}

	Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Line,

		isLine: true,

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var precision = raycaster.linePrecision;
				var precisionSq = precision * precision;

				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var vStart = new Vector3();
				var vEnd = new Vector3();
				var interSegment = new Vector3();
				var interRay = new Vector3();
				var step = (this && this.isLineSegments) ? 2 : 1;

				if ( (geometry && geometry.isBufferGeometry) ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

							var a = indices[ i ];
							var b = indices[ i + 1 ];

							vStart.fromArray( positions, a * 3 );
							vEnd.fromArray( positions, b * 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					} else {

						for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

							vStart.fromArray( positions, 3 * i );
							vEnd.fromArray( positions, 3 * i + 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					}

				} else if ( (geometry && geometry.isGeometry) ) {

					var vertices = geometry.vertices;
					var nbVertices = vertices.length;

					for ( var i = 0; i < nbVertices - 1; i += step ) {

						var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LineSegments( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineSegments';

	}

	LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineSegments,

		isLineSegments: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 * }
	 */

	function PointsMaterial( parameters ) {

		Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.lights = false;

		this.setValues( parameters );

	}

	PointsMaterial.prototype = Object.create( Material.prototype );
	PointsMaterial.prototype.constructor = PointsMaterial;

	PointsMaterial.prototype.isPointsMaterial = true;

	PointsMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Points( geometry, material ) {

		Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

	}

	Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Points,

		isPoints: true,

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var object = this;
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				var threshold = raycaster.params.Points.threshold;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localThresholdSq = localThreshold * localThreshold;
				var position = new Vector3();

				function testPoint( point, index ) {

					var rayPointDistanceSq = ray.distanceSqToPoint( point );

					if ( rayPointDistanceSq < localThresholdSq ) {

						var intersectPoint = ray.closestPointToPoint( point );
						intersectPoint.applyMatrix4( matrixWorld );

						var distance = raycaster.ray.origin.distanceTo( intersectPoint );

						if ( distance < raycaster.near || distance > raycaster.far ) return;

						intersects.push( {

							distance: distance,
							distanceToRay: Math.sqrt( rayPointDistanceSq ),
							point: intersectPoint.clone(),
							index: index,
							face: null,
							object: object

						} );

					}

				}

				if ( (geometry && geometry.isBufferGeometry) ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, il = indices.length; i < il; i ++ ) {

							var a = indices[ i ];

							position.fromArray( positions, a * 3 );

							testPoint( position, a );

						}

					} else {

						for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

							position.fromArray( positions, i * 3 );

							testPoint( position, i );

						}

					}

				} else {

					var vertices = geometry.vertices;

					for ( var i = 0, l = vertices.length; i < l; i ++ ) {

						testPoint( vertices[ i ], i );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Group() {

		Object3D.call( this );

		this.type = 'Group';

	}

	Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Group

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.generateMipmaps = false;

		var scope = this;

		function update() {

			requestAnimationFrame( update );

			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

				scope.needsUpdate = true;

			}

		}

		update();

	}

	VideoTexture.prototype = Object.create( Texture.prototype );
	VideoTexture.prototype.constructor = VideoTexture;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	}

	CompressedTexture.prototype = Object.create( Texture.prototype );
	CompressedTexture.prototype.constructor = CompressedTexture;

	CompressedTexture.prototype.isCompressedTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	}

	CanvasTexture.prototype = Object.create( Texture.prototype );
	CanvasTexture.prototype.constructor = CanvasTexture;

	/**
	 * @author Matt DesLauriers / @mattdesl
	 * @author atix / arthursilber.de
	 */

	function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

		format = format !== undefined ? format : DepthFormat;

		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )

		}

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };

		this.type = type !== undefined ? type : UnsignedShortType;

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.flipY = false;
		this.generateMipmaps	= false;

	}

	DepthTexture.prototype = Object.create( Texture.prototype );
	DepthTexture.prototype.constructor = DepthTexture;
	DepthTexture.prototype.isDepthTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WireframeGeometry( geometry ) {

		BufferGeometry.call( this );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		if ( (geometry && geometry.isGeometry) ) {

			var vertices = geometry.vertices;
			var faces = geometry.faces;
			var numEdges = 0;

			// allocate maximal size
			var edges = new Uint32Array( 6 * faces.length );

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0; j < 3; j ++ ) {

					edge[ 0 ] = face[ keys[ j ] ];
					edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
					edge.sort( sortFunction );

					var key = edge.toString();

					if ( hash[ key ] === undefined ) {

						edges[ 2 * numEdges ] = edge[ 0 ];
						edges[ 2 * numEdges + 1 ] = edge[ 1 ];
						hash[ key ] = true;
						numEdges ++;

					}

				}

			}

			var coords = new Float32Array( numEdges * 2 * 3 );

			for ( var i = 0, l = numEdges; i < l; i ++ ) {

				for ( var j = 0; j < 2; j ++ ) {

					var vertex = vertices[ edges [ 2 * i + j ] ];

					var index = 6 * i + 3 * j;
					coords[ index + 0 ] = vertex.x;
					coords[ index + 1 ] = vertex.y;
					coords[ index + 2 ] = vertex.z;

				}

			}

			this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

		} else if ( (geometry && geometry.isBufferGeometry) ) {

			if ( geometry.index !== null ) {

				// Indexed BufferGeometry

				var indices = geometry.index.array;
				var vertices = geometry.attributes.position;
				var groups = geometry.groups;
				var numEdges = 0;

				if ( groups.length === 0 ) {

					geometry.addGroup( 0, indices.length );

				}

				// allocate maximal size
				var edges = new Uint32Array( 2 * indices.length );

				for ( var o = 0, ol = groups.length; o < ol; ++ o ) {

					var group = groups[ o ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						for ( var j = 0; j < 3; j ++ ) {

							edge[ 0 ] = indices[ i + j ];
							edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
							edge.sort( sortFunction );

							var key = edge.toString();

							if ( hash[ key ] === undefined ) {

								edges[ 2 * numEdges ] = edge[ 0 ];
								edges[ 2 * numEdges + 1 ] = edge[ 1 ];
								hash[ key ] = true;
								numEdges ++;

							}

						}

					}

				}

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numEdges; i < l; i ++ ) {

					for ( var j = 0; j < 2; j ++ ) {

						var index = 6 * i + 3 * j;
						var index2 = edges[ 2 * i + j ];

						coords[ index + 0 ] = vertices.getX( index2 );
						coords[ index + 1 ] = vertices.getY( index2 );
						coords[ index + 2 ] = vertices.getZ( index2 );

					}

				}

				this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

			} else {

				// non-indexed BufferGeometry

				var vertices = geometry.attributes.position.array;
				var numEdges = vertices.length / 3;
				var numTris = numEdges / 3;

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numTris; i < l; i ++ ) {

					for ( var j = 0; j < 3; j ++ ) {

						var index = 18 * i + 6 * j;

						var index1 = 9 * i + 3 * j;
						coords[ index + 0 ] = vertices[ index1 ];
						coords[ index + 1 ] = vertices[ index1 + 1 ];
						coords[ index + 2 ] = vertices[ index1 + 2 ];

						var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
						coords[ index + 3 ] = vertices[ index2 ];
						coords[ index + 4 ] = vertices[ index2 + 1 ];
						coords[ index + 5 ] = vertices[ index2 + 2 ];

					}

				}

				this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

			}

		}

	}

	WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
	WireframeGeometry.prototype.constructor = WireframeGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	function ParametricBufferGeometry( func, slices, stacks ) {

		BufferGeometry.call( this );

		this.type = 'ParametricBufferGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		// generate vertices and uvs

		var vertices = [];
		var uvs = [];

		var i, j, p;
		var u, v;

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				u = j / slices;

				p = func( u, v );
				vertices.push( p.x, p.y, p.z );

				uvs.push( u, v );

			}

		}

		// generate indices

		var indices = [];
		var a, b, c, d;

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				a = i * sliceCount + j;
				b = i * sliceCount + j + 1;
				c = ( i + 1 ) * sliceCount + j + 1;
				d = ( i + 1 ) * sliceCount + j;

				// faces one and two

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', Float32Attribute( vertices, 3 ) );
		this.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );

		// generate normals

		this.computeVertexNormals();

	}

	ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

	/**
	 * @author zz85 / https://github.com/zz85
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	function ParametricGeometry( func, slices, stacks ) {

		Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
		this.mergeVertices();

	}

	ParametricGeometry.prototype = Object.create( Geometry.prototype );
	ParametricGeometry.prototype.constructor = ParametricGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

		BufferGeometry.call( this );

		this.type = 'PolyhedronBufferGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		// default buffer data

		var vertexBuffer = [];
		var uvBuffer = [];

		// the subdivision creates the vertex buffer data

		subdivide( detail );

		// all vertices should lie on a conceptual sphere with a given radius

		appplyRadius( radius );

		// finally, create the uv data

		generateUVs();

		// build non-indexed geometry

		this.addAttribute( 'position', Float32Attribute( vertexBuffer, 3 ) );
		this.addAttribute( 'normal', Float32Attribute( vertexBuffer.slice(), 3 ) );
		this.addAttribute( 'uv', Float32Attribute( uvBuffer, 2 ) );
		this.normalizeNormals();

		this.boundingSphere = new Sphere( new Vector3(), radius );

		// helper functions

		function subdivide( detail ) {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			// iterate over all faces and apply a subdivison with the given detail value

			for ( var i = 0; i < indices.length; i += 3 ) {

				// get the vertices of the face

				getVertexByIndex( indices[ i + 0 ], a );
				getVertexByIndex( indices[ i + 1 ], b );
				getVertexByIndex( indices[ i + 2 ], c );

				// perform subdivision

				subdivideFace( a, b, c, detail );

			}

		}

		function subdivideFace( a, b, c, detail ) {

			var cols = Math.pow( 2, detail );

			// we use this multidimensional array as a data structure for creating the subdivision

			var v = [];

			var i, j;

			// construct all of the vertices for this subdivision

			for ( i = 0 ; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = a.clone().lerp( c, i / cols );
				var bj = b.clone().lerp( c, i / cols );

				var rows = cols - i;

				for ( j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

					}

				}

			}

			// construct all of the faces

			for ( i = 0; i < cols ; i ++ ) {

				for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
						pushVertex( v[ i ][ k ] );

					} else {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );

					}

				}

			}

		}

		function appplyRadius( radius ) {

			var vertex = new Vector3();

			// iterate over the entire buffer and apply the radius to each vertex

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				vertex.normalize().multiplyScalar( radius );

				vertexBuffer[ i + 0 ] = vertex.x;
				vertexBuffer[ i + 1 ] = vertex.y;
				vertexBuffer[ i + 2 ] = vertex.z;

			}

		}

		function generateUVs() {

			var vertex = new Vector3();

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
				var v = inclination( vertex ) / Math.PI + 0.5;
				uvBuffer.push( u, 1 - v );

			}

			correctUVs();

			correctSeam();

		}

		function correctSeam() {

			// handle case when face straddles the seam, see #3269

			for ( var i = 0; i < uvBuffer.length; i += 6 ) {

				// uv data of a single face

				var x0 = uvBuffer[ i + 0 ];
				var x1 = uvBuffer[ i + 2 ];
				var x2 = uvBuffer[ i + 4 ];

				var max = Math.max( x0, x1, x2 );
				var min = Math.min( x0, x1, x2 );

				// 0.9 is somewhat arbitrary

				if ( max > 0.9 && min < 0.1 ) {

					if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
					if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
					if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

				}

			}

		}

		function pushVertex( vertex ) {

			vertexBuffer.push( vertex.x, vertex.y, vertex.z );

		}

		function getVertexByIndex( index, vertex ) {

			var stride = index * 3;

			vertex.x = vertices[ stride + 0 ];
			vertex.y = vertices[ stride + 1 ];
			vertex.z = vertices[ stride + 2 ];

		}

		function correctUVs() {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			var centroid = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

				var azi = azimuth( centroid );

				correctUV( uvA, j + 0, a, azi );
				correctUV( uvB, j + 2, b, azi );
				correctUV( uvC, j + 4, c, azi );

			}

		}

		function correctUV( uv, stride, vector, azimuth  ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

				uvBuffer[ stride ] =  uv.x - 1;

			}

			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

			}

		}

		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}

	}

	PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function TetrahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
		];

		var indices = [
			2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	function TetrahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
	TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function OctahedronBufferGeometry( radius,detail ) {

		var vertices = [
			1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
		];

		var indices = [
			0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	function OctahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	OctahedronGeometry.prototype = Object.create( Geometry.prototype );
	OctahedronGeometry.prototype.constructor = OctahedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function IcosahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
			 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
			 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
		];

		var indices = [
			 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
			 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
			 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
			 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	function IcosahedronGeometry( radius, detail ) {

	 	Geometry.call( this );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
	IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function DodecahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,    - 1, - 1,  1,
			- 1,  1, - 1,    - 1,  1,  1,
			 1, - 1, - 1,     1, - 1,  1,
			 1,  1, - 1,     1,  1,  1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t,     0, - r,  t,
			 0,  r, - t,     0,  r,  t,

			// (±1/φ, ±φ, 0)
			- r, - t,  0,    - r,  t,  0,
			 r, - t,  0,     r,  t,  0,

			// (±φ, 0, ±1/φ)
			- t,  0, - r,     t,  0, - r,
			- t,  0,  r,     t,  0,  r
		];

		var indices = [
			 3, 11,  7,      3,  7, 15,      3, 15, 13,
			 7, 19, 17,      7, 17,  6,      7,  6, 15,
			17,  4,  8,     17,  8, 10,     17, 10,  6,
			 8,  0, 16,      8, 16,  2,      8,  2, 10,
			 0, 12,  1,      0,  1, 18,      0, 18, 16,
			 6, 10,  2,      6,  2, 13,      6, 13, 15,
			 2, 16, 18,      2, 18,  3,      2,  3, 13,
			18,  1,  9,     18,  9, 11,     18, 11,  3,
			 4, 14, 12,      4, 12,  0,      4,  0,  8,
			11,  9,  5,     11,  5, 19,     11, 19,  7,
			19,  5, 14,     19, 14,  4,     19,  4, 17,
			 1, 12, 14,      1, 14,  5,      1,  5,  9
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

	/**
	 * @author Abe Pazos / https://hamoid.com
	 */

	function DodecahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
	DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function PolyhedronGeometry( vertices, indices, radius, detail ) {

		Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
		this.mergeVertices();

	}

	PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
	PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Creates a tube which extrudes along a 3d spline.
	 *
	 */

	function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

		BufferGeometry.call( this );

		this.type = 'TubeBufferGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		tubularSegments = tubularSegments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;

		var frames = path.computeFrenetFrames( tubularSegments, closed );

		// expose internals

		this.tangents = frames.tangents;
		this.normals = frames.normals;
		this.binormals = frames.binormals;

		// helper variables

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();

		var i, j;

		// buffer

		var vertices = [];
		var normals = [];
		var uvs = [];
		var indices = [];

		// create buffer data

		generateBufferData();

		// build geometry

		this.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', Float32Attribute( vertices, 3 ) );
		this.addAttribute( 'normal', Float32Attribute( normals, 3 ) );
		this.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );

		// functions

		function generateBufferData() {

			for ( i = 0; i < tubularSegments; i ++ ) {

				generateSegment( i );

			}

			// if the geometry is not closed, generate the last row of vertices and normals
			// at the regular position on the given path
			//
			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

			generateSegment( ( closed === false ) ? tubularSegments : 0 );

			// uvs are generated in a separate function.
			// this makes it easy compute correct values for closed geometries

			generateUVs();

			// finally create faces

			generateIndices();

		}

		function generateSegment( i ) {

			// we use getPointAt to sample evenly distributed points from the given path

			var P = path.getPointAt( i / tubularSegments );

			// retrieve corresponding normal and binormal

			var N = frames.normals[ i ];
			var B = frames.binormals[ i ];

			// generate normals and vertices for the current segment

			for ( j = 0; j <= radialSegments; j ++ ) {

				var v = j / radialSegments * Math.PI * 2;

				var sin =   Math.sin( v );
				var cos = - Math.cos( v );

				// normal

				normal.x = ( cos * N.x + sin * B.x );
				normal.y = ( cos * N.y + sin * B.y );
				normal.z = ( cos * N.z + sin * B.z );
				normal.normalize();

				normals.push( normal.x, normal.y, normal.z );

				// vertex

				vertex.x = P.x + radius * normal.x;
				vertex.y = P.y + radius * normal.y;
				vertex.z = P.z + radius * normal.z;

				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		function generateIndices() {

			for ( j = 1; j <= tubularSegments; j ++ ) {

				for ( i = 1; i <= radialSegments; i ++ ) {

					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

		}

		function generateUVs() {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				for ( j = 0; j <= radialSegments; j ++ ) {

					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;

					uvs.push( uv.x, uv.y );

				}

			}

		}

	}

	TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

	/**
	 * @author oosmoxiecode / https://github.com/oosmoxiecode
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 *
	 * Creates a tube which extrudes along a 3d spline.
	 */

	function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

		Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

		var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

		// expose internals

		this.tangents = bufferGeometry.tangents;
		this.normals = bufferGeometry.normals;
		this.binormals = bufferGeometry.binormals;

		// create geometry

		this.fromBufferGeometry( bufferGeometry );
		this.mergeVertices();

	}

	TubeGeometry.prototype = Object.create( Geometry.prototype );
	TubeGeometry.prototype.constructor = TubeGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * see: http://www.blackpawn.com/texts/pqtorus/
	 */
	function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

		BufferGeometry.call( this );

		this.type = 'TorusKnotBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		radius = radius || 100;
		tube = tube || 40;
		tubularSegments = Math.floor( tubularSegments ) || 64;
		radialSegments = Math.floor( radialSegments ) || 8;
		p = p || 2;
		q = q || 3;

		// used to calculate buffer length
		var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
		var indexCount = radialSegments * tubularSegments * 2 * 3;

		// buffers
		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables
		var i, j, index = 0, indexOffset = 0;

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();

		var P1 = new Vector3();
		var P2 = new Vector3();

		var B = new Vector3();
		var T = new Vector3();
		var N = new Vector3();

		// generate vertices, normals and uvs

		for ( i = 0; i <= tubularSegments; ++ i ) {

			// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

			var u = i / tubularSegments * p * Math.PI * 2;

			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

			// calculate orthonormal basis

			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );

			// normalize B, N. T can be ignored, we don't use it

			B.normalize();
			N.normalize();

			for ( j = 0; j <= radialSegments; ++ j ) {

				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

				var v = j / radialSegments * Math.PI * 2;
				var cx = - tube * Math.cos( v );
				var cy = tube * Math.sin( v );

				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );

				// vertex
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
				normal.subVectors( vertex, P1 ).normalize();
				normals.setXYZ( index, normal.x, normal.y, normal.z );

				// uv
				uv.x = i / tubularSegments;
				uv.y = j / radialSegments;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

		}

		// generate indices

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				// indices
				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

				// face two
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		// this function calculates the current position on the torus curve

		function calculatePositionOnCurve( u, p, q, radius, position ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = q / p * u;
			var cs = Math.cos( quOverP );

			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;

		}

	}

	TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

	/**
	 * @author oosmoxiecode
	 */

	function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

		Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		if( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

		this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
		this.mergeVertices();

	}

	TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
	TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		BufferGeometry.call( this );

		this.type = 'TorusBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 100;
		tube = tube || 40;
		radialSegments = Math.floor( radialSegments ) || 8;
		tubularSegments = Math.floor( tubularSegments ) || 6;
		arc = arc || Math.PI * 2;

		// used to calculate buffer length
		var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
		var indexCount = radialSegments * tubularSegments * 2 * 3;

		// buffers
		var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
		var vertices = new Float32Array( vertexCount * 3 );
		var normals = new Float32Array( vertexCount * 3 );
		var uvs = new Float32Array( vertexCount * 2 );

		// offset variables
		var vertexBufferOffset = 0;
		var uvBufferOffset = 0;
		var indexBufferOffset = 0;

		// helper variables
		var center = new Vector3();
		var vertex = new Vector3();
		var normal = new Vector3();

		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= radialSegments; j ++ ) {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				// vertex
				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				vertices[ vertexBufferOffset ] = vertex.x;
				vertices[ vertexBufferOffset + 1 ] = vertex.y;
				vertices[ vertexBufferOffset + 2 ] = vertex.z;

				// this vector is used to calculate the normal
				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );

				// normal
				normal.subVectors( vertex, center ).normalize();

				normals[ vertexBufferOffset ] = normal.x;
				normals[ vertexBufferOffset + 1 ] = normal.y;
				normals[ vertexBufferOffset + 2 ] = normal.z;

				// uv
				uvs[ uvBufferOffset ] = i / tubularSegments;
				uvs[ uvBufferOffset + 1 ] = j / radialSegments;

				// update offsets
				vertexBufferOffset += 3;
				uvBufferOffset += 2;

			}

		}

		// generate indices

		for ( j = 1; j <= radialSegments; j ++ ) {

			for ( i = 1; i <= tubularSegments; i ++ ) {

				// indices
				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				// face one
				indices[ indexBufferOffset ] = a;
				indices[ indexBufferOffset + 1 ] = b;
				indices[ indexBufferOffset + 2 ] = d;

				// face two
				indices[ indexBufferOffset + 3 ] = b;
				indices[ indexBufferOffset + 4 ] = c;
				indices[ indexBufferOffset + 5 ] = d;

				// update offset
				indexBufferOffset += 6;

			}

		}

		// build geometry
		this.setIndex( new BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	}

	TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
	 */

	function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );

	}

	TorusGeometry.prototype = Object.create( Geometry.prototype );
	TorusGeometry.prototype.constructor = TorusGeometry;

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		triangulate: ( function () {

			/**
			 * This code is a quick port of code written in C++ which was submitted to
			 * flipcode.com by John W. Ratcliff  // July 22, 2000
			 * See original code and more information here:
			 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
			 *
			 * ported to actionscript by Zevan Rosser
			 * www.actionsnippet.com
			 *
			 * ported to javascript by Joshua Koo
			 * http://www.lab4games.net/zz85/blog
			 *
			 */

			function snip( contour, u, v, w, n, verts ) {

				var p;
				var ax, ay, bx, by;
				var cx, cy, px, py;

				ax = contour[ verts[ u ] ].x;
				ay = contour[ verts[ u ] ].y;

				bx = contour[ verts[ v ] ].x;
				by = contour[ verts[ v ] ].y;

				cx = contour[ verts[ w ] ].x;
				cy = contour[ verts[ w ] ].y;

				if ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;

				var aX, aY, bX, bY, cX, cY;
				var apx, apy, bpx, bpy, cpx, cpy;
				var cCROSSap, bCROSScp, aCROSSbp;

				aX = cx - bx;  aY = cy - by;
				bX = ax - cx;  bY = ay - cy;
				cX = bx - ax;  cY = by - ay;

				for ( p = 0; p < n; p ++ ) {

					px = contour[ verts[ p ] ].x;
					py = contour[ verts[ p ] ].y;

					if ( ( ( px === ax ) && ( py === ay ) ) ||
						 ( ( px === bx ) && ( py === by ) ) ||
						 ( ( px === cx ) && ( py === cy ) ) )	continue;

					apx = px - ax;  apy = py - ay;
					bpx = px - bx;  bpy = py - by;
					cpx = px - cx;  cpy = py - cy;

					// see if p is inside triangle abc

					aCROSSbp = aX * bpy - aY * bpx;
					cCROSSap = cX * apy - cY * apx;
					bCROSScp = bX * cpy - bY * cpx;

					if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

				}

				return true;

			}

			// takes in an contour array and returns

			return function triangulate( contour, indices ) {

				var n = contour.length;

				if ( n < 3 ) return null;

				var result = [],
					verts = [],
					vertIndices = [];

				/* we want a counter-clockwise polygon in verts */

				var u, v, w;

				if ( ShapeUtils.area( contour ) > 0.0 ) {

					for ( v = 0; v < n; v ++ ) verts[ v ] = v;

				} else {

					for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

				}

				var nv = n;

				/*  remove nv - 2 vertices, creating 1 triangle every time */

				var count = 2 * nv;   /* error detection */

				for ( v = nv - 1; nv > 2; ) {

					/* if we loop, it is probably a non-simple polygon */

					if ( ( count -- ) <= 0 ) {

						//** Triangulate: ERROR - probable bad polygon!

						//throw ( "Warning, unable to triangulate polygon!" );
						//return null;
						// Sometimes warning is fine, especially polygons are triangulated in reverse.
						console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

						if ( indices ) return vertIndices;
						return result;

					}

					/* three consecutive vertices in current polygon, <u,v,w> */

					u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
					v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
					w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

					if ( snip( contour, u, v, w, nv, verts ) ) {

						var a, b, c, s, t;

						/* true names of the vertices */

						a = verts[ u ];
						b = verts[ v ];
						c = verts[ w ];

						/* output Triangle */

						result.push( [ contour[ a ],
							contour[ b ],
							contour[ c ] ] );


						vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

						/* remove v from the remaining polygon */

						for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

							verts[ s ] = verts[ t ];

						}

						nv --;

						/* reset error detection counter */

						count = 2 * nv;

					}

				}

				if ( indices ) return vertIndices;
				return result;

			}

		} )(),

		triangulateShape: function ( contour, holes ) {

			function removeDupEndPts(points) {

				var l = points.length;

				if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

					points.pop();

				}

			}

			removeDupEndPts( contour );
			holes.forEach( removeDupEndPts );

			function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

				// inOtherPt needs to be collinear to the inSegment
				if ( inSegPt1.x !== inSegPt2.x ) {

					if ( inSegPt1.x < inSegPt2.x ) {

						return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

					} else {

						return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

					}

				} else {

					if ( inSegPt1.y < inSegPt2.y ) {

						return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

					} else {

						return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

					}

				}

			}

			function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

				var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
				var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

				var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
				var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

				var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
				var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

				if ( Math.abs( limit ) > Number.EPSILON ) {

					// not parallel

					var perpSeg2;
					if ( limit > 0 ) {

						if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

					} else {

						if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

					}

					// i.e. to reduce rounding errors
					// intersection at endpoint of segment#1?
					if ( perpSeg2 === 0 ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt1 ];

					}
					if ( perpSeg2 === limit ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt2 ];

					}
					// intersection at endpoint of segment#2?
					if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
					if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

					// return real intersection point
					var factorSeg1 = perpSeg2 / limit;
					return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
								y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

				} else {

					// parallel or collinear
					if ( ( perpSeg1 !== 0 ) ||
						 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

					// they are collinear or degenerate
					var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
					var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
					// both segments are points
					if ( seg1Pt && seg2Pt ) {

						if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
							 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
						return [ inSeg1Pt1 ];                 						// they are the same point

					}
					// segment#1  is a single point
					if ( seg1Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
						return [ inSeg1Pt1 ];

					}
					// segment#2  is a single point
					if ( seg2Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
						return [ inSeg2Pt1 ];

					}

					// they are collinear segments, which might overlap
					var seg1min, seg1max, seg1minVal, seg1maxVal;
					var seg2min, seg2max, seg2minVal, seg2maxVal;
					if ( seg1dx !== 0 ) {

						// the segments are NOT on a vertical line
						if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

						}
						if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

						}

					} else {

						// the segments are on a vertical line
						if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

						}
						if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

						}

					}
					if ( seg1minVal <= seg2minVal ) {

						if ( seg1maxVal <  seg2minVal )	return [];
						if ( seg1maxVal === seg2minVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg2min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
						return	[ seg2min, seg2max ];

					} else {

						if ( seg1minVal >  seg2maxVal )	return [];
						if ( seg1minVal === seg2maxVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg1min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
						return	[ seg1min, seg2max ];

					}

				}

			}

			function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

				// The order of legs is important

				// translation of all points, so that Vertex is at (0,0)
				var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
				var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
				var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

				// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
				var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
				var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

				if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

					// angle != 180 deg.

					var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
					// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

					if ( from2toAngle > 0 ) {

						// main angle < 180 deg.
						return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

					} else {

						// main angle > 180 deg.
						return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

					}

				} else {

					// angle == 180 deg.
					// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
					return	( from2otherAngle > 0 );

				}

			}


			function removeHoles( contour, holes ) {

				var shape = contour.concat(); // work on this shape
				var hole;

				function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

					// Check if hole point lies within angle around shape point
					var lastShapeIdx = shape.length - 1;

					var prevShapeIdx = inShapeIdx - 1;
					if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

					var nextShapeIdx = inShapeIdx + 1;
					if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

					var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
						return	false;

					}

					// Check if shape point lies within angle around hole point
					var lastHoleIdx = hole.length - 1;

					var prevHoleIdx = inHoleIdx - 1;
					if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

					var nextHoleIdx = inHoleIdx + 1;
					if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

					insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
						return	false;

					}

					return	true;

				}

				function intersectsShapeEdge( inShapePt, inHolePt ) {

					// checks for intersections with shape edges
					var sIdx, nextIdx, intersection;
					for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

						nextIdx = sIdx + 1; nextIdx %= shape.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
						if ( intersection.length > 0 )		return	true;

					}

					return	false;

				}

				var indepHoles = [];

				function intersectsHoleEdge( inShapePt, inHolePt ) {

					// checks for intersections with hole edges
					var ihIdx, chkHole,
						hIdx, nextIdx, intersection;
					for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

						chkHole = holes[ indepHoles[ ihIdx ]];
						for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

							nextIdx = hIdx + 1; nextIdx %= chkHole.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;

						}

					}
					return	false;

				}

				var holeIndex, shapeIndex,
					shapePt, holePt,
					holeIdx, cutKey, failedCuts = [],
					tmpShape1, tmpShape2,
					tmpHole1, tmpHole2;

				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

					indepHoles.push( h );

				}

				var minShapeIndex = 0;
				var counter = indepHoles.length * 2;
				while ( indepHoles.length > 0 ) {

					counter --;
					if ( counter < 0 ) {

						console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
						break;

					}

					// search for shape-vertex and hole-vertex,
					// which can be connected without intersections
					for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

						shapePt = shape[ shapeIndex ];
						holeIndex	= - 1;

						// search for hole which can be reached without intersections
						for ( var h = 0; h < indepHoles.length; h ++ ) {

							holeIdx = indepHoles[ h ];

							// prevent multiple checks
							cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
							if ( failedCuts[ cutKey ] !== undefined )			continue;

							hole = holes[ holeIdx ];
							for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

								holePt = hole[ h2 ];
								if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
								if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
								if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

								holeIndex = h2;
								indepHoles.splice( h, 1 );

								tmpShape1 = shape.slice( 0, shapeIndex + 1 );
								tmpShape2 = shape.slice( shapeIndex );
								tmpHole1 = hole.slice( holeIndex );
								tmpHole2 = hole.slice( 0, holeIndex + 1 );

								shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

								minShapeIndex = shapeIndex;

								// Debug only, to show the selected cuts
								// glob_CutLines.push( [ shapePt, holePt ] );

								break;

							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found

							failedCuts[ cutKey ] = true;			// remember failure

						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found

					}

				}

				return shape; 			/* shape with no holes */

			}


			var i, il, f, face,
				key, index,
				allPointsMap = {};

			// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

			var allpoints = contour.concat();

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				Array.prototype.push.apply( allpoints, holes[ h ] );

			}

			//console.log( "allpoints",allpoints, allpoints.length );

			// prepare all points map

			for ( i = 0, il = allpoints.length; i < il; i ++ ) {

				key = allpoints[ i ].x + ":" + allpoints[ i ].y;

				if ( allPointsMap[ key ] !== undefined ) {

					console.warn( "THREE.ShapeUtils: Duplicate point", key, i );

				}

				allPointsMap[ key ] = i;

			}

			// remove holes by cutting paths to holes and adding them to the shape
			var shapeWithoutHoles = removeHoles( contour, holes );

			var triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
			//console.log( "triangles",triangles, triangles.length );

			// check all face vertices against all points map

			for ( i = 0, il = triangles.length; i < il; i ++ ) {

				face = triangles[ i ];

				for ( f = 0; f < 3; f ++ ) {

					key = face[ f ].x + ":" + face[ f ].y;

					index = allPointsMap[ key ];

					if ( index !== undefined ) {

						face[ f ] = index;

					}

				}

			}

			return triangles.concat();

		},

		isClockWise: function ( pts ) {

			return ShapeUtils.area( pts ) < 0;

		},

		// Bezier Curves formulas obtained from
		// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

		// Quad Bezier Functions

		b2: ( function () {

			function b2p0( t, p ) {

				var k = 1 - t;
				return k * k * p;

			}

			function b2p1( t, p ) {

				return 2 * ( 1 - t ) * t * p;

			}

			function b2p2( t, p ) {

				return t * t * p;

			}

			return function b2( t, p0, p1, p2 ) {

				return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );

			};

		} )(),

		// Cubic Bezier Functions

		b3: ( function () {

			function b3p0( t, p ) {

				var k = 1 - t;
				return k * k * k * p;

			}

			function b3p1( t, p ) {

				var k = 1 - t;
				return 3 * k * k * t * p;

			}

			function b3p2( t, p ) {

				var k = 1 - t;
				return 3 * k * t * t * p;

			}

			function b3p3( t, p ) {

				return t * t * t * p;

			}

			return function b3( t, p0, p1, p2, p3 ) {

				return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );

			};

		} )()

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  amount: <int>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
	 *  frames: <Object> // containing arrays of tangents, normals, binormals
	 *
	 *  uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	function ExtrudeGeometry( shapes, options ) {

		if ( typeof( shapes ) === "undefined" ) {

			shapes = [];
			return;

		}

		Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

		// can't really use automatic vertex normals
		// as then front and back sides get smoothed too
		// should do separate smoothing just for sides

		//this.computeVertexNormals();

		//console.log( "took", ( Date.now() - startTime ) );

	}

	ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
	ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

	ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {

		var sl = shapes.length;

		for ( var s = 0; s < sl; s ++ ) {

			var shape = shapes[ s ];
			this.addShape( shape, options );

		}

	};

	ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

		var amount = options.amount !== undefined ? options.amount : 100;

		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var steps = options.steps !== undefined ? options.steps : 1;

		var extrudePath = options.extrudePath;
		var extrudePts, extrudeByPath = false;

		// Use default WorldUVGenerator if no UV generators are specified.
		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

		var splineTube, binormal, normal, position2;
		if ( extrudePath ) {

			extrudePts = extrudePath.getSpacedPoints( steps );

			extrudeByPath = true;
			bevelEnabled = false; // bevels not supported for path extrusion

			// SETUP TNB variables

			// TODO1 - have a .isClosed in spline?

			splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );

			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

			binormal = new Vector3();
			normal = new Vector3();
			position2 = new Vector3();

		}

		// Safeguards if bevels are not enabled

		if ( ! bevelEnabled ) {

			bevelSegments = 0;
			bevelThickness = 0;
			bevelSize = 0;

		}

		// Variables initialization

		var ahole, h, hl; // looping of holes
		var scope = this;

		var shapesOffset = this.vertices.length;

		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				if ( ShapeUtils.isClockWise( ahole ) ) {

					holes[ h ] = ahole.reverse();

				}

			}

			reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

		}


		var faces = ShapeUtils.triangulateShape( vertices, holes );

		/* Vertices */

		var contour = vertices; // vertices has all points but contour has only points of circumference

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			vertices = vertices.concat( ahole );

		}


		function scalePt2( pt, vec, size ) {

			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

			return vec.clone().multiplyScalar( size ).add( pt );

		}

		var b, bs, t, z,
			vert, vlen = vertices.length,
			face, flen = faces.length;


		// Find directions for point movement


		function getBevelVec( inPt, inPrev, inNext ) {

			// computes for inPt the corresponding point inPt' on a new contour
			//   shifted by 1 unit (length of normalized vector) to the left
			// if we walk along contour clockwise, this new contour is outside the old one
			//
			// inPt' is the intersection of the two lines parallel to the two
			//  adjacent edges of inPt at a distance of 1 unit on the left side.

			var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt

			// good reading for geometry algorithms (here: line-line intersection)
			// http://geomalgorithms.com/a05-_intersect-1.html

			var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
			var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;

			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

			// check for collinear edges
			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

				// not collinear

				// length of vectors for normalizing

				var v_prev_len = Math.sqrt( v_prev_lensq );
				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

				// shift adjacent points by unit vectors to the left

				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

				// scaling factor for v_prev to intersection point

				var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
						  ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				// vector from inPt to intersection point

				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

				// Don't normalize!, otherwise sharp corners become ugly
				//  but prevent crazy spikes
				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
				if ( v_trans_lensq <= 2 ) {

					return	new Vector2( v_trans_x, v_trans_y );

				} else {

					shrink_by = Math.sqrt( v_trans_lensq / 2 );

				}

			} else {

				// handle special case of collinear edges

				var direction_eq = false;		// assumes: opposite
				if ( v_prev_x > Number.EPSILON ) {

					if ( v_next_x > Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( v_prev_x < - Number.EPSILON ) {

						if ( v_next_x < - Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

							direction_eq = true;

						}

					}

				}

				if ( direction_eq ) {

					// console.log("Warning: lines are a straight sequence");
					v_trans_x = - v_prev_y;
					v_trans_y =  v_prev_x;
					shrink_by = Math.sqrt( v_prev_lensq );

				} else {

					// console.log("Warning: lines are a straight spike");
					v_trans_x = v_prev_x;
					v_trans_y = v_prev_y;
					shrink_by = Math.sqrt( v_prev_lensq / 2 );

				}

			}

			return	new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

		}


		var contourMovements = [];

		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			// console.log('i,j,k', i, j , k)

			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

		}

		var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			oneHoleMovements = [];

			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

			}

			holesMovements.push( oneHoleMovements );
			verticesMovements = verticesMovements.concat( oneHoleMovements );

		}


		// Loop bevelSegments, 1 for the front, 1 for the back

		for ( b = 0; b < bevelSegments; b ++ ) {

			//for ( b = bevelSegments; b > 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * Math.cos( t * Math.PI / 2 );
			bs = bevelSize * Math.sin( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

				v( vert.x, vert.y,  - z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					v( vert.x, vert.y,  - z );

				}

			}

		}

		bs = bevelSize;

		// Back facing vertices

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, 0 );

			} else {

				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

		// Add stepped vertices...
		// Including front facing vertices

		var s;

		for ( s = 1; s <= steps; s ++ ) {

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount / steps * s );

				} else {

					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

		}


		// Add bevel segments planes

		//for ( b = 1; b <= bevelSegments; b ++ ) {
		for ( b = bevelSegments - 1; b >= 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * Math.cos ( t * Math.PI / 2 );
			bs = bevelSize * Math.sin( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
				v( vert.x, vert.y,  amount + z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y,  amount + z );

					} else {

						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

					}

				}

			}

		}

		/* Faces */

		// Top and bottom faces

		buildLidFaces();

		// Sides faces

		buildSideFaces();


		/////  Internal functions

		function buildLidFaces() {

			if ( bevelEnabled ) {

				var layer = 0; // steps + 1
				var offset = vlen * layer;

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

				}

				layer = steps + bevelSegments * 2;
				offset = vlen * layer;

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

				}

			} else {

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

				}

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

				}

			}

		}

		// Create faces for the z-sides of the shape

		function buildSideFaces() {

			var layeroffset = 0;
			sidewalls( contour, layeroffset );
			layeroffset += contour.length;

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				sidewalls( ahole, layeroffset );

				//, true
				layeroffset += ahole.length;

			}

		}

		function sidewalls( contour, layeroffset ) {

			var j, k;
			i = contour.length;

			while ( -- i >= 0 ) {

				j = i;
				k = i - 1;
				if ( k < 0 ) k = contour.length - 1;

				//console.log('b', i,j, i-1, k,vertices.length);

				var s = 0, sl = steps  + bevelSegments * 2;

				for ( s = 0; s < sl; s ++ ) {

					var slen1 = vlen * s;
					var slen2 = vlen * ( s + 1 );

					var a = layeroffset + j + slen1,
						b = layeroffset + k + slen1,
						c = layeroffset + k + slen2,
						d = layeroffset + j + slen2;

					f4( a, b, c, d, contour, s, sl, j, k );

				}

			}

		}


		function v( x, y, z ) {

			scope.vertices.push( new Vector3( x, y, z ) );

		}

		function f3( a, b, c ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;

			scope.faces.push( new Face3( a, b, c, null, null, 0 ) );

			var uvs = uvgen.generateTopUV( scope, a, b, c );

			scope.faceVertexUvs[ 0 ].push( uvs );

		}

		function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;
			d += shapesOffset;

			scope.faces.push( new Face3( a, b, d, null, null, 1 ) );
			scope.faces.push( new Face3( b, c, d, null, null, 1 ) );

			var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );

			scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
			scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

		}

	};

	ExtrudeGeometry.WorldUVGenerator = {

		generateTopUV: function ( geometry, indexA, indexB, indexC ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];

			return [
				new Vector2( a.x, a.y ),
				new Vector2( b.x, b.y ),
				new Vector2( c.x, c.y )
			];

		},

		generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];
			var d = vertices[ indexD ];

			if ( Math.abs( a.y - b.y ) < 0.01 ) {

				return [
					new Vector2( a.x, 1 - a.z ),
					new Vector2( b.x, 1 - b.z ),
					new Vector2( c.x, 1 - c.z ),
					new Vector2( d.x, 1 - d.z )
				];

			} else {

				return [
					new Vector2( a.y, 1 - a.z ),
					new Vector2( b.y, 1 - b.z ),
					new Vector2( c.y, 1 - c.z ),
					new Vector2( d.y, 1 - d.z )
				];

			}

		}
	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float> // how far from text outline is bevel
	 * }
	 */

	function TextGeometry( text, parameters ) {

		parameters = parameters || {};

		var font = parameters.font;

		if ( (font && font.isFont) === false ) {

			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new Geometry();

		}

		var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

		// translate parameters to ExtrudeGeometry API

		parameters.amount = parameters.height !== undefined ? parameters.height : 50;

		// defaults

		if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
		if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
		if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

		ExtrudeGeometry.call( this, shapes, parameters );

		this.type = 'TextGeometry';

	}

	TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );
	TextGeometry.prototype.constructor = TextGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * based on THREE.SphereGeometry
	 */

	function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = thetaStart + thetaLength;

		var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );

		var positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		var index = 0, vertices = [], normal = new Vector3();

		for ( var y = 0; y <= heightSegments; y ++ ) {

			var verticesRow = [];

			var v = y / heightSegments;

			for ( var x = 0; x <= widthSegments; x ++ ) {

				var u = x / widthSegments;

				var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				var py = radius * Math.cos( thetaStart + v * thetaLength );
				var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				normal.set( px, py, pz ).normalize();

				positions.setXYZ( index, px, py, pz );
				normals.setXYZ( index, normal.x, normal.y, normal.z );
				uvs.setXY( index, u, 1 - v );

				verticesRow.push( index );

				index ++;

			}

			vertices.push( verticesRow );

		}

		var indices = [];

		for ( var y = 0; y < heightSegments; y ++ ) {

			for ( var x = 0; x < widthSegments; x ++ ) {

				var v1 = vertices[ y ][ x + 1 ];
				var v2 = vertices[ y ][ x ];
				var v3 = vertices[ y + 1 ][ x ];
				var v4 = vertices[ y + 1 ][ x + 1 ];

				if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
				if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );

			}

		}

		this.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', positions );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		this.boundingSphere = new Sphere( new Vector3(), radius );

	}

	SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );

	}

	SphereGeometry.prototype = Object.create( Geometry.prototype );
	SphereGeometry.prototype.constructor = SphereGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'RingBufferGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 20;
		outerRadius = outerRadius || 50;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

		// these are used to calculate buffer length
		var vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );
		var indexCount = thetaSegments * phiSegments * 2 * 3;

		// buffers
		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// some helper variables
		var index = 0, indexOffset = 0, segment;
		var radius = innerRadius;
		var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		var vertex = new Vector3();
		var uv = new Vector2();
		var j, i;

		// generate vertices, normals and uvs

		// values are generate from the inside of the ring to the outside

		for ( j = 0; j <= phiSegments; j ++ ) {

			for ( i = 0; i <= thetaSegments; i ++ ) {

				segment = thetaStart + i / thetaSegments * thetaLength;

				// vertex
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal
				normals.setXYZ( index, 0, 0, 1 );

				// uv
				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index++;

			}

			// increase the radius for next row of vertices
			radius += radiusStep;

		}

		// generate indices

		for ( j = 0; j < phiSegments; j ++ ) {

			var thetaSegmentLevel = j * ( thetaSegments + 1 );

			for ( i = 0; i < thetaSegments; i ++ ) {

				segment = i + thetaSegmentLevel;

				// indices
				var a = segment;
				var b = segment + thetaSegments + 1;
				var c = segment + thetaSegments + 2;
				var d = segment + 1;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;

				// face two
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

	}

	RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	RingBufferGeometry.prototype.constructor = RingBufferGeometry;

	/**
	 * @author Kaleb Murphy
	 */

	function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );

	}

	RingGeometry.prototype = Object.create( Geometry.prototype );
	RingGeometry.prototype.constructor = RingGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	function PlaneGeometry( width, height, widthSegments, heightSegments ) {

		Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );

	}

	PlaneGeometry.prototype = Object.create( Geometry.prototype );
	PlaneGeometry.prototype.constructor = PlaneGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	 // points - to create a closed torus, one must use a set of points
	 //    like so: [ a, b, c, d, a ], see first is the same as last.
	 // segments - the number of circumference segments to create
	 // phiStart - the starting radian
	 // phiLength - the radian (0 to 2PI) range of the lathed section
	 //    2PI is a closed lathe, less than 2PI is a portion.

	function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

		BufferGeometry.call( this );

		this.type = 'LatheBufferGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = Math.floor( segments ) || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || Math.PI * 2;

		// clamp phiLength so it's in range of [ 0, 2PI ]
		phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );

		// these are used to calculate buffer length
		var vertexCount = ( segments + 1 ) * points.length;
		var indexCount = segments * points.length * 2 * 3;

		// buffers
		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables
		var index = 0, indexOffset = 0, base;
		var inverseSegments = 1.0 / segments;
		var vertex = new Vector3();
		var uv = new Vector2();
		var i, j;

		// generate vertices and uvs

		for ( i = 0; i <= segments; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var sin = Math.sin( phi );
			var cos = Math.cos( phi );

			for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

				// vertex
				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// uv
				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

		}

		// generate indices

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < ( points.length - 1 ); j ++ ) {

				base = j + i * points.length;

				// indices
				var a = base;
				var b = base + points.length;
				var c = base + points.length + 1;
				var d = base + 1;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

				// face two
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'uv', uvs );

		// generate normals

		this.computeVertexNormals();

		// if the geometry is closed, we need to average the normals along the seam.
		// because the corresponding vertices are identical (but still have different UVs).

		if( phiLength === Math.PI * 2 ) {

			var normals = this.attributes.normal.array;
			var n1 = new Vector3();
			var n2 = new Vector3();
			var n = new Vector3();

			// this is the buffer offset for the last line of vertices
			base = segments * points.length * 3;

			for( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

				// select the normal of the vertex in the first line
				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];

				// select the normal of the vertex in the last line
				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];

				// average normals
				n.addVectors( n1, n2 ).normalize();

				// assign the new values to both normals
				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

			} // next row

		}

	}

	LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

	/**
	 * @author astrodud / http://astrodud.isgreat.org/
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 */

	// points - to create a closed torus, one must use a set of points
	//    like so: [ a, b, c, d, a ], see first is the same as last.
	// segments - the number of circumference segments to create
	// phiStart - the starting radian
	// phiLength - the radian (0 to 2PI) range of the lathed section
	//    2PI is a closed lathe, less than 2PI is a portion.

	function LatheGeometry( points, segments, phiStart, phiLength ) {

		Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
		this.mergeVertices();

	}

	LatheGeometry.prototype = Object.create( Geometry.prototype );
	LatheGeometry.prototype.constructor = LatheGeometry;

	/**
	 * @author jonobr1 / http://jonobr1.com
	 *
	 * Creates a one-sided polygonal geometry from a path shape. Similar to
	 * ExtrudeGeometry.
	 *
	 * parameters = {
	 *
	 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
	 *
	 *	material: <int> // material index for front and back faces
	 *	uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	function ShapeGeometry( shapes, options ) {

		Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

	}

	ShapeGeometry.prototype = Object.create( Geometry.prototype );
	ShapeGeometry.prototype.constructor = ShapeGeometry;

	/**
	 * Add an array of shapes to THREE.ShapeGeometry.
	 */
	ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			this.addShape( shapes[ i ], options );

		}

		return this;

	};

	/**
	 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
	 */
	ShapeGeometry.prototype.addShape = function ( shape, options ) {

		if ( options === undefined ) options = {};
		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var material = options.material;
		var uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

		//

		var i, l, hole;

		var shapesOffset = this.vertices.length;
		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe...

			for ( i = 0, l = holes.length; i < l; i ++ ) {

				hole = holes[ i ];

				if ( ShapeUtils.isClockWise( hole ) ) {

					holes[ i ] = hole.reverse();

				}

			}

			reverse = false;

		}

		var faces = ShapeUtils.triangulateShape( vertices, holes );

		// Vertices

		for ( i = 0, l = holes.length; i < l; i ++ ) {

			hole = holes[ i ];
			vertices = vertices.concat( hole );

		}

		//

		var vert, vlen = vertices.length;
		var face, flen = faces.length;

		for ( i = 0; i < vlen; i ++ ) {

			vert = vertices[ i ];

			this.vertices.push( new Vector3( vert.x, vert.y, 0 ) );

		}

		for ( i = 0; i < flen; i ++ ) {

			face = faces[ i ];

			var a = face[ 0 ] + shapesOffset;
			var b = face[ 1 ] + shapesOffset;
			var c = face[ 2 ] + shapesOffset;

			this.faces.push( new Face3( a, b, c, null, null, material ) );
			this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );

		}

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function EdgesGeometry( geometry, thresholdAngle ) {

		BufferGeometry.call( this );

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		var geometry2;

		if ( (geometry && geometry.isBufferGeometry) ) {

			geometry2 = new Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var vertices = geometry2.vertices;
		var faces = geometry2.faces;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge[ 0 ] = face[ keys[ j ] ];
				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
				edge.sort( sortFunction );

				var key = edge.toString();

				if ( hash[ key ] === undefined ) {

					hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					hash[ key ].face2 = i;

				}

			}

		}

		var coords = [];

		for ( var key in hash ) {

			var h = hash[ key ];

			if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {

				var vertex = vertices[ h.vert1 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

				vertex = vertices[ h.vert2 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

			}

		}

		this.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );

	}

	EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
	EdgesGeometry.prototype.constructor = EdgesGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CylinderBufferGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		var scope = this;

		radiusTop = radiusTop !== undefined ? radiusTop : 20;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
		height = height !== undefined ? height : 100;

		radialSegments = Math.floor( radialSegments ) || 8;
		heightSegments = Math.floor( heightSegments ) || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
		thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

		// used to calculate buffer length

		var nbCap = 0;

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) nbCap ++;
			if ( radiusBottom > 0 ) nbCap ++;

		}

		var vertexCount = calculateVertexCount();
		var indexCount = calculateIndexCount();

		// buffers

		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables

		var index = 0,
		    indexOffset = 0,
		    indexArray = [],
		    halfHeight = height / 2;

		// group variables
		var groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) generateCap( true );
			if ( radiusBottom > 0 ) generateCap( false );

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		// helper functions

		function calculateVertexCount() {

			var count = ( radialSegments + 1 ) * ( heightSegments + 1 );

			if ( openEnded === false ) {

				count += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );

			}

			return count;

		}

		function calculateIndexCount() {

			var count = radialSegments * heightSegments * 2 * 3;

			if ( openEnded === false ) {

				count += radialSegments * nbCap * 3;

			}

			return count;

		}

		function generateTorso() {

			var x, y;
			var normal = new Vector3();
			var vertex = new Vector3();

			var groupCount = 0;

			// this will be used to calculate the normal
			var slope = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( y = 0; y <= heightSegments; y ++ ) {

				var indexRow = [];

				var v = y / heightSegments;

				// calculate the radius of the current row
				var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;

					var theta = u * thetaLength + thetaStart;

					var sinTheta = Math.sin( theta );
					var cosTheta = Math.cos( theta );

					// vertex
					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

					// normal
					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.setXYZ( index, normal.x, normal.y, normal.z );

					// uv
					uvs.setXY( index, u, 1 - v );

					// save index of vertex in respective row
					indexRow.push( index );

					// increase index
					index ++;

				}

				// now save vertices of the row in our index array
				indexArray.push( indexRow );

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				for ( y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices
					var i1 = indexArray[ y ][ x ];
					var i2 = indexArray[ y + 1 ][ x ];
					var i3 = indexArray[ y + 1 ][ x + 1 ];
					var i4 = indexArray[ y ][ x + 1 ];

					// face one
					indices.setX( indexOffset, i1 ); indexOffset ++;
					indices.setX( indexOffset, i2 ); indexOffset ++;
					indices.setX( indexOffset, i4 ); indexOffset ++;

					// face two
					indices.setX( indexOffset, i2 ); indexOffset ++;
					indices.setX( indexOffset, i3 ); indexOffset ++;
					indices.setX( indexOffset, i4 ); indexOffset ++;

					// update counters
					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups
			groupStart += groupCount;

		}

		function generateCap( top ) {

			var x, centerIndexStart, centerIndexEnd;

			var uv = new Vector2();
			var vertex = new Vector3();

			var groupCount = 0;

			var radius = ( top === true ) ? radiusTop : radiusBottom;
			var sign = ( top === true ) ? 1 : - 1;

			// save the index of the first center vertex
			centerIndexStart = index;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( x = 1; x <= radialSegments; x ++ ) {

				// vertex
				vertices.setXYZ( index, 0, halfHeight * sign, 0 );

				// normal
				normals.setXYZ( index, 0, sign, 0 );

				// uv
				uv.x = 0.5;
				uv.y = 0.5;

				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

			// save the index of the last center vertex
			centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;
				var theta = u * thetaLength + thetaStart;

				var cosTheta = Math.cos( theta );
				var sinTheta = Math.sin( theta );

				// vertex
				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal
				normals.setXYZ( index, 0, sign, 0 );

				// uv
				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				var c = centerIndexStart + x;
				var i = centerIndexEnd + x;

				if ( top === true ) {

					// face top
					indices.setX( indexOffset, i ); indexOffset ++;
					indices.setX( indexOffset, i + 1 ); indexOffset ++;
					indices.setX( indexOffset, c ); indexOffset ++;

				} else {

					// face bottom
					indices.setX( indexOffset, i + 1 ); indexOffset ++;
					indices.setX( indexOffset, i ); indexOffset ++;
					indices.setX( indexOffset, c ); indexOffset ++;

				}

				// update counters
				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups
			groupStart += groupCount;

		}

	}

	CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CylinderGeometry.prototype = Object.create( Geometry.prototype );
	CylinderGeometry.prototype.constructor = CylinderGeometry;

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
	ConeGeometry.prototype.constructor = ConeGeometry;

	/**
	 * @author: abelnation / http://github.com/abelnation
	 */

	function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeBufferGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
	ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		var vertices = segments + 2;

		var positions = new Float32Array( vertices * 3 );
		var normals = new Float32Array( vertices * 3 );
		var uvs = new Float32Array( vertices * 2 );

		// center data is already zero, but need to set a few extras
		normals[ 2 ] = 1.0;
		uvs[ 0 ] = 0.5;
		uvs[ 1 ] = 0.5;

		for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {

			var segment = thetaStart + s / segments * thetaLength;

			positions[ i ] = radius * Math.cos( segment );
			positions[ i + 1 ] = radius * Math.sin( segment );

			normals[ i + 2 ] = 1; // normal z

			uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
			uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;

		}

		var indices = [];

		for ( var i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		this.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );
		this.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

		this.boundingSphere = new Sphere( new Vector3(), radius );

	}

	CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;

	/**
	 * @author hughes
	 */

	function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );

	}

	CircleGeometry.prototype = Object.create( Geometry.prototype );
	CircleGeometry.prototype.constructor = CircleGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
	 */

	function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		Geometry.call( this );

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
		this.mergeVertices();

	}

	BoxGeometry.prototype = Object.create( Geometry.prototype );
	BoxGeometry.prototype.constructor = BoxGeometry;



	var Geometries = Object.freeze({
		WireframeGeometry: WireframeGeometry,
		ParametricGeometry: ParametricGeometry,
		ParametricBufferGeometry: ParametricBufferGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronBufferGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronBufferGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronBufferGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronBufferGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronBufferGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeBufferGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotBufferGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusBufferGeometry,
		TextGeometry: TextGeometry,
		SphereBufferGeometry: SphereBufferGeometry,
		SphereGeometry: SphereGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingBufferGeometry,
		PlaneBufferGeometry: PlaneBufferGeometry,
		PlaneGeometry: PlaneGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheBufferGeometry,
		ShapeGeometry: ShapeGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		EdgesGeometry: EdgesGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeBufferGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderBufferGeometry,
		CircleBufferGeometry: CircleBufferGeometry,
		CircleGeometry: CircleGeometry,
		BoxBufferGeometry: BoxBufferGeometry,
		BoxGeometry: BoxGeometry
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ShadowMaterial() {

		ShaderMaterial.call( this, {
			uniforms: UniformsUtils.merge( [
				UniformsLib[ "lights" ],
				{
					opacity: { value: 1.0 }
				}
			] ),
			vertexShader: ShaderChunk[ 'shadow_vert' ],
			fragmentShader: ShaderChunk[ 'shadow_frag' ]
		} );

		this.lights = true;
		this.transparent = true;

		Object.defineProperties( this, {
			opacity: {
				enumerable: true,
				get: function () {
					return this.uniforms.opacity.value;
				},
				set: function ( value ) {
					this.uniforms.opacity.value = value;
				}
			}
		} );

	}

	ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );
	ShadowMaterial.prototype.constructor = ShadowMaterial;

	ShadowMaterial.prototype.isShadowMaterial = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function RawShaderMaterial( parameters ) {

		ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	}

	RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
	RawShaderMaterial.prototype.constructor = RawShaderMaterial;

	RawShaderMaterial.prototype.isRawShaderMaterial = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MultiMaterial( materials ) {

		this.uuid = _Math.generateUUID();

		this.type = 'MultiMaterial';

		this.materials = materials instanceof Array ? materials : [];

		this.visible = true;

	}

	MultiMaterial.prototype = {

		constructor: MultiMaterial,

		isMultiMaterial: true,

		toJSON: function ( meta ) {

			var output = {
				metadata: {
					version: 4.2,
					type: 'material',
					generator: 'MaterialExporter'
				},
				uuid: this.uuid,
				type: this.type,
				materials: []
			};

			var materials = this.materials;

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				var material = materials[ i ].toJSON( meta );
				delete material.metadata;

				output.materials.push( material );

			}

			output.visible = this.visible;

			return output;

		},

		clone: function () {

			var material = new this.constructor();

			for ( var i = 0; i < this.materials.length; i ++ ) {

				material.materials.push( this.materials[ i ].clone() );

			}

			material.visible = this.visible;

			return material;

		}

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshStandardMaterial( parameters ) {

		Material.call( this );

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshStandardMaterial.prototype = Object.create( Material.prototype );
	MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	MeshStandardMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.defines = { 'STANDARD': '' };

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 * }
	 */

	function MeshPhysicalMaterial( parameters ) {

		MeshStandardMaterial.call( this );

		this.defines = { 'PHYSICAL': '' };

		this.type = 'MeshPhysicalMaterial';

		this.reflectivity = 0.5; // maps to F0 = 0.04

		this.clearCoat = 0.0;
		this.clearCoatRoughness = 0.0;

		this.setValues( parameters );

	}

	MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
	MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	MeshPhysicalMaterial.prototype.copy = function ( source ) {

		MeshStandardMaterial.prototype.copy.call( this, source );

		this.defines = { 'PHYSICAL': '' };

		this.reflectivity = source.reflectivity;

		this.clearCoat = source.clearCoat;
		this.clearCoatRoughness = source.clearCoatRoughness;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshPhongMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.specular = new Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshPhongMaterial.prototype = Object.create( Material.prototype );
	MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	MeshPhongMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshNormalMaterial( parameters ) {

		Material.call( this, parameters );

		this.type = 'MeshNormalMaterial';

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;
		this.morphTargets = false;

		this.setValues( parameters );

	}

	MeshNormalMaterial.prototype = Object.create( Material.prototype );
	MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	MeshNormalMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshLambertMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshLambertMaterial.prototype = Object.create( Material.prototype );
	MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	MeshLambertMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */

	function LineDashedMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineDashedMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.lights = false;

		this.setValues( parameters );

	}

	LineDashedMaterial.prototype = Object.create( Material.prototype );
	LineDashedMaterial.prototype.constructor = LineDashedMaterial;

	LineDashedMaterial.prototype.isLineDashedMaterial = true;

	LineDashedMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	};



	var Materials = Object.freeze({
		ShadowMaterial: ShadowMaterial,
		SpriteMaterial: SpriteMaterial,
		RawShaderMaterial: RawShaderMaterial,
		ShaderMaterial: ShaderMaterial,
		PointsMaterial: PointsMaterial,
		MultiMaterial: MultiMaterial,
		MeshPhysicalMaterial: MeshPhysicalMaterial,
		MeshStandardMaterial: MeshStandardMaterial,
		MeshPhongMaterial: MeshPhongMaterial,
		MeshNormalMaterial: MeshNormalMaterial,
		MeshLambertMaterial: MeshLambertMaterial,
		MeshDepthMaterial: MeshDepthMaterial,
		MeshBasicMaterial: MeshBasicMaterial,
		LineDashedMaterial: LineDashedMaterial,
		LineBasicMaterial: LineBasicMaterial,
		Material: Material
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LoadingManager( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

	}

	var DefaultLoadingManager = new LoadingManager();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function XHRLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( XHRLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) url = '';

			if ( this.path !== undefined ) url = this.path + url;

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) onLoad( cached );

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			// Check for data: URI
			var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
			var dataUriRegexResult = url.match( dataUriRegex );

			// Safari can not handle Data URIs through XMLHttpRequest so process manually
			if ( dataUriRegexResult ) {

				var mimeType = dataUriRegexResult[1];
				var isBase64 = !!dataUriRegexResult[2];
				var data = dataUriRegexResult[3];

				data = window.decodeURIComponent(data);

				if( isBase64 ) {
					data = window.atob(data);
				}

				try {

					var response;
					var responseType = ( this.responseType || '' ).toLowerCase();

					switch ( responseType ) {

						case 'arraybuffer':
						case 'blob':

						 	response = new ArrayBuffer( data.length );
							var view = new Uint8Array( response );
							for ( var i = 0; i < data.length; i ++ ) {

									view[ i ] = data.charCodeAt( i );

							}

							if ( responseType === 'blob' ) {

								response = new Blob( [ response ], { "type" : mimeType } );

							}

							break;

						case 'document':

							var parser = new DOMParser();
							response = parser.parseFromString( data, mimeType );

							break;

						case 'json':

							response = JSON.parse( data );

							break;

						default: // 'text' or other

							response = data;

							break;

					}

					// Wait for next browser tick
					window.setTimeout( function() {

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					}, 0);

				} catch ( error ) {

					// Wait for next browser tick
					window.setTimeout( function() {

						if ( onError ) onError( error );

						scope.manager.itemError( url );

					}, 0);

				}

			} else {

				var request = new XMLHttpRequest();
				request.open( 'GET', url, true );

				request.addEventListener( 'load', function ( event ) {

					var response = event.target.response;

					Cache.add( url, response );

					if ( this.status === 200 ) {

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					} else if ( this.status === 0 ) {

						// Some browsers return HTTP Status 0 when using non-http protocol
						// e.g. 'file://' or 'data://'. Handle as success.

						console.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					} else {

						if ( onError ) onError( event );

						scope.manager.itemError( url );

					}

				}, false );

				if ( onProgress !== undefined ) {

					request.addEventListener( 'progress', function ( event ) {

						onProgress( event );

					}, false );

				}

				request.addEventListener( 'error', function ( event ) {

					if ( onError ) onError( event );

					scope.manager.itemError( url );

				}, false );

				if ( this.responseType !== undefined ) request.responseType = this.responseType;
				if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

				if ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );

				request.send( null );

			}

			scope.manager.itemStart( url );

			return request;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		setResponseType: function ( value ) {

			this.responseType = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */

	function CompressedTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( CompressedTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new CompressedTexture();
			texture.image = images;

			var loader = new XHRLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							texture.minFilter = LinearFilter;

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps : [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}, onProgress, onError );

			}

			return texture;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */

	var DataTextureLoader = BinaryTextureLoader;
	function BinaryTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( BinaryTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new DataTexture();

			var loader = new XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );

			loader.load( url, function ( buffer ) {

				var texData = scope._parser( buffer );

				if ( ! texData ) return;

				if ( undefined !== texData.image ) {

					texture.image = texData.image;

				} else if ( undefined !== texData.data ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

				texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
				texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

				texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

				if ( undefined !== texData.format ) {

					texture.format = texData.format;

				}
				if ( undefined !== texData.type ) {

					texture.type = texData.type;

				}

				if ( undefined !== texData.mipmaps ) {

					texture.mipmaps = texData.mipmaps;

				}

				if ( 1 === texData.mipmapCount ) {

					texture.minFilter = LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture, texData );

			}, onProgress, onError );


			return texture;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ImageLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( ImageLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
			image.onload = function () {

				image.onload = null;

				URL.revokeObjectURL( image.src );

				if ( onLoad ) onLoad( image );

				scope.manager.itemEnd( url );

			};
			image.onerror = onError;

			if ( url.indexOf( 'data:' ) === 0 ) {

				image.src = url;

			} else {

				var loader = new XHRLoader();
				loader.setPath( this.path );
				loader.setResponseType( 'blob' );
				loader.setWithCredentials( this.withCredentials );
				loader.load( url, function ( blob ) {

					image.src = URL.createObjectURL( blob );

				}, onProgress, onError );

			}

			scope.manager.itemStart( url );

			return image;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( CubeTextureLoader.prototype, {

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new CubeTexture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function TextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( TextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new Texture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setWithCredentials( this.withCredentials );
			loader.setPath( this.path );
			loader.load( url, function ( image ) {

				// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
				var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

				texture.format = isJPEG ? RGBFormat : RGBAFormat;
				texture.image = image;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}



	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Light( color, intensity ) {

		Object3D.call( this );

		this.type = 'Light';

		this.color = new Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	}

	Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Light,

		isLight: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;

			if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

			if ( this.distance !== undefined ) data.object.distance = this.distance;
			if ( this.angle !== undefined ) data.object.angle = this.angle;
			if ( this.decay !== undefined ) data.object.decay = this.decay;
			if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

			if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function HemisphereLight( skyColor, groundColor, intensity ) {

		Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.groundColor = new Color( groundColor );

	}

	HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: HemisphereLight,

		isHemisphereLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.groundColor.copy( source.groundColor );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LightShadow( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.radius = 1;

		this.mapSize = new Vector2( 512, 512 );

		this.map = null;
		this.matrix = new Matrix4();

	}

	Object.assign( LightShadow.prototype, {

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.radius = source.radius;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		toJSON: function () {

			var object = {};

			if ( this.bias !== 0 ) object.bias = this.bias;
			if ( this.radius !== 1 ) object.radius = this.radius;
			if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

			object.camera = this.camera.toJSON( false ).object;
			delete object.camera.matrix;

			return object;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SpotLightShadow() {

		LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

	}

	SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: SpotLightShadow,

		isSpotLightShadow: true,

		update: function ( light ) {

			var fov = _Math.RAD2DEG * 2 * light.angle;
			var aspect = this.mapSize.width / this.mapSize.height;
			var far = light.distance || 500;

			var camera = this.camera;

			if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

		Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		Object.defineProperty( this, 'power', {
			get: function () {
				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * Math.PI;
			},
			set: function ( power ) {
				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / Math.PI;
			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new SpotLightShadow();

	}

	SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: SpotLight,

		isSpotLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function PointLight( color, intensity, distance, decay ) {

		Light.call( this, color, intensity );

		this.type = 'PointLight';

		Object.defineProperty( this, 'power', {
			get: function () {
				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * 4 * Math.PI;

			},
			set: function ( power ) {
				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / ( 4 * Math.PI );
			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

	}

	PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: PointLight,

		isPointLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.decay = source.decay;

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectionalLightShadow( light ) {

		LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	}

	DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: DirectionalLightShadow

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DirectionalLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		this.shadow = new DirectionalLightShadow();

	}

	DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: DirectionalLight,

		isDirectionalLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AmbientLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	}

	AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: AmbientLight,

		isAmbientLight: true,

	} );

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	var AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function( array, from, to ) {

			if ( AnimationUtils.isTypedArray( array ) ) {

				return new array.constructor( array.subarray( from, to ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
					! forceClone && array.constructor === type ) return array;

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function( object ) {

			return ArrayBuffer.isView( object ) &&
					! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) return; // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) return; // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {
				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {
				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		}

	};

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	function Interpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
				resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	}

	Interpolant.prototype = {

		constructor: Interpolant,

		evaluate: function( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[   i1   ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {
	//- See http://jsperf.com/comparison-to-undefined/3
	//- slower code:
	//-
	//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ;) {

								if ( t1 === undefined ) {

									if ( t < t0 ) break forward_scan;

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

	//- slower code:
	//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ;) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[   i1   ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function() {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function( i1, t0, t, t1 ) {

			throw new Error( "call to abstract method" );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function( i1, t0, t1 ) {

			// empty

		}

	};

	Object.assign( Interpolant.prototype, {

		beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
			Interpolant.prototype.copySampleValue_,

		afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
			Interpolant.prototype.copySampleValue_

	} );

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	function CubicInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = -0;
		this._offsetPrev = -0;
		this._weightNext = -0;
		this._offsetNext = -0;

	}

	CubicInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: CubicInterpolant,

		DefaultSettings_: {

			endingStart: 	ZeroCurvatureEnding,
			endingEnd:		ZeroCurvatureEnding

		},

		intervalChanged_: function( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
			var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
			var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
			var sN =       wN   * ppp   -           wN      * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	/**
	 * @author tschw
	 */

	function LinearInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	LinearInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: LinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	function DiscreteInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	DiscreteInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: DiscreteInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	var KeyframeTrackPrototype;

	KeyframeTrackPrototype = {

		TimeBufferType: Float32Array,
		ValueBufferType: Float32Array,

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function( result ) {

			return new DiscreteInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function( result ) {

			return new LinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function( result ) {

			return new CubicInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function( interpolation ) {

			var factoryMethod;

			switch ( interpolation ) {

				case InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
						this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( message );
				return;

			}

			this.createInterpolant = factoryMethod;

		},

		getInterpolation: function() {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return InterpolateSmooth;

			}

		},

		getValueSize: function() {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function( timeOffset ) {

			if( timeOffset !== 0.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function( timeScale ) {

			if( timeScale !== 1.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function( startTime, endTime ) {

			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;

			while ( from !== nKeys && times[ from ] < startTime ) ++ from;
			while ( to !== -1 && times[ to ] > endTime ) -- to;

			++ to; // inclusive -> exclusive bound

			if( from !== 0 || to !== nKeys ) {

				// empty tracks are forbidden, so keep at least one keyframe
				if ( from >= to ) to = Math.max( to , 1 ), from = to - 1;

				var stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice( times, from, to );
				this.values = AnimationUtils.
						arraySlice( this.values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function() {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( "invalid value size in track", this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if( nKeys === 0 ) {

				console.error( "track is empty", this );
				valid = false;

			}

			var prevTime = null;

			for( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( "time is not a valid number", this, i, currTime );
					valid = false;
					break;

				}

				if( prevTime !== null && prevTime > currTime ) {

					console.error( "out of order keys", this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( "value is not a valid number", this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function() {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

				writeIndex = 1,
				lastIndex = times.length - 1;

			for( var i = 1; i < lastIndex; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					if ( ! smoothInterpolation ) {

						// remove unnecessary keyframes same as their neighbors

						var offset = i * stride,
							offsetP = offset - stride,
							offsetN = offset + stride;

						for ( var j = 0; j !== stride; ++ j ) {

							var value = values[ offset + j ];

							if ( value !== values[ offsetP + j ] ||
									value !== values[ offsetN + j ] ) {

								keep = true;
								break;

							}

						}

					} else keep = true;

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j )

							values[ writeOffset + j ] = values[ readOffset + j ];

					}

					++ writeIndex;

				}

			}

			// flush last keyframe (compaction looks ahead)

			if ( lastIndex > 0 ) {

				times[ writeIndex ] = times[ lastIndex ];

				for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )

					values[ writeOffset + j ] = values[ readOffset + j ];

				++ writeIndex;

			}

			if ( writeIndex !== times.length ) {

				this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		}

	};

	function KeyframeTrackConstructor( name, times, values, interpolation ) {

		if( name === undefined ) throw new Error( "track name is undefined" );

		if( times === undefined || times.length === 0 ) {

			throw new Error( "no keyframes in track named " + name );

		}

		this.name = name;

		this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

		this.validate();
		this.optimize();

	}

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function VectorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	VectorKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	function QuaternionLinearInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	QuaternionLinearInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: QuaternionLinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				Quaternion.slerpFlat( result, 0,
						values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function QuaternionKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	QuaternionKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodLinear: function( result ) {

			return new QuaternionLinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function NumberKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	NumberKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: NumberKeyframeTrack,

		ValueTypeName: 'number',

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function StringKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	StringKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function BooleanKeyframeTrack( name, times, values ) {

		KeyframeTrackConstructor.call( this, name, times, values );

	}

	BooleanKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function ColorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	ColorKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: ColorKeyframeTrack,

		ValueTypeName: 'color'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited


		// Note: Very basic implementation and nothing special yet.
		// However, this is the place for color space parameterization.

	} );

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function KeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.apply( this, arguments );

	}

	KeyframeTrack.prototype = KeyframeTrackPrototype;
	KeyframeTrackPrototype.constructor = KeyframeTrack;

	// Static methods:

	Object.assign( KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		parse: function( json ) {

			if( json.type === undefined ) {

				throw new Error( "track type undefined, can not parse" );

			}

			var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

			if ( json.times === undefined ) {

				var times = [], values = [];

				AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

				json.times = times;
				json.values = values;

			}

			// derived classes can define a static parse method
			if ( trackType.parse !== undefined ) {

				return trackType.parse( json );

			} else {

				// by default, we asssume a constructor compatible with the base
				return new trackType(
						json.name, json.times, json.values, json.interpolation );

			}

		},

		toJSON: function( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': AnimationUtils.convertArray( track.times, Array ),
					'values': AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		},

		_getTrackTypeForValueTypeName: function( typeName ) {

			switch( typeName.toLowerCase() ) {

				case "scalar":
				case "double":
				case "float":
				case "number":
				case "integer":

					return NumberKeyframeTrack;

				case "vector":
				case "vector2":
				case "vector3":
				case "vector4":

					return VectorKeyframeTrack;

				case "color":

					return ColorKeyframeTrack;

				case "quaternion":

					return QuaternionKeyframeTrack;

				case "bool":
				case "boolean":

					return BooleanKeyframeTrack;

				case "string":

					return StringKeyframeTrack;

			}

			throw new Error( "Unsupported typeName: " + typeName );

		}

	} );

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	function AnimationClip( name, duration, tracks ) {

		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : -1;

		this.uuid = _Math.generateUUID();

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

		this.optimize();

	}

	AnimationClip.prototype = {

		constructor: AnimationClip,

		resetDuration: function() {

			var tracks = this.tracks,
				duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max(
						duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

		},

		trim: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		optimize: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		}

	};

	// Static methods:

	Object.assign( AnimationClip, {

		parse: function( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new AnimationClip( json.name, json.duration, tracks );

		},


		toJSON: function( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},


		CreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
						( i + numMorphTargets - 1 ) % numMorphTargets,
						i,
						( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = AnimationUtils.getKeyframeOrder( times );
				times = AnimationUtils.sortedArray( times, 1, order );
				values = AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( ! noLoop && times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
						new NumberKeyframeTrack(
							'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
							times, values
						).scale( 1.0 / fps ) );
			}

			return new AnimationClip( name, -1, tracks );

		},

		findByName: function( objectOrClipArray, name ) {

			var clipArray = objectOrClipArray;

			if ( ! Array.isArray( objectOrClipArray ) ) {

				var o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;

			}

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}
			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function( animation, bones ) {

			if ( ! animation ) {

				console.error( "  no animation in JSONLoader data" );
				return null;

			}

			var addNonemptyTrack = function(
					trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					AnimationUtils.flattenJSON(
							animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || -1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length === 0 ) continue;

				// process morph targets in a way exactly compatible
				// with AnimationHandler.init( animation )
				if ( animationKeys[0].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};
					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[k].morphTargets ) {

							for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0;
								m !== animationKeys[k].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[k];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

						}

						tracks.push( new NumberKeyframeTrack(
								'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {
					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.position',
							animationKeys, 'pos', tracks );

					addNonemptyTrack(
							QuaternionKeyframeTrack, boneName + '.quaternion',
							animationKeys, 'rot', tracks );

					addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.scale',
							animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MaterialLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.textures = {};

	}

	Object.assign( MaterialLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setTextures: function ( value ) {

			this.textures = value;

		},

		parse: function ( json ) {

			var textures = this.textures;

			function getTexture( name ) {

				if ( textures[ name ] === undefined ) {

					console.warn( 'THREE.MaterialLoader: Undefined texture', name );

				}

				return textures[ name ];

			}

			var material = new Materials[ json.type ]();

			if ( json.uuid !== undefined ) material.uuid = json.uuid;
			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.roughness !== undefined ) material.roughness = json.roughness;
			if ( json.metalness !== undefined ) material.metalness = json.metalness;
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.fog !== undefined ) material.fog = json.fog;
			if ( json.shading !== undefined ) material.shading = json.shading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
			if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
			if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
			if ( json.skinning !== undefined ) material.skinning = json.skinning;
			if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;

			// for PointsMaterial

			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

			// maps

			if ( json.map !== undefined ) material.map = getTexture( json.map );

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

			if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

			if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
			if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

			if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
			if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

			if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

			if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

			if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

			if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

			if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

			// MultiMaterial

			if ( json.materials !== undefined ) {

				for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

					material.materials.push( this.parse( json.materials[ i ] ) );

				}

			}

			return material;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometryLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( BufferGeometryLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = new BufferGeometry();

			var index = json.data.index;

			var TYPED_ARRAYS = {
				'Int8Array': Int8Array,
				'Uint8Array': Uint8Array,
				'Uint8ClampedArray': Uint8ClampedArray,
				'Int16Array': Int16Array,
				'Uint16Array': Uint16Array,
				'Int32Array': Int32Array,
				'Uint32Array': Uint32Array,
				'Float32Array': Float32Array,
				'Float64Array': Float64Array
			};

			if ( index !== undefined ) {

				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

				geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

			}

			return geometry;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Loader() {

		this.onLoadStart = function () {};
		this.onLoadProgress = function () {};
		this.onLoadComplete = function () {};

	}

	Loader.prototype = {

		constructor: Loader,

		crossOrigin: undefined,

		extractUrlBase: function ( url ) {

			var parts = url.split( '/' );

			if ( parts.length === 1 ) return './';

			parts.pop();

			return parts.join( '/' ) + '/';

		},

		initMaterials: function ( materials, texturePath, crossOrigin ) {

			var array = [];

			for ( var i = 0; i < materials.length; ++ i ) {

				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

			}

			return array;

		},

		createMaterial: ( function () {

			var color, textureLoader, materialLoader;

			return function createMaterial( m, texturePath, crossOrigin ) {

				if ( color === undefined ) color = new Color();
				if ( textureLoader === undefined ) textureLoader = new TextureLoader();
				if ( materialLoader === undefined ) materialLoader = new MaterialLoader();

				// convert from old material format

				var textures = {};

				function loadTexture( path, repeat, offset, wrap, anisotropy ) {

					var fullPath = texturePath + path;
					var loader = Loader.Handlers.get( fullPath );

					var texture;

					if ( loader !== null ) {

						texture = loader.load( fullPath );

					} else {

						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );

					}

					if ( repeat !== undefined ) {

						texture.repeat.fromArray( repeat );

						if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

					}

					if ( offset !== undefined ) {

						texture.offset.fromArray( offset );

					}

					if ( wrap !== undefined ) {

						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

					}

					if ( anisotropy !== undefined ) {

						texture.anisotropy = anisotropy;

					}

					var uuid = _Math.generateUUID();

					textures[ uuid ] = texture;

					return uuid;

				}

				//

				var json = {
					uuid: _Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};

				for ( var name in m ) {

					var value = m[ name ];

					switch ( name ) {
						case 'DbgColor':
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = BlendingMode[ value ];
							break;
						case 'colorAmbient':
						case 'mapAmbient':
							console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapEmissive':
							json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
							break;
						case 'mapEmissiveRepeat':
						case 'mapEmissiveOffset':
						case 'mapEmissiveWrap':
						case 'mapEmissiveAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = [ value, value ];
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapMetalness':
							json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
							break;
						case 'mapMetalnessRepeat':
						case 'mapMetalnessOffset':
						case 'mapMetalnessWrap':
						case 'mapMetalnessAnisotropy':
							break;
						case 'mapRoughness':
							json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
							break;
						case 'mapRoughnessRepeat':
						case 'mapRoughnessOffset':
						case 'mapRoughnessWrap':
						case 'mapRoughnessAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = BackSide;
							break;
						case 'doubleSided':
							json.side = DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'depthTest':
						case 'depthWrite':
						case 'colorWrite':
						case 'opacity':
						case 'reflectivity':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = VertexColors;
							if ( value === 'face' ) json.vertexColors = FaceColors;
							break;
						default:
							console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
							break;
					}

				}

				if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

				if ( json.opacity < 1 ) json.transparent = true;

				materialLoader.setTextures( textures );

				return materialLoader.parse( json );

			};

		} )()

	};

	Loader.Handlers = {

		handlers: [],

		add: function ( regex, loader ) {

			this.handlers.push( regex, loader );

		},

		get: function ( file ) {

			var handlers = this.handlers;

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader  = handlers[ i + 1 ];

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function JSONLoader( manager ) {

		if ( typeof manager === 'boolean' ) {

			console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
			manager = undefined;

		}

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		this.withCredentials = false;

	}

	Object.assign( JSONLoader.prototype, {

		load: function( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );

			var loader = new XHRLoader( this.manager );
			loader.setWithCredentials( this.withCredentials );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.metadata;

				if ( metadata !== undefined ) {

					var type = metadata.type;

					if ( type !== undefined ) {

						if ( type.toLowerCase() === 'object' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
							return;

						}

						if ( type.toLowerCase() === 'scene' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
							return;

						}

					}

				}

				var object = scope.parse( json, texturePath );
				onLoad( object.geometry, object.materials );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		parse: function ( json, texturePath ) {

			var geometry = new Geometry(),
			scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

			parseModel( scale );

			parseSkin();
			parseMorphing( scale );
			parseAnimations();

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			function parseModel( scale ) {

				function isBitSet( value, position ) {

					return value & ( 1 << position );

				}

				var i, j, fi,

				offset, zLength,

			colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

			vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				nUvLayers = 0;

				if ( json.uvs !== undefined ) {

					// disregard empty arrays

					for ( i = 0; i < json.uvs.length; i ++ ) {

						if ( json.uvs[ i ].length ) nUvLayers ++;

					}

					for ( i = 0; i < nUvLayers; i ++ ) {

						geometry.faceVertexUvs[ i ] = [];

					}

				}

				offset = 0;
				zLength = vertices.length;

				while ( offset < zLength ) {

					vertex = new Vector3();

					vertex.x = vertices[ offset ++ ] * scale;
					vertex.y = vertices[ offset ++ ] * scale;
					vertex.z = vertices[ offset ++ ] * scale;

					geometry.vertices.push( vertex );

				}

				offset = 0;
				zLength = faces.length;

				while ( offset < zLength ) {

					type = faces[ offset ++ ];


					isQuad              = isBitSet( type, 0 );
					hasMaterial         = isBitSet( type, 1 );
					hasFaceVertexUv     = isBitSet( type, 3 );
					hasFaceNormal       = isBitSet( type, 4 );
					hasFaceVertexNormal = isBitSet( type, 5 );
					hasFaceColor	     = isBitSet( type, 6 );
					hasFaceVertexColor  = isBitSet( type, 7 );

					// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

					if ( isQuad ) {

						faceA = new Face3();
						faceA.a = faces[ offset ];
						faceA.b = faces[ offset + 1 ];
						faceA.c = faces[ offset + 3 ];

						faceB = new Face3();
						faceB.a = faces[ offset + 1 ];
						faceB.b = faces[ offset + 2 ];
						faceB.c = faces[ offset + 3 ];

						offset += 4;

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							faceA.materialIndex = materialIndex;
							faceB.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];
								geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

								for ( j = 0; j < 4; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
									if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							faceA.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							faceB.normal.copy( faceA.normal );

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 4; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);


								if ( i !== 2 ) faceA.vertexNormals.push( normal );
								if ( i !== 0 ) faceB.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							faceA.color.setHex( hex );
							faceB.color.setHex( hex );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 4; i ++ ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
								if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

							}

						}

						geometry.faces.push( faceA );
						geometry.faces.push( faceB );

					} else {

						face = new Face3();
						face.a = faces[ offset ++ ];
						face.b = faces[ offset ++ ];
						face.c = faces[ offset ++ ];

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							face.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];

								for ( j = 0; j < 3; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									geometry.faceVertexUvs[ i ][ fi ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							face.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 3; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								face.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							face.color.setHex( colors[ colorIndex ] );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 3; i ++ ) {

								colorIndex = faces[ offset ++ ];
								face.vertexColors.push( new Color( colors[ colorIndex ] ) );

							}

						}

						geometry.faces.push( face );

					}

				}

			}

			function parseSkin() {

				var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

				if ( json.skinWeights ) {

					for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

						var x =                               json.skinWeights[ i ];
						var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
						var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
						var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

						geometry.skinWeights.push( new Vector4( x, y, z, w ) );

					}

				}

				if ( json.skinIndices ) {

					for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

						var a =                               json.skinIndices[ i ];
						var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
						var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
						var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

						geometry.skinIndices.push( new Vector4( a, b, c, d ) );

					}

				}

				geometry.bones = json.bones;

				if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

					console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
						geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

				}

			}

			function parseMorphing( scale ) {

				if ( json.morphTargets !== undefined ) {

					for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

						geometry.morphTargets[ i ] = {};
						geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
						geometry.morphTargets[ i ].vertices = [];

						var dstVertices = geometry.morphTargets[ i ].vertices;
						var srcVertices = json.morphTargets[ i ].vertices;

						for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

							var vertex = new Vector3();
							vertex.x = srcVertices[ v ] * scale;
							vertex.y = srcVertices[ v + 1 ] * scale;
							vertex.z = srcVertices[ v + 2 ] * scale;

							dstVertices.push( vertex );

						}

					}

				}

				if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

					console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

					var faces = geometry.faces;
					var morphColors = json.morphColors[ 0 ].colors;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						faces[ i ].color.fromArray( morphColors, i * 3 );

					}

				}

			}

			function parseAnimations() {

				var outputAnimations = [];

				// parse old style Bone/Hierarchy animations
				var animations = [];

				if ( json.animation !== undefined ) {

					animations.push( json.animation );

				}

				if ( json.animations !== undefined ) {

					if ( json.animations.length ) {

						animations = animations.concat( json.animations );

					} else {

						animations.push( json.animations );

					}

				}

				for ( var i = 0; i < animations.length; i ++ ) {

					var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
					if ( clip ) outputAnimations.push( clip );

				}

				// parse implicit morph animations
				if ( geometry.morphTargets ) {

					// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
					var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
					outputAnimations = outputAnimations.concat( morphAnimationClips );

				}

				if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

			}

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ObjectLoader ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.texturePath = '';

	}

	Object.assign( ObjectLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.texturePath === '' ) {

				this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

			}

			var scope = this;

			var loader = new XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				scope.parse( JSON.parse( text ), onLoad );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		parse: function ( json, onLoad ) {

			var geometries = this.parseGeometries( json.geometries );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) onLoad( object );

			} );

			var textures  = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) onLoad( object );

			}

			return object;

		},

		parseGeometries: function ( json ) {

			var geometries = {};

			if ( json !== undefined ) {

				var geometryLoader = new JSONLoader();
				var bufferGeometryLoader = new BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'BoxBufferGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleGeometry':
						case 'CircleBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'ConeGeometry':
						case 'ConeBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':
						case 'SphereBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':
						case 'IcosahedronGeometry':
						case 'OctahedronGeometry':
						case 'TetrahedronGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':
						case 'RingBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':
						case 'TorusBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.tubularSegments,
								data.radialSegments,
								data.p,
								data.q
							);

							break;

						case 'LatheGeometry':
						case 'LatheBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);

							break;

						case 'BufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) geometry.name = data.name;

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var materials = {};

			if ( json !== undefined ) {

				var loader = new MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var material = loader.parse( json[ i ] );
					materials[ material.uuid ] = material;

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var clip = AnimationClip.parse( json[ i ] );

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				}, undefined, function () {

					scope.manager.itemError( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new LoadingManager( onLoad );

				var loader = new ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var image = json[ i ];
					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

					images[ image.uuid ] = loadImage( path );

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value, type ) {

				if ( typeof( value ) === 'number' ) return value;

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return type[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture = new Texture( images[ data.image ] );
					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) texture.name = data.name;

					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );

					if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
					if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
					if ( data.wrap !== undefined ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );
						texture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );

					}

					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

					if ( data.flipY !== undefined ) texture.flipY = data.flipY;

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function () {

			var matrix = new Matrix4();

			return function parseObject( data, geometries, materials ) {

				var object;

				function getGeometry( name ) {

					if ( geometries[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

					}

					return geometries[ name ];

				}

				function getMaterial( name ) {

					if ( name === undefined ) return undefined;

					if ( materials[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', name );

					}

					return materials[ name ];

				}

				switch ( data.type ) {

					case 'Scene':

						object = new Scene();

						if ( data.background !== undefined ) {

							if ( Number.isInteger( data.background ) ) {

								object.background = new Color( data.background );

							}

						}

						if ( data.fog !== undefined ) {

							if ( data.fog.type === 'Fog' ) {

								object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

							} else if ( data.fog.type === 'FogExp2' ) {

								object.fog = new FogExp2( data.fog.color, data.fog.density );

							}

						}

						break;

					case 'PerspectiveCamera':

						object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

						if ( data.focus !== undefined ) object.focus = data.focus;
						if ( data.zoom !== undefined ) object.zoom = data.zoom;
						if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
						if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
						if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

						break;

					case 'OrthographicCamera':

						object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

						break;

					case 'AmbientLight':

						object = new AmbientLight( data.color, data.intensity );

						break;

					case 'DirectionalLight':

						object = new DirectionalLight( data.color, data.intensity );

						break;

					case 'PointLight':

						object = new PointLight( data.color, data.intensity, data.distance, data.decay );

						break;

					case 'SpotLight':

						object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

						break;

					case 'HemisphereLight':

						object = new HemisphereLight( data.color, data.groundColor, data.intensity );

						break;

					case 'Mesh':

						var geometry = getGeometry( data.geometry );
						var material = getMaterial( data.material );

						if ( geometry.bones && geometry.bones.length > 0 ) {

							object = new SkinnedMesh( geometry, material );

						} else {

							object = new Mesh( geometry, material );

						}

						break;

					case 'LOD':

						object = new LOD();

						break;

					case 'Line':

						object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

						break;

					case 'LineSegments':

						object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'PointCloud':
					case 'Points':

						object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'Sprite':

						object = new Sprite( getMaterial( data.material ) );

						break;

					case 'Group':

						object = new Group();

						break;

					default:

						object = new Object3D();

				}

				object.uuid = data.uuid;

				if ( data.name !== undefined ) object.name = data.name;
				if ( data.matrix !== undefined ) {

					matrix.fromArray( data.matrix );
					matrix.decompose( object.position, object.quaternion, object.scale );

				} else {

					if ( data.position !== undefined ) object.position.fromArray( data.position );
					if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
					if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
					if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

				}

				if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
				if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

				if ( data.shadow ) {

					if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
					if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
					if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
					if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

				}

				if ( data.visible !== undefined ) object.visible = data.visible;
				if ( data.userData !== undefined ) object.userData = data.userData;

				if ( data.children !== undefined ) {

					for ( var child in data.children ) {

						object.add( this.parseObject( data.children[ child ], geometries, materials ) );

					}

				}

				if ( data.type === 'LOD' ) {

					var levels = data.levels;

					for ( var l = 0; l < levels.length; l ++ ) {

						var level = levels[ l ];
						var child = object.getObjectByProperty( 'uuid', level.object );

						if ( child !== undefined ) {

							object.addLevel( child, level.distance );

						}

					}

				}

				return object;

			};

		}()

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of Curve methods
	 * .getPoint(t), getTangent(t)
	 * .getPointAt(u), getTangentAt(u)
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following classes subclasses THREE.Curve:
	 *
	 * -- 2d classes --
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.CubicBezierCurve
	 * THREE.SplineCurve
	 * THREE.ArcCurve
	 * THREE.EllipseCurve
	 *
	 * -- 3d classes --
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.SplineCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	function Curve() {}

	Curve.prototype = {

		constructor: Curve,

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( t ) {

			console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPoint( d / divisions ) );

			}

			return points;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPointAt( d / divisions ) );

			}

			return points;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;

			if ( this.cacheArcLengths
				&& ( this.cacheArcLengths.length === divisions + 1 )
				&& ! this.needsUpdate ) {

				//console.log( "cached", this.cacheArcLengths );
				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint ( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum:sum }; Sum is in the last element.

		},

		updateArcLengths: function() {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			//var time = Date.now();

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			//console.log('b' , i, low, high, Date.now()- time);

			if ( arcLengths[ i ] === targetArcLength ) {

				var t = i / ( il - 1 );
				return t;

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		},

		computeFrenetFrames: function ( segments, closed ) {

			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

			var normal = new Vector3();

			var tangents = [];
			var normals = [];
			var binormals = [];

			var vec = new Vector3();
			var mat = new Matrix4();

			var i, u, theta;

			// compute the tangent vectors for each segment on the curve

			for ( i = 0; i <= segments; i ++ ) {

				u = i / segments;

				tangents[ i ] = this.getTangentAt( u );
				tangents[ i ].normalize();

			}

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the minimum tangent xyz component

			normals[ 0 ] = new Vector3();
			binormals[ 0 ] = new Vector3();
			var min = Number.MAX_VALUE;
			var tx = Math.abs( tangents[ 0 ].x );
			var ty = Math.abs( tangents[ 0 ].y );
			var tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= min ) {

				min = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= min ) {

				min = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= min ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


			// compute the slowly-varying normal and binormal vectors for each segment on the curve

			for ( i = 1; i <= segments; i ++ ) {

				normals[ i ] = normals[ i - 1 ].clone();

				binormals[ i ] = binormals[ i - 1 ].clone();

				vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

				if ( vec.length() > Number.EPSILON ) {

					vec.normalize();

					theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

					normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

				}

				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

			// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

			if ( closed === true ) {

				theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
				theta /= segments;

				if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

					theta = - theta;

				}

				for ( i = 1; i <= segments; i ++ ) {

					// twist a little...
					normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

				}

			}

			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};

		}

	};

	// TODO: Transformation for Curves?

	/**************************************************************
	 *	3D Curves
	 **************************************************************/

	// A Factory method for creating new curve subclasses

	Curve.create = function ( constructor, getPointFunc ) {

		constructor.prototype = Object.create( Curve.prototype );
		constructor.prototype.constructor = constructor;
		constructor.prototype.getPoint = getPointFunc;

		return constructor;

	};

	/**************************************************************
	 *	Line
	 **************************************************************/

	function LineCurve( v1, v2 ) {

		this.v1 = v1;
		this.v2 = v2;

	}

	LineCurve.prototype = Object.create( Curve.prototype );
	LineCurve.prototype.constructor = LineCurve;

	LineCurve.prototype.isLineCurve = true;

	LineCurve.prototype.getPoint = function ( t ) {

		if ( t === 1 ) {

			return this.v2.clone();

		}

		var point = this.v2.clone().sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve.prototype.getPointAt = function ( u ) {

		return this.getPoint( u );

	};

	LineCurve.prototype.getTangent = function( t ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	function CurvePath() {

		this.curves = [];

		this.autoClose = false; // Automatically closes the path

	}

	CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

		constructor: CurvePath,

		add: function ( curve ) {

			this.curves.push( curve );

		},

		closePath: function () {

			// Add a line curve if start and end of lines are not connected
			var startPoint = this.curves[ 0 ].getPoint( 0 );
			var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

			if ( ! startPoint.equals( endPoint ) ) {

				this.curves.push( new LineCurve( endPoint, startPoint ) );

			}

		},

		// To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:

		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')

		getPoint: function ( t ) {

			var d = t * this.getLength();
			var curveLengths = this.getCurveLengths();
			var i = 0;

			// To think about boundaries points.

			while ( i < curveLengths.length ) {

				if ( curveLengths[ i ] >= d ) {

					var diff = curveLengths[ i ] - d;
					var curve = this.curves[ i ];

					var segmentLength = curve.getLength();
					var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

					return curve.getPointAt( u );

				}

				i ++;

			}

			return null;

			// loop where sum != 0, sum > d , sum+1 <d

		},

		// We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength

		getLength: function () {

			var lens = this.getCurveLengths();
			return lens[ lens.length - 1 ];

		},

		// cacheLengths must be recalculated.
		updateArcLengths: function () {

			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getLengths();

		},

		// Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.

		getCurveLengths: function () {

			// We use cache values if curves and cache array are same length

			if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

				return this.cacheLengths;

			}

			// Get length of sub-curve
			// Push sums into cached array

			var lengths = [], sums = 0;

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				sums += this.curves[ i ].getLength();
				lengths.push( sums );

			}

			this.cacheLengths = lengths;

			return lengths;

		},

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 40;

			var points = [];

			for ( var i = 0; i <= divisions; i ++ ) {

				points.push( this.getPoint( i / divisions ) );

			}

			if ( this.autoClose ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		getPoints: function ( divisions ) {

			divisions = divisions || 12;

			var points = [], last;

			for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

				var curve = curves[ i ];
				var resolution = (curve && curve.isEllipseCurve) ? divisions * 2
					: (curve && curve.isLineCurve) ? 1
					: (curve && curve.isSplineCurve) ? divisions * curve.points.length
					: divisions;

				var pts = curve.getPoints( resolution );

				for ( var j = 0; j < pts.length; j++ ) {

					var point = pts[ j ];

					if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

					points.push( point );
					last = point;

				}

			}

			if ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		/**************************************************************
		 *	Create Geometries Helpers
		 **************************************************************/

		/// Generate geometry from path points (for Line or Points objects)

		createPointsGeometry: function ( divisions ) {

			var pts = this.getPoints( divisions );
			return this.createGeometry( pts );

		},

		// Generate geometry from equidistant sampling along the path

		createSpacedPointsGeometry: function ( divisions ) {

			var pts = this.getSpacedPoints( divisions );
			return this.createGeometry( pts );

		},

		createGeometry: function ( points ) {

			var geometry = new Geometry();

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return geometry;

		}

	} );

	/**************************************************************
	 *	Ellipse curve
	 **************************************************************/

	function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		this.aX = aX;
		this.aY = aY;

		this.xRadius = xRadius;
		this.yRadius = yRadius;

		this.aStartAngle = aStartAngle;
		this.aEndAngle = aEndAngle;

		this.aClockwise = aClockwise;

		this.aRotation = aRotation || 0;

	}

	EllipseCurve.prototype = Object.create( Curve.prototype );
	EllipseCurve.prototype.constructor = EllipseCurve;

	EllipseCurve.prototype.isEllipseCurve = true;

	EllipseCurve.prototype.getPoint = function( t ) {

		var twoPi = Math.PI * 2;
		var deltaAngle = this.aEndAngle - this.aStartAngle;
		var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

		// ensures that deltaAngle is 0 .. 2 PI
		while ( deltaAngle < 0 ) deltaAngle += twoPi;
		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

		if ( deltaAngle < Number.EPSILON ) {

			if ( samePoints ) {

				deltaAngle = 0;

			} else {

				deltaAngle = twoPi;

			}

		}

		if ( this.aClockwise === true && ! samePoints ) {

			if ( deltaAngle === twoPi ) {

				deltaAngle = - twoPi;

			} else {

				deltaAngle = deltaAngle - twoPi;

			}

		}

		var angle = this.aStartAngle + t * deltaAngle;
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x - this.aX;
			var ty = y - this.aY;

			// Rotate the point about the center of the ellipse.
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;

		}

		return new Vector2( x, y );

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var CurveUtils = {

		tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

			return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

		},

		// Puay Bing, thanks for helping with this derivative!

		tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {

			return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
				3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
				6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
				3 * t * t * p3;

		},

		tangentSpline: function ( t, p0, p1, p2, p3 ) {

			// To check if my formulas are correct

			var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
			var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
			var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
			var h11 = 3 * t * t - 2 * t;	// t3 − t2

			return h00 + h10 + h01 + h11;

		},

		// Catmull-Rom

		interpolate: function( p0, p1, p2, p3, t ) {

			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	};

	/**************************************************************
	 *	Spline curve
	 **************************************************************/

	function SplineCurve( points /* array of Vector2 */ ) {

		this.points = ( points === undefined ) ? [] : points;

	}

	SplineCurve.prototype = Object.create( Curve.prototype );
	SplineCurve.prototype.constructor = SplineCurve;

	SplineCurve.prototype.isSplineCurve = true;

	SplineCurve.prototype.getPoint = function ( t ) {

		var points = this.points;
		var point = ( points.length - 1 ) * t;

		var intPoint = Math.floor( point );
		var weight = point - intPoint;

		var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var point1 = points[ intPoint ];
		var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		var interpolate = CurveUtils.interpolate;

		return new Vector2(
			interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
			interpolate( point0.y, point1.y, point2.y, point3.y, weight )
		);

	};

	/**************************************************************
	 *	Cubic Bezier curve
	 **************************************************************/

	function CubicBezierCurve( v0, v1, v2, v3 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	}

	CubicBezierCurve.prototype = Object.create( Curve.prototype );
	CubicBezierCurve.prototype.constructor = CubicBezierCurve;

	CubicBezierCurve.prototype.getPoint = function ( t ) {

		var b3 = ShapeUtils.b3;

		return new Vector2(
			b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		);

	};

	CubicBezierCurve.prototype.getTangent = function( t ) {

		var tangentCubicBezier = CurveUtils.tangentCubicBezier;

		return new Vector2(
			tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		).normalize();

	};

	/**************************************************************
	 *	Quadratic Bezier curve
	 **************************************************************/


	function QuadraticBezierCurve( v0, v1, v2 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	}

	QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;


	QuadraticBezierCurve.prototype.getPoint = function ( t ) {

		var b2 = ShapeUtils.b2;

		return new Vector2(
			b2( t, this.v0.x, this.v1.x, this.v2.x ),
			b2( t, this.v0.y, this.v1.y, this.v2.y )
		);

	};


	QuadraticBezierCurve.prototype.getTangent = function( t ) {

		var tangentQuadraticBezier = CurveUtils.tangentQuadraticBezier;

		return new Vector2(
			tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
			tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
		).normalize();

	};

	var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {

		fromPoints: function ( vectors ) {

			this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

			for ( var i = 1, l = vectors.length; i < l; i ++ ) {

				this.lineTo( vectors[ i ].x, vectors[ i ].y );

			}

		},

		moveTo: function ( x, y ) {

			this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

		},

		lineTo: function ( x, y ) {

			var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
			this.curves.push( curve );

			this.currentPoint.set( x, y );

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			var curve = new QuadraticBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCPx, aCPy ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			var curve = new CubicBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCP1x, aCP1y ),
				new Vector2( aCP2x, aCP2y ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		splineThru: function ( pts /*Array of Vector*/ ) {

			var npts = [ this.currentPoint.clone() ].concat( pts );

			var curve = new SplineCurve( npts );
			this.curves.push( curve );

			this.currentPoint.copy( pts[ pts.length - 1 ] );

		},

		arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absarc( aX + x0, aY + y0, aRadius,
				aStartAngle, aEndAngle, aClockwise );

		},

		absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		},

		ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		},

		absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			if ( this.curves.length > 0 ) {

				// if a previous curve is present, attempt to join
				var firstPoint = curve.getPoint( 0 );

				if ( ! firstPoint.equals( this.currentPoint ) ) {

					this.lineTo( firstPoint.x, firstPoint.y );

				}

			}

			this.curves.push( curve );

			var lastPoint = curve.getPoint( 1 );
			this.currentPoint.copy( lastPoint );

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	function Shape() {

		Path.apply( this, arguments );

		this.holes = [];

	}

	Shape.prototype = Object.assign( Object.create( PathPrototype ), {

		constructor: Shape,

		getPointsHoles: function ( divisions ) {

			var holesPts = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				holesPts[ i ] = this.holes[ i ].getPoints( divisions );

			}

			return holesPts;

		},

		// Get points of shape and holes (keypoints based on segments parameter)

		extractAllPoints: function ( divisions ) {

			return {

				shape: this.getPoints( divisions ),
				holes: this.getPointsHoles( divisions )

			};

		},

		extractPoints: function ( divisions ) {

			return this.extractAllPoints( divisions );

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 *
	 **/

	function Path( points ) {

		CurvePath.call( this );
		this.currentPoint = new Vector2();

		if ( points ) {

			this.fromPoints( points );

		}

	}

	Path.prototype = PathPrototype;
	PathPrototype.constructor = Path;


	// minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	function ShapePath() {
		this.subPaths = [];
		this.currentPath = null;
	}

	ShapePath.prototype = {
		moveTo: function ( x, y ) {
			this.currentPath = new Path();
			this.subPaths.push(this.currentPath);
			this.currentPath.moveTo( x, y );
		},
		lineTo: function ( x, y ) {
			this.currentPath.lineTo( x, y );
		},
		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
			this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
		},
		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
			this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
		},
		splineThru: function ( pts ) {
			this.currentPath.splineThru( pts );
		},

		toShapes: function ( isCCW, noHoles ) {

			function toShapesNoHoles( inSubpaths ) {

				var shapes = [];

				for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

					var tmpPath = inSubpaths[ i ];

					var tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;

					shapes.push( tmpShape );

				}

				return shapes;

			}

			function isPointInsidePolygon( inPt, inPolygon ) {

				var polyLen = inPolygon.length;

				// inPt on polygon contour => immediate success    or
				// toggling of inside/outside at every single! intersection point of an edge
				//  with the horizontal line through inPt, left of inPt
				//  not counting lowerY endpoints of edges and whole edges on that line
				var inside = false;
				for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

					var edgeLowPt  = inPolygon[ p ];
					var edgeHighPt = inPolygon[ q ];

					var edgeDx = edgeHighPt.x - edgeLowPt.x;
					var edgeDy = edgeHighPt.y - edgeLowPt.y;

					if ( Math.abs( edgeDy ) > Number.EPSILON ) {

						// not parallel
						if ( edgeDy < 0 ) {

							edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
							edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

						}
						if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

						if ( inPt.y === edgeLowPt.y ) {

							if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!

						} else {

							var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
							if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
							if ( perpEdge < 0 ) 				continue;
							inside = ! inside;		// true intersection left of inPt

						}

					} else {

						// parallel or collinear
						if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
						// edge lies on the same horizontal line as inPt
						if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
							 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
						// continue;

					}

				}

				return	inside;

			}

			var isClockWise = ShapeUtils.isClockWise;

			var subPaths = this.subPaths;
			if ( subPaths.length === 0 ) return [];

			if ( noHoles === true )	return	toShapesNoHoles( subPaths );


			var solid, tmpPath, tmpShape, shapes = [];

			if ( subPaths.length === 1 ) {

				tmpPath = subPaths[ 0 ];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push( tmpShape );
				return shapes;

			}

			var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
			holesFirst = isCCW ? ! holesFirst : holesFirst;

			// console.log("Holes first", holesFirst);

			var betterShapeHoles = [];
			var newShapes = [];
			var newShapeHoles = [];
			var mainIdx = 0;
			var tmpPoints;

			newShapes[ mainIdx ] = undefined;
			newShapeHoles[ mainIdx ] = [];

			for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

				tmpPath = subPaths[ i ];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise( tmpPoints );
				solid = isCCW ? ! solid : solid;

				if ( solid ) {

					if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

					newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
					newShapes[ mainIdx ].s.curves = tmpPath.curves;

					if ( holesFirst )	mainIdx ++;
					newShapeHoles[ mainIdx ] = [];

					//console.log('cw', i);

				} else {

					newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

					//console.log('ccw', i);

				}

			}

			// only Holes? -> probably all Shapes with wrong orientation
			if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


			if ( newShapes.length > 1 ) {

				var ambiguous = false;
				var toChange = [];

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					betterShapeHoles[ sIdx ] = [];

				}

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					var sho = newShapeHoles[ sIdx ];

					for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

						var ho = sho[ hIdx ];
						var hole_unassigned = true;

						for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

							if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

								if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
								if ( hole_unassigned ) {

									hole_unassigned = false;
									betterShapeHoles[ s2Idx ].push( ho );

								} else {

									ambiguous = true;

								}

							}

						}
						if ( hole_unassigned ) {

							betterShapeHoles[ sIdx ].push( ho );

						}

					}

				}
				// console.log("ambiguous: ", ambiguous);
				if ( toChange.length > 0 ) {

					// console.log("to change: ", toChange);
					if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

				}

			}

			var tmpHoles;

			for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

				tmpShape = newShapes[ i ].s;
				shapes.push( tmpShape );
				tmpHoles = newShapeHoles[ i ];

				for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

					tmpShape.holes.push( tmpHoles[ j ].h );

				}

			}

			//console.log("shape", shapes);

			return shapes;

		}
	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Font( data ) {

		this.data = data;

	}

	Object.assign( Font.prototype, {

		isFont: true,

		generateShapes: function ( text, size, divisions ) {

			function createPaths( text ) {

				var chars = String( text ).split( '' );
				var scale = size / data.resolution;
				var offset = 0;

				var paths = [];

				for ( var i = 0; i < chars.length; i ++ ) {

					var ret = createPath( chars[ i ], scale, offset );
					offset += ret.offset;

					paths.push( ret.path );

				}

				return paths;

			}

			function createPath( c, scale, offset ) {

				var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

				if ( ! glyph ) return;

				var path = new ShapePath();

				var pts = [], b2 = ShapeUtils.b2, b3 = ShapeUtils.b3;
				var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

				if ( glyph.o ) {

					var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

					for ( var i = 0, l = outline.length; i < l; ) {

						var action = outline[ i ++ ];

						switch ( action ) {

							case 'm': // moveTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.moveTo( x, y );

								break;

							case 'l': // lineTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.lineTo( x, y );

								break;

							case 'q': // quadraticCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;

								path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b2( t, cpx0, cpx1, cpx );
										b2( t, cpy0, cpy1, cpy );

									}

								}

								break;

							case 'b': // bezierCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;
								cpx2 = outline[ i ++ ] * scale + offset;
								cpy2 = outline[ i ++ ] * scale;

								path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b3( t, cpx0, cpx1, cpx2, cpx );
										b3( t, cpy0, cpy1, cpy2, cpy );

									}

								}

								break;

						}

					}

				}

				return { offset: glyph.ha * scale, path: path };

			}

			//

			if ( size === undefined ) size = 100;
			if ( divisions === undefined ) divisions = 4;

			var data = this.data;

			var paths = createPaths( text );
			var shapes = [];

			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

			}

			return shapes;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function FontLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( FontLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new XHRLoader( this.manager );
			loader.load( url, function ( text ) {

				var json;

				try {

					json = JSON.parse( text );

				} catch ( e ) {

					console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
					json = JSON.parse( text.substring( 65, text.length - 2 ) );

				}

				var font = scope.parse( json );

				if ( onLoad ) onLoad( font );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			return new Font( json );

		}

	} );

	var context;

	function getAudioContext() {

		if ( context === undefined ) {

			context = new ( window.AudioContext || window.webkitAudioContext )();

		}

		return context;

	}

	/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function AudioLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( AudioLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var loader = new XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.load( url, function ( buffer ) {

				var context = getAudioContext();

				context.decodeAudioData( buffer, function ( audioBuffer ) {

					onLoad( audioBuffer );

				} );

			}, onProgress, onError );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function StereoCamera() {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.eyeSep = 0.064;

		this.cameraL = new PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

	}

	Object.assign( StereoCamera.prototype, {

		update: ( function () {

			var instance, focus, fov, aspect, near, far, zoom;

			var eyeRight = new Matrix4();
			var eyeLeft = new Matrix4();

			return function update( camera ) {

				var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
													aspect !== camera.aspect * this.aspect || near !== camera.near ||
													far !== camera.far || zoom !== camera.zoom;

				if ( needsUpdate ) {

					instance = this;
					focus = camera.focus;
					fov = camera.fov;
					aspect = camera.aspect * this.aspect;
					near = camera.near;
					far = camera.far;
					zoom = camera.zoom;

					// Off-axis stereoscopic effect based on
					// http://paulbourke.net/stereographics/stereorender/

					var projectionMatrix = camera.projectionMatrix.clone();
					var eyeSep = this.eyeSep / 2;
					var eyeSepOnProjection = eyeSep * near / focus;
					var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
					var xmin, xmax;

					// translate xOffset

					eyeLeft.elements[ 12 ] = - eyeSep;
					eyeRight.elements[ 12 ] = eyeSep;

					// for left eye

					xmin = - ymax * aspect + eyeSepOnProjection;
					xmax = ymax * aspect + eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraL.projectionMatrix.copy( projectionMatrix );

					// for right eye

					xmin = - ymax * aspect - eyeSepOnProjection;
					xmax = ymax * aspect - eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraR.projectionMatrix.copy( projectionMatrix );

				}

				this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
				this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

			};

		} )()

	} );

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CubeCamera( near, far, cubeResolution ) {

		Object3D.call( this );

		this.type = 'CubeCamera';

		var fov = 90, aspect = 1;

		var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

		this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );

		this.updateCubeMap = function ( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderTarget.activeCubeFace = 0;
			renderer.render( scene, cameraPX, renderTarget );

			renderTarget.activeCubeFace = 1;
			renderer.render( scene, cameraNX, renderTarget );

			renderTarget.activeCubeFace = 2;
			renderer.render( scene, cameraPY, renderTarget );

			renderTarget.activeCubeFace = 3;
			renderer.render( scene, cameraNY, renderTarget );

			renderTarget.activeCubeFace = 4;
			renderer.render( scene, cameraPZ, renderTarget );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderTarget.activeCubeFace = 5;
			renderer.render( scene, cameraNZ, renderTarget );

			renderer.setRenderTarget( null );

		};

	}

	CubeCamera.prototype = Object.create( Object3D.prototype );
	CubeCamera.prototype.constructor = CubeCamera;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioListener() {

		Object3D.call( this );

		this.type = 'AudioListener';

		this.context = getAudioContext();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

	}

	AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: AudioListener,

		getInput: function () {

			return this.gain;

		},

		removeFilter: function ( ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
				this.gain.connect( this.context.destination );
				this.filter = null;

			}

		},

		getFilter: function () {

			return this.filter;

		},

		setFilter: function ( value ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );

			} else {

				this.gain.disconnect( this.context.destination );

			}

			this.filter = value;
			this.gain.connect( this.filter );
			this.filter.connect( this.context.destination );

		},

		getMasterVolume: function () {

			return this.gain.gain.value;

		},

		setMasterVolume: function ( value ) {

			this.gain.gain.value = value;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();
			var quaternion = new Quaternion();
			var scale = new Vector3();

			var orientation = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				var listener = this.context.listener;
				var up = this.up;

				this.matrixWorld.decompose( position, quaternion, scale );

				orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

				listener.setPosition( position.x, position.y, position.z );
				listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

			};

		} )()

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function Audio( listener ) {

		Object3D.call( this );

		this.type = 'Audio';

		this.context = listener.context;
		this.source = this.context.createBufferSource();
		this.source.onended = this.onEnded.bind( this );

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.startTime = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this.filters = [];

	}

	Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Audio,

		getOutput: function () {

			return this.gain;

		},

		setNodeSource: function ( audioNode ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();

			return this;

		},

		setBuffer: function ( audioBuffer ) {

			this.source.buffer = audioBuffer;
			this.sourceType = 'buffer';

			if ( this.autoplay ) this.play();

			return this;

		},

		play: function () {

			if ( this.isPlaying === true ) {

				console.warn( 'THREE.Audio: Audio is already playing.' );
				return;

			}

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			var source = this.context.createBufferSource();

			source.buffer = this.source.buffer;
			source.loop = this.source.loop;
			source.onended = this.source.onended;
			source.start( 0, this.startTime );
			source.playbackRate.value = this.playbackRate;

			this.isPlaying = true;

			this.source = source;

			return this.connect();

		},

		pause: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.startTime = this.context.currentTime;
			this.isPlaying = false;

			return this;

		},

		stop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.startTime = 0;
			this.isPlaying = false;

			return this;

		},

		connect: function () {

			if ( this.filters.length > 0 ) {

				this.source.connect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].connect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

			} else {

				this.source.connect( this.getOutput() );

			}

			return this;

		},

		disconnect: function () {

			if ( this.filters.length > 0 ) {

				this.source.disconnect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].disconnect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

			} else {

				this.source.disconnect( this.getOutput() );

			}

			return this;

		},

		getFilters: function () {

			return this.filters;

		},

		setFilters: function ( value ) {

			if ( ! value ) value = [];

			if ( this.isPlaying === true ) {

				this.disconnect();
				this.filters = value;
				this.connect();

			} else {

				this.filters = value;

			}

			return this;

		},

		getFilter: function () {

			return this.getFilters()[ 0 ];

		},

		setFilter: function ( filter ) {

			return this.setFilters( filter ? [ filter ] : [] );

		},

		setPlaybackRate: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.playbackRate = value;

			if ( this.isPlaying === true ) {

				this.source.playbackRate.value = this.playbackRate;

			}

			return this;

		},

		getPlaybackRate: function () {

			return this.playbackRate;

		},

		onEnded: function () {

			this.isPlaying = false;

		},

		getLoop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return false;

			}

			return this.source.loop;

		},

		setLoop: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.loop = value;

		},

		getVolume: function () {

			return this.gain.gain.value;

		},


		setVolume: function ( value ) {

			this.gain.gain.value = value;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PositionalAudio( listener ) {

		Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.connect( this.gain );

	}

	PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

		constructor: PositionalAudio,

		getOutput: function () {

			return this.panner;

		},

		getRefDistance: function () {

			return this.panner.refDistance;

		},

		setRefDistance: function ( value ) {

			this.panner.refDistance = value;

		},

		getRolloffFactor: function () {

			return this.panner.rolloffFactor;

		},

		setRolloffFactor: function ( value ) {

			this.panner.rolloffFactor = value;

		},

		getDistanceModel: function () {

			return this.panner.distanceModel;

		},

		setDistanceModel: function ( value ) {

			this.panner.distanceModel = value;

		},

		getMaxDistance: function () {

			return this.panner.maxDistance;

		},

		setMaxDistance: function ( value ) {

			this.panner.maxDistance = value;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				position.setFromMatrixPosition( this.matrixWorld );

				this.panner.setPosition( position.x, position.y, position.z );

			};

		} )()


	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioAnalyser( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	}

	Object.assign( AudioAnalyser.prototype, {

		getFrequencyData: function () {

			this.analyser.getByteFrequencyData( this.data );

			return this.data;

		},

		getAverageFrequency: function () {

			var value = 0, data = this.getFrequencyData();

			for ( var i = 0; i < data.length; i ++ ) {

				value += data[ i ];

			}

			return value / data.length;

		}

	} );

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyMixer( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':			mixFunction = this._slerp;		break;

			case 'string':
			case 'bool':

				bufferType = Array,		mixFunction = this._select;		break;

			default:					mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	}

	PropertyMixer.prototype = {

		constructor: PropertyMixer,

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
						buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function() {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function() {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			Quaternion.slerpFlat( buffer, dstOffset,
					buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	};

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyBinding( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath ||
				PropertyBinding.parseTrackName( path );

		this.node = PropertyBinding.findNode(
				rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	}

	PropertyBinding.prototype = {

		constructor: PropertyBinding,

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function() {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = PropertyBinding.findNode(
						this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

	 		// ensure there is a value node
			if ( ! targetObject ) {

				console.error( "  trying to update node for track: " + this.path + " but it wasn't found." );
				return;

			}

			if ( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if ( ! targetObject.material ) {

							console.error( '  can not bind to material as node does not have a material', this );
							return;

						}

						if ( ! targetObject.material.materials ) {

							console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if ( ! targetObject.skeleton ) {

							console.error( '  can not bind to bones as node does not have a skeleton', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[ i ].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( '  can not bind to objectName of node, undefined', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if ( targetObject[ objectIndex ] === undefined ) {

						console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( nodeProperty === undefined ) {

				var nodeName = parsedPath.nodeName;

				console.error( "  trying to update property for track: " + nodeName +
						'.' + propertyName + " but it wasn't found.", targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;
				this.targetObject = targetObject;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;
				this.targetObject = targetObject;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {
				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {
					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
						return;

					}

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( nodeProperty.length !== undefined ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function() {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	};

	Object.assign( PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function() {},
		_setValue_unavailable: function() {},

		// initial state of these methods that calls 'bind'
		_getValue_unbound: PropertyBinding.prototype.getValue,
		_setValue_unbound: PropertyBinding.prototype.setValue,

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		]

	} );

	PropertyBinding.Composite =
			function( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath ||
				PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	};

	PropertyBinding.Composite.prototype = {

		constructor: PropertyBinding.Composite,

		getValue: function( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) binding.getValue( array, offset );

		},

		setValue: function( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	};

	PropertyBinding.create = function( root, path, parsedPath ) {

		if ( ! ( (root && root.isAnimationObjectGroup) ) ) {

			return new PropertyBinding( root, path, parsedPath );

		} else {

			return new PropertyBinding.Composite( root, path, parsedPath );

		}

	};

	PropertyBinding.parseTrackName = function( trackName ) {

		// matches strings in the form of:
		//    nodeName.property
		//    nodeName.property[accessor]
		//    nodeName.material.property[accessor]
		//    uuid.property[accessor]
		//    uuid.objectName[objectIndex].propertyName[propertyIndex]
		//    parentName/nodeName.property
		//    parentName/parentName/nodeName.property[index]
		//    .bone[Armature.DEF_cog].position
		//    scene:helium_balloon_model:helium_balloon_model.position
		// created and tested via https://regex101.com/#javascript

		var re = /^((?:\w+[\/:])*)(\w+)?(?:\.(\w+)(?:\[(.+)\])?)?\.(\w+)(?:\[(.+)\])?$/;
		var matches = re.exec( trackName );

		if ( ! matches ) {

			throw new Error( "cannot parse trackName at all: " + trackName );

		}

		var results = {
			// directoryName: matches[ 1 ], // (tschw) currently unused
			nodeName: matches[ 2 ], 	// allowed to be null, specified root node.
			objectName: matches[ 3 ],
			objectIndex: matches[ 4 ],
			propertyName: matches[ 5 ],
			propertyIndex: matches[ 6 ]	// allowed to be null, specifies that the whole property is set.
		};

		if ( results.propertyName === null || results.propertyName.length === 0 ) {

			throw new Error( "can not parse propertyName from trackName: " + trackName );

		}

		return results;

	};

	PropertyBinding.findNode = function( root, nodeName ) {

		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if ( root.skeleton ) {

			var searchSkeleton = function( skeleton ) {

				for( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[ i ];

					if ( bone.name === nodeName ) {

						return bone;

					}
				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if ( bone ) {

				return bone;

			}
		}

		// search into node subtree.
		if ( root.children ) {

			var searchNodeSubtree = function( children ) {

				for( var i = 0; i < children.length; i ++ ) {

					var childNode = children[ i ];

					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if ( result ) return result;

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if ( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	};

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 * 	-	Add objects you would otherwise pass as 'root' to the
	 * 		constructor or the .clipAction method of AnimationMixer.
	 *
	 * 	-	Instead pass this object as 'root'.
	 *
	 * 	-	You can also add and remove objects later when the mixer
	 * 		is running.
	 *
	 * Note:
	 *
	 *  	Objects of this class appear as one object to the mixer,
	 *  	so cache control of the individual objects must be done
	 *  	on the group.
	 *
	 * Limitation:
	 *
	 * 	- 	The animated properties must be compatible among the
	 * 		all objects in the group.
	 *
	 *  -	A single property can either be controlled through a
	 *  	target group or directly, but not both.
	 *
	 * @author tschw
	 */

	function AnimationObjectGroup( var_args ) {

		this.uuid = _Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0;			// threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices;		// for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = [];					// inside: string
		this._parsedPaths = [];				// inside: { we don't care, here }
		this._bindings = []; 				// inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() { return scope._objects.length; },
				get inUse() { return this.total - scope.nCachedObjects_;  }
			},

			get bindingsPerObject() { return scope._bindings.length; }

		};

	}

	AnimationObjectGroup.prototype = {

		constructor: AnimationObjectGroup,

		isAnimationObjectGroup: true,

		add: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push(
								new PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					var knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject) {

					console.error( "Different objects with the same UUID " +
							"detected. Clean the caches or recreate your " +
							"infrastructure when reloading scenes..." );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function( var_args ) {

			var objects = this._objects,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function( path, parsedPath ) {
			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) return bindings[ index ];

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects,
					n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];

				bindingsForPath[ i ] =
						new PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function( path ) {
			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	};

	/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */

	function AnimationAction( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
				endingStart: 	ZeroCurvatureEnding,
				endingEnd:		ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants;	// bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null;			// for the memory manager
		this._byClipCacheIndex = null;		// for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = LoopRepeat;
		this._loopCount = -1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; 		// no. of repetitions when looping

		this.paused = false;				// false -> zero effective time scale
		this.enabled = true;				// true -> zero effective weight

		this.clampWhenFinished 	= false;	// keep feeding the last frame?

		this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

	}

	AnimationAction.prototype = {

		constructor: AnimationAction,

		// State & Scheduling

		play: function() {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function() {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function() {

			this.paused = false;
			this.enabled = true;

			this.time = 0;			// restart clip
			this._loopCount = -1;	// forget previous loops
			this._startTime = null;	// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function() {

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
					this._startTime === null && this._mixer._isActiveAction( this );

		},

		// return true when play has been called
		isScheduled: function() {

			return this._mixer._isActiveAction( this );

		},

		startAt: function( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function() {

			return this._effectiveWeight;

		},

		fadeIn: function( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function( fadeOutAction, duration, warp ) {

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function() {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the weight stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 :timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function() {

			return this._effectiveTimeScale;

		},

		setDuration: function( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function( duration ) {

			return this.warp( this._effectiveTimeScale, 0, duration );

		},

		warp: function( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function() {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function() {

			return this._mixer;

		},

		getClip: function() {

			return this._clip;

		},

		getRoot: function() {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function( time, deltaTime, timeDirection, accuIndex ) {
			// called by the mixer

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.paused = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function( deltaTime ) {

			var time = this.time + deltaTime;

			if ( deltaTime === 0 ) return time;

			var duration = this._clip.duration,

				loop = this.loop,
				loopCount = this._loopCount;

			if ( loop === LoopOnce ) {

				if ( loopCount === -1 ) {
					// just started

					this.loopCount = 0;
					this._setEndings( true, true, false );

				}

				handle_stop: {

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else break handle_stop;

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? -1 : 1
					} );

				}

			} else { // repetitive Repeat or PingPong

				var pingPong = ( loop === LoopPingPong );

				if ( loopCount === -1 ) {
					// just started

					if ( deltaTime >= 0 ) {

						loopCount = 0;

						this._setEndings(
								true, this.repetitions === 0, pingPong );

					} else {

						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1

						this._setEndings(
								this.repetitions === 0, true, pingPong );

					}

				}

				if ( time >= duration || time < 0 ) {
					// wrap around

					var loopDelta = Math.floor( time / duration ); // signed
					time -= duration * loopDelta;

					loopCount += Math.abs( loopDelta );

					var pending = this.repetitions - loopCount;

					if ( pending < 0 ) {
						// have to stop (switch state, clamp time, fire event)

						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;

						time = deltaTime > 0 ? duration : 0;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime > 0 ? 1 : -1
						} );

					} else {
						// keep running

						if ( pending === 0 ) {
							// entering the last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

				}

				if ( pingPong && ( loopCount & 1 ) === 1 ) {
					// invert time for the "pong round"

					this.time = time;
					return duration - time;

				}

			}

			this.time = time;
			return time;

		},

		_setEndings: function( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart 	= ZeroSlopeEnding;
				settings.endingEnd		= ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ?
							ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingStart = WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ?
							ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now; 				values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

			return this;

		}

	};

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function AnimationMixer( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	}

	Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject !== null ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ],
				prototypeAction = null;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				if ( clipObject === null )
					clipObject = prototypeAction._clip;

			}

			// clip must be known when specified via string
			if ( clipObject === null ) return null;

			// allocate all resources required to run it
			var newAction = new AnimationAction( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipUuid, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function() {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				if ( action.enabled ) {

					action._update( time, deltaTime, timeDirection, accuIndex );

				}

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// return this mixer's root target object
		getRoot: function() {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function( clip ) {

			var actions = this._actions,
				clipUuid = clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipUuid ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipUuid in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	} );

	// Implementation details:

	Object.assign( AnimationMixer.prototype, {

		_bindAction: function( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
							_propertyBindings[ i ].binding.parsedPath;

					binding = new PropertyMixer(
							PropertyBinding.create( root, trackName, path ),
							track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipUuid = action._clip.uuid,
						actionsForClip = this._actionsByClip[ clipUuid ];

					this._bindAction( action,
							actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipUuid, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function() {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 		knownActions: Array< AnimationAction >	- used as prototypes
			// 		actionByRoot: AnimationAction			- lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() { return scope._actions.length; },
					get inUse() { return scope._nActiveActions; }
				},
				bindings: {
					get total() { return scope._bindings.length; },
					get inUse() { return scope._nActiveBindings; }
				},
				controlInterpolants: {
					get total() { return scope._controlInterpolants.length; },
					get inUse() { return scope._nActiveControlInterpolants; }
				}

			};

		},

		// Memory management for AnimationAction objects

		_isActiveAction: function( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function( action, clipUuid, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipUuid ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipUuid = action._clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( actions._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipUuid ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			remove_empty_map: {

				for ( var _ in bindingByName ) break remove_empty_map;

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function() {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new LinearInterpolant(
						new Float32Array( 2 ), new Float32Array( 2 ),
							1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 )

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Uniform( value ) {

		if ( typeof value === 'string' ) {

			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];

		}

		this.value = value;

	}

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferGeometry() {

		BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	}

	InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;

	InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;

	InstancedBufferGeometry.prototype.addGroup = function ( start, count, materialIndex ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex

		} );

	};

	InstancedBufferGeometry.prototype.copy = function ( source ) {

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		var attributes = source.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		var groups = source.groups;

		for ( var i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.materialIndex );

		}

		return this;

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

		this.uuid = _Math.generateUUID();

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

		this.normalized = normalized === true;

	}


	InterleavedBufferAttribute.prototype = {

		constructor: InterleavedBufferAttribute,

		isInterleavedBufferAttribute: true,

		get count() {

			return this.data.count;

		},

		get array() {

			return this.data.array;

		},

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBuffer( array, stride ) {

		this.uuid = _Math.generateUUID();

		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	InterleavedBuffer.prototype = {

		constructor: InterleavedBuffer,

		isInterleavedBuffer: true,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.stride : 0;
			this.array = array;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.count = source.count;
			this.stride = source.stride;
			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

		InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );
	InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;

	InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;

	InstancedInterleavedBuffer.prototype.copy = function ( source ) {

		InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

		BufferAttribute.call( this, array, itemSize );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;

	InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;

	InstancedBufferAttribute.prototype.copy = function ( source ) {

		BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	function Raycaster( origin, direction, near, far ) {

		this.ray = new Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near || 0;
		this.far = far || Infinity;

		this.params = {
			Mesh: {},
			Line: {},
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};

		Object.defineProperties( this.params, {
			PointCloud: {
				get: function () {
					console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
					return this.Points;
				}
			}
		} );

	}

	function ascSort( a, b ) {

		return a.distance - b.distance;

	}

	function intersectObject( object, raycaster, intersects, recursive ) {

		if ( object.visible === false ) return;

		object.raycast( raycaster, intersects );

		if ( recursive === true ) {

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				intersectObject( children[ i ], raycaster, intersects, true );

			}

		}

	}

	//

	Raycaster.prototype = {

		constructor: Raycaster,

		linePrecision: 1,

		set: function ( origin, direction ) {

			// direction is assumed to be normalized (for accurate distance calculations)

			this.ray.set( origin, direction );

		},

		setFromCamera: function ( coords, camera ) {

			if ( (camera && camera.isPerspectiveCamera) ) {

				this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
				this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

			} else if ( (camera && camera.isOrthographicCamera) ) {

				this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
				this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

			} else {

				console.error( 'THREE.Raycaster: Unsupported camera type.' );

			}

		},

		intersectObject: function ( object, recursive ) {

			var intersects = [];

			intersectObject( object, this, intersects, recursive );

			intersects.sort( ascSort );

			return intersects;

		},

		intersectObjects: function ( objects, recursive ) {

			var intersects = [];

			if ( Array.isArray( objects ) === false ) {

				console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
				return intersects;

			}

			for ( var i = 0, l = objects.length; i < l; i ++ ) {

				intersectObject( objects[ i ], this, intersects, recursive );

			}

			intersects.sort( ascSort );

			return intersects;

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Clock( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	}

	Clock.prototype = {

		constructor: Clock,

		start: function () {

			this.startTime = ( performance || Date ).now();

			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();

			}

			if ( this.running ) {

				var newTime = ( performance || Date ).now();

				diff = ( newTime - this.oldTime ) / 1000;
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	};

	/**
	 * Spline from Tween.js, slightly optimized (and trashed)
	 * http://sole.github.com/tween.js/examples/05_spline.html
	 *
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Spline( points ) {

		this.points = points;

		var c = [], v3 = { x: 0, y: 0, z: 0 },
		point, intPoint, weight, w2, w3,
		pa, pb, pc, pd;

		this.initFromArray = function ( a ) {

			this.points = [];

			for ( var i = 0; i < a.length; i ++ ) {

				this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

			}

		};

		this.getPoint = function ( k ) {

			point = ( this.points.length - 1 ) * k;
			intPoint = Math.floor( point );
			weight = point - intPoint;

			c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
			c[ 1 ] = intPoint;
			c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
			c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

			pa = this.points[ c[ 0 ] ];
			pb = this.points[ c[ 1 ] ];
			pc = this.points[ c[ 2 ] ];
			pd = this.points[ c[ 3 ] ];

			w2 = weight * weight;
			w3 = weight * w2;

			v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
			v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
			v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

			return v3;

		};

		this.getControlPointsArray = function () {

			var i, p, l = this.points.length,
				coords = [];

			for ( i = 0; i < l; i ++ ) {

				p = this.points[ i ];
				coords[ i ] = [ p.x, p.y, p.z ];

			}

			return coords;

		};

		// approximate length by summing linear segments

		this.getLength = function ( nSubDivisions ) {

			var i, index, nSamples, position,
				point = 0, intPoint = 0, oldIntPoint = 0,
				oldPosition = new Vector3(),
				tmpVec = new Vector3(),
				chunkLengths = [],
				totalLength = 0;

			// first point has 0 length

			chunkLengths[ 0 ] = 0;

			if ( ! nSubDivisions ) nSubDivisions = 100;

			nSamples = this.points.length * nSubDivisions;

			oldPosition.copy( this.points[ 0 ] );

			for ( i = 1; i < nSamples; i ++ ) {

				index = i / nSamples;

				position = this.getPoint( index );
				tmpVec.copy( position );

				totalLength += tmpVec.distanceTo( oldPosition );

				oldPosition.copy( position );

				point = ( this.points.length - 1 ) * index;
				intPoint = Math.floor( point );

				if ( intPoint !== oldIntPoint ) {

					chunkLengths[ intPoint ] = totalLength;
					oldIntPoint = intPoint;

				}

			}

			// last point ends with total length

			chunkLengths[ chunkLengths.length ] = totalLength;

			return { chunks: chunkLengths, total: totalLength };

		};

		this.reparametrizeByArcLength = function ( samplingCoef ) {

			var i, j,
				index, indexCurrent, indexNext,
				realDistance,
				sampling, position,
				newpoints = [],
				tmpVec = new Vector3(),
				sl = this.getLength();

			newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

			for ( i = 1; i < this.points.length; i ++ ) {

				//tmpVec.copy( this.points[ i - 1 ] );
				//linearDistance = tmpVec.distanceTo( this.points[ i ] );

				realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

				sampling = Math.ceil( samplingCoef * realDistance / sl.total );

				indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
				indexNext = i / ( this.points.length - 1 );

				for ( j = 1; j < sampling - 1; j ++ ) {

					index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

					position = this.getPoint( index );
					newpoints.push( tmpVec.copy( position ).clone() );

				}

				newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

			}

			this.points = newpoints;

		};

		// Catmull-Rom

		function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

			var v0 = ( p2 - p0 ) * 0.5,
				v1 = ( p3 - p1 ) * 0.5;

			return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	}

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The poles (phi) are at the positive and negative y axis.
	 * The equator starts at positive z.
	 */

	function Spherical( radius, phi, theta ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0;
		this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
		this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

		return this;

	}

	Spherical.prototype = {

		constructor: Spherical,

		set: function ( radius, phi, theta ) {

			this.radius = radius;
			this.phi = phi;
			this.theta = theta;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;

			return this;

		},

		// restrict phi to be betwee EPS and PI-EPS
		makeSafe: function() {

			var EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

			return this;

		},

		setFromVector3: function( vec3 ) {

			this.radius = vec3.length();

			if ( this.radius === 0 ) {

				this.theta = 0;
				this.phi = 0;

			} else {

				this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
				this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

			}

			return this;

		},

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function MorphBlendMesh( geometry, material ) {

		Mesh.call( this, geometry, material );

		this.animationsMap = {};
		this.animationsList = [];

		// prepare default animation
		// (all frames played together in 1 second)

		var numFrames = this.geometry.morphTargets.length;

		var name = "__default";

		var startFrame = 0;
		var endFrame = numFrames - 1;

		var fps = numFrames / 1;

		this.createAnimation( name, startFrame, endFrame, fps );
		this.setAnimationWeight( name, 1 );

	}

	MorphBlendMesh.prototype = Object.create( Mesh.prototype );
	MorphBlendMesh.prototype.constructor = MorphBlendMesh;

	MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

		var animation = {

			start: start,
			end: end,

			length: end - start + 1,

			fps: fps,
			duration: ( end - start ) / fps,

			lastFrame: 0,
			currentFrame: 0,

			active: false,

			time: 0,
			direction: 1,
			weight: 1,

			directionBackwards: false,
			mirroredLoop: false

		};

		this.animationsMap[ name ] = animation;
		this.animationsList.push( animation );

	};

	MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

		var pattern = /([a-z]+)_?(\d+)/i;

		var firstAnimation, frameRanges = {};

		var geometry = this.geometry;

		for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

			var morph = geometry.morphTargets[ i ];
			var chunks = morph.name.match( pattern );

			if ( chunks && chunks.length > 1 ) {

				var name = chunks[ 1 ];

				if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

				var range = frameRanges[ name ];

				if ( i < range.start ) range.start = i;
				if ( i > range.end ) range.end = i;

				if ( ! firstAnimation ) firstAnimation = name;

			}

		}

		for ( var name in frameRanges ) {

			var range = frameRanges[ name ];
			this.createAnimation( name, range.start, range.end, fps );

		}

		this.firstAnimation = firstAnimation;

	};

	MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = 1;
			animation.directionBackwards = false;

		}

	};

	MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = - 1;
			animation.directionBackwards = true;

		}

	};

	MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.fps = fps;
			animation.duration = ( animation.end - animation.start ) / animation.fps;

		}

	};

	MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.duration = duration;
			animation.fps = ( animation.end - animation.start ) / animation.duration;

		}

	};

	MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.weight = weight;

		}

	};

	MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = time;

		}

	};

	MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

		var time = 0;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			time = animation.time;

		}

		return time;

	};

	MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

		var duration = - 1;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			duration = animation.duration;

		}

		return duration;

	};

	MorphBlendMesh.prototype.playAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = 0;
			animation.active = true;

		} else {

			console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );

		}

	};

	MorphBlendMesh.prototype.stopAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.active = false;

		}

	};

	MorphBlendMesh.prototype.update = function ( delta ) {

		for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

			var animation = this.animationsList[ i ];

			if ( ! animation.active ) continue;

			var frameTime = animation.duration / animation.length;

			animation.time += animation.direction * delta;

			if ( animation.mirroredLoop ) {

				if ( animation.time > animation.duration || animation.time < 0 ) {

					animation.direction *= - 1;

					if ( animation.time > animation.duration ) {

						animation.time = animation.duration;
						animation.directionBackwards = true;

					}

					if ( animation.time < 0 ) {

						animation.time = 0;
						animation.directionBackwards = false;

					}

				}

			} else {

				animation.time = animation.time % animation.duration;

				if ( animation.time < 0 ) animation.time += animation.duration;

			}

			var keyframe = animation.start + _Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
			var weight = animation.weight;

			if ( keyframe !== animation.currentFrame ) {

				this.morphTargetInfluences[ animation.lastFrame ] = 0;
				this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

				this.morphTargetInfluences[ keyframe ] = 0;

				animation.lastFrame = animation.currentFrame;
				animation.currentFrame = keyframe;

			}

			var mix = ( animation.time % frameTime ) / frameTime;

			if ( animation.directionBackwards ) mix = 1 - mix;

			if ( animation.currentFrame !== animation.lastFrame ) {

				this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
				this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

			} else {

				this.morphTargetInfluences[ animation.currentFrame ] = weight;

			}

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function ImmediateRenderObject( material ) {

		Object3D.call( this );

		this.material = material;
		this.render = function ( renderCallback ) {};

	}

	ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
	ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

	ImmediateRenderObject.prototype.isImmediateRenderObject = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function VertexNormalsHelper( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( (objGeometry && objGeometry.isGeometry) ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {

			nNormals = objGeometry.attributes.normal.count;

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	}

	VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
	VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

	VertexNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			var keys = [ 'a', 'b', 'c' ];

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			if ( (objGeometry && objGeometry.isGeometry) ) {

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						var vertex = vertices[ face[ keys[ j ] ] ];

						var normal = face.vertexNormals[ j ];

						v1.copy( vertex ).applyMatrix4( matrixWorld );

						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

			} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {

				var objPos = objGeometry.attributes.position;

				var objNorm = objGeometry.attributes.normal;

				var idx = 0;

				// for simplicity, ignore index and drawcalls, and render every normal

				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

			position.needsUpdate = true;

			return this;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function SpotLightHelper( light ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		var geometry = new BufferGeometry();

		var positions = [
			0, 0, 0,   0,   0,   1,
			0, 0, 0,   1,   0,   1,
			0, 0, 0, - 1,   0,   1,
			0, 0, 0,   0,   1,   1,
			0, 0, 0,   0, - 1,   1
		];

		for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

			var p1 = ( i / l ) * Math.PI * 2;
			var p2 = ( j / l ) * Math.PI * 2;

			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);

		}

		geometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.cone = new LineSegments( geometry, material );
		this.add( this.cone );

		this.update();

	}

	SpotLightHelper.prototype = Object.create( Object3D.prototype );
	SpotLightHelper.prototype.constructor = SpotLightHelper;

	SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	SpotLightHelper.prototype.update = function () {

		var vector = new Vector3();
		var vector2 = new Vector3();

		return function update() {

			var coneLength = this.light.distance ? this.light.distance : 1000;
			var coneWidth = coneLength * Math.tan( this.light.angle );

			this.cone.scale.set( coneWidth, coneWidth, coneLength );

			vector.setFromMatrixPosition( this.light.matrixWorld );
			vector2.setFromMatrixPosition( this.light.target.matrixWorld );

			this.cone.lookAt( vector2.sub( vector ) );

			this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		};

	}();

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 */

	function SkeletonHelper( object ) {

		this.bones = this.getBoneList( object );

		var geometry = new Geometry();

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( (bone.parent && bone.parent.isBone) ) {

				geometry.vertices.push( new Vector3() );
				geometry.vertices.push( new Vector3() );
				geometry.colors.push( new Color( 0, 0, 1 ) );
				geometry.colors.push( new Color( 0, 1, 0 ) );

			}

		}

		geometry.dynamic = true;

		var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		LineSegments.call( this, geometry, material );

		this.root = object;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();

	}


	SkeletonHelper.prototype = Object.create( LineSegments.prototype );
	SkeletonHelper.prototype.constructor = SkeletonHelper;

	SkeletonHelper.prototype.getBoneList = function( object ) {

		var boneList = [];

		if ( (object && object.isBone) ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );

		}

		return boneList;

	};

	SkeletonHelper.prototype.update = function () {

		var geometry = this.geometry;

		var matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );

		var boneMatrix = new Matrix4();

		var j = 0;

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( (bone.parent && bone.parent.isBone) ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );

				j += 2;

			}

		}

		geometry.verticesNeedUpdate = true;

		geometry.computeBoundingSphere();

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PointLightHelper( light, sphereSize ) {

		this.light = light;
		this.light.updateMatrixWorld();

		var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
		var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	}

	PointLightHelper.prototype = Object.create( Mesh.prototype );
	PointLightHelper.prototype.constructor = PointLightHelper;

	PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	PointLightHelper.prototype.update = function () {

		this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function HemisphereLightHelper( light, sphereSize ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.colors = [ new Color(), new Color() ];

		var geometry = new SphereGeometry( sphereSize, 4, 2 );
		geometry.rotateX( - Math.PI / 2 );

		for ( var i = 0, il = 8; i < il; i ++ ) {

			geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

		}

		var material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );

		this.lightSphere = new Mesh( geometry, material );
		this.add( this.lightSphere );

		this.update();

	}

	HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
	HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

	HemisphereLightHelper.prototype.dispose = function () {

		this.lightSphere.geometry.dispose();
		this.lightSphere.material.dispose();

	};

	HemisphereLightHelper.prototype.update = function () {

		var vector = new Vector3();

		return function update() {

			this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
			this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

			this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
			this.lightSphere.geometry.colorsNeedUpdate = true;

		};

	}();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function GridHelper( size, divisions, color1, color2 ) {

		divisions = divisions || 1;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var center = divisions / 2;
		var step = ( size * 2 ) / divisions;
		var vertices = [], colors = [];

		for ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {

			vertices.push( - size, 0, k, size, 0, k );
			vertices.push( k, 0, - size, k, 0, size );

			var color = i === center ? color1 : color2;

			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;

		}

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	GridHelper.prototype = Object.create( LineSegments.prototype );
	GridHelper.prototype.constructor = GridHelper;

	GridHelper.prototype.setColors = function () {

		console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function FaceNormalsHelper( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( (objGeometry && objGeometry.isGeometry) ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	}

	FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
	FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

	FaceNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var normal = face.normal;

				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );

				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

			position.needsUpdate = true;

			return this;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function DirectionalLightHelper( light, size ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		if ( size === undefined ) size = 1;

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32Attribute( [
			- size,   size, 0,
			  size,   size, 0,
			  size, - size, 0,
			- size, - size, 0,
			- size,   size, 0
		], 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.add( new Line( geometry, material ) );

		geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

		this.add( new Line( geometry, material ));

		this.update();

	}

	DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
	DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

	DirectionalLightHelper.prototype.dispose = function () {

		var lightPlane = this.children[ 0 ];
		var targetLine = this.children[ 1 ];

		lightPlane.geometry.dispose();
		lightPlane.material.dispose();
		targetLine.geometry.dispose();
		targetLine.material.dispose();

	};

	DirectionalLightHelper.prototype.update = function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var v3 = new Vector3();

		return function update() {

			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );

			var lightPlane = this.children[ 0 ];
			var targetLine = this.children[ 1 ];

			lightPlane.lookAt( v3 );
			lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			targetLine.lookAt( v3 );
			targetLine.scale.z = v3.length();

		};

	}();

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	function CameraHelper( camera ) {

		var geometry = new Geometry();
		var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

		var pointMap = {};

		// colors

		var hexFrustum = 0xffaa00;
		var hexCone = 0xff0000;
		var hexUp = 0x00aaff;
		var hexTarget = 0xffffff;
		var hexCross = 0x333333;

		// near

		addLine( "n1", "n2", hexFrustum );
		addLine( "n2", "n4", hexFrustum );
		addLine( "n4", "n3", hexFrustum );
		addLine( "n3", "n1", hexFrustum );

		// far

		addLine( "f1", "f2", hexFrustum );
		addLine( "f2", "f4", hexFrustum );
		addLine( "f4", "f3", hexFrustum );
		addLine( "f3", "f1", hexFrustum );

		// sides

		addLine( "n1", "f1", hexFrustum );
		addLine( "n2", "f2", hexFrustum );
		addLine( "n3", "f3", hexFrustum );
		addLine( "n4", "f4", hexFrustum );

		// cone

		addLine( "p", "n1", hexCone );
		addLine( "p", "n2", hexCone );
		addLine( "p", "n3", hexCone );
		addLine( "p", "n4", hexCone );

		// up

		addLine( "u1", "u2", hexUp );
		addLine( "u2", "u3", hexUp );
		addLine( "u3", "u1", hexUp );

		// target

		addLine( "c", "t", hexTarget );
		addLine( "p", "c", hexCross );

		// cross

		addLine( "cn1", "cn2", hexCross );
		addLine( "cn3", "cn4", hexCross );

		addLine( "cf1", "cf2", hexCross );
		addLine( "cf3", "cf4", hexCross );

		function addLine( a, b, hex ) {

			addPoint( a, hex );
			addPoint( b, hex );

		}

		function addPoint( id, hex ) {

			geometry.vertices.push( new Vector3() );
			geometry.colors.push( new Color( hex ) );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( geometry.vertices.length - 1 );

		}

		LineSegments.call( this, geometry, material );

		this.camera = camera;
		if( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	}

	CameraHelper.prototype = Object.create( LineSegments.prototype );
	CameraHelper.prototype.constructor = CameraHelper;

	CameraHelper.prototype.update = function () {

		var geometry, pointMap;

		var vector = new Vector3();
		var camera = new Camera();

		function setPoint( point, x, y, z ) {

			vector.set( x, y, z ).unproject( camera );

			var points = pointMap[ point ];

			if ( points !== undefined ) {

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					geometry.vertices[ points[ i ] ].copy( vector );

				}

			}

		}

		return function update() {

			geometry = this.geometry;
			pointMap = this.pointMap;

			var w = 1, h = 1;

			// we need just camera projection matrix
			// world matrix must be identity

			camera.projectionMatrix.copy( this.camera.projectionMatrix );

			// center / target

			setPoint( "c", 0, 0, - 1 );
			setPoint( "t", 0, 0,  1 );

			// near

			setPoint( "n1", - w, - h, - 1 );
			setPoint( "n2",   w, - h, - 1 );
			setPoint( "n3", - w,   h, - 1 );
			setPoint( "n4",   w,   h, - 1 );

			// far

			setPoint( "f1", - w, - h, 1 );
			setPoint( "f2",   w, - h, 1 );
			setPoint( "f3", - w,   h, 1 );
			setPoint( "f4",   w,   h, 1 );

			// up

			setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
			setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
			setPoint( "u3",         0, h * 2,   - 1 );

			// cross

			setPoint( "cf1", - w,   0, 1 );
			setPoint( "cf2",   w,   0, 1 );
			setPoint( "cf3",   0, - h, 1 );
			setPoint( "cf4",   0,   h, 1 );

			setPoint( "cn1", - w,   0, - 1 );
			setPoint( "cn2",   w,   0, - 1 );
			setPoint( "cn3",   0, - h, - 1 );
			setPoint( "cn4",   0,   h, - 1 );

			geometry.verticesNeedUpdate = true;

		};

	}();

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	// a helper to show the world-axis-aligned bounding box for an object

	function BoundingBoxHelper( object, hex ) {

		var color = ( hex !== undefined ) ? hex : 0x888888;

		this.object = object;

		this.box = new Box3();

		Mesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );

	}

	BoundingBoxHelper.prototype = Object.create( Mesh.prototype );
	BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;

	BoundingBoxHelper.prototype.update = function () {

		this.box.setFromObject( this.object );

		this.box.getSize( this.scale );

		this.box.getCenter( this.position );

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BoxHelper( object, color ) {

		if ( color === undefined ) color = 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		if ( object !== undefined ) {

			this.update( object );

		}

	}

	BoxHelper.prototype = Object.create( LineSegments.prototype );
	BoxHelper.prototype.constructor = BoxHelper;

	BoxHelper.prototype.update = ( function () {

		var box = new Box3();

		return function update( object ) {

			if ( (object && object.isBox3) ) {

				box.copy( object );

			} else {

				box.setFromObject( object );

			}

			if ( box.isEmpty() ) return;

			var min = box.min;
			var max = box.max;

			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/

			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			var position = this.geometry.attributes.position;
			var array = position.array;

			array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
			array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
			array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
			array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

			position.needsUpdate = true;

			this.geometry.computeBoundingSphere();

		};

	} )();

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	var lineGeometry = new BufferGeometry();
	lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

	var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
	coneGeometry.translate( 0, - 0.5, 0 );

	function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

		// dir is assumed to be normalized

		Object3D.call( this );

		if ( color === undefined ) color = 0xffff00;
		if ( length === undefined ) length = 1;
		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.position.copy( origin );

		this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );

		this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );

		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );

	}

	ArrowHelper.prototype = Object.create( Object3D.prototype );
	ArrowHelper.prototype.constructor = ArrowHelper;

	ArrowHelper.prototype.setDirection = ( function () {

		var axis = new Vector3();
		var radians;

		return function setDirection( dir ) {

			// dir is assumed to be normalized

			if ( dir.y > 0.99999 ) {

				this.quaternion.set( 0, 0, 0, 1 );

			} else if ( dir.y < - 0.99999 ) {

				this.quaternion.set( 1, 0, 0, 0 );

			} else {

				axis.set( dir.z, 0, - dir.x ).normalize();

				radians = Math.acos( dir.y );

				this.quaternion.setFromAxisAngle( axis, radians );

			}

		};

	}() );

	ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.copy( color );
		this.cone.material.color.copy( color );

	};

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AxisHelper( size ) {

		size = size || 1;

		var vertices = new Float32Array( [
			0, 0, 0,  size, 0, 0,
			0, 0, 0,  0, size, 0,
			0, 0, 0,  0, 0, size
		] );

		var colors = new Float32Array( [
			1, 0, 0,  1, 0.6, 0,
			0, 1, 0,  0.6, 1, 0,
			0, 0, 1,  0, 0.6, 1
		] );

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	AxisHelper.prototype = Object.create( LineSegments.prototype );
	AxisHelper.prototype.constructor = AxisHelper;

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */

	var CatmullRomCurve3 = ( function() {

		var
			tmp = new Vector3(),
			px = new CubicPoly(),
			py = new CubicPoly(),
			pz = new CubicPoly();

		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM

		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/

		function CubicPoly() {}

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {

			this.c0 = x0;
			this.c1 = t0;
			this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			this.c3 = 2 * x0 - 2 * x1 + t0 + t1;

		};

		CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			// initCubicPoly
			this.init( x1, x2, t1, t2 );

		};

		// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
		CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {

			this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		};

		CubicPoly.prototype.calc = function( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;

		};

		// Subclass Three.js curve
		return Curve.create(

			function ( p /* array of Vector3 */ ) {

				this.points = p || [];
				this.closed = false;

			},

			function ( t ) {

				var points = this.points,
					point, intPoint, weight, l;

				l = points.length;

				if ( l < 2 ) console.log( 'duh, you need at least 2 points' );

				point = ( l - ( this.closed ? 0 : 1 ) ) * t;
				intPoint = Math.floor( point );
				weight = point - intPoint;

				if ( this.closed ) {

					intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

				} else if ( weight === 0 && intPoint === l - 1 ) {

					intPoint = l - 2;
					weight = 1;

				}

				var p0, p1, p2, p3; // 4 points

				if ( this.closed || intPoint > 0 ) {

					p0 = points[ ( intPoint - 1 ) % l ];

				} else {

					// extrapolate first point
					tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
					p0 = tmp;

				}

				p1 = points[ intPoint % l ];
				p2 = points[ ( intPoint + 1 ) % l ];

				if ( this.closed || intPoint + 2 < l ) {

					p3 = points[ ( intPoint + 2 ) % l ];

				} else {

					// extrapolate last point
					tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
					p3 = tmp;

				}

				if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

					// init Centripetal / Chordal Catmull-Rom
					var pow = this.type === 'chordal' ? 0.5 : 0.25;
					var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
					var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
					var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

					// safety check for repeated points
					if ( dt1 < 1e-4 ) dt1 = 1.0;
					if ( dt0 < 1e-4 ) dt0 = dt1;
					if ( dt2 < 1e-4 ) dt2 = dt1;

					px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
					py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
					pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

				} else if ( this.type === 'catmullrom' ) {

					var tension = this.tension !== undefined ? this.tension : 0.5;
					px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
					py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
					pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

				}

				var v = new Vector3(
					px.calc( weight ),
					py.calc( weight ),
					pz.calc( weight )
				);

				return v;

			}

		);

	} )();

	/**************************************************************
	 *	Closed Spline 3D curve
	 **************************************************************/


	function ClosedSplineCurve3( points ) {

		console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
		this.closed = true;

	}

	ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

	/**************************************************************
	 *	Spline 3D curve
	 **************************************************************/


	var SplineCurve3 = Curve.create(

		function ( points /* array of Vector3 */ ) {

			console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
			this.points = ( points === undefined ) ? [] : points;

		},

		function ( t ) {

			var points = this.points;
			var point = ( points.length - 1 ) * t;

			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

			var interpolate = CurveUtils.interpolate;

			return new Vector3(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
				interpolate( point0.z, point1.z, point2.z, point3.z, weight )
			);

		}

	);

	/**************************************************************
	 *	Cubic Bezier 3D curve
	 **************************************************************/

	var CubicBezierCurve3 = Curve.create(

		function ( v0, v1, v2, v3 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;

		},

		function ( t ) {

			var b3 = ShapeUtils.b3;

			return new Vector3(
				b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
				b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
			);

		}

	);

	/**************************************************************
	 *	Quadratic Bezier 3D curve
	 **************************************************************/

	var QuadraticBezierCurve3 = Curve.create(

		function ( v0, v1, v2 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			var b2 = ShapeUtils.b2;

			return new Vector3(
				b2( t, this.v0.x, this.v1.x, this.v2.x ),
				b2( t, this.v0.y, this.v1.y, this.v2.y ),
				b2( t, this.v0.z, this.v1.z, this.v2.z )
			);

		}

	);

	/**************************************************************
	 *	Line3D
	 **************************************************************/

	var LineCurve3 = Curve.create(

		function ( v1, v2 ) {

			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			if ( t === 1 ) {

				return this.v2.clone();

			}

			var vector = new Vector3();

			vector.subVectors( this.v2, this.v1 ); // diff
			vector.multiplyScalar( t );
			vector.add( this.v1 );

			return vector;

		}

	);

	/**************************************************************
	 *	Arc curve
	 **************************************************************/

	function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	}

	ArcCurve.prototype = Object.create( EllipseCurve.prototype );
	ArcCurve.prototype.constructor = ArcCurve;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	var SceneUtils = {

		createMultiMaterialObject: function ( geometry, materials ) {

			var group = new Group();

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				group.add( new Mesh( geometry, materials[ i ] ) );

			}

			return group;

		},

		detach: function ( child, parent, scene ) {

			child.applyMatrix( parent.matrixWorld );
			parent.remove( child );
			scene.add( child );

		},

		attach: function ( child, scene, parent ) {

			var matrixWorldInverse = new Matrix4();
			matrixWorldInverse.getInverse( parent.matrixWorld );
			child.applyMatrix( matrixWorldInverse );

			scene.remove( child );
			parent.add( child );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Face4 ( a, b, c, d, normal, color, materialIndex ) {
		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new Face3( a, b, c, normal, color, materialIndex );
	}

	var LineStrip = 0;

	var LinePieces = 1;

	function PointCloud ( geometry, material ) {
		console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
		return new Points( geometry, material );
	}

	function ParticleSystem ( geometry, material ) {
		console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
		return new Points( geometry, material );
	}

	function PointCloudMaterial ( parameters ) {
		console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}

	function ParticleBasicMaterial ( parameters ) {
		console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}

	function ParticleSystemMaterial ( parameters ) {
		console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}

	function Vertex ( x, y, z ) {
		console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
		return new Vector3( x, y, z );
	}

	//

	function EdgesHelper( object, hex ) {
		console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
		return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	}

	function WireframeHelper( object, hex ) {
		console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
		return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	}

	//

	Object.assign( Box2.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		},
		empty: function () {
			console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		size: function ( optionalTarget ) {
			console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );
		}
	} );

	Object.assign( Box3.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		},
		empty: function () {
			console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		},
		size: function ( optionalTarget ) {
			console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );
		}
	} );

	Object.assign( Line3.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		}
	} );

	Object.assign( Matrix3.prototype, {
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );
		},
		multiplyVector3Array: function ( a ) {
			console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
		}
	} );

	Object.assign( Matrix4.prototype, {
		extractPosition: function ( m ) {
			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );
		},
		setRotationFromQuaternion: function ( q ) {
			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
			return this.makeRotationFromQuaternion( q );
		},
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
			return vector.applyProjection( this );
		},
		multiplyVector4: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		multiplyVector3Array: function ( a ) {
			console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
		},
		rotateAxis: function ( v ) {
			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
			v.transformDirection( this );
		},
		crossVector: function ( vector ) {
			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		translate: function ( v ) {
			console.error( 'THREE.Matrix4: .translate() has been removed.' );
		},
		rotateX: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
		},
		rotateY: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
		},
		rotateZ: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
		},
		rotateByAxis: function ( axis, angle ) {
			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
		}
	} );

	Object.assign( Plane.prototype, {
		isIntersectionLine: function ( line ) {
			console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
			return this.intersectsLine( line );
		}
	} );

	Object.assign( Quaternion.prototype, {
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
			return vector.applyQuaternion( this );
		}
	} );

	Object.assign( Ray.prototype, {
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionPlane: function ( plane ) {
			console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
			return this.intersectsPlane( plane );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		}
	} );

	Object.assign( Shape.prototype, {
		extrude: function ( options ) {
			console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
			return new ExtrudeGeometry( this, options );
		},
		makeGeometry: function ( options ) {
			console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
			return new ShapeGeometry( this, options );
		}
	} );

	Object.assign( Vector3.prototype, {
		setEulerFromRotationMatrix: function () {
			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
		},
		setEulerFromQuaternion: function () {
			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
		},
		getPositionFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
			return this.setFromMatrixPosition( m );
		},
		getScaleFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
			return this.setFromMatrixScale( m );
		},
		getColumnFromMatrix: function ( index, matrix ) {
			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
			return this.setFromMatrixColumn( matrix, index );
		}
	} );

	//

	Object.assign( Object3D.prototype, {
		getChildByName: function ( name ) {
			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );
		},
		renderDepth: function ( value ) {
			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
		},
		translate: function ( distance, axis ) {
			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );
		}
	} );

	Object.defineProperties( Object3D.prototype, {
		eulerOrder: {
			get: function () {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;
			}
		},
		useQuaternion: {
			get: function () {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			}
		}
	} );

	Object.defineProperties( LOD.prototype, {
		objects: {
			get: function () {
				console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
				return this.levels;
			}
		}
	} );

	//

	PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

		console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
				"Use .setFocalLength and .filmGauge for a photographic setup." );

		if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
		this.setFocalLength( focalLength );

	};

	//

	Object.defineProperties( Light.prototype, {
		onlyShadow: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .onlyShadow has been removed.' );
			}
		},
		shadowCameraFov: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
			}
		},
		shadowBias: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
			}
		},
		shadowMapWidth: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;
			}
		}
	} );

	//

	Object.defineProperties( BufferAttribute.prototype, {
		length: {
			get: function () {
				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
				return this.array.length;
			}
		}
	} );

	Object.assign( BufferGeometry.prototype, {
		addIndex: function ( index ) {
			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );
		},
		addDrawCall: function ( start, count, indexOffset ) {
			if ( indexOffset !== undefined ) {
				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
			}
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );
		},
		clearDrawCalls: function () {
			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();
		},
		computeTangents: function () {
			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
		},
		computeOffsets: function () {
			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
		}
	} );

	Object.defineProperties( BufferGeometry.prototype, {
		drawcalls: {
			get: function () {
				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;
			}
		},
		offsets: {
			get: function () {
				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;
			}
		}
	} );

	//

	Object.defineProperties( Material.prototype, {
		wrapAround: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			}
		},
		wrapRGB: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
				return new Color();
			}
		}
	} );

	Object.defineProperties( MeshPhongMaterial.prototype, {
		metal: {
			get: function () {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;
			},
			set: function ( value ) {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
			}
		}
	} );

	Object.defineProperties( ShaderMaterial.prototype, {
		derivatives: {
			get: function () {
				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;
			},
			set: function ( value ) {
				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;
			}
		}
	} );

	//

	EventDispatcher.prototype = Object.assign( Object.create( {

		// Note: Extra base ensures these properties are not 'assign'ed.

		constructor: EventDispatcher,

		apply: function ( target ) {

			console.warn( "THREE.EventDispatcher: .apply is deprecated, " +
					"just inherit or Object.assign the prototype to mix-in." );

			Object.assign( target, this );

		}

	} ), EventDispatcher.prototype );

	//

	Object.defineProperties( Uniform.prototype, {
		dynamic: {
			set: function ( value ) {
				console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );
			}
		},
		onUpdate: {
			value: function () {
				console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
				return this;
			}
		}
	} );

	//

	Object.assign( WebGLRenderer.prototype, {
		supportsFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return this.extensions.get( 'OES_texture_float' );
		},
		supportsHalfFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return this.extensions.get( 'OES_texture_half_float' );
		},
		supportsStandardDerivatives: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return this.extensions.get( 'OES_standard_derivatives' );
		},
		supportsCompressedTextureS3TC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
		},
		supportsCompressedTexturePVRTC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
		},
		supportsBlendMinMax: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return this.extensions.get( 'EXT_blend_minmax' );
		},
		supportsVertexTextures: function () {
			return this.capabilities.vertexTextures;
		},
		supportsInstancedArrays: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return this.extensions.get( 'ANGLE_instanced_arrays' );
		},
		enableScissorTest: function ( boolean ) {
			console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
			this.setScissorTest( boolean );
		},
		initMaterial: function () {
			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
		},
		addPrePlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
		},
		addPostPlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
		},
		updateShadowMap: function () {
			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
		}
	} );

	Object.defineProperties( WebGLRenderer.prototype, {
		shadowMapEnabled: {
			get: function () {
				return this.shadowMap.enabled;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;
			}
		},
		shadowMapType: {
			get: function () {
				return this.shadowMap.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;
			}
		},
		shadowMapCullFace: {
			get: function () {
				return this.shadowMap.cullFace;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
				this.shadowMap.cullFace = value;
			}
		}
	} );

	Object.defineProperties( WebGLShadowMap.prototype, {
		cullFace: {
			get: function () {
				return this.renderReverseSided ? CullFaceFront : CullFaceBack;
			},
			set: function ( cullFace ) {
				var value = ( cullFace !== CullFaceBack );
				console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
				this.renderReverseSided = value;
			}
		}
	} );

	//

	Object.defineProperties( WebGLRenderTarget.prototype, {
		wrapS: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;
			}
		},
		wrapT: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;
			}
		},
		magFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;
			}
		},
		minFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;
			}
		},
		anisotropy: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;
			}
		},
		offset: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;
			}
		},
		repeat: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;
			}
		},
		format: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;
			}
		},
		type: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;
			}
		},
		generateMipmaps: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;
			}
		}
	} );

	//

	Object.assign( Audio.prototype, {
		load: function ( file ) {
			console.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );
			var scope = this;
			var audioLoader = new AudioLoader();
			audioLoader.load( file, function ( buffer ) {
				scope.setBuffer( buffer );
			} );
			return this;
		}
	} );

	Object.assign( AudioAnalyser.prototype, {
		getData: function ( file ) {
			console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
			return this.getFrequencyData();
		}
	} );

	//

	var GeometryUtils = {

		merge: function ( geometry1, geometry2, materialIndexOffset ) {

			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

			var matrix;

			if ( geometry2.isMesh ) {

				geometry2.matrixAutoUpdate && geometry2.updateMatrix();

				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;

			}

			geometry1.merge( geometry2, matrix, materialIndexOffset );

		},

		center: function ( geometry ) {

			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();

		}

	};

	var ImageUtils = {

		crossOrigin: undefined,

		loadTexture: function ( url, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

			var loader = new TextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( url, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadTextureCube: function ( urls, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

			var loader = new CubeTextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( urls, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadCompressedTexture: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

		},

		loadCompressedTextureCube: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

		}

	};

	//

	function Projector () {

		console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

		this.projectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
			vector.project( camera );

		};

		this.unprojectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
			vector.unproject( camera );

		};

		this.pickingRay = function ( vector, camera ) {

			console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

		};

	}

	//

	function CanvasRenderer () {

		console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

		this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		this.clear = function () {};
		this.render = function () {};
		this.setClearColor = function () {};
		this.setSize = function () {};

	}

	exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	exports.WebGLRenderTarget = WebGLRenderTarget;
	exports.WebGLRenderer = WebGLRenderer;
	exports.ShaderLib = ShaderLib;
	exports.UniformsLib = UniformsLib;
	exports.UniformsUtils = UniformsUtils;
	exports.ShaderChunk = ShaderChunk;
	exports.FogExp2 = FogExp2;
	exports.Fog = Fog;
	exports.Scene = Scene;
	exports.LensFlare = LensFlare;
	exports.Sprite = Sprite;
	exports.LOD = LOD;
	exports.SkinnedMesh = SkinnedMesh;
	exports.Skeleton = Skeleton;
	exports.Bone = Bone;
	exports.Mesh = Mesh;
	exports.LineSegments = LineSegments;
	exports.Line = Line;
	exports.Points = Points;
	exports.Group = Group;
	exports.VideoTexture = VideoTexture;
	exports.DataTexture = DataTexture;
	exports.CompressedTexture = CompressedTexture;
	exports.CubeTexture = CubeTexture;
	exports.CanvasTexture = CanvasTexture;
	exports.DepthTexture = DepthTexture;
	exports.TextureIdCount = TextureIdCount;
	exports.Texture = Texture;
	exports.MaterialIdCount = MaterialIdCount;
	exports.CompressedTextureLoader = CompressedTextureLoader;
	exports.BinaryTextureLoader = BinaryTextureLoader;
	exports.DataTextureLoader = DataTextureLoader;
	exports.CubeTextureLoader = CubeTextureLoader;
	exports.TextureLoader = TextureLoader;
	exports.ObjectLoader = ObjectLoader;
	exports.MaterialLoader = MaterialLoader;
	exports.BufferGeometryLoader = BufferGeometryLoader;
	exports.DefaultLoadingManager = DefaultLoadingManager;
	exports.LoadingManager = LoadingManager;
	exports.JSONLoader = JSONLoader;
	exports.ImageLoader = ImageLoader;
	exports.FontLoader = FontLoader;
	exports.XHRLoader = XHRLoader;
	exports.Loader = Loader;
	exports.Cache = Cache;
	exports.AudioLoader = AudioLoader;
	exports.SpotLightShadow = SpotLightShadow;
	exports.SpotLight = SpotLight;
	exports.PointLight = PointLight;
	exports.HemisphereLight = HemisphereLight;
	exports.DirectionalLightShadow = DirectionalLightShadow;
	exports.DirectionalLight = DirectionalLight;
	exports.AmbientLight = AmbientLight;
	exports.LightShadow = LightShadow;
	exports.Light = Light;
	exports.StereoCamera = StereoCamera;
	exports.PerspectiveCamera = PerspectiveCamera;
	exports.OrthographicCamera = OrthographicCamera;
	exports.CubeCamera = CubeCamera;
	exports.Camera = Camera;
	exports.AudioListener = AudioListener;
	exports.PositionalAudio = PositionalAudio;
	exports.getAudioContext = getAudioContext;
	exports.AudioAnalyser = AudioAnalyser;
	exports.Audio = Audio;
	exports.VectorKeyframeTrack = VectorKeyframeTrack;
	exports.StringKeyframeTrack = StringKeyframeTrack;
	exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	exports.NumberKeyframeTrack = NumberKeyframeTrack;
	exports.ColorKeyframeTrack = ColorKeyframeTrack;
	exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	exports.PropertyMixer = PropertyMixer;
	exports.PropertyBinding = PropertyBinding;
	exports.KeyframeTrack = KeyframeTrack;
	exports.AnimationUtils = AnimationUtils;
	exports.AnimationObjectGroup = AnimationObjectGroup;
	exports.AnimationMixer = AnimationMixer;
	exports.AnimationClip = AnimationClip;
	exports.Uniform = Uniform;
	exports.InstancedBufferGeometry = InstancedBufferGeometry;
	exports.BufferGeometry = BufferGeometry;
	exports.GeometryIdCount = GeometryIdCount;
	exports.Geometry = Geometry;
	exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	exports.InterleavedBuffer = InterleavedBuffer;
	exports.InstancedBufferAttribute = InstancedBufferAttribute;
	exports.DynamicBufferAttribute = DynamicBufferAttribute;
	exports.Float64Attribute = Float64Attribute;
	exports.Float32Attribute = Float32Attribute;
	exports.Uint32Attribute = Uint32Attribute;
	exports.Int32Attribute = Int32Attribute;
	exports.Uint16Attribute = Uint16Attribute;
	exports.Int16Attribute = Int16Attribute;
	exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	exports.Uint8Attribute = Uint8Attribute;
	exports.Int8Attribute = Int8Attribute;
	exports.BufferAttribute = BufferAttribute;
	exports.Face3 = Face3;
	exports.Object3DIdCount = Object3DIdCount;
	exports.Object3D = Object3D;
	exports.Raycaster = Raycaster;
	exports.Layers = Layers;
	exports.EventDispatcher = EventDispatcher;
	exports.Clock = Clock;
	exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	exports.LinearInterpolant = LinearInterpolant;
	exports.DiscreteInterpolant = DiscreteInterpolant;
	exports.CubicInterpolant = CubicInterpolant;
	exports.Interpolant = Interpolant;
	exports.Triangle = Triangle;
	exports.Spline = Spline;
	exports.Math = _Math;
	exports.Spherical = Spherical;
	exports.Plane = Plane;
	exports.Frustum = Frustum;
	exports.Sphere = Sphere;
	exports.Ray = Ray;
	exports.Matrix4 = Matrix4;
	exports.Matrix3 = Matrix3;
	exports.Box3 = Box3;
	exports.Box2 = Box2;
	exports.Line3 = Line3;
	exports.Euler = Euler;
	exports.Vector4 = Vector4;
	exports.Vector3 = Vector3;
	exports.Vector2 = Vector2;
	exports.Quaternion = Quaternion;
	exports.ColorKeywords = ColorKeywords;
	exports.Color = Color;
	exports.MorphBlendMesh = MorphBlendMesh;
	exports.ImmediateRenderObject = ImmediateRenderObject;
	exports.VertexNormalsHelper = VertexNormalsHelper;
	exports.SpotLightHelper = SpotLightHelper;
	exports.SkeletonHelper = SkeletonHelper;
	exports.PointLightHelper = PointLightHelper;
	exports.HemisphereLightHelper = HemisphereLightHelper;
	exports.GridHelper = GridHelper;
	exports.FaceNormalsHelper = FaceNormalsHelper;
	exports.DirectionalLightHelper = DirectionalLightHelper;
	exports.CameraHelper = CameraHelper;
	exports.BoundingBoxHelper = BoundingBoxHelper;
	exports.BoxHelper = BoxHelper;
	exports.ArrowHelper = ArrowHelper;
	exports.AxisHelper = AxisHelper;
	exports.ClosedSplineCurve3 = ClosedSplineCurve3;
	exports.CatmullRomCurve3 = CatmullRomCurve3;
	exports.SplineCurve3 = SplineCurve3;
	exports.CubicBezierCurve3 = CubicBezierCurve3;
	exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
	exports.LineCurve3 = LineCurve3;
	exports.ArcCurve = ArcCurve;
	exports.EllipseCurve = EllipseCurve;
	exports.SplineCurve = SplineCurve;
	exports.CubicBezierCurve = CubicBezierCurve;
	exports.QuadraticBezierCurve = QuadraticBezierCurve;
	exports.LineCurve = LineCurve;
	exports.Shape = Shape;
	exports.ShapePath = ShapePath;
	exports.Path = Path;
	exports.Font = Font;
	exports.CurvePath = CurvePath;
	exports.Curve = Curve;
	exports.ShapeUtils = ShapeUtils;
	exports.SceneUtils = SceneUtils;
	exports.CurveUtils = CurveUtils;
	exports.WireframeGeometry = WireframeGeometry;
	exports.ParametricGeometry = ParametricGeometry;
	exports.ParametricBufferGeometry = ParametricBufferGeometry;
	exports.TetrahedronGeometry = TetrahedronGeometry;
	exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
	exports.OctahedronGeometry = OctahedronGeometry;
	exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
	exports.IcosahedronGeometry = IcosahedronGeometry;
	exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
	exports.DodecahedronGeometry = DodecahedronGeometry;
	exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
	exports.PolyhedronGeometry = PolyhedronGeometry;
	exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
	exports.TubeGeometry = TubeGeometry;
	exports.TubeBufferGeometry = TubeBufferGeometry;
	exports.TorusKnotGeometry = TorusKnotGeometry;
	exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
	exports.TorusGeometry = TorusGeometry;
	exports.TorusBufferGeometry = TorusBufferGeometry;
	exports.TextGeometry = TextGeometry;
	exports.SphereBufferGeometry = SphereBufferGeometry;
	exports.SphereGeometry = SphereGeometry;
	exports.RingGeometry = RingGeometry;
	exports.RingBufferGeometry = RingBufferGeometry;
	exports.PlaneBufferGeometry = PlaneBufferGeometry;
	exports.PlaneGeometry = PlaneGeometry;
	exports.LatheGeometry = LatheGeometry;
	exports.LatheBufferGeometry = LatheBufferGeometry;
	exports.ShapeGeometry = ShapeGeometry;
	exports.ExtrudeGeometry = ExtrudeGeometry;
	exports.EdgesGeometry = EdgesGeometry;
	exports.ConeGeometry = ConeGeometry;
	exports.ConeBufferGeometry = ConeBufferGeometry;
	exports.CylinderGeometry = CylinderGeometry;
	exports.CylinderBufferGeometry = CylinderBufferGeometry;
	exports.CircleBufferGeometry = CircleBufferGeometry;
	exports.CircleGeometry = CircleGeometry;
	exports.BoxBufferGeometry = BoxBufferGeometry;
	exports.BoxGeometry = BoxGeometry;
	exports.ShadowMaterial = ShadowMaterial;
	exports.SpriteMaterial = SpriteMaterial;
	exports.RawShaderMaterial = RawShaderMaterial;
	exports.ShaderMaterial = ShaderMaterial;
	exports.PointsMaterial = PointsMaterial;
	exports.MultiMaterial = MultiMaterial;
	exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	exports.MeshStandardMaterial = MeshStandardMaterial;
	exports.MeshPhongMaterial = MeshPhongMaterial;
	exports.MeshNormalMaterial = MeshNormalMaterial;
	exports.MeshLambertMaterial = MeshLambertMaterial;
	exports.MeshDepthMaterial = MeshDepthMaterial;
	exports.MeshBasicMaterial = MeshBasicMaterial;
	exports.LineDashedMaterial = LineDashedMaterial;
	exports.LineBasicMaterial = LineBasicMaterial;
	exports.Material = Material;
	exports.REVISION = REVISION;
	exports.MOUSE = MOUSE;
	exports.CullFaceNone = CullFaceNone;
	exports.CullFaceBack = CullFaceBack;
	exports.CullFaceFront = CullFaceFront;
	exports.CullFaceFrontBack = CullFaceFrontBack;
	exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
	exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
	exports.BasicShadowMap = BasicShadowMap;
	exports.PCFShadowMap = PCFShadowMap;
	exports.PCFSoftShadowMap = PCFSoftShadowMap;
	exports.FrontSide = FrontSide;
	exports.BackSide = BackSide;
	exports.DoubleSide = DoubleSide;
	exports.FlatShading = FlatShading;
	exports.SmoothShading = SmoothShading;
	exports.NoColors = NoColors;
	exports.FaceColors = FaceColors;
	exports.VertexColors = VertexColors;
	exports.NoBlending = NoBlending;
	exports.NormalBlending = NormalBlending;
	exports.AdditiveBlending = AdditiveBlending;
	exports.SubtractiveBlending = SubtractiveBlending;
	exports.MultiplyBlending = MultiplyBlending;
	exports.CustomBlending = CustomBlending;
	exports.BlendingMode = BlendingMode;
	exports.AddEquation = AddEquation;
	exports.SubtractEquation = SubtractEquation;
	exports.ReverseSubtractEquation = ReverseSubtractEquation;
	exports.MinEquation = MinEquation;
	exports.MaxEquation = MaxEquation;
	exports.ZeroFactor = ZeroFactor;
	exports.OneFactor = OneFactor;
	exports.SrcColorFactor = SrcColorFactor;
	exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	exports.SrcAlphaFactor = SrcAlphaFactor;
	exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	exports.DstAlphaFactor = DstAlphaFactor;
	exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	exports.DstColorFactor = DstColorFactor;
	exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	exports.NeverDepth = NeverDepth;
	exports.AlwaysDepth = AlwaysDepth;
	exports.LessDepth = LessDepth;
	exports.LessEqualDepth = LessEqualDepth;
	exports.EqualDepth = EqualDepth;
	exports.GreaterEqualDepth = GreaterEqualDepth;
	exports.GreaterDepth = GreaterDepth;
	exports.NotEqualDepth = NotEqualDepth;
	exports.MultiplyOperation = MultiplyOperation;
	exports.MixOperation = MixOperation;
	exports.AddOperation = AddOperation;
	exports.NoToneMapping = NoToneMapping;
	exports.LinearToneMapping = LinearToneMapping;
	exports.ReinhardToneMapping = ReinhardToneMapping;
	exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
	exports.CineonToneMapping = CineonToneMapping;
	exports.UVMapping = UVMapping;
	exports.CubeReflectionMapping = CubeReflectionMapping;
	exports.CubeRefractionMapping = CubeRefractionMapping;
	exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	exports.SphericalReflectionMapping = SphericalReflectionMapping;
	exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	exports.TextureMapping = TextureMapping;
	exports.RepeatWrapping = RepeatWrapping;
	exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	exports.TextureWrapping = TextureWrapping;
	exports.NearestFilter = NearestFilter;
	exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	exports.LinearFilter = LinearFilter;
	exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	exports.TextureFilter = TextureFilter;
	exports.UnsignedByteType = UnsignedByteType;
	exports.ByteType = ByteType;
	exports.ShortType = ShortType;
	exports.UnsignedShortType = UnsignedShortType;
	exports.IntType = IntType;
	exports.UnsignedIntType = UnsignedIntType;
	exports.FloatType = FloatType;
	exports.HalfFloatType = HalfFloatType;
	exports.UnsignedShort4444Type = UnsignedShort4444Type;
	exports.UnsignedShort5551Type = UnsignedShort5551Type;
	exports.UnsignedShort565Type = UnsignedShort565Type;
	exports.UnsignedInt248Type = UnsignedInt248Type;
	exports.AlphaFormat = AlphaFormat;
	exports.RGBFormat = RGBFormat;
	exports.RGBAFormat = RGBAFormat;
	exports.LuminanceFormat = LuminanceFormat;
	exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	exports.RGBEFormat = RGBEFormat;
	exports.DepthFormat = DepthFormat;
	exports.DepthStencilFormat = DepthStencilFormat;
	exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	exports.RGB_ETC1_Format = RGB_ETC1_Format;
	exports.LoopOnce = LoopOnce;
	exports.LoopRepeat = LoopRepeat;
	exports.LoopPingPong = LoopPingPong;
	exports.InterpolateDiscrete = InterpolateDiscrete;
	exports.InterpolateLinear = InterpolateLinear;
	exports.InterpolateSmooth = InterpolateSmooth;
	exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	exports.ZeroSlopeEnding = ZeroSlopeEnding;
	exports.WrapAroundEnding = WrapAroundEnding;
	exports.TrianglesDrawMode = TrianglesDrawMode;
	exports.TriangleStripDrawMode = TriangleStripDrawMode;
	exports.TriangleFanDrawMode = TriangleFanDrawMode;
	exports.LinearEncoding = LinearEncoding;
	exports.sRGBEncoding = sRGBEncoding;
	exports.GammaEncoding = GammaEncoding;
	exports.RGBEEncoding = RGBEEncoding;
	exports.LogLuvEncoding = LogLuvEncoding;
	exports.RGBM7Encoding = RGBM7Encoding;
	exports.RGBM16Encoding = RGBM16Encoding;
	exports.RGBDEncoding = RGBDEncoding;
	exports.BasicDepthPacking = BasicDepthPacking;
	exports.RGBADepthPacking = RGBADepthPacking;
	exports.CubeGeometry = BoxGeometry;
	exports.Face4 = Face4;
	exports.LineStrip = LineStrip;
	exports.LinePieces = LinePieces;
	exports.MeshFaceMaterial = MultiMaterial;
	exports.PointCloud = PointCloud;
	exports.Particle = Sprite;
	exports.ParticleSystem = ParticleSystem;
	exports.PointCloudMaterial = PointCloudMaterial;
	exports.ParticleBasicMaterial = ParticleBasicMaterial;
	exports.ParticleSystemMaterial = ParticleSystemMaterial;
	exports.Vertex = Vertex;
	exports.EdgesHelper = EdgesHelper;
	exports.WireframeHelper = WireframeHelper;
	exports.GeometryUtils = GeometryUtils;
	exports.ImageUtils = ImageUtils;
	exports.Projector = Projector;
	exports.CanvasRenderer = CanvasRenderer;

	Object.defineProperty(exports, '__esModule', { value: true });

	Object.defineProperty( exports, 'AudioContext', {
		get: function () {
			return exports.getAudioContext();
		}
	});

})));


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return extend; });
var extend = function extend(object) {
  for (var _len = arguments.length, extensions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    extensions[_key - 1] = arguments[_key];
  }

  // $.extend alternative, ... is the spread operator.
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = extensions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var extension = _step.value;

      // console.log(extension);
      // console.log(typeof extension);

      if (!extension) continue; // Ignore null and undefined objects and paramaters.

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Object.getOwnPropertyNames(extension)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var prop = _step2.value;
          // Do not traverse the prototype chain.
          if (object[prop] !== undefined && object[prop].toString() === '[object Object]' && extension[prop].toString() === '[object Object]') {

            // Goes deep only if object[prop] and extension[prop] are both objects !
            if (extension[prop].uuid) object[prop] = extension[prop];else extend(object[prop], extension[prop]);
          } else object[prop] = typeof object[prop] === 'undefined' ? extension[prop] : object[prop];
          if (typeof object[prop] === 'undefined') object[prop] = extension[prop]; // Add values that do not already exist.
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return object;
};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_three__);
/* unused harmony export MaterialLoader */
/* unused harmony export JSONLoader */
/* unused harmony export BufferGeometryLoader */
/* unused harmony export ObjectLoader */
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return TextureLoader; });
/* unused harmony export FontLoader */
/* unused harmony export XHRLoader */
/* unused harmony export AudioLoader */
/* unused harmony export ImageLoader */


// Models.
var JSONLoader = new __WEBPACK_IMPORTED_MODULE_0_three__["JSONLoader"]();
// const OBJLoader = new OBJLoaderNative();
// const BabylonLoader = new BabylonLoaderNative();
var BufferGeometryLoader = new __WEBPACK_IMPORTED_MODULE_0_three__["BufferGeometryLoader"]();
// const ColladaLoader = new ColladaLoaderNative();
// const glTFLoader = new glTFLoaderNative();
var ObjectLoader = new __WEBPACK_IMPORTED_MODULE_0_three__["ObjectLoader"]();
// const PDBLoader = new PDBLoaderNative();
// const SVGLoader = new SVGLoaderNative();
// const TGALoader = new TGALoaderNative();


// Other.
var TextureLoader = new __WEBPACK_IMPORTED_MODULE_0_three__["TextureLoader"]();
var FontLoader = new __WEBPACK_IMPORTED_MODULE_0_three__["FontLoader"]();
var XHRLoader = new __WEBPACK_IMPORTED_MODULE_0_three__["XHRLoader"]();
var AudioLoader = new __WEBPACK_IMPORTED_MODULE_0_three__["AudioLoader"]();
var ImageLoader = new __WEBPACK_IMPORTED_MODULE_0_three__["ImageLoader"]();
var MaterialLoader = new __WEBPACK_IMPORTED_MODULE_0_three__["MaterialLoader"]();
// const MTLLoader = new MTLLoaderNative();



/***/ },
/* 3 */
/***/ function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
// This is ammo.js, a port of Bullet Physics to JavaScript. zlib licensed.
var AmmoLib = function(AmmoLib) {
  AmmoLib = AmmoLib || {};

var Module;if(!Module)Module=(typeof AmmoLib!=="undefined"?AmmoLib:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;if(Module["ENVIRONMENT"]){if(Module["ENVIRONMENT"]==="WEB"){ENVIRONMENT_IS_WEB=true}else if(Module["ENVIRONMENT"]==="WORKER"){ENVIRONMENT_IS_WORKER=true}else if(Module["ENVIRONMENT"]==="NODE"){ENVIRONMENT_IS_NODE=true}else if(Module["ENVIRONMENT"]==="SHELL"){ENVIRONMENT_IS_SHELL=true}else{throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.")}}else{ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&"function"==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER}if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=console.log;if(!Module["printErr"])Module["printErr"]=console.warn;var nodeFS;var nodePath;Module["read"]=function read(filename,binary){if(!nodeFS)nodeFS=__webpack_require__(11);if(!nodePath)nodePath=__webpack_require__(13);filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);return binary?ret:ret.toString()};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};Module["load"]=function load(f){globalEval(read(f))};if(!Module["thisProgram"]){if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}else{Module["thisProgram"]="unknown-program"}}Module["arguments"]=process["argv"].slice(2);if(true){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function read(){throw"no read() available"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function printErr(x){console.warn(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module["load"]=importScripts}if(typeof Module["setWindowTitle"]==="undefined"){Module["setWindowTitle"]=(function(title){document.title=title})}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){abort("NO_DYNAMIC_EXECUTION=1 was set, cannot eval")}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type==="double"||type==="i64"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){return Module["dynCall_"+sig].apply(null,[ptr].concat(args))}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){if(sig.length===1){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func)}}else if(sig.length===2){sigCache[func]=function dynCall_wrapper(arg){return Runtime.dynCall(sig,func,[arg])}}else{sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,Array.prototype.slice.call(arguments))}}}return sigCache[func]}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=(ret+size+15|0)&-16;HEAP32[DYNAMICTOP_PTR>>2]=end;if(end>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){HEAP32[DYNAMICTOP_PTR>>2]=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];if(!func){abort("NO_DYNAMIC_EXECUTION=1 was set, cannot eval")}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var ccall;((function(){var JSfuncs={"stackSave":(function(){Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore()}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=Runtime.stackAlloc(len);stringToUTF8(str,ret,len)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};cwrap=function cwrap(ident,returnType,argTypes){return(function(){return ccall(ident,returnType,argTypes,arguments)})}}))();function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}var ALLOC_NORMAL=0;var ALLOC_STATIC=2;var ALLOC_NONE=4;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[typeof _malloc==="function"?_malloc:Runtime.staticAlloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module["UTF8ToString"](ptr)}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function demangle(func){var hasLibcxxabi=!!Module["___cxa_demangle"];if(hasLibcxxabi){try{var s=func.substr(1);var len=lengthBytesUTF8(s)+1;var buf=_malloc(len);stringToUTF8(s,buf,len);var status=_malloc(4);var ret=Module["___cxa_demangle"](buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}return func}Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return func}function demangleAll(text){return text.replace(/__Z[\w\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}var HEAP;var buffer;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function enlargeMemory(){abortOnCannotGrowMemory()}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||67108864;var WASM_PAGE_SIZE=64*1024;var totalMemory=WASM_PAGE_SIZE;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}if(totalMemory!==TOTAL_MEMORY){TOTAL_MEMORY=totalMemory}if(Module["buffer"]){buffer=Module["buffer"]}else{{buffer=new ArrayBuffer(TOTAL_MEMORY)}}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}HEAP32[0]=1668509029;HEAP16[1]=25459;if(HEAPU8[2]!==115||HEAPU8[3]!==99)throw"Runtime error: expected the system to be little-endian!";Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Runtime.dynCall("v",func)}else{Runtime.dynCall("vi",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPreMain(cb){__ATMAIN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];if(!Math["clz32"])Math["clz32"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math["clz32"];if(!Math["trunc"])Math["trunc"]=(function(x){return x<0?Math.ceil(x):Math.floor(x)});Math.trunc=Math["trunc"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var Math_clz32=Math.clz32;var Math_trunc=Math.trunc;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;Module["preloadedImages"]={};Module["preloadedAudios"]={};var ASM_CONSTS=[(function($0,$1,$2,$3,$4,$5,$6,$7){{var self=Module["getCache"](Module["ConcreteContactResultCallback"])[$0];if(!self.hasOwnProperty("addSingleResult"))throw"a JSImplementation must implement all functions, you forgot ConcreteContactResultCallback::addSingleResult.";return self["addSingleResult"]($1,$2,$3,$4,$5,$6,$7)}})];function _emscripten_asm_const_diiiiiiii(code,a0,a1,a2,a3,a4,a5,a6,a7){return ASM_CONSTS[code](a0,a1,a2,a3,a4,a5,a6,a7)}STATIC_BASE=8;STATICTOP=STATIC_BASE+25840;__ATINIT__.push({func:(function(){__GLOBAL__sub_I_btConeTwistConstraint_cpp()})});allocate([200,37,0,0,56,39,0,0,24,0,0,0,0,0,0,0,160,37,0,0,88,39,0,0,200,37,0,0,132,39,0,0,48,0,0,0,0,0,0,0,160,37,0,0,179,39,0,0,200,37,0,0,219,39,0,0,72,0,0,0,0,0,0,0,160,37,0,0,241,39,0,0,200,37,0,0,13,40,0,0,96,0,0,0,0,0,0,0,160,37,0,0,36,40,0,0,160,37,0,0,52,40,0,0,200,37,0,0,73,40,0,0,128,0,0,0,0,0,0,0,160,37,0,0,123,40,0,0,200,37,0,0,107,41,0,0,120,4,0,0,0,0,0,0,200,37,0,0,120,41,0,0,168,0,0,0,0,0,0,0,160,37,0,0,152,41,0,0,160,37,0,0,171,41,0,0,200,37,0,0,192,41,0,0,176,0,0,0,0,0,0,0,200,37,0,0,223,41,0,0,72,7,0,0,0,0,0,0,200,37,0,0,62,42,0,0,248,0,0,0,0,0,0,0,200,37,0,0,32,42,0,0,152,7,0,0,0,0,0,0,200,37,0,0,96,42,0,0,168,0,0,0,0,0,0,0,200,37,0,0,129,42,0,0,168,0,0,0,0,0,0,0,200,37,0,0,164,42,0,0,168,0,0,0,0,0,0,0,200,37,0,0,198,42,0,0,248,0,0,0,0,0,0,0,200,37,0,0,232,42,0,0,104,5,0,0,0,0,0,0,200,37,0,0,20,43,0,0,88,1,0,0,0,0,0,0,160,37,0,0,79,43,0,0,200,37,0,0,112,43,0,0,88,1,0,0,0,0,0,0,200,37,0,0,164,43,0,0,88,1,0,0,0,0,0,0,200,37,0,0,210,43,0,0,88,1,0,0,0,0,0,0,200,37,0,0,255,43,0,0,160,1,0,0,0,0,0,0,160,37,0,0,31,44,0,0,200,37,0,0,133,44,0,0,32,3,0,0,0,0,0,0,200,37,0,0,54,44,0,0,200,1,0,0,0,0,0,0,200,37,0,0,80,44,0,0,216,1,0,0,0,0,0,0,160,37,0,0,106,44,0,0,200,37,0,0,160,44,0,0,160,1,0,0,0,0,0,0,200,37,0,0,191,44,0,0,0,2,0,0,0,0,0,0,160,37,0,0,217,44,0,0,200,37,0,0,225,45,0,0,160,1,0,0,0,0,0,0,200,37,0,0,36,45,0,0,136,8,0,0,0,0,0,0,200,37,0,0,245,44,0,0,72,8,0,0,0,0,0,0,160,37,0,0,7,45,0,0,200,37,0,0,196,45,0,0,136,8,0,0,0,0,0,0,200,37,0,0,53,46,0,0,112,2,0,0,0,0,0,0,200,37,0,0,7,46,0,0,112,0,0,0,0,0,0,0,200,37,0,0,86,46,0,0,128,2,0,0,0,0,0,0,160,37,0,0,119,46,0,0,200,37,0,0,201,46,0,0,152,2,0,0,0,0,0,0,240,37,0,0,165,46,0,0,0,0,0,0,1,0,0,0,176,2,0,0,2,4,0,0,160,37,0,0,185,46,0,0,200,37,0,0,253,46,0,0,152,2,0,0,0,0,0,0,200,37,0,0,57,47,0,0,184,2,0,0,0,0,0,0,200,37,0,0,116,47,0,0,152,2,0,0,0,0,0,0,200,37,0,0,169,47,0,0,152,2,0,0,0,0,0,0,200,37,0,0,195,47,0,0,8,3,0,0,0,0,0,0,160,37,0,0,233,47,0,0,200,37,0,0,21,48,0,0,152,2,0,0,0,0,0,0,200,37,0,0,131,48,0,0,64,3,0,0,0,0,0,0,200,37,0,0,69,48,0,0,112,0,0,0,0,0,0,0,200,37,0,0,157,48,0,0,128,4,0,0,0,0,0,0,200,37,0,0,175,48,0,0,96,3,0,0,0,0,0,0,160,37,0,0,205,48,0,0,200,37,0,0,16,49,0,0,120,4,0,0,0,0,0,0,200,37,0,0,30,49,0,0,128,2,0,0,0,0,0,0,200,37,0,0,49,49,0,0,104,0,0,0,0,0,0,0,200,37,0,0,127,49,0,0,168,3,0,0,0,0,0,0,200,37,0,0,77,49,0,0,184,3,0,0,0,0,0,0,160,37,0,0,103,49,0,0,200,37,0,0,142,49,0,0,208,3,0,0,0,0,0,0,200,37,0,0,160,49,0,0,72,0,0,0,0,0,0,0,200,37,0,0,251,49,0,0,184,3,0,0,0,0,0,0,200,37,0,0,185,49,0,0,168,0,0,0,0,0,0,0,200,37,0,0,206,49,0,0,168,0,0,0,0,0,0,0,200,37,0,0,229,49,0,0,168,0,0,0,0,0,0,0,200,37,0,0,17,51,0,0,208,3,0,0,0,0,0,0,200,37,0,0,14,50,0,0,64,4,0,0,0,0,0,0,160,37,0,0,124,50,0,0,200,37,0,0,144,50,0,0,64,4,0,0,0,0,0,0,200,37,0,0,74,51,0,0,136,9,0,0,0,0,0,0,200,37,0,0,48,51,0,0,64,4,0,0,0,0,0,0,160,37,0,0,125,51,0,0,160,37,0,0,166,54,0,0,200,37,0,0,188,53,0,0,200,1,0,0,0,0,0,0,200,37,0,0,145,51,0,0,48,0,0,0,0,0,0,0,200,37,0,0,22,52,0,0,168,0,0,0,0,0,0,0,200,37,0,0,148,52,0,0,88,9,0,0,0,0,0,0,200,37,0,0,41,53,0,0,88,9,0,0,0,0,0,0,240,37,0,0,210,53,0,0,0,0,0,0,2,0,0,0,136,8,0,0,2,0,0,0,144,8,0,0,2,4,0,0,200,37,0,0,185,54,0,0,128,0,0,0,0,0,0,0,200,37,0,0,152,55,0,0,168,0,0,0,0,0,0,0,200,37,0,0,61,56,0,0,104,9,0,0,0,0,0,0,200,37,0,0,238,56,0,0,104,9,0,0,0,0,0,0,200,37,0,0,157,57,0,0,200,1,0,0,0,0,0,0,200,37,0,0,207,57,0,0,216,1,0,0,0,0,0,0,200,37,0,0,181,57,0,0,80,6,0,0,0,0,0,0,200,37,0,0,233,57,0,0,120,5,0,0,0,0,0,0,160,37,0,0,11,58,0,0,200,37,0,0,38,58,0,0,88,1,0,0,0,0,0,0,200,37,0,0,86,58,0,0,88,1,0,0,0,0,0,0,200,37,0,0,129,58,0,0,88,1,0,0,0,0,0,0,200,37,0,0,180,58,0,0,88,1,0,0,0,0,0,0,200,37,0,0,229,58,0,0,88,1,0,0,0,0,0,0,200,37,0,0,6,59,0,0,88,1,0,0,0,0,0,0,200,37,0,0,58,59,0,0,88,1,0,0,0,0,0,0,200,37,0,0,111,59,0,0,88,1,0,0,0,0,0,0,200,37,0,0,156,59,0,0,88,1,0,0,0,0,0,0,200,37,0,0,213,59,0,0,88,1,0,0,0,0,0,0,200,37,0,0,7,60,0,0,160,1,0,0,0,0,0,0,200,37,0,0,26,60,0,0,120,4,0,0,0,0,0,0,200,37,0,0,42,60,0,0,48,6,0,0,0,0,0,0,200,37,0,0,69,60,0,0,96,6,0,0,0,0,0,0,160,37,0,0,88,60,0,0,160,37,0,0,136,60,0,0,200,37,0,0,164,60,0,0,152,9,0,0,0,0,0,0,200,37,0,0,199,60,0,0,152,9,0,0,0,0,0,0,200,37,0,0,236,60,0,0,160,6,0,0,0,0,0,0,160,37,0,0,5,61,0,0,200,37,0,0,48,61,0,0,72,8,0,0,0,0,0,0,200,37,0,0,235,61,0,0,168,8,0,0,0,0,0,0,200,37,0,0,61,61,0,0,216,6,0,0,0,0,0,0,160,37,0,0,171,61,0,0,200,37,0,0,4,62,0,0,216,6,0,0,0,0,0,0,200,37,0,0,108,62,0,0,216,6,0,0,0,0,0,0,200,37,0,0,253,62,0,0,152,7,0,0,0,0,0,0,200,37,0,0,23,63,0,0,0,7,0,0,0,0,0,0,200,37,0,0,50,63,0,0,0,7,0,0,0,0,0,0,160,37,0,0,89,63,0,0,200,37,0,0,162,63,0,0,48,7,0,0,0,0,0,0,200,37,0,0,180,63,0,0,48,7,0,0,0,0,0,0,200,37,0,0,218,63,0,0,152,7,0,0,0,0,0,0,200,37,0,0,238,63,0,0,88,7,0,0,0,0,0,0,200,37,0,0,3,64,0,0,88,7,0,0,0,0,0,0,200,37,0,0,47,64,0,0,88,8,0,0,0,0,0,0,200,37,0,0,67,64,0,0,168,7,0,0,0,0,0,0,200,37,0,0,91,64,0,0,48,7,0,0,0,0,0,0,200,37,0,0,150,64,0,0,88,8,0,0,0,0,0,0,200,37,0,0,107,64,0,0,144,8,0,0,0,0,0,0,200,37,0,0,208,64,0,0,152,7,0,0,0,0,0,0,200,37,0,0,236,64,0,0,216,7,0,0,0,0,0,0,200,37,0,0,9,65,0,0,216,7,0,0,0,0,0,0,200,37,0,0,40,65,0,0,72,7,0,0,0,0,0,0,200,37,0,0,68,65,0,0,144,9,0,0,0,0,0,0,200,37,0,0,85,65,0,0,144,8,0,0,0,0,0,0,200,37,0,0,176,65,0,0,144,8,0,0,0,0,0,0,200,37,0,0,20,66,0,0,152,7,0,0,0,0,0,0,200,37,0,0,46,66,0,0,72,8,0,0,0,0,0,0,200,37,0,0,90,66,0,0,152,7,0,0,0,0,0,0,200,37,0,0,141,66,0,0,72,7,0,0,0,0,0,0,160,37,0,0,162,66,0,0,160,37,0,0,183,66,0,0,200,37,0,0,217,66,0,0,176,10,0,0,0,0,0,0,200,37,0,0,117,67,0,0,72,7,0,0,0,0,0,0,200,37,0,0,234,66,0,0,136,8,0,0,0,0,0,0,200,37,0,0,2,67,0,0,144,8,0,0,0,0,0,0,200,37,0,0,158,67,0,0,248,8,0,0,0,0,0,0,200,37,0,0,139,67,0,0,96,6,0,0,0,0,0,0,160,37,0,0,188,67,0,0,200,37,0,0,203,67,0,0,248,8,0,0,0,0,0,0,200,37,0,0,221,67,0,0,32,9,0,0,0,0,0,0,160,37,0,0,254,67,0,0,200,37,0,0,31,68,0,0,160,6,0,0,0,0,0,0,200,37,0,0,222,68,0,0,32,9,0,0,0,0,0,0,200,37,0,0,51,68,0,0,96,6,0,0,0,0,0,0,200,37,0,0,2,69,0,0,136,8,0,0,0,0,0,0,200,37,0,0,30,69,0,0,136,8,0,0,0,0,0,0,200,37,0,0,61,69,0,0,248,8,0,0,0,0,0,0,160,37,0,0,86,69,0,0,160,37,0,0,192,69,0,0,200,37,0,0,209,69,0,0,160,1,0,0,0,0,0,0,200,37,0,0,242,69,0,0,152,9,0,0,0,0,0,0,200,37,0,0,15,70,0,0,160,6,0,0,0,0,0,0,200,37,0,0,59,70,0,0,152,9,0,0,0,0,0,0,200,37,0,0,34,70,0,0,168,0,0,0,0,0,0,0,200,37,0,0,123,70,0,0,200,9,0,0,0,0,0,0,200,37,0,0,90,70,0,0,168,0,0,0,0,0,0,0,200,37,0,0,91,71,0,0,152,9,0,0,0,0,0,0,200,37,0,0,162,70,0,0,136,8,0,0,0,0,0,0,200,37,0,0,64,71,0,0,136,8,0,0,0,0,0,0,200,37,0,0,198,72,0,0,88,1,0,0,0,0,0,0,200,37,0,0,172,72,0,0,152,9,0,0,0,0,0,0,200,37,0,0,127,71,0,0,80,6,0,0,0,0,0,0,200,37,0,0,154,71,0,0,96,6,0,0,0,0,0,0,200,37,0,0,39,72,0,0,96,6,0,0,0,0,0,0,200,37,0,0,238,72,0,0,160,1,0,0,0,0,0,0,160,37,0,0,16,73,0,0,160,37,0,0,42,73,0,0,160,37,0,0,210,73,0,0,200,37,0,0,236,73,0,0,168,10,0,0,0,0,0,0,160,37,0,0,20,84,0,0,200,37,0,0,116,84,0,0,216,10,0,0,0,0,0,0,200,37,0,0,33,84,0,0,232,10,0,0,0,0,0,0,160,37,0,0,66,84,0,0,200,37,0,0,79,84,0,0,200,10,0,0,0,0,0,0,200,37,0,0,122,85,0,0,216,10,0,0,0,0,0,0,200,37,0,0,86,85,0,0,0,11,0,0,0,0,0,0,200,37,0,0,156,85,0,0,200,10,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,56,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,80,0,0,0,7,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,112,0,0,0,9,0,0,0,10,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,136,0,0,0,11,0,0,0,12,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,152,0,0,0,13,0,0,0,14,0,0,0,3,0,0,0,5,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,184,0,0,0,15,0,0,0,16,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,200,0,0,0,17,0,0,0,18,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,3,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,8,1,0,0,13,0,0,0,19,0,0,0,3,0,0,0,9,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,216,0,0,0,13,0,0,0,20,0,0,0,3,0,0,0,10,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,232,0,0,0,21,0,0,0,22,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,11,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,7,0,0,0,3,0,0,0,3,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,10,0,0,0,0,0,0,0,40,1,0,0,13,0,0,0,23,0,0,0,8,0,0,0,12,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,24,1,0,0,13,0,0,0,24,0,0,0,9,0,0,0,12,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,56,1,0,0,25,0,0,0,26,0,0,0,11,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,0,0,0,0,128,1,0,0,27,0,0,0,28,0,0,0,2,0,0,0,0,0,0,0,112,1,0,0,27,0,0,0,29,0,0,0,3,0,0,0,0,0,0,0,96,1,0,0,27,0,0,0,30,0,0,0,4,0,0,0,0,0,0,0,72,1,0,0,27,0,0,0,31,0,0,0,5,0,0,0,0,0,0,0,144,1,0,0,32,0,0,0,33,0,0,0,1,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,168,1,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,14,0,0,0,14,0,0,0,38,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,15,0,0,0,39,0,0,0,16,0,0,0,1,0,0,0,10,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,40,0,0,0,22,0,0,0,9,0,0,0,23,0,0,0,24,0,0,0,15,0,0,0,16,0,0,0,7,0,0,0,8,0,0,0,17,0,0,0,41,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,4,0,0,0,5,0,0,0,42,0,0,0,29,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,30,0,0,0,43,0,0,0,31,0,0,0,9,0,0,0,0,0,0,0,184,1,0,0,44,0,0,0,45,0,0,0,9,0,0,0,0,0,0,0,224,1,0,0,46,0,0,0,47,0,0,0,2,0,0,0,2,0,0,0,32,0,0,0,0,0,0,0,240,1,0,0,48,0,0,0,49,0,0,0,18,0,0,0,19,0,0,0,11,0,0,0,33,0,0,0,10,0,0,0,11,0,0,0,50,0,0,0,12,0,0,0,13,0,0,0,34,0,0,0,20,0,0,0,35,0,0,0,21,0,0,0,14,0,0,0,0,0,0,0,8,2,0,0,51,0,0,0,52,0,0,0,3,0,0,0,3,0,0,0,36,0,0,0,0,0,0,0,24,2,0,0,53,0,0,0,54,0,0,0,10,0,0,0,0,0,0,0,56,2,0,0,12,0,0,0,37,0,0,0,15,0,0,0,55,0,0,0,56,0,0,0,0,0,0,0,40,2,0,0,57,0,0,0,58,0,0,0,11,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,11,0,0,0,6,0,0,0,4,0,0,0,22,0,0,0,7,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,17,0,0,0,1,0,0,0,12,0,0,0,5,0,0,0,23,0,0,0,18,0,0,0,10,0,0,0,24,0,0,0,25,0,0,0,13,0,0,0,19,0,0,0,26,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,64,2,0,0,59,0,0,0,60,0,0,0,16,0,0,0,0,0,0,0,80,2,0,0,61,0,0,0,62,0,0,0,2,0,0,0,38,0,0,0,39,0,0,0,3,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,4,0,0,0,27,0,0,0,43,0,0,0,28,0,0,0,44,0,0,0,6,0,0,0,45,0,0,0,29,0,0,0,46,0,0,0,47,0,0,0,0,0,0,0,96,2,0,0,63,0,0,0,64,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,136,2,0,0,65,0,0,0,66,0,0,0,67,0,0,0,1,0,0,0,48,0,0,0,49,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,30,0,0,0,7,0,0,0,20,0,0,0,0,0,0,0,152,2,0,0,65,0,0,0,68,0,0,0,69,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,31,0,0,0,8,0,0,0,0,0,0,0,184,2,0,0,65,0,0,0,70,0,0,0,71,0,0,0,1,0,0,0,50,0,0,0,51,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,32,0,0,0,9,0,0,0,72,0,0,0,33,0,0,0,0,0,0,0,200,2,0,0,65,0,0,0,73,0,0,0,71,0,0,0,1,0,0,0,50,0,0,0,52,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,34,0,0,0,10,0,0,0,72,0,0,0,33,0,0,0,21,0,0,0,0,0,0,0,216,2,0,0,65,0,0,0,74,0,0,0,75,0,0,0,1,0,0,0,53,0,0,0,54,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,35,0,0,0,11,0,0,0,36,0,0,0,0,0,0,0,232,2,0,0,65,0,0,0,76,0,0,0,77,0,0,0,1,0,0,0,55,0,0,0,56,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,37,0,0,0,12,0,0,0,38,0,0,0,0,0,0,0,248,2,0,0,78,0,0,0,79,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,80,0,0,0,39,0,0,0,17,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,16,3,0,0,65,0,0,0,81,0,0,0,69,0,0,0,1,0,0,0,57,0,0,0,58,0,0,0,2,0,0,0,5,0,0,0,8,0,0,0,40,0,0,0,13,0,0,0,41,0,0,0,0,0,0,0,32,3,0,0,82,0,0,0,83,0,0,0,36,0,0,0,37,0,0,0,14,0,0,0,14,0,0,0,84,0,0,0,6,0,0,0,18,0,0,0,8,0,0,0,59,0,0,0,39,0,0,0,60,0,0,0,1,0,0,0,10,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,40,0,0,0,22,0,0,0,9,0,0,0,23,0,0,0,24,0,0,0,15,0,0,0,16,0,0,0,7,0,0,0,8,0,0,0,42,0,0,0,41,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,14,0,0,0,5,0,0,0,42,0,0,0,29,0,0,0,6,0,0,0,15,0,0,0,8,0,0,0,30,0,0,0,43,0,0,0,31,0,0,0,9,0,0,0,0,0,0,0,48,3,0,0,63,0,0,0,85,0,0,0,11,0,0,0,9,0,0,0,0,0,0,0,80,3,0,0,86,0,0,0,87,0,0,0,1,0,0,0,0,0,0,0,104,3,0,0,88,0,0,0,89,0,0,0,61,0,0,0,4,0,0,0,43,0,0,0,14,0,0,0,62,0,0,0,0,0,0,0,120,3,0,0,90,0,0,0,91,0,0,0,5,0,0,0,63,0,0,0,16,0,0,0,17,0,0,0,19,0,0,0,0,0,0,0,136,3,0,0,92,0,0,0,93,0,0,0,6,0,0,0,0,0,0,0,152,3,0,0,94,0,0,0,95,0,0,0,1,0,0,0,24,0,0,0,4,0,0,0,20,0,0,0,2,0,0,0,21,0,0,0,64,0,0,0,44,0,0,0,45,0,0,0,25,0,0,0,65,0,0,0,96,0,0,0,0,0,0,0,168,3,0,0,94,0,0,0,97,0,0,0,1,0,0,0,24,0,0,0,4,0,0,0,20,0,0,0,2,0,0,0,21,0,0,0,64,0,0,0,44,0,0,0,45,0,0,0,25,0,0,0,65,0,0,0,96,0,0,0,0,0,0,0,192,3,0,0,98,0,0,0,99,0,0,0,15,0,0,0,7,0,0,0,26,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,27,0,0,0,49,0,0,0,28,0,0,0,66,0,0,0,29,0,0,0,16,0,0,0,50,0,0,0,67,0,0,0,68,0,0,0,0,0,0,0,224,3,0,0,100,0,0,0,101,0,0,0,2,0,0,0,30,0,0,0,5,0,0,0,22,0,0,0,3,0,0,0,23,0,0,0,69,0,0,0,51,0,0,0,52,0,0,0,31,0,0,0,70,0,0,0,102,0,0,0,0,0,0,0,240,3,0,0,13,0,0,0,103,0,0,0,32,0,0,0,71,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,4,0,0,13,0,0,0,104,0,0,0,3,0,0,0,72,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,16,4,0,0,13,0,0,0,105,0,0,0,3,0,0,0,73,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,32,4,0,0,106,0,0,0,107,0,0,0,17,0,0,0,8,0,0,0,33,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,34,0,0,0,56,0,0,0,35,0,0,0,74,0,0,0,36,0,0,0,18,0,0,0,57,0,0,0,75,0,0,0,76,0,0,0,0,0,0,0,48,4,0,0,108,0,0,0,109,0,0,0,12,0,0,0,0,0,0,0,72,4,0,0,108,0,0,0,110,0,0,0,13,0,0,0,0,0,0,0,88,4,0,0,111,0,0,0,112,0,0,0,9,0,0,0,19,0,0,0,77,0,0,0,78,0,0,0,20,0,0,0,21,0,0,0,24,0,0,0,58,0,0,0,14,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,15,0,0,0,79,0,0,0,0,0,0,0,104,4,0,0,108,0,0,0,113,0,0,0,16,0,0,0,0,0,0,0,120,4,0,0,114,0,0,0,115,0,0,0,61,0,0,0,4,0,0,0,62,0,0,0,22,0,0,0,4,0,0,0,0,0,0,0,128,4,0,0,116,0,0,0,117,0,0,0,36,0,0,0,37,0,0,0,14,0,0,0,14,0,0,0,118,0,0,0,6,0,0,0,18,0,0,0,25,0,0,0,80,0,0,0,39,0,0,0,81,0,0,0,0,0,0,0,136,4,0,0,44,0,0,0,119,0,0,0,17,0,0,0,0,0,0,0,200,4,0,0,53,0,0,0,120,0,0,0,26,0,0,0,1,0,0,0,0,0,0,0,184,4,0,0,53,0,0,0,121,0,0,0,26,0,0,0,2,0,0,0,0,0,0,0,168,4,0,0,13,0,0,0,122,0,0,0,3,0,0,0,82,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,152,4,0,0,123,0,0,0,124,0,0,0,18,0,0,0,10,0,0,0,0,0,0,0,216,4,0,0,125,0,0,0,126,0,0,0,27,0,0,0,28,0,0,0,252,255,255,255,216,4,0,0,127,0,0,0,128,0,0,0,29,0,0,0,0,0,0,0,40,5,0,0,53,0,0,0,129,0,0,0,30,0,0,0,1,0,0,0,0,0,0,0,24,5,0,0,53,0,0,0,130,0,0,0,30,0,0,0,2,0,0,0,0,0,0,0,8,5,0,0,13,0,0,0,131,0,0,0,3,0,0,0,83,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,248,4,0,0,63,0,0,0,132,0,0,0,19,0,0,0,11,0,0,0,0,0,0,0,56,5,0,0,44,0,0,0,133,0,0,0,20,0,0,0,0,0,0,0,72,5,0,0,44,0,0,0,134,0,0,0,21,0,0,0,0,0,0,0,88,5,0,0,135,0,0,0,136,0,0,0,37,0,0,0,38,0,0,0,3,0,0,0,0,0,0,0,104,5,0,0,137,0,0,0,138,0,0,0,11,0,0,0,12,0,0,0,23,0,0,0,13,0,0,0,0,0,0,0,16,6,0,0,27,0,0,0,139,0,0,0,10,0,0,0,0,0,0,0,0,6,0,0,27,0,0,0,140,0,0,0,11,0,0,0,0,0,0,0,240,5,0,0,27,0,0,0,141,0,0,0,12,0,0,0,0,0,0,0,224,5,0,0,27,0,0,0,142,0,0,0,13,0,0,0,0,0,0,0,208,5,0,0,27,0,0,0,143,0,0,0,14,0,0,0,0,0,0,0,192,5,0,0,27,0,0,0,144,0,0,0,15,0,0,0,0,0,0,0,176,5,0,0,27,0,0,0,145,0,0,0,16,0,0,0,0,0,0,0,160,5,0,0,27,0,0,0,146,0,0,0,17,0,0,0,0,0,0,0,144,5,0,0,27,0,0,0,147,0,0,0,18,0,0,0,0,0,0,0,128,5,0,0,27,0,0,0,148,0,0,0,19,0,0,0,0,0,0,0,32,6,0,0,149,0,0,0,150,0,0,0,6,0,0,0,4,0,0,0,84,0,0,0,0,0,0,0,48,6,0,0,151,0,0,0,152,0,0,0,61,0,0,0,4,0,0,0,62,0,0,0,22,0,0,0,4,0,0,0,39,0,0,0,31,0,0,0,0,0,0,0,64,6,0,0,153,0,0,0,154,0,0,0,61,0,0,0,4,0,0,0,62,0,0,0,22,0,0,0,4,0,0,0,40,0,0,0,32,0,0,0,0,0,0,0,80,6,0,0,135,0,0,0,155,0,0,0,37,0,0,0,38,0,0,0,4,0,0,0,0,0,0,0,104,6,0,0,156,0,0,0,157,0,0,0,41,0,0,0,85,0,0,0,0,0,0,0,112,6,0,0,158,0,0,0,159,0,0,0,7,0,0,0,5,0,0,0,86,0,0,0,0,0,0,0,128,6,0,0,160,0,0,0,161,0,0,0,8,0,0,0,6,0,0,0,87,0,0,0,0,0,0,0,144,6,0,0,162,0,0,0,163,0,0,0,9,0,0,0,0,0,0,0,168,6,0,0,57,0,0,0,164,0,0,0,33,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,88,0,0,0,6,0,0,0,5,0,0,0,63,0,0,0,7,0,0,0,18,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,42,0,0,0,43,0,0,0,1,0,0,0,34,0,0,0,5,0,0,0,64,0,0,0,44,0,0,0,10,0,0,0,65,0,0,0,66,0,0,0,35,0,0,0,45,0,0,0,67,0,0,0,36,0,0,0,2,0,0,0,46,0,0,0,0,0,0,0,184,6,0,0,165,0,0,0,166,0,0,0,37,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,89,0,0,0,68,0,0,0,6,0,0,0,69,0,0,0,7,0,0,0,2,0,0,0,2,0,0,0,70,0,0,0,24,0,0,0,8,0,0,0,38,0,0,0,47,0,0,0,48,0,0,0,90,0,0,0,91,0,0,0,0,0,0,0,200,6,0,0,167,0,0,0,168,0,0,0,49,0,0,0,0,0,0,0,224,6,0,0,167,0,0,0,169,0,0,0,50,0,0,0,0,0,0,0,240,6,0,0,167,0,0,0,170,0,0,0,51,0,0,0,0,0,0,0,0,7,0,0,21,0,0,0,171,0,0,0,39,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,92,0,0,0,6,0,0,0,7,0,0,0,71,0,0,0,93,0,0,0,19,0,0,0,4,0,0,0,72,0,0,0,25,0,0,0,8,0,0,0,16,0,0,0,52,0,0,0,1,0,0,0,40,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,0,0,0,0,16,7,0,0,21,0,0,0,172,0,0,0,39,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,92,0,0,0,6,0,0,0,7,0,0,0,73,0,0,0,93,0,0,0,19,0,0,0,4,0,0,0,72,0,0,0,25,0,0,0,8,0,0,0,16,0,0,0,52,0,0,0,1,0,0,0,40,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,0,0,0,0,32,7,0,0,21,0,0,0,173,0,0,0,39,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,92,0,0,0,6,0,0,0,7,0,0,0,74,0,0,0,93,0,0,0,19,0,0,0,4,0,0,0,72,0,0,0,25,0,0,0,8,0,0,0,16,0,0,0,52,0,0,0,1,0,0,0,40,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,0,0,0,0,56,7,0,0,174,0,0,0,175,0,0,0,41,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,94,0,0,0,75,0,0,0,8,0,0,0,76,0,0,0,7,0,0,0,20,0,0,0,5,0,0,0,77,0,0,0,26,0,0,0,8,0,0,0,95,0,0,0,176,0,0,0,0,0,0,0,88,7,0,0,21,0,0,0,177,0,0,0,42,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,96,0,0,0,6,0,0,0,9,0,0,0,78,0,0,0,97,0,0,0,13,0,0,0,4,0,0,0,79,0,0,0,27,0,0,0,8,0,0,0,53,0,0,0,54,0,0,0,1,0,0,0,43,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,0,0,0,0,104,7,0,0,21,0,0,0,178,0,0,0,42,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,96,0,0,0,6,0,0,0,9,0,0,0,80,0,0,0,98,0,0,0,13,0,0,0,4,0,0,0,79,0,0,0,27,0,0,0,8,0,0,0,53,0,0,0,54,0,0,0,1,0,0,0,43,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,0,0,0,0,120,7,0,0,21,0,0,0,179,0,0,0,42,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,96,0,0,0,6,0,0,0,9,0,0,0,81,0,0,0,99,0,0,0,13,0,0,0,4,0,0,0,79,0,0,0,27,0,0,0,8,0,0,0,53,0,0,0,54,0,0,0,1,0,0,0,43,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,0,0,0,0,136,7,0,0,180,0,0,0,181,0,0,0,44,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,100,0,0,0,6,0,0,0,10,0,0,0,82,0,0,0,7,0,0,0,13,0,0,0,4,0,0,0,83,0,0,0,28,0,0,0,8,0,0,0,55,0,0,0,56,0,0,0,2,0,0,0,45,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,10,0,0,0,84,0,0,0,85,0,0,0,46,0,0,0,57,0,0,0,86,0,0,0,47,0,0,0,3,0,0,0,0,0,0,0,184,7,0,0,57,0,0,0,182,0,0,0,44,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,101,0,0,0,87,0,0,0,10,0,0,0,88,0,0,0,7,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,58,0,0,0,59,0,0,0,1,0,0,0,48,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,10,0,0,0,89,0,0,0,90,0,0,0,49,0,0,0,60,0,0,0,91,0,0,0,50,0,0,0,4,0,0,0,0,0,0,0,200,7,0,0,183,0,0,0,184,0,0,0,51,0,0,0,0,0,0,0,216,7,0,0,21,0,0,0,185,0,0,0,52,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,102,0,0,0,6,0,0,0,11,0,0,0,92,0,0,0,103,0,0,0,21,0,0,0,4,0,0,0,93,0,0,0,29,0,0,0,8,0,0,0,61,0,0,0,62,0,0,0,1,0,0,0,53,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,6,0,0,0,0,0,0,0,232,7,0,0,21,0,0,0,186,0,0,0,52,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,102,0,0,0,6,0,0,0,11,0,0,0,94,0,0,0,103,0,0,0,21,0,0,0,4,0,0,0,93,0,0,0,29,0,0,0,8,0,0,0,61,0,0,0,63,0,0,0,1,0,0,0,54,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,248,7,0,0,21,0,0,0,187,0,0,0,52,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,102,0,0,0,6,0,0,0,11,0,0,0,95,0,0,0,103,0,0,0,21,0,0,0,4,0,0,0,93,0,0,0,29,0,0,0,8,0,0,0,61,0,0,0,64,0,0,0,1,0,0,0,55,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,8,8,0,0,188,0,0,0,189,0,0,0,56,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,104,0,0,0,96,0,0,0,12,0,0,0,97,0,0,0,7,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,3,0,0,0,8,0,0,0,57,0,0,0,12,0,0,0,0,0,0,0,24,8,0,0,190,0,0,0,191,0,0,0,20,0,0,0,98,0,0,0,30,0,0,0,105,0,0,0,106,0,0,0,21,0,0,0,0,0,0,0,56,8,0,0,183,0,0,0,192,0,0,0,58,0,0,0,0,0,0,0,40,8,0,0,183,0,0,0,193,0,0,0,59,0,0,0,0,0,0,0,72,8,0,0,57,0,0,0,194,0,0,0,42,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,11,0,0,0,6,0,0,0,10,0,0,0,1,0,0,0,7,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,65,0,0,0,1,0,0,0,60,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,104,8,0,0,21,0,0,0,195,0,0,0,61,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,11,0,0,0,6,0,0,0,13,0,0,0,99,0,0,0,7,0,0,0,22,0,0,0,9,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,66,0,0,0,67,0,0,0,1,0,0,0,62,0,0,0,5,0,0,0,9,0,0,0,7,0,0,0,0,0,0,0,120,8,0,0,196,0,0,0,197,0,0,0,63,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,107,0,0,0,100,0,0,0,14,0,0,0,101,0,0,0,7,0,0,0,2,0,0,0,2,0,0,0,102,0,0,0,31,0,0,0,8,0,0,0,64,0,0,0,0,0,0,0,152,8,0,0,198,0,0,0,199,0,0,0,65,0,0,0,1,0,0,0,2,0,0,0,108,0,0,0,109,0,0,0,103,0,0,0,110,0,0,0,111,0,0,0,104,0,0,0,68,0,0,0,69,0,0,0,105,0,0,0,32,0,0,0,0,0,0,0,168,8,0,0,200,0,0,0,201,0,0,0,37,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,112,0,0,0,68,0,0,0,6,0,0,0,106,0,0,0,7,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,3,0,0,0,8,0,0,0,66,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,184,8,0,0,53,0,0,0,202,0,0,0,67,0,0,0,0,0,0,0,200,8,0,0,183,0,0,0,203,0,0,0,68,0,0,0,0,0,0,0,216,8,0,0,204,0,0,0,205,0,0,0,1,0,0,0,0,0,0,0,232,8,0,0,135,0,0,0,206,0,0,0,70,0,0,0,71,0,0,0,5,0,0,0,0,0,0,0,0,9,0,0,204,0,0,0,207,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,9,0,0,208,0,0,0,209,0,0,0,1,0,0,0,0,0,0,0,40,9,0,0,162,0,0,0,210,0,0,0,10,0,0,0,0,0,0,0,56,9,0,0,208,0,0,0,211,0,0,0,2,0,0,0,0,0,0,0,72,9,0,0,135,0,0,0,212,0,0,0,72,0,0,0,73,0,0,0,6,0,0,0,0,0,0,0,104,9,0,0,53,0,0,0,213,0,0,0,30,0,0,0,1,0,0,0,0,0,0,0,120,9,0,0,204,0,0,0,214,0,0,0,3,0,0,0,0,0,0,0,144,9,0,0,215,0,0,0,216,0,0,0,20,0,0,0,98,0,0,0,30,0,0,0,105,0,0,0,106,0,0,0,0,0,0,0,168,9,0,0,217,0,0,0,218,0,0,0,11,0,0,0,7,0,0,0,113,0,0,0,0,0,0,0,184,9,0,0,162,0,0,0,219,0,0,0,12,0,0,0,0,0,0,0,200,9,0,0,220,0,0,0,221,0,0,0,13,0,0,0,8,0,0,0,114,0,0,0,0,0,0,0,216,9,0,0,13,0,0,0,222,0,0,0,3,0,0,0,115,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,232,9,0,0,223,0,0,0,224,0,0,0,14,0,0,0,9,0,0,0,116,0,0,0,0,0,0,0,248,9,0,0,13,0,0,0,225,0,0,0,74,0,0,0,12,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,8,10,0,0,226,0,0,0,227,0,0,0,15,0,0,0,10,0,0,0,117,0,0,0,0,0,0,0,24,10,0,0,53,0,0,0,228,0,0,0,69,0,0,0,0,0,0,0,40,10,0,0,229,0,0,0,230,0,0,0,70,0,0,0,0,0,0,0,56,10,0,0,231,0,0,0,232,0,0,0,22,0,0,0,0,0,0,0,72,10,0,0,233,0,0,0,234,0,0,0,16,0,0,0,11,0,0,0,118,0,0,0,0,0,0,0,120,10,0,0,135,0,0,0,235,0,0,0,75,0,0,0,76,0,0,0,7,0,0,0,0,0,0,0,104,10,0,0,135,0,0,0,236,0,0,0,77,0,0,0,78,0,0,0,8,0,0,0,0,0,0,0,88,10,0,0,135,0,0,0,237,0,0,0,37,0,0,0,38,0,0,0,9,0,0,0,0,0,0,0,136,10,0,0,238,0,0,0,239,0,0,0,17,0,0,0,12,0,0,0,119,0,0,0,0,0,0,0,152,10,0,0,240,0,0,0,241,0,0,0,33,0,0,0,34,0,0,0,107,0,0,0,0,0,0,0,160,10,0,0,242,0,0,0,243,0,0,0,0,0,0,0,176,10,0,0,244,0,0,0,245,0,0,0,65,0,0,0,1,0,0,0,2,0,0,0,108,0,0,0,109,0,0,0,103,0,0,0,120,0,0,0,121,0,0,0,104,0,0,0,68,0,0,0,69,0,0,0,105,0,0,0,32,0,0,0,255,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,36,0,0,0,225,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,200,10,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,37,0,0,0,4,0,0,0,18,0,0,0,71,0,0,0,0,0,0,0,240,10,0,0,246,0,0,0,250,0,0,0,248,0,0,0,249,0,0,0,37,0,0,0,5,0,0,0,19,0,0,0,72,0,0,0,0,0,0,0,32,11,0,0,246,0,0,0,251,0,0,0,248,0,0,0,249,0,0,0,37,0,0,0,6,0,0,0,20,0,0,0,73,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,67,111,110,99,114,101,116,101,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,97,100,100,83,105,110,103,108,101,82,101,115,117,108,116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,67,111,110,99,114,101,116,101,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,58,58,97,100,100,83,105,110,103,108,101,82,101,115,117,108,116,46,39,59,32,114,101,116,117,114,110,32,115,101,108,102,91,39,97,100,100,83,105,110,103,108,101,82,101,115,117,108,116,39,93,40,36,49,44,36,50,44,36,51,44,36,52,44,36,53,44,36,54,44,36,55,41,59,32,125,0,50,57,67,111,110,99,114,101,116,101,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,52,67,108,111,115,101,115,116,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,49,57,98,116,71,104,111,115,116,80,97,105,114,67,97,108,108,98,97,99,107,0,50,53,98,116,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,108,108],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);allocate([98,97,99,107,0,50,48,98,116,68,101,102,97,117,108,116,77,111,116,105,111,110,83,116,97,116,101,0,49,51,98,116,77,111,116,105,111,110,83,116,97,116,101,0,49,56,98,116,86,101,104,105,99,108,101,82,97,121,99,97,115,116,101,114,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,55,67,108,111,115,101,115,116,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,83,111,102,116,66,111,100,121,77,97,116,101,114,105,97,108,68,97,116,97,0,83,111,102,116,66,111,100,121,78,111,100,101,68,97,116,97,0,83,111,102,116,66,111,100,121,76,105,110,107,68,97,116,97,0,83,111,102,116,66,111,100,121,70,97,99,101,68,97,116,97,0,83,111,102,116,66,111,100,121,84,101,116,114,97,68,97,116,97,0,83,111,102,116,82,105,103,105,100,65,110,99,104,111,114,68,97,116,97,0,102,108,111,97,116,0,83,111,102,116,66,111,100,121,80,111,115,101,68,97,116,97,0,83,111,102,116,66,111,100,121,67,108,117,115,116,101,114,68,97,116,97,0,105,110,116,0,98,116,83,111,102,116,66,111,100,121,74,111,105,110,116,68,97,116,97,0,98,116,83,111,102,116,66,111,100,121,70,108,111,97,116,68,97,116,97,0,49,48,98,116,83,111,102,116,66,111,100,121,0,78,49,48,98,116,83,111,102,116,66,111,100,121,49,53,82,97,121,70,114,111,109,84,111,67,97,115,116,101,114,69,0,78,54,98,116,68,98,118,116,56,73,67,111,108,108,105,100,101,69,0,78,49,48,98,116,83,111,102,116,66,111,100,121,53,74,111,105,110,116,69,0,78,49,48,98,116,83,111,102,116,66,111,100,121,54,67,74,111,105,110,116,69,0,83,111,102,116,66,111,100,121,0,50,52,98,116,83,111,102,116,66,111,100,121,67,111,108,108,105,115,105,111,110,83,104,97,112,101,0,98,116,67,111,110,118,101,120,73,110,116,101,114,110,97,108,83,104,97,112,101,68,97,116,97,0,83,79,70,84,67,76,85,83,84,69,82,0,50,55,98,116,83,111,102,116,67,108,117,115,116,101,114,67,111,108,108,105,115,105,111,110,83,104,97,112,101,0,78,49,53,98,116,83,111,102,116,67,111,108,108,105,100,101,114,115,49,50,67,111,108,108,105,100,101,67,76,95,82,83,69,0,78,49,53,98,116,83,111,102,116,67,111,108,108,105,100,101,114,115,49,49,67,108,117,115,116,101,114,66,97,115,101,69,0,78,49,53,98,116,83,111,102,116,67,111,108,108,105,100,101,114,115,49,51,67,111,108,108,105,100,101,83,68,70,95,82,83,69,0,78,49,53,98,116,83,111,102,116,67,111,108,108,105,100,101,114,115,49,50,67,111,108,108,105,100,101,86,70,95,83,83,69,0,78,49,53,98,116,83,111,102,116,67,111,108,108,105,100,101,114,115,49,50,67,111,108,108,105,100,101,67,76,95,83,83,69,0,52,49,98,116,83,111,102,116,66,111,100,121,82,105,103,105,100,66,111,100,121,67,111,108,108,105,115,105,111,110,67,111,110,102,105,103,117,114,97,116,105,111,110,0,78,51,53,98,116,83,111,102,116,66,111,100,121,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,55,83,119,97,112,112,101,100,67,114,101,97,116,101,70,117,110,99,69,0,51,48,98,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,67,114,101,97,116,101,70,117,110,99,0,78,51,53,98,116,83,111,102,116,66,111,100,121,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,50,57,98,116,83,111,102,116,82,105,103,105,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,50,56,98,116,83,111,102,116,83,111,102,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,50,57,98,116,83,111,102,116,82,105,103,105,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,48,98,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,51,98,116,83,111,102,116,83,105,110,103,108,101,82,97,121,67,97,108,108,98,97,99,107,0,50,51,98,116,66,114,111,97,100,112,104,97,115,101,82,97,121,67,97,108,108,98,97,99,107,0,50,52,98,116,66,114,111,97,100,112,104,97,115,101,65,97,98,98,67,97,108,108,98,97,99,107,0,50,52,98,116,83,111,102,116,82,105,103,105,100,68,121,110,97,109,105,99,115,87,111,114,108,100,0,50,56,98,116,83,111,102,116,83,111,102,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,51,98,116,68,101,102,97,117,108,116,83,111,102,116,66,111,100,121,83,111,108,118,101,114,0,49,54,98,116,83,111,102,116,66,111,100,121,83,111,108,118,101,114,0,84,114,105,97,110,103,108,101,0,49,53,98,116,84,114,105,97,110,103,108,101,83,104,97,112,101,0,78,49,50,98,116,67,111,110,118,101,120,67,97,115,116,49,48,67,97,115,116,82,101,115,117,108,116,69,0,90,78,51,53,98,116,83,111,102,116,66,111,100,121,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,50,49,99,97,108,99,117,108,97,116,101,84,105,109,101,79,102,73,109,112,97,99,116,69,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,83,49,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,51,49,76,111,99,97,108,84,114,105,97,110,103,108,101,83,112,104,101,114,101,67,97,115,116,67,97,108,108,98,97,99,107,0,50,54,98,116,83,111,102,116,66,111,100,121,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,51,53,98,116,83,111,102,116,66,111,100,121,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,52,51,98,116,75,105,110,101,109,97,116,105,99,67,108,111,115,101,115,116,78,111,116,77,101,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,51,48,98,116,75,105,110,101,109,97,116,105,99,67,104,97,114,97,99,116,101,114,67,111,110,116,114,111,108,108,101,114,0,51,48,98,116,67,104,97,114,97,99,116,101,114,67,111,110,116,114,111,108,108,101,114,73,110,116,101,114,102,97,99,101,0,49,55,98,116,65,99,116,105,111,110,73,110,116,101,114,102,97,99,101,0,98,116,67,111,110,101,84,119,105,115,116,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,49,55,98,116,84,121,112,101,100,67,111,110,115,116,114,97,105,110,116,0,49,51,98,116,84,121,112,101,100,79,98,106,101,99,116,0,50,49,98,116,67,111,110,101,84,119,105,115,116,67,111,110,115,116,114,97,105,110,116,0,98,116,71,101,110,101,114,105,99,54,68,111,102,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,50,51,98,116,71,101,110,101,114,105,99,54,68,111,102,67,111,110,115,116,114,97,105,110,116,0,98,116,71,101,110,101,114,105,99,54,68,111,102,83,112,114,105,110,103,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,50,57,98,116,71,101,110,101,114,105,99,54,68,111,102,83,112,114,105,110,103,67,111,110,115,116,114,97,105,110,116,0,98,116,72,105,110,103,101,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,49,55,98,116,72,105,110,103,101,67,111,110,115,116,114,97,105,110,116,0,98,116,80,111,105,110,116,50,80,111,105,110,116,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,50,51,98,116,80,111,105,110,116,50,80,111,105,110,116,67,111,110,115,116,114,97,105,110,116,0,51,53,98,116,83,101,113,117,101,110,116,105,97,108,73,109,112,117,108,115,101,67,111,110,115,116,114,97,105,110,116,83,111,108,118,101,114,0,49,56,98,116,67,111,110,115,116,114,97,105,110,116,83,111,108,118,101,114,0,98,116,83,108,105,100,101,114,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,49,56,98,116,83,108,105,100,101,114,67,111,110,115,116,114,97,105,110,116,0,98,116,84,121,112,101,100,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,51,52,98,116,67,108,111,115,101,115,116,78,111,116,77,101,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,98,116,68,121,110,97,109,105,99,115,87,111,114,108,100,70,108,111,97,116,68,97,116,97,0,50,51,98,116,68,105,115,99,114,101,116,101,68,121,110,97,109,105,99,115,87,111,114,108,100,0,49,53,98,116,68,121,110,97,109,105,99,115,87,111,114,108,100,0,50,55,73,110,112,108,97,99,101,83,111,108,118,101,114,73,115,108,97,110,100,67,97,108,108,98,97,99,107,0,78,50,53,98,116,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,77,97,110,97,103,101,114,49,52,73,115,108,97,110,100,67,97,108,108,98,97,99,107,69,0,98,116,82,105,103,105,100,66,111,100,121,70,108,111,97,116,68,97,116,97,0,49,49,98,116,82,105,103,105,100,66,111,100,121,0,49,54,98,116,82,97,121,99,97,115,116,86,101,104,105,99,108,101,0,50,53,98,116,68,101,102,97,117,108,116,86,101,104,105,99,108,101,82,97,121,99,97,115,116,101,114,0,50,48,98,116,65,120,105,115,83,119,101,101,112,51,73,110,116,101,114,110,97,108,73,116,69,0,50,49,98,116,66,114,111,97,100,112,104,97,115,101,73,110,116,101,114,102,97,99,101,0,49,50,98,116,65,120,105,115,83,119,101,101,112,51,0,49,53,98,116,78,117,108,108,80,97,105,114,67,97,99,104,101,0,50,50,98,116,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,0,49,56,98,116,68,98,118,116,84,114,101,101,67,111,108,108,105,100,101,114,0,50,48,66,114,111,97,100,112,104,97,115,101,65,97,98,98,84,101,115,116,101,114,0,49,57,66,114,111,97,100,112,104,97,115,101,82,97,121,84,101,115,116,101,114,0,49,54,98,116,68,98,118,116,66,114,111,97,100,112,104,97,115,101,0,90,78,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,49,57,99,108,101,97,110,80,114,111,120,121,70,114,111,109,80,97,105,114,115,69,80,49,55,98,116,66,114,111,97,100,112,104,97,115,101,80,114,111,120,121,80,49,50,98,116,68,105,115,112,97,116,99,104,101,114,69,49,55,67,108,101,97,110,80,97,105,114,67,97,108,108,98,97,99,107,0,49,55,98,116,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,90,78,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,51,55,114,101,109,111,118,101,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,115,67,111,110,116,97,105,110,105,110,103,80,114,111,120,121,69,80,49,55,98,116,66,114,111,97,100,112,104,97,115,101,80,114,111,120,121,80,49,50,98,116,68,105,115,112,97,116,99,104,101,114,69,49,56,82,101,109,111,118,101,80,97,105,114,67,97,108,108,98,97,99,107,0,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,0,50,51,98,116,67,111,108,108,105,115,105,111,110,80,97,105,114,67,97,108,108,98,97,99,107,0,50,49,98,116,67,111,108,108,105,115,105,111,110,68,105,115,112,97,116,99,104,101,114,0,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,70,108,111,97,116,68,97,116,97,0,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,49,53,76,111,99,97,108,73,110,102,111,65,100,100,101,114,50,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,57,82,97,121,84,101,115,116,101,114,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,50,57,66,114,105,100,103,101,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,95,48,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,50,57,66,114,105,100,103,101,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,0,49,57,98,116,83,105,110,103,108,101,82,97,121,67,97,108,108,98,97,99,107,0,49,55,68,101,98,117,103,68,114,97,119,99,97,108,108,98,97,99,107,0,1,79,118,101,114,102,108,111,119,32,105,110,32,65,65,66,66,44,32,111,98,106,101,99,116,32,114,101,109,111,118,101,100,32,102,114,111,109,32,115,105,109,117,108,97,116,105,111,110,0,73,102,32,121,111,117,32,99,97,110,32,114,101,112,114,111,100,117,99,101,32,116,104,105,115,44,32,112,108,101,97,115,101,32,101,109,97,105,108,32,98,117,103,115,64,99,111,110,116,105,110,117,111,117,115,112,104,121,115,105,99,115,46,99,111,109,10,0,80,108,101,97,115,101,32,105,110,99,108,117,100,101,32,97,98,111,118,101,32,105,110,102,111,114,109,97,116,105,111,110,44,32,121,111,117,114,32,80,108,97,116,102,111,114,109,44,32,118,101,114,115,105,111,110,32,111,102,32,79,83,46,10,0,84,104,97,110,107,115,46,10,0,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,0,90,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,78,50,50,98,116,67,111,109,112,111,117,110,100,76,101,97,102,67,97,108,108,98,97,99,107,49,50,80,114,111,99,101,115,115,67,104,105,108,100,69,105,83,53,95,80,75,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,69,49,52,76,111,99,97,108,73,110,102,111,65,100,100,101,114,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,50,50,98,116,67,111,109,112,111,117,110,100,76,101,97,102,67,97,108,108,98,97,99,107,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,51,50,66,114,105,100,103,101,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,95,48,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,51,50,66,114,105,100,103,101,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,0,50,49,98,116,83,105,110,103,108,101,83,119,101,101,112,67,97,108,108,98,97,99,107,0,50,51,98,116,66,114,105,100,103,101,100,77,97,110,105,102,111,108,100,82,101,115,117,108,116,0,50,51,98,116,83,105,110,103,108,101,67,111,110,116,97,99,116,67,97,108,108,98,97,99,107,0,51,49,98,116,68,101,102,97,117,108,116,67,111,108,108,105,115,105,111,110,67,111,110,102,105,103,117,114,97,116,105,111,110,0,50,52,98,116,67,111,108,108,105,115,105,111,110,67,111,110,102,105,103,117,114,97,116,105,111,110,0,78,51,49,98,116,67,111,110,118,101,120,80,108,97,110,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,50,54,98,116,66,111,120,66,111,120,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,51,52,98,116,83,112,104,101,114,101,84,114,105,97,110,103,108,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,51,50,98,116,83,112,104,101,114,101,83,112,104,101,114,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,49,54,98,116,69,109,112,116,121,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,55,83,119,97,112,112,101,100,67,114,101,97,116,101,70,117,110,99,69,0,78,51,54,98,116,67,111,109,112,111,117,110,100,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,55,83,119,97,112,112,101,100,67,114,101,97,116,101,70,117,110,99,69,0,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,49,54,98,116,69,109,112,116,121,65,108,103,111,114,105,116,104,109,0,49,51,98,116,71,104,111,115,116,79,98,106,101,99,116,0,50,52,98,116,80,97,105,114,67,97,99,104,105,110,103,71,104,111,115,116,79,98,106,101,99,116,0,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,0,78,51,54,98,116,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,111,114,73,110,116,101,114,102,97,99,101,54,82,101,115,117,108,116,69,0,50,53,98,116,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,77,97,110,97,103,101,114,0,51,50,98,116,83,112,104,101,114,101,83,112,104,101,114,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,51,52,98,116,83,112,104,101,114,101,84,114,105,97,110,103,108,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,50,83,112,104,101,114,101,84,114,105,97,110,103,108,101,68,101,116,101,99,116,111,114,0,51,54,98,116,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,111,114,73,110,116,101,114,102,97,99,101,0,66,111,120,0,49,48,98,116,66,111,120,83,104,97,112,101,0,90,78,75,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,57,112,114,111,99,101,115,115,65,108,108,84,114,105,97,110,103,108,101,115,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,50,49,98,116,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,68,97,116,97,0,66,86,72,84,82,73,65,78,71,76,69,77,69,83,72,0,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,90,78,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,52,112,101,114,102,111,114,109,82,97,121,99,97,115,116,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,90,78,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,55,112,101,114,102,111,114,109,67,111,110,118,101,120,99,97,115,116,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,83,52,95,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,98,116,67,97,112,115,117,108,101,83,104,97,112,101,68,97,116,97,0,67,97,112,115,117,108,101,83,104,97,112,101,0,49,52,98,116,67,97,112,115,117,108,101,83,104,97,112,101,0,67,97,112,115,117,108,101,88,0,49,53,98,116,67,97,112,115,117,108,101,83,104,97,112,101,88,0,67,97,112,115,117,108,101,90,0,49,53,98,116,67,97,112,115,117,108,101,83,104,97,112,101,90,0,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,68,97,116,97,0,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,0,98,116,67,111,109,112,111,117,110,100,83,104,97,112,101,67,104,105,108,100,68,97,116,97,0,98,116,67,111,109,112,111,117,110,100,83,104,97,112,101,68,97,116,97,0,67,111,109,112,111,117,110,100,0,49,53,98,116,67,111,109,112,111,117,110,100,83,104,97,112,101,0,49,52,98,116,67,111,110,99,97,118,101,83,104,97,112,101,0,98,116,67,111,110,101,83,104,97,112,101,68,97,116,97,0,67,111,110,101,0,49,49,98,116,67,111,110,101,83,104,97,112,101,0,67,111,110,101,90,0,49,50,98,116,67,111,110,101,83,104,97,112,101,90,0,67,111,110,101,88,0,49,50,98,116,67,111,110,101,83,104,97,112,101,88,0,98,116,67,111,110,118,101,120,72,117,108,108,83,104,97,112,101,68,97,116,97,0,67,111,110,118,101,120,0,49,55,98,116,67,111,110,118,101,120,72,117,108,108,83,104,97,112,101,0,50,49,98,116,67,111,110,118,101,120,73,110,116,101,114,110,97,108,83,104,97,112,101,0,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,0,50,54,76,111,99,97,108,83,117,112,112,111,114,116,86,101,114,116,101,120,67,97,108,108,98,97,99,107,0,67,111,110,118,101,120,84,114,105,109,101,115,104,0,50,53,98,116,67,111,110,118,101,120,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,68,97,116,97,0,67,121,108,105,110,100,101,114,89,0,49,53,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,0,67,121,108,105,110,100,101,114,88,0,49,54,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,88,0,67,121,108,105,110,100,101,114,90,0,49,54,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,90,0,72,69,73,71,72,84,70,73,69,76,68,0,50,53,98,116,72,101,105,103,104,116,102,105,101,108,100,84,101,114,114,97,105,110,83,104,97,112,101,0,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,0,90,78,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,53,98,117,105,108,100,69,80,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,98,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,48,78,111,100,101,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,90,78,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,53,98,117,105,108,100,69,80,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,98,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,57,81,117,97,110,116,105,122,101,100,78,111,100,101,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,50,51,98,116,80,111,108,121,104,101,100,114,97,108,67,111,110,118,101,120,83,104,97,112,101,0,51,52,98,116,80,111,108,121,104,101,100,114,97,108,67,111,110,118,101,120,65,97,98,98,67,97,99,104,105,110,103,83,104,97,112,101,0,83,80,72,69,82,69,0,49,51,98,116,83,112,104,101,114,101,83,104,97,112,101,0,98,116,83,116,97,116,105,99,80,108,97,110,101,83,104,97,112,101,68,97,116,97,0,83,84,65,84,73,67,80,76,65,78,69,0,49,56,98,116,83,116,97,116,105,99,80,108,97,110,101,83,104,97,112,101,0,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,51,49,98,116,73,110,116,101,114,110,97,108,84,114,105,97,110,103,108,101,73,110,100,101,120,67,97,108,108,98,97,99,107,0,49,52,98,116,84,114,105,97,110,103,108,101,77,101,115,104,0,50,49,83,117,112,112,111,114,116,86,101,114,116,101,120,67,97,108,108,98,97,99,107,0,90,78,75,49,57,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,57,112,114,111,99,101,115,115,65,108,108,84,114,105,97,110,103,108,101,115,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,49,54,70,105,108,116,101,114,101,100,67,97,108,108,98,97,99,107,0,84,82,73,65,78,71,76,69,77,69,83,72,0,49,57,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,49,54,98,116,80,111,105,110,116,67,111,108,108,101,99,116,111,114,0,50,55,98,116,67,111,110,116,105,110,117,111,117,115,67,111,110,118,101,120,67,111,108,108,105,115,105,111,110,0,49,50,98,116,67,111,110,118,101,120,67,97,115,116,0,49,53,98,116,71,106,107,67,111,110,118,101,120,67,97,115,116,0,51,48,98,116,71,106,107,69,112,97,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,51,48,98,116,67,111,110,118,101,120,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,49,55,98,116,71,106,107,80,97,105,114,68,101,116,101,99,116,111,114,0,90,78,51,51,98,116,77,105,110,107,111,119,115,107,105,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,49,50,99,97,108,99,80,101,110,68,101,112,116,104,69,82,50,50,98,116,86,111,114,111,110,111,105,83,105,109,112,108,101,120,83,111,108,118,101,114,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,83,52,95,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,55,95,82,57,98,116,86,101,99,116,111,114,51,83,57,95,83,57,95,80,49,50,98,116,73,68,101,98,117,103,68,114,97,119,69,50,48,98,116,73,110,116,101,114,109,101,100,105,97,116,101,82,101,115,117,108,116,0,51,51,98,116,77,105,110,107,111,119,115,107,105,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,50,53,98,116,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,0,50,56,98,116,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,0,50,50,98,116,83,117,98,115,105,109,112,108,101,120,67,111,110,118,101,120,67,97,115,116,0,49,50,98,116,68,105,115,112,97,116,99,104,101,114,0,98,116,79,112,116,105,109,105,122,101,100,66,118,104,78,111,100,101,68,97,116,97,0,98,116,81,117,97,110,116,105,122,101,100,66,118,104,78,111,100,101,68,97,116,97,0,98,116,66,118,104,83,117,98,116,114,101,101,73,110,102,111,68,97,116,97,0,98,116,81,117,97,110,116,105,122,101,100,66,118,104,70,108,111,97,116,68,97,116,97,0,49,52,98,116,81,117,97,110,116,105,122,101,100,66,118,104,0,51,48,98,116,65,99,116,105,118,97,116,105,110,103,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,54,98,116,66,111,120,66,111,120,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,49,54,98,116,66,111,120,66,111,120,68,101,116,101,99,116,111,114,0,50,50,98,116,67,111,109,112,111,117,110,100,76,101,97,102,67,97,108,108,98,97,99,107,0,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,51,48,98,116,67,111,109,112,111,117,110,100,67,111,109,112,111,117,110,100,76,101,97,102,67,97,108,108,98,97,99,107,0,51,54,98,116,67,111,109,112,111,117,110,100,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,90,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,50,49,99,97,108,99,117,108,97,116,101,84,105,109,101,79,102,73,109,112,97,99,116,69,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,83,49,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,51,49,76,111,99,97,108,84,114,105,97,110,103,108,101,83,112,104,101,114,101,67,97,115,116,67,97,108,108,98,97,99,107,0,50,52,98,116,67,111,110,118,101,120,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,52,98,116,80,101,114,116,117,114,98,101,100,67,111,110,116,97,99,116,82,101,115,117,108,116,0,90,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,54,112,114,111,99,101,115,115,67,111,108,108,105,115,105,111,110,69,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,83,50,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,50,49,98,116,87,105,116,104,111,117,116,77,97,114,103,105,110,82,101,115,117,108,116,0,90,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,54,112,114,111,99,101,115,115,67,111,108,108,105,115,105,111,110,69,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,83,50,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,49,51,98,116,68,117,109,109,121,82,101,115,117,108,116,0,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,0,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,51,49,98,116,67,111,110,118,101,120,80,108,97,110,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,51,98,116,72,97,115,104,101,100,83,105,109,112,108,101,80,97,105,114,67,97,99,104,101,0,49,56,98,116,67,111,110,118,101,120,80,111,108,121,104,101,100,114,111,110,0,98,116,73,110,116,73,110,100,101,120,68,97,116,97,0,98,116,83,104,111,114,116,73,110,116,73,110,100,101,120,84,114,105,112,108,101,116,68,97,116,97,0,98,116,67,104,97,114,73,110,100,101,120,84,114,105,112,108,101,116,68,97,116,97,0,98,116,86,101,99,116,111,114,51,70,108,111,97,116,68,97,116,97,0,98,116,86,101,99,116,111,114,51,68,111,117,98,108,101,68,97,116,97,0,98,116,77,101,115,104,80,97,114,116,68,97,116,97,0,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,68,97,116,97,0,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,0,50,54,98,116,84,114,105,97,110,103,108,101,73,110,100,101,120,86,101,114,116,101,120,65,114,114,97,121,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+10240);allocate([32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+20480);var tempDoublePtr=STATICTOP;STATICTOP+=16;function ___cxa_pure_virtual(){ABORT=true;throw"Pure virtual function called!"}Module["_i64Subtract"]=_i64Subtract;function _llvm_trap(){abort("trap!")}Module["_i64Add"]=_i64Add;Module["_memset"]=_memset;Module["_bitshift64Lshr"]=_bitshift64Lshr;Module["_bitshift64Shl"]=_bitshift64Shl;function _abort(){Module["abort"]()}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0&&!info.rethrown){if(info.destructor){Runtime.dynCall("vi",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___cxa_begin_catch(ptr){var info=EXCEPTIONS.infos[ptr];if(info&&!info.caught){info.caught=true;__ZSt18uncaught_exceptionv.uncaught_exception--}if(info)info.rethrown=false;EXCEPTIONS.caught.push(ptr);EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));return ptr}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Runtime.dynCall("v",func);_pthread_once.seen[ptr]=1}Module["_llvm_bswap_i16"]=_llvm_bswap_i16;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_STATIC);Module["_llvm_cttz_i32"]=_llvm_cttz_i32;Module["___udivmoddi4"]=___udivmoddi4;Module["___udivdi3"]=___udivdi3;var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}Module["___muldsi3"]=___muldsi3;Module["___muldi3"]=___muldi3;function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}Module["_sbrk"]=_sbrk;Module["_memmove"]=_memmove;var PTHREAD_SPECIFIC_NEXT_KEY=1;var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm["setTempRet0"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm["setTempRet0"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module["___cxa_is_pointer_type"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module["___cxa_can_catch"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm["setTempRet0"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm["setTempRet0"](throwntype),thrown)|0}function ___gxx_personality_v0(){}Module["___uremdi3"]=___uremdi3;var _llvm_pow_f32=Math_pow;Module["_llvm_bswap_i32"]=_llvm_bswap_i32;function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;assert(offset_high===0);FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffer){___syscall146.buffers=[null,[],[]];___syscall146.printChar=(function(stream,curr){var buffer=___syscall146.buffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?Module["print"]:Module["printErr"])(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}})}for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){___syscall146.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}__ATEXIT__.push((function(){var fflush=Module["_fflush"];if(fflush)fflush(0);var printChar=___syscall146.printChar;if(!printChar)return;var buffers=___syscall146.buffers;if(buffers[1].length)printChar(1,10);if(buffers[2].length)printChar(2,10)}));DYNAMICTOP_PTR=allocate(1,"i32",ALLOC_STATIC);STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=Runtime.alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vid(index,a1,a2){try{Module["dynCall_vid"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiidii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiidii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){try{return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viidi(index,a1,a2,a3,a4){try{Module["dynCall_viidi"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viddiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viddiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vidii(index,a1,a2,a3,a4){try{Module["dynCall_vidii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vidi(index,a1,a2,a3){try{Module["dynCall_vidi"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){try{return Module["dynCall_diiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiddddiid(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){try{Module["dynCall_viiiiddddiid"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiiii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_diiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vidd(index,a1,a2,a3){try{Module["dynCall_vidd"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiid(index,a1,a2,a3){try{return Module["dynCall_iiid"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_di(index,a1){try{return Module["dynCall_di"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiidii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_diiidii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viidii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viidii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7){try{Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){try{Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){try{Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iii(index,a1,a2){try{return Module["dynCall_iii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diii(index,a1,a2,a3){try{return Module["dynCall_diii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){try{return Module["dynCall_diiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiid(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiid"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){try{return Module["dynCall_diiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_did(index,a1,a2){try{return Module["dynCall_did"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiidddddidi(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){try{Module["dynCall_viiiidddddidi"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diidii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_diidii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiii(index,a1,a2,a3,a4){try{return Module["dynCall_diiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){try{return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiid(index,a1,a2,a3,a4){try{Module["dynCall_viiid"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viii(index,a1,a2,a3){try{Module["dynCall_viii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_v(index){try{Module["dynCall_v"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viid(index,a1,a2,a3){try{Module["dynCall_viid"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iidid(index,a1,a2,a3,a4){try{return Module["dynCall_iidid"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity};Module.asmLibraryArg={"abort":abort,"assert":assert,"enlargeMemory":enlargeMemory,"getTotalMemory":getTotalMemory,"abortOnCannotGrowMemory":abortOnCannotGrowMemory,"invoke_viiiii":invoke_viiiii,"invoke_vid":invoke_vid,"invoke_vi":invoke_vi,"invoke_viiidii":invoke_viiidii,"invoke_vii":invoke_vii,"invoke_iiiiiiiiiii":invoke_iiiiiiiiiii,"invoke_ii":invoke_ii,"invoke_viidi":invoke_viidi,"invoke_viddiii":invoke_viddiii,"invoke_vidii":invoke_vidii,"invoke_iiiii":invoke_iiiii,"invoke_vidi":invoke_vidi,"invoke_diiiiiiii":invoke_diiiiiiii,"invoke_viiiiddddiid":invoke_viiiiddddiid,"invoke_diiiii":invoke_diiiii,"invoke_vidd":invoke_vidd,"invoke_iiii":invoke_iiii,"invoke_viiiiid":invoke_viiiiid,"invoke_viiiiii":invoke_viiiiii,"invoke_iiid":invoke_iiid,"invoke_di":invoke_di,"invoke_iiiiiii":invoke_iiiiiii,"invoke_diiidii":invoke_diiidii,"invoke_viidii":invoke_viidii,"invoke_viiiiiii":invoke_viiiiiii,"invoke_viiiiiiiii":invoke_viiiiiiiii,"invoke_viiiiiiiiii":invoke_viiiiiiiiii,"invoke_iii":invoke_iii,"invoke_diii":invoke_diii,"invoke_diiiiiiiiii":invoke_diiiiiiiiii,"invoke_viiiid":invoke_viiiid,"invoke_diiiiiiiii":invoke_diiiiiiiii,"invoke_did":invoke_did,"invoke_viiiidddddidi":invoke_viiiidddddidi,"invoke_diidii":invoke_diidii,"invoke_diiii":invoke_diiii,"invoke_iiiiiiiiii":invoke_iiiiiiiiii,"invoke_viiid":invoke_viiid,"invoke_viii":invoke_viii,"invoke_v":invoke_v,"invoke_viid":invoke_viid,"invoke_iidid":invoke_iidid,"invoke_viiii":invoke_viiii,"_pthread_getspecific":_pthread_getspecific,"___cxa_begin_catch":___cxa_begin_catch,"_pthread_setspecific":_pthread_setspecific,"_pthread_key_create":_pthread_key_create,"_abort":_abort,"___setErrNo":___setErrNo,"___syscall6":___syscall6,"_llvm_trap":_llvm_trap,"_llvm_pow_f32":_llvm_pow_f32,"_pthread_once":_pthread_once,"_emscripten_memcpy_big":_emscripten_memcpy_big,"___gxx_personality_v0":___gxx_personality_v0,"___syscall140":___syscall140,"___resumeException":___resumeException,"_emscripten_asm_const_diiiiiiii":_emscripten_asm_const_diiiiiiii,"___cxa_find_matching_catch":___cxa_find_matching_catch,"___cxa_pure_virtual":___cxa_pure_virtual,"___syscall146":___syscall146,"__ZSt18uncaught_exceptionv":__ZSt18uncaught_exceptionv,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"DYNAMICTOP_PTR":DYNAMICTOP_PTR,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"cttz_i8":cttz_i8};// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer) {
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.DYNAMICTOP_PTR|0;var l=env.tempDoublePtr|0;var m=env.ABORT|0;var n=env.cttz_i8|0;var o=0;var p=0;var q=0;var r=0;var s=global.NaN,t=global.Infinity;var u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;var D=0;var E=global.Math.floor;var F=global.Math.abs;var G=global.Math.sqrt;var H=global.Math.pow;var I=global.Math.cos;var J=global.Math.sin;var K=global.Math.tan;var L=global.Math.acos;var M=global.Math.asin;var N=global.Math.atan;var O=global.Math.atan2;var P=global.Math.exp;var Q=global.Math.log;var R=global.Math.ceil;var S=global.Math.imul;var T=global.Math.min;var U=global.Math.max;var V=global.Math.clz32;var W=env.abort;var X=env.assert;var Y=env.enlargeMemory;var Z=env.getTotalMemory;var _=env.abortOnCannotGrowMemory;var $=env.invoke_viiiii;var aa=env.invoke_vid;var ba=env.invoke_vi;var ca=env.invoke_viiidii;var da=env.invoke_vii;var ea=env.invoke_iiiiiiiiiii;var fa=env.invoke_ii;var ga=env.invoke_viidi;var ha=env.invoke_viddiii;var ia=env.invoke_vidii;var ja=env.invoke_iiiii;var ka=env.invoke_vidi;var la=env.invoke_diiiiiiii;var ma=env.invoke_viiiiddddiid;var na=env.invoke_diiiii;var oa=env.invoke_vidd;var pa=env.invoke_iiii;var qa=env.invoke_viiiiid;var ra=env.invoke_viiiiii;var sa=env.invoke_iiid;var ta=env.invoke_di;var ua=env.invoke_iiiiiii;var va=env.invoke_diiidii;var wa=env.invoke_viidii;var xa=env.invoke_viiiiiii;var ya=env.invoke_viiiiiiiii;var za=env.invoke_viiiiiiiiii;var Aa=env.invoke_iii;var Ba=env.invoke_diii;var Ca=env.invoke_diiiiiiiiii;var Da=env.invoke_viiiid;var Ea=env.invoke_diiiiiiiii;var Fa=env.invoke_did;var Ga=env.invoke_viiiidddddidi;var Ha=env.invoke_diidii;var Ia=env.invoke_diiii;var Ja=env.invoke_iiiiiiiiii;var Ka=env.invoke_viiid;var La=env.invoke_viii;var Ma=env.invoke_v;var Na=env.invoke_viid;var Oa=env.invoke_iidid;var Pa=env.invoke_viiii;var Qa=env._pthread_getspecific;var Ra=env.___cxa_begin_catch;var Sa=env._pthread_setspecific;var Ta=env._pthread_key_create;var Ua=env._abort;var Va=env.___setErrNo;var Wa=env.___syscall6;var Xa=env._llvm_trap;var Ya=env._llvm_pow_f32;var Za=env._pthread_once;var _a=env._emscripten_memcpy_big;var $a=env.___gxx_personality_v0;var ab=env.___syscall140;var bb=env.___resumeException;var cb=env._emscripten_asm_const_diiiiiiii;var db=env.___cxa_find_matching_catch;var eb=env.___cxa_pure_virtual;var fb=env.___syscall146;var gb=env.__ZSt18uncaught_exceptionv;var hb=0;
// EMSCRIPTEN_START_FUNCS
function hf(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0.0,h=0,i=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0;j=c[a+28>>2]|0;k=c[a+32>>2]|0;e=c[b+8>>2]|0;g[e>>2]=1.0;h=c[b+24>>2]|0;g[e+(h+1<<2)>>2]=1.0;g[e+((h<<1)+2<<2)>>2]=1.0;l=+g[a+300>>2];q=+g[a+304>>2];f=+g[a+308>>2];o=+g[j+4>>2]*l+ +g[j+8>>2]*q+ +g[j+12>>2]*f;m=l*+g[j+20>>2]+q*+g[j+24>>2]+f*+g[j+28>>2];f=l*+g[j+36>>2]+q*+g[j+40>>2]+f*+g[j+44>>2];e=c[b+12>>2]|0;c[e>>2]=0;g[e+4>>2]=f;g[e+8>>2]=-m;g[e+12>>2]=0.0;g[e+(h<<2)>>2]=-f;c[e+(h<<2)+4>>2]=0;g[e+(h<<2)+8>>2]=o;g[e+(h<<2)+12>>2]=0.0;g[e+(h<<1<<2)>>2]=m;g[e+(h<<1<<2)+4>>2]=-o;c[e+(h<<1<<2)+8>>2]=0;g[e+(h<<1<<2)+12>>2]=0.0;e=c[b+16>>2]|0;g[e>>2]=-1.0;g[e+(h+1<<2)>>2]=-1.0;g[e+((h<<1)+2<<2)>>2]=-1.0;q=+g[a+316>>2];l=+g[a+320>>2];d=+g[a+324>>2];p=+g[k+4>>2]*q+ +g[k+8>>2]*l+ +g[k+12>>2]*d;n=q*+g[k+20>>2]+l*+g[k+24>>2]+d*+g[k+28>>2];d=q*+g[k+36>>2]+l*+g[k+40>>2]+d*+g[k+44>>2];h=c[b+20>>2]|0;e=c[b+24>>2]|0;c[h>>2]=0;g[h+4>>2]=-d;g[h+8>>2]=n;g[h+12>>2]=0.0;g[h+(e<<2)>>2]=d;c[h+(e<<2)+4>>2]=0;g[h+(e<<2)+8>>2]=-p;g[h+(e<<2)+12>>2]=0.0;g[h+(e<<1<<2)>>2]=-n;g[h+(e<<1<<2)+4>>2]=p;c[h+(e<<1<<2)+8>>2]=0;g[h+(e<<1<<2)+12>>2]=0.0;h=c[a+332>>2]|0;l=+g[((h&1|0)==0?b+4|0:a+336|0)>>2]*+g[b>>2];i=c[b+28>>2]|0;g[i>>2]=l*(p+ +g[k+52>>2]-o-+g[j+52>>2]);g[i+(e<<2)>>2]=l*(n+ +g[k+56>>2]-m-+g[j+56>>2]);g[i+(e<<1<<2)>>2]=l*(d+ +g[k+60>>2]-f-+g[j+60>>2]);if(h&2|0){k=c[b+32>>2]|0;c[k>>2]=c[a+340>>2];c[k+(e<<2)>>2]=c[a+340>>2];c[k+(e<<1<<2)>>2]=c[a+340>>2]}f=+g[a+356>>2];if(f>0.0){g[c[b+36>>2]>>2]=-f;g[c[b+40>>2]>>2]=f;d=+g[a+356>>2]}else d=f;if(d>0.0){g[(c[b+36>>2]|0)+(e<<2)>>2]=-f;g[(c[b+40>>2]|0)+(e<<2)>>2]=f;d=+g[a+356>>2]}if(!(d>0.0)){j=a+352|0;j=c[j>>2]|0;k=b+48|0;c[k>>2]=j;return}g[(c[b+36>>2]|0)+(e<<1<<2)>>2]=-f;g[(c[b+40>>2]|0)+(e<<1<<2)>>2]=f;j=a+352|0;j=c[j>>2]|0;k=b+48|0;c[k>>2]=j;return}function jf(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0;B=(a[b+68>>0]|0)!=0;C=B?e:d;B=B?d:e;z=c[b+52>>2]|0;if((z|0)<=0){x=1.0;return +x}A=(c[C+192>>2]|0)+28|0;j=+g[C+4>>2];u=+g[C+8>>2];v=+g[C+12>>2];w=c[C+16>>2]|0;x=+g[C+20>>2];k=+g[C+24>>2];l=+g[C+28>>2];e=c[C+32>>2]|0;m=+g[C+36>>2];n=+g[C+40>>2];o=+g[C+44>>2];p=c[C+48>>2]|0;q=+g[C+52>>2];r=+g[C+56>>2];s=+g[C+60>>2];t=c[C+64>>2]|0;i=1.0;d=0;y=c[C+300>>2]|0;do{E=c[A>>2]|0;P=+g[E+(d*80|0)>>2];O=+g[E+(d*80|0)+16>>2];N=+g[E+(d*80|0)+32>>2];M=+g[E+(d*80|0)+4>>2];L=+g[E+(d*80|0)+20>>2];K=+g[E+(d*80|0)+36>>2];J=+g[E+(d*80|0)+8>>2];I=+g[E+(d*80|0)+24>>2];H=+g[E+(d*80|0)+40>>2];G=+g[E+(d*80|0)+48>>2];F=+g[E+(d*80|0)+52>>2];D=+g[E+(d*80|0)+56>>2];c[C+300>>2]=y+1;g[C+4>>2]=j*P+u*O+v*N;g[C+8>>2]=j*M+u*L+v*K;g[C+12>>2]=j*J+u*I+v*H;g[C+16>>2]=0.0;g[C+20>>2]=x*P+k*O+l*N;g[C+24>>2]=x*M+k*L+l*K;g[C+28>>2]=x*J+k*I+l*H;g[C+32>>2]=0.0;g[C+36>>2]=m*P+n*O+o*N;g[C+40>>2]=m*M+n*L+o*K;g[C+44>>2]=m*J+n*I+o*H;g[C+48>>2]=0.0;g[C+52>>2]=q+(j*G+u*F+v*D);g[C+56>>2]=r+(x*G+k*F+l*D);g[C+60>>2]=s+(m*G+n*F+o*D);g[C+64>>2]=0.0;E=c[(c[b+60>>2]|0)+(d<<2)>>2]|0;D=+wb[c[(c[E>>2]|0)+12>>2]&15](E,C,B,f,h);i=D<i?D:i;y=(c[C+300>>2]|0)+1|0;c[C+300>>2]=y;g[C+4>>2]=j;g[C+8>>2]=u;g[C+12>>2]=v;c[C+16>>2]=w;g[C+20>>2]=x;g[C+24>>2]=k;g[C+28>>2]=l;c[C+32>>2]=e;g[C+36>>2]=m;g[C+40>>2]=n;g[C+44>>2]=o;c[C+48>>2]=p;g[C+52>>2]=q;g[C+56>>2]=r;g[C+60>>2]=s;c[C+64>>2]=t;d=d+1|0}while((d|0)!=(z|0));return +i}function kf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;c[6039]=(c[6039]|0)+1;i=(c[b+12>>2]|0)>(c[d+12>>2]|0);j=i?d:b;g=c[j+12>>2]|0;i=i?b:d;d=c[i+12>>2]|0;h=((d<<16|g)+~((d<<16|g)<<15)>>10^(d<<16|g)+~((d<<16|g)<<15))*9|0;h=((h>>6^h)+~((h>>6^h)<<11)>>16^(h>>6^h)+~((h>>6^h)<<11))&(c[a+12>>2]|0)+-1;b=c[(c[a+40>>2]|0)+(h<<2)>>2]|0;if((b|0)==-1){n=0;return n|0}f=c[a+16>>2]|0;while(1){if((c[(c[f+(b<<4)>>2]|0)+12>>2]|0)==(g|0)?(c[(c[f+(b<<4)+4>>2]|0)+12>>2]|0)==(d|0):0)break;b=c[(c[a+60>>2]|0)+(b<<2)>>2]|0;if((b|0)==-1){b=0;n=24;break}}if((n|0)==24)return b|0;d=f+(b<<4)|0;if(!d){n=0;return n|0}Ub[c[(c[a>>2]|0)+32>>2]&127](a,d,e);m=c[f+(b<<4)+12>>2]|0;l=d-(c[a+16>>2]|0)>>4;h=(c[a+40>>2]|0)+(h<<2)|0;b=c[h>>2]|0;f=c[a+60>>2]|0;if((b|0)!=(l|0)){d=b;while(1){g=f+(d<<2)|0;b=c[g>>2]|0;if((b|0)==(l|0))break;else d=b}b=c[f+(l<<2)>>2]|0;if((d|0)==-1)n=12;else c[g>>2]=b}else{b=c[f+(l<<2)>>2]|0;n=12}if((n|0)==12)c[h>>2]=b;k=(c[a+8>>2]|0)+-1|0;b=c[a+68>>2]|0;if(b|0)sb[c[(c[b>>2]|0)+12>>2]&31](b,j,i,e)|0;if((k|0)==(l|0)){c[a+8>>2]=(c[a+8>>2]|0)+-1;n=m;return n|0}j=c[a+16>>2]|0;h=c[(c[j+(k<<4)+4>>2]|0)+12>>2]<<16|c[(c[j+(k<<4)>>2]|0)+12>>2];h=(h+~(h<<15)>>10^h+~(h<<15))*9|0;h=((h>>6^h)+~((h>>6^h)<<11)>>16^(h>>6^h)+~((h>>6^h)<<11))&(c[a+12>>2]|0)+-1;i=(c[a+40>>2]|0)+(h<<2)|0;b=c[i>>2]|0;f=c[a+60>>2]|0;if((b|0)!=(k|0)){d=b;while(1){g=f+(d<<2)|0;b=c[g>>2]|0;if((b|0)==(k|0))break;else d=b}b=c[f+(k<<2)>>2]|0;if((d|0)==-1)n=22;else c[g>>2]=b}else{b=c[f+(k<<2)>>2]|0;n=22}if((n|0)==22)c[i>>2]=b;c[j+(l<<4)>>2]=c[j+(k<<4)>>2];c[j+(l<<4)+4>>2]=c[j+(k<<4)+4>>2];c[j+(l<<4)+8>>2]=c[j+(k<<4)+8>>2];c[j+(l<<4)+12>>2]=c[j+(k<<4)+12>>2];n=(c[a+40>>2]|0)+(h<<2)|0;c[(c[a+60>>2]|0)+(l<<2)>>2]=c[n>>2];c[n>>2]=l;c[a+8>>2]=(c[a+8>>2]|0)+-1;n=m;return n|0}function lf(a,b,d){a=a|0;b=+b;d=+d;var e=0,f=0,h=0,j=0.0,k=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0,x=0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0;z=i;i=i+16|0;y=+g[a+492>>2];w=c[a+192>>2]|0;v=+Cb[c[(c[w>>2]|0)+48>>2]&15](w);w=c[a+852>>2]|0;if((w|0)<=0){i=z;return}u=0;do{x=c[a+860>>2]|0;e=c[x+(u*104|0)>>2]|0;if(!(c[e+204>>2]&4)){p=(c[e+248>>2]&2|0)==0?0:e;if(p|0){s=+g[p+372>>2];n=+g[x+(u*104|0)+84>>2];m=+g[p+376>>2];o=+g[x+(u*104|0)+80>>2];t=+g[x+(u*104|0)+76>>2];r=+g[p+368>>2];e=(g[l>>2]=y*(s*n-m*o+ +g[p+352>>2]),c[l>>2]|0);f=(g[l>>2]=y*(+g[p+356>>2]+(m*t-n*r)),c[l>>2]|0);h=(g[l>>2]=y*(o*r-s*t+ +g[p+360>>2]),c[l>>2]|0)}else{e=0;f=0;h=0}q=c[x+(u*104|0)+24>>2]|0;r=+g[q+8>>2];s=+g[q+12>>2];t=+g[q+16>>2];o=r-+g[q+24>>2]-(c[l>>2]=e,+g[l>>2]);n=s-+g[q+28>>2]-(c[l>>2]=f,+g[l>>2]);d=t-+g[q+32>>2]-(c[l>>2]=h,+g[l>>2]);j=+g[x+(u*104|0)+4>>2];k=+g[x+(u*104|0)+8>>2];m=+g[x+(u*104|0)+12>>2];if(o*j+n*k+d*m<=1.1920928955078125e-007?(C=r*j+s*k+t*m+ +g[x+(u*104|0)+20>>2],D=+g[x+(u*104|0)+96>>2],C=(C<v?C:v)*+g[x+(u*104|0)+100>>2],B=(o-(o-j*(o*j+n*k+d*m))*D+j*C)*b,A=(n-(n-k*(o*j+n*k+d*m))*D+C*k)*b,o=(d-(d-m*(o*j+n*k+d*m))*D+C*m)*b,k=+g[x+(u*104|0)+28>>2]*B+ +g[x+(u*104|0)+32>>2]*A+ +g[x+(u*104|0)+36>>2]*o,m=B*+g[x+(u*104|0)+44>>2]+A*+g[x+(u*104|0)+48>>2]+o*+g[x+(u*104|0)+52>>2],o=B*+g[x+(u*104|0)+60>>2]+A*+g[x+(u*104|0)+64>>2]+o*+g[x+(u*104|0)+68>>2],g[z>>2]=k,g[z+4>>2]=m,g[z+8>>2]=o,g[z+12>>2]=0.0,n=+g[x+(u*104|0)+92>>2],g[q+8>>2]=r-k*n,g[q+12>>2]=s-n*m,g[q+16>>2]=t-n*o,p|0):0)Xi(p,z,x+(u*104|0)+76|0)}u=u+1|0}while((u|0)!=(w|0));i=z;return}function mf(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;k=c[b+204>>2]|0;Ub[c[(c[k>>2]|0)+8>>2]&127](k,b,c[b+24>>2]|0);k=c[b+308>>2]|0;if((k|0)>0){j=c[b+316>>2]|0;i=0;do{e=c[j+(i<<2)>>2]|0;d=c[e+772>>2]|0;e=c[e+776>>2]|0;if((d|0?(e|0?(c[d+204>>2]&3|0)==0:0):0)?(c[e+204>>2]&3|0)==0:0){g=c[d+208>>2]|0;d=c[e+208>>2]|0;h=c[(c[b+204>>2]|0)+16>>2]|0;e=c[h+(g<<3)>>2]|0;if((e|0)!=(g|0)){f=h+(g<<3)|0;do{g=h+(e<<3)|0;c[f>>2]=c[g>>2];g=c[g>>2]|0;f=h+(g<<3)|0;e=c[f>>2]|0}while((g|0)!=(e|0))}e=c[h+(d<<3)>>2]|0;if((e|0)!=(d|0)){f=h+(d<<3)|0;do{d=h+(e<<3)|0;c[f>>2]=c[d>>2];d=c[d>>2]|0;f=h+(d<<3)|0;e=c[f>>2]|0}while((d|0)!=(e|0))}if((g|0)!=(d|0)){c[h+(g<<3)>>2]=d;f=h+(d<<3)+4|0;c[f>>2]=(c[f>>2]|0)+(c[h+(g<<3)+4>>2]|0)}}i=i+1|0}while((i|0)!=(k|0))}k=c[b+212>>2]|0;if((k|0)<=0){m=c[b+204>>2]|0;l=c[m>>2]|0;l=l+12|0;l=c[l>>2]|0;mb[l&127](m,b);return}j=c[b+220>>2]|0;i=0;do{d=c[j+(i<<2)>>2]|0;if((a[d+20>>0]|0?(l=c[d+28>>2]|0,(c[l+204>>2]&3|0)==0):0)?(m=c[d+32>>2]|0,(c[m+204>>2]&3|0)==0):0){f=c[l+208>>2]|0;d=c[m+208>>2]|0;h=c[(c[b+204>>2]|0)+16>>2]|0;e=c[h+(f<<3)>>2]|0;if((e|0)!=(f|0)){g=h+(f<<3)|0;do{f=h+(e<<3)|0;c[g>>2]=c[f>>2];f=c[f>>2]|0;g=h+(f<<3)|0;e=c[g>>2]|0}while((f|0)!=(e|0))}e=c[h+(d<<3)>>2]|0;if((e|0)!=(d|0)){g=h+(d<<3)|0;do{d=h+(e<<3)|0;c[g>>2]=c[d>>2];d=c[d>>2]|0;g=h+(d<<3)|0;e=c[g>>2]|0}while((d|0)!=(e|0))}if((f|0)!=(d|0)){c[h+(f<<3)>>2]=d;g=h+(d<<3)+4|0;c[g>>2]=(c[g>>2]|0)+(c[h+(f<<3)+4>>2]|0)}}i=i+1|0}while((i|0)!=(k|0));m=c[b+204>>2]|0;l=c[m>>2]|0;l=l+12|0;l=c[l>>2]|0;mb[l&127](m,b);return}function nf(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0,k=0,m=0,n=0.0,o=0,p=0.0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;d=i;i=i+176|0;q=c[a+68>>2]|0;c[d+128>>2]=q;o=c[a+84>>2]|0;c[d+128+4>>2]=o;m=c[a+100>>2]|0;c[d+128+8>>2]=m;g[d+128+12>>2]=0.0;k=d+128+16|0;t=c[a+72>>2]|0;c[k>>2]=t;s=c[a+88>>2]|0;c[d+128+20>>2]=s;r=c[a+104>>2]|0;c[d+128+24>>2]=r;g[d+128+28>>2]=0.0;j=d+128+32|0;w=c[a+76>>2]|0;c[j>>2]=w;v=c[a+92>>2]|0;c[d+128+36>>2]=v;u=c[a+108>>2]|0;c[d+128+40>>2]=u;g[d+128+44>>2]=0.0;p=-+g[a+116>>2];n=-+g[a+120>>2];h=-+g[a+124>>2];e=(c[l>>2]=w,+g[l>>2])*p;e=e+(c[l>>2]=v,+g[l>>2])*n;e=e+(c[l>>2]=u,+g[l>>2])*h;f=(c[l>>2]=t,+g[l>>2])*p;f=f+(c[l>>2]=s,+g[l>>2])*n;f=f+(c[l>>2]=r,+g[l>>2])*h;p=(c[l>>2]=q,+g[l>>2])*p;n=p+(c[l>>2]=o,+g[l>>2])*n;h=n+(c[l>>2]=m,+g[l>>2])*h;c[d>>2]=c[d+128>>2];c[d+4>>2]=c[d+128+4>>2];c[d+8>>2]=c[d+128+8>>2];c[d+12>>2]=c[d+128+12>>2];c[d+16>>2]=c[k>>2];c[d+16+4>>2]=c[k+4>>2];c[d+16+8>>2]=c[k+8>>2];c[d+16+12>>2]=c[k+12>>2];c[d+32>>2]=c[j>>2];c[d+32+4>>2]=c[j+4>>2];c[d+32+8>>2]=c[j+8>>2];c[d+32+12>>2]=c[j+12>>2];g[d+48>>2]=h;g[d+52>>2]=f;g[d+56>>2]=e;g[d+60>>2]=0.0;Sg(d+64|0,a+4|0,d);c[b>>2]=c[d+64>>2];c[b+4>>2]=c[d+64+4>>2];c[b+8>>2]=c[d+64+8>>2];c[b+12>>2]=c[d+64+12>>2];c[b+16>>2]=c[d+64+16>>2];c[b+16+4>>2]=c[d+64+16+4>>2];c[b+16+8>>2]=c[d+64+16+8>>2];c[b+16+12>>2]=c[d+64+16+12>>2];c[b+32>>2]=c[d+64+32>>2];c[b+32+4>>2]=c[d+64+32+4>>2];c[b+32+8>>2]=c[d+64+32+8>>2];c[b+32+12>>2]=c[d+64+32+12>>2];c[b+48>>2]=c[d+64+48>>2];c[b+48+4>>2]=c[d+64+48+4>>2];c[b+48+8>>2]=c[d+64+48+8>>2];c[b+48+12>>2]=c[d+64+48+12>>2];i=d;return}function of(a,e,f){a=a|0;e=e|0;f=f|0;var h=0.0,i=0.0,j=0.0,k=0;ii(a,e,f)|0;c[e+52>>2]=c[a+552>>2];c[e+56>>2]=c[a+556>>2];c[e+60>>2]=c[a+560>>2];c[e+64>>2]=c[a+564>>2];c[e+68>>2]=c[a+568>>2];c[e+72>>2]=c[a+572>>2];c[e+76>>2]=c[a+576>>2];c[e+80>>2]=c[a+580>>2];c[e+84>>2]=c[a+584>>2];c[e+88>>2]=c[a+588>>2];c[e+92>>2]=c[a+592>>2];c[e+96>>2]=c[a+596>>2];c[e+100>>2]=c[a+600>>2];c[e+104>>2]=c[a+604>>2];c[e+108>>2]=c[a+608>>2];c[e+112>>2]=c[a+612>>2];c[e+116>>2]=c[a+616>>2];c[e+120>>2]=c[a+620>>2];c[e+124>>2]=c[a+624>>2];c[e+128>>2]=c[a+628>>2];c[e+132>>2]=c[a+632>>2];c[e+136>>2]=c[a+636>>2];c[e+140>>2]=c[a+640>>2];c[e+144>>2]=c[a+644>>2];c[e+148>>2]=c[a+648>>2];c[e+152>>2]=c[a+652>>2];c[e+156>>2]=c[a+656>>2];c[e+160>>2]=c[a+660>>2];c[e+164>>2]=c[a+664>>2];c[e+168>>2]=c[a+668>>2];c[e+172>>2]=c[a+672>>2];c[e+176>>2]=c[a+676>>2];f=b[a+736>>1]|0;c[e+184>>2]=f&255;c[e+188>>2]=(f&65535)>>>8&65535;c[e+196>>2]=c[a+684>>2];c[e+192>>2]=c[a+680>>2];c[e+180>>2]=d[a+740>>0];i=+g[a+688>>2];j=+g[a+692>>2];h=+jh(i-j,6.2831854820251465);if(!(h<-3.1415927410125732)){if(h>3.1415927410125732)h=h+-6.2831854820251465}else h=h+6.2831854820251465;g[e+200>>2]=h;h=+jh(i+j,6.2831854820251465);if(h<-3.1415927410125732){j=h+6.2831854820251465;f=e+204|0;g[f>>2]=j;f=a+696|0;f=c[f>>2]|0;k=e+208|0;c[k>>2]=f;k=a+700|0;k=c[k>>2]|0;f=e+212|0;c[f>>2]=k;a=a+704|0;a=c[a>>2]|0;e=e+216|0;c[e>>2]=a;return 12121}if(!(h>3.1415927410125732)){j=h;k=e+204|0;g[k>>2]=j;k=a+696|0;k=c[k>>2]|0;f=e+208|0;c[f>>2]=k;f=a+700|0;f=c[f>>2]|0;k=e+212|0;c[k>>2]=f;a=a+704|0;a=c[a>>2]|0;k=e+216|0;c[k>>2]=a;return 12121}j=h+-6.2831854820251465;k=e+204|0;g[k>>2]=j;k=a+696|0;k=c[k>>2]|0;f=e+208|0;c[f>>2]=k;f=a+700|0;f=c[f>>2]|0;k=e+212|0;c[k>>2]=f;a=a+704|0;a=c[a>>2]|0;k=e+216|0;c[k>>2]=a;return 12121}function pf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=c[b+4>>2]|0;if((i|0)==(c[b+8>>2]|0)?(h=i|0?i<<1:1,(i|0)<(h|0)):0){if(!h){e=0;g=i}else{c[6324]=(c[6324]|0)+1;e=ic((h*244|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}g=c[b+4>>2]|0}if((g|0)>0){f=0;do{k=e+(f*244|0)|0;j=c[b+12>>2]|0;l=j+(f*244|0)|0;c[k>>2]=c[l>>2];c[k+4>>2]=c[l+4>>2];c[k+8>>2]=c[l+8>>2];c[k+12>>2]=c[l+12>>2];k=e+(f*244|0)+16|0;l=j+(f*244|0)+16|0;c[k>>2]=c[l>>2];c[k+4>>2]=c[l+4>>2];c[k+8>>2]=c[l+8>>2];c[k+12>>2]=c[l+12>>2];k=e+(f*244|0)+32|0;l=j+(f*244|0)+32|0;c[k>>2]=c[l>>2];c[k+4>>2]=c[l+4>>2];c[k+8>>2]=c[l+8>>2];c[k+12>>2]=c[l+12>>2];k=e+(f*244|0)+48|0;l=j+(f*244|0)+48|0;c[k>>2]=c[l>>2];c[k+4>>2]=c[l+4>>2];c[k+8>>2]=c[l+8>>2];c[k+12>>2]=c[l+12>>2];Lm(e+(f*244|0)+64|0,j+(f*244|0)+64|0,180)|0;f=f+1|0}while((f|0)!=(g|0))}f=c[b+12>>2]|0;if(f|0){if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=e;c[b+8>>2]=h;e=c[b+4>>2]|0}else e=i;c[b+4>>2]=e+1;l=c[b+12>>2]|0;c[l+(i*244|0)>>2]=c[d>>2];c[l+(i*244|0)+4>>2]=c[d+4>>2];c[l+(i*244|0)+8>>2]=c[d+8>>2];c[l+(i*244|0)+12>>2]=c[d+12>>2];c[l+(i*244|0)+16>>2]=c[d+16>>2];c[l+(i*244|0)+16+4>>2]=c[d+16+4>>2];c[l+(i*244|0)+16+8>>2]=c[d+16+8>>2];c[l+(i*244|0)+16+12>>2]=c[d+16+12>>2];c[l+(i*244|0)+32>>2]=c[d+32>>2];c[l+(i*244|0)+32+4>>2]=c[d+32+4>>2];c[l+(i*244|0)+32+8>>2]=c[d+32+8>>2];c[l+(i*244|0)+32+12>>2]=c[d+32+12>>2];c[l+(i*244|0)+48>>2]=c[d+48>>2];c[l+(i*244|0)+48+4>>2]=c[d+48+4>>2];c[l+(i*244|0)+48+8>>2]=c[d+48+8>>2];c[l+(i*244|0)+48+12>>2]=c[d+48+12>>2];Lm(l+(i*244|0)+64|0,d+64|0,180)|0;return (c[b+12>>2]|0)+(i*244|0)|0}function qf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=i;i=i+32|0;a[p+16>>0]=1;c[p+12>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;e=c[b+8>>2]|0;if((e|0)>0){m=0;g=0;f=0;h=0;do{k=c[b+16>>2]|0;l=k+(m<<4)|0;if((g|0)==(h|0)){g=h|0?h<<1:1;if((h|0)<(g|0)){if((g|0)!=0?(c[6324]=(c[6324]|0)+1,n=ic((g<<4|3)+16|0)|0,(n|0)!=0):0){c[(n+4+15&-16)+-4>>2]=n;f=n+4+15&-16}else f=0;if((h|0)>0){e=0;do{j=c[p+12>>2]|0;c[f+(e<<4)>>2]=c[j+(e<<4)>>2];c[f+(e<<4)+4>>2]=c[j+(e<<4)+4>>2];c[f+(e<<4)+8>>2]=c[j+(e<<4)+8>>2];c[f+(e<<4)+12>>2]=c[j+(e<<4)+12>>2];e=e+1|0}while((e|0)!=(h|0))}e=c[p+12>>2]|0;if(e|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);c[p+12>>2]=0}a[p+16>>0]=1;c[p+12>>2]=f;c[p+8>>2]=g;j=h;h=g;e=c[b+8>>2]|0}else j=h}else j=g;c[f+(j<<4)>>2]=c[l>>2];c[f+(j<<4)+4>>2]=c[k+(m<<4)+4>>2];c[f+(j<<4)+8>>2]=c[k+(m<<4)+8>>2];c[f+(j<<4)+12>>2]=c[k+(m<<4)+12>>2];g=j+1|0;c[p+4>>2]=g;m=m+1|0}while((m|0)<(e|0));if((j|0)>-1){f=c[p+12>>2]|0;e=0;while(1){sb[c[(c[b>>2]|0)+12>>2]&31](b,c[f+(e<<4)>>2]|0,c[f+(e<<4)+4>>2]|0,d)|0;if((e|0)<(j|0))e=e+1|0;else break}}}else g=0;if((c[b+52>>2]|0)>0){f=c[b+60>>2]|0;e=0;do{c[f+(e<<2)>>2]=-1;e=e+1|0}while((e|0)<(c[b+52>>2]|0))}if((g|0)<=1)if((g|0)<=0){e=c[p+12>>2]|0;if(!e){i=p;return}}else o=23;else{Gd(p,0,g+-1|0);o=23}if((o|0)==23){e=c[p+12>>2]|0;f=0;do{yb[c[(c[b>>2]|0)+8>>2]&63](b,c[e+(f<<4)>>2]|0,c[e+(f<<4)+4>>2]|0)|0;f=f+1|0}while((f|0)<(g|0))}c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);c[p+12>>2]=0;i=p;return}function rf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0;l=i;i=i+64|0;n=+g[a+20>>2];u=+g[a+40>>2];p=+g[a+24>>2];s=+g[a+36>>2];t=+g[a+32>>2];m=+g[a+16>>2];k=+g[a>>2];j=+g[a+4>>2];q=+g[a+8>>2];h=1.0/((n*u-p*s)*k+j*(p*t-u*m)+(s*m-n*t)*q);z=+g[b>>2];y=+g[b+4>>2];A=+g[b+8>>2];x=+g[b+16>>2];w=+g[b+20>>2];v=+g[b+24>>2];r=+g[b+32>>2];o=+g[b+36>>2];f=+g[b+40>>2];g[l+16>>2]=A*(s*m-n*t)*h+(z*(n*u-p*s)*h+y*(p*t-u*m)*h);g[l+16+4>>2]=A*(t*j-s*k)*h+(z*(s*q-u*j)*h+y*(u*k-t*q)*h);g[l+16+8>>2]=A*(n*k-m*j)*h+(z*(p*j-n*q)*h+y*(m*q-p*k)*h);g[l+16+12>>2]=0.0;g[l+16+16>>2]=(n*u-p*s)*h*x+(p*t-u*m)*h*w+(s*m-n*t)*h*v;g[l+16+20>>2]=(s*q-u*j)*h*x+(u*k-t*q)*h*w+(t*j-s*k)*h*v;g[l+16+24>>2]=(p*j-n*q)*h*x+(m*q-p*k)*h*w+(n*k-m*j)*h*v;g[l+16+28>>2]=0.0;g[l+16+32>>2]=(n*u-p*s)*h*r+(p*t-u*m)*h*o+(s*m-n*t)*h*f;g[l+16+36>>2]=(s*q-u*j)*h*r+(u*k-t*q)*h*o+(t*j-s*k)*h*f;g[l+16+40>>2]=(p*j-n*q)*h*r+(m*q-p*k)*h*o+(n*k-m*j)*h*f;g[l+16+44>>2]=0.0;Jg(l+16|0,l);f=+g[l>>2];h=+g[l+4>>2];j=+g[l+8>>2];m=+g[l+12>>2];k=1.0/+G(+(f*f+h*h+j*j+m*m));g[l>>2]=f*k;g[l+4>>2]=h*k;g[l+8>>2]=j*k;g[l+12>>2]=m*k;m=m*k<-1.0?-1.0:m*k;g[e>>2]=+L(+(m>1.0?1.0:m))*2.0;g[d>>2]=f*k;g[d+4>>2]=h*k;g[d+8>>2]=j*k;g[d+12>>2]=0.0;if(f*k*f*k+h*k*h*k+j*k*j*k<1.4210854715202004e-014){c[d>>2]=1065353216;c[d+4>>2]=0;c[d+8>>2]=0;g[d+12>>2]=0.0;i=l;return}else{A=1.0/+G(+(f*k*f*k+h*k*h*k+j*k*j*k));g[d>>2]=f*k*A;g[d+4>>2]=A*h*k;g[d+8>>2]=A*j*k;i=l;return}}function sf(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,i=0,j=0,k=0;c[b+8>>2]=0;c[b+12>>2]=-1;c[b>>2]=7100;a[b+32>>0]=1;c[b+28>>2]=0;c[b+20>>2]=0;c[b+24>>2]=0;c[b+36>>2]=1566444395;c[b+40>>2]=1566444395;c[b+44>>2]=1566444395;g[b+48>>2]=0.0;c[b+52>>2]=-581039253;c[b+56>>2]=-581039253;c[b+60>>2]=-581039253;g[b+64>>2]=0.0;c[b+68>>2]=0;c[b+72>>2]=1;g[b+76>>2]=0.0;c[b+80>>2]=1065353216;c[b+84>>2]=1065353216;c[b+88>>2]=1065353216;g[b+92>>2]=0.0;c[b+4>>2]=31;if(d){c[6324]=(c[6324]|0)+1;d=ic(79)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}a[d+36>>0]=1;c[d+32>>2]=0;c[d+24>>2]=0;c[d+28>>2]=0;a[d+56>>0]=1;c[d+52>>2]=0;c[d+44>>2]=0;c[d+48>>2]=0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=-1;c[d+12>>2]=0;c[d+16>>2]=0;c[b+68>>2]=d;d=c[b+24>>2]|0}else d=0;if((d|0)>=(e|0))return;if((e|0)!=0?(c[6324]=(c[6324]|0)+1,f=ic((e*80|3)+16|0)|0,(f|0)!=0):0){c[(f+4+15&-16)+-4>>2]=f;h=f+4+15&-16}else h=0;f=c[b+20>>2]|0;if((f|0)>0){d=0;do{i=h+(d*80|0)|0;j=c[b+28>>2]|0;k=j+(d*80|0)|0;c[i>>2]=c[k>>2];c[i+4>>2]=c[k+4>>2];c[i+8>>2]=c[k+8>>2];c[i+12>>2]=c[k+12>>2];i=h+(d*80|0)+16|0;k=j+(d*80|0)+16|0;c[i>>2]=c[k>>2];c[i+4>>2]=c[k+4>>2];c[i+8>>2]=c[k+8>>2];c[i+12>>2]=c[k+12>>2];i=h+(d*80|0)+32|0;k=j+(d*80|0)+32|0;c[i>>2]=c[k>>2];c[i+4>>2]=c[k+4>>2];c[i+8>>2]=c[k+8>>2];c[i+12>>2]=c[k+12>>2];i=h+(d*80|0)+48|0;k=j+(d*80|0)+48|0;c[i>>2]=c[k>>2];c[i+4>>2]=c[k+4>>2];c[i+8>>2]=c[k+8>>2];c[i+12>>2]=c[k+12>>2];i=h+(d*80|0)+64|0;j=j+(d*80|0)+64|0;c[i>>2]=c[j>>2];c[i+4>>2]=c[j+4>>2];c[i+8>>2]=c[j+8>>2];c[i+12>>2]=c[j+12>>2];d=d+1|0}while((d|0)!=(f|0))}d=c[b+28>>2]|0;if(d|0){if(a[b+32>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+28>>2]=0}a[b+32>>0]=1;c[b+28>>2]=h;c[b+24>>2]=e;return}function tf(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=c[b+12>>2]|0;k=c[b+32>>2]|0;if((k|0)>=(j|0))return;do if((c[b+36>>2]|0)<(j|0)){if(!j){d=0;f=k}else{c[6324]=(c[6324]|0)+1;d=ic((j<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}f=c[b+32>>2]|0}g=c[b+40>>2]|0;if((f|0)<=0){if(!g){a[b+44>>0]=1;c[b+40>>2]=d;c[b+36>>2]=j;i=b+40|0;break}}else{e=0;do{c[d+(e<<2)>>2]=c[g+(e<<2)>>2];e=e+1|0}while((e|0)!=(f|0))}if(a[b+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}a[b+44>>0]=1;c[b+40>>2]=d;c[b+36>>2]=j;i=b+40|0}else{i=b+40|0;d=c[b+40>>2]|0}while(0);yn(d+(k<<2)|0,0,(j<<2)-(k<<2)|0)|0;c[b+32>>2]=j;h=c[b+52>>2]|0;if((h|0)<(j|0)){do if((c[b+56>>2]|0)<(j|0)){if(!j){d=0;f=h}else{c[6324]=(c[6324]|0)+1;d=ic((j<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}f=c[b+52>>2]|0}g=c[b+60>>2]|0;if((f|0)<=0){if(!g){a[b+64>>0]=1;c[b+60>>2]=d;c[b+56>>2]=j;break}}else{e=0;do{c[d+(e<<2)>>2]=c[g+(e<<2)>>2];e=e+1|0}while((e|0)!=(f|0))}if(a[b+64>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}a[b+64>>0]=1;c[b+60>>2]=d;c[b+56>>2]=j}else d=c[b+60>>2]|0;while(0);yn(d+(h<<2)|0,0,(j<<2)-(h<<2)|0)|0}c[b+52>>2]=j;if((j|0)>0){yn(c[i>>2]|0,-1,j<<2|0)|0;yn(c[b+60>>2]|0,-1,j<<2|0)|0}if((k|0)<=0)return;g=c[b+16>>2]|0;e=c[i>>2]|0;f=c[b+60>>2]|0;d=0;do{j=c[(c[g+(d<<4)+4>>2]|0)+12>>2]<<16|c[(c[g+(d<<4)>>2]|0)+12>>2];j=(j+~(j<<15)>>10^j+~(j<<15))*9|0;j=e+((((j>>6^j)+~((j>>6^j)<<11)>>16^(j>>6^j)+~((j>>6^j)<<11))&(c[b+12>>2]|0)+-1)<<2)|0;c[f+(d<<2)>>2]=c[j>>2];c[j>>2]=d;d=d+1|0}while((d|0)!=(k|0));return}function uf(b,d,e,f,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0;r=i;i=i+80|0;g[r+16+60>>2]=0.0;g[r+16+8>>2]=0.0;g[r+16+12>>2]=.10000000149011612;g[r+16+16>>2]=300.0;g[r+16>>2]=1.0;g[r+16+4>>2]=-1.0;g[r+16+28>>2]=0.0;g[r+16+32>>2]=.20000000298023224;g[r+16+36>>2]=0.0;g[r+16+40>>2]=0.0;g[r+16+20>>2]=1.0;g[r+16+24>>2]=.5;c[r+16+56>>2]=0;g[r+16+48>>2]=0.0;a[r+16+44>>0]=0;p=0;do{o=c[b+856+(p<<2)>>2]|0;n=a[b+788+p>>0]|0;if(!o){if(n<<24>>24){n=1;q=5}}else q=5;if((q|0)==5){q=0;g[r+16+40>>2]=0.0;c[r+16+56>>2]=o;c[r+16+52>>2]=c[b+840+(p<<2)>>2];c[r+16+48>>2]=c[b+824+(p<<2)>>2];c[r+16+20>>2]=c[b+732>>2];a[r+16+44>>0]=n;c[r+16+4>>2]=c[b+696+(p<<2)>>2];c[r+16+24>>2]=c[b+728>>2];c[r+16>>2]=c[b+680+(p<<2)>>2];g[r+16+16>>2]=0.0;c[r+16+12>>2]=c[b+808+(p<<2)>>2];c[r+16+8>>2]=c[b+792+(p<<2)>>2];c[r>>2]=c[b+1064+(p<<2)>>2];c[r+4>>2]=c[b+1080+(p<<2)>>2];c[r+8>>2]=c[b+1096+(p<<2)>>2];g[r+12>>2]=0.0;o=c[b+1304>>2]>>p*3;if(!(o&1))n=c[d+32>>2]|0;else n=b+740+(p<<2)|0;c[r+16+28>>2]=c[n>>2];if(!(o&2))n=c[d+32>>2]|0;else n=b+772+(p<<2)|0;c[r+16+36>>2]=c[n>>2];c[r+16+32>>2]=c[((o&4|0)==0?d+4|0:b+756+(p<<2)|0)>>2];if(!(a[b+1301>>0]|0))n=nd(b,r+16|0,f,h,j,k,l,m,d,e,r,0,0)|0;else{o=p+1|0;if(!(c[b+868+(((o|0)==3?0:o)<<6)+56>>2]|0))n=1;else n=(c[b+868+(((p+2|0)%3|0)<<6)+56>>2]|0)==0&1;n=nd(b,r+16|0,f,h,j,k,l,m,d,e,r,0,n)|0}e=n+e|0}p=p+1|0}while((p|0)!=3);i=r;return e|0}function vf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;if((c[b+8>>2]|0)>=(d|0))return;if((d|0)!=0?(c[6324]=(c[6324]|0)+1,e=ic((d*36|3)+16|0)|0,(e|0)!=0):0){c[(e+4+15&-16)+-4>>2]=e;o=e+4+15&-16}else o=0;j=c[b+4>>2]|0;if((j|0)>0){i=0;do{k=o+(i*36|0)|0;l=c[b+12>>2]|0;a[k+16>>0]=1;c[k+12>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;m=c[l+(i*36|0)+4>>2]|0;if((m|0)>0){c[6324]=(c[6324]|0)+1;e=ic((m<<2|3)+16|0)|0;if(!e)f=0;else{c[(e+4+15&-16)+-4>>2]=e;f=e+4+15&-16}g=c[k+4>>2]|0;h=c[k+12>>2]|0;if((g|0)<=0)if(!h){a[k+16>>0]=1;c[k+12>>2]=f;c[k+8>>2]=m;yn(f|0,0,m<<2|0)|0}else n=14;else{e=0;do{c[f+(e<<2)>>2]=c[h+(e<<2)>>2];e=e+1|0}while((e|0)!=(g|0));n=14}if((n|0)==14){n=0;if(a[k+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}a[k+16>>0]=1;c[k+12>>2]=f;c[k+8>>2]=m;yn(f|0,0,m<<2|0)|0}f=c[k+12>>2]|0;c[k+4>>2]=m;g=c[l+(i*36|0)+12>>2]|0;e=0;do{c[f+(e<<2)>>2]=c[g+(e<<2)>>2];e=e+1|0}while((e|0)!=(m|0))}else c[k+4>>2]=m;m=l+(i*36|0)+20|0;c[k+20>>2]=c[m>>2];c[k+20+4>>2]=c[m+4>>2];c[k+20+8>>2]=c[m+8>>2];c[k+20+12>>2]=c[m+12>>2];i=i+1|0}while((i|0)!=(j|0));f=c[b+4>>2]|0;if((f|0)>0){e=0;do{h=c[b+12>>2]|0;i=h+(e*36|0)+4|0;j=h+(e*36|0)+12|0;k=c[j>>2]|0;g=h+(e*36|0)+16|0;if(k|0){if(a[g>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[j>>2]=0}a[g>>0]=1;c[j>>2]=0;c[i>>2]=0;c[h+(e*36|0)+8>>2]=0;e=e+1|0}while((e|0)!=(f|0))}}e=c[b+12>>2]|0;if(e|0){if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=o;c[b+8>>2]=d;return}function wf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0;f=i;i=i+256|0;c[f+32>>2]=3760;l=f+32+36|0;c[l>>2]=c[b>>2];c[l+4>>2]=c[b+4>>2];c[l+8>>2]=c[b+8>>2];c[l+12>>2]=c[b+12>>2];m=f+32+52|0;c[m>>2]=c[d>>2];c[m+4>>2]=c[d+4>>2];c[m+8>>2]=c[d+8>>2];c[m+12>>2]=c[d+12>>2];c[f+32+212>>2]=a;c[f+32+216>>2]=e;c[f+32+68>>2]=1065353216;c[f+32+72>>2]=0;c[f+32+72+4>>2]=0;c[f+32+72+8>>2]=0;c[f+32+72+12>>2]=0;c[f+32+88>>2]=1065353216;c[f+32+92>>2]=0;c[f+32+92+4>>2]=0;c[f+32+92+8>>2]=0;c[f+32+92+12>>2]=0;c[f+32+108>>2]=1065353216;c[f+32+112>>2]=0;c[f+32+116>>2]=c[l>>2];c[f+32+116+4>>2]=c[l+4>>2];c[f+32+116+8>>2]=c[l+8>>2];c[f+32+116+12>>2]=c[l+12>>2];c[f+32+132>>2]=1065353216;c[f+32+136>>2]=0;c[f+32+136+4>>2]=0;c[f+32+136+8>>2]=0;c[f+32+136+12>>2]=0;c[f+32+152>>2]=1065353216;c[f+32+156>>2]=0;c[f+32+156+4>>2]=0;c[f+32+156+8>>2]=0;c[f+32+156+12>>2]=0;c[f+32+172>>2]=1065353216;c[f+32+176>>2]=0;c[f+32+180>>2]=c[d>>2];c[f+32+180+4>>2]=c[d+4>>2];c[f+32+180+8>>2]=c[d+8>>2];c[f+32+180+12>>2]=c[d+12>>2];n=+g[d>>2]-+g[b>>2];k=+g[d+4>>2]-+g[b+4>>2];j=+g[d+8>>2]-+g[b+8>>2];h=1.0/+G(+(n*n+k*k+j*j));q=n*h==0.0?10000000150474662.0e14:1.0/(n*h);g[f+32+4>>2]=q;p=k*h==0.0?10000000150474662.0e14:1.0/(k*h);g[f+32+8>>2]=p;o=j*h==0.0?10000000150474662.0e14:1.0/(j*h);g[f+32+12>>2]=o;c[f+32+20>>2]=q<0.0&1;c[f+32+24>>2]=p<0.0&1;c[f+32+28>>2]=o<0.0&1;g[f+32+32>>2]=n*h*(+g[m>>2]-+g[l>>2])+k*h*(+g[f+32+56>>2]-+g[f+32+40>>2])+j*h*(+g[f+32+60>>2]-+g[f+32+44>>2]);e=c[a+68>>2]|0;a=c[(c[e>>2]|0)+24>>2]|0;c[f+16>>2]=0;c[f+16+4>>2]=0;c[f+16+8>>2]=0;c[f+16+12>>2]=0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;Ab[a&7](e,b,d,f+32|0,f+16|0,f);i=f;return}function xf(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;j=c[b+12>>2]|0;k=c[b+28>>2]|0;if((k|0)>=(j|0))return;do if((c[b+32>>2]|0)<(j|0)){if(!j){d=0;f=k}else{c[6324]=(c[6324]|0)+1;d=ic((j<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}f=c[b+28>>2]|0}g=c[b+36>>2]|0;if((f|0)<=0){if(!g){a[b+40>>0]=1;c[b+36>>2]=d;c[b+32>>2]=j;i=b+36|0;break}}else{e=0;do{c[d+(e<<2)>>2]=c[g+(e<<2)>>2];e=e+1|0}while((e|0)!=(f|0))}if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}a[b+40>>0]=1;c[b+36>>2]=d;c[b+32>>2]=j;i=b+36|0}else{i=b+36|0;d=c[b+36>>2]|0}while(0);yn(d+(k<<2)|0,0,(j<<2)-(k<<2)|0)|0;c[b+28>>2]=j;h=c[b+48>>2]|0;if((h|0)<(j|0)){do if((c[b+52>>2]|0)<(j|0)){if(!j){d=0;f=h}else{c[6324]=(c[6324]|0)+1;d=ic((j<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}f=c[b+48>>2]|0}g=c[b+56>>2]|0;if((f|0)<=0){if(!g){a[b+60>>0]=1;c[b+56>>2]=d;c[b+52>>2]=j;break}}else{e=0;do{c[d+(e<<2)>>2]=c[g+(e<<2)>>2];e=e+1|0}while((e|0)!=(f|0))}if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}a[b+60>>0]=1;c[b+56>>2]=d;c[b+52>>2]=j}else d=c[b+56>>2]|0;while(0);yn(d+(h<<2)|0,0,(j<<2)-(h<<2)|0)|0}c[b+48>>2]=j;if((j|0)>0){yn(c[i>>2]|0,-1,j<<2|0)|0;yn(c[b+56>>2]|0,-1,j<<2|0)|0}if((k|0)<=0)return;g=c[b+16>>2]|0;e=c[i>>2]|0;f=c[b+56>>2]|0;d=0;do{j=c[g+(d*12|0)+4>>2]<<16|c[g+(d*12|0)>>2];j=(j+~(j<<15)>>10^j+~(j<<15))*9|0;j=e+((((j>>6^j)+~((j>>6^j)<<11)>>16^(j>>6^j)+~((j>>6^j)<<11))&(c[b+12>>2]|0)+-1)<<2)|0;c[f+(d<<2)>>2]=c[j>>2];c[j>>2]=d;d=d+1|0}while((d|0)!=(k|0));return}function yf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;g=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b>>2]=g;if(g|0)mb[c[(c[d>>2]|0)+48>>2]&127](d,e);c[b+4>>2]=c[a+4>>2];c[b+20>>2]=c[a+76>>2];e=c[a+20>>2]|0;c[b+16>>2]=e;c[b+12>>2]=0;if(!e)return 16261;g=yb[c[(c[d>>2]|0)+16>>2]&63](d,76,e)|0;e=c[g+8>>2]|0;c[b+12>>2]=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;if((c[b+16>>2]|0)>0){f=0;while(1){h=c[a+28>>2]|0;c[e+72>>2]=c[h+(f*80|0)+72>>2];c[e+64>>2]=Jb[c[(c[d>>2]|0)+28>>2]&31](d,c[h+(f*80|0)+64>>2]|0)|0;if(!(Jb[c[(c[d>>2]|0)+24>>2]&31](d,c[(c[a+28>>2]|0)+(f*80|0)+64>>2]|0)|0)){h=c[(c[d>>2]|0)+16>>2]|0;i=c[(c[a+28>>2]|0)+(f*80|0)+64>>2]|0;i=ob[c[(c[i>>2]|0)+52>>2]&127](i)|0;i=yb[h&63](d,i,1)|0;h=c[(c[a+28>>2]|0)+(f*80|0)+64>>2]|0;h=yb[c[(c[h>>2]|0)+56>>2]&63](h,c[i+8>>2]|0,d)|0;ib[c[(c[d>>2]|0)+20>>2]&31](d,i,h,1346455635,c[(c[a+28>>2]|0)+(f*80|0)+64>>2]|0)}i=c[a+28>>2]|0;c[e+68>>2]=c[i+(f*80|0)+68>>2];c[e>>2]=c[i+(f*80|0)>>2];c[e+4>>2]=c[i+(f*80|0)+4>>2];c[e+8>>2]=c[i+(f*80|0)+8>>2];c[e+12>>2]=c[i+(f*80|0)+12>>2];c[e+16>>2]=c[i+(f*80|0)+16>>2];c[e+20>>2]=c[i+(f*80|0)+20>>2];c[e+24>>2]=c[i+(f*80|0)+24>>2];c[e+28>>2]=c[i+(f*80|0)+28>>2];c[e+32>>2]=c[i+(f*80|0)+32>>2];c[e+36>>2]=c[i+(f*80|0)+36>>2];c[e+40>>2]=c[i+(f*80|0)+40>>2];c[e+44>>2]=c[i+(f*80|0)+44>>2];c[e+48>>2]=c[i+(f*80|0)+48>>2];c[e+52>>2]=c[i+(f*80|0)+52>>2];c[e+56>>2]=c[i+(f*80|0)+56>>2];c[e+60>>2]=c[i+(f*80|0)+60>>2];f=f+1|0;if((f|0)>=(c[b+16>>2]|0)){e=d;break}else e=e+76|0}}else e=d;ib[c[(c[e>>2]|0)+20>>2]&31](d,g,16236,1497453121,c[g+8>>2]|0);return 16261}function zf(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0;f=i;i=i+784|0;c[f+720>>2]=1065353216;c[f+720+4>>2]=0;c[f+720+4+4>>2]=0;c[f+720+4+8>>2]=0;c[f+720+4+12>>2]=0;c[f+720+20>>2]=1065353216;c[f+720+24>>2]=0;c[f+720+24+4>>2]=0;c[f+720+24+8>>2]=0;c[f+720+24+12>>2]=0;c[f+720+40>>2]=1065353216;e=f+720+44|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[f+544>>2]=3928;c[f+544+168>>2]=0;g[f+544+172>>2]=0.0;c[f+544+164>>2]=c[b+200>>2];e=c[b+196>>2]|0;c[f+488+8>>2]=0;c[f+488+12>>2]=-1;c[f+488+16>>2]=1065353216;c[f+488+20>>2]=1065353216;c[f+488+24>>2]=1065353216;g[f+488+28>>2]=0.0;c[f+488>>2]=8368;c[f+488+4>>2]=8;c[f+488+32>>2]=e;c[f+488+48>>2]=e;c[f+376+8>>2]=0;c[f+376+12>>2]=-1;c[f+376+16>>2]=1065353216;c[f+376+20>>2]=1065353216;c[f+376+24>>2]=1065353216;g[f+376+28>>2]=0.0;g[f+376+48>>2]=.03999999910593033;c[f+376+56>>2]=0;c[f+376>>2]=3956;c[f+376+4>>2]=1;c[f+376+60>>2]=c[d>>2];c[f+376+60+4>>2]=c[d+4>>2];c[f+376+60+8>>2]=c[d+8>>2];c[f+376+60+12>>2]=c[d+12>>2];c[f+376+76>>2]=c[d+16>>2];c[f+376+76+4>>2]=c[d+16+4>>2];c[f+376+76+8>>2]=c[d+16+8>>2];c[f+376+76+12>>2]=c[d+16+12>>2];c[f+376+92>>2]=c[d+32>>2];c[f+376+92+4>>2]=c[d+32+4>>2];c[f+376+92+8>>2]=c[d+32+8>>2];c[f+376+92+12>>2]=c[d+32+12>>2];g[f+16+308>>2]=9.999999747378752e-005;a[f+16+332>>0]=0;c[f>>2]=8940;c[f+4>>2]=f+16;c[f+8>>2]=f+488;c[f+12>>2]=f+376;if(Zc(f,b+4|0,b+68|0,f+720|0,f+720|0,f+544|0)|0?(h=+g[f+544+164>>2],+g[b+200>>2]>h):0)g[b+200>>2]=h;c[f+376>>2]=8236;e=c[f+376+56>>2]|0;if(!e){i=f;return}kb[c[c[e>>2]>>2]&255](e);e=c[f+376+56>>2]|0;if(!e){i=f;return}c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);i=f;return}function Af(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0;f=i;i=i+256|0;c[f+32>>2]=5688;l=f+32+36|0;c[l>>2]=c[b>>2];c[l+4>>2]=c[b+4>>2];c[l+8>>2]=c[b+8>>2];c[l+12>>2]=c[b+12>>2];m=f+32+52|0;c[m>>2]=c[d>>2];c[m+4>>2]=c[d+4>>2];c[m+8>>2]=c[d+8>>2];c[m+12>>2]=c[d+12>>2];c[f+32+212>>2]=a;c[f+32+216>>2]=e;c[f+32+68>>2]=1065353216;c[f+32+72>>2]=0;c[f+32+72+4>>2]=0;c[f+32+72+8>>2]=0;c[f+32+72+12>>2]=0;c[f+32+88>>2]=1065353216;c[f+32+92>>2]=0;c[f+32+92+4>>2]=0;c[f+32+92+8>>2]=0;c[f+32+92+12>>2]=0;c[f+32+108>>2]=1065353216;c[f+32+112>>2]=0;c[f+32+116>>2]=c[l>>2];c[f+32+116+4>>2]=c[l+4>>2];c[f+32+116+8>>2]=c[l+8>>2];c[f+32+116+12>>2]=c[l+12>>2];c[f+32+132>>2]=1065353216;c[f+32+136>>2]=0;c[f+32+136+4>>2]=0;c[f+32+136+8>>2]=0;c[f+32+136+12>>2]=0;c[f+32+152>>2]=1065353216;c[f+32+156>>2]=0;c[f+32+156+4>>2]=0;c[f+32+156+8>>2]=0;c[f+32+156+12>>2]=0;c[f+32+172>>2]=1065353216;c[f+32+176>>2]=0;c[f+32+180>>2]=c[d>>2];c[f+32+180+4>>2]=c[d+4>>2];c[f+32+180+8>>2]=c[d+8>>2];c[f+32+180+12>>2]=c[d+12>>2];n=+g[d>>2]-+g[b>>2];k=+g[d+4>>2]-+g[b+4>>2];j=+g[d+8>>2]-+g[b+8>>2];h=1.0/+G(+(n*n+k*k+j*j));q=n*h==0.0?999999984306749440.0:1.0/(n*h);g[f+32+4>>2]=q;p=k*h==0.0?999999984306749440.0:1.0/(k*h);g[f+32+8>>2]=p;o=j*h==0.0?999999984306749440.0:1.0/(j*h);g[f+32+12>>2]=o;c[f+32+20>>2]=q<0.0&1;c[f+32+24>>2]=p<0.0&1;c[f+32+28>>2]=o<0.0&1;g[f+32+32>>2]=n*h*(+g[m>>2]-+g[l>>2])+k*h*(+g[f+32+56>>2]-+g[f+32+40>>2])+j*h*(+g[f+32+60>>2]-+g[f+32+44>>2]);e=c[a+68>>2]|0;a=c[(c[e>>2]|0)+24>>2]|0;c[f+16>>2]=0;c[f+16+4>>2]=0;c[f+16+8>>2]=0;c[f+16+12>>2]=0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;Ab[a&7](e,b,d,f+32|0,f+16|0,f);i=f;return}function Bf(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0;h=i;i=i+128|0;if(!b){i=h;return}if(c[b+40>>2]|0){Bf(a,c[b+36>>2]|0,d+1|0,e,f);Bf(a,c[b+40>>2]|0,d+1|0,e,f)}if((d|0)<0){i=h;return}m=+g[b>>2];r=+g[b+16>>2];k=+g[b+4>>2];q=+g[b+20>>2];j=+g[b+8>>2];p=+g[b+24>>2];l=(m+r)*.5-(r-m)*.5;n=(k+q)*.5-(q-k)*.5;o=(j+p)*.5-(p-j)*.5;m=(m+r)*.5+(r-m)*.5;k=(k+q)*.5+(q-k)*.5;j=(j+p)*.5+(p-j)*.5;f=(c[b+40>>2]|0)==0?f:e;g[h>>2]=l;g[h+4>>2]=n;g[h+8>>2]=o;g[h+12>>2]=0.0;g[h+16>>2]=m;g[h+20>>2]=n;g[h+24>>2]=o;g[h+28>>2]=0.0;g[h+32>>2]=m;g[h+36>>2]=k;g[h+40>>2]=o;g[h+44>>2]=0.0;g[h+48>>2]=l;g[h+52>>2]=k;g[h+56>>2]=o;g[h+60>>2]=0.0;g[h+64>>2]=l;g[h+68>>2]=n;g[h+72>>2]=j;g[h+76>>2]=0.0;g[h+80>>2]=m;g[h+84>>2]=n;g[h+88>>2]=j;g[h+92>>2]=0.0;g[h+96>>2]=m;g[h+100>>2]=k;g[h+104>>2]=j;g[h+108>>2]=0.0;g[h+112>>2]=l;g[h+116>>2]=k;g[h+120>>2]=j;g[h+124>>2]=0.0;Yb[c[(c[a>>2]|0)+16>>2]&127](a,h,h+16|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+16|0,h+32|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+32|0,h+48|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+48|0,h,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+64|0,h+80|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+80|0,h+96|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+96|0,h+112|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+112|0,h+64|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h,h+64|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+16|0,h+80|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+32|0,h+96|0,f);Yb[c[(c[a>>2]|0)+16>>2]&127](a,h+48|0,h+112|0,f);i=h;return}function Cf(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0;r=i;i=i+96|0;m=r;n=m+96|0;do{c[m>>2]=0;m=m+4|0}while((m|0)<(n|0));if(!j)p=c[c[b+920>>2]>>2]|0;else p=j;j=c[b+812>>2]|0;if((j|0)==(c[b+816>>2]|0)?(q=j|0?j<<1:1,(j|0)<(q|0)):0){if(!q)o=0;else{c[6324]=(c[6324]|0)+1;j=ic((q*104|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}o=j;j=c[b+812>>2]|0}if((j|0)>0){k=0;do{m=o+(k*104|0)|0;l=(c[b+820>>2]|0)+(k*104|0)|0;n=m+104|0;do{c[m>>2]=c[l>>2];m=m+4|0;l=l+4|0}while((m|0)<(n|0));k=k+1|0}while((k|0)!=(j|0))}j=c[b+820>>2]|0;if(j|0){if(a[b+824>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[b+820>>2]=0}a[b+824>>0]=1;c[b+820>>2]=o;c[b+816>>2]=q;j=c[b+812>>2]|0}m=c[b+820>>2]|0;c[m+(j*104|0)>>2]=0;c[m+(j*104|0)+4>>2]=p;m=m+(j*104|0)+8|0;l=r;n=m+96|0;do{c[m>>2]=c[l>>2];m=m+4|0;l=l+4|0}while((m|0)<(n|0));q=c[b+812>>2]|0;c[b+812>>2]=q+1;p=c[b+820>>2]|0;l=c[b+760>>2]|0;c[p+(q*104|0)+8>>2]=l+(d*104|0);o=c[b+760>>2]|0;c[p+(q*104|0)+12>>2]=o+(e*104|0);m=c[b+760>>2]|0;c[p+(q*104|0)+16>>2]=m+(f*104|0);n=c[b+760>>2]|0;c[p+(q*104|0)+20>>2]=n+(h*104|0);z=+g[l+(d*104|0)+8>>2];w=+g[l+(d*104|0)+12>>2];A=+g[l+(d*104|0)+16>>2];t=+g[m+(f*104|0)+8>>2]-z;y=+g[m+(f*104|0)+12>>2]-w;v=+g[m+(f*104|0)+16>>2]-A;u=+g[n+(h*104|0)+8>>2]-z;x=+g[n+(h*104|0)+12>>2]-w;s=+g[n+(h*104|0)+16>>2]-A;g[p+(q*104|0)+24>>2]=(+g[o+(e*104|0)+16>>2]-A)*(t*x-y*u)+((+g[o+(e*104|0)+8>>2]-z)*(y*s-v*x)+(+g[o+(e*104|0)+12>>2]-w)*(v*u-t*s));a[b+964>>0]=1;i=r;return}function Df(a,b,c,d,e,f,h,i){a=a|0;b=+b;c=+c;d=+d;e=e|0;f=+f;h=+h;i=+i;var j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0;y=+g[e>>2];x=+g[e+16>>2];w=+g[e+32>>2];v=+g[e+4>>2];u=+g[e+20>>2];t=+g[e+36>>2];s=+g[e+8>>2];r=+g[e+24>>2];q=+g[e+40>>2];j=d-((y*0.0+x*-i+w*h)*0.0+(v*0.0+u*-i+t*h)*i+(s*0.0+r*-i+q*h)*-h)+c;o=0.0-((y*0.0+x*-i+w*h)*-i+(v*0.0+u*-i+t*h)*0.0+(s*0.0+r*-i+q*h)*f)+0.0;l=0.0-((y*0.0+x*-i+w*h)*h+(v*0.0+u*-i+t*h)*-f+(s*0.0+r*-i+q*h)*0.0)+0.0;m=0.0-((y*i+x*0.0+w*-f)*0.0+(v*i+u*0.0+t*-f)*i+(s*i+r*0.0+q*-f)*-h)+0.0;n=d-((y*i+x*0.0+w*-f)*-i+(v*i+u*0.0+t*-f)*0.0+(s*i+r*0.0+q*-f)*f)+c;k=0.0-((y*i+x*0.0+w*-f)*h+(v*i+u*0.0+t*-f)*-f+(s*i+r*0.0+q*-f)*0.0)+0.0;p=0.0-((y*-h+x*f+w*0.0)*0.0+(v*-h+u*f+t*0.0)*i+(s*-h+r*f+q*0.0)*-h)+0.0;i=0.0-((y*-h+x*f+w*0.0)*-i+(v*-h+u*f+t*0.0)*0.0+(s*-h+r*f+q*0.0)*f)+0.0;c=d-((y*-h+x*f+w*0.0)*h+(v*-h+u*f+t*0.0)*-f+(s*-h+r*f+q*0.0)*0.0)+c;d=1.0/(l*(i*m-n*p)+(j*(n*c-k*i)+o*(k*p-c*m)));g[a>>2]=(i*m-n*p)*d*0.0+(1.0/b*(n*c-k*i)*d+(k*p-c*m)*d*0.0);g[a+4>>2]=(p*o-i*j)*d*0.0+(1.0/b*(i*l-c*o)*d+(c*j-p*l)*d*0.0);g[a+8>>2]=(n*j-m*o)*d*0.0+(1.0/b*(k*o-n*l)*d+(m*l-k*j)*d*0.0);g[a+12>>2]=0.0;g[a+16>>2]=(i*m-n*p)*d*0.0+((n*c-k*i)*d*0.0+1.0/b*(k*p-c*m)*d);g[a+20>>2]=(p*o-i*j)*d*0.0+((i*l-c*o)*d*0.0+1.0/b*(c*j-p*l)*d);g[a+24>>2]=(n*j-m*o)*d*0.0+((k*o-n*l)*d*0.0+1.0/b*(m*l-k*j)*d);g[a+28>>2]=0.0;g[a+32>>2]=1.0/b*(i*m-n*p)*d+((n*c-k*i)*d*0.0+(k*p-c*m)*d*0.0);g[a+36>>2]=1.0/b*(p*o-i*j)*d+((i*l-c*o)*d*0.0+(c*j-p*l)*d*0.0);g[a+40>>2]=1.0/b*(n*j-m*o)*d+((k*o-n*l)*d*0.0+(m*l-k*j)*d*0.0);g[a+44>>2]=0.0;return}function Ef(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0;b=i;i=i+608|0;p=+g[d+116>>2]-+g[d+52>>2];o=+g[d+120>>2]-+g[d+56>>2];n=+g[d+124>>2]-+g[d+60>>2];j=+g[e+116>>2]-+g[e+52>>2];k=+g[e+120>>2]-+g[e+56>>2];l=+g[e+124>>2]-+g[e+60>>2];m=+g[d+272>>2];if(p*p+o*o+n*n<m*m?(p=+g[e+272>>2],j*j+k*k+l*l<p*p):0){p=1.0;i=b;return +p}h=c[d+192>>2]|0;f=c[e+268>>2]|0;c[b+552+8>>2]=0;c[b+552+12>>2]=-1;c[b+552+16>>2]=1065353216;c[b+552+20>>2]=1065353216;c[b+552+24>>2]=1065353216;g[b+552+28>>2]=0.0;c[b+552>>2]=8368;c[b+552+4>>2]=8;c[b+552+32>>2]=f;c[b+552+48>>2]=f;c[b+376>>2]=3928;g[b+376+164>>2]=999999984306749440.0;c[b+376+168>>2]=0;g[b+376+172>>2]=0.0;g[b+16+308>>2]=9.999999747378752e-005;a[b+16+332>>0]=0;c[b>>2]=8784;c[b+4>>2]=b+16;c[b+8>>2]=h;c[b+12>>2]=b+552;if(pd(b,d+4|0,d+68|0,e+4|0,e+68|0,b+376|0)|0){j=+g[b+376+164>>2];if(+g[d+264>>2]>j)g[d+264>>2]=j;if(+g[e+264>>2]>j)g[e+264>>2]=j;if(!(j<1.0))j=1.0}else j=1.0;h=c[e+192>>2]|0;f=c[d+268>>2]|0;c[b+552+8>>2]=0;c[b+552+12>>2]=-1;c[b+552+16>>2]=1065353216;c[b+552+20>>2]=1065353216;c[b+552+24>>2]=1065353216;g[b+552+28>>2]=0.0;c[b+552>>2]=8368;c[b+552+4>>2]=8;c[b+552+32>>2]=f;c[b+552+48>>2]=f;c[b+376>>2]=3928;g[b+376+164>>2]=999999984306749440.0;c[b+376+168>>2]=0;g[b+376+172>>2]=0.0;g[b+16+308>>2]=9.999999747378752e-005;a[b+16+332>>0]=0;c[b>>2]=8784;c[b+4>>2]=b+16;c[b+8>>2]=b+552;c[b+12>>2]=h;if(pd(b,d+4|0,d+68|0,e+4|0,e+68|0,b+376|0)|0){k=+g[b+376+164>>2];if(+g[d+264>>2]>k)g[d+264>>2]=k;if(+g[e+264>>2]>k)g[e+264>>2]=k;if(j>k)j=k}p=j;i=b;return +p}function Ff(d,e,f,g,h,j,k,l,m){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0;o=i;i=i+48|0;c[6324]=(c[6324]|0)+1;g=ic(83)|0;if(!g)n=0;else{c[(g+4+15&-16)+-4>>2]=g;n=g+4+15&-16}c[n>>2]=h;b[n+4>>1]=j;b[n+6>>1]=k;h=n+16|0;c[h>>2]=c[e>>2];c[h+4>>2]=c[e+4>>2];c[h+8>>2]=c[e+8>>2];c[h+12>>2]=c[e+12>>2];h=n+32|0;c[h>>2]=c[f>>2];c[h+4>>2]=c[f+4>>2];c[h+8>>2]=c[f+8>>2];c[h+12>>2]=c[f+12>>2];c[n+8>>2]=0;h=n+56|0;c[h>>2]=0;j=n+52|0;c[j>>2]=0;c[o+16>>2]=c[e>>2];c[o+16+4>>2]=c[e+4>>2];c[o+16+8>>2]=c[e+8>>2];c[o+16+12>>2]=c[e+12>>2];c[o+16+16>>2]=c[f>>2];c[o+16+16+4>>2]=c[f+4>>2];c[o+16+16+8>>2]=c[f+8>>2];c[o+16+16+12>>2]=c[f+12>>2];c[n+60>>2]=c[d+144>>2];g=(c[d+188>>2]|0)+1|0;c[d+188>>2]=g;c[n+12>>2]=g;g=c[d+8>>2]|0;if(!g){c[6324]=(c[6324]|0)+1;g=ic(63)|0;if(!g)g=0;else{c[(g+4+15&-16)+-4>>2]=g;g=g+4+15&-16}l=g;m=l+44|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(m|0))}else c[d+8>>2]=0;c[g+32>>2]=0;c[g+36>>2]=n;c[g+40>>2]=0;c[g>>2]=c[o+16>>2];c[g+4>>2]=c[o+16+4>>2];c[g+8>>2]=c[o+16+8>>2];c[g+12>>2]=c[o+16+12>>2];c[g+16>>2]=c[o+16+16>>2];c[g+20>>2]=c[o+16+20>>2];c[g+24>>2]=c[o+16+24>>2];c[g+28>>2]=c[o+16+28>>2];Ze(d+4|0,c[d+4>>2]|0,g);c[d+16>>2]=(c[d+16>>2]|0)+1;c[n+48>>2]=g;l=d+124+(c[d+144>>2]<<2)|0;c[j>>2]=0;c[h>>2]=c[l>>2];g=c[l>>2]|0;if(g|0)c[g+52>>2]=n;c[l>>2]=n;if(a[d+193>>0]|0){i=o;return n|0}c[o>>2]=5276;c[o+4>>2]=d;c[o+8>>2]=n;Mf(c[d+4>>2]|0,o+16|0,o);Mf(c[d+64>>2]|0,o+16|0,o);i=o;return n|0}function Gf(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0;q=i;i=i+48|0;p=c[b+760>>2]|0;a:do if(h?(l=c[b+772>>2]|0,(l|0)>0):0){j=c[b+780>>2]|0;h=0;while(1){k=c[j+(h*52|0)+8>>2]|0;if((k|0)==(p+(d*104|0)|0)?(c[j+(h*52|0)+12>>2]|0)==(p+(e*104|0)|0):0){h=25;break}if((k|0)==(p+(e*104|0)|0)?(c[j+(h*52|0)+12>>2]|0)==(p+(d*104|0)|0):0){h=25;break}h=h+1|0;if((h|0)>=(l|0))break a}if((h|0)==25){i=q;return}}while(0);l=q;m=l+44|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(m|0));if(!f)n=c[c[b+920>>2]>>2]|0;else n=f;h=c[b+772>>2]|0;if((h|0)==(c[b+776>>2]|0)?(o=h|0?h<<1:1,(h|0)<(o|0)):0){if(!o)f=0;else{c[6324]=(c[6324]|0)+1;h=ic((o*52|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}f=h;h=c[b+772>>2]|0}if((h|0)>0){j=0;do{l=f+(j*52|0)|0;k=(c[b+780>>2]|0)+(j*52|0)|0;m=l+52|0;do{c[l>>2]=c[k>>2];l=l+4|0;k=k+4|0}while((l|0)<(m|0));j=j+1|0}while((j|0)!=(h|0))}h=c[b+780>>2]|0;if(h|0){if(a[b+784>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+780>>2]=0}a[b+784>>0]=1;c[b+780>>2]=f;c[b+776>>2]=o;h=c[b+772>>2]|0}l=c[b+780>>2]|0;c[l+(h*52|0)>>2]=0;c[l+(h*52|0)+4>>2]=n;l=l+(h*52|0)+8|0;k=q;m=l+44|0;do{c[l>>2]=c[k>>2];l=l+4|0;k=k+4|0}while((l|0)<(m|0));o=c[b+772>>2]|0;c[b+772>>2]=o+1;n=c[b+780>>2]|0;c[n+(o*52|0)+8>>2]=p+(d*104|0);c[n+(o*52|0)+12>>2]=p+(e*104|0);t=+g[p+(d*104|0)+8>>2]-+g[p+(e*104|0)+8>>2];s=+g[p+(d*104|0)+12>>2]-+g[p+(e*104|0)+12>>2];r=+g[p+(d*104|0)+16>>2]-+g[p+(e*104|0)+16>>2];g[n+(o*52|0)+16>>2]=+G(+(t*t+s*s+r*r));a[b+964>>0]=1;i=q;return}function Hf(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0;e=i;i=i+128|0;G=c[(c[a+8>>2]|0)+28>>2]|0;h=c[G+(d*80|0)+64>>2]|0;f=c[a+12>>2]|0;x=+g[G+(d*80|0)>>2];D=+g[f>>2];w=+g[G+(d*80|0)+16>>2];C=+g[f+4>>2];v=+g[G+(d*80|0)+32>>2];B=+g[f+8>>2];u=+g[G+(d*80|0)+4>>2];t=+g[G+(d*80|0)+20>>2];s=+g[G+(d*80|0)+36>>2];r=+g[G+(d*80|0)+8>>2];p=+g[G+(d*80|0)+24>>2];n=+g[G+(d*80|0)+40>>2];A=+g[f+16>>2];z=+g[f+20>>2];y=+g[f+24>>2];q=+g[f+32>>2];o=+g[f+36>>2];m=+g[f+40>>2];F=+g[G+(d*80|0)+48>>2];E=+g[G+(d*80|0)+52>>2];j=+g[G+(d*80|0)+56>>2];l=+g[f+48>>2]+(D*F+C*E+B*j);k=A*F+z*E+y*j+ +g[f+52>>2];j=q*F+o*E+m*j+ +g[f+56>>2];g[e+56>>2]=x*D+w*C+v*B;g[e+56+4>>2]=D*u+C*t+B*s;g[e+56+8>>2]=D*r+C*p+B*n;g[e+56+12>>2]=0.0;g[e+56+16>>2]=x*A+w*z+v*y;g[e+56+20>>2]=u*A+t*z+s*y;g[e+56+24>>2]=r*A+p*z+n*y;g[e+56+28>>2]=0.0;g[e+56+32>>2]=x*q+w*o+v*m;g[e+56+36>>2]=u*q+t*o+s*m;g[e+56+40>>2]=r*q+p*o+n*m;g[e+56+44>>2]=0.0;g[e+56+48>>2]=l;g[e+56+52>>2]=k;g[e+56+56>>2]=j;g[e+56+60>>2]=0.0;f=c[a+4>>2]|0;c[e+32>>2]=0;c[e+32+4>>2]=h;c[e+32+8>>2]=f;c[e+32+12>>2]=e+56;c[e+32+16>>2]=-1;c[e+32+20>>2]=d;f=c[a+24>>2]|0;g[e+4>>2]=1.0;c[e+8>>2]=0;b[e+12>>1]=1;b[e+14>>1]=-1;c[e+16>>2]=0;c[e>>2]=5792;c[e+20>>2]=f;c[e+24>>2]=d;c[e+4>>2]=c[f+4>>2];c[e+16>>2]=c[f+16>>2];Vc(c[a+16>>2]|0,c[a+20>>2]|0,e+32|0,e);i=e;return}function If(b,d,e,f,h){b=b|0;d=+d;e=e|0;f=f|0;h=h|0;var j=0;j=i;i=i+144|0;c[b+164>>2]=1065353216;c[b+168>>2]=1065353216;c[b+172>>2]=1065353216;g[b+176>>2]=0.0;c[b+180>>2]=0;g[b+184>>2]=999999984306749440.0;c[b+188>>2]=0;c[b+188+4>>2]=0;c[b+188+8>>2]=0;c[b+188+12>>2]=0;c[b+204>>2]=1;c[b+208>>2]=-1;c[b+212>>2]=-1;c[b+216>>2]=1;g[b+220>>2]=0.0;g[b+224>>2]=.5;g[b+228>>2]=0.0;g[b+232>>2]=0.0;g[b+236>>2]=0.0;g[b+240>>2]=.10000000149011612;g[b+244>>2]=1.0e4;c[b+248>>2]=1;c[b+252>>2]=0;c[b+256>>2]=-1;c[b+260>>2]=-1;g[b+264>>2]=1.0;g[b+268>>2]=0.0;g[b+272>>2]=0.0;c[b+276>>2]=0;a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;c[b+288>>2]=0;c[b+300>>2]=0;c[b+4>>2]=1065353216;c[b+8>>2]=0;c[b+8+4>>2]=0;c[b+8+8>>2]=0;c[b+8+12>>2]=0;c[b+24>>2]=1065353216;c[b+28>>2]=0;c[b+28+4>>2]=0;c[b+28+8>>2]=0;c[b+28+12>>2]=0;c[b+44>>2]=1065353216;c[b+48>>2]=0;c[b+48+4>>2]=0;c[b+48+8>>2]=0;c[b+48+12>>2]=0;c[b+48+16>>2]=0;c[b>>2]=4916;a[b+540>>0]=1;c[b+536>>2]=0;c[b+528>>2]=0;c[b+532>>2]=0;g[j>>2]=d;c[j+4>>2]=e;c[j+72>>2]=f;c[j+76>>2]=c[h>>2];c[j+76+4>>2]=c[h+4>>2];c[j+76+8>>2]=c[h+8>>2];c[j+76+12>>2]=c[h+12>>2];g[j+92>>2]=0.0;g[j+96>>2]=0.0;g[j+100>>2]=.5;g[j+104>>2]=0.0;g[j+108>>2]=0.0;g[j+112>>2]=0.0;g[j+116>>2]=.800000011920929;g[j+120>>2]=1.0;a[j+124>>0]=0;g[j+128>>2]=.004999999888241291;g[j+132>>2]=.009999999776482582;g[j+136>>2]=.009999999776482582;g[j+140>>2]=.009999999776482582;c[j+8>>2]=1065353216;c[j+12>>2]=0;c[j+12+4>>2]=0;c[j+12+8>>2]=0;c[j+12+12>>2]=0;c[j+28>>2]=1065353216;c[j+32>>2]=0;c[j+32+4>>2]=0;c[j+32+8>>2]=0;c[j+32+12>>2]=0;c[j+48>>2]=1065353216;c[j+52>>2]=0;c[j+52+4>>2]=0;c[j+52+8>>2]=0;c[j+52+12>>2]=0;c[j+52+16>>2]=0;ud(b,j);i=j;return}function Jf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0;j=i;i=i+80|0;h=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);f=0;do{q=j+64+(f<<2)|0;c[j+64>>2]=0;c[j+64+4>>2]=0;c[j+64+8>>2]=0;c[j+64+12>>2]=0;g[q>>2]=1.0;k=c[(c[a>>2]|0)+64>>2]|0;l=+g[j+64>>2];m=+g[j+64+4>>2];n=+g[j+64+8>>2];o=l*+g[b+4>>2]+m*+g[b+20>>2]+n*+g[b+36>>2];p=l*+g[b+8>>2]+m*+g[b+24>>2]+n*+g[b+40>>2];g[j+32>>2]=+g[b>>2]*l+ +g[b+16>>2]*m+ +g[b+32>>2]*n;g[j+32+4>>2]=o;g[j+32+8>>2]=p;g[j+32+12>>2]=0.0;Ub[k&127](j+48|0,a,j+32|0);p=+g[j+48>>2];o=+g[j+48+4>>2];n=+g[j+48+8>>2];m=p*+g[b+16>>2]+o*+g[b+20>>2]+n*+g[b+24>>2]+ +g[b+52>>2];l=p*+g[b+32>>2]+o*+g[b+36>>2]+n*+g[b+40>>2]+ +g[b+56>>2];g[j+32>>2]=p*+g[b>>2]+o*+g[b+4>>2]+n*+g[b+8>>2]+ +g[b+48>>2];g[j+32+4>>2]=m;g[j+32+8>>2]=l;g[j+32+12>>2]=0.0;k=j+32+(f<<2)|0;g[e+(f<<2)>>2]=h+ +g[k>>2];g[q>>2]=-1.0;q=c[(c[a>>2]|0)+64>>2]|0;l=+g[j+64>>2];m=+g[j+64+4>>2];n=+g[j+64+8>>2];o=l*+g[b+4>>2]+m*+g[b+20>>2]+n*+g[b+36>>2];p=l*+g[b+8>>2]+m*+g[b+24>>2]+n*+g[b+40>>2];g[j>>2]=+g[b>>2]*l+ +g[b+16>>2]*m+ +g[b+32>>2]*n;g[j+4>>2]=o;g[j+8>>2]=p;g[j+12>>2]=0.0;Ub[q&127](j+16|0,a,j);p=+g[j+16>>2];o=+g[j+16+4>>2];n=+g[j+16+8>>2];m=p*+g[b+16>>2]+o*+g[b+20>>2]+n*+g[b+24>>2]+ +g[b+52>>2];l=p*+g[b+32>>2]+o*+g[b+36>>2]+n*+g[b+40>>2]+ +g[b+56>>2];g[j+32>>2]=p*+g[b>>2]+o*+g[b+4>>2]+n*+g[b+8>>2]+ +g[b+48>>2];g[j+32+4>>2]=m;g[j+32+8>>2]=l;g[j+32+12>>2]=0.0;g[d+(f<<2)>>2]=+g[k>>2]-h;f=f+1|0}while((f|0)!=3);i=j;return}function Kf(d,e,f){d=d|0;e=e|0;f=f|0;var h=0,i=0,j=0;c[d+4>>2]=1065353216;c[d+8>>2]=1065353216;c[d+12>>2]=1065353216;g[d+16>>2]=0.0;a[d+36>>0]=1;c[d+32>>2]=0;c[d+24>>2]=0;c[d+28>>2]=0;c[d+48>>2]=0;c[d>>2]=8544;a[d+100>>0]=1;c[d+96>>2]=0;c[d+88>>2]=0;c[d+92>>2]=0;a[d+120>>0]=1;c[d+116>>2]=0;c[d+108>>2]=0;c[d+112>>2]=0;a[d+140>>0]=1;c[d+136>>2]=0;c[d+128>>2]=0;c[d+132>>2]=0;a[d+160>>0]=1;c[d+156>>2]=0;c[d+148>>2]=0;c[d+152>>2]=0;a[d+164>>0]=e&1;a[d+165>>0]=f&1;g[d+168>>2]=0.0;c[6324]=(c[6324]|0)+1;e=ic(51)|0;if(!e)h=0;else{c[(e+4+15&-16)+-4>>2]=e;h=e+4+15&-16}f=c[d+24>>2]|0;if((f|0)>0){e=0;do{i=h+(e<<5)|0;j=(c[d+32>>2]|0)+(e<<5)|0;c[i>>2]=c[j>>2];c[i+4>>2]=c[j+4>>2];c[i+8>>2]=c[j+8>>2];c[i+12>>2]=c[j+12>>2];c[i+16>>2]=c[j+16>>2];c[i+20>>2]=c[j+20>>2];c[i+24>>2]=c[j+24>>2];c[i+28>>2]=c[j+28>>2];e=e+1|0}while((e|0)!=(f|0))}e=c[d+32>>2]|0;if(e|0){if(a[d+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[d+32>>2]=0}a[d+36>>0]=1;c[d+32>>2]=h;c[d+28>>2]=1;e=c[d+24>>2]|0;c[h+(e<<5)>>2]=0;c[h+(e<<5)+4>>2]=0;c[h+(e<<5)+8>>2]=12;c[h+(e<<5)+12>>2]=0;c[h+(e<<5)+16>>2]=0;c[h+(e<<5)+20>>2]=16;c[h+(e<<5)+24>>2]=2;c[h+(e<<5)+28>>2]=0;c[d+24>>2]=(c[d+24>>2]|0)+1;e=b[d+164>>1]|0;if(!((e&255)<<24>>24)){f=c[d+32>>2]|0;c[f>>2]=(c[d+148>>2]|0)/3|0;c[f+4>>2]=0;c[f+24>>2]=3;c[f+8>>2]=6}else{f=c[d+32>>2]|0;c[f>>2]=(c[d+128>>2]|0)/3|0;c[f+4>>2]=0;c[f+24>>2]=2;c[f+8>>2]=12}if((e&65535)<256){i=12;d=(c[d+108>>2]|0)/3|0;j=f+12|0;c[j>>2]=d;j=f+16|0;c[j>>2]=0;j=f+20|0;c[j>>2]=i;return}else{i=16;d=c[d+88>>2]|0;j=f+12|0;c[j>>2]=d;j=f+16|0;c[j>>2]=0;j=f+20|0;c[j>>2]=i;return}}function Lf(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0;l=i;i=i+160|0;j=c[b+12>>2]|0;if(!j){i=l;return}m=(a[b+16>>0]|0)!=0;n=m?e:d;e=m?d:e;o=c[n+4>>2]|0;d=c[e+4>>2]|0;c[h+4>>2]=j;j=c[j+784>>2]|0;c[l+136>>2]=6492;c[l+136+4>>2]=o;c[l+136+8>>2]=d;c[l+136+12>>2]=j;g[l+128>>2]=999999984306749440.0;j=c[n+12>>2]|0;c[l>>2]=c[j>>2];c[l+4>>2]=c[j+4>>2];c[l+8>>2]=c[j+8>>2];c[l+12>>2]=c[j+12>>2];c[l+16>>2]=c[j+16>>2];c[l+16+4>>2]=c[j+16+4>>2];c[l+16+8>>2]=c[j+16+8>>2];c[l+16+12>>2]=c[j+16+12>>2];c[l+32>>2]=c[j+32>>2];c[l+32+4>>2]=c[j+32+4>>2];c[l+32+8>>2]=c[j+32+8>>2];c[l+32+12>>2]=c[j+32+12>>2];c[l+48>>2]=c[j+48>>2];c[l+48+4>>2]=c[j+48+4>>2];c[l+48+8>>2]=c[j+48+8>>2];c[l+48+12>>2]=c[j+48+12>>2];j=c[e+12>>2]|0;c[l+64>>2]=c[j>>2];c[l+64+4>>2]=c[j+4>>2];c[l+64+8>>2]=c[j+8>>2];c[l+64+12>>2]=c[j+12>>2];c[l+80>>2]=c[j+16>>2];c[l+80+4>>2]=c[j+16+4>>2];c[l+80+8>>2]=c[j+16+8>>2];c[l+80+12>>2]=c[j+16+12>>2];c[l+96>>2]=c[j+32>>2];c[l+96+4>>2]=c[j+32+4>>2];c[l+96+8>>2]=c[j+32+8>>2];c[l+96+12>>2]=c[j+32+12>>2];c[l+112>>2]=c[j+48>>2];c[l+112+4>>2]=c[j+48+4>>2];c[l+112+8>>2]=c[j+48+8>>2];c[l+112+12>>2]=c[j+48+12>>2];Ld(l+136|0,l,h,c[f+20>>2]|0,m);do if(a[b+8>>0]|0?(k=c[h+4>>2]|0,c[k+780>>2]|0):0){d=c[k+772>>2]|0;e=c[(c[h+8>>2]|0)+8>>2]|0;b=c[(c[h+12>>2]|0)+8>>2]|0;if((d|0)==(e|0)){Te(k,d+4|0,b+4|0);break}else{Te(k,b+4|0,e+4|0);break}}while(0);i=l;return}function Mf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,i=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0,t=0;if(!a)return;m=+g[b>>2];n=+g[b+4>>2];o=+g[b+8>>2];p=+g[b+16>>2];q=+g[b+20>>2];l=+g[b+24>>2];c[6324]=(c[6324]|0)+1;b=ic(275)|0;c[(b+4+15&-16)+-4>>2]=b;c[(b+4+15&-16)>>2]=a;a=64;e=1;b=b+4+15&-16;do{k=e+-1|0;i=c[b+(k<<2)>>2]|0;do if(((((+g[i>>2]<=p?+g[i+16>>2]>=m:0)?+g[i+4>>2]<=q:0)?+g[i+20>>2]>=n:0)?+g[i+8>>2]<=l:0)?+g[i+24>>2]>=o:0){if(!(c[i+40>>2]|0)){mb[c[(c[d>>2]|0)+12>>2]&127](d,i);e=k;break}j=c[i+36>>2]|0;do if((k|0)==(a|0)?(r=a|0?a<<1:1,(e|0)<=(r|0)):0){if((r|0)!=0?(c[6324]=(c[6324]|0)+1,s=ic((r<<2|3)+16|0)|0,(s|0)!=0):0){c[(s+4+15&-16)+-4>>2]=s;h=s+4+15&-16}else h=0;if((e|0)<=1){if(!b){a=r;b=h;break}}else{f=0;do{c[h+(f<<2)>>2]=c[b+(f<<2)>>2];f=f+1|0}while((f|0)!=(a|0))}c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);a=r;b=h}while(0);c[b+(k<<2)>>2]=j;i=c[i+40>>2]|0;do if((e|0)==(a|0)){f=e|0?e<<1:1;if((e|0)<(f|0)){if((f|0)!=0?(c[6324]=(c[6324]|0)+1,t=ic((f<<2|3)+16|0)|0,(t|0)!=0):0){c[(t+4+15&-16)+-4>>2]=t;h=t+4+15&-16}else h=0;if((e|0)<=0){if(!b){a=f;b=h;break}}else{a=0;do{c[h+(a<<2)>>2]=c[b+(a<<2)>>2];a=a+1|0}while((a|0)!=(e|0))}c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);a=f;b=h}else a=e}while(0);c[b+(e<<2)>>2]=i;e=e+1|0}else e=k;while(0)}while((e|0)>0);if(!b)return;c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function Nf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,H=0.0,I=0;I=i;i=i+32|0;k=+g[b+16>>2];f=+g[b>>2];l=+g[b+20>>2];h=+g[b+4>>2];n=+g[b+24>>2];j=+g[b+8>>2];r=+g[b+32>>2];v=+g[b+36>>2];w=+g[b+40>>2];B=(l-h)*(w-j)-(n-j)*(v-h);C=(n-j)*(r-f)-(k-f)*(w-j);D=(k-f)*(v-h)-(l-h)*(r-f);g[I+16>>2]=B;g[I+16+4>>2]=C;g[I+16+8>>2]=D;g[I+16+12>>2]=0.0;o=+g[a+4>>2];s=+g[a+8>>2];x=+g[a+12>>2];E=B*o+C*s+D*x-(f*B+h*C+j*D);p=+g[a+20>>2];t=+g[a+24>>2];y=+g[a+28>>2];if(E*(B*p+C*t+D*y-(f*B+h*C+j*D))>=0.0){i=I;return}F=c[a+36>>2]|0;if(E<=0.0&(F&1|0)!=0){i=I;return}H=E/(E-(B*p+C*t+D*y-(f*B+h*C+j*D)));if(!(H<+g[a+40>>2])){i=I;return}A=(B*B+C*C+D*D)*-9.999999747378752e-005;z=f-(p*H+o*(1.0-H));u=h-(t*H+s*(1.0-H));q=j-(y*H+x*(1.0-H));m=k-(p*H+o*(1.0-H));l=l-(t*H+s*(1.0-H));k=n-(y*H+x*(1.0-H));if(!(D*(z*l-u*m)+(B*(u*k-q*l)+C*(q*m-z*k))>=A)){i=I;return}j=r-(p*H+o*(1.0-H));h=v-(t*H+s*(1.0-H));f=w-(y*H+x*(1.0-H));if(!(D*(m*h-l*j)+(B*(l*f-k*h)+C*(k*j-m*f))>=A)){i=I;return}if(!(D*(u*j-z*h)+(B*(q*h-u*f)+C*(z*f-q*j))>=A)){i=I;return}f=1.0/+G(+(B*B+C*C+D*D));g[I+16>>2]=B*f;g[I+16+4>>2]=C*f;g[I+16+8>>2]=D*f;b=c[(c[a>>2]|0)+12>>2]|0;if(E<=0.0&(F&2|0)==0){g[I>>2]=-(B*f);g[I+4>>2]=-(C*f);g[I+8>>2]=-(D*f);g[I+12>>2]=0.0;g[a+40>>2]=+Qb[b&3](a,I,H,d,e);i=I;return}else{g[a+40>>2]=+Qb[b&3](a,I+16|0,H,d,e);i=I;return}}function Of(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;l=i;i=i+144|0;j=c[b+12>>2]|0;if(!j){i=l;return}n=c[d+4>>2]|0;m=c[e+4>>2]|0;c[h+4>>2]=j;g[l+12+128>>2]=999999984306749440.0;j=c[d+12>>2]|0;c[l+12>>2]=c[j>>2];c[l+12+4>>2]=c[j+4>>2];c[l+12+8>>2]=c[j+8>>2];c[l+12+12>>2]=c[j+12>>2];c[l+12+16>>2]=c[j+16>>2];c[l+12+16+4>>2]=c[j+16+4>>2];c[l+12+16+8>>2]=c[j+16+8>>2];c[l+12+16+12>>2]=c[j+16+12>>2];c[l+12+32>>2]=c[j+32>>2];c[l+12+32+4>>2]=c[j+32+4>>2];c[l+12+32+8>>2]=c[j+32+8>>2];c[l+12+32+12>>2]=c[j+32+12>>2];c[l+12+48>>2]=c[j+48>>2];c[l+12+48+4>>2]=c[j+48+4>>2];c[l+12+48+8>>2]=c[j+48+8>>2];c[l+12+48+12>>2]=c[j+48+12>>2];j=c[e+12>>2]|0;c[l+12+64>>2]=c[j>>2];c[l+12+64+4>>2]=c[j+4>>2];c[l+12+64+8>>2]=c[j+8>>2];c[l+12+64+12>>2]=c[j+12>>2];c[l+12+80>>2]=c[j+16>>2];c[l+12+80+4>>2]=c[j+16+4>>2];c[l+12+80+8>>2]=c[j+16+8>>2];c[l+12+80+12>>2]=c[j+16+12>>2];c[l+12+96>>2]=c[j+32>>2];c[l+12+96+4>>2]=c[j+32+4>>2];c[l+12+96+8>>2]=c[j+32+8>>2];c[l+12+96+12>>2]=c[j+32+12>>2];c[l+12+112>>2]=c[j+48>>2];c[l+12+112+4>>2]=c[j+48+4>>2];c[l+12+112+8>>2]=c[j+48+8>>2];c[l+12+112+12>>2]=c[j+48+12>>2];c[l>>2]=9024;c[l+4>>2]=n;c[l+8>>2]=m;hc(l,l+12|0,h,c[f+20>>2]|0,0);do if(a[b+8>>0]|0?(k=c[h+4>>2]|0,c[k+780>>2]|0):0){d=c[k+772>>2]|0;e=c[(c[h+8>>2]|0)+8>>2]|0;b=c[(c[h+12>>2]|0)+8>>2]|0;if((d|0)==(e|0)){Te(k,d+4|0,b+4|0);break}else{Te(k,b+4|0,e+4|0);break}}while(0);i=l;return}function Pf(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0;q=i;i=i+48|0;if((f|0)==(d|0)|((d|0)==(e|0)|(e|0)==(f|0))){i=q;return}l=q;m=l+36|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(m|0));if(!h)o=c[c[b+920>>2]>>2]|0;else o=h;h=c[b+792>>2]|0;if((h|0)==(c[b+796>>2]|0)?(p=h|0?h<<1:1,(h|0)<(p|0)):0){if(!p)n=0;else{c[6324]=(c[6324]|0)+1;h=ic((p*44|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}n=h;h=c[b+792>>2]|0}if((h|0)>0){j=0;do{l=n+(j*44|0)|0;k=(c[b+800>>2]|0)+(j*44|0)|0;m=l+44|0;do{c[l>>2]=c[k>>2];l=l+4|0;k=k+4|0}while((l|0)<(m|0));j=j+1|0}while((j|0)!=(h|0))}h=c[b+800>>2]|0;if(h|0){if(a[b+804>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+800>>2]=0}a[b+804>>0]=1;c[b+800>>2]=n;c[b+796>>2]=p;h=c[b+792>>2]|0}l=c[b+800>>2]|0;c[l+(h*44|0)>>2]=0;c[l+(h*44|0)+4>>2]=o;l=l+(h*44|0)+8|0;k=q;m=l+36|0;do{c[l>>2]=c[k>>2];l=l+4|0;k=k+4|0}while((l|0)<(m|0));p=c[b+792>>2]|0;c[b+792>>2]=p+1;o=c[b+800>>2]|0;l=c[b+760>>2]|0;c[o+(p*44|0)+8>>2]=l+(d*104|0);m=c[b+760>>2]|0;c[o+(p*44|0)+12>>2]=m+(e*104|0);n=c[b+760>>2]|0;c[o+(p*44|0)+16>>2]=n+(f*104|0);t=+g[l+(d*104|0)+8>>2];v=+g[l+(d*104|0)+12>>2];r=+g[l+(d*104|0)+16>>2];s=+g[m+(e*104|0)+8>>2]-t;w=+g[m+(e*104|0)+12>>2]-v;u=+g[m+(e*104|0)+16>>2]-r;t=+g[n+(f*104|0)+8>>2]-t;v=+g[n+(f*104|0)+12>>2]-v;r=+g[n+(f*104|0)+16>>2]-r;g[o+(p*44|0)+36>>2]=+G(+((s*v-w*t)*(s*v-w*t)+((w*r-u*v)*(w*r-u*v)+(u*t-s*r)*(u*t-s*r))));a[b+964>>0]=1;i=q;return}function Qf(b,d){b=b|0;d=+d;var e=0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0.0;e=c[b+232>>2]|0;if((e|0)<=0)return;q=0;do{p=c[(c[b+240>>2]|0)+(q<<2)>>2]|0;if(!(c[p+204>>2]&3)){m=+g[p+484>>2];f=+H(+(1.0-m),+d);i=f*+g[p+352>>2];g[p+352>>2]=i;h=f*+g[p+356>>2];g[p+356>>2]=h;f=f*+g[p+360>>2];g[p+360>>2]=f;o=+g[p+488>>2];l=+H(+(1.0-o),+d);j=l*+g[p+368>>2];g[p+368>>2]=j;k=l*+g[p+372>>2];g[p+372>>2]=k;l=l*+g[p+376>>2];g[p+376>>2]=l;do if(a[p+492>>0]|0){if(l*l+(j*j+k*k)<+g[p+504>>2]?i*i+h*h+f*f<+g[p+500>>2]:0){r=+g[p+496>>2];g[p+368>>2]=j*r;g[p+372>>2]=r*k;g[p+376>>2]=r*l;g[p+352>>2]=r*i;g[p+356>>2]=r*h;g[p+360>>2]=r*f;i=r*i;h=r*h;f=r*f;n=j*r;k=r*k;l=r*l}else n=j;j=+G(+(i*i+h*h+f*f));do if(j<m)if(j>.004999999888241291){i=i-i*(1.0/j)*.004999999888241291;g[p+352>>2]=i;h=h-h*(1.0/j)*.004999999888241291;g[p+356>>2]=h;f=f-f*(1.0/j)*.004999999888241291;g[p+360>>2]=f;break}else{c[p+352>>2]=0;c[p+352+4>>2]=0;c[p+352+8>>2]=0;c[p+352+12>>2]=0;i=0.0;h=0.0;f=0.0;break}while(0);j=+G(+(n*n+k*k+l*l));if(j<o)if(j>.004999999888241291){g[p+368>>2]=n-n*(1.0/j)*.004999999888241291;g[p+372>>2]=k-k*(1.0/j)*.004999999888241291;g[p+376>>2]=l-l*(1.0/j)*.004999999888241291;break}else{c[p+368>>2]=0;c[p+368+4>>2]=0;c[p+368+8>>2]=0;c[p+368+12>>2]=0;break}}while(0);Mg(p+4|0,i,h,f,p+368|0,d,p+68|0);e=c[b+232>>2]|0}q=q+1|0}while((q|0)<(e|0));return}function Rf(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,i=0.0,j=0.0,k=0.0,l=0.0;Fj(b,4,d);c[b>>2]=4452;c[b+552>>2]=c[e>>2];c[b+552+4>>2]=c[e+4>>2];c[b+552+8>>2]=c[e+8>>2];c[b+552+12>>2]=c[e+12>>2];c[b+568>>2]=c[e+16>>2];c[b+568+4>>2]=c[e+16+4>>2];c[b+568+8>>2]=c[e+16+8>>2];c[b+568+12>>2]=c[e+16+12>>2];c[b+584>>2]=c[e+32>>2];c[b+584+4>>2]=c[e+32+4>>2];c[b+584+8>>2]=c[e+32+8>>2];c[b+584+12>>2]=c[e+32+12>>2];c[b+600>>2]=c[e+48>>2];c[b+600+4>>2]=c[e+48+4>>2];c[b+600+8>>2]=c[e+48+8>>2];c[b+600+12>>2]=c[e+48+12>>2];c[b+616>>2]=c[e>>2];c[b+616+4>>2]=c[e+4>>2];c[b+616+8>>2]=c[e+8>>2];c[b+616+12>>2]=c[e+12>>2];c[b+632>>2]=c[e+16>>2];c[b+632+4>>2]=c[e+16+4>>2];c[b+632+8>>2]=c[e+16+8>>2];c[b+632+12>>2]=c[e+16+12>>2];c[b+648>>2]=c[e+32>>2];c[b+648+4>>2]=c[e+32+4>>2];c[b+648+8>>2]=c[e+32+8>>2];c[b+648+12>>2]=c[e+32+12>>2];c[b+664>>2]=c[e+48>>2];c[b+664+4>>2]=c[e+48+4>>2];c[b+664+8>>2]=c[e+48+8>>2];c[b+664+12>>2]=c[e+48+12>>2];g[b+688>>2]=0.0;g[b+692>>2]=-1.0;g[b+696>>2]=.8999999761581421;g[b+700>>2]=.30000001192092896;g[b+704>>2]=1.0;g[b+708>>2]=0.0;g[b+712>>2]=0.0;a[b+716>>0]=0;a[b+736>>0]=0;a[b+737>>0]=0;a[b+738>>0]=0;a[b+739>>0]=1;a[b+740>>0]=f&1;c[b+748>>2]=0;c[b+748+4>>2]=0;c[b+748+8>>2]=0;c[b+748+12>>2]=0;c[b+748+16>>2]=0;e=c[b+28>>2]|0;l=+g[b+600>>2];k=+g[b+604>>2];j=+g[b+608>>2];i=l*+g[e+20>>2]+k*+g[e+24>>2]+j*+g[e+28>>2]+ +g[e+56>>2];h=l*+g[e+36>>2]+k*+g[e+40>>2]+j*+g[e+44>>2]+ +g[e+60>>2];g[b+664>>2]=l*+g[e+4>>2]+k*+g[e+8>>2]+j*+g[e+12>>2]+ +g[e+52>>2];g[b+668>>2]=i;g[b+672>>2]=h;g[b+676>>2]=0.0;g[b+732>>2]=f?-1.0:1.0;return}function Sf(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;if((c[b+104>>2]|0)>0){l=0;do{i=c[(c[b+4>>2]|0)+724>>2]|0;j=(c[b+112>>2]|0)+(l<<3)+4|0;d=c[j>>2]|0;if((c[i+60>>2]|0)>0){h=0;do{k=(c[i+68>>2]|0)+(h<<2)|0;e=c[k>>2]|0;a:do if(e|0){f=0;do{g=f+280|0;b:do if(!f)while(1){f=e;e=c[e+280>>2]|0;if((c[f+276>>2]|0)!=(d|0))break b;c[k>>2]=e;Rc(f);if(!e)break a}else while(1){f=e;e=c[e+280>>2]|0;if((c[f+276>>2]|0)!=(d|0))break b;c[g>>2]=e;Rc(f);if(!e)break a}while(0)}while((e|0)!=0)}while(0);h=h+1|0}while((h|0)<(c[i+60>>2]|0));d=c[j>>2]|0}if(d|0)kb[c[(c[d>>2]|0)+4>>2]&255](d);l=l+1|0}while((l|0)<(c[b+104>>2]|0))}d=c[b+72>>2]|0;if(d|0){if(a[b+76>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+72>>2]=0}a[b+76>>0]=1;c[b+72>>2]=0;c[b+64>>2]=0;c[b+68>>2]=0;d=c[b+92>>2]|0;if(d|0){if(a[b+96>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+92>>2]=0}a[b+96>>0]=1;c[b+92>>2]=0;c[b+84>>2]=0;c[b+88>>2]=0;d=c[b+112>>2]|0;if(d|0){if(a[b+116>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+112>>2]=0}a[b+116>>0]=1;c[b+112>>2]=0;c[b+104>>2]=0;c[b+108>>2]=0;d=c[b+132>>2]|0;if(!d){a[b+136>>0]=1;c[b+132>>2]=0;c[b+124>>2]=0;b=b+128|0;c[b>>2]=0;return}if(a[b+136>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+132>>2]=0;a[b+136>>0]=1;c[b+132>>2]=0;c[b+124>>2]=0;b=b+128|0;c[b>>2]=0;return}function Tf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;l=i;i=i+16|0;j=c[b+28>>2]|0;k=c[b+32>>2]|0;if(!(a[b+1301>>0]|0)){h=0;e=uf(b,d,0,j+4|0,k+4|0,j+352|0,k+352|0,j+368|0,k+368|0)|0;do{f=b+868+(h<<6)|0;if(!((c[b+868+(h<<6)+56>>2]|0)==0?(a[b+868+(h<<6)+44>>0]|0)==0:0)){g=b+1208+(h<<4)|0;c[l>>2]=c[g>>2];c[l+4>>2]=c[g+4>>2];c[l+8>>2]=c[g+8>>2];c[l+12>>2]=c[g+12>>2];g=c[b+1304>>2]>>(h*3|0)+9;if(!(g&1))c[b+868+(h<<6)+28>>2]=c[c[d+32>>2]>>2];if(!(g&2))c[b+868+(h<<6)+36>>2]=c[c[d+32>>2]>>2];if(!(g&4))c[b+868+(h<<6)+32>>2]=c[d+4>>2];e=(nd(b,f,j+4|0,k+4|0,j+352|0,k+352|0,j+368|0,k+368|0,d,e,l,1,0)|0)+e|0}h=h+1|0}while((h|0)!=3);i=l;return}h=0;e=0;do{f=b+868+(h<<6)|0;if(!((c[b+868+(h<<6)+56>>2]|0)==0?(a[b+868+(h<<6)+44>>0]|0)==0:0)){g=b+1208+(h<<4)|0;c[l>>2]=c[g>>2];c[l+4>>2]=c[g+4>>2];c[l+8>>2]=c[g+8>>2];c[l+12>>2]=c[g+12>>2];g=c[b+1304>>2]>>(h*3|0)+9;if(!(g&1))c[b+868+(h<<6)+28>>2]=c[c[d+32>>2]>>2];if(!(g&2))c[b+868+(h<<6)+36>>2]=c[c[d+32>>2]>>2];if(!(g&4))c[b+868+(h<<6)+32>>2]=c[d+4>>2];e=(nd(b,f,j+4|0,k+4|0,j+352|0,k+352|0,j+368|0,k+368|0,d,e,l,1,0)|0)+e|0}h=h+1|0}while((h|0)!=3);uf(b,d,e,j+4|0,k+4|0,j+352|0,k+352|0,j+368|0,k+368|0)|0;i=l;return}function Uf(b){b=b|0;var d=0,e=0,f=0,h=0,i=0.0,j=0.0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0;d=c[b+1028>>2]|0;if(d|0)hn(b+1028|0,d);d=c[b+1032>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+1032>>2]=0;c[b+1036>>2]=-1;d=c[b+1060>>2]|0;if(d|0){if(a[b+1064>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+1060>>2]=0}a[b+1064>>0]=1;c[b+1060>>2]=0;c[b+1052>>2]=0;c[b+1056>>2]=0;c[b+1044>>2]=0;if((c[b+792>>2]|0)<=0)return;h=0;do{k=c[b+800>>2]|0;l=k+(h*44|0)|0;e=c[k+(h*44|0)+8>>2]|0;f=c[k+(h*44|0)+12>>2]|0;d=c[k+(h*44|0)+16>>2]|0;p=+g[e+8>>2];q=+g[e+12>>2];r=+g[e+16>>2];j=+g[e+20>>2];v=+g[f+8>>2];m=v<p?v:p;s=+g[f+12>>2];n=s<q?s:q;t=+g[f+16>>2];o=t<r?t:r;u=+g[f+20>>2];i=u<j?u:j;p=p<v?v:p;q=q<s?s:q;r=r<t?t:r;j=j<u?u:j;u=+g[d+8>>2];m=u<m?u:m;t=+g[d+12>>2];n=t<n?t:n;s=+g[d+16>>2];o=s<o?s:o;v=+g[d+20>>2];i=v<i?v:i;j=j<v?v:j;p=(p<u?u:p)+0.0;q=(q<t?t:q)+0.0;r=(r<s?s:r)+0.0;d=c[b+1032>>2]|0;if(!d){c[6324]=(c[6324]|0)+1;d=ic(63)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}e=d;f=e+44|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0))}else c[b+1032>>2]=0;c[d+32>>2]=0;c[d+36>>2]=l;c[d+40>>2]=0;g[d>>2]=m;g[d+4>>2]=n;g[d+8>>2]=o;g[d+12>>2]=i;g[d+16>>2]=p;g[d+20>>2]=q;g[d+24>>2]=r;g[d+28>>2]=j;Ze(b+1028|0,c[b+1028>>2]|0,d);c[b+1040>>2]=(c[b+1040>>2]|0)+1;c[k+(h*44|0)+40>>2]=d;h=h+1|0}while((h|0)<(c[b+792>>2]|0));return}function Vf(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0;d=c[a+792>>2]|0;if((d|0)>0){e=c[a+800>>2]|0;b=0;do{o=c[e+(b*44|0)+8>>2]|0;f=c[e+(b*44|0)+12>>2]|0;h=c[e+(b*44|0)+16>>2]|0;k=+g[o+8>>2];m=+g[o+12>>2];i=+g[o+16>>2];j=+g[f+8>>2]-k;n=+g[f+12>>2]-m;l=+g[f+16>>2]-i;k=+g[h+8>>2]-k;m=+g[h+12>>2]-m;i=+g[h+16>>2]-i;g[e+(b*44|0)+36>>2]=+G(+((j*m-n*k)*(j*m-n*k)+((n*i-l*m)*(n*i-l*m)+(l*k-j*i)*(l*k-j*i))));b=b+1|0}while((b|0)!=(d|0))}d=c[a+752>>2]|0;if((d|0)>0){c[6324]=(c[6324]|0)+1;b=ic((d<<2|3)+16|0)|0;if(!b)f=0;else{c[(b+4+15&-16)+-4>>2]=b;f=b+4+15&-16}yn(f|0,0,d<<2|0)|0;b=c[a+752>>2]|0;if((b|0)>0){e=c[a+760>>2]|0;d=0;do{g[e+(d*104|0)+92>>2]=0.0;d=d+1|0}while((d|0)!=(b|0))}}else{f=0;b=d}h=c[a+792>>2]|0;if((h|0)>0){d=c[a+800>>2]|0;e=c[a+760>>2]|0;b=0;do{n=+F(+(+g[d+(b*44|0)+36>>2]));o=c[d+(b*44|0)+8>>2]|0;p=f+(((o-e|0)/104|0)<<2)|0;c[p>>2]=(c[p>>2]|0)+1;g[o+92>>2]=n+ +g[o+92>>2];o=c[d+(b*44|0)+12>>2]|0;p=f+(((o-e|0)/104|0)<<2)|0;c[p>>2]=(c[p>>2]|0)+1;g[o+92>>2]=n+ +g[o+92>>2];o=c[d+(b*44|0)+16>>2]|0;p=f+(((o-e|0)/104|0)<<2)|0;c[p>>2]=(c[p>>2]|0)+1;g[o+92>>2]=n+ +g[o+92>>2];b=b+1|0}while((b|0)!=(h|0));b=c[a+752>>2]|0}if((b|0)<=0){if(!f)return}else{d=0;do{e=c[f+(d<<2)>>2]|0;if((e|0)>0){p=(c[a+760>>2]|0)+(d*104|0)+92|0;g[p>>2]=+g[p>>2]/+(e|0)}else g[(c[a+760>>2]|0)+(d*104|0)+92>>2]=0.0;d=d+1|0}while((d|0)!=(b|0))}c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);return}function Wf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;e=c[a+56>>2]|0;if(!e){e=c[a+52>>2]|0;if(!e){c[6324]=(c[6324]|0)+1;e=ic(31)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}f=c[a+60>>2]|0;c[e+4>>2]=f;g=e+8|0;c[g>>2]=0;c[6324]=(c[6324]|0)+1;f=ic((f*24|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}c[e>>2]=f;c[g>>2]=c[a+48>>2];c[a+48>>2]=e}else c[a+52>>2]=c[e+8>>2];h=c[e+4>>2]|0;g=c[e>>2]|0;if((h|0)>0){e=0;f=g;do{e=e+1|0;i=f;f=f+24|0;c[i>>2]=(e|0)<(h|0)?f:0}while((e|0)!=(h|0))}}else g=e;c[a+56>>2]=c[g>>2];c[g>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;e=c[a+56>>2]|0;if(!e){e=c[a+52>>2]|0;if(!e){c[6324]=(c[6324]|0)+1;e=ic(31)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}f=c[a+60>>2]|0;c[e+4>>2]=f;h=e+8|0;c[h>>2]=0;c[6324]=(c[6324]|0)+1;f=ic((f*24|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}c[e>>2]=f;c[h>>2]=c[a+48>>2];c[a+48>>2]=e}else c[a+52>>2]=c[e+8>>2];i=c[e+4>>2]|0;e=c[e>>2]|0;if((i|0)>0){f=0;h=e;do{f=f+1|0;j=h;h=h+24|0;c[j>>2]=(f|0)<(i|0)?h:0}while((f|0)!=(i|0))}}c[a+56>>2]=c[e>>2];c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[g+8>>2]=e;c[e+8>>2]=g;j=c[a+100>>2]|0;c[g+20>>2]=j;c[e+20>>2]=j;c[g+12>>2]=d;c[e+12>>2]=b;c[g+16>>2]=0;c[e+16>>2]=0;e=c[a+116>>2]|0;c[a+116>>2]=e+1;if((e|0)<(c[a+120>>2]|0))return g|0;c[a+120>>2]=e+1;return g|0}function Xf(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0;h=i;i=i+112|0;j=c[a+28>>2]|0;y=+g[e>>2];E=+g[j>>2];x=+g[e+16>>2];D=+g[j+4>>2];w=+g[e+32>>2];C=+g[j+8>>2];v=+g[e+4>>2];u=+g[e+20>>2];t=+g[e+36>>2];s=+g[e+8>>2];q=+g[e+24>>2];o=+g[e+40>>2];B=+g[j+16>>2];A=+g[j+20>>2];z=+g[j+24>>2];r=+g[j+32>>2];p=+g[j+36>>2];n=+g[j+40>>2];G=+g[e+48>>2];F=+g[e+52>>2];k=+g[e+56>>2];m=+g[j+48>>2]+(E*G+D*F+C*k);l=B*G+A*F+z*k+ +g[j+52>>2];k=r*G+p*F+n*k+ +g[j+56>>2];g[h+48>>2]=y*E+x*D+w*C;g[h+48+4>>2]=E*v+D*u+C*t;g[h+48+8>>2]=E*s+D*q+C*o;g[h+48+12>>2]=0.0;g[h+48+16>>2]=y*B+x*A+w*z;g[h+48+20>>2]=v*B+u*A+t*z;g[h+48+24>>2]=s*B+q*A+o*z;g[h+48+28>>2]=0.0;g[h+48+32>>2]=y*r+x*p+w*n;g[h+48+36>>2]=v*r+u*p+t*n;g[h+48+40>>2]=s*r+q*p+o*n;g[h+48+44>>2]=0.0;g[h+48+48>>2]=m;g[h+48+52>>2]=l;g[h+48+56>>2]=k;g[h+48+60>>2]=0.0;j=c[a+32>>2]|0;g[h+24+4>>2]=1.0;b[h+24+8>>1]=1;b[h+24+10>>1]=-1;c[h+24>>2]=5944;c[h+24+12>>2]=j;c[h+24+16>>2]=d;c[h+24+4>>2]=c[j+4>>2];j=c[a+4>>2]|0;e=c[j+8>>2]|0;c[h>>2]=j;c[h+4>>2]=f;c[h+8>>2]=e;c[h+12>>2]=h+48;c[h+16>>2]=-1;c[h+20>>2]=d;pc(c[a+8>>2]|0,c[a+12>>2]|0,c[a+16>>2]|0,h,h+24|0,+g[a+20>>2]);i=h;return}function Yf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+32|0;if((b|0)<0)b=c[a+12>>2]|0;d=c[a>>2]|0;if(!((b|0)>0&(d|0)!=0)){i=n;return}while(1){e=d+40|0;if(c[e>>2]|0){m=0;while(1){l=(c[a+16>>2]|0)>>>m&1;f=d+32|0;g=c[f>>2]|0;if(g>>>0>d>>>0){h=(c[g+40>>2]|0)==(d|0)&1;j=c[g+36+((h^1)<<2)>>2]|0;k=c[g+32>>2]|0;if(!k)c[a>>2]=d;else c[k+36+(((c[k+40>>2]|0)==(g|0)&1)<<2)>>2]=d;c[j+32>>2]=d;c[g+32>>2]=d;c[f>>2]=k;k=d+36|0;c[g+36>>2]=c[k>>2];c[g+40>>2]=c[e>>2];c[(c[k>>2]|0)+32>>2]=g;c[(c[e>>2]|0)+32>>2]=g;c[d+36+(h<<2)>>2]=g;c[d+36+((h^1)<<2)>>2]=j;c[n>>2]=c[g>>2];c[n+4>>2]=c[g+4>>2];c[n+8>>2]=c[g+8>>2];c[n+12>>2]=c[g+12>>2];c[n+16>>2]=c[g+16>>2];c[n+20>>2]=c[g+20>>2];c[n+24>>2]=c[g+24>>2];c[n+28>>2]=c[g+28>>2];c[g>>2]=c[d>>2];c[g+4>>2]=c[d+4>>2];c[g+8>>2]=c[d+8>>2];c[g+12>>2]=c[d+12>>2];c[g+16>>2]=c[d+16>>2];c[g+20>>2]=c[d+20>>2];c[g+24>>2]=c[d+24>>2];c[g+28>>2]=c[d+28>>2];c[d>>2]=c[n>>2];c[d+4>>2]=c[n+4>>2];c[d+8>>2]=c[n+8>>2];c[d+12>>2]=c[n+12>>2];c[d+16>>2]=c[n+16>>2];c[d+20>>2]=c[n+20>>2];c[d+24>>2]=c[n+24>>2];c[d+28>>2]=c[n+28>>2];d=g}d=c[d+36+(l<<2)>>2]|0;e=d+40|0;if(!(c[e>>2]|0))break;else m=m+1&31}}if(!(Wg(a,d)|0))e=0;else e=c[a>>2]|0;Ze(a,e,d);c[a+16>>2]=(c[a+16>>2]|0)+1;b=b+-1|0;if(!b)break;d=c[a>>2]|0}i=n;return}function Zf(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0;l=i;i=i+16|0;c[b+8>>2]=0;c[b+12>>2]=-1;c[b+16>>2]=1065353216;c[b+20>>2]=1065353216;c[b+24>>2]=1065353216;g[b+28>>2]=0.0;g[b+48>>2]=.03999999910593033;c[b+56>>2]=0;c[b+60>>2]=1065353216;c[b+64>>2]=1065353216;c[b+68>>2]=1065353216;g[b+72>>2]=0.0;c[b+76>>2]=-1082130432;c[b+80>>2]=-1082130432;c[b+84>>2]=-1082130432;g[b+88>>2]=0.0;a[b+92>>0]=0;c[b>>2]=7480;a[b+112>>0]=1;c[b+108>>2]=0;c[b+100>>2]=0;c[b+104>>2]=0;c[b+4>>2]=4;if((e|0)<=0){c[b+100>>2]=e;zj(b);i=l;return}c[6324]=(c[6324]|0)+1;h=ic((e<<4|3)+16|0)|0;if(!h)k=0;else{c[(h+4+15&-16)+-4>>2]=h;k=h+4+15&-16}j=c[b+100>>2]|0;if((j|0)>0){h=0;do{m=k+(h<<4)|0;n=(c[b+108>>2]|0)+(h<<4)|0;c[m>>2]=c[n>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];h=h+1|0}while((h|0)!=(j|0))}h=c[b+108>>2]|0;if(h|0){if(a[b+112>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+108>>2]=0}a[b+112>>0]=1;c[b+108>>2]=k;c[b+104>>2]=e;c[k>>2]=c[l>>2];c[k+4>>2]=c[l+4>>2];c[k+8>>2]=c[l+8>>2];c[k+12>>2]=c[l+12>>2];if((e|0)!=1){h=1;do{n=(c[b+108>>2]|0)+(h<<4)|0;c[n>>2]=c[l>>2];c[n+4>>2]=c[l+4>>2];c[n+8>>2]=c[l+8>>2];c[n+12>>2]=c[l+12>>2];h=h+1|0}while((h|0)!=(e|0))}c[b+100>>2]=e;h=0;while(1){n=c[b+108>>2]|0;k=c[d+4>>2]|0;m=c[d+8>>2]|0;c[n+(h<<4)>>2]=c[d>>2];c[n+(h<<4)+4>>2]=k;c[n+(h<<4)+8>>2]=m;g[n+(h<<4)+12>>2]=0.0;h=h+1|0;if((h|0)==(e|0))break;else d=d+f|0}zj(b);i=l;return}function _f(a,b,d,e,f,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0,t=0;s=i;i=i+48|0;q=+g[d>>2];p=+g[d+4>>2];r=+g[d+8>>2];k=q*+g[b+4>>2]+p*+g[b+20>>2]+r*+g[b+36>>2];l=q*+g[b+8>>2]+p*+g[b+24>>2]+r*+g[b+40>>2];g[s+32>>2]=+g[b>>2]*q+ +g[b+16>>2]*p+ +g[b+32>>2]*r;g[s+32+4>>2]=k;g[s+32+8>>2]=l;g[s+32+12>>2]=0.0;Ub[c[(c[a>>2]|0)+64>>2]&127](s+16|0,a,s+32|0);l=+g[s+16>>2];k=+g[s+16+4>>2];r=+g[s+16+8>>2];p=l*+g[b>>2]+k*+g[b+4>>2]+r*+g[b+8>>2]+ +g[b+48>>2];q=l*+g[b+16>>2]+k*+g[b+20>>2]+r*+g[b+24>>2]+ +g[b+52>>2];r=l*+g[b+32>>2]+k*+g[b+36>>2]+r*+g[b+40>>2]+ +g[b+56>>2];t=c[(c[a>>2]|0)+64>>2]|0;k=-+g[s+32+4>>2];l=-+g[s+32+8>>2];g[s>>2]=-+g[s+32>>2];g[s+4>>2]=k;g[s+8>>2]=l;g[s+12>>2]=0.0;Ub[t&127](s+16|0,a,s);l=+g[s+16>>2];k=+g[s+16+4>>2];m=+g[s+16+8>>2];n=l*+g[b>>2]+k*+g[b+4>>2]+m*+g[b+8>>2]+ +g[b+48>>2];o=l*+g[b+16>>2]+k*+g[b+20>>2]+m*+g[b+24>>2]+ +g[b+52>>2];m=l*+g[b+32>>2]+k*+g[b+36>>2]+m*+g[b+40>>2]+ +g[b+56>>2];g[e>>2]=p*+g[d>>2]+q*+g[d+4>>2]+r*+g[d+8>>2];g[f>>2]=n*+g[d>>2]+o*+g[d+4>>2]+m*+g[d+8>>2];g[j>>2]=n;g[j+4>>2]=o;g[j+8>>2]=m;g[j+12>>2]=0.0;g[h>>2]=p;g[h+4>>2]=q;g[h+8>>2]=r;g[h+12>>2]=0.0;k=+g[e>>2];l=+g[f>>2];if(!(k>l)){i=s;return}g[e>>2]=l;g[f>>2]=k;g[j>>2]=p;g[j+4>>2]=q;g[j+8>>2]=r;g[j+12>>2]=0.0;g[h>>2]=n;g[h+4>>2]=o;g[h+8>>2]=m;g[h+12>>2]=0.0;i=s;return}function $f(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0;j=i;i=i+32|0;d=a[b+8>>0]|0?d:e;if(((c[(c[d+4>>2]|0)+4>>2]|0)+-21|0)>>>0>=9){i=j;return}e=c[(c[d+8>>2]|0)+192>>2]|0;y=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);c[b+64>>2]=f;g[b+68>>2]=y+.05999999865889549;c[b+56>>2]=h;h=c[b+16>>2]|0;Ub[c[(c[h>>2]|0)+28>>2]&127](h,j+16|0,j);y=+g[j>>2];x=+g[j+16>>2];w=+g[j+4>>2];v=+g[j+16+4>>2];u=+g[j+8>>2];t=+g[j+16+8>>2];h=c[d+12>>2]|0;B=+g[h>>2];o=+g[h+16>>2];C=+g[h+32>>2];z=+g[h+4>>2];m=+g[h+20>>2];A=+g[h+36>>2];q=+g[h+8>>2];k=+g[h+24>>2];r=+g[h+40>>2];D=-+g[h+48>>2];s=-+g[h+52>>2];l=-+g[h+56>>2];p=(y+x)*.5*B+(w+v)*.5*o+(u+t)*.5*C+(B*D+o*s+C*l);n=(y+x)*.5*z+(w+v)*.5*m+(u+t)*.5*A+(z*D+m*s+A*l);l=(y+x)*.5*q+(w+v)*.5*k+(u+t)*.5*r+(q*D+k*s+r*l);s=+g[b+68>>2];o=((y-x)*.5+s)*+F(+(B+o*0.0+C*0.0))+((w-v)*.5+s)*+F(+(B*0.0+o+C*0.0))+((u-t)*.5+s)*+F(+(C+(B*0.0+o*0.0)));m=((y-x)*.5+s)*+F(+(z+m*0.0+A*0.0))+((w-v)*.5+s)*+F(+(z*0.0+m+A*0.0))+((u-t)*.5+s)*+F(+(A+(z*0.0+m*0.0)));k=((y-x)*.5+s)*+F(+(q+k*0.0+r*0.0))+((w-v)*.5+s)*+F(+(q*0.0+k+r*0.0))+((u-t)*.5+s)*+F(+(r+(q*0.0+k*0.0)));g[b+24>>2]=p-o;g[b+28>>2]=n-m;g[b+32>>2]=l-k;g[b+36>>2]=0.0;g[b+40>>2]=p+o;g[b+44>>2]=n+m;g[b+48>>2]=l+k;g[b+52>>2]=0.0;Yb[c[(c[e>>2]|0)+64>>2]&127](e,b+12|0,b+24|0,b+40|0);i=j;return}function ag(b){b=b|0;var d=0;c[b>>2]=4564;d=c[b+176>>2]|0;if(d|0){if(a[b+180>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+176>>2]=0}a[b+180>>0]=1;c[b+176>>2]=0;c[b+168>>2]=0;c[b+172>>2]=0;d=c[b+156>>2]|0;if(d|0){if(a[b+160>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+156>>2]=0}a[b+160>>0]=1;c[b+156>>2]=0;c[b+148>>2]=0;c[b+152>>2]=0;d=c[b+136>>2]|0;if(d|0){if(a[b+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;d=c[b+116>>2]|0;if(d|0){if(a[b+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=0;c[b+108>>2]=0;c[b+112>>2]=0;d=c[b+96>>2]|0;if(d|0){if(a[b+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;d=c[b+76>>2]|0;if(d|0){if(a[b+80>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+76>>2]=0}a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;c[b+72>>2]=0;d=c[b+56>>2]|0;if(d|0){if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;d=c[b+36>>2]|0;if(d|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;d=c[b+16>>2]|0;if(!d){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}function bg(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var i=0;c[6324]=(c[6324]|0)+1;i=ic(787)|0;if(!i)i=0;else{c[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}c[i+4>>2]=4;c[i+8>>2]=-1;c[i+12>>2]=-1;g[i+16>>2]=34028234663852886.0e22;a[i+20>>0]=1;a[i+21>>0]=0;c[i+24>>2]=-1;c[i+28>>2]=b;c[i+32>>2]=d;g[i+36>>2]=0.0;g[i+40>>2]=.30000001192092896;c[i+44>>2]=0;c[i>>2]=4452;d=i+552|0;c[d>>2]=c[e>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];d=i+568|0;c[d>>2]=c[e+16>>2];c[d+4>>2]=c[e+16+4>>2];c[d+8>>2]=c[e+16+8>>2];c[d+12>>2]=c[e+16+12>>2];d=i+584|0;c[d>>2]=c[e+32>>2];c[d+4>>2]=c[e+32+4>>2];c[d+8>>2]=c[e+32+8>>2];c[d+12>>2]=c[e+32+12>>2];d=i+600|0;c[d>>2]=c[e+48>>2];c[d+4>>2]=c[e+48+4>>2];c[d+8>>2]=c[e+48+8>>2];c[d+12>>2]=c[e+48+12>>2];e=i+616|0;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];e=i+632|0;c[e>>2]=c[f+16>>2];c[e+4>>2]=c[f+16+4>>2];c[e+8>>2]=c[f+16+8>>2];c[e+12>>2]=c[f+16+12>>2];e=i+648|0;c[e>>2]=c[f+32>>2];c[e+4>>2]=c[f+32+4>>2];c[e+8>>2]=c[f+32+8>>2];c[e+12>>2]=c[f+32+12>>2];e=i+664|0;c[e>>2]=c[f+48>>2];c[e+4>>2]=c[f+48+4>>2];c[e+8>>2]=c[f+48+8>>2];c[e+12>>2]=c[f+48+12>>2];g[i+688>>2]=0.0;g[i+692>>2]=-1.0;g[i+696>>2]=.8999999761581421;g[i+700>>2]=.30000001192092896;g[i+704>>2]=1.0;g[i+708>>2]=0.0;g[i+712>>2]=0.0;a[i+716>>0]=0;a[i+736>>0]=0;a[i+737>>0]=0;a[i+738>>0]=0;a[i+739>>0]=1;a[i+740>>0]=h&1;f=i+748|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;g[i+732>>2]=h?-1.0:1.0;return i|0}function cg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0.0,z=0.0;x=i;i=i+48|0;u=+g[e>>2];v=+g[d>>2];w=+g[e+4>>2];t=+g[d+4>>2];s=+g[e+8>>2];n=+g[d+8>>2];o=+G(+((u-v)*.5*(u-v)*.5+(w-t)*.5*(w-t)*.5+(s-n)*.5*(s-n)*.5));p=+g[a+60>>2];d=+F(+p)>.7071067690849304;q=+g[a+56>>2];if(d){m=1.0/+G(+(p*p+q*q));r=+g[a+52>>2];f=r*-(p*m);h=(p*p+q*q)*m;j=0.0;k=-(r*q*m);l=-(p*m);m=q*m}else{r=+g[a+52>>2];l=1.0/+G(+(r*r+q*q));f=(r*r+q*q)*l;h=-(p*r*l);j=-(q*l);k=p*-(q*l);l=r*l;m=0.0}y=(u+v)*.5*r+(w+t)*.5*q+(s+n)*.5*p-+g[a+68>>2];z=(u+v)*.5-r*y;j=o*j;r=o*l;v=o*m;l=o*h;m=o*k;u=o*f;g[x>>2]=l+(j+z);g[x+4>>2]=m+(r+((w+t)*.5-q*y));g[x+8>>2]=u+(v+((s+n)*.5-p*y));g[x+12>>2]=0.0;g[x+16>>2]=j+z-l;g[x+20>>2]=r+((w+t)*.5-q*y)-m;g[x+24>>2]=v+((s+n)*.5-p*y)-u;g[x+28>>2]=0.0;g[x+32>>2]=z-j-l;g[x+36>>2]=(w+t)*.5-q*y-r-m;g[x+40>>2]=(s+n)*.5-p*y-v-u;g[x+44>>2]=0.0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,x,0,0);g[x>>2]=z-j-l;g[x+4>>2]=(w+t)*.5-q*y-r-m;g[x+8>>2]=(s+n)*.5-p*y-v-u;g[x+12>>2]=0.0;g[x+16>>2]=l+(z-j);g[x+20>>2]=m+((w+t)*.5-q*y-r);g[x+24>>2]=u+((s+n)*.5-p*y-v);g[x+28>>2]=0.0;g[x+32>>2]=l+(j+z);g[x+36>>2]=m+(r+((w+t)*.5-q*y));g[x+40>>2]=u+(v+((s+n)*.5-p*y));g[x+44>>2]=0.0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,x,0,1);i=x;return}function dg(a,b,e){a=a|0;b=b|0;e=e|0;Ue(a,b,e)|0;c[b+264>>2]=c[a+304>>2];c[b+268>>2]=c[a+308>>2];c[b+272>>2]=c[a+312>>2];c[b+276>>2]=c[a+316>>2];c[b+280>>2]=c[a+320>>2];c[b+284>>2]=c[a+324>>2];c[b+288>>2]=c[a+328>>2];c[b+292>>2]=c[a+332>>2];c[b+296>>2]=c[a+336>>2];c[b+300>>2]=c[a+340>>2];c[b+304>>2]=c[a+344>>2];c[b+308>>2]=c[a+348>>2];c[b+312>>2]=c[a+352>>2];c[b+316>>2]=c[a+356>>2];c[b+320>>2]=c[a+360>>2];c[b+324>>2]=c[a+364>>2];c[b+328>>2]=c[a+368>>2];c[b+332>>2]=c[a+372>>2];c[b+336>>2]=c[a+376>>2];c[b+340>>2]=c[a+380>>2];c[b+456>>2]=c[a+384>>2];c[b+344>>2]=c[a+584>>2];c[b+348>>2]=c[a+588>>2];c[b+352>>2]=c[a+592>>2];c[b+356>>2]=c[a+596>>2];c[b+360>>2]=c[a+388>>2];c[b+364>>2]=c[a+392>>2];c[b+368>>2]=c[a+396>>2];c[b+372>>2]=c[a+400>>2];c[b+376>>2]=c[a+404>>2];c[b+380>>2]=c[a+408>>2];c[b+384>>2]=c[a+412>>2];c[b+388>>2]=c[a+416>>2];c[b+392>>2]=c[a+420>>2];c[b+396>>2]=c[a+424>>2];c[b+400>>2]=c[a+428>>2];c[b+404>>2]=c[a+432>>2];c[b+408>>2]=c[a+436>>2];c[b+412>>2]=c[a+440>>2];c[b+416>>2]=c[a+444>>2];c[b+420>>2]=c[a+448>>2];c[b+424>>2]=c[a+452>>2];c[b+428>>2]=c[a+456>>2];c[b+432>>2]=c[a+460>>2];c[b+436>>2]=c[a+464>>2];c[b+440>>2]=c[a+468>>2];c[b+444>>2]=c[a+472>>2];c[b+448>>2]=c[a+476>>2];c[b+452>>2]=c[a+480>>2];c[b+460>>2]=c[a+484>>2];c[b+464>>2]=c[a+488>>2];c[b+492>>2]=d[a+492>>0];c[b+468>>2]=c[a+496>>2];c[b+472>>2]=c[a+500>>2];c[b+476>>2]=c[a+504>>2];c[b+480>>2]=c[a+508>>2];c[b+484>>2]=c[a+512>>2];c[b+488>>2]=c[a+516>>2];return 12539}function eg(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,i=0.0,j=0.0,k=0,l=0,m=0.0;c[6042]=(c[6042]|0)+1;if(!(c[b+4>>2]&2))j=.019999999552965164;else{k=c[d+192>>2]|0;i=+Ob[c[(c[k>>2]|0)+20>>2]&1](k,.019999999552965164);k=c[e+192>>2]|0;j=+Ob[c[(c[k>>2]|0)+20>>2]&1](k,.019999999552965164);j=i<j?i:j}m=+g[d+184>>2];i=+g[e+184>>2];i=m<i?m:i;f=c[b+68>>2]|0;h=c[f+8>>2]|0;if(!h){if(c[b+4>>2]&4|0){b=0;return b|0}c[6324]=(c[6324]|0)+1;f=ic(823)|0;if(!f)k=0;else{c[(f+4+15&-16)+-4>>2]=f;k=f+4+15&-16}}else{k=c[f+12>>2]|0;c[f+12>>2]=c[k>>2];c[f+8>>2]=h+-1}c[k>>2]=1025;f=k+120|0;h=f+44|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(h|0));f=k+312|0;h=f+44|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(h|0));f=k+504|0;h=f+44|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(h|0));f=k+696|0;h=f+44|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(h|0));c[k+772>>2]=d;c[k+776>>2]=e;c[k+780>>2]=0;g[k+784>>2]=j;g[k+788>>2]=i;e=k;f=c[b+12>>2]|0;c[k+800>>2]=f;if((f|0)==(c[b+16>>2]|0)?(l=f|0?f<<1:1,(f|0)<(l|0)):0){if(!l)d=0;else{c[6324]=(c[6324]|0)+1;f=ic((l<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}d=f;f=c[b+12>>2]|0}if((f|0)>0){h=0;do{c[d+(h<<2)>>2]=c[(c[b+20>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(f|0))}h=c[b+20>>2]|0;if(h){if(a[b+24>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0);f=c[b+12>>2]|0}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=d;c[b+16>>2]=l}c[(c[b+20>>2]|0)+(f<<2)>>2]=e;c[b+12>>2]=f+1;b=k;return b|0}function fg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0;c[6324]=(c[6324]|0)+1;h=ic(787)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}c[h+4>>2]=4;c[h+8>>2]=-1;c[h+12>>2]=-1;g[h+16>>2]=34028234663852886.0e22;a[h+20>>0]=1;a[h+21>>0]=0;c[h+24>>2]=-1;c[h+28>>2]=b;c[h+32>>2]=d;g[h+36>>2]=0.0;g[h+40>>2]=.30000001192092896;c[h+44>>2]=0;c[h>>2]=4452;d=h+552|0;c[d>>2]=c[e>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];d=h+568|0;c[d>>2]=c[e+16>>2];c[d+4>>2]=c[e+16+4>>2];c[d+8>>2]=c[e+16+8>>2];c[d+12>>2]=c[e+16+12>>2];d=h+584|0;c[d>>2]=c[e+32>>2];c[d+4>>2]=c[e+32+4>>2];c[d+8>>2]=c[e+32+8>>2];c[d+12>>2]=c[e+32+12>>2];d=h+600|0;c[d>>2]=c[e+48>>2];c[d+4>>2]=c[e+48+4>>2];c[d+8>>2]=c[e+48+8>>2];c[d+12>>2]=c[e+48+12>>2];e=h+616|0;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];e=h+632|0;c[e>>2]=c[f+16>>2];c[e+4>>2]=c[f+16+4>>2];c[e+8>>2]=c[f+16+8>>2];c[e+12>>2]=c[f+16+12>>2];e=h+648|0;c[e>>2]=c[f+32>>2];c[e+4>>2]=c[f+32+4>>2];c[e+8>>2]=c[f+32+8>>2];c[e+12>>2]=c[f+32+12>>2];e=h+664|0;c[e>>2]=c[f+48>>2];c[e+4>>2]=c[f+48+4>>2];c[e+8>>2]=c[f+48+8>>2];c[e+12>>2]=c[f+48+12>>2];g[h+688>>2]=0.0;g[h+692>>2]=-1.0;g[h+696>>2]=.8999999761581421;g[h+700>>2]=.30000001192092896;g[h+704>>2]=1.0;g[h+708>>2]=0.0;g[h+712>>2]=0.0;a[h+716>>0]=0;a[h+736>>0]=0;a[h+737>>0]=0;a[h+738>>0]=0;a[h+739>>0]=1;a[h+740>>0]=0;f=h+748|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;g[h+732>>2]=1.0;return h|0}function gg(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;Ud(b,d);c[b>>2]=3428;c[6324]=(c[6324]|0)+1;e=ic(27)|0;i=e+4+15&-16;c[i+-4>>2]=e;a[i+4>>0]=0;c[(e+4+15&-16)>>2]=3460;c[b+92>>2]=i;c[6324]=(c[6324]|0)+1;i=ic(27)|0;e=i+4+15&-16;c[e+-4>>2]=i;a[e+4>>0]=0;c[(i+4+15&-16)>>2]=3480;c[b+96>>2]=e;c[6324]=(c[6324]|0)+1;e=ic(27)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[e>>2]=3480;c[b+100>>2]=e;a[e+4>>0]=1;c[6324]=(c[6324]|0)+1;i=ic(27)|0;e=i+4+15&-16;c[e+-4>>2]=i;a[e+4>>0]=0;c[(i+4+15&-16)>>2]=3500;c[b+104>>2]=e;c[6324]=(c[6324]|0)+1;e=ic(27)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[e>>2]=3520;c[b+108>>2]=e;a[e+4>>0]=1;if(!(a[b+20>>0]|0))return;e=c[b+16>>2]|0;if(!e)return;if((c[e>>2]|0)>=156)return;f=c[e+16>>2]|0;if(f){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);e=c[b+16>>2]|0;if(!e)i=b+16|0;else{f=b+16|0;g=11}}else{f=b+16|0;g=11}if((g|0)==11){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);i=f}c[6324]=(c[6324]|0)+1;e=ic(39)|0;if(!e)h=0;else{c[(e+4+15&-16)+-4>>2]=e;h=e+4+15&-16}e=c[d+12>>2]|0;c[h>>2]=156;f=h+4|0;c[f>>2]=e;c[6324]=(c[6324]|0)+1;e=ic((e*156|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[h+16>>2]=e;c[h+12>>2]=e;b=c[f>>2]|0;c[h+8>>2]=b;if(b+-1|0){g=c[h>>2]|0;f=e;d=b+-1|0;do{j=f;f=f+g|0;c[j>>2]=f;d=d+-1|0}while((d|0)!=0);e=e+(S(g,b+-1|0)|0)|0}c[e>>2]=0;c[i>>2]=h;return}function hg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0;c[6324]=(c[6324]|0)+1;h=ic(627)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}c[h+4>>2]=5;c[h+8>>2]=-1;c[h+12>>2]=-1;g[h+16>>2]=34028234663852886.0e22;a[h+20>>0]=1;a[h+21>>0]=0;c[h+24>>2]=-1;c[h+28>>2]=b;c[h+32>>2]=d;g[h+36>>2]=0.0;g[h+40>>2]=.30000001192092896;c[h+44>>2]=0;c[h>>2]=4220;d=h+300|0;c[d>>2]=c[e>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];d=h+316|0;c[d>>2]=c[e+16>>2];c[d+4>>2]=c[e+16+4>>2];c[d+8>>2]=c[e+16+8>>2];c[d+12>>2]=c[e+16+12>>2];d=h+332|0;c[d>>2]=c[e+32>>2];c[d+4>>2]=c[e+32+4>>2];c[d+8>>2]=c[e+32+8>>2];c[d+12>>2]=c[e+32+12>>2];d=h+348|0;c[d>>2]=c[e+48>>2];c[d+4>>2]=c[e+48+4>>2];c[d+8>>2]=c[e+48+8>>2];c[d+12>>2]=c[e+48+12>>2];e=h+364|0;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];e=h+380|0;c[e>>2]=c[f+16>>2];c[e+4>>2]=c[f+16+4>>2];c[e+8>>2]=c[f+16+8>>2];c[e+12>>2]=c[f+16+12>>2];e=h+396|0;c[e>>2]=c[f+32>>2];c[e+4>>2]=c[f+32+4>>2];c[e+8>>2]=c[f+32+8>>2];c[e+12>>2]=c[f+32+12>>2];e=h+412|0;c[e>>2]=c[f+48>>2];c[e+4>>2]=c[f+48+4>>2];c[e+8>>2]=c[f+48+8>>2];c[e+12>>2]=c[f+48+12>>2];a[h+552>>0]=0;c[h+524>>2]=0;g[h+572>>2]=-1.0;g[h+444>>2]=999999984306749440.0;g[h+448>>2]=999999984306749440.0;g[h+452>>2]=999999984306749440.0;g[h+428>>2]=1.0;g[h+432>>2]=.30000001192092896;g[h+436>>2]=1.0;g[h+440>>2]=.009999999776482582;g[h+456>>2]=.05000000074505806;c[h+592>>2]=0;g[h+596>>2]=0.0;g[h+600>>2]=.699999988079071;g[h+604>>2]=0.0;return h|0}function ig(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;l=c[d>>2]|0;l=Jb[c[(c[l>>2]|0)+56>>2]&31](l,116)|0;rl(l,d,e,f,0);c[l>>2]=9108;a[l+104>>0]=1;c[l+100>>2]=0;c[l+92>>2]=0;c[l+96>>2]=0;c[6324]=(c[6324]|0)+1;b=ic(83)|0;if(!b)h=0;else{c[(b+4+15&-16)+-4>>2]=b;h=b+4+15&-16}c[h>>2]=9400;i=h+20|0;a[i>>0]=1;j=h+16|0;c[j>>2]=0;d=h+8|0;c[d>>2]=0;k=h+12|0;c[k>>2]=0;a[h+40>>0]=1;c[h+36>>2]=0;c[h+28>>2]=0;c[h+32>>2]=0;a[h+60>>0]=1;c[h+56>>2]=0;c[h+48>>2]=0;c[h+52>>2]=0;c[6324]=(c[6324]|0)+1;b=ic(43)|0;if(!b)g=0;else{c[(b+4+15&-16)+-4>>2]=b;g=b+4+15&-16}d=c[d>>2]|0;if((d|0)>0){b=0;do{m=g+(b*12|0)|0;n=(c[j>>2]|0)+(b*12|0)|0;c[m>>2]=c[n>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];b=b+1|0}while((b|0)!=(d|0))}b=c[j>>2]|0;if(!b){a[i>>0]=1;c[j>>2]=g;c[k>>2]=2;xf(h);n=l+84|0;c[n>>2]=h;n=e+4|0;n=c[n>>2]|0;n=n+72|0;n=c[n>>2]|0;m=l+108|0;c[m>>2]=n;m=f+4|0;m=c[m>>2]|0;m=m+72|0;m=c[m>>2]|0;n=l+112|0;c[n>>2]=m;return l|0}if(a[i>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0)}c[j>>2]=0;a[i>>0]=1;c[j>>2]=g;c[k>>2]=2;xf(h);n=l+84|0;c[n>>2]=h;n=e+4|0;n=c[n>>2]|0;n=n+72|0;n=c[n>>2]|0;m=l+108|0;c[m>>2]=n;m=f+4|0;m=c[m>>2]|0;m=m+72|0;m=c[m>>2]|0;n=l+112|0;c[n>>2]=m;return l|0}function jg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;kb[c[(c[b>>2]|0)+32>>2]&255](b);e=yb[c[(c[b>>2]|0)+16>>2]&63](b,104,1)|0;d=c[e+8>>2]|0;f=d;g=f+104|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));c[d+88>>2]=c[a+248>>2];c[d+92>>2]=c[a+252>>2];c[d+96>>2]=c[a+256>>2];c[d+100>>2]=c[a+260>>2];c[d>>2]=c[a+92>>2];c[d+4>>2]=c[a+96>>2];c[d+8>>2]=c[a+100>>2];c[d+12>>2]=c[a+104>>2];c[d+16>>2]=c[a+108>>2];c[d+20>>2]=c[a+116>>2];c[d+24>>2]=c[a+120>>2];c[d+28>>2]=c[a+124>>2];c[d+32>>2]=c[a+128>>2];c[d+36>>2]=c[a+132>>2];c[d+40>>2]=c[a+140>>2];c[d+44>>2]=c[a+144>>2];c[d+48>>2]=c[a+148>>2];c[d+52>>2]=c[a+152>>2];c[d+56>>2]=c[a+168>>2];c[d+60>>2]=c[a+172>>2];c[d+64>>2]=c[a+112>>2];c[d+68>>2]=c[a+156>>2];c[d+72>>2]=c[a+160>>2];c[d+76>>2]=c[a+164>>2];c[d+80>>2]=c[a+136>>2];ib[c[(c[b>>2]|0)+20>>2]&31](b,e,12394,1145853764,d);d=c[a+8>>2]|0;if((d|0)<=0){aj(a,b);cd(a,b);a=c[b>>2]|0;a=a+36|0;a=c[a>>2]|0;kb[a&255](b);return}f=0;do{e=c[(c[a+16>>2]|0)+(f<<2)>>2]|0;if(c[e+248>>2]&8){g=ob[c[(c[e>>2]|0)+16>>2]&127](e)|0;g=yb[c[(c[b>>2]|0)+16>>2]&63](b,g,1)|0;d=yb[c[(c[e>>2]|0)+20>>2]&63](e,c[g+8>>2]|0,b)|0;ib[c[(c[b>>2]|0)+20>>2]&31](b,g,d,1497645651,e);d=c[a+8>>2]|0}f=f+1|0}while((f|0)<(d|0));aj(a,b);cd(a,b);a=c[b>>2]|0;a=a+36|0;a=c[a>>2]|0;kb[a&255](b);return}function kg(a,b){a=a|0;b=+b;var d=0,e=0,f=0,h=0,j=0.0,k=0.0,l=0.0;h=i;i=i+32|0;d=c[a+8>>2]|0;if((d|0)<=0){i=h;return}f=0;do{e=c[(c[a+16>>2]|0)+(f<<2)>>2]|0;if((!((e|0)==0?1:(c[e+248>>2]&2|0)==0)?(c[e+216>>2]|0)!=2:0)?!(b==0.0?1:(c[e+204>>2]&2|0)==0):0){d=c[e+520>>2]|0;if(!d)d=e+4|0;else{mb[c[(c[d>>2]|0)+8>>2]&127](d,e+4|0);d=e+4|0}k=1.0/b*(+g[e+56>>2]-+g[e+120>>2]);l=1.0/b*(+g[e+60>>2]-+g[e+124>>2]);g[e+352>>2]=1.0/b*(+g[e+52>>2]-+g[e+116>>2]);g[e+356>>2]=k;g[e+360>>2]=l;g[e+364>>2]=0.0;rf(e+68|0,d,h+8|0,h);l=+g[h>>2];k=1.0/b*l*+g[h+8+4>>2];j=1.0/b*l*+g[h+8+8>>2];g[e+368>>2]=1.0/b*+g[h+8>>2]*l;g[e+372>>2]=k;g[e+376>>2]=j;g[e+380>>2]=0.0;c[e+132>>2]=c[e+352>>2];c[e+132+4>>2]=c[e+352+4>>2];c[e+132+8>>2]=c[e+352+8>>2];c[e+132+12>>2]=c[e+352+12>>2];c[e+148>>2]=c[e+368>>2];c[e+148+4>>2]=c[e+368+4>>2];c[e+148+8>>2]=c[e+368+8>>2];c[e+148+12>>2]=c[e+368+12>>2];c[e+68>>2]=c[d>>2];c[e+68+4>>2]=c[d+4>>2];c[e+68+8>>2]=c[d+8>>2];c[e+68+12>>2]=c[d+12>>2];c[e+84>>2]=c[e+20>>2];c[e+84+4>>2]=c[e+20+4>>2];c[e+84+8>>2]=c[e+20+8>>2];c[e+84+12>>2]=c[e+20+12>>2];c[e+100>>2]=c[e+36>>2];c[e+100+4>>2]=c[e+36+4>>2];c[e+100+8>>2]=c[e+36+8>>2];c[e+100+12>>2]=c[e+36+12>>2];c[e+116>>2]=c[e+52>>2];c[e+116+4>>2]=c[e+52+4>>2];c[e+116+8>>2]=c[e+52+8>>2];c[e+116+12>>2]=c[e+52+12>>2];d=c[a+8>>2]|0}f=f+1|0}while((f|0)<(d|0));i=h;return}function lg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;c[6318]=(c[6318]|0)+1;g=((d<<16|b)+~((d<<16|b)<<15)>>10^(d<<16|b)+~((d<<16|b)<<15))*9|0;l=c[a+36>>2]|0;g=l+(((c[a+12>>2]|0)+-1&((g>>6^g)+~((g>>6^g)<<11)>>16^(g>>6^g)+~((g>>6^g)<<11)))<<2)|0;f=c[g>>2]|0;if((f|0)==-1){n=0;return n|0}m=c[a+16>>2]|0;e=f;while(1){k=m+(e*12|0)|0;if((c[k>>2]|0)==(b|0)?(c[m+(e*12|0)+4>>2]|0)==(d|0):0)break;e=c[(c[a+56>>2]|0)+(e<<2)>>2]|0;if((e|0)==-1){e=0;n=21;break}}if((n|0)==21)return e|0;if(!k){n=0;return n|0}j=c[m+(e*12|0)+8>>2]|0;i=(e*12|0)/12|0;h=c[a+56>>2]|0;if((f|0)!=(i|0)){b=f;while(1){d=h+(b<<2)|0;e=c[d>>2]|0;if((e|0)==(i|0))break;else b=e}e=c[h+(i<<2)>>2]|0;if((b|0)==-1)n=11;else c[d>>2]=e}else{e=c[h+(f<<2)>>2]|0;n=11}if((n|0)==11)c[g>>2]=e;f=(c[a+8>>2]|0)+-1|0;if((f|0)==(i|0)){c[a+8>>2]=i;n=j;return n|0}g=c[m+(f*12|0)+4>>2]<<16|c[m+(f*12|0)>>2];g=(g+~(g<<15)>>10^g+~(g<<15))*9|0;g=((g>>6^g)+~((g>>6^g)<<11)>>16^(g>>6^g)+~((g>>6^g)<<11))&(c[a+12>>2]|0)+-1;e=c[l+(g<<2)>>2]|0;if((e|0)!=(f|0)){b=e;while(1){d=h+(b<<2)|0;e=c[d>>2]|0;if((e|0)==(f|0))break;else b=e}e=c[h+(f<<2)>>2]|0;if((b|0)==-1)n=19;else c[d>>2]=e}else{e=c[h+(f<<2)>>2]|0;n=19}if((n|0)==19)c[l+(g<<2)>>2]=e;c[k>>2]=c[m+(f*12|0)>>2];c[k+4>>2]=c[m+(f*12|0)+4>>2];c[k+8>>2]=c[m+(f*12|0)+8>>2];n=(c[a+36>>2]|0)+(g<<2)|0;c[(c[a+56>>2]|0)+(i<<2)>>2]=c[n>>2];c[n>>2]=i;c[a+8>>2]=(c[a+8>>2]|0)+-1;n=j;return n|0}function mg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;d=c[b+248>>2]|0;if((b|0)==0|(d|0)!=8){if(!((b|0)==0|(d&2|0)==0)){mb[c[(c[a>>2]|0)+92>>2]&127](a,b);return}d=c[b+188>>2]|0;if(d|0){h=c[a+68>>2]|0;h=ob[c[(c[h>>2]|0)+36>>2]&127](h)|0;Ub[c[(c[h>>2]|0)+40>>2]&127](h,d,c[a+24>>2]|0);h=c[a+68>>2]|0;Ub[c[(c[h>>2]|0)+12>>2]&127](h,d,c[a+24>>2]|0);c[b+188>>2]=0}e=c[a+8>>2]|0;if((e|0)<=0)return;f=c[a+16>>2]|0;d=0;while(1){g=f+(d<<2)|0;if((c[g>>2]|0)==(b|0))break;h=d+1|0;if((h|0)<(e|0))d=h;else{i=26;break}}if((i|0)==26)return;if((d|0)>=(e|0))return;c[g>>2]=c[f+(e+-1<<2)>>2];c[(c[a+16>>2]|0)+(e+-1<<2)>>2]=b;c[a+8>>2]=e+-1;return}g=c[a+328>>2]|0;a:do if((g|0)>0){f=c[a+336>>2]|0;d=0;while(1){e=f+(d<<2)|0;if((c[e>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(g|0))break a}if((d|0)<(g|0)){c[e>>2]=c[f+(g+-1<<2)>>2];c[(c[a+336>>2]|0)+(g+-1<<2)>>2]=b;c[a+328>>2]=g+-1}}while(0);d=c[b+188>>2]|0;if(d|0){h=c[a+68>>2]|0;h=ob[c[(c[h>>2]|0)+36>>2]&127](h)|0;Ub[c[(c[h>>2]|0)+40>>2]&127](h,d,c[a+24>>2]|0);h=c[a+68>>2]|0;Ub[c[(c[h>>2]|0)+12>>2]&127](h,d,c[a+24>>2]|0);c[b+188>>2]=0}e=c[a+8>>2]|0;if((e|0)<=0)return;f=c[a+16>>2]|0;d=0;while(1){g=f+(d<<2)|0;if((c[g>>2]|0)==(b|0))break;h=d+1|0;if((h|0)<(e|0))d=h;else{i=26;break}}if((i|0)==26)return;if((d|0)>=(e|0))return;c[g>>2]=c[f+(e+-1<<2)>>2];c[(c[a+16>>2]|0)+(e+-1<<2)>>2]=b;c[a+8>>2]=e+-1;return}function ng(a,b){a=a|0;b=b|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=i;i=i+16|0;o=c[a+92>>2]|0;if(!(ob[c[(c[o>>2]|0)+56>>2]&127](o)|0)){i=p;return}o=c[a+92>>2]|0;o=ob[c[(c[o>>2]|0)+28>>2]&127](o)|0;d=c[o+4>>2]|0;if((d|0)>1){Gd(o,0,d+-1|0);d=c[o+4>>2]|0}f=d-(c[a+104>>2]|0)|0;c[p>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;ni(o,f,p);c[a+104>>2]=0;f=c[o+4>>2]|0;if((f|0)>0){l=0;m=0;g=0;d=0;do{k=c[o+12>>2]|0;j=k+(l<<4)|0;q=m;m=c[j>>2]|0;k=k+(l<<4)+4|0;h=c[k>>2]|0;if(!((m|0)==(q|0)&(h|0)==(g|0))){q=m+54|0;g=m+48|0;if((((((e[q>>1]|0)>=(e[h+48>>1]|0)?(e[h+54>>1]|0)>=(e[g>>1]|0):0)?(e[q+2>>1]|0)>=(e[h+48+2>>1]|0):0)?(e[h+54+2>>1]|0)>=(e[g+2>>1]|0):0)?(e[q+4>>1]|0)>=(e[h+52>>1]|0):0)?(e[h+54+4>>1]|0)>=(e[m+52>>1]|0):0)g=h;else{d=h;n=14}}else{d=g;n=14}if((n|0)==14){n=0;q=c[a+92>>2]|0;Ub[c[(c[q>>2]|0)+32>>2]&127](q,j,b);c[j>>2]=0;c[k>>2]=0;q=(c[a+104>>2]|0)+1|0;c[a+104>>2]=q;c[6038]=(c[6038]|0)+-1;g=d;f=c[o+4>>2]|0;d=q}l=l+1|0}while((l|0)<(f|0));if((f|0)>1){Gd(o,0,f+-1|0);f=c[o+4>>2]|0;d=c[a+104>>2]|0}}else d=0;c[p>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;ni(o,f-d|0,p);c[a+104>>2]=0;i=p;return}function og(a,b,d){a=a|0;b=+b;d=+d;var e=0,f=0,h=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0,x=0.0,y=0.0,z=0.0,A=0.0;h=i;i=i+16|0;d=+g[a+376>>2]*b;b=+g[a+492>>2];f=c[a+832>>2]|0;if((f|0)<=0){i=h;return}e=0;do{t=c[a+840>>2]|0;k=t+(e*96|0)+20|0;w=c[k>>2]|0;o=c[t+(e*96|0)>>2]|0;z=+g[t+(e*96|0)+4>>2];y=+g[t+(e*96|0)+8>>2];x=+g[t+(e*96|0)+12>>2];j=t+(e*96|0)+76|0;v=+g[w+372>>2];q=+g[t+(e*96|0)+84>>2];A=+g[w+376>>2];m=+g[t+(e*96|0)+80>>2];l=+g[j>>2];n=+g[w+368>>2];s=+g[o+8>>2];r=+g[o+12>>2];p=+g[o+16>>2];u=d*(z*+g[w+4>>2]+y*+g[w+8>>2]+x*+g[w+12>>2]+ +g[w+52>>2]-s)+(b*(v*q-A*m+ +g[w+352>>2])-(s-+g[o+24>>2]));q=d*(z*+g[w+20>>2]+y*+g[w+24>>2]+x*+g[w+28>>2]+ +g[w+56>>2]-r)+(b*(+g[w+356>>2]+(A*l-q*n))-(r-+g[o+28>>2]));l=d*(z*+g[w+36>>2]+y*+g[w+40>>2]+x*+g[w+44>>2]+ +g[w+60>>2]-p)+(b*(m*n-v*l+ +g[w+360>>2])-(p-+g[o+32>>2]));v=+g[t+(e*96|0)+24>>2];n=(u*+g[t+(e*96|0)+28>>2]+q*+g[t+(e*96|0)+32>>2]+ +g[t+(e*96|0)+36>>2]*l)*v;m=(u*+g[t+(e*96|0)+44>>2]+q*+g[t+(e*96|0)+48>>2]+l*+g[t+(e*96|0)+52>>2])*v;l=v*(u*+g[t+(e*96|0)+60>>2]+q*+g[t+(e*96|0)+64>>2]+l*+g[t+(e*96|0)+68>>2]);q=+g[t+(e*96|0)+92>>2];g[o+8>>2]=s+n*q;g[o+12>>2]=q*m+r;g[o+16>>2]=q*l+p;k=c[k>>2]|0;g[h>>2]=-n;g[h+4>>2]=-m;g[h+8>>2]=-l;g[h+12>>2]=0.0;Xi(k,h,j);e=e+1|0}while((e|0)!=(f|0));i=h;return}function pg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0.0,l=0.0,m=0,n=0.0;m=i;i=i+688|0;c[m+568+8>>2]=0;c[m+568+12>>2]=-1;c[m+568+16>>2]=1065353216;c[m+568+20>>2]=1065353216;c[m+568+24>>2]=1065353216;g[m+568+28>>2]=0.0;c[m+568+56>>2]=0;c[m+568>>2]=3956;c[m+568+4>>2]=1;c[m+568+60>>2]=c[d>>2];c[m+568+60+4>>2]=c[d+4>>2];c[m+568+60+8>>2]=c[d+8>>2];c[m+568+60+12>>2]=c[d+12>>2];c[m+568+76>>2]=c[d+16>>2];c[m+568+76+4>>2]=c[d+16+4>>2];c[m+568+76+8>>2]=c[d+16+8>>2];c[m+568+76+12>>2]=c[d+16+12>>2];c[m+568+92>>2]=c[d+32>>2];c[m+568+92+4>>2]=c[d+32+4>>2];c[m+568+92+8>>2]=c[d+32+8>>2];c[m+568+92+12>>2]=c[d+32+12>>2];c[m+568+48>>2]=c[b+204>>2];g[m+208+308>>2]=9.999999747378752e-005;a[m+208+332>>0]=0;c[m+200>>2]=8828;d=c[b+4>>2]|0;c[m+176>>2]=8736;c[m+176+4>>2]=m+208;c[m+176+8>>2]=m+200;c[m+176+12>>2]=d;c[m+176+16>>2]=m+568;c[m+176+20>>2]=0;c[m>>2]=3928;c[m+168>>2]=0;g[m+164>>2]=1.0;c[m+172>>2]=c[b+208>>2];if((Jd(m+176|0,b+8|0,b+72|0,b+136|0,b+136|0,m)|0?(h=+g[m+132>>2],j=+g[m+136>>2],k=+g[m+140>>2],h*h+j*j+k*k>9.999999747378752e-005):0)?(l=+g[m+164>>2],l<+g[b+200>>2]):0){n=1.0/+G(+(h*h+j*j+k*k));g[m+132>>2]=h*n;g[m+136>>2]=j*n;g[m+140>>2]=k*n;+Eb[c[(c[b>>2]|0)+12>>2]&3](b,m+132|0,m+148|0,l,e,f)}c[m+568>>2]=8236;b=c[m+568+56>>2]|0;if(!b){i=m;return}kb[c[c[b>>2]>>2]&255](b);b=c[m+568+56>>2]|0;if(!b){i=m;return}c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);i=m;return}function qg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;h=+g[d+100>>2];i=+g[d+16>>2];j=+g[d+20>>2];k=+g[d+24>>2];e=+g[d+108>>2];e=+g[d+112>>2]-h*+g[d+116>>2]-(i*+g[a+64>>2]+j*+g[a+68>>2]+k*+g[a+72>>2]+(+g[d>>2]*+g[a+80>>2]+ +g[d+4>>2]*+g[a+84>>2]+ +g[d+8>>2]*+g[a+88>>2]))*e-e*(+g[d+48>>2]*+g[b+64>>2]+ +g[d+52>>2]*+g[b+68>>2]+ +g[d+56>>2]*+g[b+72>>2]+(+g[d+32>>2]*+g[b+80>>2]+ +g[d+36>>2]*+g[b+84>>2]+ +g[d+40>>2]*+g[b+88>>2]));f=+g[d+120>>2];do if(!(h+e<f)){f=+g[d+124>>2];if(h+e>f){g[d+100>>2]=f;e=f-h;break}else{g[d+100>>2]=h+e;break}}else{g[d+100>>2]=f;e=f-h}while(0);if(c[a+240>>2]|0){h=e*j*+g[a+132>>2]*+g[a+116>>2];j=e*k*+g[a+136>>2]*+g[a+120>>2];g[a+64>>2]=+g[a+112>>2]*e*i*+g[a+128>>2]+ +g[a+64>>2];g[a+68>>2]=h+ +g[a+68>>2];g[a+72>>2]=j+ +g[a+72>>2];j=e*+g[a+100>>2]*+g[d+68>>2];k=e*+g[a+104>>2]*+g[d+72>>2];g[a+80>>2]=e*+g[a+96>>2]*+g[d+64>>2]+ +g[a+80>>2];g[a+84>>2]=j+ +g[a+84>>2];g[a+88>>2]=k+ +g[a+88>>2]}if(!(c[b+240>>2]|0))return +e;k=e*+g[d+52>>2]*+g[b+132>>2]*+g[b+116>>2];j=e*+g[d+56>>2]*+g[b+136>>2]*+g[b+120>>2];g[b+64>>2]=+g[b+112>>2]*e*+g[d+48>>2]*+g[b+128>>2]+ +g[b+64>>2];g[b+68>>2]=k+ +g[b+68>>2];g[b+72>>2]=j+ +g[b+72>>2];j=e*+g[b+100>>2]*+g[d+84>>2];k=e*+g[b+104>>2]*+g[d+88>>2];g[b+80>>2]=e*+g[b+96>>2]*+g[d+80>>2]+ +g[b+80>>2];g[b+84>>2]=j+ +g[b+84>>2];g[b+88>>2]=k+ +g[b+88>>2];return +e}function rg(a){a=a|0;var b=0,d=0,e=0.0,f=0.0,h=0,i=0.0,j=0,k=0.0,l=0,m=0.0,n=0.0,o=0,p=0.0;d=c[a+752>>2]|0;if((d|0)>0){b=0;do{l=(c[a+760>>2]|0)+(b*104|0)+72|0;b=b+1|0;c[l>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0}while((b|0)!=(d|0))}d=c[a+792>>2]|0;if((d|0)>0){b=0;do{o=c[a+800>>2]|0;j=c[o+(b*44|0)+12>>2]|0;h=c[o+(b*44|0)+8>>2]|0;k=+g[h+8>>2];e=+g[j+8>>2]-k;f=+g[h+12>>2];i=+g[j+12>>2]-f;m=+g[h+16>>2];n=+g[j+16>>2]-m;l=c[o+(b*44|0)+16>>2]|0;k=+g[l+8>>2]-k;f=+g[l+12>>2]-f;m=+g[l+16>>2]-m;p=1.0/+G(+((e*f-i*k)*(e*f-i*k)+((i*m-n*f)*(i*m-n*f)+(n*k-e*m)*(n*k-e*m))));g[o+(b*44|0)+20>>2]=p*(i*m-n*f);g[o+(b*44|0)+24>>2]=p*(n*k-e*m);g[o+(b*44|0)+28>>2]=(e*f-i*k)*p;c[o+(b*44|0)+32>>2]=0;g[h+72>>2]=i*m-n*f+ +g[h+72>>2];g[h+76>>2]=n*k-e*m+ +g[h+76>>2];g[h+80>>2]=e*f-i*k+ +g[h+80>>2];g[j+72>>2]=i*m-n*f+ +g[j+72>>2];g[j+76>>2]=n*k-e*m+ +g[j+76>>2];g[j+80>>2]=e*f-i*k+ +g[j+80>>2];g[l+72>>2]=i*m-n*f+ +g[l+72>>2];g[l+76>>2]=n*k-e*m+ +g[l+76>>2];g[l+80>>2]=e*f-i*k+ +g[l+80>>2];b=b+1|0}while((b|0)!=(d|0))}l=c[a+752>>2]|0;if((l|0)<=0)return;a=c[a+760>>2]|0;b=0;do{h=a+(b*104|0)+72|0;i=+g[h>>2];j=a+(b*104|0)+76|0;k=+g[j>>2];d=a+(b*104|0)+80|0;e=+g[d>>2];f=+G(+(i*i+k*k+e*e));if(f>1.1920928955078125e-007){g[h>>2]=i*(1.0/f);g[j>>2]=1.0/f*k;g[d>>2]=1.0/f*e}b=b+1|0}while((b|0)!=(l|0));return}function sg(a,b){a=a|0;b=b|0;var d=0,e=0;c[6324]=(c[6324]|0)+1;d=ic(219)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d>>2]=2948;e=d+4|0;c[e>>2]=c[a>>2];c[e+4>>2]=c[a+4>>2];c[e+8>>2]=c[a+8>>2];c[e+12>>2]=c[a+12>>2];e=d+20|0;c[e>>2]=c[a+16>>2];c[e+4>>2]=c[a+16+4>>2];c[e+8>>2]=c[a+16+8>>2];c[e+12>>2]=c[a+16+12>>2];e=d+36|0;c[e>>2]=c[a+32>>2];c[e+4>>2]=c[a+32+4>>2];c[e+8>>2]=c[a+32+8>>2];c[e+12>>2]=c[a+32+12>>2];e=d+52|0;c[e>>2]=c[a+48>>2];c[e+4>>2]=c[a+48+4>>2];c[e+8>>2]=c[a+48+8>>2];c[e+12>>2]=c[a+48+12>>2];e=d+68|0;c[e>>2]=c[b>>2];c[e+4>>2]=c[b+4>>2];c[e+8>>2]=c[b+8>>2];c[e+12>>2]=c[b+12>>2];e=d+84|0;c[e>>2]=c[b+16>>2];c[e+4>>2]=c[b+16+4>>2];c[e+8>>2]=c[b+16+8>>2];c[e+12>>2]=c[b+16+12>>2];e=d+100|0;c[e>>2]=c[b+32>>2];c[e+4>>2]=c[b+32+4>>2];c[e+8>>2]=c[b+32+8>>2];c[e+12>>2]=c[b+32+12>>2];e=d+116|0;c[e>>2]=c[b+48>>2];c[e+4>>2]=c[b+48+4>>2];c[e+8>>2]=c[b+48+8>>2];c[e+12>>2]=c[b+48+12>>2];b=d+132|0;c[b>>2]=c[a>>2];c[b+4>>2]=c[a+4>>2];c[b+8>>2]=c[a+8>>2];c[b+12>>2]=c[a+12>>2];b=d+148|0;c[b>>2]=c[a+16>>2];c[b+4>>2]=c[a+16+4>>2];c[b+8>>2]=c[a+16+8>>2];c[b+12>>2]=c[a+16+12>>2];b=d+164|0;c[b>>2]=c[a+32>>2];c[b+4>>2]=c[a+32+4>>2];c[b+8>>2]=c[a+32+8>>2];c[b+12>>2]=c[a+32+12>>2];b=d+180|0;c[b>>2]=c[a+48>>2];c[b+4>>2]=c[a+48+4>>2];c[b+8>>2]=c[a+48+8>>2];c[b+12>>2]=c[a+48+12>>2];c[d+196>>2]=0;return d|0}function tg(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;if(!(a[d+164>>0]|0)){f=c[d+148>>2]|0;if((f|0)==(c[d+152>>2]|0)?(k=f|0?f<<1:1,(f|0)<(k|0)):0){if(!k)i=0;else{c[6324]=(c[6324]|0)+1;f=ic((k<<1)+19|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}i=f;f=c[d+148>>2]|0}h=c[d+156>>2]|0;if((f|0)<=0)if(!h)f=d+160|0;else g=27;else{g=0;do{b[i+(g<<1)>>1]=b[h+(g<<1)>>1]|0;g=g+1|0}while((g|0)!=(f|0));g=27}if((g|0)==27){if(a[d+160>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[d+156>>2]=0;f=d+160|0}a[f>>0]=1;c[d+156>>2]=i;c[d+152>>2]=k;f=c[d+148>>2]|0}k=c[d+156>>2]|0;b[k+(f<<1)>>1]=e;c[d+148>>2]=f+1;c[(c[d+32>>2]|0)+4>>2]=k;return}else{f=c[d+128>>2]|0;if((f|0)==(c[d+132>>2]|0)?(j=f|0?f<<1:1,(f|0)<(j|0)):0){if(!j)i=0;else{c[6324]=(c[6324]|0)+1;f=ic((j<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}i=f;f=c[d+128>>2]|0}h=c[d+136>>2]|0;if((f|0)<=0)if(!h)f=d+140|0;else g=12;else{g=0;do{c[i+(g<<2)>>2]=c[h+(g<<2)>>2];g=g+1|0}while((g|0)!=(f|0));g=12}if((g|0)==12){if(a[d+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[d+136>>2]=0;f=d+140|0}a[f>>0]=1;c[d+136>>2]=i;c[d+132>>2]=j;f=c[d+128>>2]|0}k=c[d+136>>2]|0;c[k+(f<<2)>>2]=e;c[d+128>>2]=(c[d+128>>2]|0)+1;c[(c[d+32>>2]|0)+4>>2]=k;return}}function ug(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0;e=+g[d+128>>2];if(!(e!=0.0))return;c[5707]=(c[5707]|0)+1;k=+g[d+96>>2];f=+g[d+16>>2];h=+g[d+20>>2];i=+g[d+24>>2];j=+g[d+108>>2];j=e-k*+g[d+116>>2]-(f*+g[a+144>>2]+h*+g[a+148>>2]+i*+g[a+152>>2]+(+g[d>>2]*+g[a+160>>2]+ +g[d+4>>2]*+g[a+164>>2]+ +g[d+8>>2]*+g[a+168>>2]))*j-j*(+g[d+48>>2]*+g[b+144>>2]+ +g[d+52>>2]*+g[b+148>>2]+ +g[d+56>>2]*+g[b+152>>2]+(+g[d+32>>2]*+g[b+160>>2]+ +g[d+36>>2]*+g[b+164>>2]+ +g[d+40>>2]*+g[b+168>>2]));l=+g[d+120>>2];e=k+j<l?l-k:j;g[d+96>>2]=k+j<l?l:k+j;if(c[a+240>>2]|0){l=e*h*+g[a+132>>2]*+g[a+116>>2];k=e*i*+g[a+136>>2]*+g[a+120>>2];g[a+144>>2]=+g[a+112>>2]*e*f*+g[a+128>>2]+ +g[a+144>>2];g[a+148>>2]=l+ +g[a+148>>2];g[a+152>>2]=k+ +g[a+152>>2];k=e*+g[a+100>>2]*+g[d+68>>2];l=e*+g[a+104>>2]*+g[d+72>>2];g[a+160>>2]=e*+g[a+96>>2]*+g[d+64>>2]+ +g[a+160>>2];g[a+164>>2]=k+ +g[a+164>>2];g[a+168>>2]=l+ +g[a+168>>2]}if(!(c[b+240>>2]|0))return;l=e*+g[d+52>>2]*+g[b+132>>2]*+g[b+116>>2];k=e*+g[d+56>>2]*+g[b+136>>2]*+g[b+120>>2];g[b+144>>2]=+g[b+112>>2]*e*+g[d+48>>2]*+g[b+128>>2]+ +g[b+144>>2];g[b+148>>2]=l+ +g[b+148>>2];g[b+152>>2]=k+ +g[b+152>>2];k=e*+g[b+100>>2]*+g[d+84>>2];l=e*+g[b+104>>2]*+g[d+88>>2];g[b+160>>2]=e*+g[b+96>>2]*+g[d+80>>2]+ +g[b+160>>2];g[b+164>>2]=k+ +g[b+164>>2];g[b+168>>2]=l+ +g[b+168>>2];return}function vg(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0,t=0;t=i;i=i+32|0;s=c[a+12>>2]|0;if(!s){i=t;return}c[f+4>>2]=s;a=c[b+4>>2]|0;e=c[d+4>>2]|0;b=c[b+12>>2]|0;d=c[d+12>>2]|0;m=+g[d+48>>2];h=+g[b+48>>2]-m;n=+g[d+52>>2];j=+g[b+52>>2]-n;o=+g[d+56>>2];l=+g[b+56>>2]-o;p=+G(+(h*h+j*j+l*l));q=+g[e+32>>2]*+g[e+16>>2];r=+g[a+32>>2]*+g[a+16>>2]+q;if(p>r){if(!(c[s+780>>2]|0)){i=t;return}a=c[s+772>>2]|0;b=c[(c[f+8>>2]|0)+8>>2]|0;e=c[(c[f+12>>2]|0)+8>>2]|0;if((a|0)==(b|0)){Te(s,a+4|0,e+4|0);i=t;return}else{Te(s,e+4|0,b+4|0);i=t;return}}c[t+16>>2]=1065353216;c[t+16+4>>2]=0;c[t+16+8>>2]=0;g[t+16+12>>2]=0.0;if(p>1.1920928955078125e-007){g[t+16>>2]=h*(1.0/p);g[t+16+4>>2]=j*(1.0/p);g[t+16+8>>2]=l*(1.0/p);g[t+16+12>>2]=0.0;k=h*(1.0/p);j=j*(1.0/p);h=l*(1.0/p)}else{k=1.0;j=0.0;h=0.0}g[t>>2]=q*k+m;g[t+4>>2]=q*j+n;g[t+8>>2]=q*h+o;g[t+12>>2]=0.0;Tb[c[(c[f>>2]|0)+16>>2]&15](f,t+16|0,t,p-r);b=c[f+4>>2]|0;do if(c[b+780>>2]|0){d=c[b+772>>2]|0;a=c[(c[f+8>>2]|0)+8>>2]|0;e=c[(c[f+12>>2]|0)+8>>2]|0;if((d|0)==(a|0)){Te(b,d+4|0,e+4|0);break}else{Te(b,e+4|0,a+4|0);break}}while(0);i=t;return}function wg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;g=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b>>2]=g;if(g|0)mb[c[(c[d>>2]|0)+48>>2]&127](d,e);c[b+4>>2]=c[a+4>>2];g=c[a+52>>2]|0;yb[c[(c[g>>2]|0)+56>>2]&63](g,b+12|0,d)|0;c[b+52>>2]=c[a+16>>2];do if((c[a+56>>2]|0)!=0?((ob[c[(c[d>>2]|0)+52>>2]&127](d)|0)&1|0)==0:0){e=Jb[c[(c[d>>2]|0)+24>>2]&31](d,c[a+56>>2]|0)|0;if(!e){c[b+40>>2]=Jb[c[(c[d>>2]|0)+28>>2]&31](d,c[a+56>>2]|0)|0;c[b+44>>2]=0;e=c[a+56>>2]|0;e=ob[c[(c[e>>2]|0)+12>>2]&127](e)|0;e=yb[c[(c[d>>2]|0)+16>>2]&63](d,e,1)|0;g=c[a+56>>2]|0;g=yb[c[(c[g>>2]|0)+16>>2]&63](g,c[e+8>>2]|0,d)|0;ib[c[(c[d>>2]|0)+20>>2]&31](d,e,g,1213612625,c[a+56>>2]|0);break}else{c[b+40>>2]=e;c[b+44>>2]=0;break}}else f=8;while(0);if((f|0)==8){c[b+40>>2]=0;c[b+44>>2]=0}if(c[a+60>>2]|0?((ob[c[(c[d>>2]|0)+52>>2]&127](d)|0)&2|0)==0:0){e=Jb[c[(c[d>>2]|0)+24>>2]&31](d,c[a+60>>2]|0)|0;if(!e){c[b+48>>2]=Jb[c[(c[d>>2]|0)+28>>2]&31](d,c[a+60>>2]|0)|0;b=c[a+60>>2]|0;b=ob[c[(c[b>>2]|0)+8>>2]&127](b)|0;b=yb[c[(c[d>>2]|0)+16>>2]&63](d,b,1)|0;g=c[a+60>>2]|0;g=yb[c[(c[g>>2]|0)+12>>2]&63](g,c[b+8>>2]|0,d)|0;ib[c[(c[d>>2]|0)+20>>2]&31](d,b,g,1346456916,c[a+60>>2]|0);return 15811}else{c[b+48>>2]=e;return 15811}}c[b+48>>2]=0;return 15811}function xg(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;c[6319]=(c[6319]|0)+1;k=((e<<16|d)+~((e<<16|d)<<15)>>10^(e<<16|d)+~((e<<16|d)<<15))*9|0;k=(k>>6^k)+~((k>>6^k)<<11)>>16^(k>>6^k)+~((k>>6^k)<<11);l=c[b+12>>2]|0;f=c[(c[b+36>>2]|0)+((l+-1&k)<<2)>>2]|0;a:do if((f|0)!=-1){h=c[b+16>>2]|0;while(1){g=h+(f*12|0)|0;if((c[g>>2]|0)==(d|0)?(c[h+(f*12|0)+4>>2]|0)==(e|0):0)break;f=c[(c[b+56>>2]|0)+(f<<2)>>2]|0;if((f|0)==-1)break a}if(g|0){e=g;return e|0}}while(0);j=c[b+8>>2]|0;if((j|0)==(l|0)){h=l|0?l<<1:1;if((l|0)<(h|0)){if(!h){f=0;i=l}else{c[6324]=(c[6324]|0)+1;f=ic((h*12|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}i=c[b+8>>2]|0}if((i|0)>0){g=0;do{m=f+(g*12|0)|0;n=(c[b+16>>2]|0)+(g*12|0)|0;c[m>>2]=c[n>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];g=g+1|0}while((g|0)!=(i|0))}g=c[b+16>>2]|0;if(g|0){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=f;c[b+12>>2]=h;f=c[b+8>>2]|0}else{f=l;h=l}}else{f=j;h=l}c[b+8>>2]=f+1;g=c[b+16>>2]|0;if((l|0)<(h|0)){xf(b);f=(c[b+12>>2]|0)+-1&k}else f=l+-1&k;c[g+(j*12|0)>>2]=d;c[g+(j*12|0)+4>>2]=e;c[g+(j*12|0)+8>>2]=0;n=(c[b+36>>2]|0)+(f<<2)|0;c[(c[b+56>>2]|0)+(j<<2)>>2]=c[n>>2];c[n>>2]=j;n=g+(j*12|0)|0;return n|0}function yg(b,d,e,f,h,i,j,k,l){b=b|0;d=d|0;e=e|0;f=+f;h=+h;i=+i;j=j|0;k=k|0;l=l|0;var m=0,n=0.0,o=0.0,p=0.0;c[6324]=(c[6324]|0)+1;m=ic(147)|0;if(!m)m=0;else{c[(m+4+15&-16)+-4>>2]=m;m=m+4+15&-16}c[m+8>>2]=0;c[m+12>>2]=-1;g[m+16>>2]=0.0;c[m>>2]=8076;c[m+4>>2]=24;c[m+68>>2]=b;c[m+72>>2]=d;g[m+76>>2]=h;g[m+80>>2]=i;g[m+84>>2]=+(b+-1|0);g[m+88>>2]=+(d+-1|0);g[m+92>>2]=f;c[m+96>>2]=e;c[m+100>>2]=k;a[m+104>>0]=l&1;a[m+105>>0]=0;a[m+106>>0]=0;c[m+108>>2]=j;c[m+112>>2]=1065353216;c[m+116>>2]=1065353216;c[m+120>>2]=1065353216;g[m+124>>2]=0.0;switch(j|0){case 0:{g[m+20>>2]=h;c[m+24>>2]=0;c[m+28>>2]=0;g[m+32>>2]=0.0;g[m+36>>2]=i;g[m+40>>2]=+(b+-1|0);g[m+44>>2]=+(d+-1|0);g[m+48>>2]=0.0;o=i;p=h;f=+(b+-1|0);n=0.0;i=+(d+-1|0);h=0.0;break}case 1:{c[m+20>>2]=0;g[m+24>>2]=h;c[m+28>>2]=0;g[m+32>>2]=0.0;g[m+36>>2]=+(b+-1|0);g[m+40>>2]=i;g[m+44>>2]=+(d+-1|0);g[m+48>>2]=0.0;o=+(b+-1|0);p=0.0;f=i;n=h;i=+(d+-1|0);h=0.0;break}case 2:{c[m+20>>2]=0;c[m+24>>2]=0;g[m+28>>2]=h;g[m+32>>2]=0.0;g[m+36>>2]=+(b+-1|0);g[m+40>>2]=+(d+-1|0);g[m+44>>2]=i;g[m+48>>2]=0.0;o=+(b+-1|0);p=0.0;f=+(d+-1|0);n=0.0;break}default:{o=+g[m+36>>2];p=+g[m+20>>2];f=+g[m+40>>2];n=+g[m+24>>2];i=+g[m+44>>2];h=+g[m+28>>2]}}g[m+52>>2]=(p+o)*.5;g[m+56>>2]=(n+f)*.5;g[m+60>>2]=(h+i)*.5;g[m+64>>2]=0.0;return m|0}function zg(a){a=a|0;var b=0,d=0,e=0;c[6324]=(c[6324]|0)+1;b=ic(219)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}Fl();c[b>>2]=2948;d=b+52|0;e=b+4|0;c[e>>2]=c[a>>2];c[e+4>>2]=c[a+4>>2];c[e+8>>2]=c[a+8>>2];c[e+12>>2]=c[a+12>>2];e=b+20|0;c[e>>2]=c[a+16>>2];c[e+4>>2]=c[a+16+4>>2];c[e+8>>2]=c[a+16+8>>2];c[e+12>>2]=c[a+16+12>>2];e=b+36|0;c[e>>2]=c[a+32>>2];c[e+4>>2]=c[a+32+4>>2];c[e+8>>2]=c[a+32+8>>2];c[e+12>>2]=c[a+32+12>>2];c[d>>2]=c[a+48>>2];c[d+4>>2]=c[a+48+4>>2];c[d+8>>2]=c[a+48+8>>2];c[d+12>>2]=c[a+48+12>>2];d=b+116|0;e=b+68|0;c[e>>2]=c[5561];c[e+4>>2]=c[5562];c[e+8>>2]=c[5563];c[e+12>>2]=c[5564];e=b+84|0;c[e>>2]=c[5565];c[e+4>>2]=c[5566];c[e+8>>2]=c[5567];c[e+12>>2]=c[5568];e=b+100|0;c[e>>2]=c[5569];c[e+4>>2]=c[5570];c[e+8>>2]=c[5571];c[e+12>>2]=c[5572];c[d>>2]=c[5573];c[d+4>>2]=c[5574];c[d+8>>2]=c[5575];c[d+12>>2]=c[5576];d=b+180|0;e=b+132|0;c[e>>2]=c[a>>2];c[e+4>>2]=c[a+4>>2];c[e+8>>2]=c[a+8>>2];c[e+12>>2]=c[a+12>>2];e=b+148|0;c[e>>2]=c[a+16>>2];c[e+4>>2]=c[a+16+4>>2];c[e+8>>2]=c[a+16+8>>2];c[e+12>>2]=c[a+16+12>>2];e=b+164|0;c[e>>2]=c[a+32>>2];c[e+4>>2]=c[a+32+4>>2];c[e+8>>2]=c[a+32+8>>2];c[e+12>>2]=c[a+32+12>>2];c[d>>2]=c[a+48>>2];c[d+4>>2]=c[a+48+4>>2];c[d+8>>2]=c[a+48+8>>2];c[d+12>>2]=c[a+48+12>>2];c[b+196>>2]=0;return b|0}function Ag(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0;k=+g[d+100>>2];f=+g[d+16>>2];h=+g[d+20>>2];i=+g[d+24>>2];j=+g[d+108>>2];j=+g[d+112>>2]-k*+g[d+116>>2]-(f*+g[a+64>>2]+h*+g[a+68>>2]+i*+g[a+72>>2]+(+g[d>>2]*+g[a+80>>2]+ +g[d+4>>2]*+g[a+84>>2]+ +g[d+8>>2]*+g[a+88>>2]))*j-j*(+g[d+48>>2]*+g[b+64>>2]+ +g[d+52>>2]*+g[b+68>>2]+ +g[d+56>>2]*+g[b+72>>2]+(+g[d+32>>2]*+g[b+80>>2]+ +g[d+36>>2]*+g[b+84>>2]+ +g[d+40>>2]*+g[b+88>>2]));l=+g[d+120>>2];e=k+j<l?l-k:j;g[d+100>>2]=k+j<l?l:k+j;if(c[a+240>>2]|0){l=e*h*+g[a+132>>2]*+g[a+116>>2];k=e*i*+g[a+136>>2]*+g[a+120>>2];g[a+64>>2]=+g[a+112>>2]*e*f*+g[a+128>>2]+ +g[a+64>>2];g[a+68>>2]=l+ +g[a+68>>2];g[a+72>>2]=k+ +g[a+72>>2];k=e*+g[a+100>>2]*+g[d+68>>2];l=e*+g[a+104>>2]*+g[d+72>>2];g[a+80>>2]=e*+g[a+96>>2]*+g[d+64>>2]+ +g[a+80>>2];g[a+84>>2]=k+ +g[a+84>>2];g[a+88>>2]=l+ +g[a+88>>2]}if(!(c[b+240>>2]|0))return +e;l=e*+g[d+52>>2]*+g[b+132>>2]*+g[b+116>>2];k=e*+g[d+56>>2]*+g[b+136>>2]*+g[b+120>>2];g[b+64>>2]=+g[b+112>>2]*e*+g[d+48>>2]*+g[b+128>>2]+ +g[b+64>>2];g[b+68>>2]=l+ +g[b+68>>2];g[b+72>>2]=k+ +g[b+72>>2];k=e*+g[b+100>>2]*+g[d+84>>2];l=e*+g[b+104>>2]*+g[d+88>>2];g[b+80>>2]=e*+g[b+96>>2]*+g[d+80>>2]+ +g[b+80>>2];g[b+84>>2]=k+ +g[b+84>>2];g[b+88>>2]=l+ +g[b+88>>2];return +e}function Bg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0;J=+g[a+4>>2];I=+g[a+20>>2];H=+g[a+36>>2];F=+g[a+8>>2];E=+g[a+24>>2];D=+g[a+40>>2];B=+g[a+12>>2];z=+g[a+28>>2];x=+g[a+44>>2];u=+g[b+4>>2];t=+g[b+20>>2];s=+g[b+36>>2];q=+g[b+8>>2];p=+g[b+24>>2];o=+g[b+40>>2];m=+g[b+12>>2];k=+g[b+28>>2];i=+g[b+44>>2];c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;A=+g[e>>2];y=+g[e+4>>2];w=+g[e+8>>2];g[d+16>>2]=J*A+I*y+H*w;g[d+20>>2]=F*A+E*y+D*w;g[d+24>>2]=B*A+z*y+x*w;g[d+28>>2]=0.0;l=-+g[e>>2];j=-+g[e+4>>2];h=-+g[e+8>>2];g[d+32>>2]=u*l+t*j+s*h;g[d+36>>2]=q*l+p*j+o*h;g[d+40>>2]=m*l+k*j+i*h;g[d+44>>2]=0.0;G=(J*A+I*y+H*w)*+g[a+436>>2];C=(F*A+E*y+D*w)*+g[a+440>>2];v=(B*A+z*y+x*w)*+g[a+444>>2];g[d+48>>2]=G;g[d+52>>2]=C;g[d+56>>2]=v;g[d+60>>2]=0.0;r=(u*l+t*j+s*h)*+g[b+436>>2];n=(q*l+p*j+o*h)*+g[b+440>>2];f=(m*l+k*j+i*h)*+g[b+444>>2];g[d+64>>2]=r;g[d+68>>2]=n;g[d+72>>2]=f;g[d+76>>2]=0.0;g[d+80>>2]=(J*A+I*y+H*w)*G+(F*A+E*y+D*w)*C+(B*A+z*y+x*w)*v+((u*l+t*j+s*h)*r+(q*l+p*j+o*h)*n+(m*l+k*j+i*h)*f);return}function Cg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0;l=i;i=i+96|0;g=c[b+8>>2]|0;if((g|0)==(c[b+12>>2]|0)?(k=g|0?g<<1:1,(g|0)<(k|0)):0){if(!k)j=0;else{c[6324]=(c[6324]|0)+1;g=ic((k<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+4+15&-16)+-4>>2]=g;g=g+4+15&-16}j=g;g=c[b+8>>2]|0}if((g|0)>0){h=0;do{c[j+(h<<2)>>2]=c[(c[b+16>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(g|0))}h=c[b+16>>2]|0;if(h){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0);g=c[b+8>>2]|0}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=j;c[b+12>>2]=k}c[(c[b+16>>2]|0)+(g<<2)>>2]=d;c[b+8>>2]=g+1;c[l+32>>2]=c[d+4>>2];c[l+32+4>>2]=c[d+4+4>>2];c[l+32+8>>2]=c[d+4+8>>2];c[l+32+12>>2]=c[d+4+12>>2];c[l+32+16>>2]=c[d+20>>2];c[l+32+16+4>>2]=c[d+20+4>>2];c[l+32+16+8>>2]=c[d+20+8>>2];c[l+32+16+12>>2]=c[d+20+12>>2];c[l+32+32>>2]=c[d+36>>2];c[l+32+32+4>>2]=c[d+36+4>>2];c[l+32+32+8>>2]=c[d+36+8>>2];c[l+32+32+12>>2]=c[d+36+12>>2];c[l+32+48>>2]=c[d+52>>2];c[l+32+48+4>>2]=c[d+52+4>>2];c[l+32+48+8>>2]=c[d+52+8>>2];c[l+32+48+12>>2]=c[d+52+12>>2];k=c[d+192>>2]|0;Yb[c[(c[k>>2]|0)+8>>2]&127](k,l+32|0,l+16|0,l);k=c[b+68>>2]|0;c[d+188>>2]=Sb[c[(c[k>>2]|0)+8>>2]&3](k,l+16|0,l,c[(c[d+192>>2]|0)+4>>2]|0,d,e,f,c[b+24>>2]|0,0)|0;i=l;return}function Dg(b){b=b|0;var d=0,e=0,f=0;c[b>>2]=4680;if(a[b+272>>0]|0?(d=c[b+204>>2]|0,kb[c[c[d>>2]>>2]&255](d),d=c[b+204>>2]|0,d|0):0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+196>>2]|0;if(d|0?(kb[c[c[d>>2]>>2]&255](d),e=c[b+196>>2]|0,e|0):0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}if(a[b+273>>0]|0?(f=c[b+200>>2]|0,kb[c[c[f>>2]>>2]&255](f),f=c[b+200>>2]|0,f|0):0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}d=c[b+316>>2]|0;if(d|0){if(a[b+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+316>>2]=0}a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;d=c[b+288>>2]|0;if(d|0){if(a[b+292>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+288>>2]=0}a[b+292>>0]=1;c[b+288>>2]=0;c[b+280>>2]=0;c[b+284>>2]=0;d=c[b+240>>2]|0;if(d|0){if(a[b+244>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+240>>2]=0}a[b+244>>0]=1;c[b+240>>2]=0;c[b+232>>2]=0;c[b+236>>2]=0;d=c[b+220>>2]|0;if(d|0){if(a[b+224>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+220>>2]=0}a[b+224>>0]=1;c[b+220>>2]=0;c[b+212>>2]=0;c[b+216>>2]=0;d=c[b+188>>2]|0;if(!d){a[b+192>>0]=1;c[b+188>>2]=0;c[b+180>>2]=0;f=b+184|0;c[f>>2]=0;Jj(b);return}if(a[b+192>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+188>>2]=0;a[b+192>>0]=1;c[b+188>>2]=0;c[b+180>>2]=0;f=b+184|0;c[f>>2]=0;Jj(b);return}function Eg(a,b,d,e,f,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;j=+j;k=k|0;l=+l;var m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0;c[a>>2]=c[h>>2];c[a+4>>2]=c[h+4>>2];c[a+8>>2]=c[h+8>>2];c[a+12>>2]=c[h+12>>2];s=+g[e+4>>2];v=+g[a+8>>2];w=+g[e+8>>2];p=+g[a+4>>2];m=+g[a>>2];r=+g[e>>2];u=(s*v-w*p)*+g[b>>2]+ +g[b+4>>2]*(w*m-v*r)+(p*r-s*m)*+g[b+8>>2];t=(s*v-w*p)*+g[b+16>>2]+(w*m-v*r)*+g[b+20>>2]+(p*r-s*m)*+g[b+24>>2];s=(s*v-w*p)*+g[b+32>>2]+(w*m-v*r)*+g[b+36>>2]+(p*r-s*m)*+g[b+40>>2];g[a+16>>2]=u;g[a+20>>2]=t;g[a+24>>2]=s;g[a+28>>2]=0.0;r=+g[f+4>>2];w=+g[f+8>>2];n=+g[f>>2];q=+g[d>>2]*(r*-v-w*-p)+ +g[d+4>>2]*(w*-m-n*-v)+(n*-p-r*-m)*+g[d+8>>2];o=(r*-v-w*-p)*+g[d+16>>2]+(w*-m-n*-v)*+g[d+20>>2]+(n*-p-r*-m)*+g[d+24>>2];m=(r*-v-w*-p)*+g[d+32>>2]+(w*-m-n*-v)*+g[d+36>>2]+(n*-p-r*-m)*+g[d+40>>2];g[a+32>>2]=q;g[a+36>>2]=o;g[a+40>>2]=m;g[a+44>>2]=0.0;u=+g[i>>2]*u;t=+g[i+4>>2]*t;s=+g[i+8>>2]*s;g[a+48>>2]=u;g[a+52>>2]=t;g[a+56>>2]=s;g[a+60>>2]=0.0;r=+g[k>>2]*q;p=+g[k+4>>2]*o;n=+g[k+8>>2]*m;g[a+64>>2]=r;g[a+68>>2]=p;g[a+72>>2]=n;g[a+76>>2]=0.0;g[a+80>>2]=u*+g[a+16>>2]+t*+g[a+20>>2]+s*+g[a+24>>2]+j+l+(r*q+p*o+n*m);return}function Fg(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,i=0;c[6324]=(c[6324]|0)+1;e=ic(627)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}Fj(e,5,b);c[e>>2]=4220;h=e+300|0;c[h>>2]=c[d>>2];c[h+4>>2]=c[d+4>>2];c[h+8>>2]=c[d+8>>2];c[h+12>>2]=c[d+12>>2];f=e+316|0;c[f>>2]=c[d+16>>2];c[f+4>>2]=c[d+16+4>>2];c[f+8>>2]=c[d+16+8>>2];c[f+12>>2]=c[d+16+12>>2];b=e+332|0;c[b>>2]=c[d+32>>2];c[b+4>>2]=c[d+32+4>>2];c[b+8>>2]=c[d+32+8>>2];c[b+12>>2]=c[d+32+12>>2];i=e+348|0;c[i>>2]=c[d+48>>2];c[i+4>>2]=c[d+48+4>>2];c[i+8>>2]=c[d+48+8>>2];c[i+12>>2]=c[d+48+12>>2];d=e+364|0;a[e+527>>0]=0;c[d>>2]=c[h>>2];c[d+4>>2]=c[h+4>>2];c[d+8>>2]=c[h+8>>2];c[d+12>>2]=c[h+12>>2];d=e+380|0;c[d>>2]=c[f>>2];c[d+4>>2]=c[f+4>>2];c[d+8>>2]=c[f+8>>2];c[d+12>>2]=c[f+12>>2];d=e+396|0;c[d>>2]=c[b>>2];c[d+4>>2]=c[b+4>>2];c[d+8>>2]=c[b+8>>2];c[d+12>>2]=c[b+12>>2];d=e+412|0;a[e+524>>0]=0;a[e+525>>0]=0;a[e+526>>0]=0;a[e+552>>0]=0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;g[e+572>>2]=-1.0;g[e+444>>2]=999999984306749440.0;g[e+448>>2]=999999984306749440.0;g[e+452>>2]=999999984306749440.0;g[e+428>>2]=1.0;g[e+432>>2]=.30000001192092896;g[e+436>>2]=1.0;g[e+440>>2]=.009999999776482582;g[e+456>>2]=.05000000074505806;c[e+592>>2]=0;g[e+596>>2]=0.0;g[e+600>>2]=.699999988079071;g[e+604>>2]=0.0;return e|0}function Gg(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0;h=i;i=i+64|0;a[d+84>>0]=0;c[h>>2]=c[b+4>>2];c[h+4>>2]=c[b+4+4>>2];c[h+8>>2]=c[b+4+8>>2];c[h+12>>2]=c[b+4+12>>2];c[h+16>>2]=c[b+20>>2];c[h+16+4>>2]=c[b+20+4>>2];c[h+16+8>>2]=c[b+20+8>>2];c[h+16+12>>2]=c[b+20+12>>2];c[h+32>>2]=c[b+36>>2];c[h+32+4>>2]=c[b+36+4>>2];c[h+32+8>>2]=c[b+36+8>>2];c[h+32+12>>2]=c[b+36+12>>2];c[h+48>>2]=c[b+52>>2];c[h+48+4>>2]=c[b+52+4>>2];c[h+48+8>>2]=c[b+52+8>>2];c[h+48+12>>2]=c[b+52+12>>2];if(e?(f=c[b+520>>2]|0,f|0):0)mb[c[(c[f>>2]|0)+8>>2]&127](f,h);w=+g[d+156>>2];u=+g[h>>2];v=+g[d+160>>2];t=+g[h+4>>2];o=+g[d+164>>2];s=+g[h+8>>2];r=+g[h+16>>2];q=+g[h+20>>2];p=+g[h+24>>2];n=+g[h+32>>2];l=+g[h+36>>2];j=+g[h+40>>2];m=w*r+v*q+o*p+ +g[h+52>>2];k=w*n+v*l+o*j+ +g[h+56>>2];g[d+36>>2]=w*u+v*t+o*s+ +g[h+48>>2];g[d+40>>2]=m;g[d+44>>2]=k;g[d+48>>2]=0.0;k=+g[d+172>>2];m=+g[d+176>>2];o=+g[d+180>>2];g[d+52>>2]=u*k+t*m+s*o;g[d+56>>2]=k*r+m*q+o*p;g[d+60>>2]=k*n+m*l+o*j;g[d+64>>2]=0.0;o=+g[d+188>>2];m=+g[d+192>>2];k=+g[d+196>>2];g[d+68>>2]=u*o+t*m+s*k;g[d+72>>2]=o*r+m*q+k*p;g[d+76>>2]=o*n+m*l+k*j;g[d+80>>2]=0.0;i=h;return}function Hg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;c[a>>2]=b;break a}case 10:{b=(c[d>>2]|0)+(4-1)&~(4-1);e=c[b>>2]|0;c[d>>2]=b+4;c[a>>2]=e;c[a+4>>2]=((e|0)<0)<<31>>31;break a}case 11:{b=(c[d>>2]|0)+(4-1)&~(4-1);e=c[b>>2]|0;c[d>>2]=b+4;c[a>>2]=e;c[a+4>>2]=0;break a}case 12:{f=(c[d>>2]|0)+(8-1)&~(8-1);b=c[f>>2]|0;e=c[f+4>>2]|0;c[d>>2]=f+8;c[a>>2]=b;c[a+4>>2]=e;break a}case 13:{e=(c[d>>2]|0)+(4-1)&~(4-1);f=c[e>>2]|0;c[d>>2]=e+4;c[a>>2]=(f&65535)<<16>>16;c[a+4>>2]=(((f&65535)<<16>>16|0)<0)<<31>>31;break a}case 14:{e=(c[d>>2]|0)+(4-1)&~(4-1);f=c[e>>2]|0;c[d>>2]=e+4;c[a>>2]=f&65535;c[a+4>>2]=0;break a}case 15:{e=(c[d>>2]|0)+(4-1)&~(4-1);f=c[e>>2]|0;c[d>>2]=e+4;c[a>>2]=(f&255)<<24>>24;c[a+4>>2]=(((f&255)<<24>>24|0)<0)<<31>>31;break a}case 16:{e=(c[d>>2]|0)+(4-1)&~(4-1);f=c[e>>2]|0;c[d>>2]=e+4;c[a>>2]=f&255;c[a+4>>2]=0;break a}case 17:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}case 18:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}default:break a}while(0);while(0);return}function Ig(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0;w=i;i=i+2048|0;if((e|0)>0)f=0;else{i=w;return}do{g[d+(f<<4)+12>>2]=-999999984306749440.0;f=f+1|0}while((f|0)!=(e|0));p=0;do{if((ob[c[(c[a>>2]|0)+96>>2]&127](a)|0)>0){q=b+(p<<4)|0;r=b+(p<<4)+4|0;s=b+(p<<4)+8|0;t=d+(p<<4)+12|0;u=d+(p<<4)|0;o=0;do{if(((ob[c[(c[a>>2]|0)+96>>2]&127](a)|0)-o|0)<128){f=(ob[c[(c[a>>2]|0)+96>>2]&127](a)|0)-o|0;if((f|0)>0)v=10;else{j=-34028234663852886.0e22;f=-1}}else{f=128;v=10}if((v|0)==10){v=0;h=0;do{Ub[c[(c[a>>2]|0)+108>>2]&127](a,h,w+(h<<4)|0);h=h+1|0}while((h|0)!=(f|0));l=+g[q>>2];m=+g[r>>2];n=+g[s>>2];h=-1;k=0;j=-34028234663852886.0e22;do{x=l*+g[w+(k<<4)>>2]+m*+g[w+(k<<4)+4>>2]+n*+g[w+(k<<4)+8>>2];y=x>j;h=y?k:h;j=y?x:j;k=k+1|0}while((k|0)!=(f|0));f=h}if(j>+g[t>>2]){y=w+(f<<4)|0;c[u>>2]=c[y>>2];c[u+4>>2]=c[y+4>>2];c[u+8>>2]=c[y+8>>2];c[u+12>>2]=c[y+12>>2];g[t>>2]=j}o=o+128|0}while((o|0)<(ob[c[(c[a>>2]|0)+96>>2]&127](a)|0))}p=p+1|0}while((p|0)!=(e|0));i=w;return}function Jg(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0,j=0,k=0,m=0,n=0.0;h=i;i=i+16|0;d=+g[a>>2];e=+g[a+20>>2];f=+g[a+40>>2];if(d+e+f>0.0){f=+G(+(d+e+f+1.0));g[h+12>>2]=f*.5;n=(+g[a+36>>2]-+g[a+24>>2])*(.5/f);g[h>>2]=n;d=(+g[a+8>>2]-+g[a+32>>2])*(.5/f);g[h+4>>2]=d;e=(+g[a+16>>2]-+g[a+4>>2])*(.5/f);g[h+8>>2]=e;j=(g[l>>2]=n,c[l>>2]|0);m=(g[l>>2]=d,c[l>>2]|0);k=(g[l>>2]=e,c[l>>2]|0);a=(g[l>>2]=f*.5,c[l>>2]|0);c[b>>2]=j;j=b+4|0;c[j>>2]=m;j=b+8|0;c[j>>2]=k;b=b+12|0;c[b>>2]=a;i=h;return}else{m=d<e?(e<f?2:1):d<f?2:0;n=+G(+(+g[a+(m<<4)+(m<<2)>>2]-+g[a+((((m+1|0)>>>0)%3|0)<<4)+((((m+1|0)>>>0)%3|0)<<2)>>2]-+g[a+((((m+2|0)>>>0)%3|0)<<4)+((((m+2|0)>>>0)%3|0)<<2)>>2]+1.0));g[h+(m<<2)>>2]=n*.5;g[h+12>>2]=(+g[a+((((m+2|0)>>>0)%3|0)<<4)+((((m+1|0)>>>0)%3|0)<<2)>>2]-+g[a+((((m+1|0)>>>0)%3|0)<<4)+((((m+2|0)>>>0)%3|0)<<2)>>2])*(.5/n);g[h+((((m+1|0)>>>0)%3|0)<<2)>>2]=(+g[a+((((m+1|0)>>>0)%3|0)<<4)+(m<<2)>>2]+ +g[a+(m<<4)+((((m+1|0)>>>0)%3|0)<<2)>>2])*(.5/n);g[h+((((m+2|0)>>>0)%3|0)<<2)>>2]=(+g[a+((((m+2|0)>>>0)%3|0)<<4)+(m<<2)>>2]+ +g[a+(m<<4)+((((m+2|0)>>>0)%3|0)<<2)>>2])*(.5/n);m=c[h>>2]|0;a=c[h+4>>2]|0;j=c[h+8>>2]|0;k=c[h+12>>2]|0;c[b>>2]=m;m=b+4|0;c[m>>2]=a;m=b+8|0;c[m>>2]=j;m=b+12|0;c[m>>2]=k;i=h;return}}function Kg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0,t=0.0,u=0,v=0;u=i;i=i+16|0;h=c[a+56>>2]|0;t=+g[a+32+(((h+2|0)%3|0)<<2)>>2];if((e|0)<=0){i=u;return}f=0;while(1){c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;c[u+(h<<2)>>2]=c[a+32+(h<<2)>>2];h=b+(f<<4)|0;r=b+(f<<4)+4|0;s=b+(f<<4)+8|0;m=t*+g[h>>2]+ +g[u>>2];n=t*+g[r>>2]+ +g[u+4>>2];o=t*+g[s>>2]+ +g[u+8>>2];p=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);j=+g[h>>2];k=+g[r>>2];l=+g[s>>2];if(j*(m-p*j)+k*(n-p*k)+l*(o-p*l)>-999999984306749440.0){g[d+(f<<4)>>2]=m-p*j;g[d+(f<<4)+4>>2]=n-p*k;g[d+(f<<4)+8>>2]=o-p*l;g[d+(f<<4)+12>>2]=0.0;q=j*(m-p*j)+k*(n-p*k)+l*(o-p*l);j=+g[h>>2];k=+g[r>>2];l=+g[s>>2]}else q=-999999984306749440.0;c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;v=c[a+56>>2]|0;g[u+(v<<2)>>2]=-+g[a+32+(v<<2)>>2];p=t*j+ +g[u>>2];o=t*k+ +g[u+4>>2];m=t*l+ +g[u+8>>2];n=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);l=+g[h>>2];k=+g[r>>2];j=+g[s>>2];if(l*(p-n*l)+k*(o-n*k)+j*(m-n*j)>q){g[d+(f<<4)>>2]=p-n*l;g[d+(f<<4)+4>>2]=o-n*k;g[d+(f<<4)+8>>2]=m-n*j;g[d+(f<<4)+12>>2]=0.0}f=f+1|0;if((f|0)==(e|0))break;h=c[a+56>>2]|0}i=u;return}function Lg(a,b,d,e,f,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0.0,m=0.0,n=0,o=0.0,p=0,q=0.0,r=0,s=0.0,t=0;r=i;i=i+16|0;g[e>>2]=34028234663852886.0e22;g[f>>2]=-34028234663852886.0e22;p=c[a+100>>2]|0;if((p|0)>0){n=0;do{t=c[a+108>>2]|0;s=+g[t+(n<<4)>>2]*+g[a+16>>2];q=+g[t+(n<<4)+4>>2]*+g[a+20>>2];o=+g[t+(n<<4)+8>>2]*+g[a+24>>2];k=s*+g[b>>2]+q*+g[b+4>>2]+o*+g[b+8>>2]+ +g[b+48>>2];m=s*+g[b+16>>2]+q*+g[b+20>>2]+o*+g[b+24>>2]+ +g[b+52>>2];o=s*+g[b+32>>2]+q*+g[b+36>>2]+o*+g[b+40>>2]+ +g[b+56>>2];q=k*+g[d>>2]+m*+g[d+4>>2]+o*+g[d+8>>2];if(q<+g[e>>2]){g[e>>2]=q;g[h>>2]=k;g[h+4>>2]=m;g[h+8>>2]=o;g[h+12>>2]=0.0}if(q>+g[f>>2]){g[f>>2]=q;g[j>>2]=k;g[j+4>>2]=m;g[j+8>>2]=o;g[j+12>>2]=0.0}n=n+1|0}while((n|0)!=(p|0));s=+g[f>>2];m=s;n=(g[l>>2]=s,c[l>>2]|0)}else{m=-34028234663852886.0e22;n=-8388609}k=+g[e>>2];if(!(k>m)){i=r;return}c[e>>2]=n;g[f>>2]=k;c[r>>2]=c[h>>2];c[r+4>>2]=c[h+4>>2];c[r+8>>2]=c[h+8>>2];c[r+12>>2]=c[h+12>>2];c[h>>2]=c[j>>2];c[h+4>>2]=c[j+4>>2];c[h+8>>2]=c[j+8>>2];c[h+12>>2]=c[j+12>>2];c[j>>2]=c[r>>2];c[j+4>>2]=c[r+4>>2];c[j+8>>2]=c[r+8>>2];c[j+12>>2]=c[r+12>>2];i=r;return}function Mg(a,b,c,d,e,f,h){a=a|0;b=+b;c=+c;d=+d;e=e|0;f=+f;h=h|0;var j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0;l=i;i=i+16|0;k=c*f+ +g[a+52>>2];j=d*f+ +g[a+56>>2];g[h+48>>2]=b*f+ +g[a+48>>2];g[h+52>>2]=k;g[h+56>>2]=j;g[h+60>>2]=0.0;j=+g[e>>2];k=+g[e+4>>2];d=+g[e+8>>2];b=+G(+(j*j+k*k+d*d));b=b*f>.7853981852531433?.7853981852531433/f:b;if(b<1.0000000474974513e-003)c=f*.5-b*f*f*f*.02083333395421505*b;else c=+J(+(b*.5*f))/b;o=j*c;n=k*c;j=d*c;q=+I(+(b*f*.5));Jg(a,l);b=+g[l>>2];p=+g[l+12>>2];c=+g[l+8>>2];f=+g[l+4>>2];r=1.0/+G(+((q*p-o*b-n*f-j*c)*(q*p-o*b-n*f-j*c)+((j*p+q*c+o*f-n*b)*(j*p+q*c+o*f-n*b)+((q*b+o*p+n*c-j*f)*(q*b+o*p+n*c-j*f)+(j*b+(n*p+q*f)-o*c)*(j*b+(n*p+q*f)-o*c)))));d=(q*b+o*p+n*c-j*f)*r;k=r*(j*b+(n*p+q*f)-o*c);m=r*(j*p+q*c+o*f-n*b);c=r*(q*p-o*b-n*f-j*c);j=d*(2.0/(c*c+(m*m+(d*d+k*k))));f=k*(2.0/(c*c+(m*m+(d*d+k*k))));b=m*(2.0/(c*c+(m*m+(d*d+k*k))));g[h>>2]=1.0-(k*f+m*b);g[h+4>>2]=d*f-c*b;g[h+8>>2]=d*b+c*f;g[h+12>>2]=0.0;g[h+16>>2]=d*f+c*b;g[h+20>>2]=1.0-(d*j+m*b);g[h+24>>2]=k*b-c*j;g[h+28>>2]=0.0;g[h+32>>2]=d*b-c*f;g[h+36>>2]=k*b+c*j;g[h+40>>2]=1.0-(d*j+k*f);g[h+44>>2]=0.0;i=l;return}function Ng(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+48|0;e=(c[a+52>>2]|0)+4|0;c[e>>2]=c[b>>2];c[e+4>>2]=c[b+4>>2];c[e+8>>2]=c[b+8>>2];c[e+12>>2]=c[b+12>>2];b=d+32+4|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;g[d+32>>2]=1.0;Ub[c[(c[a>>2]|0)+68>>2]&127](d+16|0,a,d+32|0);g[a+36>>2]=+g[d+16>>2]+ +g[a+16>>2];g[d+32>>2]=-1.0;Ub[c[(c[a>>2]|0)+68>>2]&127](d,a,d+32|0);c[d+16>>2]=c[d>>2];c[d+16+4>>2]=c[d+4>>2];c[d+16+8>>2]=c[d+8>>2];c[d+16+12>>2]=c[d+12>>2];g[a+20>>2]=+g[d+16>>2]-+g[a+16>>2];c[d+32>>2]=0;c[d+32+4>>2]=0;c[d+32+8>>2]=0;c[d+32+12>>2]=0;g[b>>2]=1.0;Ub[c[(c[a>>2]|0)+68>>2]&127](d+16|0,a,d+32|0);g[a+40>>2]=+g[d+16+4>>2]+ +g[a+16>>2];g[b>>2]=-1.0;Ub[c[(c[a>>2]|0)+68>>2]&127](d,a,d+32|0);c[d+16>>2]=c[d>>2];c[d+16+4>>2]=c[d+4>>2];c[d+16+8>>2]=c[d+8>>2];c[d+16+12>>2]=c[d+12>>2];g[a+24>>2]=+g[d+16+4>>2]-+g[a+16>>2];c[d+32>>2]=0;c[d+32+4>>2]=0;c[d+32+8>>2]=0;c[d+32+12>>2]=0;g[d+32+8>>2]=1.0;Ub[c[(c[a>>2]|0)+68>>2]&127](d+16|0,a,d+32|0);g[a+44>>2]=+g[d+16+8>>2]+ +g[a+16>>2];g[d+32+8>>2]=-1.0;Ub[c[(c[a>>2]|0)+68>>2]&127](d,a,d+32|0);c[d+16>>2]=c[d>>2];c[d+16+4>>2]=c[d+4>>2];c[d+16+8>>2]=c[d+8>>2];c[d+16+12>>2]=c[d+12>>2];g[a+28>>2]=+g[d+16+8>>2]-+g[a+16>>2];i=d;return}function Og(b,d,e){b=b|0;d=+d;e=e|0;var f=0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0;f=c[b+8>>2]|0;if(f|0?(c[f+204>>2]&3|0)==0:0){if((c[f+216>>2]&-2|0)!=4)c[f+216>>2]=1;g[f+220>>2]=0.0}f=c[b+12>>2]|0;if(f|0?(c[f+204>>2]&3|0)==0:0){if((c[f+216>>2]&-2|0)!=4)c[f+216>>2]=1;g[f+220>>2]=0.0}f=c[b+20>>2]|0;if(f|0?(c[f+204>>2]&3|0)==0:0){if((c[f+216>>2]&-2|0)!=4)c[f+216>>2]=1;g[f+220>>2]=0.0}f=c[b+24>>2]|0;if(f|0?(c[f+204>>2]&3|0)==0:0){if((c[f+216>>2]&-2|0)!=4)c[f+216>>2]=1;g[f+220>>2]=0.0}f=c[b+156>>2]|0;c[b+156>>2]=f+1;a[b+152>>0]=(f|0)>=(c[b+160>>2]|0)&1;if(f|0){c[b+72>>2]=0;c[b+72+4>>2]=0;c[b+72+8>>2]=0;c[b+72+12>>2]=0;c[b+72+16>>2]=0;c[b+72+20>>2]=0;c[b+72+24>>2]=0;c[b+72+28>>2]=0;return}j=+g[b+64>>2];i=1.0/d*+g[b+72>>2]*j;h=1.0/d*j*+g[b+76>>2];d=1.0/d*j*+g[b+80>>2];g[b+72>>2]=i;g[b+76>>2]=h;g[b+80>>2]=d;g[b+84>>2]=0.0;j=+g[b+68>>2];if(j>0.0){l=j*i*+g[b+120>>2]+j*h*+g[b+124>>2]+j*d*+g[b+128>>2];k=j*i*+g[b+136>>2]+j*h*+g[b+140>>2]+j*d*+g[b+144>>2];g[b+88>>2]=j*i*+g[b+104>>2]+j*h*+g[b+108>>2]+j*d*+g[b+112>>2];g[b+92>>2]=l;g[b+96>>2]=k;g[b+100>>2]=0.0;g[b+72>>2]=(1.0-j)*i;g[b+76>>2]=(1.0-j)*h;g[b+80>>2]=(1.0-j)*d;i=(1.0-j)*i;h=(1.0-j)*h;d=(1.0-j)*d}g[b+72>>2]=1.0/+(e|0)*i;g[b+76>>2]=1.0/+(e|0)*h;g[b+80>>2]=1.0/+(e|0)*d;return}function Pg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;while(1){k=c[a+12>>2]|0;l=c[k+(((b+d|0)/2|0)<<2)>>2]|0;e=b;f=d;while(1){j=c[(c[l+772>>2]|0)+208>>2]|0;if((j|0)>-1)while(1){h=c[k+(e<<2)>>2]|0;g=c[(c[h+772>>2]|0)+208>>2]|0;if((g|0)<=-1)g=c[(c[h+776>>2]|0)+208>>2]|0;if((g|0)<(j|0))e=e+1|0;else break}else{i=c[(c[l+776>>2]|0)+208>>2]|0;while(1){h=c[k+(e<<2)>>2]|0;g=c[(c[h+772>>2]|0)+208>>2]|0;if((g|0)<=-1)g=c[(c[h+776>>2]|0)+208>>2]|0;if((g|0)<(i|0))e=e+1|0;else break}}if((j|0)>-1)while(1){h=c[k+(f<<2)>>2]|0;g=c[(c[h+772>>2]|0)+208>>2]|0;if((g|0)<=-1)g=c[(c[h+776>>2]|0)+208>>2]|0;if((j|0)<(g|0))f=f+-1|0;else break}else{i=c[(c[l+776>>2]|0)+208>>2]|0;while(1){h=c[k+(f<<2)>>2]|0;g=c[(c[h+772>>2]|0)+208>>2]|0;if((g|0)<=-1)g=c[(c[h+776>>2]|0)+208>>2]|0;if((i|0)<(g|0))f=f+-1|0;else break}}if((e|0)<=(f|0)){i=k+(e<<2)|0;j=c[i>>2]|0;c[i>>2]=c[k+(f<<2)>>2];c[(c[a+12>>2]|0)+(f<<2)>>2]=j;e=e+1|0;f=f+-1|0}if((e|0)>(f|0))break;k=c[a+12>>2]|0}if((f|0)>(b|0))Pg(a,b,f);if((e|0)<(d|0))b=e;else break}return}function Qg(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=+f;h=h|0;var j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0;p=i;i=i+16|0;c[b>>2]=4112;a[b+216>>0]=1;c[b+212>>2]=0;c[b+204>>2]=0;c[b+208>>2]=0;c[b+8>>2]=d;c[b+256>>2]=0;c[b+260>>2]=0;c[b+264>>2]=1065353216;g[b+268>>2]=0.0;c[b+272>>2]=0;c[b+276>>2]=0;c[b+280>>2]=1065353216;g[b+284>>2]=0.0;l=+g[h>>2];m=+g[h+4>>2];n=+g[h+8>>2];if(l*l+m*m+n*n>0.0?(o=+g[b+52>>2],o>0.0):0){j=1.0/+G(+(l*l+m*m+n*n));k=n*j*-o*n*j*-o+(l*j*-o*l*j*-o+m*j*-o*m*j*-o);if(k>0.0){g[p>>2]=-(l*j*-o);g[p+4>>2]=-(m*j*-o);g[p+8>>2]=-(n*j*-o);g[p+12>>2]=0.0;be(b,p)}g[b+52>>2]=+G(+k)}else be(b,h);g[b+60>>2]=f;g[b+64>>2]=.019999999552965164;c[b+68>>2]=0;c[b+68+4>>2]=0;c[b+68+8>>2]=0;c[b+68+12>>2]=0;c[b+100>>2]=0;c[b+100+4>>2]=0;c[b+100+8>>2]=0;c[b+100+12>>2]=0;a[b+250>>0]=1;g[b+56>>2]=0.0;c[b+12>>2]=e;a[b+251>>0]=1;g[b+252>>2]=0.0;g[b+20>>2]=0.0;g[b+24>>2]=0.0;g[b+52>>2]=29.399999618530273;g[b+28>>2]=55.0;g[b+32>>2]=10.0;g[b+36>>2]=10.0;a[b+248>>0]=0;a[b+249>>0]=0;a[b+288>>0]=1;g[b+44>>2]=.7853981852531433;g[b+48>>2]=.7071067690849304;g[b+148>>2]=0.0;g[b+16>>2]=.20000000298023224;a[b+289>>0]=0;a[b+290>>0]=0;g[b+240>>2]=0.0;g[b+244>>2]=0.0;i=p;return}function Rg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;while(1){k=c[a+12>>2]|0;l=c[k+(((b+d|0)/2|0)<<2)>>2]|0;e=b;f=d;while(1){j=c[(c[l+28>>2]|0)+208>>2]|0;if((j|0)>-1)while(1){h=c[k+(e<<2)>>2]|0;g=c[(c[h+28>>2]|0)+208>>2]|0;if((g|0)<=-1)g=c[(c[h+32>>2]|0)+208>>2]|0;if((g|0)<(j|0))e=e+1|0;else break}else{i=c[(c[l+32>>2]|0)+208>>2]|0;while(1){h=c[k+(e<<2)>>2]|0;g=c[(c[h+28>>2]|0)+208>>2]|0;if((g|0)<=-1)g=c[(c[h+32>>2]|0)+208>>2]|0;if((g|0)<(i|0))e=e+1|0;else break}}if((j|0)>-1)while(1){h=c[k+(f<<2)>>2]|0;g=c[(c[h+28>>2]|0)+208>>2]|0;if((g|0)<=-1)g=c[(c[h+32>>2]|0)+208>>2]|0;if((j|0)<(g|0))f=f+-1|0;else break}else{i=c[(c[l+32>>2]|0)+208>>2]|0;while(1){h=c[k+(f<<2)>>2]|0;g=c[(c[h+28>>2]|0)+208>>2]|0;if((g|0)<=-1)g=c[(c[h+32>>2]|0)+208>>2]|0;if((i|0)<(g|0))f=f+-1|0;else break}}if((e|0)<=(f|0)){i=k+(e<<2)|0;j=c[i>>2]|0;c[i>>2]=c[k+(f<<2)>>2];c[(c[a+12>>2]|0)+(f<<2)>>2]=j;e=e+1|0;f=f+-1|0}if((e|0)>(f|0))break;k=c[a+12>>2]|0}if((f|0)>(b|0))Rg(a,b,f);if((e|0)<(d|0))b=e;else break}return}function Sg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0;e=i;i=i+48|0;y=+g[d>>2];n=+g[b>>2];x=+g[d+16>>2];l=+g[b+4>>2];w=+g[d+32>>2];j=+g[b+8>>2];v=+g[d+4>>2];u=+g[d+20>>2];t=+g[d+36>>2];k=+g[d+8>>2];m=+g[d+24>>2];o=+g[d+40>>2];q=+g[b+16>>2];p=+g[b+20>>2];h=+g[b+24>>2];s=+g[b+32>>2];r=+g[b+36>>2];f=+g[b+40>>2];g[e>>2]=y*n+x*l+w*j;g[e+4>>2]=v*n+u*l+t*j;g[e+8>>2]=k*n+m*l+o*j;g[e+12>>2]=0.0;g[e+16>>2]=y*q+x*p+w*h;g[e+20>>2]=v*q+u*p+t*h;g[e+24>>2]=k*q+m*p+o*h;g[e+28>>2]=0.0;g[e+32>>2]=y*s+x*r+w*f;g[e+36>>2]=v*s+u*r+t*f;g[e+40>>2]=k*s+m*r+o*f;g[e+44>>2]=0.0;o=+g[d+48>>2];m=+g[d+52>>2];k=+g[d+56>>2];f=o*s+m*r+k*f+ +g[b+56>>2];h=o*q+m*p+k*h+ +g[b+52>>2];j=o*n+m*l+k*j+ +g[b+48>>2];c[a>>2]=c[e>>2];c[a+4>>2]=c[e+4>>2];c[a+8>>2]=c[e+8>>2];c[a+12>>2]=c[e+12>>2];c[a+16>>2]=c[e+16>>2];c[a+16+4>>2]=c[e+16+4>>2];c[a+16+8>>2]=c[e+16+8>>2];c[a+16+12>>2]=c[e+16+12>>2];c[a+32>>2]=c[e+32>>2];c[a+32+4>>2]=c[e+32+4>>2];c[a+32+8>>2]=c[e+32+8>>2];c[a+32+12>>2]=c[e+32+12>>2];g[a+48>>2]=j;g[a+52>>2]=h;g[a+56>>2]=f;g[a+60>>2]=0.0;i=e;return}function Tg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+16|0;h=c[a+12>>2]|0;j=c[h+(((d+b|0)/2|0)<<4)>>2]|0;k=c[h+(((d+b|0)/2|0)<<4)+4>>2]|0;l=c[h+(((d+b|0)/2|0)<<4)+8>>2]|0;f=d;e=b;while(1){while(1){g=c[h+(e<<4)+4>>2]|0;if((g|0)>=(k|0)){if((g|0)!=(k|0))break;g=c[h+(e<<4)>>2]|0;if((g|0)>=(j|0)){if((g|0)!=(j|0))break;if((c[h+(e<<4)+8>>2]|0)>=(l|0))break}}e=e+1|0}while(1){g=c[h+(f<<4)+4>>2]|0;if((k|0)>=(g|0)){if((k|0)!=(g|0))break;g=c[h+(f<<4)>>2]|0;if((j|0)>=(g|0)){if((j|0)!=(g|0))break;if((l|0)>=(c[h+(f<<4)+8>>2]|0))break}}f=f+-1|0}if((e|0)<=(f|0)){g=h+(e<<4)|0;c[m>>2]=c[g>>2];c[m+4>>2]=c[g+4>>2];c[m+8>>2]=c[g+8>>2];c[m+12>>2]=c[g+12>>2];h=h+(f<<4)|0;c[g>>2]=c[h>>2];c[g+4>>2]=c[h+4>>2];c[g+8>>2]=c[h+8>>2];c[g+12>>2]=c[h+12>>2];h=(c[a+12>>2]|0)+(f<<4)|0;c[h>>2]=c[m>>2];c[h+4>>2]=c[m+4>>2];c[h+8>>2]=c[m+8>>2];c[h+12>>2]=c[m+12>>2];f=f+-1|0;e=e+1|0}if((e|0)>(f|0))break;h=c[a+12>>2]|0}if((f|0)>(b|0))Tg(a,b,f);if((e|0)>=(d|0)){i=m;return}Tg(a,e,d);i=m;return}function Ug(a,b,d,e,f,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0,r=0,s=0.0,t=0;r=i;i=i+16|0;g[e>>2]=34028234663852886.0e22;g[f>>2]=-34028234663852886.0e22;q=c[a+8>>2]|0;if((q|0)>0){n=0;do{t=c[a+16>>2]|0;s=+g[t+(n<<4)>>2];p=+g[t+(n<<4)+4>>2];o=+g[t+(n<<4)+8>>2];k=s*+g[b>>2]+p*+g[b+4>>2]+o*+g[b+8>>2]+ +g[b+48>>2];m=s*+g[b+16>>2]+p*+g[b+20>>2]+o*+g[b+24>>2]+ +g[b+52>>2];o=s*+g[b+32>>2]+p*+g[b+36>>2]+o*+g[b+40>>2]+ +g[b+56>>2];p=k*+g[d>>2]+m*+g[d+4>>2]+o*+g[d+8>>2];if(p<+g[e>>2]){g[e>>2]=p;g[h>>2]=k;g[h+4>>2]=m;g[h+8>>2]=o;g[h+12>>2]=0.0}if(p>+g[f>>2]){g[f>>2]=p;g[j>>2]=k;g[j+4>>2]=m;g[j+8>>2]=o;g[j+12>>2]=0.0}n=n+1|0}while((n|0)!=(q|0));s=+g[f>>2];m=s;n=(g[l>>2]=s,c[l>>2]|0)}else{m=-34028234663852886.0e22;n=-8388609}k=+g[e>>2];if(!(k>m)){i=r;return}c[e>>2]=n;g[f>>2]=k;c[r>>2]=c[h>>2];c[r+4>>2]=c[h+4>>2];c[r+8>>2]=c[h+8>>2];c[r+12>>2]=c[h+12>>2];c[h>>2]=c[j>>2];c[h+4>>2]=c[j+4>>2];c[h+8>>2]=c[j+8>>2];c[h+12>>2]=c[j+12>>2];c[j>>2]=c[r>>2];c[j+4>>2]=c[r+4>>2];c[j+8>>2]=c[r+8>>2];c[j+12>>2]=c[r+12>>2];i=r;return}function Vg(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0,m=0,n=0,o=0.0,p=0.0,q=0;n=i;i=i+16|0;if((f|0)>-3&(f+3|0)>-1){c[6324]=(c[6324]|0)+1;a=ic((f+3<<4|3)+16|0)|0;if(!a)a=0;else{c[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}h=0;do{m=a+(h<<4)|0;c[m>>2]=c[n>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];h=h+1|0}while((h|0)!=(f+3|0));m=a}else m=0;if((f|0)>-3){h=0;l=m;while(1){if(!h)j=0.0;else{a=h;j=0.0;k=.5;while(1){j=(a&1|0)==0?j:j+k;a=a>>1;if(!a)break;else k=k*.5}}k=j*2.0+-1.0;o=(+(h<<1|0)*3.1415927410125732+3.1415927410125732)/+(f+3|0);p=+G(+(1.0-k*k));j=p*+J(+o);g[l>>2]=p*+I(+o);g[l+4>>2]=j;g[l+8>>2]=k;g[l+12>>2]=0.0;h=h+1|0;if((h|0)==(f+3|0))break;else l=l+16|0}a=0;do{q=m+(a<<4)|0;h=m+(a<<4)+4|0;l=m+(a<<4)+8|0;o=+g[h>>2]*+g[e+4>>2]+ +g[d+4>>2];p=+g[l>>2]*+g[e+8>>2]+ +g[d+8>>2];g[q>>2]=+g[q>>2]*+g[e>>2]+ +g[d>>2];g[h>>2]=o;g[l>>2]=p;g[m+(a<<4)+12>>2]=0.0;a=a+1|0}while((a|0)<(f+3|0))}a=bc(b,m,f+3|0,1)|0;if(!m){i=n;return a|0}c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0);i=n;return a|0}function Wg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0;if((c[a>>2]|0)==(b|0)){c[a>>2]=0;a=0;return a|0}e=c[b+32>>2]|0;d=c[e+32>>2]|0;b=c[e+36+(((c[e+40>>2]|0)!=(b|0)&1)<<2)>>2]|0;if(!d){c[a>>2]=b;c[b+32>>2]=0;d=c[a+4>>2]|0;if(!d)d=b;else{c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);d=c[a>>2]|0}c[a+4>>2]=e;a=d;return a|0}c[d+36+(((c[d+40>>2]|0)==(e|0)&1)<<2)>>2]=b;c[b+32>>2]=d;b=c[a+4>>2]|0;if(b|0){c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0)}c[a+4>>2]=e;do{s=+g[d>>2];x=d+4|0;q=+g[x>>2];v=d+8|0;o=+g[v>>2];y=d+16|0;m=+g[y>>2];w=d+20|0;i=+g[w>>2];e=d+24|0;k=+g[e>>2];u=c[d+36>>2]|0;b=c[d+40>>2]|0;t=+g[u>>2];r=+g[b>>2];r=t<r?t:r;g[d>>2]=r;t=+g[u+16>>2];l=+g[b+16>>2];l=t>l?t:l;g[y>>2]=l;t=+g[u+4>>2];p=+g[b+4>>2];p=t<p?t:p;g[x>>2]=p;t=+g[u+20>>2];h=+g[b+20>>2];h=t>h?t:h;g[w>>2]=h;t=+g[u+8>>2];n=+g[b+8>>2];n=t<n?t:n;g[v>>2]=n;t=+g[u+24>>2];j=+g[b+24>>2];j=t>j?t:j;g[e>>2]=j;if(!(s!=r|q!=p|o!=n|m!=l)?!(k!=j|i!=h):0){f=14;break}d=c[d+32>>2]|0}while((d|0)!=0);if((f|0)==14)return d|0;y=c[a>>2]|0;return y|0}function Xg(a){a=a|0;var b=0,d=0,e=0.0,f=0.0,h=0.0,i=0,j=0;j=c[a+28>>2]|0;i=0;e=0.0;f=0.0;h=0.0;a:while(1){switch(i|0){case 0:{e=+g[a+80>>2]+ +g[a+64>>2];f=+g[a+84>>2]+ +g[a+68>>2];h=+g[a+88>>2]+ +g[a+72>>2];break}case 1:{e=+g[a+80>>2]+ +g[a+64>>2];f=+g[a+84>>2]+ +g[a+68>>2];h=+g[a+72>>2]-+g[a+88>>2];break}case 2:{e=+g[a+80>>2]+ +g[a+64>>2];f=+g[a+68>>2]-+g[a+84>>2];h=+g[a+88>>2]+ +g[a+72>>2];break}case 3:{e=+g[a+80>>2]+ +g[a+64>>2];f=+g[a+68>>2]-+g[a+84>>2];h=+g[a+72>>2]-+g[a+88>>2];break}case 4:{e=+g[a+64>>2]-+g[a+80>>2];f=+g[a+84>>2]+ +g[a+68>>2];h=+g[a+88>>2]+ +g[a+72>>2];break}case 5:{e=+g[a+64>>2]-+g[a+80>>2];f=+g[a+84>>2]+ +g[a+68>>2];h=+g[a+72>>2]-+g[a+88>>2];break}case 6:{e=+g[a+64>>2]-+g[a+80>>2];f=+g[a+68>>2]-+g[a+84>>2];h=+g[a+88>>2]+ +g[a+72>>2];break}case 7:{e=+g[a+64>>2]-+g[a+80>>2];f=+g[a+68>>2]-+g[a+84>>2];h=+g[a+72>>2]-+g[a+88>>2];break}default:{}}if((j|0)>0){d=c[a+36>>2]|0;b=0;do{if(+g[d+(b*36|0)+32>>2]+(e*+g[d+(b*36|0)+20>>2]+f*+g[d+(b*36|0)+24>>2]+h*+g[d+(b*36|0)+28>>2])>0.0){b=0;d=16;break a}b=b+1|0}while((b|0)<(j|0))}i=i+1|0;if((i|0)>=8){b=1;d=16;break}}if((d|0)==16)return b|0;return 0}function Yg(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var h=0,i=0.0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0;q=+g[d>>2];if(+g[b>>2]<=q){i=+g[d+4>>2];if((((+g[b+4>>2]<=i?+g[b+8>>2]<=+g[d+8>>2]:0)?+g[b+16>>2]>=+g[d+16>>2]:0)?+g[b+20>>2]>=+g[d+20>>2]:0)?+g[b+24>>2]>=+g[d+24>>2]:0){d=0;return d|0}else h=d+4|0}else{h=d+4|0;i=+g[d+4>>2]}g[d>>2]=q-f;m=i-f;g[h>>2]=m;o=+g[d+8>>2]-f;g[d+8>>2]=o;i=+g[d+16>>2]+f;g[d+16>>2]=i;n=+g[d+20>>2]+f;g[d+20>>2]=n;p=+g[d+24>>2]+f;g[d+24>>2]=p;l=+g[e>>2];if(l>0.0)g[d+16>>2]=l+i;else g[d>>2]=l+(q-f);i=+g[e+4>>2];if(i>0.0)g[d+20>>2]=i+n;else g[h>>2]=i+m;i=+g[e+8>>2];if(i>0.0)g[d+24>>2]=i+p;else g[d+8>>2]=i+o;h=Wg(a,b)|0;a:do if(h){k=c[a+8>>2]|0;if((k|0)<=-1){h=c[a>>2]|0;break}if(k){e=0;while(1){j=c[h+32>>2]|0;e=e+1|0;if(!j)break a;if((e|0)>=(k|0)){h=j;break}else h=j}}}else h=0;while(0);c[b>>2]=c[d>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[b+12>>2]=c[d+12>>2];c[b+16>>2]=c[d+16>>2];c[b+20>>2]=c[d+20>>2];c[b+24>>2]=c[d+24>>2];c[b+28>>2]=c[d+28>>2];Ze(a,h,b);d=1;return d|0}function Zg(a,d,e){a=a|0;d=d|0;e=e|0;ii(a,d,e)|0;c[d+52>>2]=c[a+48>>2];c[d+56>>2]=c[a+52>>2];c[d+60>>2]=c[a+56>>2];c[d+64>>2]=c[a+60>>2];c[d+68>>2]=c[a+64>>2];c[d+72>>2]=c[a+68>>2];c[d+76>>2]=c[a+72>>2];c[d+80>>2]=c[a+76>>2];c[d+84>>2]=c[a+80>>2];c[d+88>>2]=c[a+84>>2];c[d+92>>2]=c[a+88>>2];c[d+96>>2]=c[a+92>>2];c[d+100>>2]=c[a+96>>2];c[d+104>>2]=c[a+100>>2];c[d+108>>2]=c[a+104>>2];c[d+112>>2]=c[a+108>>2];c[d+116>>2]=c[a+112>>2];c[d+120>>2]=c[a+116>>2];c[d+124>>2]=c[a+120>>2];c[d+128>>2]=c[a+124>>2];c[d+132>>2]=c[a+128>>2];c[d+136>>2]=c[a+132>>2];c[d+140>>2]=c[a+136>>2];c[d+144>>2]=c[a+140>>2];c[d+148>>2]=c[a+144>>2];c[d+152>>2]=c[a+148>>2];c[d+156>>2]=c[a+152>>2];c[d+160>>2]=c[a+156>>2];c[d+164>>2]=c[a+160>>2];c[d+168>>2]=c[a+164>>2];c[d+172>>2]=c[a+168>>2];c[d+176>>2]=c[a+172>>2];c[d+228>>2]=c[a+868>>2];c[d+212>>2]=c[a+872>>2];c[d+196>>2]=c[a+680>>2];c[d+180>>2]=c[a+696>>2];c[d+232>>2]=c[a+932>>2];c[d+216>>2]=c[a+936>>2];c[d+200>>2]=c[a+684>>2];c[d+184>>2]=c[a+700>>2];c[d+236>>2]=c[a+996>>2];c[d+220>>2]=c[a+1e3>>2];c[d+204>>2]=c[a+688>>2];c[d+188>>2]=c[a+704>>2];e=b[a+1300>>1]|0;c[d+244>>2]=e&255;c[d+248>>2]=(e&65535)>>>8&65535;return 12001}function _g(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+32|0;k=(a[b+68>>0]|0)!=0;l=k?e:d;k=k?d:e;h=c[l+4>>2]|0;j=c[h+20>>2]|0;g=c[b+52>>2]|0;if((g|0)<(j|0)){if((c[b+56>>2]|0)<(j|0)){if(!j){d=0;f=g}else{c[6324]=(c[6324]|0)+1;d=ic((j<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}f=c[b+52>>2]|0}if((f|0)>0){e=0;do{c[d+(e<<2)>>2]=c[(c[b+60>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(f|0))}e=c[b+60>>2]|0;if(e|0){if(a[b+64>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=d;c[b+56>>2]=j;e=b+60|0}else e=b+60|0;d=g;do{c[(c[e>>2]|0)+(d<<2)>>2]=0;d=d+1|0}while((d|0)!=(j|0))}c[b+52>>2]=j;if((j|0)<=0){i=m;return}d=0;do{if(!(c[h+68>>2]|0)){e=c[(c[h+28>>2]|0)+(d*80|0)+64>>2]|0;f=c[l+8>>2]|0;g=c[l+12>>2]|0;c[m>>2]=l;c[m+4>>2]=e;c[m+8>>2]=f;c[m+12>>2]=g;c[m+16>>2]=-1;c[m+20>>2]=d;g=c[b+4>>2]|0;g=sb[c[(c[g>>2]|0)+8>>2]&31](g,m,k,c[b+72>>2]|0)|0;c[(c[b+60>>2]|0)+(d<<2)>>2]=g}else c[(c[b+60>>2]|0)+(d<<2)>>2]=0;d=d+1|0}while((d|0)!=(j|0));i=m;return}function $g(){var a=0,b=0,d=0;c[6324]=(c[6324]|0)+1;a=ic(219)|0;if(!a)a=0;else{c[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}Fl();Fl();c[a>>2]=2948;b=a+52|0;d=a+4|0;c[d>>2]=c[5561];c[d+4>>2]=c[5562];c[d+8>>2]=c[5563];c[d+12>>2]=c[5564];d=a+20|0;c[d>>2]=c[5565];c[d+4>>2]=c[5566];c[d+8>>2]=c[5567];c[d+12>>2]=c[5568];d=a+36|0;c[d>>2]=c[5569];c[d+4>>2]=c[5570];c[d+8>>2]=c[5571];c[d+12>>2]=c[5572];c[b>>2]=c[5573];c[b+4>>2]=c[5574];c[b+8>>2]=c[5575];c[b+12>>2]=c[5576];b=a+116|0;d=a+68|0;c[d>>2]=c[5561];c[d+4>>2]=c[5562];c[d+8>>2]=c[5563];c[d+12>>2]=c[5564];d=a+84|0;c[d>>2]=c[5565];c[d+4>>2]=c[5566];c[d+8>>2]=c[5567];c[d+12>>2]=c[5568];d=a+100|0;c[d>>2]=c[5569];c[d+4>>2]=c[5570];c[d+8>>2]=c[5571];c[d+12>>2]=c[5572];c[b>>2]=c[5573];c[b+4>>2]=c[5574];c[b+8>>2]=c[5575];c[b+12>>2]=c[5576];b=a+180|0;d=a+132|0;c[d>>2]=c[5561];c[d+4>>2]=c[5562];c[d+8>>2]=c[5563];c[d+12>>2]=c[5564];d=a+148|0;c[d>>2]=c[5565];c[d+4>>2]=c[5566];c[d+8>>2]=c[5567];c[d+12>>2]=c[5568];d=a+164|0;c[d>>2]=c[5569];c[d+4>>2]=c[5570];c[d+8>>2]=c[5571];c[d+12>>2]=c[5572];c[b>>2]=c[5573];c[b+4>>2]=c[5574];c[b+8>>2]=c[5575];c[b+12>>2]=c[5576];c[a+196>>2]=0;return a|0}function ah(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;e=c[b+32>>2]|0;if(!e)f=0;else f=c[b+40>>2]|0;i=c[b+52>>2]|0;if(!i)g=0;else g=c[b+60>>2]|0;d=c[b+72>>2]|0;if(!d)h=0;else h=c[b+80>>2]|0;j=c[b+8>>2]|0;+Lb[c[(c[j>>2]|0)+12>>2]&3](j,f,e,g,i,h,d,c[b+4>>2]|0,c[b+20>>2]|0,c[b+24>>2]|0);d=c[b+32>>2]|0;if((d|0)<0){if((c[b+36>>2]|0)<0){e=c[b+40>>2]|0;if(e|0){if(a[b+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=0;c[b+36>>2]=0}do{c[(c[b+40>>2]|0)+(d<<2)>>2]=0;d=d+1|0}while((d|0)!=0)}c[b+32>>2]=0;d=c[b+52>>2]|0;if((d|0)<0){if((c[b+56>>2]|0)<0){e=c[b+60>>2]|0;if(e|0){if(a[b+64>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=0;c[b+56>>2]=0}do{c[(c[b+60>>2]|0)+(d<<2)>>2]=0;d=d+1|0}while((d|0)!=0)}c[b+52>>2]=0;d=c[b+72>>2]|0;if((d|0)>=0){c[b+72>>2]=0;return}if((c[b+76>>2]|0)<0){e=c[b+80>>2]|0;if(e|0){if(a[b+84>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+80>>2]=0}a[b+84>>0]=1;c[b+80>>2]=0;c[b+76>>2]=0}do{c[(c[b+80>>2]|0)+(d<<2)>>2]=0;d=d+1|0}while((d|0)!=0);c[b+72>>2]=0;return}function bh(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;c[6324]=(c[6324]|0)+1;d=ic(39)|0;if(!d)g=0;else{c[(d+4+15&-16)+-4>>2]=d;g=d+4+15&-16}h=g;c[g>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0;if((c[b+912>>2]|0)>0){i=c[c[b+920>>2]>>2]|0;c[g>>2]=c[i>>2];c[g+4>>2]=c[i+4>>2];c[g+8>>2]=c[i+8>>2];c[g+12>>2]=c[i+12>>2];c[g+16>>2]=c[i+16>>2]}else{c[g>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0}e=c[b+912>>2]|0;if((e|0)!=(c[b+916>>2]|0)){i=e;f=b+920|0;f=c[f>>2]|0;f=f+(i<<2)|0;c[f>>2]=h;i=i+1|0;c[b+912>>2]=i;return g|0}i=e|0?e<<1:1;if((e|0)>=(i|0)){i=e;f=b+920|0;f=c[f>>2]|0;f=f+(i<<2)|0;c[f>>2]=h;i=i+1|0;c[b+912>>2]=i;return g|0}if(!i)d=0;else{c[6324]=(c[6324]|0)+1;d=ic((i<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}e=c[b+912>>2]|0}if((e|0)>0){f=0;do{c[d+(f<<2)>>2]=c[(c[b+920>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(e|0))}f=c[b+920>>2]|0;if(f){if(a[b+924>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);e=c[b+912>>2]|0}c[b+920>>2]=0}a[b+924>>0]=1;c[b+920>>2]=d;c[b+916>>2]=i;i=e;f=b+920|0;f=c[f>>2]|0;f=f+(i<<2)|0;c[f>>2]=h;i=i+1|0;c[b+912>>2]=i;return g|0}function ch(){var b=0,d=0,e=0;c[6324]=(c[6324]|0)+1;b=ic(347)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}c[b>>2]=5592;c[b+164>>2]=1065353216;c[b+168>>2]=1065353216;c[b+172>>2]=1065353216;g[b+176>>2]=0.0;c[b+180>>2]=0;g[b+184>>2]=999999984306749440.0;d=b+188|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[b+204>>2]=1;c[b+208>>2]=-1;c[b+212>>2]=-1;c[b+216>>2]=1;g[b+220>>2]=0.0;g[b+224>>2]=.5;g[b+228>>2]=0.0;g[b+232>>2]=0.0;g[b+236>>2]=0.0;g[b+240>>2]=.10000000149011612;g[b+244>>2]=1.0e4;c[b+252>>2]=0;c[b+256>>2]=-1;c[b+260>>2]=-1;g[b+264>>2]=1.0;g[b+268>>2]=0.0;g[b+272>>2]=0.0;c[b+276>>2]=0;a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;c[b+288>>2]=0;c[b+300>>2]=0;c[b+4>>2]=1065353216;d=b+8|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[b+24>>2]=1065353216;d=b+28|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[b+44>>2]=1065353216;d=b+48|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;c[b+248>>2]=4;c[b>>2]=6340;c[6324]=(c[6324]|0)+1;d=ic(91)|0;if(!d){e=0;Hi(e);d=b+324|0;c[d>>2]=e;return b|0}c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16;Hi(d);e=b+324|0;c[e>>2]=d;return b|0}function dh(b,d){b=b|0;d=+d;var e=0,f=0,h=0,i=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0;e=c[b+232>>2]|0;if((e|0)<=0)return;k=(a[25816]|0)==0;j=0;do{i=c[(c[b+240>>2]|0)+(j<<2)>>2]|0;a:do if(i){f=c[i+216>>2]|0;b:do switch(f|0){case 4:case 2:{if((f|0)==4)break a;break}default:{o=+g[i+352>>2];n=+g[i+356>>2];m=+g[i+360>>2];l=+g[i+512>>2];if(o*o+n*n+m*m<l*l?(l=+g[i+368>>2],m=+g[i+372>>2],n=+g[i+376>>2],o=+g[i+516>>2],l*l+m*m+n*n<o*o):0){g[i+220>>2]=+g[i+220>>2]+d;break b}g[i+220>>2]=0.0;if((f&-2|0)!=4){c[i+216>>2]=0;f=0}}}while(0);h=f&-2;do if(k){if((h|0)!=2?!(+g[i+220>>2]>2.0):0)break;if(c[i+204>>2]&3|0){if((h|0)==4)break a;c[i+216>>2]=2;break a}if((f|0)==1){if((h|0)==4)break a;c[i+216>>2]=3;break a}else{if((f|0)!=2)break a;e=(c[i+300>>2]|0)+2|0;c[i+368>>2]=0;c[i+368+4>>2]=0;c[i+368+8>>2]=0;c[i+368+12>>2]=0;c[i+300>>2]=e;c[i+352>>2]=0;c[i+352+4>>2]=0;c[i+352+8>>2]=0;c[i+352+12>>2]=0;e=c[b+232>>2]|0;break a}}while(0);if((h|0)!=4)c[i+216>>2]=1}while(0);j=j+1|0}while((j|0)<(e|0));return}function eh(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var i=0,j=0,k=0,m=0.0,n=0,o=0,p=0.0,q=0.0;Yb[c[(c[a>>2]|0)+8>>2]&127](a,b,f,h);n=c[h>>2]|0;j=c[h+4>>2]|0;b=c[h+8>>2]|0;k=c[f>>2]|0;o=c[f+4>>2]|0;i=c[f+8>>2]|0;m=+g[d>>2];p=+g[d+4>>2];q=+g[d+8>>2];if(m>0.0)n=(g[l>>2]=(c[l>>2]=n,+g[l>>2])+m,c[l>>2]|0);else k=(g[l>>2]=(c[l>>2]=k,+g[l>>2])+m,c[l>>2]|0);if(p>0.0){d=o;j=(g[l>>2]=(c[l>>2]=j,+g[l>>2])+p,c[l>>2]|0)}else d=(g[l>>2]=(c[l>>2]=o,+g[l>>2])+p,c[l>>2]|0);if(q>0.0)b=(g[l>>2]=(c[l>>2]=b,+g[l>>2])+q,c[l>>2]|0);else i=(g[l>>2]=(c[l>>2]=i,+g[l>>2])+q,c[l>>2]|0);m=+g[e>>2];p=+g[e+4>>2];q=+g[e+8>>2];q=+G(+(m*m+p*p+q*q));q=q*+Cb[c[(c[a>>2]|0)+16>>2]&15](a);c[f>>2]=k;c[f+4>>2]=d;c[f+8>>2]=i;g[f+12>>2]=0.0;c[h>>2]=n;c[h+4>>2]=j;c[h+8>>2]=b;g[h+12>>2]=0.0;g[f>>2]=+g[f>>2]-q;g[f+4>>2]=+g[f+4>>2]-q;g[f+8>>2]=+g[f+8>>2]-q;g[h>>2]=q+ +g[h>>2];g[h+4>>2]=q+ +g[h+4>>2];g[h+8>>2]=q+ +g[h+8>>2];return}function fh(b,d,e){b=b|0;d=+d;e=e|0;var f=0,h=0.0,i=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0;j=c[b+752>>2]|0;if(e){if((j|0)>0){f=c[b+760>>2]|0;e=0;do{g[f+(e*104|0)+88>>2]=0.0;e=e+1|0}while((e|0)!=(j|0))}i=c[b+792>>2]|0;if((i|0)>0){f=c[b+800>>2]|0;e=0;do{m=c[f+(e*44|0)+8>>2]|0;l=c[f+(e*44|0)+12>>2]|0;k=c[f+(e*44|0)+16>>2]|0;o=+g[m+8>>2];q=+g[m+12>>2];h=+g[m+16>>2];n=+g[l+8>>2]-o;r=+g[l+12>>2]-q;p=+g[l+16>>2]-h;o=+g[k+8>>2]-o;q=+g[k+12>>2]-q;h=+g[k+16>>2]-h;h=+G(+((n*q-r*o)*(n*q-r*o)+((r*h-p*q)*(r*h-p*q)+(p*o-n*h)*(p*o-n*h))));g[m+88>>2]=h+ +g[m+88>>2];g[l+88>>2]=h+ +g[l+88>>2];g[k+88>>2]=h+ +g[k+88>>2];e=e+1|0}while((e|0)!=(i|0))}if((j|0)<=0){m=b+964|0;a[m>>0]=1;return}f=c[b+760>>2]|0;e=0;do{m=f+(e*104|0)+88|0;g[m>>2]=1.0/+g[m>>2];e=e+1|0}while((e|0)!=(j|0))}if((j|0)<=0){m=b+964|0;a[m>>0]=1;return}f=c[b+760>>2]|0;e=0;h=0.0;do{r=+g[f+(e*104|0)+88>>2];h=h+(r>0.0?1.0/r:0.0);e=e+1|0}while((e|0)!=(j|0));h=1.0/h*d;e=0;do{m=f+(e*104|0)+88|0;g[m>>2]=+g[m>>2]/h;e=e+1|0}while((e|0)!=(j|0));m=b+964|0;a[m>>0]=1;return}function gh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+112|0;m=c[d+4>>2]|0;k=n;l=k+100|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0));h=c[b+752>>2]|0;a:do if((h|0)>(m|0))e=b+760|0;else{if((h|0)<(m|0)?(c[b+756>>2]|0)<(m|0):0){if((m|0)!=0?(c[6324]=(c[6324]|0)+1,e=ic((m*104|3)+16|0)|0,(e|0)!=0):0){c[(e+4+15&-16)+-4>>2]=e;g=e+4+15&-16}else g=0;f=c[b+752>>2]|0;e=0;while(1){if((e|0)>=(f|0))break;k=g+(e*104|0)|0;j=(c[b+760>>2]|0)+(e*104|0)|0;l=k+104|0;do{c[k>>2]=c[j>>2];k=k+4|0;j=j+4|0}while((k|0)<(l|0));e=e+1|0}e=c[b+760>>2]|0;if(e|0){if(!((a[b+764>>0]&1)==0|(e|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+760>>2]=0}a[b+764>>0]=1;c[b+760>>2]=g;c[b+756>>2]=m}e=h;while(1){if((e|0)>=(m|0)){e=b+760|0;break a}k=c[b+760>>2]|0;c[k+(e*104|0)>>2]=0;k=k+(e*104|0)+4|0;j=n;l=k+100|0;do{c[k>>2]=c[j>>2];k=k+4|0;j=j+4|0}while((k|0)<(l|0));e=e+1|0}}while(0);c[b+752>>2]=m;f=c[e>>2]|0;e=0;while(1){if((e|0)>=(m|0))break;k=f+(e*104|0)|0;j=(c[d+12>>2]|0)+(e*104|0)|0;l=k+104|0;do{c[k>>2]=c[j>>2];k=k+4|0;j=j+4|0}while((k|0)<(l|0));e=e+1|0}i=n;return}function hh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;e=c[b+4>>2]|0;if((e|0)==(c[b+8>>2]|0)){vf(b,e|0?e<<1:1);e=c[b+4>>2]|0}j=(c[b+12>>2]|0)+(e*36|0)|0;a[j+16>>0]=1;c[j+12>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;k=c[d+4>>2]|0;if((k|0)<=0){c[j+4>>2]=k;k=j+20|0;d=d+20|0;c[k>>2]=c[d>>2];c[k+4>>2]=c[d+4>>2];c[k+8>>2]=c[d+8>>2];c[k+12>>2]=c[d+12>>2];d=c[b+4>>2]|0;d=d+1|0;c[b+4>>2]=d;return}c[6324]=(c[6324]|0)+1;e=ic((k<<2|3)+16|0)|0;if(!e)f=0;else{c[(e+4+15&-16)+-4>>2]=e;f=e+4+15&-16}g=c[j+4>>2]|0;h=c[j+12>>2]|0;if((g|0)<=0)if(!h){a[j+16>>0]=1;c[j+12>>2]=f;c[j+8>>2]=k;yn(f|0,0,k<<2|0)|0}else i=11;else{e=0;do{c[f+(e<<2)>>2]=c[h+(e<<2)>>2];e=e+1|0}while((e|0)!=(g|0));i=11}if((i|0)==11){if(a[j+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}a[j+16>>0]=1;c[j+12>>2]=f;c[j+8>>2]=k;yn(f|0,0,k<<2|0)|0}f=c[j+12>>2]|0;c[j+4>>2]=k;g=c[d+12>>2]|0;e=0;do{c[f+(e<<2)>>2]=c[g+(e<<2)>>2];e=e+1|0}while((e|0)!=(k|0));k=j+20|0;d=d+20|0;c[k>>2]=c[d>>2];c[k+4>>2]=c[d+4>>2];c[k+8>>2]=c[d+8>>2];c[k+12>>2]=c[d+12>>2];d=c[b+4>>2]|0;d=d+1|0;c[b+4>>2]=d;return}function ih(a,d,f,g){a=a|0;d=d|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;i=c[a+68+(d<<2)>>2]|0;j=b[i+((f&65535)<<2)+-4>>1]|0;if((e[i+((f&65535)<<2)>>1]|0)>=(j&65535))return;l=c[a+60>>2]|0;m=l+((e[i+((f&65535)<<2)+2>>1]|0)<<6)+54+(d<<1)|0;h=i+((f&65535)<<2)+-4|0;f=i+((f&65535)<<2)|0;while(1){k=e[f+-2>>1]|0;if(!(j&1)){i=e[f+2>>1]|0;if(((((e[l+(i<<6)+54+((1<<d&3)<<1)>>1]|0)>=(e[l+(k<<6)+48+((1<<d&3)<<1)>>1]|0)?(e[l+(k<<6)+54+((1<<d&3)<<1)>>1]|0)>=(e[l+(i<<6)+48+((1<<d&3)<<1)>>1]|0):0)?(e[l+(i<<6)+54+((1<<(1<<d&3)&3)<<1)>>1]|0)>=(e[l+(k<<6)+48+((1<<(1<<d&3)&3)<<1)>>1]|0):0)?(e[l+(k<<6)+54+((1<<(1<<d&3)&3)<<1)>>1]|0)>=(e[l+(i<<6)+48+((1<<(1<<d&3)&3)<<1)>>1]|0):0)?(p=c[a+92>>2]|0,n=l+(i<<6)|0,o=l+(k<<6)|0,sb[c[(c[p>>2]|0)+12>>2]&31](p,n,o,g)|0,p=c[a+96>>2]|0,p|0):0)sb[c[(c[p>>2]|0)+12>>2]&31](p,n,o,g)|0;l=l+(k<<6)+48+(d<<1)|0;b[l>>1]=(b[l>>1]|0)+1<<16>>16}else{l=l+(k<<6)+54+(d<<1)|0;b[l>>1]=(b[l>>1]|0)+1<<16>>16}b[m>>1]=(b[m>>1]|0)+-1<<16>>16;j=e[f>>1]|e[f+2>>1]<<16;l=e[h>>1]|e[h+2>>1]<<16;b[f>>1]=l;b[f+2>>1]=l>>>16;b[h>>1]=j;b[h+2>>1]=j>>>16;f=f+-4|0;h=h+-4|0;j=b[h>>1]|0;if((e[f>>1]|0)>=(j&65535))break;l=c[a+60>>2]|0}return}function jh(a,b){a=+a;b=+b;var d=0,e=0,f=0,h=0,i=0,j=0,k=0,m=0;k=(g[l>>2]=a,c[l>>2]|0);i=(g[l>>2]=b,c[l>>2]|0);a:do if((i<<1|0)!=0?!((i&2147483647)>>>0>2139095040|(k>>>23&255|0)==255):0){if(k<<1>>>0<=i<<1>>>0)return +((k<<1|0)==(i<<1|0)?a*0.0:a);if(!(k>>>23&255)){if((k<<9|0)>-1){e=k<<9;d=0;do{d=d+-1|0;e=e<<1}while((e|0)>-1)}else d=0;e=k<<1-d}else{e=k&8388607|8388608;d=k>>>23&255}if(!(i>>>23&255)){if((i<<9|0)>-1){f=0;h=i<<9;do{f=f+-1|0;h=h<<1}while((h|0)>-1)}else f=0;j=f;i=i<<1-f}else{j=i>>>23&255;i=i&8388607|8388608}f=e-i|0;b:do if((d|0)>(j|0)){h=f;f=(f|0)>-1;while(1){if(f)if(!h)break;else e=h;e=e<<1;d=d+-1|0;f=e-i|0;if((d|0)>(j|0)){h=f;f=(f|0)>-1}else{h=(f|0)>-1;break b}}b=a*0.0;break a}else h=(f|0)>-1;while(0);if(h)if(!f){b=a*0.0;break}else e=f;if(e>>>0<8388608)do{e=e<<1;d=d+-1|0}while(e>>>0<8388608);if((d|0)>0)d=e+-8388608|d<<23;else d=e>>>(1-d|0);b=(c[l>>2]=d|k&-2147483648,+g[l>>2])}else m=3;while(0);if((m|0)==3)b=a*b/(a*b);return +b}function kh(b){b=b|0;var d=0,e=0.0,f=0,h=0,j=0.0,k=0.0,l=0;l=i;i=i+64|0;if(!(a[b+274>>0]|0)){d=c[b+232>>2]|0;if((d|0)<=0){i=l;return}h=0;do{f=c[(c[b+240>>2]|0)+(h<<2)>>2]|0;switch(c[f+216>>2]|0){case 2:case 5:break;default:if((c[f+520>>2]|0)!=0?(c[f+204>>2]&3|0)==0:0){if((a[b+300>>0]|0)!=0?(k=+g[b+268>>2],k!=0.0):0)e=+g[b+264>>2]-k;else e=+g[b+264>>2]*+g[f+264>>2];Mg(f+68|0,+g[f+132>>2],+g[f+136>>2],+g[f+140>>2],f+148|0,e,l);d=c[f+520>>2]|0;mb[c[(c[d>>2]|0)+12>>2]&127](d,l);d=c[b+232>>2]|0}}h=h+1|0}while((h|0)<(d|0));i=l;return}else{d=c[b+8>>2]|0;if((d|0)<=0){i=l;return}h=0;do{f=c[(c[b+16>>2]|0)+(h<<2)>>2]|0;if((!((f|0)==0?1:(c[f+248>>2]&2|0)==0)?(c[f+520>>2]|0)!=0:0)?(c[f+204>>2]&3|0)==0:0){if((a[b+300>>0]|0)!=0?(j=+g[b+268>>2],j!=0.0):0)e=+g[b+264>>2]-j;else e=+g[b+264>>2]*+g[f+264>>2];Mg(f+68|0,+g[f+132>>2],+g[f+136>>2],+g[f+140>>2],f+148|0,e,l);d=c[f+520>>2]|0;mb[c[(c[d>>2]|0)+12>>2]&127](d,l);d=c[b+8>>2]|0}h=h+1|0}while((h|0)<(d|0));i=l;return}}function lh(b,e,f,h,i,j){b=b|0;e=e|0;f=f|0;h=h|0;i=i|0;j=j|0;var k=0;if((d[h+55>>0]|0|0)==(e|0)){h=0;return h|0}k=c[8796+(i<<2)>>2]|0;if(+g[h>>2]*+g[f+16>>2]+ +g[h+4>>2]*+g[f+20>>2]+ +g[h+8>>2]*+g[f+24>>2]-+g[h+16>>2]<-9.999999747378752e-006){e=_e(b,c[h+20+(k<<2)>>2]|0,c[h+20+(i<<2)>>2]|0,f,0)|0;if(!e){h=0;return h|0}a[e+52>>0]=i;c[e+32>>2]=h;a[h+52+i>>0]=0;c[h+32+(i<<2)>>2]=e;i=c[j>>2]|0;if(!i)c[j+4>>2]=e;else{a[i+53>>0]=2;c[i+36>>2]=e;a[e+54>>0]=1;c[e+40>>2]=i}c[j>>2]=e;c[j+8>>2]=(c[j+8>>2]|0)+1;h=1;return h|0}i=c[8808+(i<<2)>>2]|0;a[h+55>>0]=e;if(!(lh(b,e,f,c[h+32+(k<<2)>>2]|0,d[h+52+k>>0]|0,j)|0)){h=0;return h|0}if(!(lh(b,e,f,c[h+32+(i<<2)>>2]|0,d[h+52+i>>0]|0,j)|0)){h=0;return h|0}i=c[h+48>>2]|0;if(i|0)c[i+44>>2]=c[h+44>>2];i=c[h+44>>2]|0;if(i|0)c[i+48>>2]=c[h+48>>2];if((c[b+18496>>2]|0)==(h|0))c[b+18496>>2]=c[h+48>>2];c[b+18500>>2]=(c[b+18500>>2]|0)+-1;c[h+44>>2]=0;c[h+48>>2]=c[b+18504>>2];i=c[b+18504>>2]|0;if(i|0)c[i+44>>2]=h;c[b+18504>>2]=h;c[b+18508>>2]=(c[b+18508>>2]|0)+1;h=1;return h|0}function mh(a,b,d,e,f,h,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0.0,o=0.0;a=i;i=i+80|0;o=+g[h+52>>2]-+g[f+52>>2];n=+g[h+56>>2]-+g[f+56>>2];g[a+56>>2]=+g[h+48>>2]-+g[f+48>>2];g[a+56+4>>2]=o;g[a+56+8>>2]=n;g[a+56+12>>2]=0.0;if(Bc(d,f,e,h,a+56|0,a,1)|0){c[k>>2]=c[a+4>>2];c[k+4>>2]=c[a+4+4>>2];c[k+8>>2]=c[a+4+8>>2];c[k+12>>2]=c[a+4+12>>2];c[l>>2]=c[a+20>>2];c[l+4>>2]=c[a+20+4>>2];c[l+8>>2]=c[a+20+8>>2];c[l+12>>2]=c[a+20+12>>2];c[j>>2]=c[a+36>>2];c[j+4>>2]=c[a+36+4>>2];c[j+8>>2]=c[a+36+8>>2];c[j+12>>2]=c[a+36+12>>2];l=1;i=a;return l|0}if(!(td(d,f,e,h,a+56|0,a)|0)){l=0;i=a;return l|0}c[k>>2]=c[a+4>>2];c[k+4>>2]=c[a+4+4>>2];c[k+8>>2]=c[a+4+8>>2];c[k+12>>2]=c[a+4+12>>2];c[l>>2]=c[a+20>>2];c[l+4>>2]=c[a+20+4>>2];c[l+8>>2]=c[a+20+8>>2];c[l+12>>2]=c[a+20+12>>2];c[j>>2]=c[a+36>>2];c[j+4>>2]=c[a+36+4>>2];c[j+8>>2]=c[a+36+8>>2];c[j+12>>2]=c[a+36+12>>2];l=0;i=a;return l|0}function nh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0,k=0,l=0,m=0.0,n=0.0,o=0,p=0,q=0.0,r=0;p=i;i=i+2048|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;e=+g[d>>2];h=+g[d+4>>2];f=+g[d+8>>2];if(e*e+h*h+f*f<9.999999747378752e-005){n=1.0;m=0.0;h=0.0}else{q=1.0/+G(+(e*e+h*h+f*f));n=e*q;m=f*q;h=h*q}if((ob[c[(c[b>>2]|0)+96>>2]&127](b)|0)<=0){i=p;return}l=0;f=-999999984306749440.0;while(1){if(((ob[c[(c[b>>2]|0)+96>>2]&127](b)|0)-l|0)<128){d=(ob[c[(c[b>>2]|0)+96>>2]&127](b)|0)-l|0;if((d|0)>0)o=8;else{e=-34028234663852886.0e22;d=-1}}else{d=128;o=8}if((o|0)==8){o=0;j=0;do{Ub[c[(c[b>>2]|0)+108>>2]&127](b,j,p+(j<<4)|0);j=j+1|0}while((j|0)!=(d|0));j=-1;k=0;e=-34028234663852886.0e22;do{q=n*+g[p+(k<<4)>>2]+h*+g[p+(k<<4)+4>>2]+m*+g[p+(k<<4)+8>>2];r=q>e;j=r?k:j;e=r?q:e;k=k+1|0}while((k|0)!=(d|0));d=j}if(e>f){r=p+(d<<4)|0;c[a>>2]=c[r>>2];c[a+4>>2]=c[r+4>>2];c[a+8>>2]=c[r+8>>2];c[a+12>>2]=c[r+12>>2]}else e=f;l=l+128|0;if((l|0)>=(ob[c[(c[b>>2]|0)+96>>2]&127](b)|0))break;else f=e}i=p;return}function oh(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,i=0,j=0,k=0.0,l=0.0;e=c[d+204>>2]|0;if((e&3|0)==0?(c[d+544>>2]&1|0)==0:0){h=+g[d+384>>2];if(h!=0.0){l=1.0/h*+g[b+252>>2];k=1.0/h*+g[b+256>>2];g[d+404>>2]=1.0/h*+g[b+248>>2];g[d+408>>2]=l;g[d+412>>2]=k;g[d+416>>2]=0.0}c[d+420>>2]=c[b+248>>2];c[d+420+4>>2]=c[b+248+4>>2];c[d+420+8>>2]=c[b+248+8>>2];c[d+420+12>>2]=c[b+248+12>>2]}if(!(c[d+192>>2]|0))return;if(e&1){if((c[d+216>>2]&-2|0)!=4)c[d+216>>2]=2}else{f=c[b+232>>2]|0;if((f|0)==(c[b+236>>2]|0)?(j=f|0?f<<1:1,(f|0)<(j|0)):0){if(!j)e=0;else{c[6324]=(c[6324]|0)+1;e=ic((j<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}f=c[b+232>>2]|0}if((f|0)>0){i=0;do{c[e+(i<<2)>>2]=c[(c[b+240>>2]|0)+(i<<2)>>2];i=i+1|0}while((i|0)!=(f|0))}i=c[b+240>>2]|0;if(i){if(a[b+244>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[i+-4>>2]|0);f=c[b+232>>2]|0}c[b+240>>2]=0}a[b+244>>0]=1;c[b+240>>2]=e;c[b+236>>2]=j;e=c[d+204>>2]|0}c[(c[b+240>>2]|0)+(f<<2)>>2]=d;c[b+232>>2]=f+1}j=(e&3|0)==0;Yb[c[(c[b>>2]|0)+36>>2]&127](b,d,j?1:2,j?-1:-3);return}function ph(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;h=c[a+68+(d<<2)>>2]|0;k=c[a+60>>2]|0;l=e[h+((f&65535)<<2)+2>>1]|0;i=b[h+((f&65535)<<2)+-4>>1]|0;if((e[h+((f&65535)<<2)>>1]|0)>=(i&65535))return;g=h+((f&65535)<<2)+-4|0;f=h+((f&65535)<<2)|0;j=k;while(1){h=e[f+-2>>1]|0;if(!(i&1)){j=j+(h<<6)+48+(d<<1)|0;b[j>>1]=(b[j>>1]|0)+1<<16>>16}else{if(((((e[k+(l<<6)+54+((1<<d&3)<<1)>>1]|0)>=(e[j+(h<<6)+48+((1<<d&3)<<1)>>1]|0)?(e[j+(h<<6)+54+((1<<d&3)<<1)>>1]|0)>=(e[k+(l<<6)+48+((1<<d&3)<<1)>>1]|0):0)?(e[k+(l<<6)+54+((1<<(1<<d&3)&3)<<1)>>1]|0)>=(e[j+(h<<6)+48+((1<<(1<<d&3)&3)<<1)>>1]|0):0)?(e[j+(h<<6)+54+((1<<(1<<d&3)&3)<<1)>>1]|0)>=(e[k+(l<<6)+48+((1<<(1<<d&3)&3)<<1)>>1]|0):0)?(n=c[a+92>>2]|0,m=j+(h<<6)|0,yb[c[(c[n>>2]|0)+8>>2]&63](n,k+(l<<6)|0,m)|0,n=c[a+96>>2]|0,n|0):0)yb[c[(c[n>>2]|0)+8>>2]&63](n,k+(l<<6)|0,m)|0;j=j+(h<<6)+54+(d<<1)|0;b[j>>1]=(b[j>>1]|0)+1<<16>>16}b[k+(l<<6)+48+(d<<1)>>1]=(b[k+(l<<6)+48+(d<<1)>>1]|0)+-1<<16>>16;i=e[f>>1]|e[f+2>>1]<<16;j=e[g>>1]|e[g+2>>1]<<16;b[f>>1]=j;b[f+2>>1]=j>>>16;b[g>>1]=i;b[g+2>>1]=i>>>16;f=f+-4|0;g=g+-4|0;i=b[g>>1]|0;if((e[f>>1]|0)>=(i&65535))break;j=c[a+60>>2]|0}return}function qh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;g=c[a+528>>2]|0;if((g|0)<=0)return;h=c[a+536>>2]|0;d=0;while(1){if((c[h+(d<<2)>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(g|0)){i=25;break}}if((i|0)==25)return;if((d|0)<(g|0))d=0;else return;while(1){e=h+(d<<2)|0;if((c[e>>2]|0)==(b|0)){i=8;break}f=d+1|0;if((f|0)<(g|0))d=f;else break}if((i|0)==8?(d|0)<(g|0):0){c[e>>2]=c[h+(g+-1<<2)>>2];c[(c[a+536>>2]|0)+(g+-1<<2)>>2]=b;c[a+528>>2]=g+-1}h=c[b+28>>2]|0;i=c[b+32>>2]|0;if((h|0)==(a|0)){d=c[a+284>>2]|0;a:do if((d|0)>0){g=c[a+292>>2]|0;e=0;while(1){f=g+(e<<2)|0;if((c[f>>2]|0)==(i|0))break;e=e+1|0;if((e|0)>=(d|0))break a}if((e|0)<(d|0)){c[f>>2]=c[g+(d+-1<<2)>>2];c[(c[a+292>>2]|0)+(d+-1<<2)>>2]=i;c[a+284>>2]=d+-1;d=d+-1|0}}while(0);c[a+276>>2]=(d|0)>0&1;return}else{d=c[i+284>>2]|0;b:do if((d|0)>0){g=c[i+292>>2]|0;e=0;while(1){f=g+(e<<2)|0;if((c[f>>2]|0)==(h|0))break;e=e+1|0;if((e|0)>=(d|0))break b}if((e|0)<(d|0)){c[f>>2]=c[g+(d+-1<<2)>>2];c[(c[i+292>>2]|0)+(d+-1<<2)>>2]=h;c[i+284>>2]=d+-1;d=d+-1|0}}while(0);c[i+276>>2]=(d|0)>0&1;return}}function rh(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,i=0.0,j=0,k=0,l=0,m=0.0,n=0.0;h=c[d+204>>2]|0;if((h&3|0)==0?(c[d+544>>2]&1|0)==0:0){i=+g[d+384>>2];if(i!=0.0){n=1.0/i*+g[b+252>>2];m=1.0/i*+g[b+256>>2];g[d+404>>2]=1.0/i*+g[b+248>>2];g[d+408>>2]=n;g[d+412>>2]=m;g[d+416>>2]=0.0}c[d+420>>2]=c[b+248>>2];c[d+420+4>>2]=c[b+248+4>>2];c[d+420+8>>2]=c[b+248+8>>2];c[d+420+12>>2]=c[b+248+12>>2]}if(!(c[d+192>>2]|0))return;if(h&1){if((c[d+216>>2]&-2|0)!=4)c[d+216>>2]=2}else{h=c[b+232>>2]|0;if((h|0)==(c[b+236>>2]|0)?(l=h|0?h<<1:1,(h|0)<(l|0)):0){if(!l)k=0;else{c[6324]=(c[6324]|0)+1;h=ic((l<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}k=h;h=c[b+232>>2]|0}if((h|0)>0){j=0;do{c[k+(j<<2)>>2]=c[(c[b+240>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[b+240>>2]|0;if(j){if(a[b+244>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);h=c[b+232>>2]|0}c[b+240>>2]=0}a[b+244>>0]=1;c[b+240>>2]=k;c[b+236>>2]=l}c[(c[b+240>>2]|0)+(h<<2)>>2]=d;c[b+232>>2]=h+1}Yb[c[(c[b>>2]|0)+36>>2]&127](b,d,e,f);return}function sh(a){a=a|0;var b=0,d=0.0,e=0,f=0,h=0,i=0,j=0.0,k=0.0,l=0,m=0,n=0.0,o=0,p=0.0;c[6324]=(c[6324]|0)+1;b=ic(79)|0;if(!b)e=0;else{c[(b+4+15&-16)+-4>>2]=b;e=b+4+15&-16}c[e+8>>2]=0;c[e+12>>2]=-1;f=e+16|0;c[f>>2]=1065353216;h=e+20|0;c[h>>2]=1065353216;i=e+24|0;c[i>>2]=1065353216;g[e+28>>2]=0.0;b=e+48|0;g[b>>2]=.03999999910593033;c[e+56>>2]=0;c[e>>2]=6512;c[e+4>>2]=0;k=+g[a>>2];j=+g[a+4>>2];d=+g[a+8>>2];d=+g[a+((k<j?(k<d?0:2):j<d?1:2)<<2)>>2]*.10000000149011612;if(d<.03999999910593033){p=+Hz(e);n=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);k=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);o=e+32|0;p=p+ +g[o>>2];m=e+36|0;n=n+ +g[m>>2];l=e+40|0;k=k+ +g[l>>2];g[b>>2]=d;d=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);j=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);k=k-+Cb[c[(c[e>>2]|0)+48>>2]&15](e);g[o>>2]=p-d;g[m>>2]=n-j;g[l>>2]=k;g[e+44>>2]=0.0;b=c[e>>2]|0}else b=6512;k=+Cb[c[b+48>>2]&15](e);n=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);p=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);n=+g[a+4>>2]*+g[h>>2]-n;p=+g[a+8>>2]*+g[i>>2]-p;g[e+32>>2]=+g[a>>2]*+g[f>>2]-k;g[e+36>>2]=n;g[e+40>>2]=p;g[e+44>>2]=0.0;return e|0}function th(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,G=0.0;o=(+g[a+36>>2]-+g[a+20>>2])*.5;l=(+g[a+40>>2]-+g[a+24>>2])*.5;i=(+g[a+44>>2]-+g[a+28>>2])*.5;n=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);k=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);i=i+ +Cb[c[(c[a>>2]|0)+48>>2]&15](a);B=(+g[a+36>>2]+ +g[a+20>>2])*.5;z=(+g[a+40>>2]+ +g[a+24>>2])*.5;x=(+g[a+44>>2]+ +g[a+28>>2])*.5;G=+g[b>>2];w=+F(+G);E=+g[b+4>>2];v=+F(+E);t=+g[b+8>>2];u=+F(+t);D=+g[b+16>>2];s=+F(+D);C=+g[b+20>>2];r=+F(+C);p=+g[b+24>>2];q=+F(+p);A=+g[b+32>>2];m=+F(+A);y=+g[b+36>>2];j=+F(+y);f=+g[b+40>>2];h=+F(+f);t=B*G+z*E+x*t+ +g[b+48>>2];p=B*D+z*C+x*p+ +g[b+52>>2];f=B*A+z*y+x*f+ +g[b+56>>2];g[d>>2]=t-((o+n)*w+(l+k)*v+i*u);g[d+4>>2]=p-((o+n)*s+(l+k)*r+i*q);g[d+8>>2]=f-((o+n)*m+(l+k)*j+i*h);g[d+12>>2]=0.0;g[e>>2]=(o+n)*w+(l+k)*v+i*u+t;g[e+4>>2]=(o+n)*s+(l+k)*r+i*q+p;g[e+8>>2]=(o+n)*m+(l+k)*j+i*h+f;g[e+12>>2]=0.0;return}function uh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,G=0,H=0.0,I=0.0;I=+g[a+52>>2];z=+g[a+36>>2];H=+g[a+56>>2];x=+g[a+40>>2];E=+g[a+60>>2];v=+g[a+44>>2];G=(c[a+20>>2]|0)==0;m=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);k=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);i=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);m=(G?0.0:(I-z)*.5)+m;k=(G?0.0:(H-x)*.5)+k;i=(G?0.0:(E-v)*.5)+i;D=+g[b>>2];u=+F(+D);C=+g[b+4>>2];t=+F(+C);r=+g[b+8>>2];s=+F(+r);B=+g[b+16>>2];q=+F(+B);A=+g[b+20>>2];p=+F(+A);n=+g[b+24>>2];o=+F(+n);y=+g[b+32>>2];l=+F(+y);w=+g[b+36>>2];j=+F(+w);f=+g[b+40>>2];h=+F(+f);z=G?0.0:(I+z)*.5;x=G?0.0:(H+x)*.5;v=G?0.0:(E+v)*.5;r=z*D+x*C+v*r+ +g[b+48>>2];n=z*B+x*A+v*n+ +g[b+52>>2];f=z*y+x*w+v*f+ +g[b+56>>2];g[d>>2]=r-(m*u+k*t+i*s);g[d+4>>2]=n-(m*q+k*p+i*o);g[d+8>>2]=f-(m*l+k*j+i*h);g[d+12>>2]=0.0;g[e>>2]=m*u+k*t+i*s+r;g[e+4>>2]=m*q+k*p+i*o+n;g[e+8>>2]=m*l+k*j+i*h+f;g[e+12>>2]=0.0;return}function vh(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0,j=0,k=0.0,m=0.0;if(a[b+48>>0]|0){c[d>>2]=0;c[d+4>>2]=0;return}c[d>>2]=4;c[d+4>>2]=2;Tc(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);g[b+1088>>2]=0.0;a[b+297>>0]=0;f=+g[b+192>>2];h=+g[b+196>>2];do if(f<=h){m=+g[b+892>>2];k=+g[b+908>>2];i=+g[b+924>>2];i=+Tj(+O(+(+g[b+832>>2]*m+ +g[b+848>>2]*k+ +g[b+864>>2]*i),+(+g[b+828>>2]*m+ +g[b+844>>2]*k+ +g[b+860>>2]*i)),f,h);g[b+1084>>2]=i;if(i<f){g[b+1088>>2]=i-f;a[b+297>>0]=1;j=1;break}if(i>h){g[b+1088>>2]=i-h;a[b+297>>0]=1;j=1}else j=0}else j=0;while(0);a[b+296>>0]=0;e=c[b+1032>>2]|0;c[b+1080>>2]=e;f=+g[b+184>>2];h=+g[b+188>>2];i=(c[l>>2]=e,+g[l>>2]);do if(f<=h){if(i>h){g[b+1032>>2]=i-h;a[b+296>>0]=1;e=14;break}if(i<f){g[b+1032>>2]=i-f;a[b+296>>0]=1;e=14}else e=13}else e=13;while(0);if((e|0)==13?(g[b+1032>>2]=0.0,a[b+1096>>0]|0):0)e=14;if((e|0)==14){c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+-1}if(j<<24>>24==0?(a[b+1112>>0]|0)==0:0)return;c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+-1;return}function wh(b,d,e,f,h,i){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;var j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0;c[6324]=(c[6324]|0)+1;b=ic((h+2|0)>>>0>268435455?18:(h+2<<4|3)+16|0)|0;if(!b)l=0;else{c[(b+4+15&-16)+-4>>2]=b;l=b+4+15&-16}j=(h+2|0)>>>0>1073741823?-1:h+2<<2;j=(j|0)==0?1:j;while(1){b=ic(j)|0;if(b|0){k=b;break}b=c[6453]|0;c[6453]=b+0;if(!b){k=0;break}Vb[b&3]()}if((h|0)>-2){b=0;do{p=+(b|0)/+(h+1|0);o=+g[e>>2];n=+g[e+4>>2];n=n+p*(+g[f+4>>2]-n);m=+g[e+8>>2];m=m+p*(+g[f+8>>2]-m);g[l+(b<<4)>>2]=o+p*(+g[f>>2]-o);g[l+(b<<4)+4>>2]=n;g[l+(b<<4)+8>>2]=m;g[l+(b<<4)+12>>2]=0.0;g[k+(b<<2)>>2]=1.0;b=b+1|0}while((b|0)<(h+2|0))}c[6324]=(c[6324]|0)+1;b=ic(1311)|0;if(!b)j=0;else{c[(b+4+15&-16)+-4>>2]=b;j=b+4+15&-16}tc(j,d,h+2|0,l,k);if(i&1|0){g[(c[j+760>>2]|0)+88>>2]=0.0;a[j+964>>0]=1}if(i&2|0){g[(c[j+760>>2]|0)+((h+1|0)*104|0)+88>>2]=0.0;a[j+964>>0]=1}if(l|0){c[6325]=(c[6325]|0)+1;Rc(c[l+-4>>2]|0)}Rc(k);if((h+2|0)>1)b=1;else return j|0;do{Gf(j,b+-1|0,b,0,0);b=b+1|0}while((b|0)!=(h+2|0));return j|0}function xh(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0,j=0;j=ob[c[(c[b>>2]|0)+28>>2]&127](b)|0;i=+g[j>>2]-+g[d>>2];h=+g[j+4>>2]-+g[d+4>>2];f=+g[j+8>>2]-+g[d+8>>2];if(!(i*i+h*h+f*f>1.1920928955078125e-007))return;Ng(b,d);if((a[b+65>>0]|0)!=0?(e=c[b+56>>2]|0,kb[c[c[e>>2]>>2]&255](e),e=c[b+56>>2]|0,(e|0)!=0):0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);e=b+56|0}else e=b+56|0;c[6324]=(c[6324]|0)+1;d=ic(191)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+52>>2]=285;a[d+60>>0]=0;a[d+80>>0]=1;c[d+76>>2]=0;c[d+68>>2]=0;c[d+72>>2]=0;a[d+100>>0]=1;c[d+96>>2]=0;c[d+88>>2]=0;c[d+92>>2]=0;a[d+120>>0]=1;c[d+116>>2]=0;c[d+108>>2]=0;c[d+112>>2]=0;a[d+140>>0]=1;c[d+136>>2]=0;c[d+128>>2]=0;c[d+132>>2]=0;c[d+144>>2]=0;a[d+164>>0]=1;c[d+160>>2]=0;c[d+152>>2]=0;c[d+156>>2]=0;c[d+168>>2]=0;c[d+4>>2]=-8388609;c[d+8>>2]=-8388609;c[d+12>>2]=-8388609;g[d+16>>2]=0.0;c[d+20>>2]=2139095039;c[d+24>>2]=2139095039;c[d+28>>2]=2139095039;g[d+32>>2]=0.0;c[d>>2]=8156;c[e>>2]=d;_c(d,c[b+52>>2]|0,(a[b+64>>0]|0)!=0,b+20|0,b+36|0);a[b+65>>0]=1;return}function yh(b,d){b=b|0;d=d|0;var e=0.0,f=0.0;if(a[b+1309>>0]|0){e=(+g[b+1256>>2]-+g[b+1316>>2])*+g[b+1340>>2];g[b+792>>2]=e*(+g[d>>2]*+g[b+1364>>2]/+(c[d+44>>2]|0));e=+F(+e);g[b+808>>2]=e/+g[d>>2]}if(a[b+1310>>0]|0){e=(+g[b+1260>>2]-+g[b+1320>>2])*+g[b+1344>>2];g[b+796>>2]=e*(+g[d>>2]*+g[b+1368>>2]/+(c[d+44>>2]|0));e=+F(+e);g[b+812>>2]=e/+g[d>>2]}if(a[b+1311>>0]|0){e=(+g[b+1264>>2]-+g[b+1324>>2])*+g[b+1348>>2];g[b+800>>2]=e*(+g[d>>2]*+g[b+1372>>2]/+(c[d+44>>2]|0));e=+F(+e);g[b+816>>2]=e/+g[d>>2]}if(a[b+1312>>0]|0){f=-((+g[b+1192>>2]-+g[b+1328>>2])*+g[b+1352>>2]);e=+g[d>>2];g[b+876>>2]=e*+g[b+1376>>2]/+(c[d+44>>2]|0)*f;g[b+880>>2]=+F(+f)/e}if(a[b+1313>>0]|0){e=-((+g[b+1196>>2]-+g[b+1332>>2])*+g[b+1356>>2]);f=+g[d>>2];g[b+940>>2]=f*+g[b+1380>>2]/+(c[d+44>>2]|0)*e;g[b+944>>2]=+F(+e)/f}if(!(a[b+1314>>0]|0)){Tf(b,d);return}e=-((+g[b+1200>>2]-+g[b+1336>>2])*+g[b+1360>>2]);f=+g[d>>2];g[b+1004>>2]=f*+g[b+1384>>2]/+(c[d+44>>2]|0)*e;g[b+1008>>2]=+F(+e)/f;Tf(b,d);return}function zh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0;e=i;i=i+160|0;c[e+136>>2]=0;c[e+136+4>>2]=0;c[e+136+8>>2]=0;c[e+136+12>>2]=0;c[e+136+16>>2]=0;c[e+32>>2]=8696;f=e+32+4|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[e+32+20>>2]=1065353216;c[e+32+24>>2]=0;c[e+32+24+4>>2]=0;c[e+32+24+8>>2]=0;c[e+32+24+12>>2]=0;c[e+32+40>>2]=1065353216;c[e+32+44>>2]=0;c[e+32+44+4>>2]=0;c[e+32+44+8>>2]=0;c[e+32+44+12>>2]=0;c[e+32+60>>2]=1065353216;c[e+32+64>>2]=0;c[e+32+68>>2]=c[e+136+4>>2];c[e+32+68+4>>2]=c[e+136+4+4>>2];c[e+32+68+8>>2]=c[e+136+4+8>>2];c[e+32+68+12>>2]=c[e+136+4+12>>2];g[e+32+84>>2]=-999999984306749440.0;k=+g[d>>2];j=+g[d+4>>2];h=+g[d+8>>2];g[e+32+88>>2]=k+j*0.0+h*0.0;g[e+32+92>>2]=k*0.0+j+h*0.0;g[e+32+96>>2]=k*0.0+j*0.0+h;g[e+32+100>>2]=0.0;c[e+16>>2]=1566444395;c[e+16+4>>2]=1566444395;c[e+16+8>>2]=1566444395;g[e+16+12>>2]=0.0;d=c[(c[b>>2]|0)+64>>2]|0;g[e>>2]=-999999984306749440.0;g[e+4>>2]=-999999984306749440.0;g[e+8>>2]=-999999984306749440.0;g[e+12>>2]=0.0;Yb[d&127](b,e+32|0,e,e+16|0);c[a>>2]=c[f>>2];c[a+4>>2]=c[f+4>>2];c[a+8>>2]=c[f+8>>2];c[a+12>>2]=c[f+12>>2];i=e;return}function Ah(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0;q=i;i=i+16|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;e=+g[d>>2];f=+g[d+4>>2];h=+g[d+8>>2];if(e*e+f*f+h*h<9.999999747378752e-005){p=1.0;o=0.0;n=0.0}else{n=1.0/+G(+(e*e+f*f+h*h));p=e*n;o=f*n;n=h*n}d=c[b+56>>2]|0;m=+g[b+32+(((d+2|0)%3|0)<<2)>>2];c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[q+(d<<2)>>2]=c[b+32+(d<<2)>>2];k=p*m;l=o*m;m=n*m;e=k+ +g[q>>2];f=l+ +g[q+4>>2];j=m+ +g[q+8>>2];h=+Cb[c[(c[b>>2]|0)+48>>2]&15](b);e=e-p*h;f=f-o*h;h=j-n*h;j=n*h+(p*e+o*f);if(j>-999999984306749440.0){g[a>>2]=e;g[a+4>>2]=f;g[a+8>>2]=h;g[a+12>>2]=0.0}else j=-999999984306749440.0;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;d=c[b+56>>2]|0;g[q+(d<<2)>>2]=-+g[b+32+(d<<2)>>2];e=k+ +g[q>>2];f=l+ +g[q+4>>2];m=m+ +g[q+8>>2];h=+Cb[c[(c[b>>2]|0)+48>>2]&15](b);e=e-p*h;f=f-o*h;h=m-n*h;if(!(n*h+(p*e+o*f)>j)){i=q;return}g[a>>2]=e;g[a+4>>2]=f;g[a+8>>2]=h;g[a+12>>2]=0.0;i=q;return}function Bh(a,b,d,e,f,h,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;h=+h;j=+j;k=+k;l=+l;m=+m;var n=0;n=i;i=i+128|0;c[n+80>>2]=c[a+4>>2];c[n+80+4>>2]=c[a+20>>2];c[n+80+8>>2]=c[a+36>>2];g[n+80+12>>2]=0.0;c[n+80+16>>2]=c[a+8>>2];c[n+80+20>>2]=c[a+24>>2];c[n+80+24>>2]=c[a+40>>2];g[n+80+28>>2]=0.0;c[n+80+32>>2]=c[a+12>>2];c[n+80+36>>2]=c[a+28>>2];c[n+80+40>>2]=c[a+44>>2];g[n+80+44>>2]=0.0;c[n+32>>2]=c[b+4>>2];c[n+32+4>>2]=c[b+20>>2];c[n+32+8>>2]=c[b+36>>2];g[n+32+12>>2]=0.0;c[n+32+16>>2]=c[b+8>>2];c[n+32+20>>2]=c[b+24>>2];c[n+32+24>>2]=c[b+40>>2];g[n+32+28>>2]=0.0;c[n+32+32>>2]=c[b+12>>2];c[n+32+36>>2]=c[b+28>>2];c[n+32+40>>2]=c[b+44>>2];g[n+32+44>>2]=0.0;h=h-+g[a+56>>2];j=j-+g[a+60>>2];g[n+16>>2]=f-+g[a+52>>2];g[n+16+4>>2]=h;g[n+16+8>>2]=j;g[n+16+12>>2]=0.0;j=l-+g[b+56>>2];m=m-+g[b+60>>2];g[n>>2]=k-+g[b+52>>2];g[n+4>>2]=j;g[n+8>>2]=m;g[n+12>>2]=0.0;Eg(d,n+80|0,n+32|0,n+16|0,n,e,a+436|0,+g[a+384>>2],b+436|0,+g[b+384>>2]);i=n;return}function Ch(a,b,d,e,f){a=a|0;b=+b;d=+d;e=+e;f=f|0;var h=0,j=0,k=0,l=0,m=0.0,n=0.0;k=i;i=i+48|0;m=1.0/+G(+(b*b+d*d+e*e));g[f>>2]=m*b;g[f+4>>2]=m*d;g[f+8>>2]=m*e;g[f+12>>2]=0.0;h=c[a+120>>2]|0;l=c[a+124>>2]|0;j=(c[a>>2]|0)+(l>>1)|0;if(l&1)h=c[(c[j>>2]|0)+h>>2]|0;Ub[h&127](k,j,f);b=-+g[f>>2];d=-+g[f+4>>2];e=-+g[f+8>>2];h=c[a+120>>2]|0;l=c[a+124>>2]|0;j=(c[a+4>>2]|0)+(l>>1)|0;if(l&1)h=c[(c[j>>2]|0)+h>>2]|0;m=+g[a+24>>2]*b+ +g[a+28>>2]*d+ +g[a+32>>2]*e;n=+g[a+40>>2]*b+ +g[a+44>>2]*d+ +g[a+48>>2]*e;g[k+16>>2]=+g[a+8>>2]*b+ +g[a+12>>2]*d+ +g[a+16>>2]*e;g[k+16+4>>2]=m;g[k+16+8>>2]=n;g[k+16+12>>2]=0.0;Ub[h&127](k+32|0,j,k+16|0);n=+g[k+32>>2];b=+g[k+32+4>>2];d=+g[k+32+8>>2];e=+g[k+4>>2]-(n*+g[a+72>>2]+b*+g[a+76>>2]+d*+g[a+80>>2]+ +g[a+108>>2]);m=+g[k+8>>2]-(n*+g[a+88>>2]+b*+g[a+92>>2]+d*+g[a+96>>2]+ +g[a+112>>2]);g[f+16>>2]=+g[k>>2]-(n*+g[a+56>>2]+b*+g[a+60>>2]+d*+g[a+64>>2]+ +g[a+104>>2]);g[f+20>>2]=e;g[f+24>>2]=m;g[f+28>>2]=0.0;i=k;return}function Dh(a,b,c,d,e,f,h,i,j,k,l,m,n,o){a=a|0;b=+b;c=+c;d=+d;e=+e;f=+f;h=+h;i=+i;j=+j;k=+k;l=+l;m=+m;n=+n;o=+o;var p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0;q=(j-f)*(n-h)-(k-h)*(m-f);r=(k-h)*(l-e)-(i-e)*(n-h);s=(i-e)*(m-f)-(j-f)*(l-e);if(+F(+(s*d+(q*b+r*c)))<1.1920928955078125e-007){s=-1.0;return +s}t=+g[a>>2];v=+g[a+4>>2];u=+g[a+8>>2];p=-(q*t+r*v+s*u-(s*h+(q*e+r*f)))/(s*d+(q*b+r*c));if(((p>1.1920928955078125e-006&p<o?s*((j-(v+p*c))*(e-(t+p*b))-(f-(v+p*c))*(i-(t+p*b)))+(q*((f-(v+p*c))*(k-(u+p*d))-(h-(u+p*d))*(j-(v+p*c)))+r*((h-(u+p*d))*(i-(t+p*b))-(k-(u+p*d))*(e-(t+p*b))))>-1.1920928955078125e-006:0)?s*((m-(v+p*c))*(i-(t+p*b))-(j-(v+p*c))*(l-(t+p*b)))+(q*((j-(v+p*c))*(n-(u+p*d))-(k-(u+p*d))*(m-(v+p*c)))+r*((k-(u+p*d))*(l-(t+p*b))-(n-(u+p*d))*(i-(t+p*b))))>-1.1920928955078125e-006:0)?s*((f-(v+p*c))*(l-(t+p*b))-(m-(v+p*c))*(e-(t+p*b)))+(q*((m-(v+p*c))*(h-(u+p*d))-(n-(u+p*d))*(f-(v+p*c)))+r*((n-(u+p*d))*(e-(t+p*b))-(h-(u+p*d))*(l-(t+p*b))))>-1.1920928955078125e-006:0){v=p;return +v}v=-1.0;return +v}function Eh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;if(a[b+165>>0]|0){if((c[b+92>>2]|0)>=(d|0))return;if((d|0)!=0?(c[6324]=(c[6324]|0)+1,e=ic((d<<4|3)+16|0)|0,(e|0)!=0):0){c[(e+4+15&-16)+-4>>2]=e;g=e+4+15&-16}else g=0;f=c[b+88>>2]|0;if((f|0)>0){e=0;do{i=g+(e<<4)|0;h=(c[b+96>>2]|0)+(e<<4)|0;c[i>>2]=c[h>>2];c[i+4>>2]=c[h+4>>2];c[i+8>>2]=c[h+8>>2];c[i+12>>2]=c[h+12>>2];e=e+1|0}while((e|0)!=(f|0))}e=c[b+96>>2]|0;if(e|0){if(a[b+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=g;c[b+92>>2]=d;return}if((c[b+112>>2]|0)>=(d|0))return;if((d|0)!=0?(c[6324]=(c[6324]|0)+1,f=ic((d<<2|3)+16|0)|0,(f|0)!=0):0){c[(f+4+15&-16)+-4>>2]=f;h=f+4+15&-16}else h=0;f=c[b+108>>2]|0;g=c[b+116>>2]|0;if((f|0)<=0)if(!g)e=b+120|0;else i=21;else{e=0;do{c[h+(e<<2)>>2]=c[g+(e<<2)>>2];e=e+1|0}while((e|0)!=(f|0));i=21}if((i|0)==21){if(a[b+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}c[b+116>>2]=0;e=b+120|0}a[e>>0]=1;c[b+116>>2]=h;c[b+112>>2]=d;return}function Fh(a,b,d,e,f,g,h,i,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;if(!(c[i+44>>2]|0))return;b=c[i+20>>2]|0;if(!(c[i+64>>2]&256)){if((b|0)<=0)return;e=0;do{d=c[a+28>>2]|0;if((d|0)>0){b=0;do{j=c[(c[a+116>>2]|0)+(b<<2)>>2]|0;h=c[a+36>>2]|0;g=c[a+16>>2]|0;ug(g+((c[h+(j*152|0)+144>>2]|0)*244|0)|0,g+((c[h+(j*152|0)+148>>2]|0)*244|0)|0,h+(j*152|0)|0);b=b+1|0}while((b|0)!=(d|0));b=c[i+20>>2]|0}e=e+1|0}while((e|0)<(b|0));return}else{if((b|0)<=0)return;e=0;do{d=c[a+28>>2]|0;if((d|0)>0){b=0;do{j=c[(c[a+116>>2]|0)+(b<<2)>>2]|0;h=c[a+36>>2]|0;g=c[a+16>>2]|0;ug(g+((c[h+(j*152|0)+144>>2]|0)*244|0)|0,g+((c[h+(j*152|0)+148>>2]|0)*244|0)|0,h+(j*152|0)|0);b=b+1|0}while((b|0)!=(d|0));b=c[i+20>>2]|0}e=e+1|0}while((e|0)<(b|0));return}}function Gh(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;if(!(a[d+164>>0]|0)){if((c[d+152>>2]|0)>=(e|0))return;if((e|0)!=0?(c[6324]=(c[6324]|0)+1,g=ic((e<<1)+19|0)|0,(g|0)!=0):0){c[(g+4+15&-16)+-4>>2]=g;i=g+4+15&-16}else i=0;g=c[d+148>>2]|0;h=c[d+156>>2]|0;if((g|0)<=0)if(!h)f=d+160|0;else j=22;else{f=0;do{b[i+(f<<1)>>1]=b[h+(f<<1)>>1]|0;f=f+1|0}while((f|0)!=(g|0));j=22}if((j|0)==22){if(a[d+160>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[d+156>>2]=0;f=d+160|0}a[f>>0]=1;c[d+156>>2]=i;c[d+152>>2]=e;return}else{if((c[d+132>>2]|0)>=(e|0))return;if((e|0)!=0?(c[6324]=(c[6324]|0)+1,f=ic((e<<2|3)+16|0)|0,(f|0)!=0):0){c[(f+4+15&-16)+-4>>2]=f;i=f+4+15&-16}else i=0;g=c[d+128>>2]|0;h=c[d+136>>2]|0;if((g|0)<=0)if(!h)f=d+140|0;else j=10;else{f=0;do{c[i+(f<<2)>>2]=c[h+(f<<2)>>2];f=f+1|0}while((f|0)!=(g|0));j=10}if((j|0)==10){if(a[d+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[d+136>>2]=0;f=d+140|0}a[f>>0]=1;c[d+136>>2]=i;c[d+132>>2]=e;return}}function Hh(b){b=b|0;var d=0,e=0;c[6324]=(c[6324]|0)+1;d=ic(675)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d>>2]=5592;c[d+164>>2]=1065353216;c[d+168>>2]=1065353216;c[d+172>>2]=1065353216;g[d+176>>2]=0.0;c[d+180>>2]=0;g[d+184>>2]=999999984306749440.0;e=d+188|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[d+204>>2]=1;c[d+208>>2]=-1;c[d+212>>2]=-1;c[d+216>>2]=1;g[d+220>>2]=0.0;g[d+224>>2]=.5;g[d+228>>2]=0.0;g[d+232>>2]=0.0;g[d+236>>2]=0.0;g[d+240>>2]=.10000000149011612;g[d+244>>2]=1.0e4;c[d+248>>2]=1;c[d+252>>2]=0;c[d+256>>2]=-1;c[d+260>>2]=-1;g[d+264>>2]=1.0;g[d+268>>2]=0.0;g[d+272>>2]=0.0;c[d+276>>2]=0;a[d+296>>0]=1;c[d+292>>2]=0;c[d+284>>2]=0;c[d+288>>2]=0;c[d+300>>2]=0;c[d+4>>2]=1065353216;e=d+8|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[d+24>>2]=1065353216;e=d+28|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[d+44>>2]=1065353216;e=d+48|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[d>>2]=4916;a[d+540>>0]=1;c[d+536>>2]=0;c[d+528>>2]=0;c[d+532>>2]=0;ud(d,b);return d|0}function Ih(a,b,d){a=a|0;b=b|0;d=d|0;ii(a,b,d)|0;c[b+52>>2]=c[a+300>>2];c[b+56>>2]=c[a+304>>2];c[b+60>>2]=c[a+308>>2];c[b+64>>2]=c[a+312>>2];c[b+68>>2]=c[a+316>>2];c[b+72>>2]=c[a+320>>2];c[b+76>>2]=c[a+324>>2];c[b+80>>2]=c[a+328>>2];c[b+84>>2]=c[a+332>>2];c[b+88>>2]=c[a+336>>2];c[b+92>>2]=c[a+340>>2];c[b+96>>2]=c[a+344>>2];c[b+100>>2]=c[a+348>>2];c[b+104>>2]=c[a+352>>2];c[b+108>>2]=c[a+356>>2];c[b+112>>2]=c[a+360>>2];c[b+116>>2]=c[a+364>>2];c[b+120>>2]=c[a+368>>2];c[b+124>>2]=c[a+372>>2];c[b+128>>2]=c[a+376>>2];c[b+132>>2]=c[a+380>>2];c[b+136>>2]=c[a+384>>2];c[b+140>>2]=c[a+388>>2];c[b+144>>2]=c[a+392>>2];c[b+148>>2]=c[a+396>>2];c[b+152>>2]=c[a+400>>2];c[b+156>>2]=c[a+404>>2];c[b+160>>2]=c[a+408>>2];c[b+164>>2]=c[a+412>>2];c[b+168>>2]=c[a+416>>2];c[b+172>>2]=c[a+420>>2];c[b+176>>2]=c[a+424>>2];c[b+180>>2]=c[a+444>>2];c[b+184>>2]=c[a+448>>2];c[b+188>>2]=c[a+452>>2];c[b+192>>2]=c[a+428>>2];c[b+196>>2]=c[a+432>>2];c[b+200>>2]=c[a+436>>2];c[b+204>>2]=c[a+440>>2];return 11915}function Jh(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0.0,h=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0;k=i;i=i+32|0;n=+g[a+60>>2];r=+g[a+76>>2]-n;m=+g[a+64>>2];p=+g[a+80>>2]-m;l=+g[a+68>>2];s=+g[a+84>>2]-l;o=+g[a+92>>2]-n;q=+g[a+96>>2]-m;h=+g[a+100>>2]-l;j=1.0/+G(+((r*q-p*o)*(r*q-p*o)+((p*h-s*q)*(p*h-s*q)+(s*o-r*h)*(s*o-r*h))));f=j*(p*h-s*q);h=j*(s*o-r*h);j=(r*q-p*o)*j;l=j*+g[b+8>>2]+(+g[b>>2]*f+ +g[b+4>>2]*h)-(f*n+h*m+j*l);if(!(l>=-d)|!(l<=d)){b=0;i=k;return b|0}e=0;while(1){Yb[c[(c[a>>2]|0)+104>>2]&127](a,e,k+16|0,k);n=+g[k+16>>2];s=+g[k>>2]-n;p=+g[k+16+4>>2];o=+g[k+4>>2]-p;m=+g[k+16+8>>2];r=+g[k+8>>2]-m;q=1.0/+G(+((h*s-f*o)*(h*s-f*o)+((j*o-h*r)*(j*o-h*r)+(f*r-j*s)*(f*r-j*s))));e=e+1|0;if((h*s-f*o)*q*+g[b+8>>2]+(+g[b>>2]*q*(j*o-h*r)+ +g[b+4>>2]*q*(f*r-j*s))-(m*(h*s-f*o)*q+(n*q*(j*o-h*r)+p*q*(f*r-j*s)))<-d){e=0;a=5;break}if((e|0)>=3){e=1;a=5;break}}if((a|0)==5){i=k;return e|0}return 0}function Kh(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,i=0,j=0;c[6324]=(c[6324]|0)+1;h=ic(55)|0;if(!h)j=0;else{c[(h+4+15&-16)+-4>>2]=h;j=h+4+15&-16}c[j>>2]=d;c[j+4>>2]=e;c[j+8>>2]=f;c[j+12>>2]=-1;c[j+16>>2]=-1;c[j+20>>2]=-1;c[j+28>>2]=-1;g[j+32>>2]=0.0;f=j;d=c[b+4>>2]|0;c[j+24>>2]=d;if((d|0)!=(c[b+8>>2]|0)){i=d;e=b+12|0;e=c[e>>2]|0;e=e+(i<<2)|0;c[e>>2]=f;i=i+1|0;c[b+4>>2]=i;return j|0}i=d|0?d<<1:1;if((d|0)>=(i|0)){i=d;e=b+12|0;e=c[e>>2]|0;e=e+(i<<2)|0;c[e>>2]=f;i=i+1|0;c[b+4>>2]=i;return j|0}if(!i)h=0;else{c[6324]=(c[6324]|0)+1;h=ic((i<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}d=c[b+4>>2]|0}if((d|0)>0){e=0;do{c[h+(e<<2)>>2]=c[(c[b+12>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(d|0))}e=c[b+12>>2]|0;if(e){if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);d=c[b+4>>2]|0}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=h;c[b+8>>2]=i;i=d;e=b+12|0;e=c[e>>2]|0;e=e+(i<<2)|0;c[e>>2]=f;i=i+1|0;c[b+4>>2]=i;return j|0}function Lh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0;o=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);u=+g[a+76>>2];t=+g[a+60>>2];r=+g[a+80>>2];q=+g[a+64>>2];n=+g[a+84>>2];m=+g[a+68>>2];E=+g[b>>2];y=+F(+E);D=+g[b+4>>2];x=+F(+D);k=+g[b+8>>2];l=+F(+k);C=+g[b+16>>2];w=+F(+C);B=+g[b+20>>2];v=+F(+B);i=+g[b+24>>2];j=+F(+i);A=+g[b+32>>2];s=+F(+A);z=+g[b+36>>2];p=+F(+z);f=+g[b+40>>2];h=+F(+f);k=(u+t)*.5*E+(r+q)*.5*D+(n+m)*.5*k+ +g[b+48>>2];i=(u+t)*.5*C+(r+q)*.5*B+(n+m)*.5*i+ +g[b+52>>2];f=(u+t)*.5*A+(r+q)*.5*z+(n+m)*.5*f+ +g[b+56>>2];l=(o+(u-t)*.5)*y+(o+(r-q)*.5)*x+(o+(n-m)*.5)*l;j=(o+(u-t)*.5)*w+(o+(r-q)*.5)*v+(o+(n-m)*.5)*j;h=(o+(u-t)*.5)*s+(o+(r-q)*.5)*p+(o+(n-m)*.5)*h;g[d>>2]=k-l;g[d+4>>2]=i-j;g[d+8>>2]=f-h;g[d+12>>2]=0.0;g[e>>2]=l+k;g[e+4>>2]=j+i;g[e+8>>2]=h+f;g[e+12>>2]=0.0;return}function Mh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0;f=i;i=i+16|0;y=c[a+56>>2]|0;z=c[a+32+(((y+2|0)%3|0)<<2)>>2]|0;c[f>>2]=z;c[f+4>>2]=z;c[f+8>>2]=z;g[f+12>>2]=0.0;g[f+(y<<2)>>2]=(c[l>>2]=z,+g[l>>2])+ +g[a+32+(y<<2)>>2];k=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);h=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);o=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);k=k+ +g[f>>2];g[f>>2]=k;h=h+ +g[f+4>>2];g[f+4>>2]=h;o=o+ +g[f+8>>2];v=+F(+(+g[b>>2]));u=+F(+(+g[b+4>>2]));w=+F(+(+g[b+8>>2]));r=+F(+(+g[b+16>>2]));q=+F(+(+g[b+20>>2]));s=+F(+(+g[b+24>>2]));m=+F(+(+g[b+32>>2]));j=+F(+(+g[b+36>>2]));n=+F(+(+g[b+40>>2]));x=+g[b+48>>2];t=+g[b+52>>2];p=+g[b+56>>2];g[d>>2]=x-(o*w+(v*k+u*h));g[d+4>>2]=t-(o*s+(r*k+q*h));g[d+8>>2]=p-(o*n+(m*k+j*h));g[d+12>>2]=0.0;g[e>>2]=x+(o*w+(v*k+u*h));g[e+4>>2]=t+(o*s+(r*k+q*h));g[e+8>>2]=p+(o*n+(m*k+j*h));g[e+12>>2]=0.0;i=f;return}function Nh(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0;if(a[d+32>>0]&1){f=c[b+4>>2]|0;if(f|0)Xi(f,d,e);f=c[b>>2]|0;if(f|0){n=+g[d>>2];l=+g[f+128>>2];m=+g[d+4>>2];k=+g[d+8>>2];h=+g[e+4>>2];p=+g[e+8>>2];o=+g[e>>2];j=+g[f+180>>2]*(k*h-m*p)+ +g[f+184>>2]*(n*p-k*o)+(m*o-n*h)*+g[f+188>>2];i=(k*h-m*p)*+g[f+196>>2]+(n*p-k*o)*+g[f+200>>2]+(m*o-n*h)*+g[f+204>>2];h=(k*h-m*p)*+g[f+212>>2]+(n*p-k*o)*+g[f+216>>2]+(m*o-n*h)*+g[f+220>>2];g[f+244>>2]=n*l+ +g[f+244>>2];g[f+248>>2]=l*m+ +g[f+248>>2];g[f+252>>2]=l*k+ +g[f+252>>2];g[f+316>>2]=n*l+ +g[f+316>>2];g[f+320>>2]=l*m+ +g[f+320>>2];g[f+324>>2]=l*k+ +g[f+324>>2];g[f+260>>2]=j+ +g[f+260>>2];g[f+264>>2]=i+ +g[f+264>>2];g[f+268>>2]=h+ +g[f+268>>2];g[f+332>>2]=j+ +g[f+332>>2];g[f+336>>2]=i+ +g[f+336>>2];g[f+340>>2]=h+ +g[f+340>>2];c[f+308>>2]=(c[f+308>>2]|0)+1}}if(!(a[d+32>>0]&2))return;Zi(b,d+16|0,e);return}function Oh(b,d){b=b|0;d=d|0;var e=0;c[b>>2]=5212;a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=-1;c[b+16>>2]=0;c[b+20>>2]=0;a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;a[b+120>>0]=1;c[b+116>>2]=0;c[b+108>>2]=0;c[b+112>>2]=0;c[b+64>>2]=0;c[b+68>>2]=0;c[b+72>>2]=-1;c[b+76>>2]=0;c[b+80>>2]=0;a[b+193>>0]=0;a[b+194>>0]=1;a[b+192>>0]=(d|0)!=0^1;g[b+140>>2]=0.0;c[b+144>>2]=0;c[b+164>>2]=0;c[b+148>>2]=1;c[b+152>>2]=0;c[b+156>>2]=10;c[b+160>>2]=1;c[b+168>>2]=0;c[b+172>>2]=0;g[b+176>>2]=0.0;if(d|0){e=d;d=b+136|0;c[d>>2]=e;d=b+188|0;c[d>>2]=0;d=b+180|0;c[d>>2]=0;d=b+184|0;c[d>>2]=0;b=b+124|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;return}c[6324]=(c[6324]|0)+1;d=ic(91)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}Hi(d);e=b+136|0;c[e>>2]=d;e=b+188|0;c[e>>2]=0;e=b+180|0;c[e>>2]=0;e=b+184|0;c[e>>2]=0;e=b+124|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;return}function Ph(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0;k=c[b>>2]|0;if((k|0)==(c[a+80>>2]|0)){j=1.0;return +j}if(c[k+204>>2]&4|0){j=1.0;return +j}f=+g[b+8>>2];h=+g[b+12>>2];e=+g[b+16>>2];if(d){i=f;j=h}else{i=+g[k+4>>2]*f+ +g[k+8>>2]*h+ +g[k+12>>2]*e;j=f*+g[k+20>>2]+h*+g[k+24>>2]+e*+g[k+28>>2];e=f*+g[k+36>>2]+h*+g[k+40>>2]+e*+g[k+44>>2]}if(i*+g[a+84>>2]+j*+g[a+88>>2]+e*+g[a+92>>2]<+g[a+100>>2]){j=1.0;return +j}c[a+4>>2]=c[b+40>>2];c[a+76>>2]=k;if(d){c[a+44>>2]=c[b+8>>2];c[a+44+4>>2]=c[b+8+4>>2];c[a+44+8>>2]=c[b+8+8>>2];c[a+44+12>>2]=c[b+8+12>>2]}else{e=+g[b+8>>2];f=+g[b+12>>2];h=+g[b+16>>2];i=e*+g[k+20>>2]+f*+g[k+24>>2]+h*+g[k+28>>2];j=e*+g[k+36>>2]+f*+g[k+40>>2]+h*+g[k+44>>2];g[a+44>>2]=+g[k+4>>2]*e+ +g[k+8>>2]*f+ +g[k+12>>2]*h;g[a+48>>2]=i;g[a+52>>2]=j;g[a+56>>2]=0.0}c[a+60>>2]=c[b+24>>2];c[a+60+4>>2]=c[b+24+4>>2];c[a+60+8>>2]=c[b+24+8>>2];c[a+60+12>>2]=c[b+24+12>>2];j=+g[b+40>>2];return +j}function Qh(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=c[b+16>>2]|0;if(d|0){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;d=c[b+36>>2]|0;if(d|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;d=c[b+56>>2]|0;if(d|0){if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;if((c[b+12>>2]|0)>=2){xf(b);return}c[6324]=(c[6324]|0)+1;d=ic(43)|0;if(!d)f=0;else{c[(d+4+15&-16)+-4>>2]=d;f=d+4+15&-16}e=c[b+8>>2]|0;if((e|0)>0){d=0;do{g=f+(d*12|0)|0;h=(c[b+16>>2]|0)+(d*12|0)|0;c[g>>2]=c[h>>2];c[g+4>>2]=c[h+4>>2];c[g+8>>2]=c[h+8>>2];d=d+1|0}while((d|0)!=(e|0))}d=c[b+16>>2]|0;if(d|0){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=f;c[b+12>>2]=2;xf(b);return}function Rh(a,b,e){a=a|0;b=b|0;e=e|0;ii(a,b,e)|0;c[b+52>>2]=c[a+52>>2];c[b+56>>2]=c[a+56>>2];c[b+60>>2]=c[a+60>>2];c[b+64>>2]=c[a+64>>2];c[b+68>>2]=c[a+68>>2];c[b+72>>2]=c[a+72>>2];c[b+76>>2]=c[a+76>>2];c[b+80>>2]=c[a+80>>2];c[b+84>>2]=c[a+84>>2];c[b+88>>2]=c[a+88>>2];c[b+92>>2]=c[a+92>>2];c[b+96>>2]=c[a+96>>2];c[b+100>>2]=c[a+100>>2];c[b+104>>2]=c[a+104>>2];c[b+108>>2]=c[a+108>>2];c[b+112>>2]=c[a+112>>2];c[b+116>>2]=c[a+116>>2];c[b+120>>2]=c[a+120>>2];c[b+124>>2]=c[a+124>>2];c[b+128>>2]=c[a+128>>2];c[b+132>>2]=c[a+132>>2];c[b+136>>2]=c[a+136>>2];c[b+140>>2]=c[a+140>>2];c[b+144>>2]=c[a+144>>2];c[b+148>>2]=c[a+148>>2];c[b+152>>2]=c[a+152>>2];c[b+156>>2]=c[a+156>>2];c[b+160>>2]=c[a+160>>2];c[b+164>>2]=c[a+164>>2];c[b+168>>2]=c[a+168>>2];c[b+172>>2]=c[a+172>>2];c[b+176>>2]=c[a+176>>2];c[b+180>>2]=c[a+188>>2];c[b+184>>2]=c[a+184>>2];c[b+188>>2]=c[a+196>>2];c[b+192>>2]=c[a+192>>2];c[b+196>>2]=d[a+180>>0];c[b+200>>2]=d[a+49>>0];return 12286}function Sh(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0.0,h=0.0,i=0.0,j=0.0;c[a+4>>2]=35;c[a+8>>2]=0;c[a+12>>2]=-1;c[a+16>>2]=1065353216;c[a+20>>2]=1065353216;c[a+24>>2]=1065353216;g[a+28>>2]=0.0;g[a+48>>2]=.03999999910593033;c[a>>2]=7764;c[a+56>>2]=1;h=+g[b>>2];f=+g[b+4>>2];d=+g[b+8>>2];d=+g[b+((h<f?(h<d?0:2):f<d?1:2)<<2)>>2]*.10000000149011612;if(d<.03999999910593033){j=+Hz(a);i=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);h=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);j=j+ +g[a+32>>2];i=i+ +g[a+36>>2];h=h+ +g[a+40>>2];g[a+48>>2]=d;d=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);f=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);h=h-+Cb[c[(c[a>>2]|0)+48>>2]&15](a);g[a+32>>2]=j-d;g[a+36>>2]=i-f;g[a+40>>2]=h;g[a+44>>2]=0.0;e=c[a>>2]|0}else e=7764;h=+Cb[c[e+48>>2]&15](a);i=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);j=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);i=+g[b+4>>2]*+g[a+20>>2]-i;j=+g[b+8>>2]*+g[a+24>>2]-j;g[a+32>>2]=+g[b>>2]*+g[a+16>>2]-h;g[a+36>>2]=i;g[a+40>>2]=j;g[a+44>>2]=0.0;c[a+4>>2]=13;return}function Th(){var b=0,d=0;c[6324]=(c[6324]|0)+1;b=ic(343)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}c[b+164>>2]=1065353216;c[b+168>>2]=1065353216;c[b+172>>2]=1065353216;g[b+176>>2]=0.0;c[b+180>>2]=0;g[b+184>>2]=999999984306749440.0;d=b+188|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[b+204>>2]=1;c[b+208>>2]=-1;c[b+212>>2]=-1;c[b+216>>2]=1;g[b+220>>2]=0.0;g[b+224>>2]=.5;g[b+228>>2]=0.0;g[b+232>>2]=0.0;g[b+236>>2]=0.0;g[b+240>>2]=.10000000149011612;g[b+244>>2]=1.0e4;c[b+252>>2]=0;c[b+256>>2]=-1;c[b+260>>2]=-1;g[b+264>>2]=1.0;g[b+268>>2]=0.0;g[b+272>>2]=0.0;c[b+276>>2]=0;a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;c[b+288>>2]=0;c[b+300>>2]=0;c[b+4>>2]=1065353216;d=b+8|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[b+24>>2]=1065353216;d=b+28|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[b+44>>2]=1065353216;d=b+48|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[b>>2]=6296;a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;c[b+248>>2]=4;return b|0}function Uh(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0;h=i;i=i+96|0;g[h+4>>2]=1.0;c[h+8>>2]=0;b[h+12>>1]=1;b[h+14>>1]=-1;c[h+16>>2]=0;c[h>>2]=2896;c[h+20>>2]=c[d>>2];c[h+20+4>>2]=c[d+4>>2];c[h+20+8>>2]=c[d+8>>2];c[h+20+12>>2]=c[d+12>>2];c[h+36>>2]=c[e>>2];c[h+36+4>>2]=c[e+4>>2];c[h+36+8>>2]=c[e+8>>2];c[h+36+12>>2]=c[e+12>>2];a=c[a+4>>2]|0;Yb[c[(c[a>>2]|0)+32>>2]&127](a,d,e,h);a=c[h+8>>2]|0;if(!a){f=0;i=h;return f|0}if(!(c[a+248>>2]&2)){f=0;i=h;return f|0}if(c[a+204>>2]&4|0){f=0;i=h;return f|0}c[f>>2]=c[h+68>>2];c[f+4>>2]=c[h+68+4>>2];c[f+8>>2]=c[h+68+8>>2];c[f+12>>2]=c[h+68+12>>2];c[f+16>>2]=c[h+52>>2];c[f+16+4>>2]=c[h+52+4>>2];c[f+16+8>>2]=c[h+52+8>>2];c[f+16+12>>2]=c[h+52+12>>2];m=+g[f+16>>2];l=+g[f+20>>2];k=+g[f+24>>2];j=1.0/+G(+(m*m+l*l+k*k));g[f+16>>2]=m*j;g[f+20>>2]=l*j;g[f+24>>2]=k*j;c[f+32>>2]=c[h+4>>2];f=a;i=h;return f|0}function Vh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=b+328|0;f=d;g=e+104|0;do{c[e>>2]=c[f>>2];e=e+4|0;f=f+4|0}while((e|0)<(g|0));i=c[d+108>>2]|0;e=c[b+436>>2]|0;a:do if((e|0)>(i|0))e=b+444|0;else{if((e|0)<(i|0)?(c[b+440>>2]|0)<(i|0):0){if((i|0)!=0?(c[6324]=(c[6324]|0)+1,h=ic((i<<2|3)+16|0)|0,(h|0)!=0):0){c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}else h=0;g=c[b+436>>2]|0;f=0;while(1){if((f|0)>=(g|0))break;c[h+(f<<2)>>2]=c[(c[b+444>>2]|0)+(f<<2)>>2];f=f+1|0}f=c[b+444>>2]|0;if(f|0){if(!((a[b+448>>0]&1)==0|(f|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+444>>2]=0}a[b+448>>0]=1;c[b+444>>2]=h;c[b+440>>2]=i}while(1){if((e|0)>=(i|0)){e=b+444|0;break a}c[(c[b+444>>2]|0)+(e<<2)>>2]=0;e=e+1|0}}while(0);c[b+436>>2]=i;f=c[e>>2]|0;e=0;while(1){if((e|0)>=(i|0))break;c[f+(e<<2)>>2]=c[(c[d+116>>2]|0)+(e<<2)>>2];e=e+1|0}Ni(b+452|0,d+124|0);Ni(b+472|0,d+144|0);return}function Wh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;kb[c[(c[b>>2]|0)+32>>2]&255](b);e=yb[c[(c[b>>2]|0)+16>>2]&63](b,104,1)|0;d=c[e+8>>2]|0;f=d;g=f+104|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));c[d+88>>2]=c[a+248>>2];c[d+92>>2]=c[a+252>>2];c[d+96>>2]=c[a+256>>2];c[d+100>>2]=c[a+260>>2];c[d>>2]=c[a+92>>2];c[d+4>>2]=c[a+96>>2];c[d+8>>2]=c[a+100>>2];c[d+12>>2]=c[a+104>>2];c[d+16>>2]=c[a+108>>2];c[d+20>>2]=c[a+116>>2];c[d+24>>2]=c[a+120>>2];c[d+28>>2]=c[a+124>>2];c[d+32>>2]=c[a+128>>2];c[d+36>>2]=c[a+132>>2];c[d+40>>2]=c[a+140>>2];c[d+44>>2]=c[a+144>>2];c[d+48>>2]=c[a+148>>2];c[d+52>>2]=c[a+152>>2];c[d+56>>2]=c[a+168>>2];c[d+60>>2]=c[a+172>>2];c[d+64>>2]=c[a+112>>2];c[d+68>>2]=c[a+156>>2];c[d+72>>2]=c[a+160>>2];c[d+76>>2]=c[a+164>>2];c[d+80>>2]=c[a+136>>2];ib[c[(c[b>>2]|0)+20>>2]&31](b,e,12394,1145853764,d);cd(a,b);aj(a,b);kb[c[(c[b>>2]|0)+36>>2]&255](b);return}function Xh(b,d){b=b|0;d=d|0;if((c[b+16>>2]|0)!=(0-(c[b+76>>2]|0)|0))return;d=c[b+4>>2]|0;if(d|0)hn(b+4|0,d);d=c[b+8>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+8>>2]=0;c[b+12>>2]=-1;d=c[b+36>>2]|0;if(d|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;c[b+20>>2]=0;d=c[b+64>>2]|0;if(d|0)hn(b+64|0,d);d=c[b+68>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+68>>2]=0;c[b+72>>2]=-1;d=c[b+96>>2]|0;if(d|0){if(a[b+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;c[b+80>>2]=0;a[b+193>>0]=0;a[b+194>>0]=1;c[b+144>>2]=0;c[b+164>>2]=0;c[b+148>>2]=1;c[b+152>>2]=0;c[b+156>>2]=10;c[b+160>>2]=1;c[b+124>>2]=0;c[b+124+4>>2]=0;c[b+124+8>>2]=0;c[b+168>>2]=0;c[b+168+4>>2]=0;c[b+168+8>>2]=0;c[b+168+12>>2]=0;c[b+168+16>>2]=0;c[b+168+20>>2]=0;return}function Yh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0;e=i;i=i+32|0;d=c[b+428>>2]|0;switch(c[a+428>>2]&48&d&63){case 32:{if((a|0)==(b|0)&(d&64|0)==0){i=e;return}g[e+4>>2]=1.0;c[e+8+4>>2]=0;c[e+8+4+4>>2]=0;c[e+8+4+8>>2]=0;c[e>>2]=3356;c[e+8>>2]=c[a+496>>2];d=c[a+192>>2]|0;f=+Cb[c[(c[d>>2]|0)+48>>2]&15](d);d=c[b+192>>2]|0;g[e+12>>2]=f+ +Cb[c[(c[d>>2]|0)+48>>2]&15](d);c[e+16>>2]=c[(+g[a+356>>2]<+g[b+356>>2]?a+356|0:b+356|0)>>2];c[e+24>>2]=a;c[e+28>>2]=b;Ge(c[a+1088>>2]|0,c[b+1088>>2]|0,e);i=e;return}case 16:{if((a|0)==(b|0)){i=e;return}c[e>>2]=3392;d=c[a+192>>2]|0;f=+Cb[c[(c[d>>2]|0)+48>>2]&15](d);d=c[b+192>>2]|0;g[e+12>>2]=f+ +Cb[c[(c[d>>2]|0)+48>>2]&15](d);c[e+4>>2]=a;c[e+8>>2]=b;Ge(c[a+968>>2]|0,c[b+1028>>2]|0,e);c[e+4>>2]=b;c[e+8>>2]=a;Ge(c[b+968>>2]|0,c[a+1028>>2]|0,e);i=e;return}default:{i=e;return}}}function Zh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0,k=0.0;j=i;i=i+32|0;c[j+16>>2]=c[d>>2];c[j+16+4>>2]=c[d+4>>2];c[j+16+8>>2]=c[d+8>>2];c[j+16+12>>2]=c[d+12>>2];f=+g[j+16>>2];h=+g[j+16+4>>2];e=+g[j+16+8>>2];if(f*f+h*h+e*e<1.4210854715202004e-014){c[j+16>>2]=-1082130432;c[j+16+4>>2]=-1082130432;c[j+16+8>>2]=-1082130432;g[j+16+12>>2]=0.0;f=-1.0;h=-1.0;e=-1.0}k=1.0/+G(+(f*f+h*h+e*e));g[j+16>>2]=f*k;g[j+16+4>>2]=h*k;g[j+16+8>>2]=e*k;sd(j,b,j+16|0);switch(c[b+4>>2]|0){case 8:{e=+g[b+32>>2]*+g[b+16>>2];break}case 0:{e=+g[b+48>>2];break}case 1:{e=+g[b+48>>2];break}case 13:{e=+g[b+48>>2];break}case 11:{e=+g[b+48>>2];break}case 10:{e=+g[b+48>>2];break}case 4:case 5:{e=+g[b+48>>2];break}default:e=+Cb[c[(c[b>>2]|0)+48>>2]&15](b)}h=e*+g[j+16+4>>2]+ +g[j+4>>2];k=e*+g[j+16+8>>2]+ +g[j+8>>2];g[a>>2]=e*+g[j+16>>2]+ +g[j>>2];g[a+4>>2]=h;g[a+8>>2]=k;g[a+12>>2]=0.0;i=j;return}function _h(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0,j=0.0,k=0,m=0,n=0,o=0.0;m=i;i=i+80|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;e=+g[d>>2];f=+g[d+4>>2];j=+g[d+8>>2];if(e*e+f*f+j*j<9.999999747378752e-005){k=1065353216;h=0;e=0.0;d=0}else{o=1.0/+G(+(e*e+f*f+j*j));k=(g[l>>2]=e*o,c[l>>2]|0);n=(g[l>>2]=f*o,c[l>>2]|0);h=(g[l>>2]=j*o,c[l>>2]|0);e=+g[d+12>>2];d=n}c[m+32>>2]=7744;n=m+32+4|0;c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;g[m+32+20>>2]=-999999984306749440.0;c[m+32+24>>2]=k;c[m+32+28>>2]=d;c[m+32+32>>2]=h;g[m+32+36>>2]=e;c[m+16>>2]=1566444395;c[m+16+4>>2]=1566444395;c[m+16+8>>2]=1566444395;g[m+16+12>>2]=0.0;b=c[b+96>>2]|0;k=c[(c[b>>2]|0)+8>>2]|0;g[m>>2]=-999999984306749440.0;g[m+4>>2]=-999999984306749440.0;g[m+8>>2]=-999999984306749440.0;g[m+12>>2]=0.0;Yb[k&127](b,m+32|0,m,m+16|0);c[a>>2]=c[n>>2];c[a+4>>2]=c[n+4>>2];c[a+8>>2]=c[n+8>>2];c[a+12>>2]=c[n+12>>2];i=m;return}function $h(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0,i=0.0,j=0.0,k=0.0,l=0,m=0.0;k=+g[b+64>>2]*.5;l=c[b+72>>2]|0;f=+g[d>>2];i=+g[d+4>>2];j=+g[d+8>>2];j=+G(+(f*f+i*i+j*j));e=c[b+68>>2]|0;do if(!(+g[d+(l<<2)>>2]>j*+g[b+56>>2])){f=+g[d+(e<<2)>>2];h=c[b+76>>2]|0;i=+g[d+(h<<2)>>2];j=+G(+(f*f+i*i));if(j>1.1920928955078125e-007){j=+g[b+60>>2]/j;g[a+(e<<2)>>2]=f*j;g[a+(l<<2)>>2]=-k;g[a+(h<<2)>>2]=i*j;break}else{g[a+(e<<2)>>2]=0.0;g[a+(l<<2)>>2]=-k;g[a+(h<<2)>>2]=0.0;break}}else{g[a+(e<<2)>>2]=0.0;g[a+(l<<2)>>2]=k;g[a+(c[b+76>>2]<<2)>>2]=0.0}while(0);if(!(+Cb[c[(c[b>>2]|0)+48>>2]&15](b)!=0.0))return;i=+g[d>>2];j=+g[d+4>>2];k=+g[d+8>>2];m=i*i+j*j+k*k<1.4210854715202004e-014?-1.0:i;f=i*i+j*j+k*k<1.4210854715202004e-014?-1.0:j;k=i*i+j*j+k*k<1.4210854715202004e-014?-1.0:k;j=1.0/+G(+(k*k+(m*m+f*f)));i=+Cb[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=+g[a>>2]+i*j*m;g[a+4>>2]=i*j*f+ +g[a+4>>2];g[a+8>>2]=i*j*k+ +g[a+8>>2];return}function ai(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;g=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b>>2]=g;if(g|0)mb[c[(c[d>>2]|0)+48>>2]&127](d,e);c[b+4>>2]=c[a+4>>2];c[b+28>>2]=c[a+32>>2];c[b+32>>2]=c[a+36>>2];c[b+36>>2]=c[a+40>>2];c[b+40>>2]=c[a+44>>2];c[b+12>>2]=c[a+16>>2];c[b+16>>2]=c[a+20>>2];c[b+20>>2]=c[a+24>>2];c[b+24>>2]=c[a+28>>2];c[b+44>>2]=c[a+48>>2];f=c[a+100>>2]|0;c[b+60>>2]=f;if(!f){c[b+52>>2]=0;c[b+56>>2]=0;return 16402}c[b+52>>2]=Jb[c[(c[d>>2]|0)+28>>2]&31](d,c[a+108>>2]|0)|0;c[b+56>>2]=0;g=yb[c[(c[d>>2]|0)+16>>2]&63](d,16,f)|0;if((f|0)>0){e=c[a+108>>2]|0;b=c[g+8>>2]|0;a=0;while(1){c[b>>2]=c[e+(a<<4)>>2];c[b+4>>2]=c[e+(a<<4)+4>>2];c[b+8>>2]=c[e+(a<<4)+8>>2];c[b+12>>2]=c[e+(a<<4)+12>>2];a=a+1|0;if((a|0)==(f|0))break;else b=b+16|0}}else e=c[a+108>>2]|0;ib[c[(c[d>>2]|0)+20>>2]&31](d,g,18816,1497453121,e);return 16402}function bi(a,b,d){a=a|0;b=b|0;d=d|0;c[a+300>>2]=c[b>>2];c[a+300+4>>2]=c[b+4>>2];c[a+300+8>>2]=c[b+8>>2];c[a+300+12>>2]=c[b+12>>2];c[a+316>>2]=c[b+16>>2];c[a+316+4>>2]=c[b+16+4>>2];c[a+316+8>>2]=c[b+16+8>>2];c[a+316+12>>2]=c[b+16+12>>2];c[a+332>>2]=c[b+32>>2];c[a+332+4>>2]=c[b+32+4>>2];c[a+332+8>>2]=c[b+32+8>>2];c[a+332+12>>2]=c[b+32+12>>2];c[a+348>>2]=c[b+48>>2];c[a+348+4>>2]=c[b+48+4>>2];c[a+348+8>>2]=c[b+48+8>>2];c[a+348+12>>2]=c[b+48+12>>2];c[a+364>>2]=c[d>>2];c[a+364+4>>2]=c[d+4>>2];c[a+364+8>>2]=c[d+8>>2];c[a+364+12>>2]=c[d+12>>2];c[a+380>>2]=c[d+16>>2];c[a+380+4>>2]=c[d+16+4>>2];c[a+380+8>>2]=c[d+16+8>>2];c[a+380+12>>2]=c[d+16+12>>2];c[a+396>>2]=c[d+32>>2];c[a+396+4>>2]=c[d+32+4>>2];c[a+396+8>>2]=c[d+32+8>>2];c[a+396+12>>2]=c[d+32+12>>2];c[a+412>>2]=c[d+48>>2];c[a+412+4>>2]=c[d+48+4>>2];c[a+412+8>>2]=c[d+48+8>>2];c[a+412+12>>2]=c[d+48+12>>2];kb[c[(c[a>>2]|0)+8>>2]&255](a);return}function ci(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0;n=c[a+4>>2]|0;a=c[a+64>>2]|0;do if(!n)if(!a){e=0.0;m=0.0;j=0.0;l=0.0;i=0.0;k=0.0;h=0.0;f=0.0}else{e=+g[a>>2];m=+g[a+12>>2];j=+g[a+16>>2];l=+g[a+20>>2];i=+g[a+24>>2];k=+g[a+28>>2];h=+g[a+4>>2];f=+g[a+8>>2]}else{e=+g[n>>2];if(!a){m=+g[n+12>>2];j=+g[n+16>>2];l=+g[n+20>>2];i=+g[n+24>>2];k=+g[n+28>>2];h=+g[n+4>>2];f=+g[n+8>>2];break}k=+g[a>>2];e=e<k?e:k;k=+g[n+16>>2];j=+g[a+16>>2];j=k>j?k:j;k=+g[n+4>>2];h=+g[a+4>>2];h=k<h?k:h;k=+g[n+20>>2];l=+g[a+20>>2];l=k>l?k:l;k=+g[n+8>>2];f=+g[a+8>>2];f=k<f?k:f;k=+g[n+24>>2];i=+g[a+24>>2];if(k>i){m=0.0;i=k;k=0.0}else{m=0.0;k=0.0}}while(0);g[b>>2]=e;g[b+4>>2]=h;g[b+8>>2]=f;g[b+12>>2]=m;g[d>>2]=j;g[d+4>>2]=l;g[d+8>>2]=i;g[d+12>>2]=k;return}function di(a){a=a|0;var b=0,d=0,e=0;Bd(a);if((ob[c[(c[a>>2]|0)+20>>2]&127](a)|0?(d=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0,(ob[c[(c[d>>2]|0)+56>>2]&127](d)|0)&6144|0):0)?(b=ob[c[(c[a>>2]|0)+104>>2]&127](a)|0,(b|0)>0):0)do{d=b;b=b+-1|0;e=Jb[c[(c[a>>2]|0)+108>>2]&31](a,b)|0;mb[c[(c[a>>2]|0)+168>>2]&127](a,e)}while((d|0)>1);if((((ob[c[(c[a>>2]|0)+20>>2]&127](a)|0?(e=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0,(ob[c[(c[e>>2]|0)+56>>2]&127](e)|0)&16387|0):0)?ob[c[(c[a>>2]|0)+20>>2]&127](a)|0:0)?(e=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0,ob[c[(c[e>>2]|0)+56>>2]&127](e)|0):0)?(c[a+280>>2]|0)>0:0){b=0;do{e=c[(c[a+288>>2]|0)+(b<<2)>>2]|0;mb[c[(c[e>>2]|0)+12>>2]&127](e,c[a+72>>2]|0);b=b+1|0}while((b|0)<(c[a+280>>2]|0))}if(!(ob[c[(c[a>>2]|0)+20>>2]&127](a)|0))return;e=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;kb[c[(c[e>>2]|0)+100>>2]&255](e);return}function ei(b,d,e,f){b=b|0;d=+d;e=e|0;f=+f;var h=0,i=0.0,j=0;if(e){g[b+268>>2]=f;i=+g[b+264>>2]+d;g[b+264>>2]=i;if(!(i>=f)){d=f;j=0}else{g[b+264>>2]=i-+(~~(i/f)|0)*f;d=f;j=~~(i/f)}}else{g[b+264>>2]=a[b+300>>0]|0?0.0:d;g[b+268>>2]=0.0;j=!(+F(+d)<1.1920928955078125e-007)&1;e=j}if(ob[c[(c[b>>2]|0)+20>>2]&127](b)|0){h=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;a[25816]=(ob[c[(c[h>>2]|0)+56>>2]&127](h)|0)>>>4&1}if(!j){kb[c[(c[b>>2]|0)+80>>2]&255](b);h=b;h=c[h>>2]|0;h=h+120|0;h=c[h>>2]|0;kb[h&255](b);return j|0}h=(j|0)>(e|0)?e:j;jb[c[(c[b>>2]|0)+164>>2]&31](b,d*+(h|0));kb[c[(c[b>>2]|0)+172>>2]&255](b);if((h|0)>0)e=0;else{h=b;h=c[h>>2]|0;h=h+120|0;h=c[h>>2]|0;kb[h&255](b);return j|0}do{jb[c[(c[b>>2]|0)+160>>2]&31](b,d);kb[c[(c[b>>2]|0)+80>>2]&255](b);e=e+1|0}while((e|0)<(h|0));e=b;h=c[e>>2]|0;h=h+120|0;h=c[h>>2]|0;kb[h&255](b);return j|0}function fi(a,b){a=a|0;b=b|0;var c=0,d=0.0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0;c=i;i=i+48|0;Jg(a+364|0,c+16|0);h=-+g[c+16>>2];e=-+g[c+16+4>>2];m=-+g[c+16+8>>2];l=+g[c+16+12>>2];f=+g[b>>2];n=+g[b+12>>2];k=+g[b+8>>2];j=+g[b+4>>2];Jg(a+300|0,c);p=+g[c>>2];q=+g[c+12>>2];d=+g[c+8>>2];o=+g[c+4>>2];g[c+32>>2]=(l*n-f*h-j*e-k*m)*p+(l*f+n*h+k*e-j*m)*q+(f*m+(n*e+l*j)-k*h)*d-(n*m+l*k+j*h-f*e)*o;g[c+32+4>>2]=p*(n*m+l*k+j*h-f*e)+(q*(f*m+(n*e+l*j)-k*h)+(l*n-f*h-j*e-k*m)*o)-(l*f+n*h+k*e-j*m)*d;g[c+32+8>>2]=(n*m+l*k+j*h-f*e)*q+(l*n-f*h-j*e-k*m)*d+(l*f+n*h+k*e-j*m)*o-p*(f*m+(n*e+l*j)-k*h);g[c+32+12>>2]=(l*n-f*h-j*e-k*m)*q-(l*f+n*h+k*e-j*m)*p-(f*m+(n*e+l*j)-k*h)*o-(n*m+l*k+j*h-f*e)*d;yd(a,c+32|0);i=c;return}function gi(b){b=b|0;var d=0;d=c[b>>2]|0;if(d|0)hn(b,d);d=c[b+4>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+4>>2]=0;c[b+8>>2]=-1;d=c[b+32>>2]|0;if(d|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;c[b+16>>2]=0;d=c[b+52>>2]|0;if(!d){a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;return}if(!(a[b+56>>0]|0)){a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;return}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);d=c[b+32>>2]|0;a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;if(!d){a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;return}if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+32>>2]=0;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;return}function hi(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;if(!e)e=c[b+188>>2]|0;j=c[d>>2]|0;f=c[b+308>>2]|0;a:do if((f|0)>0){h=c[b+316>>2]|0;g=0;while(1){if((c[h+(g<<2)>>2]|0)==(j|0))break;g=g+1|0;if((g|0)>=(f|0))break a}if((g|0)!=(f|0))return}while(0);if((f|0)==(c[b+312>>2]|0)?(i=f|0?f<<1:1,(f|0)<(i|0)):0){if(!i)h=0;else{c[6324]=(c[6324]|0)+1;f=ic((i<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=f;f=c[b+308>>2]|0}if((f|0)>0){g=0;do{c[h+(g<<2)>>2]=c[(c[b+316>>2]|0)+(g<<2)>>2];g=g+1|0}while((g|0)!=(f|0))}g=c[b+316>>2]|0;if(g){if(a[b+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0);f=c[b+308>>2]|0}c[b+316>>2]=0}a[b+320>>0]=1;c[b+316>>2]=h;c[b+312>>2]=i}c[(c[b+316>>2]|0)+(f<<2)>>2]=j;c[b+308>>2]=f+1;b=c[b+324>>2]|0;yb[c[(c[b>>2]|0)+8>>2]&63](b,e,d)|0;return}function ii(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0;c[b>>2]=Jb[c[(c[e>>2]|0)+28>>2]&31](e,c[a+28>>2]|0)|0;c[b+4>>2]=Jb[c[(c[e>>2]|0)+28>>2]&31](e,c[a+32>>2]|0)|0;f=Jb[c[(c[e>>2]|0)+40>>2]&31](e,a)|0;g=Jb[c[(c[e>>2]|0)+28>>2]&31](e,f)|0;c[b+8>>2]=g;if(g|0)mb[c[(c[e>>2]|0)+48>>2]&127](e,f);c[b+12>>2]=c[a+4>>2];c[b+24>>2]=d[a+21>>0];c[b+40>>2]=c[a+24>>2];c[b+44>>2]=c[a+16>>2];c[b+48>>2]=d[a+20>>0];c[b+20>>2]=c[a+12>>2];c[b+16>>2]=c[a+8>>2];c[b+28>>2]=c[a+36>>2];c[b+32>>2]=c[a+40>>2];c[b+36>>2]=0;f=c[a+28>>2]|0;if((c[f+528>>2]|0)>0){e=0;do{if((c[(c[f+536>>2]|0)+(e<<2)>>2]|0)==(a|0)){c[b+36>>2]=1;f=c[a+28>>2]|0}e=e+1|0}while((e|0)<(c[f+528>>2]|0))}f=c[a+32>>2]|0;if((c[f+528>>2]|0)>0)e=0;else return 12330;do{if((c[(c[f+536>>2]|0)+(e<<2)>>2]|0)==(a|0)){c[b+36>>2]=1;f=c[a+32>>2]|0}e=e+1|0}while((e|0)<(c[f+528>>2]|0));return 12330}function ji(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;if(ob[c[(c[d>>2]|0)+16>>2]&127](d)|0)return;i=c[b+752>>2]|0;h=ob[c[(c[d>>2]|0)+36>>2]&127](d)|0;if(ob[c[(c[d>>2]|0)+8>>2]&127](d)|0?(e=ob[c[(c[d>>2]|0)+20>>2]&127](d)|0,g=ob[c[(c[d>>2]|0)+24>>2]&127](d)|0,(i|0)>0):0){f=c[b+760>>2]|0;a=h+(e<<2)|0;e=0;while(1){k=c[f+(e*104|0)+12>>2]|0;j=c[f+(e*104|0)+16>>2]|0;c[a>>2]=c[f+(e*104|0)+8>>2];c[a+4>>2]=k;c[a+8>>2]=j;e=e+1|0;if((e|0)==(i|0))break;else a=a+(g<<2)|0}}if(!(ob[c[(c[d>>2]|0)+12>>2]&127](d)|0))return;a=ob[c[(c[d>>2]|0)+28>>2]&127](d)|0;g=ob[c[(c[d>>2]|0)+32>>2]&127](d)|0;if((i|0)<=0)return;f=c[b+760>>2]|0;a=h+(a<<2)|0;e=0;while(1){j=c[f+(e*104|0)+76>>2]|0;k=c[f+(e*104|0)+80>>2]|0;c[a>>2]=c[f+(e*104|0)+72>>2];c[a+4>>2]=j;c[a+8>>2]=k;e=e+1|0;if((e|0)==(i|0))break;else a=a+(g<<2)|0}return}function ki(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0,l=0,m=0.0,n=0,o=0.0,p=0.0,q=0;q=i;i=i+16|0;if((e|0)<=0){i=q;return}f=0;do{h=d+(f<<4)|0;j=+g[a+64>>2]*.5;k=c[a+72>>2]|0;m=+g[b+(f<<4)>>2];o=+g[b+(f<<4)+4>>2];p=+g[b+(f<<4)+8>>2];p=+G(+(m*m+o*o+p*p));l=c[a+68>>2]|0;do if(!(+g[b+(f<<4)+(k<<2)>>2]>p*+g[a+56>>2])){m=+g[b+(f<<4)+(l<<2)>>2];n=c[a+76>>2]|0;o=+g[b+(f<<4)+(n<<2)>>2];p=+G(+(m*m+o*o));if(p>1.1920928955078125e-007){p=+g[a+60>>2]/p;g[q+(l<<2)>>2]=m*p;g[q+(k<<2)>>2]=-j;g[q+(n<<2)>>2]=o*p;break}else{g[q+(l<<2)>>2]=0.0;g[q+(k<<2)>>2]=-j;g[q+(n<<2)>>2]=0.0;break}}else{g[q+(l<<2)>>2]=0.0;g[q+(k<<2)>>2]=j;g[q+(c[a+76>>2]<<2)>>2]=0.0}while(0);c[h>>2]=c[q>>2];c[h+4>>2]=c[q+4>>2];c[h+8>>2]=c[q+8>>2];c[h+12>>2]=c[q+12>>2];f=f+1|0}while((f|0)!=(e|0));i=q;return}function li(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;c[b>>2]=9428;d=c[b+56>>2]|0;if(d|0){if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;f=c[b+28>>2]|0;if((f|0)>0){d=0;do{g=c[b+36>>2]|0;h=g+(d*36|0)+4|0;i=g+(d*36|0)+12|0;j=c[i>>2]|0;e=g+(d*36|0)+16|0;if(j|0){if(a[e>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[i>>2]=0}a[e>>0]=1;c[i>>2]=0;c[h>>2]=0;c[g+(d*36|0)+8>>2]=0;d=d+1|0}while((d|0)!=(f|0))}d=c[b+36>>2]|0;if(d|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;d=c[b+16>>2]|0;if(!d){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}function mi(b){b=b|0;var d=0;c[b>>2]=8544;d=c[b+156>>2]|0;if(d|0){if(a[b+160>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+156>>2]=0}a[b+160>>0]=1;c[b+156>>2]=0;c[b+148>>2]=0;c[b+152>>2]=0;d=c[b+136>>2]|0;if(d|0){if(a[b+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;d=c[b+116>>2]|0;if(d|0){if(a[b+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=0;c[b+108>>2]=0;c[b+112>>2]=0;d=c[b+96>>2]|0;if(d|0){if(a[b+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;c[b>>2]=9444;d=c[b+32>>2]|0;if(!d){a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;b=b+28|0;c[b>>2]=0;return}if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+32>>2]=0;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;b=b+28|0;c[b>>2]=0;return}function ni(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;i=c[b+4>>2]|0;if((i|0)>=(d|0)){c[b+4>>2]=d;return}if((c[b+8>>2]|0)<(d|0)){if(!d){f=0;h=i}else{c[6324]=(c[6324]|0)+1;f=ic((d<<4|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[b+4>>2]|0}if((h|0)>0){g=0;do{j=c[b+12>>2]|0;c[f+(g<<4)>>2]=c[j+(g<<4)>>2];c[f+(g<<4)+4>>2]=c[j+(g<<4)+4>>2];c[f+(g<<4)+8>>2]=c[j+(g<<4)+8>>2];c[f+(g<<4)+12>>2]=c[j+(g<<4)+12>>2];g=g+1|0}while((g|0)!=(h|0))}g=c[b+12>>2]|0;if(g|0){if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=f;c[b+8>>2]=d;g=b+12|0}else g=b+12|0;f=i;do{j=c[g>>2]|0;c[j+(f<<4)>>2]=c[e>>2];c[j+(f<<4)+4>>2]=c[e+4>>2];c[j+(f<<4)+8>>2]=c[e+8>>2];c[j+(f<<4)+12>>2]=c[e+12>>2];f=f+1|0}while((f|0)!=(d|0));c[b+4>>2]=d;return}function oi(b){b=b|0;var d=0;c[b>>2]=8960;d=c[b+160>>2]|0;if(d|0){if(a[b+164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+160>>2]=0}a[b+164>>0]=1;c[b+160>>2]=0;c[b+152>>2]=0;c[b+156>>2]=0;d=c[b+136>>2]|0;if(d|0){if(a[b+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;d=c[b+116>>2]|0;if(d|0){if(a[b+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=0;c[b+108>>2]=0;c[b+112>>2]=0;d=c[b+96>>2]|0;if(d|0){if(a[b+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;d=c[b+76>>2]|0;if(!d){a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;b=b+72|0;c[b>>2]=0;return}if(a[b+80>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+76>>2]=0;a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;b=b+72|0;c[b>>2]=0;return}function pi(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;do if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)==(e|0)?(c[d+28>>2]|0)!=1:0)c[d+28>>2]=f}else{if((b|0)!=(c[d>>2]|0)){b=c[b+8>>2]|0;ib[c[(c[b>>2]|0)+24>>2]&31](b,d,e,f,g);break}if((c[d+16>>2]|0)!=(e|0)?(c[d+20>>2]|0)!=(e|0):0){c[d+32>>2]=f;if((c[d+44>>2]|0)==4)break;a[d+52>>0]=0;a[d+53>>0]=0;f=c[b+8>>2]|0;Ab[c[(c[f>>2]|0)+20>>2]&7](f,d,e,e,1,g);if(a[d+53>>0]|0)if(!(a[d+52>>0]|0)){b=1;f=13}else f=17;else{b=0;f=13}do if((f|0)==13){c[d+20>>2]=e;c[d+40>>2]=(c[d+40>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(b){f=17;break}else{b=4;break}}if(b)f=17;else b=4}while(0);if((f|0)==17)b=3;c[d+44>>2]=b;break}if((f|0)==1)c[d+32>>2]=1}while(0);return}function qi(b){b=b|0;var d=0;c[b>>2]=4952;d=c[b+136>>2]|0;if(d|0){if(a[b+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;d=c[b+76>>2]|0;if(d|0){if(a[b+80>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+76>>2]=0}a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;c[b+72>>2]=0;d=c[b+56>>2]|0;if(d|0){if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;d=c[b+36>>2]|0;if(d|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;d=c[b+16>>2]|0;if(!d){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}function ri(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0;o=(+g[a+36>>2]-+g[a+20>>2])*+g[a+112>>2]*.5;m=(+g[a+40>>2]-+g[a+24>>2])*+g[a+116>>2]*.5;k=(+g[a+44>>2]-+g[a+28>>2])*+g[a+120>>2]*.5;t=+F(+(+g[b>>2]));s=+F(+(+g[b+4>>2]));r=+F(+(+g[b+8>>2]));n=+F(+(+g[b+16>>2]));l=+F(+(+g[b+20>>2]));j=+F(+(+g[b+24>>2]));w=+F(+(+g[b+32>>2]));v=+F(+(+g[b+36>>2]));f=+F(+(+g[b+40>>2]));u=+g[b+48>>2];p=+g[b+52>>2];h=+g[b+56>>2];q=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);i=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);f=o*w+m*v+k*f+ +Cb[c[(c[a>>2]|0)+48>>2]&15](a);g[d>>2]=u-(o*t+m*s+k*r+q);g[d+4>>2]=p-(o*n+m*l+k*j+i);g[d+8>>2]=h-f;g[d+12>>2]=0.0;g[e>>2]=u+(o*t+m*s+k*r+q);g[e+4>>2]=p+(o*n+m*l+k*j+i);g[e+8>>2]=h+f;g[e+12>>2]=0.0;return}function si(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+64|0;b=c[b+36>>2]|0;e=c[(c[a+24>>2]|0)+28>>2]|0;c[d>>2]=c[e+(b*80|0)>>2];c[d+4>>2]=c[e+(b*80|0)+4>>2];c[d+8>>2]=c[e+(b*80|0)+8>>2];c[d+12>>2]=c[e+(b*80|0)+12>>2];c[d+16>>2]=c[e+(b*80|0)+16>>2];c[d+16+4>>2]=c[e+(b*80|0)+16+4>>2];c[d+16+8>>2]=c[e+(b*80|0)+16+8>>2];c[d+16+12>>2]=c[e+(b*80|0)+16+12>>2];c[d+32>>2]=c[e+(b*80|0)+32>>2];c[d+32+4>>2]=c[e+(b*80|0)+32+4>>2];c[d+32+8>>2]=c[e+(b*80|0)+32+8>>2];c[d+32+12>>2]=c[e+(b*80|0)+32+12>>2];c[d+48>>2]=c[e+(b*80|0)+48>>2];c[d+48+4>>2]=c[e+(b*80|0)+48+4>>2];c[d+48+8>>2]=c[e+(b*80|0)+48+8>>2];c[d+48+12>>2]=c[e+(b*80|0)+48+12>>2];Xf(a,b,d,c[e+(b*80|0)+64>>2]|0);i=d;return}function ti(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+32|0;e=c[a+28>>2]|0;c[k+16>>2]=e;e=(c[a+20>>2]|0)-e|0;c[k+16+4>>2]=e;c[k+16+8>>2]=b;c[k+16+12>>2]=d;f=2;e=e+d|0;j=k+16|0;while(1){c[k>>2]=c[a+60>>2];c[k+4>>2]=j;c[k+8>>2]=f;b=fb(146,k|0)|0;if(b>>>0>4294963200){c[6326]=0-b;b=-1}if((e|0)==(b|0)){b=5;break}if((b|0)<0){b=7;break}h=e-b|0;e=c[j+4>>2]|0;if(b>>>0<=e>>>0)if((f|0)==2){c[a+28>>2]=(c[a+28>>2]|0)+b;f=2;g=j}else g=j;else{g=c[a+44>>2]|0;c[a+28>>2]=g;c[a+20>>2]=g;b=b-e|0;f=f+-1|0;g=j+8|0;e=c[j+12>>2]|0}c[g>>2]=(c[g>>2]|0)+b;c[g+4>>2]=e-b;e=h;j=g}if((b|0)==5){j=c[a+44>>2]|0;c[a+16>>2]=j+(c[a+48>>2]|0);c[a+28>>2]=j;c[a+20>>2]=j}else if((b|0)==7){c[a+16>>2]=0;c[a+28>>2]=0;c[a+20>>2]=0;c[a>>2]=c[a>>2]|32;if((f|0)==2)d=0;else d=d-(c[j+4>>2]|0)|0}i=k;return d|0}function ui(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;e=c[b>>2]|0;if((e|0)==(c[a+80>>2]|0)){f=1.0;return +f}if(c[e+204>>2]&4|0){f=1.0;return +f}if((+g[a+28>>2]-+g[a+12>>2])*+g[b+8>>2]+(+g[a+32>>2]-+g[a+16>>2])*+g[b+12>>2]+(+g[a+36>>2]-+g[a+20>>2])*+g[b+16>>2]>=-+g[a+84>>2]){f=1.0;return +f}c[a+4>>2]=c[b+40>>2];c[a+76>>2]=e;if(d){c[a+44>>2]=c[b+8>>2];c[a+44+4>>2]=c[b+8+4>>2];c[a+44+8>>2]=c[b+8+8>>2];c[a+44+12>>2]=c[b+8+12>>2]}else{k=+g[b+8>>2];j=+g[b+12>>2];i=+g[b+16>>2];h=k*+g[e+20>>2]+j*+g[e+24>>2]+i*+g[e+28>>2];f=k*+g[e+36>>2]+j*+g[e+40>>2]+i*+g[e+44>>2];g[a+44>>2]=+g[e+4>>2]*k+ +g[e+8>>2]*j+ +g[e+12>>2]*i;g[a+48>>2]=h;g[a+52>>2]=f;g[a+56>>2]=0.0}c[a+60>>2]=c[b+24>>2];c[a+60+4>>2]=c[b+24+4>>2];c[a+60+8>>2]=c[b+24+8>>2];c[a+60+12>>2]=c[b+24+12>>2];k=+g[b+40>>2];return +k}function vi(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0;j=i;i=i+80|0;if((e|0)>0)f=0;else{i=j;return}do{g[d+(f<<4)+12>>2]=-999999984306749440.0;f=f+1|0}while((f|0)!=(e|0));h=j+32+4|0;f=0;do{k=b+(f<<4)|0;c[j+32>>2]=7744;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;g[j+32+20>>2]=-999999984306749440.0;c[j+32+24>>2]=c[k>>2];c[j+32+24+4>>2]=c[k+4>>2];c[j+32+24+8>>2]=c[k+8>>2];c[j+32+24+12>>2]=c[k+12>>2];c[j+16>>2]=1566444395;c[j+16+4>>2]=1566444395;c[j+16+8>>2]=1566444395;g[j+16+12>>2]=0.0;k=c[a+96>>2]|0;l=c[(c[k>>2]|0)+8>>2]|0;g[j>>2]=-999999984306749440.0;g[j+4>>2]=-999999984306749440.0;g[j+8>>2]=-999999984306749440.0;g[j+12>>2]=0.0;Yb[l&127](k,j+32|0,j,j+16|0);k=d+(f<<4)|0;c[k>>2]=c[h>>2];c[k+4>>2]=c[h+4>>2];c[k+8>>2]=c[h+8>>2];c[k+12>>2]=c[h+12>>2];f=f+1|0}while((f|0)<(e|0));i=j;return}function wi(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;f=c[b+100>>2]|0;if((f|0)==(c[b+104>>2]|0)?(i=f|0?f<<1:1,(f|0)<(i|0)):0){if(!i)h=0;else{c[6324]=(c[6324]|0)+1;f=ic((i<<4|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=f;f=c[b+100>>2]|0}if((f|0)>0){g=0;do{j=h+(g<<4)|0;k=(c[b+108>>2]|0)+(g<<4)|0;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];g=g+1|0}while((g|0)!=(f|0))}f=c[b+108>>2]|0;if(f|0){if(a[b+112>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+108>>2]=0}a[b+112>>0]=1;c[b+108>>2]=h;c[b+104>>2]=i;f=c[b+100>>2]|0}k=(c[b+108>>2]|0)+(f<<4)|0;c[k>>2]=c[d>>2];c[k+4>>2]=c[d+4>>2];c[k+8>>2]=c[d+8>>2];c[k+12>>2]=c[d+12>>2];c[b+100>>2]=(c[b+100>>2]|0)+1;if(!e)return;zj(b);return}function xi(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0;c[b+68>>2]=c[d>>2];c[b+68+4>>2]=c[d+4>>2];c[b+68+8>>2]=c[d+8>>2];c[b+68+12>>2]=c[d+12>>2];n=+g[b+68>>2];o=+g[b+72>>2];m=+g[b+76>>2];if(!(n*n+o*o+m*m>0.0)){g[b+20>>2]=0.0;return}k=+g[d>>2];l=+g[d+4>>2];e=+g[d+8>>2];f=1.0/+G(+(k*k+l*l+e*e));h=+g[b+256>>2];i=+g[b+260>>2];j=+g[b+264>>2];if(!(h*k*f+l*f*i+e*f*j!=0.0))return;p=+J(+(1.5707963705062866-+L(+(h*k*f+l*f*i+e*f*j))))*+G(+(n*n+o*o+m*m));g[b+68>>2]=n-h*p;g[b+72>>2]=o-i*p;g[b+76>>2]=m-j*p;g[b+20>>2]=(h*k*f+l*f*i+e*f*j<0.0?-1.0:1.0)*+G(+(j*p*j*p+(h*p*h*p+i*p*i*p)));if(!(h*k*f+l*f*i+e*f*j>0.0))return;a[b+249>>0]=1;d=(c[b+8>>2]|0)+52|0;c[b+116>>2]=c[d>>2];c[b+116+4>>2]=c[d+4>>2];c[b+116+8>>2]=c[d+8>>2];c[b+116+12>>2]=c[d+12>>2];return}function yi(b){b=b|0;var d=0,e=0,f=0,h=0;c[b+32>>2]=262144;d=c[b+4>>2]|0;if((d|0)<2383){if((c[b+8>>2]|0)<2383){c[6324]=(c[6324]|0)+1;e=ic(9551)|0;if(!e)h=0;else{c[(e+4+15&-16)+-4>>2]=e;h=e+4+15&-16}f=c[b+4>>2]|0;if((f|0)>0){e=0;do{c[h+(e<<2)>>2]=c[(c[b+12>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(f|0))}e=c[b+12>>2]|0;if(e|0){if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=h;c[b+8>>2]=2383;e=b+12|0}else e=b+12|0;do{c[(c[e>>2]|0)+(d<<2)>>2]=0;d=d+1|0}while((d|0)!=2383)}c[b+4>>2]=2383;e=0;do{h=(c[b+12>>2]|0)+(e<<2)|0;d=c[h>>2]|0;c[h>>2]=0;if(d|0)do{h=d;d=c[d+280>>2]|0;Rc(h)}while((d|0)!=0);e=e+1|0}while((e|0)!=2383);g[b+20>>2]=.25;c[b+24>>2]=0;c[b+28>>2]=0;c[b+36>>2]=1;c[b+40>>2]=1;return}function zi(b){b=b|0;var d=0;if(!(a[22048]|0)){a[22048]=1;if(!(a[21984]|0)){a[21984]=1;if(!(a[21992]|0)){a[21992]=1;c[5577]=1065353216;c[5578]=0;c[5579]=0;c[5580]=0;c[5581]=0;c[5582]=1065353216;c[5583]=0;c[5584]=0;c[5585]=0;c[5586]=0;c[5587]=1065353216;g[5588]=0.0}c[5561]=c[5577];c[5562]=c[5578];c[5563]=c[5579];c[5564]=c[5580];c[5565]=c[5581];c[5566]=c[5582];c[5567]=c[5583];c[5568]=c[5584];c[5569]=c[5585];c[5570]=c[5586];c[5571]=c[5587];c[5572]=c[5588];c[5573]=0;c[5574]=0;c[5575]=0;c[5576]=0}c[5655]=c[5561];c[5656]=c[5562];c[5657]=c[5563];c[5658]=c[5564];c[5659]=c[5565];c[5660]=c[5566];c[5661]=c[5567];c[5662]=c[5568];c[5663]=c[5569];c[5664]=c[5570];c[5665]=c[5571];c[5666]=c[5572];c[5667]=c[5573];c[5668]=c[5574];c[5669]=c[5575];c[5670]=c[5576]}d=c[b+8>>2]|0;if(!d){d=c[b>>2]|0;return ((d|0)==0?22620:d+60|0)|0}else return d+4|0;return 0}function Ai(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,i=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0,s=0.0,t=0;if((e|0)>0)f=0;else return;do{g[d+(f<<4)+12>>2]=-999999984306749440.0;f=f+1|0}while((f|0)!=(e|0));i=0;do{k=+g[a+16>>2];l=+g[b+(i<<4)>>2]*k;m=+g[a+20>>2];n=+g[b+(i<<4)+4>>2]*m;o=+g[a+24>>2];p=+g[b+(i<<4)+8>>2]*o;q=c[a+100>>2]|0;if((q|0)>0){r=c[a+108>>2]|0;f=-1;h=0;j=-34028234663852886.0e22;do{s=l*+g[r+(h<<4)>>2]+n*+g[r+(h<<4)+4>>2]+p*+g[r+(h<<4)+8>>2];t=s>j;f=t?h:f;j=t?s:j;h=h+1|0}while((h|0)!=(q|0));p=+g[r+(f<<4)+4>>2]*m;s=+g[r+(f<<4)+8>>2]*o;g[d+(i<<4)>>2]=+g[r+(f<<4)>>2]*k;g[d+(i<<4)+4>>2]=p;g[d+(i<<4)+8>>2]=s;g[d+(i<<4)+12>>2]=j}else g[d+(i<<4)+12>>2]=-999999984306749440.0;i=i+1|0}while((i|0)!=(e|0));return}function Bi(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;i=i+96|0;b=c[b>>2]|0;if((b|0)==(c[a+4>>2]|0)){i=d;return 1}e=c[a+12>>2]|0;if(!(Jb[c[(c[e>>2]|0)+8>>2]&31](e,c[b+188>>2]|0)|0)){i=d;return 1}e=c[a+4>>2]|0;f=c[e+192>>2]|0;c[d+64>>2]=0;c[d+64+4>>2]=f;c[d+64+8>>2]=e;c[d+64+12>>2]=e+4;c[d+64+16>>2]=-1;c[d+64+20>>2]=-1;e=c[b+192>>2]|0;c[d+40>>2]=0;c[d+40+4>>2]=e;c[d+40+8>>2]=b;c[d+40+12>>2]=b+4;c[d+40+16>>2]=-1;c[d+40+20>>2]=-1;b=c[(c[a+8>>2]|0)+24>>2]|0;b=sb[c[(c[b>>2]|0)+8>>2]&31](b,d+64|0,d+40|0,0)|0;if(b|0){f=c[a+12>>2]|0;c[d+4>>2]=0;c[d+8>>2]=d+64;c[d+12>>2]=d+40;c[d>>2]=6008;c[d+32>>2]=f;ib[c[(c[b>>2]|0)+8>>2]&31](b,d+64|0,d+40|0,(c[a+8>>2]|0)+28|0,d);kb[c[c[b>>2]>>2]&255](b);f=c[(c[a+8>>2]|0)+24>>2]|0;mb[c[(c[f>>2]|0)+60>>2]&127](f,b)}i=d;return 1}function Ci(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,h=0,j=0,k=0,l=0;l=i;i=i+80|0;j=c[c[a>>2]>>2]|0;h=c[c[a+4>>2]>>2]|0;if(!(yb[c[(c[b>>2]|0)+24>>2]&63](b,j,h)|0)){i=l;return}f=c[j+192>>2]|0;c[l+56>>2]=0;c[l+56+4>>2]=f;c[l+56+8>>2]=j;c[l+56+12>>2]=j+4;c[l+56+16>>2]=-1;c[l+56+20>>2]=-1;f=c[h+192>>2]|0;c[l+32>>2]=0;c[l+32+4>>2]=f;c[l+32+8>>2]=h;c[l+32+12>>2]=h+4;c[l+32+16>>2]=-1;c[l+32+20>>2]=-1;f=c[a+8>>2]|0;if(!f){f=sb[c[(c[b>>2]|0)+8>>2]&31](b,l+56|0,l+32|0,0)|0;c[a+8>>2]=f;if(f|0)k=4}else k=4;if((k|0)==4){c[l>>2]=6384;c[l+4>>2]=0;c[l+8>>2]=l+56;c[l+12>>2]=l+32;if((c[d+8>>2]|0)!=1){e=+wb[c[(c[f>>2]|0)+12>>2]&15](f,j,h,d,l);if(+g[d+12>>2]>e)g[d+12>>2]=e}else ib[c[(c[f>>2]|0)+8>>2]&31](f,l+56|0,l+32|0,d,l)}i=l;return}function Di(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;i=c[d+4>>2]|0;f=c[b+24>>2]|0;if((f|0)<(i|0)){if((c[b+28>>2]|0)<(i|0)){if(!i){e=0;h=f}else{c[6324]=(c[6324]|0)+1;e=ic((i<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}h=c[b+24>>2]|0}if((h|0)>0){g=0;do{c[e+(g<<2)>>2]=c[(c[b+32>>2]|0)+(g<<2)>>2];g=g+1|0}while((g|0)!=(h|0))}g=c[b+32>>2]|0;if(g|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=e;c[b+28>>2]=i;e=b+32|0}else e=b+32|0;do{c[(c[e>>2]|0)+(f<<2)>>2]=0;f=f+1|0}while((f|0)!=(i|0))}else e=b+32|0;c[b+24>>2]=i;f=c[e>>2]|0;if((i|0)<=0)return;e=0;do{c[f+(e<<2)>>2]=c[(c[d+12>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(i|0));return}function Ei(a,b,d){a=a|0;b=b|0;d=d|0;do if(!((b|0)==32&(d|0)==32)){if((b|0)==32){if((d|0)<20){a=a+96|0;break}if((d+-21|0)>>>0<9){a=a+104|0;break}}else{if((b|0)<20&(d|0)==32){a=a+100|0;break}if((b+-21|0)>>>0<9&(d|0)==32){a=a+108|0;break}if((b|0)==8&(d|0)==8){a=a+60|0;break}if((b|0)==8&(d|0)==1){a=a+76|0;break}if((b|0)==1&(d|0)==8){a=a+80|0;break}}if(!(d|b)){a=a+72|0;break}if((b|0)<20&(d|0)==28){a=a+88|0;break}if((b|0)==28&(d|0)<20){a=a+84|0;break}if((b|0)<20){if((d|0)<20){a=a+32|0;break}if((d+-21|0)>>>0<9){a=a+36|0;break}}else{if((d|0)<20&(b+-21|0)>>>0<9){a=a+40|0;break}if((b|0)==31)if((d|0)==31){a=a+48|0;break}else{a=a+44|0;break}}if((d|0)==31){a=a+52|0;break}else{a=a+56|0;break}}else a=a+92|0;while(0);return c[a>>2]|0}function Fi(b){b=b|0;var d=0,e=0,f=0;c[b>>2]=9044;e=c[b+52>>2]|0;if((e|0)>0){d=0;do{f=c[(c[b+60>>2]|0)+(d<<2)>>2]|0;if(f|0){kb[c[c[f>>2]>>2]&255](f);f=c[b+4>>2]|0;mb[c[(c[f>>2]|0)+60>>2]&127](f,c[(c[b+60>>2]|0)+(d<<2)>>2]|0)}d=d+1|0}while((d|0)!=(e|0))}d=c[b+60>>2]|0;if(d|0){if(a[b+64>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=0;c[b+52>>2]=0;c[b+56>>2]=0;d=c[b+40>>2]|0;if(d|0){if(a[b+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;c[b+36>>2]=0;d=c[b+20>>2]|0;if(!d){a[b+24>>0]=1;c[b+20>>2]=0;c[b+12>>2]=0;b=b+16|0;c[b>>2]=0;return}if(a[b+24>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+20>>2]=0;a[b+24>>0]=1;c[b+20>>2]=0;c[b+12>>2]=0;b=b+16|0;c[b>>2]=0;return}function Gi(a,b,c,d,e,f,h,i,j,k,l){a=a|0;b=b|0;c=+c;d=+d;e=+e;f=+f;h=+h;i=+i;j=j|0;k=k|0;l=+l;var m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0;x=+g[a>>2]*f+ +g[a+16>>2]*h+ +g[a+32>>2]*i;v=+g[a+4>>2]*f+ +g[a+20>>2]*h+ +g[a+36>>2]*i;t=+g[a+8>>2]*f+ +g[a+24>>2]*h+ +g[a+40>>2]*i;s=+g[b>>2]*f+ +g[b+16>>2]*h+ +g[b+32>>2]*i;q=+g[b+4>>2]*f+ +g[b+20>>2]*h+ +g[b+36>>2]*i;o=+g[b+8>>2]*f+ +g[b+24>>2]*h+ +g[b+40>>2]*i;w=+g[j+80>>2];u=+g[j+84>>2];p=+g[j+88>>2];r=+g[k+80>>2];m=+g[k+84>>2];n=+g[k+88>>2];p=x*(x<0.0?-w:w)+v*(v<0.0?-u:u)+t*(t<0.0?-p:p);n=s*(s<0.0?-r:r)+q*(q<0.0?-m:m)+o*(o<0.0?-n:n);o=+g[j+96>>2];m=+g[k+96>>2];m=(p>o?p:o)+(n>m?n:m);return !((c*f+d*h+e*i+m<m-(c*f+d*h+e*i)?c*f+d*h+e*i+m:m-(c*f+d*h+e*i))>l)|0}function Hi(b){b=b|0;var d=0,e=0,f=0,g=0;c[b>>2]=5384;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+24>>2]=0;a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;c[b+36>>2]=0;a[b+64>>0]=1;c[b+60>>2]=0;c[b+52>>2]=0;c[b+56>>2]=0;c[b+68>>2]=0;c[6324]=(c[6324]|0)+1;d=ic(51)|0;if(!d)f=0;else{c[(d+4+15&-16)+-4>>2]=d;f=d+4+15&-16}e=c[b+8>>2]|0;if((e|0)>0){d=0;do{g=c[b+16>>2]|0;c[f+(d<<4)>>2]=c[g+(d<<4)>>2];c[f+(d<<4)+4>>2]=c[g+(d<<4)+4>>2];c[f+(d<<4)+8>>2]=c[g+(d<<4)+8>>2];c[f+(d<<4)+12>>2]=c[g+(d<<4)+12>>2];d=d+1|0}while((d|0)!=(e|0))}d=c[b+16>>2]|0;if(!d){a[b+20>>0]=1;c[b+16>>2]=f;c[b+12>>2]=2;tf(b);return}if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=f;c[b+12>>2]=2;tf(b);return}function Ii(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=c[d>>2]|0;d=c[b+308>>2]|0;a:do if((d|0)>0){f=c[b+316>>2]|0;e=0;while(1){if((c[f+(e<<2)>>2]|0)==(g|0))break;e=e+1|0;if((e|0)>=(d|0))break a}if((e|0)!=(d|0))return}while(0);if((d|0)==(c[b+312>>2]|0)?(h=d|0?d<<1:1,(d|0)<(h|0)):0){if(!h)f=0;else{c[6324]=(c[6324]|0)+1;d=ic((h<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}f=d;d=c[b+308>>2]|0}if((d|0)>0){e=0;do{c[f+(e<<2)>>2]=c[(c[b+316>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(d|0))}e=c[b+316>>2]|0;if(e){if(a[b+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);d=c[b+308>>2]|0}c[b+316>>2]=0}a[b+320>>0]=1;c[b+316>>2]=f;c[b+312>>2]=h}c[(c[b+316>>2]|0)+(d<<2)>>2]=g;c[b+308>>2]=d+1;return}function Ji(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;f=c[a+232>>2]|0;a:do if((f|0)>0){g=c[a+240>>2]|0;d=0;while(1){e=g+(d<<2)|0;if((c[e>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(f|0))break a}if((d|0)<(f|0)){c[e>>2]=c[g+(f+-1<<2)>>2];c[(c[a+240>>2]|0)+(f+-1<<2)>>2]=b;c[a+232>>2]=f+-1}}while(0);d=c[b+188>>2]|0;if(d|0){g=c[a+68>>2]|0;g=ob[c[(c[g>>2]|0)+36>>2]&127](g)|0;Ub[c[(c[g>>2]|0)+40>>2]&127](g,d,c[a+24>>2]|0);g=c[a+68>>2]|0;Ub[c[(c[g>>2]|0)+12>>2]&127](g,d,c[a+24>>2]|0);c[b+188>>2]=0}f=c[a+8>>2]|0;if((f|0)<=0)return;g=c[a+16>>2]|0;d=0;while(1){e=g+(d<<2)|0;if((c[e>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(f|0)){h=15;break}}if((h|0)==15)return;if((d|0)>=(f|0))return;c[e>>2]=c[g+(f+-1<<2)>>2];c[(c[a+16>>2]|0)+(f+-1<<2)>>2]=b;c[a+8>>2]=f+-1;return}function Ki(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;f=c[a+328>>2]|0;a:do if((f|0)>0){g=c[a+336>>2]|0;d=0;while(1){e=g+(d<<2)|0;if((c[e>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(f|0))break a}if((d|0)<(f|0)){c[e>>2]=c[g+(f+-1<<2)>>2];c[(c[a+336>>2]|0)+(f+-1<<2)>>2]=b;c[a+328>>2]=f+-1}}while(0);d=c[b+188>>2]|0;if(d|0){g=c[a+68>>2]|0;g=ob[c[(c[g>>2]|0)+36>>2]&127](g)|0;Ub[c[(c[g>>2]|0)+40>>2]&127](g,d,c[a+24>>2]|0);g=c[a+68>>2]|0;Ub[c[(c[g>>2]|0)+12>>2]&127](g,d,c[a+24>>2]|0);c[b+188>>2]=0}f=c[a+8>>2]|0;if((f|0)<=0)return;g=c[a+16>>2]|0;d=0;while(1){e=g+(d<<2)|0;if((c[e>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(f|0)){h=15;break}}if((h|0)==15)return;if((d|0)>=(f|0))return;c[e>>2]=c[g+(f+-1<<2)>>2];c[(c[a+16>>2]|0)+(f+-1<<2)>>2]=b;c[a+8>>2]=f+-1;return}function Li(b,d,e,f){b=+b;d=d|0;e=e|0;f=f|0;var h=0;while(1){h=ic(144)|0;if(h|0)break;h=c[6453]|0;c[6453]=h+0;if(!h){h=0;break}Vb[h&3]()}g[h>>2]=b;c[h+4>>2]=d;c[h+72>>2]=e;e=h+76|0;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];g[h+92>>2]=0.0;g[h+96>>2]=0.0;g[h+100>>2]=.5;g[h+104>>2]=0.0;g[h+108>>2]=0.0;g[h+112>>2]=0.0;g[h+116>>2]=.800000011920929;g[h+120>>2]=1.0;a[h+124>>0]=0;g[h+128>>2]=.004999999888241291;g[h+132>>2]=.009999999776482582;g[h+136>>2]=.009999999776482582;g[h+140>>2]=.009999999776482582;c[h+8>>2]=1065353216;f=h+12|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[h+28>>2]=1065353216;f=h+32|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[h+48>>2]=1065353216;f=h+52|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;return h|0}function Mi(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=c[d+4>>2]|0;e=c[b+912>>2]|0;a:do if((e|0)>(i|0))e=b+920|0;else{if((e|0)<(i|0)?(c[b+916>>2]|0)<(i|0):0){if((i|0)!=0?(c[6324]=(c[6324]|0)+1,f=ic((i<<2|3)+16|0)|0,(f|0)!=0):0){c[(f+4+15&-16)+-4>>2]=f;h=f+4+15&-16}else h=0;g=c[b+912>>2]|0;f=0;while(1){if((f|0)>=(g|0))break;c[h+(f<<2)>>2]=c[(c[b+920>>2]|0)+(f<<2)>>2];f=f+1|0}f=c[b+920>>2]|0;if(f|0){if(!((a[b+924>>0]&1)==0|(f|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+920>>2]=0}a[b+924>>0]=1;c[b+920>>2]=h;c[b+916>>2]=i}while(1){if((e|0)>=(i|0)){e=b+920|0;break a}c[(c[b+920>>2]|0)+(e<<2)>>2]=0;e=e+1|0}}while(0);c[b+912>>2]=i;f=c[e>>2]|0;e=0;while(1){if((e|0)>=(i|0))break;c[f+(e<<2)>>2]=c[(c[d+12>>2]|0)+(e<<2)>>2];e=e+1|0}return}function Ni(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=c[d+4>>2]|0;e=c[b+4>>2]|0;a:do if((e|0)>(i|0))e=b+12|0;else{if((e|0)<(i|0)?(c[b+8>>2]|0)<(i|0):0){if((i|0)!=0?(c[6324]=(c[6324]|0)+1,f=ic((i<<2|3)+16|0)|0,(f|0)!=0):0){c[(f+4+15&-16)+-4>>2]=f;h=f+4+15&-16}else h=0;g=c[b+4>>2]|0;f=0;while(1){if((f|0)>=(g|0))break;c[h+(f<<2)>>2]=c[(c[b+12>>2]|0)+(f<<2)>>2];f=f+1|0}f=c[b+12>>2]|0;if(f|0){if(!((a[b+16>>0]&1)==0|(f|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=h;c[b+8>>2]=i}while(1){if((e|0)>=(i|0)){e=b+12|0;break a}c[(c[b+12>>2]|0)+(e<<2)>>2]=0;e=e+1|0}}while(0);c[b+4>>2]=i;f=c[e>>2]|0;e=0;while(1){if((e|0)>=(i|0))break;c[f+(e<<2)>>2]=c[(c[d+12>>2]|0)+(e<<2)>>2];e=e+1|0}return}function Oi(b){b=b|0;var d=0,e=0;d=c[b+92>>2]|0;if(d|0){if(a[b+96>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+92>>2]=0}a[b+96>>0]=1;c[b+92>>2]=0;c[b+84>>2]=0;c[b+88>>2]=0;d=c[b+64>>2]|0;if(d|0)do{c[b+64>>2]=c[d+8>>2];e=c[d>>2]|0;if(e|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);d=c[b+64>>2]|0}while((d|0)!=0);d=c[b+48>>2]|0;if(d|0)do{c[b+48>>2]=c[d+8>>2];e=c[d>>2]|0;if(e|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);d=c[b+48>>2]|0}while((d|0)!=0);d=c[b+32>>2]|0;if(!d)return;do{c[b+32>>2]=c[d+8>>2];e=c[d>>2]|0;if(e|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);d=c[b+32>>2]|0}while((d|0)!=0);return}function Pi(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;i=c[d>>2]|0;i=Jb[c[(c[i>>2]|0)+56>>2]&31](i,28)|0;j=(a[b+4>>0]|0)==0;h=c[b+8>>2]|0;g=c[b+12>>2]|0;b=c[d>>2]|0;c[i+4>>2]=b;c[i>>2]=9372;a[i+8>>0]=0;c[i+12>>2]=0;if(j){a[i+16>>0]=0;c[i+20>>2]=h;c[i+24>>2]=g;if(!(yb[c[(c[b>>2]|0)+24>>2]&63](b,c[e+8>>2]|0,c[f+8>>2]|0)|0))return i|0;j=c[i+4>>2]|0;c[i+12>>2]=yb[c[(c[j>>2]|0)+12>>2]&63](j,c[e+8>>2]|0,c[f+8>>2]|0)|0;a[i+8>>0]=1;return i|0}else{a[i+16>>0]=1;c[i+20>>2]=h;c[i+24>>2]=g;if(!(yb[c[(c[b>>2]|0)+24>>2]&63](b,c[f+8>>2]|0,c[e+8>>2]|0)|0))return i|0;j=c[i+4>>2]|0;c[i+12>>2]=yb[c[(c[j>>2]|0)+12>>2]&63](j,c[f+8>>2]|0,c[e+8>>2]|0)|0;a[i+8>>0]=1;return i|0}return 0}function Qi(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;c[a+4>>2]=c[b+40>>2];e=c[b>>2]|0;c[a+76>>2]=e;if(d){c[a+44>>2]=c[b+8>>2];c[a+44+4>>2]=c[b+8+4>>2];c[a+44+8>>2]=c[b+8+8>>2];c[a+44+12>>2]=c[b+8+12>>2];e=a+60|0;d=b+24|0;c[e>>2]=c[d>>2];c[e+4>>2]=c[d+4>>2];c[e+8>>2]=c[d+8>>2];c[e+12>>2]=c[d+12>>2];f=+g[b+40>>2];return +f}else{k=+g[b+8>>2];j=+g[b+12>>2];i=+g[b+16>>2];h=+g[e+20>>2]*k+ +g[e+24>>2]*j+ +g[e+28>>2]*i;f=+g[e+36>>2]*k+ +g[e+40>>2]*j+ +g[e+44>>2]*i;g[a+44>>2]=+g[e+4>>2]*k+ +g[e+8>>2]*j+ +g[e+12>>2]*i;g[a+48>>2]=h;g[a+52>>2]=f;g[a+56>>2]=0.0;e=a+60|0;d=b+24|0;c[e>>2]=c[d>>2];c[e+4>>2]=c[d+4>>2];c[e+8>>2]=c[d+8>>2];c[e+12>>2]=c[d+12>>2];f=+g[b+40>>2];return +f}return 0.0}function Ri(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0.0,l=0,m=0;f=i;i=i+48|0;if((c[b+128>>2]|0)<=0){i=f;return}e=0;do{m=c[b+136>>2]|0;c[f+32>>2]=(a[m+(e*284|0)+84>>0]|0)==0?1065353216:0;c[f+32+4>>2]=0;c[f+32+8>>2]=1065353216;g[f+32+12>>2]=0.0;l=m+(e*284|0)+140|0;c[f+16>>2]=c[l>>2];c[f+16+4>>2]=c[l+4>>2];c[f+16+8>>2]=c[l+8>>2];c[f+16+12>>2]=c[l+12>>2];l=c[b+112>>2]|0;h=c[(c[d>>2]|0)+16>>2]|0;k=+g[m+(e*284|0)+108+(l<<2)>>2]+ +g[f+16+4>>2];j=+g[m+(e*284|0)+124+(l<<2)>>2]+ +g[f+16+8>>2];g[f>>2]=+g[m+(e*284|0)+92+(l<<2)>>2]+ +g[f+16>>2];g[f+4>>2]=k;g[f+8>>2]=j;g[f+12>>2]=0.0;Yb[h&127](d,f+16|0,f,f+32|0);Yb[c[(c[d>>2]|0)+16>>2]&127](d,f+16|0,(c[b+136>>2]|0)+(e*284|0)+16|0,f+32|0);e=e+1|0}while((e|0)<(c[b+128>>2]|0));i=f;return}function Si(d,e,f,g,h,i){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,l=0,m=0;if((d|0)==(c[e+8>>2]|0))gl(e,f,g,h);else{k=b[e+52>>1]|0;l=c[d+12>>2]|0;a[e+52>>0]=0;a[e+53>>0]=0;wn(d+16|0,e,f,g,h,i);a:do if((l|0)>1){j=d+24|0;do{if(a[e+54>>0]|0)break a;m=b[e+52>>1]|0;if(!((m&255)<<24>>24)){if((m&65535)>=256?(c[d+8>>2]&1|0)==0:0)break a}else{if((c[e+24>>2]|0)==1)break a;if(!(c[d+8>>2]&2))break a}a[e+52>>0]=0;a[e+53>>0]=0;wn(j,e,f,g,h,i);j=j+8|0}while(j>>>0<(d+16+(l<<3)|0)>>>0)}while(0);a[e+52>>0]=k;a[e+53>>0]=(k&65535)>>>8}return}function Ti(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;switch(b|0){case 2:{if((e|0)<1){g[a+232>>2]=d;c[a+300>>2]=c[a+300>>2]|512;return}if((e|0)<3){g[a+264>>2]=d;c[a+300>>2]=c[a+300>>2]|32;return}if((e|0)==3){g[a+248>>2]=d;c[a+300>>2]=c[a+300>>2]|2048;return}if((e|0)>=6)return;g[a+280>>2]=d;c[a+300>>2]=c[a+300>>2]|128;return}case 3:{if((e|0)<1){g[a+212>>2]=d;c[a+300>>2]=c[a+300>>2]|1;return}if((e|0)!=3)return;g[a+228>>2]=d;c[a+300>>2]=c[a+300>>2]|4;return}case 4:{if((e|0)<1){g[a+244>>2]=d;c[a+300>>2]=c[a+300>>2]|256;return}if((e|0)<3){g[a+276>>2]=d;c[a+300>>2]=c[a+300>>2]|16;return}if((e|0)==3){g[a+260>>2]=d;c[a+300>>2]=c[a+300>>2]|1024;return}if((e|0)>=6)return;g[a+292>>2]=d;c[a+300>>2]=c[a+300>>2]|64;return}default:return}}function Ui(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0;e=i;i=i+96|0;c[e+32>>2]=1065353216;c[e+32+4>>2]=0;c[e+32+4+4>>2]=0;c[e+32+4+8>>2]=0;c[e+32+4+12>>2]=0;c[e+32+20>>2]=1065353216;c[e+32+24>>2]=0;c[e+32+24+4>>2]=0;c[e+32+24+8>>2]=0;c[e+32+24+12>>2]=0;c[e+32+40>>2]=1065353216;l=e+32+44|0;c[l>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[l+16>>2]=0;Yb[c[(c[a>>2]|0)+8>>2]&127](a,e+32|0,e+16|0,e);j=(+g[e>>2]-+g[e+16>>2])*.5;h=(+g[e+4>>2]-+g[e+16+4>>2])*.5;k=(+g[e+8>>2]-+g[e+16+8>>2])*.5;f=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);g[d>>2]=b*.0833333283662796*((h+f)*2.0*(h+f)*2.0+(k+f)*2.0*(k+f)*2.0);g[d+4>>2]=b*.0833333283662796*((j+f)*2.0*(j+f)*2.0+(k+f)*2.0*(k+f)*2.0);g[d+8>>2]=b*.0833333283662796*((j+f)*2.0*(j+f)*2.0+(h+f)*2.0*(h+f)*2.0);g[d+12>>2]=0.0;i=e;return}function Vi(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;f=i;i=i+240|0;c[f+80>>2]=d;d=f+96|0;e=d+40|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(e|0));c[f+136>>2]=c[f+80>>2];if((lc(0,b,f+136|0,f,f+96|0)|0)>=0){e=c[2377]|0;if((a[9582]|0)<1)c[2377]=e&-33;if(!(c[2389]|0)){d=c[2388]|0;c[2388]=f+152;c[2384]=f+152;c[2382]=f+152;c[2389]=80;c[2381]=f+152+80;lc(9508,b,f+136|0,f,f+96|0)|0;if(d|0){yb[c[9544>>2]&63](9508,0,0)|0;c[2388]=d;c[2389]=0;c[2381]=0;c[2384]=0;c[2382]=0}}else lc(9508,b,f+136|0,f,f+96|0)|0;c[2377]=c[2377]|e&32}d=(a[9583]|0)==10;do if((c[2396]|0)<0){if(!d?(g=c[2382]|0,g>>>0<(c[2381]|0)>>>0):0){c[2382]=g+1;a[g>>0]=10;break}Bm()|0}else{if(!d?(h=c[2382]|0,h>>>0<(c[2381]|0)>>>0):0){c[2382]=h+1;a[h>>0]=10;break}Bm()|0}while(0);Ua()}function Wi(b,d,e){b=+b;d=d|0;e=e|0;var f=0;while(1){f=ic(144)|0;if(f|0)break;f=c[6453]|0;c[6453]=f+0;if(!f){f=0;break}Vb[f&3]()}g[f>>2]=b;c[f+4>>2]=d;c[f+72>>2]=e;e=f+76|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;g[f+100>>2]=.5;g[f+104>>2]=0.0;g[f+108>>2]=0.0;g[f+112>>2]=0.0;g[f+116>>2]=.800000011920929;g[f+120>>2]=1.0;a[f+124>>0]=0;g[f+128>>2]=.004999999888241291;g[f+132>>2]=.009999999776482582;g[f+136>>2]=.009999999776482582;g[f+140>>2]=.009999999776482582;c[f+8>>2]=1065353216;e=f+12|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[f+28>>2]=1065353216;e=f+32|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[f+48>>2]=1065353216;e=f+52|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;return f|0}function Xi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0;d=+g[a+384>>2];if(!(d!=0.0))return;f=+g[a+388>>2];i=+g[a+392>>2];k=+g[a+396>>2];l=+g[b+4>>2]*i*d;h=+g[b+8>>2]*k*d;g[a+352>>2]=+g[a+352>>2]+ +g[b>>2]*f*d;g[a+356>>2]=+g[a+356>>2]+l;g[a+360>>2]=+g[a+360>>2]+h;f=+g[b>>2]*f;i=+g[b+4>>2]*i;k=+g[b+8>>2]*k;h=+g[c+4>>2];l=+g[c+8>>2];j=+g[c>>2];e=(+g[a+320>>2]*(h*k-l*i)+ +g[a+324>>2]*(l*f-j*k)+ +g[a+328>>2]*(j*i-h*f))*+g[a+588>>2];d=(+g[a+336>>2]*(h*k-l*i)+ +g[a+340>>2]*(l*f-j*k)+ +g[a+344>>2]*(j*i-h*f))*+g[a+592>>2];g[a+368>>2]=+g[a+368>>2]+(+g[a+304>>2]*(h*k-l*i)+ +g[a+308>>2]*(l*f-j*k)+ +g[a+312>>2]*(j*i-h*f))*+g[a+584>>2];g[a+372>>2]=+g[a+372>>2]+e;g[a+376>>2]=+g[a+376>>2]+d;return}function Yi(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=c[b+212>>2]|0;if((f|0)==(c[b+216>>2]|0)?(i=f|0?f<<1:1,(f|0)<(i|0)):0){if(!i)h=0;else{c[6324]=(c[6324]|0)+1;f=ic((i<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=f;f=c[b+212>>2]|0}if((f|0)>0){g=0;do{c[h+(g<<2)>>2]=c[(c[b+220>>2]|0)+(g<<2)>>2];g=g+1|0}while((g|0)!=(f|0))}g=c[b+220>>2]|0;if(g){if(a[b+224>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0);f=c[b+212>>2]|0}c[b+220>>2]=0}a[b+224>>0]=1;c[b+220>>2]=h;c[b+216>>2]=i}c[(c[b+220>>2]|0)+(f<<2)>>2]=d;c[b+212>>2]=f+1;if(!e)return;Se(c[d+28>>2]|0,d);Se(c[d+32>>2]|0,d);return}function Zi(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0;e=c[a+4>>2]|0;if(e|0)Xi(e,b,d);a=c[a>>2]|0;if(!a)return;m=+g[b>>2];k=+g[a+128>>2];l=+g[b+4>>2];j=+g[b+8>>2];f=+g[d+4>>2];o=+g[d+8>>2];n=+g[d>>2];i=+g[a+180>>2]*(j*f-l*o)+ +g[a+184>>2]*(m*o-j*n)+(l*n-m*f)*+g[a+188>>2];h=(j*f-l*o)*+g[a+196>>2]+(m*o-j*n)*+g[a+200>>2]+(l*n-m*f)*+g[a+204>>2];f=(j*f-l*o)*+g[a+212>>2]+(m*o-j*n)*+g[a+216>>2]+(l*n-m*f)*+g[a+220>>2];g[a+276>>2]=m*k+ +g[a+276>>2];g[a+280>>2]=k*l+ +g[a+280>>2];g[a+284>>2]=k*j+ +g[a+284>>2];g[a+292>>2]=i+ +g[a+292>>2];g[a+296>>2]=h+ +g[a+296>>2];g[a+300>>2]=f+ +g[a+300>>2];c[a+312>>2]=(c[a+312>>2]|0)+1;return}function _i(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0;v=+g[a+552>>2];u=+g[a+568>>2];t=+g[a+584>>2];s=+g[b>>2];r=+g[b+4>>2];q=+g[b+8>>2];o=+g[b+16>>2];n=+g[b+20>>2];m=+g[b+24>>2];k=+g[b+32>>2];i=+g[b+36>>2];f=+g[b+40>>2];j=+g[a+556>>2];h=+g[a+572>>2];e=+g[a+588>>2];x=+g[a+620>>2];w=+g[a+636>>2];d=+g[a+652>>2];p=x*+g[c>>2]+w*+g[c+4>>2]+d*+g[c+8>>2];l=x*+g[c+16>>2]+w*+g[c+20>>2]+d*+g[c+24>>2];d=x*+g[c+32>>2]+w*+g[c+36>>2]+d*+g[c+40>>2];d=+O(+((v*s+u*r+t*q)*p+(v*o+u*n+t*m)*l+(v*k+u*i+t*f)*d),+((s*j+r*h+q*e)*p+(o*j+n*h+m*e)*l+(k*j+i*h+f*e)*d));return +(d*+g[a+732>>2])}function $i(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;c[b>>2]=9108;d=c[b+84>>2]|0;g=c[d+8>>2]|0;if((g|0)>0){e=0;do{f=c[(c[d+16>>2]|0)+(e*12|0)+8>>2]|0;if(f|0){kb[c[c[f>>2]>>2]&255](f);h=c[b+4>>2]|0;mb[c[(c[h>>2]|0)+60>>2]&127](h,f)}e=e+1|0}while((e|0)!=(g|0));d=c[b+84>>2]|0}Qh(d);d=c[b+84>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+84>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+100>>2]|0;if(!d){a[b+104>>0]=1;c[b+100>>2]=0;c[b+92>>2]=0;h=b+96|0;c[h>>2]=0;Fi(b);return}if(a[b+104>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+100>>2]=0;a[b+104>>0]=1;c[b+100>>2]=0;c[b+92>>2]=0;h=b+96|0;c[h>>2]=0;Fi(b);return}function aj(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=c[a+8>>2]|0;if((d|0)>0){f=0;do{e=c[(c[a+16>>2]|0)+(f<<2)>>2]|0;if(c[e+248>>2]&2){g=ob[c[(c[e>>2]|0)+16>>2]&127](e)|0;g=yb[c[(c[b>>2]|0)+16>>2]&63](b,g,1)|0;d=yb[c[(c[e>>2]|0)+20>>2]&63](e,c[g+8>>2]|0,b)|0;ib[c[(c[b>>2]|0)+20>>2]&31](b,g,d,1497645650,e);d=c[a+8>>2]|0}f=f+1|0}while((f|0)<(d|0))}if((c[a+212>>2]|0)<=0)return;d=0;do{g=c[(c[a+220>>2]|0)+(d<<2)>>2]|0;e=ob[c[(c[g>>2]|0)+36>>2]&127](g)|0;e=yb[c[(c[b>>2]|0)+16>>2]&63](b,e,1)|0;f=yb[c[(c[g>>2]|0)+40>>2]&63](g,c[e+8>>2]|0,b)|0;ib[c[(c[b>>2]|0)+20>>2]&31](b,e,f,1397641027,g);d=d+1|0}while((d|0)<(c[a+212>>2]|0));return}function bj(a){a=a|0;var b=0.0,d=0,e=0,f=0,h=0;e=i;i=i+32|0;c[a+36>>2]=1566444395;c[a+40>>2]=1566444395;c[a+44>>2]=1566444395;g[a+48>>2]=0.0;c[a+52>>2]=-581039253;c[a+56>>2]=-581039253;c[a+60>>2]=-581039253;g[a+64>>2]=0.0;if((c[a+20>>2]|0)<=0){i=e;return}d=0;do{f=c[a+28>>2]|0;h=c[f+(d*80|0)+64>>2]|0;Yb[c[(c[h>>2]|0)+8>>2]&127](h,f+(d*80|0)|0,e+16|0,e);b=+g[e+16>>2];if(+g[a+36>>2]>b)g[a+36>>2]=b;b=+g[e>>2];if(+g[a+52>>2]<b)g[a+52>>2]=b;b=+g[e+16+4>>2];if(+g[a+40>>2]>b)g[a+40>>2]=b;b=+g[e+4>>2];if(+g[a+56>>2]<b)g[a+56>>2]=b;b=+g[e+16+8>>2];if(+g[a+44>>2]>b)g[a+44>>2]=b;b=+g[e+8>>2];if(+g[a+60>>2]<b)g[a+60>>2]=b;d=d+1|0}while((d|0)<(c[a+20>>2]|0));i=e;return}function cj(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0;e=i;i=i+96|0;j=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);c[e+32>>2]=1065353216;c[e+32+4>>2]=0;c[e+32+4+4>>2]=0;c[e+32+4+8>>2]=0;c[e+32+4+12>>2]=0;c[e+32+20>>2]=1065353216;c[e+32+24>>2]=0;c[e+32+24+4>>2]=0;c[e+32+24+8>>2]=0;c[e+32+24+12>>2]=0;c[e+32+40>>2]=1065353216;k=e+32+44|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;Yb[c[(c[a>>2]|0)+8>>2]&127](a,e+32|0,e+16|0,e);h=(j+(+g[e>>2]-+g[e+16>>2])*.5)*2.0;f=(j+(+g[e+4>>2]-+g[e+16+4>>2])*.5)*2.0;j=(j+(+g[e+8>>2]-+g[e+16+8>>2])*.5)*2.0;g[d>>2]=b*.0833333283662796*(f*f+j*j);g[d+4>>2]=b*.0833333283662796*(h*h+j*j);g[d+8>>2]=b*.0833333283662796*(h*h+f*f);g[d+12>>2]=0.0;i=e;return}function dj(b){b=b|0;var d=0;d=c[b+72>>2]|0;if(d|0){if(a[b+76>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+72>>2]=0}a[b+76>>0]=1;c[b+72>>2]=0;c[b+64>>2]=0;c[b+68>>2]=0;d=c[b+52>>2]|0;if(d|0){if(a[b+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;d=c[b+32>>2]|0;if(d|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;d=c[b+12>>2]|0;if(!d){a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;b=b+8|0;c[b>>2]=0;return}if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+12>>2]=0;a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;b=b+8|0;c[b>>2]=0;return}function ej(a,b){a=a|0;b=+b;var d=0,e=0,f=0,h=0.0,i=0.0,j=0.0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0;e=c[a+772>>2]|0;if((e|0)<=0)return;d=c[a+780>>2]|0;a=0;do{n=c[d+(a*52|0)+8>>2]|0;f=c[d+(a*52|0)+12>>2]|0;s=+g[n+40>>2];q=+g[n+44>>2];i=+g[n+48>>2];k=d+(a*52|0)+36|0;r=+g[k>>2];m=d+(a*52|0)+40|0;p=+g[m>>2];l=d+(a*52|0)+44|0;o=+g[l>>2];j=-(+g[d+(a*52|0)+32>>2]*((s-+g[f+40>>2])*r+(q-+g[f+44>>2])*p+(i-+g[f+48>>2])*o)*b);h=+g[n+88>>2]*j;g[n+40>>2]=s+r*h;g[n+44>>2]=q+p*h;g[n+48>>2]=o*h+i;j=+g[f+88>>2]*j;i=j*+g[m>>2];h=j*+g[l>>2];g[f+40>>2]=+g[f+40>>2]-+g[k>>2]*j;g[f+44>>2]=+g[f+44>>2]-i;g[f+48>>2]=+g[f+48>>2]-h;a=a+1|0}while((a|0)!=(e|0));return}function fj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=c[b+12>>2]|0;if(!e)return;if(!(a[b+8>>0]|0))return;f=c[d+4>>2]|0;if((f|0)==(c[d+8>>2]|0)?(h=f|0?f<<1:1,(f|0)<(h|0)):0){if(!h)e=0;else{c[6324]=(c[6324]|0)+1;e=ic((h<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}f=c[d+4>>2]|0}if((f|0)>0){g=0;do{c[e+(g<<2)>>2]=c[(c[d+12>>2]|0)+(g<<2)>>2];g=g+1|0}while((g|0)!=(f|0))}g=c[d+12>>2]|0;if(g){if(a[d+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0);f=c[d+4>>2]|0}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=e;c[d+8>>2]=h;e=c[b+12>>2]|0}c[(c[d+12>>2]|0)+(f<<2)>>2]=e;c[d+4>>2]=f+1;return}function gj(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;g=c[b+328>>2]|0;if((g|0)==(c[b+332>>2]|0)?(j=g|0?g<<1:1,(g|0)<(j|0)):0){if(!j)i=0;else{c[6324]=(c[6324]|0)+1;g=ic((j<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+4+15&-16)+-4>>2]=g;g=g+4+15&-16}i=g;g=c[b+328>>2]|0}if((g|0)>0){h=0;do{c[i+(h<<2)>>2]=c[(c[b+336>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(g|0))}h=c[b+336>>2]|0;if(h){if(a[b+340>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0);g=c[b+328>>2]|0}c[b+336>>2]=0}a[b+340>>0]=1;c[b+336>>2]=i;c[b+332>>2]=j}c[(c[b+336>>2]|0)+(g<<2)>>2]=d;c[b+328>>2]=g+1;c[d+324>>2]=c[b+452>>2];Cg(b,d,e,f);return}function hj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=c[b+60>>2]|0;if(!e)return;if(!(a[b+56>>0]|0))return;f=c[d+4>>2]|0;if((f|0)==(c[d+8>>2]|0)?(h=f|0?f<<1:1,(f|0)<(h|0)):0){if(!h)e=0;else{c[6324]=(c[6324]|0)+1;e=ic((h<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}f=c[d+4>>2]|0}if((f|0)>0){g=0;do{c[e+(g<<2)>>2]=c[(c[d+12>>2]|0)+(g<<2)>>2];g=g+1|0}while((g|0)!=(f|0))}g=c[d+12>>2]|0;if(g){if(a[d+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0);f=c[d+4>>2]|0}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=e;c[d+8>>2]=h;e=c[b+60>>2]|0}c[(c[d+12>>2]|0)+(f<<2)>>2]=e;c[d+4>>2]=f+1;return}function ij(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;k=+g[a+24>>2];i=+g[a+28>>2];j=+g[a+32>>2];f=k*+g[b>>2]+i*+g[b+4>>2]+j*+g[b+8>>2];h=+g[a+20>>2];if(f>h){g[a+20>>2]=f;c[a+4>>2]=c[b>>2];c[a+4+4>>2]=c[b+4>>2];c[a+4+8>>2]=c[b+8>>2];c[a+4+12>>2]=c[b+12>>2]}else f=h;h=k*+g[b+16>>2]+i*+g[b+20>>2]+j*+g[b+24>>2];if(h>f){g[a+20>>2]=h;c[a+4>>2]=c[b+16>>2];c[a+4+4>>2]=c[b+16+4>>2];c[a+4+8>>2]=c[b+16+8>>2];c[a+4+12>>2]=c[b+16+12>>2]}else h=f;f=k*+g[b+32>>2]+i*+g[b+36>>2]+j*+g[b+40>>2];if(!(f>h))return;g[a+20>>2]=f;c[a+4>>2]=c[b+32>>2];c[a+4+4>>2]=c[b+32+4>>2];c[a+4+8>>2]=c[b+32+8>>2];c[a+4+12>>2]=c[b+32+12>>2];return}function jj(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0;j=i;i=i+64|0;h=c[d>>2]|0;g=d+(c[h+-8>>2]|0)|0;h=c[h+-4>>2]|0;c[j>>2]=e;c[j+4>>2]=d;c[j+8>>2]=2776;d=j+12|0;f=d+40|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(f|0));b[j+12+40>>1]=0;a[j+12+42>>0]=0;a:do if((h|0)==(e|0)){c[j+48>>2]=1;Ab[c[(c[e>>2]|0)+20>>2]&7](e,j,g,g,1,0);d=(c[j+24>>2]|0)==1?g:0}else{ib[c[(c[h>>2]|0)+24>>2]&31](h,j,g,1,0);switch(c[j+36>>2]|0){case 0:{d=((c[j+40>>2]|0)==1?(c[j+28>>2]|0)==1:0)&(c[j+32>>2]|0)==1?c[j+20>>2]|0:0;break a}case 1:break;default:{d=0;break a}}if((c[j+24>>2]|0)!=1?!(((c[j+40>>2]|0)==0?(c[j+28>>2]|0)==1:0)&(c[j+32>>2]|0)==1):0){d=0;break}d=c[j+16>>2]|0}while(0);i=j;return d|0}function kj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;k=+g[a+88>>2];i=+g[a+92>>2];j=+g[a+96>>2];f=k*+g[b>>2]+i*+g[b+4>>2]+j*+g[b+8>>2];h=+g[a+84>>2];if(f>h){g[a+84>>2]=f;c[a+4>>2]=c[b>>2];c[a+4+4>>2]=c[b+4>>2];c[a+4+8>>2]=c[b+8>>2];c[a+4+12>>2]=c[b+12>>2]}else f=h;h=k*+g[b+16>>2]+i*+g[b+20>>2]+j*+g[b+24>>2];if(h>f){g[a+84>>2]=h;c[a+4>>2]=c[b+16>>2];c[a+4+4>>2]=c[b+16+4>>2];c[a+4+8>>2]=c[b+16+8>>2];c[a+4+12>>2]=c[b+16+12>>2]}else h=f;f=k*+g[b+32>>2]+i*+g[b+36>>2]+j*+g[b+40>>2];if(!(f>h))return;g[a+84>>2]=f;c[a+4>>2]=c[b+32>>2];c[a+4+4>>2]=c[b+32+4>>2];c[a+4+8>>2]=c[b+32+8>>2];c[a+4+12>>2]=c[b+32+12>>2];return}function lj(a,c,d,e,f,h){a=a|0;c=c|0;d=+d;e=+e;f=+f;h=h|0;var i=0,j=0;d=(d-+g[a+8>>2])*+g[a+40>>2];e=(e-+g[a+12>>2])*+g[a+44>>2];f=(f-+g[a+16>>2])*+g[a+48>>2];do if(!(d<=0.0)){i=b[a+6>>1]|0;j=b[a+4>>1]|0;if(!(d>=+(i&65535))){i=j&(~~d&65535)&65535|h;break}else{i=j&i&65535|h;break}}else i=h;while(0);b[c>>1]=i;do if(!(e<=0.0)){i=b[a+6>>1]|0;j=b[a+4>>1]|0;if(!(e>=+(i&65535))){i=j&(~~e&65535)&65535|h;break}else{i=j&i&65535|h;break}}else i=h;while(0);b[c+2>>1]=i;if(f<=0.0){a=h;a=a&65535;h=c+4|0;b[h>>1]=a;return}j=b[a+6>>1]|0;i=b[a+4>>1]|0;if(!(f>=+(j&65535))){a=i&(~~f&65535)&65535|h;a=a&65535;h=c+4|0;b[h>>1]=a;return}else{a=i&j&65535|h;a=a&65535;h=c+4|0;b[h>>1]=a;return}}
function td(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0;v=i;i=i+544|0;k=h;l=k+36|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0));c[v+384>>2]=a;c[v+384+4>>2]=d;o=+g[e>>2];E=+g[b>>2];n=+g[e+16>>2];j=+g[b+16>>2];m=+g[e+32>>2];F=+g[b+32>>2];w=+g[b+4>>2];H=+g[b+20>>2];x=+g[b+36>>2];t=+g[b+8>>2];r=+g[b+24>>2];p=+g[b+40>>2];D=+g[e+4>>2];C=+g[e+20>>2];B=+g[e+36>>2];A=+g[e+8>>2];z=+g[e+24>>2];y=+g[e+40>>2];g[v+384+8>>2]=o*E+n*j+m*F;g[v+384+12>>2]=o*w+n*H+m*x;g[v+384+16>>2]=o*t+n*r+m*p;g[v+384+20>>2]=0.0;g[v+384+24>>2]=E*D+j*C+F*B;g[v+384+28>>2]=w*D+H*C+x*B;g[v+384+32>>2]=t*D+r*C+p*B;g[v+384+36>>2]=0.0;g[v+384+40>>2]=E*A+j*z+F*y;g[v+384+44>>2]=w*A+H*z+x*y;g[v+384+48>>2]=t*A+r*z+p*y;g[v+384+52>>2]=0.0;p=+g[e+48>>2]-+g[b+48>>2];r=+g[e+52>>2]-+g[b+52>>2];t=+g[e+56>>2]-+g[b+56>>2];x=+g[b>>2];H=+g[e>>2];w=+g[b+16>>2];F=+g[e+16>>2];j=+g[b+32>>2];E=+g[e+32>>2];m=+g[b+4>>2];n=+g[b+20>>2];o=+g[b+36>>2];q=+g[b+8>>2];s=+g[b+24>>2];u=+g[b+40>>2];g[v+384+56>>2]=x*H+w*F+j*E;g[v+384+60>>2]=x*D+w*C+j*B;g[v+384+64>>2]=x*A+w*z+j*y;g[v+384+68>>2]=0.0;g[v+384+72>>2]=H*m+F*n+E*o;g[v+384+76>>2]=D*m+C*n+B*o;g[v+384+80>>2]=A*m+z*n+y*o;g[v+384+84>>2]=0.0;g[v+384+88>>2]=H*q+F*s+E*u;g[v+384+92>>2]=D*q+C*s+B*u;g[v+384+96>>2]=A*q+z*s+y*u;g[v+384+100>>2]=0.0;g[v+384+104>>2]=p*x+r*w+t*j;g[v+384+108>>2]=p*m+r*n+t*o;g[v+384+112>>2]=p*q+r*s+t*u;g[v+384+116>>2]=0.0;c[v+384+120>>2]=80;c[v+384+124>>2]=0;c[v+364>>2]=0;c[v+128>>2]=0;c[v+128+4>>2]=0;c[v+128+8>>2]=0;c[v+128+12>>2]=0;c[v+376>>2]=2;c[v+368>>2]=0;g[v+144>>2]=0.0;a=Ec(v,v+384|0,f)|0;if(a|0){c[h>>2]=(a|0)==1?1:2;h=0;i=v;return h|0}a=c[v+372>>2]|0;if(!(c[a+32>>2]|0)){q=0.0;p=0.0;o=0.0;n=0.0;m=0.0;j=0.0}else{f=0;q=0.0;p=0.0;o=0.0;n=0.0;m=0.0;j=0.0;do{u=+g[a+16+(f<<2)>>2];d=c[v+384+120>>2]|0;l=c[v+384+124>>2]|0;e=(c[v+384>>2]|0)+(l>>1)|0;if(l&1)d=c[(c[e>>2]|0)+d>>2]|0;Ub[d&127](v+528|0,e,c[a+(f<<2)>>2]|0);q=q+u*+g[v+528>>2];j=j+u*+g[v+528+4>>2];n=n+u*+g[v+528+8>>2];a=c[(c[v+372>>2]|0)+(f<<2)>>2]|0;r=-+g[a>>2];s=-+g[a+4>>2];t=-+g[a+8>>2];a=c[v+384+120>>2]|0;l=c[v+384+124>>2]|0;d=(c[v+384+4>>2]|0)+(l>>1)|0;if(l&1)a=c[(c[d>>2]|0)+a>>2]|0;F=+g[v+384+24>>2]*r+ +g[v+384+28>>2]*s+ +g[v+384+32>>2]*t;E=+g[v+384+40>>2]*r+ +g[v+384+44>>2]*s+ +g[v+384+48>>2]*t;g[v+512>>2]=+g[v+384+8>>2]*r+ +g[v+384+12>>2]*s+ +g[v+384+16>>2]*t;g[v+512+4>>2]=F;g[v+512+8>>2]=E;g[v+512+12>>2]=0.0;Ub[a&127](v+528|0,d,v+512|0);E=+g[v+528>>2];F=+g[v+528+4>>2];H=+g[v+528+8>>2];p=p+u*(E*+g[v+384+56>>2]+F*+g[v+384+60>>2]+H*+g[v+384+64>>2]+ +g[v+384+104>>2]);m=m+u*(E*+g[v+384+72>>2]+F*+g[v+384+76>>2]+H*+g[v+384+80>>2]+ +g[v+384+108>>2]);o=o+u*(E*+g[v+384+88>>2]+F*+g[v+384+92>>2]+H*+g[v+384+96>>2]+ +g[v+384+112>>2]);f=f+1|0;a=c[v+372>>2]|0}while(f>>>0<(c[a+32>>2]|0)>>>0)}D=q*+g[b+16>>2]+j*+g[b+20>>2]+n*+g[b+24>>2]+ +g[b+52>>2];E=q*+g[b+32>>2]+j*+g[b+36>>2]+n*+g[b+40>>2]+ +g[b+56>>2];g[h+4>>2]=q*+g[b>>2]+j*+g[b+4>>2]+n*+g[b+8>>2]+ +g[b+48>>2];g[h+8>>2]=D;g[h+12>>2]=E;g[h+16>>2]=0.0;E=p*+g[b+16>>2]+m*+g[b+20>>2]+o*+g[b+24>>2]+ +g[b+52>>2];D=p*+g[b+32>>2]+m*+g[b+36>>2]+o*+g[b+40>>2]+ +g[b+56>>2];g[h+20>>2]=p*+g[b>>2]+m*+g[b+4>>2]+o*+g[b+8>>2]+ +g[b+48>>2];g[h+24>>2]=E;g[h+28>>2]=D;g[h+32>>2]=0.0;D=q-p;E=j-m;H=n-o;g[h+48>>2]=0.0;F=+G(+(D*D+E*E+H*H));g[h+52>>2]=F;F=F>9.999999747378752e-005?1.0/F:1.0;g[h+36>>2]=F*D;g[h+40>>2]=F*E;g[h+44>>2]=F*H;h=1;i=v;return h|0}function ud(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0,j=0,k=0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0;n=i;i=i+16|0;c[b+248>>2]=2;c[b+352>>2]=0;c[b+352+4>>2]=0;c[b+352+8>>2]=0;c[b+352+12>>2]=0;c[b+352+16>>2]=0;c[b+352+20>>2]=0;c[b+352+24>>2]=0;c[b+352+28>>2]=0;c[b+584>>2]=1065353216;c[b+588>>2]=1065353216;c[b+592>>2]=1065353216;g[b+596>>2]=0.0;c[b+388>>2]=1065353216;c[b+392>>2]=1065353216;c[b+396>>2]=1065353216;e=b+400|0;h=e+36|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(h|0));c[b+452>>2]=0;c[b+452+4>>2]=0;c[b+452+8>>2]=0;c[b+452+12>>2]=0;c[b+452+16>>2]=0;c[b+452+20>>2]=0;c[b+452+24>>2]=0;c[b+452+28>>2]=0;f=+g[d+92>>2];m=+g[d+96>>2];g[n+12>>2]=f;g[n+8>>2]=m;g[n+4>>2]=0.0;g[n>>2]=1.0;c[b+484>>2]=c[(f<0.0?n+4|0:f>1.0?n:n+12|0)>>2];g[n+4>>2]=0.0;g[n>>2]=1.0;c[b+488>>2]=c[(m<0.0?n+4|0:m>1.0?n:n+8|0)>>2];c[b+512>>2]=c[d+116>>2];c[b+516>>2]=c[d+120>>2];e=c[d+4>>2]|0;c[b+520>>2]=e;c[b+648>>2]=0;c[b+652>>2]=0;a[b+492>>0]=a[d+124>>0]|0;c[b+496>>2]=c[d+128>>2];c[b+500>>2]=c[d+132>>2];c[b+504>>2]=c[d+136>>2];c[b+508>>2]=c[d+140>>2];if(!e){c[b+4>>2]=c[d+8>>2];c[b+4+4>>2]=c[d+8+4>>2];c[b+4+8>>2]=c[d+8+8>>2];c[b+4+12>>2]=c[d+8+12>>2];c[b+20>>2]=c[d+24>>2];c[b+20+4>>2]=c[d+24+4>>2];c[b+20+8>>2]=c[d+24+8>>2];c[b+20+12>>2]=c[d+24+12>>2];c[b+36>>2]=c[d+40>>2];c[b+36+4>>2]=c[d+40+4>>2];c[b+36+8>>2]=c[d+40+8>>2];c[b+36+12>>2]=c[d+40+12>>2];c[b+52>>2]=c[d+56>>2];c[b+52+4>>2]=c[d+56+4>>2];c[b+52+8>>2]=c[d+56+8>>2];c[b+52+12>>2]=c[d+56+12>>2];e=b+20|0;h=b+36|0;j=b+52|0;k=b+4|0}else{mb[c[(c[e>>2]|0)+8>>2]&127](e,b+4|0);e=b+20|0;h=b+36|0;j=b+52|0;k=b+4|0}c[b+68>>2]=c[k>>2];c[b+68+4>>2]=c[k+4>>2];c[b+68+8>>2]=c[k+8>>2];c[b+68+12>>2]=c[k+12>>2];c[b+84>>2]=c[e>>2];c[b+84+4>>2]=c[e+4>>2];c[b+84+8>>2]=c[e+8>>2];c[b+84+12>>2]=c[e+12>>2];c[b+100>>2]=c[h>>2];c[b+100+4>>2]=c[h+4>>2];c[b+100+8>>2]=c[h+8>>2];c[b+100+12>>2]=c[h+12>>2];c[b+116>>2]=c[j>>2];c[b+116+4>>2]=c[j+4>>2];c[b+116+8>>2]=c[j+8>>2];c[b+116+12>>2]=c[j+12>>2];c[b+132>>2]=0;c[b+132+4>>2]=0;c[b+132+8>>2]=0;c[b+132+12>>2]=0;c[b+132+16>>2]=0;c[b+132+20>>2]=0;c[b+132+24>>2]=0;c[b+132+28>>2]=0;c[b+224>>2]=c[d+100>>2];c[b+232>>2]=c[d+104>>2];c[b+236>>2]=c[d+108>>2];c[b+228>>2]=c[d+112>>2];mb[c[(c[b>>2]|0)+8>>2]&127](b,c[d+72>>2]|0);e=c[5873]|0;c[5873]=e+1;c[b+548>>2]=e;f=+g[d>>2];e=c[b+204>>2]|0;if(f==0.0){c[b+204>>2]=e|1;m=0.0}else{c[b+204>>2]=e&-2;m=1.0/f}g[b+384>>2]=m;p=f*+g[b+424>>2];o=f*+g[b+428>>2];g[b+404>>2]=f*+g[b+420>>2];g[b+408>>2]=p;g[b+412>>2]=o;g[b+416>>2]=0.0;f=+g[d+76>>2];h=f!=0.0?(g[l>>2]=1.0/f,c[l>>2]|0):0;f=+g[d+80>>2];e=f!=0.0?(g[l>>2]=1.0/f,c[l>>2]|0):0;f=+g[d+84>>2];d=f!=0.0?(g[l>>2]=1.0/f,c[l>>2]|0):0;c[b+436>>2]=h;c[b+440>>2]=e;c[b+444>>2]=d;g[b+448>>2]=0.0;r=m*+g[b+392>>2];x=m*+g[b+396>>2];g[b+600>>2]=m*+g[b+388>>2];g[b+604>>2]=r;g[b+608>>2]=x;g[b+612>>2]=0.0;x=+g[b+4>>2];r=(c[l>>2]=h,+g[l>>2]);w=+g[b+8>>2];f=(c[l>>2]=e,+g[l>>2]);v=+g[b+12>>2];o=(c[l>>2]=d,+g[l>>2]);u=+g[b+20>>2];t=+g[b+24>>2];s=+g[b+28>>2];q=+g[b+36>>2];p=+g[b+40>>2];m=+g[b+44>>2];g[b+304>>2]=x*x*r+w*w*f+v*v*o;g[b+308>>2]=x*r*u+w*f*t+v*o*s;g[b+312>>2]=x*r*q+w*f*p+v*o*m;g[b+316>>2]=0.0;g[b+320>>2]=x*r*u+w*f*t+v*o*s;g[b+324>>2]=u*r*u+t*f*t+s*o*s;g[b+328>>2]=r*u*q+f*t*p+o*s*m;g[b+332>>2]=0.0;g[b+336>>2]=x*r*q+w*f*p+v*o*m;g[b+340>>2]=u*r*q+t*f*p+s*o*m;g[b+344>>2]=q*r*q+p*f*p+m*o*m;g[b+348>>2]=0.0;c[b+544>>2]=8;c[b+552>>2]=0;c[b+552+4>>2]=0;c[b+552+8>>2]=0;c[b+552+12>>2]=0;c[b+552+16>>2]=0;c[b+552+20>>2]=0;c[b+552+24>>2]=0;c[b+552+28>>2]=0;m=+g[b+384>>2];o=m*+g[b+392>>2];p=m*+g[b+396>>2];g[b+600>>2]=+g[b+388>>2]*m;g[b+604>>2]=o;g[b+608>>2]=p;e=b+612|0;h=e+36|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(h|0));i=n;return}function vd(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0,M=0,N=0,O=0;h=i;i=i+240|0;if(!(c[b+16>>2]|0)){K=c[b+12>>2]|0;b=c[b+20>>2]|0;x=+g[d>>2];q=+g[d+4>>2];u=+g[d+8>>2];k=+g[d+16>>2];r=+g[d+20>>2];j=+g[d+24>>2];m=+g[d+32>>2];s=+g[d+36>>2];n=+g[d+40>>2];F=+g[d+48>>2];E=+g[d+52>>2];D=+g[d+56>>2];J=+g[e>>2];I=+g[e+16>>2];z=+g[e+32>>2];H=+g[e+4>>2];G=+g[e+20>>2];y=+g[e+36>>2];v=+g[e+8>>2];l=+g[e+24>>2];p=+g[e+40>>2];C=-+g[e+48>>2];B=-+g[e+52>>2];w=-+g[e+56>>2];d=c[(c[K>>2]|0)+64>>2]|0;A=-+g[b+52>>2];t=-+g[b+56>>2];o=-+g[b+60>>2];g[h+16>>2]=(x*J+k*I+m*z)*A+(x*H+k*G+m*y)*t+(x*v+k*l+m*p)*o;g[h+16+4>>2]=(q*J+r*I+s*z)*A+(q*H+r*G+s*y)*t+(q*v+r*l+s*p)*o;g[h+16+8>>2]=(u*J+j*I+n*z)*A+(u*H+j*G+n*y)*t+(u*v+j*l+n*p)*o;g[h+16+12>>2]=0.0;Ub[d&127](h+152|0,K,h+16|0);o=+g[h+152>>2];t=+g[h+152+4>>2];A=+g[h+152+8>>2];z=F*J+E*I+D*z+(J*C+I*B+z*w)+((x*J+k*I+m*z)*o+(q*J+r*I+s*z)*t+(u*J+j*I+n*z)*A);y=F*H+E*G+D*y+(H*C+G*B+y*w)+((x*H+k*G+m*y)*o+(q*H+r*G+s*y)*t+(u*H+j*G+n*y)*A);A=F*v+E*l+D*p+(v*C+l*B+p*w)+((x*v+k*l+m*p)*o+(q*v+r*l+s*p)*t+(u*v+j*l+n*p)*A);p=+g[b+52>>2];n=+g[b+56>>2];l=+g[b+60>>2];j=l*A+(p*z+n*y)-+g[b+68>>2];v=+g[e>>2];u=+g[e+4>>2];t=+g[e+8>>2];s=+g[e+16>>2];r=+g[e+20>>2];q=+g[e+24>>2];o=+g[e+32>>2];m=+g[e+36>>2];k=+g[e+40>>2];x=(z-p*j)*s+(y-n*j)*r+(A-l*j)*q+ +g[e+52>>2];w=(z-p*j)*o+(y-n*j)*m+(A-l*j)*k+ +g[e+56>>2];g[h+16>>2]=t*(A-l*j)+(v*(z-p*j)+u*(y-n*j))+ +g[e+48>>2];g[h+16+4>>2]=x;g[h+16+8>>2]=w;g[h+16+12>>2]=0.0;g[h>>2]=v*p+u*n+t*l;g[h+4>>2]=p*s+n*r+l*q;g[h+8>>2]=p*o+n*m+l*k;g[h+12>>2]=0.0;Tb[c[(c[f>>2]|0)+16>>2]&15](f,h,h+16|0,j);i=h;return}else{N=c[b+4>>2]|0;a[N+312>>0]=0;c[N>>2]=0;a[N+356>>0]=1;c[N+292>>2]=1566444395;c[N+296>>2]=1566444395;c[N+300>>2]=1566444395;g[N+304>>2]=0.0;c[N+336>>2]=0;c[N+336+4>>2]=0;c[N+336+8>>2]=0;c[N+336+12>>2]=0;a[N+336+16>>0]=0;a[N+332>>0]=a[N+332>>0]&-16;N=c[b+12>>2]|0;M=c[b+16>>2]|0;L=c[N+4>>2]|0;K=c[M+4>>2]|0;I=+Cb[c[(c[N>>2]|0)+48>>2]&15](N);O=c[b+16>>2]|0;J=+Cb[c[(c[O>>2]|0)+48>>2]&15](O);O=c[b+4>>2]|0;b=c[b+8>>2]|0;c[h+152>>2]=8848;c[h+152+4>>2]=0;c[h+152+8>>2]=1065353216;c[h+152+12>>2]=0;g[h+152+16>>2]=0.0;c[h+152+20>>2]=b;c[h+152+24>>2]=O;c[h+152+28>>2]=N;c[h+152+32>>2]=M;c[h+152+36>>2]=L;c[h+152+40>>2]=K;g[h+152+44>>2]=I;g[h+152+48>>2]=J;a[h+152+52>>0]=0;c[h+152+60>>2]=-1;c[h+152+72>>2]=1;c[h+152+76>>2]=1;g[h+16+128>>2]=999999984306749440.0;c[h+16>>2]=c[d>>2];c[h+16+4>>2]=c[d+4>>2];c[h+16+8>>2]=c[d+8>>2];c[h+16+12>>2]=c[d+12>>2];c[h+16+16>>2]=c[d+16>>2];c[h+16+16+4>>2]=c[d+16+4>>2];c[h+16+16+8>>2]=c[d+16+8>>2];c[h+16+16+12>>2]=c[d+16+12>>2];c[h+16+32>>2]=c[d+32>>2];c[h+16+32+4>>2]=c[d+32+4>>2];c[h+16+32+8>>2]=c[d+32+8>>2];c[h+16+32+12>>2]=c[d+32+12>>2];c[h+16+48>>2]=c[d+48>>2];c[h+16+48+4>>2]=c[d+48+4>>2];c[h+16+48+8>>2]=c[d+48+8>>2];c[h+16+48+12>>2]=c[d+48+12>>2];c[h+16+64>>2]=c[e>>2];c[h+16+64+4>>2]=c[e+4>>2];c[h+16+64+8>>2]=c[e+8>>2];c[h+16+64+12>>2]=c[e+12>>2];c[h+16+80>>2]=c[e+16>>2];c[h+16+80+4>>2]=c[e+16+4>>2];c[h+16+80+8>>2]=c[e+16+8>>2];c[h+16+80+12>>2]=c[e+16+12>>2];c[h+16+96>>2]=c[e+32>>2];c[h+16+96+4>>2]=c[e+32+4>>2];c[h+16+96+8>>2]=c[e+32+8>>2];c[h+16+96+12>>2]=c[e+32+12>>2];c[h+16+112>>2]=c[e+48>>2];c[h+16+112+4>>2]=c[e+48+4>>2];c[h+16+112+8>>2]=c[e+48+8>>2];c[h+16+112+12>>2]=c[e+48+12>>2];uc(h+152|0,h+16|0,f,0,0);i=h;return}}function wd(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0,j=0.0,k=0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,H=0,I=0;F=i;i=i+96|0;d=c[a+216>>2]|0;if(+g[d+4>>2]==0.0){E=0;i=F;return E|0}E=c[b>>2]|0;if(!(Jb[c[(c[d>>2]|0)+8>>2]&31](d,c[E+188>>2]|0)|0)){E=1;i=F;return E|0}b=c[E+192>>2]|0;D=c[a+216>>2]|0;if((c[b+4>>2]|0)!=32){c[F+32>>2]=0;c[F+32+4>>2]=b;c[F+32+8>>2]=E;c[F+32+12>>2]=E+4;c[F+32+16>>2]=-1;c[F+32+20>>2]=-1;Vc(a+68|0,a+132|0,F+32|0,D);E=1;i=F;return E|0}if((E|0)==0?1:(c[E+248>>2]|0)!=8){E=1;i=F;return E|0}if(c[E+792>>2]|0?(c[E+1028>>2]|0)==0:0)Uf(E);A=+g[a+180>>2]-+g[a+116>>2];B=+g[a+184>>2]-+g[a+120>>2];C=+g[a+188>>2]-+g[a+124>>2];b=c[E+1028>>2]|0;if(!b){q=c[E+792>>2]|0;if((q|0)>0){r=c[E+800>>2]|0;p=0;d=0;b=-1;k=1065353216;h=0;do{I=c[r+(p*44|0)+8>>2]|0;H=c[r+(p*44|0)+12>>2]|0;z=c[r+(p*44|0)+16>>2]|0;e=+Dh(a+116|0,A,B,C,+g[I+8>>2],+g[I+12>>2],+g[I+16>>2],+g[H+8>>2],+g[H+12>>2],+g[H+16>>2],+g[z+8>>2],+g[z+12>>2],+g[z+16>>2],(c[l>>2]=k,+g[l>>2]));if(e>0.0){d=d+1|0;b=p;k=(g[l>>2]=e,c[l>>2]|0);h=3}p=p+1|0}while((p|0)!=(q|0))}else{d=0;b=-1;k=1065353216;h=0}}else{c[F+32>>2]=3036;c[F+32+4>>2]=c[a+116>>2];c[F+32+4+4>>2]=c[a+116+4>>2];c[F+32+4+8>>2]=c[a+116+8>>2];c[F+32+4+12>>2]=c[a+116+12>>2];g[F+32+36>>2]=A;g[F+32+40>>2]=B;g[F+32+44>>2]=C;g[F+32+48>>2]=0.0;c[F+32+20>>2]=c[a+180>>2];c[F+32+20+4>>2]=c[a+180+4>>2];c[F+32+20+8>>2]=c[a+180+8>>2];c[F+32+20+12>>2]=c[a+180+12>>2];c[F+32+52>>2]=1065353216;c[F+32+56>>2]=0;c[F+32+60>>2]=0;Me(b,a+116|0,a+180|0,F+32|0);b=c[F+32+56>>2]|0;if(!b){d=0;b=-1;k=1065353216;h=0}else{d=1;b=(b-(c[E+800>>2]|0)|0)/44|0;k=c[F+32+52>>2]|0;h=3}}r=c[E+812>>2]|0;if((r|0)>0){z=c[E+820>>2]|0;q=0;do{I=c[z+(q*104|0)+8>>2]|0;t=+g[I+8>>2];w=+g[I+12>>2];y=+g[I+16>>2];I=c[z+(q*104|0)+12>>2]|0;j=+g[I+8>>2];n=+g[I+12>>2];s=+g[I+16>>2];I=c[z+(q*104|0)+16>>2]|0;u=+g[I+8>>2];v=+g[I+12>>2];x=+g[I+16>>2];e=(c[l>>2]=k,+g[l>>2]);f=+Dh(a+116|0,A,B,C,t,w,y,j,n,s,u,v,x,e);if(f>0.0){d=d+1|0;b=q;k=(g[l>>2]=f,c[l>>2]|0);h=4;e=f}I=c[z+(q*104|0)+20>>2]|0;f=+g[I+8>>2];m=+g[I+12>>2];o=+g[I+16>>2];e=+Dh(a+116|0,A,B,C,t,w,y,j,n,s,f,m,o,e);if(e>0.0){d=d+1|0;b=q;p=(g[l>>2]=e,c[l>>2]|0);h=4}else{p=k;e=(c[l>>2]=k,+g[l>>2])}e=+Dh(a+116|0,A,B,C,j,n,s,u,v,x,f,m,o,e);if(e>0.0){d=d+1|0;b=q;k=(g[l>>2]=e,c[l>>2]|0);h=4}else{k=p;e=(c[l>>2]=p,+g[l>>2])}e=+Dh(a+116|0,A,B,C,t,w,y,u,v,x,f,m,o,e);if(e>0.0){d=d+1|0;b=q;k=(g[l>>2]=e,c[l>>2]|0);h=4}q=q+1|0}while((q|0)!=(r|0))}if(!d){I=1;i=F;return I|0}if(!((c[l>>2]=k,+g[l>>2])<=+g[D+4>>2])){I=1;i=F;return I|0}c[F+32>>2]=0;c[F+32+4>>2]=b;m=+g[a+180>>2]-+g[a+116>>2];n=+g[a+184>>2]-+g[a+120>>2];o=+g[a+188>>2]-+g[a+124>>2];e=1.0/+G(+(m*m+n*n+o*o));if((h|0)==3){d=c[E+788+12>>2]|0;e=+g[d+(b*44|0)+20>>2];j=+g[d+(b*44|0)+24>>2];f=+g[d+(b*44|0)+28>>2];if(m*e+n*j+o*f>0.0){m=-e;j=-j;f=-f;e=0.0}else{m=e;e=+g[d+(b*44|0)+32>>2]}}else{m=-(m*e);j=-(n*e);f=-(o*e);e=0.0}c[F>>2]=E;c[F+4>>2]=F+32;g[F+8>>2]=m;g[F+12>>2]=j;g[F+16>>2]=f;g[F+20>>2]=e;c[F+24>>2]=k;+Kb[c[(c[D>>2]|0)+12>>2]&15](D,F,1);I=1;i=F;return I|0}function xd(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;t=i;i=i+32|0;g=ob[c[(c[d>>2]|0)+28>>2]&127](d)|0;c[e+20>>2]=g;c[e>>2]=0;if(!g){s=d+4|0;f=e+4|0;s=c[s>>2]|0;c[f>>2]=s;f=d+8|0;f=c[f>>2]|0;s=e+8|0;c[s>>2]=f;s=d+12|0;s=c[s>>2]|0;f=e+12|0;c[f>>2]=s;d=d+16|0;d=c[d>>2]|0;f=e+16|0;c[f>>2]=d;i=t;return 18870}s=yb[c[(c[f>>2]|0)+16>>2]&63](f,32,g)|0;g=c[s+8>>2]|0;c[e>>2]=Jb[c[(c[f>>2]|0)+28>>2]&31](f,g)|0;r=ob[c[(c[d>>2]|0)+28>>2]&127](d)|0;a:do if((r|0)>0){q=0;while(1){Ib[c[(c[d>>2]|0)+16>>2]&3](d,t+28|0,t+4|0,t+16|0,t+8|0,t+24|0,t+20|0,t,t+12|0,q);j=c[t>>2]|0;c[g+24>>2]=j;c[g+28>>2]=c[t+4>>2];k=g+12|0;m=g+16|0;p=g+4|0;c[g>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;switch(c[t+12>>2]|0){case 2:{if(j|0){k=yb[c[(c[f>>2]|0)+16>>2]&63](f,4,j*3|0)|0;l=c[k+8>>2]|0;c[g+8>>2]=Jb[c[(c[f>>2]|0)+28>>2]&31](f,l)|0;if((c[t>>2]|0)>0){m=c[t+24>>2]|0;j=0;do{n=m+(S(c[t+20>>2]|0,j)|0)|0;o=j*3|0;c[l+(o<<2)>>2]=c[n>>2];c[l+(o+1<<2)>>2]=c[n+4>>2];c[l+(o+2<<2)>>2]=c[n+8>>2];j=j+1|0}while((j|0)<(c[t>>2]|0))}ib[c[(c[f>>2]|0)+20>>2]&31](f,k,18751,1497453121,c[k+8>>2]|0)}break}case 3:{if(j|0){n=yb[c[(c[f>>2]|0)+16>>2]&63](f,8,j)|0;o=c[n+8>>2]|0;c[k>>2]=Jb[c[(c[f>>2]|0)+28>>2]&31](f,o)|0;k=c[t>>2]|0;if((k|0)>0){l=c[t+24>>2]|0;m=c[t+20>>2]|0;j=0;do{u=l+(S(m,j)|0)|0;b[o+(j<<3)>>1]=b[u>>1]|0;b[o+(j<<3)+2>>1]=b[u+2>>1]|0;b[o+(j<<3)+4>>1]=b[u+4>>1]|0;j=j+1|0}while((j|0)!=(k|0))}ib[c[(c[f>>2]|0)+20>>2]&31](f,n,18766,1497453121,c[n+8>>2]|0)}break}case 5:{if(j|0){k=yb[c[(c[f>>2]|0)+16>>2]&63](f,4,j)|0;l=c[k+8>>2]|0;c[m>>2]=Jb[c[(c[f>>2]|0)+28>>2]&31](f,l)|0;if((c[t>>2]|0)>0){j=0;do{u=(c[t+24>>2]|0)+(S(c[t+20>>2]|0,j)|0)|0;a[l+(j<<2)>>0]=a[u>>0]|0;a[l+(j<<2)+1>>0]=a[u+1>>0]|0;a[l+(j<<2)+2>>0]=a[u+2>>0]|0;j=j+1|0}while((j|0)<(c[t>>2]|0))}ib[c[(c[f>>2]|0)+20>>2]&31](f,k,18793,1497453121,c[k+8>>2]|0)}break}default:{}}switch(c[t+16>>2]|0){case 0:{j=c[t+4>>2]|0;if(j|0){k=yb[c[(c[f>>2]|0)+16>>2]&63](f,16,j)|0;l=c[k+8>>2]|0;c[g>>2]=Jb[c[(c[f>>2]|0)+28>>2]&31](f,l)|0;m=c[t+4>>2]|0;if((m|0)>0){n=c[t+28>>2]|0;o=c[t+8>>2]|0;j=0;do{u=n+(S(o,j)|0)|0;c[l+(j<<4)>>2]=c[u>>2];c[l+(j<<4)+4>>2]=c[u+4>>2];c[l+(j<<4)+8>>2]=c[u+8>>2];j=j+1|0}while((j|0)!=(m|0))}ib[c[(c[f>>2]|0)+20>>2]&31](f,k,18816,1497453121,c[k+8>>2]|0)}break}case 1:{j=c[t+4>>2]|0;if(j|0){n=yb[c[(c[f>>2]|0)+16>>2]&63](f,32,j)|0;o=c[n+8>>2]|0;c[p>>2]=Jb[c[(c[f>>2]|0)+28>>2]&31](f,o)|0;k=c[t+4>>2]|0;if((k|0)>0){l=c[t+28>>2]|0;m=c[t+8>>2]|0;j=0;do{u=l+(S(m,j)|0)|0;h[o+(j<<5)>>3]=+h[u>>3];h[o+(j<<5)+8>>3]=+h[u+8>>3];h[o+(j<<5)+16>>3]=+h[u+16>>3];j=j+1|0}while((j|0)!=(k|0))}ib[c[(c[f>>2]|0)+20>>2]&31](f,n,18835,1497453121,c[n+8>>2]|0)}break}default:{}}mb[c[(c[d>>2]|0)+24>>2]&127](d,q);q=q+1|0;if((q|0)==(r|0)){g=f;break a}else g=g+32|0}}else g=f;while(0);ib[c[(c[g>>2]|0)+20>>2]&31](f,s,18855,1497453121,c[s+8>>2]|0);u=d+4|0;f=e+4|0;u=c[u>>2]|0;c[f>>2]=u;f=d+8|0;f=c[f>>2]|0;u=e+8|0;c[u>>2]=f;u=d+12|0;u=c[u>>2]|0;f=e+12|0;c[f>>2]=u;f=d+16|0;f=c[f>>2]|0;u=e+16|0;c[u>>2]=f;i=t;return 18870}function yd(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0,h=0.0,i=0.0,j=0.0,k=0.0,m=0.0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0,z=0.0,A=0.0,B=0.0,C=0.0;c[a+556>>2]=c[b>>2];c[a+556+4>>2]=c[b+4>>2];c[a+556+8>>2]=c[b+8>>2];c[a+556+12>>2]=c[b+12>>2];s=+g[a+568>>2];k=+g[5703];t=+g[a+560>>2];h=+g[5705];q=+g[a+564>>2];i=+g[5704];r=+g[a+556>>2];j=(k*q+s*i-h*r)*-q+(s*(s*k+t*h-q*i)+(-(k*r)-t*i-h*q)*-r)-(s*h+i*r-k*t)*-t;m=(s*h+i*r-k*t)*-r+(s*(k*q+s*i-h*r)+(-(k*r)-t*i-h*q)*-t)-(s*k+t*h-q*i)*-q;d=(s*k+t*h-q*i)*-t+((-(k*r)-t*i-h*q)*-q+s*(s*h+i*r-k*t))-(k*q+s*i-h*r)*-r;do if(h*d+(i*m+k*j)<-.9999998807907105)if(+F(+h)>.7071067690849304){d=1.0/+G(+(h*h+i*i));e=0;h=-(h*d);b=(g[l>>2]=i*d,c[l>>2]|0);d=0.0;break}else{h=1.0/+G(+(k*k+i*i));e=(g[l>>2]=-(i*h),c[l>>2]|0);h=k*h;b=0;d=0.0;break}else{C=+G(+((h*d+(i*m+k*j)+1.0)*2.0));e=(g[l>>2]=(i*d-h*m)*(1.0/C),c[l>>2]|0);h=(h*j-k*d)*(1.0/C);b=(g[l>>2]=(k*m-i*j)*(1.0/C),c[l>>2]|0);d=C*.5}while(0);j=(c[l>>2]=e,+g[l>>2]);m=(c[l>>2]=b,+g[l>>2]);w=1.0/+G(+(d*d+(j*j+h*h+m*m)));o=(g[l>>2]=j*w,c[l>>2]|0);x=h*w;v=(g[l>>2]=m*w,c[l>>2]|0);d=d*w;u=(g[l>>2]=d,c[l>>2]|0);A=r*d+s*-(j*w)+q*-x-t*-(m*w);B=r*-(m*w)+(s*-x+d*t)-q*-(j*w);C=s*-(m*w)+d*q+t*-(j*w)-r*-x;q=d*s-r*-(j*w)-t*-x-q*-(m*w);r=1.0/+G(+(q*q+(C*C+(A*A+B*B))));f=(g[l>>2]=A*r,c[l>>2]|0);b=(g[l>>2]=r*B,c[l>>2]|0);e=(g[l>>2]=r*C,c[l>>2]|0);h=+g[a+444>>2];n=(g[l>>2]=h,c[l>>2]|0);if(h>=.05000000074505806?(z=+g[a+448>>2],z>=.05000000074505806):0){d=d<-1.0?-1.0:d;d=+L(+(d>1.0?1.0:d))*2.0;if(d>1.1920928955078125e-007){i=1.0/+G(+(m*w*m*w+(j*w*j*w+x*x)));if(+F(+(x*i))>1.1920928955078125e-007){k=+G(+((m*w*i*m*w*i/(x*i*x*i)+1.0)/(1.0/(z*z)+m*w*i*m*w*i/(x*i*x*i)/(h*h))));j=j*w*i;n=(g[l>>2]=k,c[l>>2]|0);k=x*i;i=m*w*i}else{j=j*w*i;k=x*i;i=m*w*i}}else{j=0.0;n=0;k=0.0;i=0.0}if(+F(+d)>1.1920928955078125e-007){h=(c[l>>2]=n,+g[l>>2]);if(!(d>h)){if(d<-h)d=-h}else d=h;z=d*.5;m=+J(+z)/+G(+(j*j+k*k+i*i));z=+I(+z);y=(g[l>>2]=j*m,c[l>>2]|0);v=(g[l>>2]=i*m,c[l>>2]|0);m=k*m;u=(g[l>>2]=z,c[l>>2]|0)}else{y=o;m=x}}else{y=o;m=x}k=+g[a+452>>2];if(k>=.05000000074505806){d=r*q<-1.0?-1.0:r*q;d=+L(+(d>1.0?1.0:d))*2.0;if(d>3.1415927410125732){p=(g[l>>2]=-(A*r),c[l>>2]|0);o=(g[l>>2]=-(r*B),c[l>>2]|0);d=-(r*q)<-1.0?-1.0:-(r*q);d=+L(+(d>1.0?1.0:d))*2.0;n=(g[l>>2]=-(r*C),c[l>>2]|0)}else{p=f;o=b;n=e}h=(c[l>>2]=p,+g[l>>2]);i=(c[l>>2]=o,+g[l>>2]);j=(c[l>>2]=n,+g[l>>2]);if(d>1.1920928955078125e-007){C=1.0/+G(+(h*h+i*i+j*j));p=(g[l>>2]=h*C,c[l>>2]|0);o=(g[l>>2]=i*C,c[l>>2]|0);n=(g[l>>2]=j*C,c[l>>2]|0)}if(+F(+d)>1.1920928955078125e-007){if(!(d>k)){if(d<-k)d=-k}else d=k;z=(c[l>>2]=p,+g[l>>2]);A=(c[l>>2]=o,+g[l>>2]);B=(c[l>>2]=n,+g[l>>2]);d=d*.5;C=+J(+d)/+G(+(B*B+(A*A+z*z)));d=+I(+d);f=(g[l>>2]=z*C,c[l>>2]|0);b=(g[l>>2]=A*C,c[l>>2]|0);e=(g[l>>2]=B*C,c[l>>2]|0)}else d=r*q}else d=r*q;w=(c[l>>2]=u,+g[l>>2]);z=(c[l>>2]=f,+g[l>>2]);x=(c[l>>2]=y,+g[l>>2]);C=(c[l>>2]=e,+g[l>>2]);B=(c[l>>2]=v,+g[l>>2]);A=(c[l>>2]=b,+g[l>>2]);g[a+556>>2]=m*C+(w*z+x*d)-B*A;g[a+560>>2]=B*z+(w*A+m*d)-x*C;g[a+564>>2]=x*A+(w*C+B*d)-m*z;g[a+568>>2]=w*d-x*z-m*A-B*C;return}function zd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,i=0,j=0.0,k=0.0,l=0.0,m=0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0;o=c[a+192>>2]|0;n=+Cb[c[(c[o>>2]|0)+48>>2]&15](o);o=c[a+752>>2]|0;if((o|0)>0){i=0;do{m=c[a+760>>2]|0;f=m+(i*104|0)+8|0;q=+g[f>>2];h=m+(i*104|0)+12|0;p=+g[h>>2];d=m+(i*104|0)+16|0;l=+g[d>>2];j=q*+g[b>>2]+p*+g[b+4>>2]+l*+g[b+8>>2]+ +g[b+48>>2];k=q*+g[b+16>>2]+p*+g[b+20>>2]+l*+g[b+24>>2]+ +g[b+52>>2];l=q*+g[b+32>>2]+p*+g[b+36>>2]+l*+g[b+40>>2]+ +g[b+56>>2];g[f>>2]=j;g[h>>2]=k;g[d>>2]=l;g[m+(i*104|0)+20>>2]=0.0;d=m+(i*104|0)+24|0;p=+g[d>>2];h=m+(i*104|0)+28|0;q=+g[h>>2];f=m+(i*104|0)+32|0;r=+g[f>>2];s=p*+g[b+16>>2]+q*+g[b+20>>2]+r*+g[b+24>>2]+ +g[b+52>>2];t=p*+g[b+32>>2]+q*+g[b+36>>2]+r*+g[b+40>>2]+ +g[b+56>>2];g[d>>2]=p*+g[b>>2]+q*+g[b+4>>2]+r*+g[b+8>>2]+ +g[b+48>>2];g[h>>2]=s;g[f>>2]=t;g[m+(i*104|0)+36>>2]=0.0;f=m+(i*104|0)+72|0;t=+g[f>>2];h=m+(i*104|0)+76|0;s=+g[h>>2];d=m+(i*104|0)+80|0;r=+g[d>>2];q=t*+g[b+16>>2]+s*+g[b+20>>2]+r*+g[b+24>>2];p=t*+g[b+32>>2]+s*+g[b+36>>2]+r*+g[b+40>>2];g[f>>2]=+g[b>>2]*t+ +g[b+4>>2]*s+ +g[b+8>>2]*r;g[h>>2]=q;g[d>>2]=p;g[m+(i*104|0)+84>>2]=0.0;m=c[m+(i*104|0)+96>>2]|0;d=Wg(a+968|0,m)|0;a:do if(d){h=c[a+976>>2]|0;if((h|0)<=-1){d=c[a+968>>2]|0;break}if(h){e=0;while(1){f=c[d+32>>2]|0;e=e+1|0;if(!f)break a;if((e|0)>=(h|0)){d=f;break}else d=f}}}else d=0;while(0);g[m>>2]=j-n;g[m+4>>2]=k-n;g[m+8>>2]=l-n;g[m+12>>2]=0.0;g[m+16>>2]=n+j;g[m+20>>2]=n+k;g[m+24>>2]=n+l;g[m+28>>2]=0.0;Ze(a+968|0,d,m);i=i+1|0}while((i|0)!=(o|0))}rg(a);d=c[a+968>>2]|0;if(d){o=c[a+192>>2]|0;r=+Cb[c[(c[o>>2]|0)+48>>2]&15](o);t=+g[d+4>>2]-r;s=+g[d+8>>2]-r;g[a+932>>2]=+g[d>>2]-r;g[a+936>>2]=t;g[a+940>>2]=s;g[a+944>>2]=0.0;s=r+ +g[d+20>>2];t=r+ +g[d+24>>2];g[a+948>>2]=r+ +g[d+16>>2];g[a+952>>2]=s;g[a+956>>2]=t;g[a+960>>2]=0.0;d=c[a+188>>2]|0;if(d|0){o=c[a+724>>2]|0;m=c[o+32>>2]|0;ib[c[(c[m>>2]|0)+16>>2]&31](m,d,a+932|0,a+948|0,c[o+36>>2]|0)}}else{c[a+932>>2]=0;c[a+932+4>>2]=0;c[a+932+8>>2]=0;c[a+932+12>>2]=0;c[a+932+16>>2]=0;c[a+932+20>>2]=0;c[a+932+24>>2]=0;c[a+932+28>>2]=0}e=c[a+772>>2]|0;if((e|0)<=0){Vf(a);o=a+1188|0;c[o>>2]=c[b>>2];c[o+4>>2]=c[b+4>>2];c[o+8>>2]=c[b+8>>2];c[o+12>>2]=c[b+12>>2];o=a+1204|0;m=b+16|0;c[o>>2]=c[m>>2];c[o+4>>2]=c[m+4>>2];c[o+8>>2]=c[m+8>>2];c[o+12>>2]=c[m+12>>2];o=a+1220|0;m=b+32|0;c[o>>2]=c[m>>2];c[o+4>>2]=c[m+4>>2];c[o+8>>2]=c[m+8>>2];c[o+12>>2]=c[m+12>>2];a=a+1236|0;b=b+48|0;c[a>>2]=c[b>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[a+12>>2]=c[b+12>>2];return}f=c[a+780>>2]|0;d=0;do{m=c[f+(d*52|0)+8>>2]|0;o=c[f+(d*52|0)+12>>2]|0;r=+g[m+8>>2]-+g[o+8>>2];s=+g[m+12>>2]-+g[o+12>>2];t=+g[m+16>>2]-+g[o+16>>2];t=+G(+(r*r+s*s+t*t));g[f+(d*52|0)+16>>2]=t;g[f+(d*52|0)+28>>2]=t*t;d=d+1|0}while((d|0)!=(e|0));d=0;do{g[f+(d*52|0)+24>>2]=(+g[(c[f+(d*52|0)+8>>2]|0)+88>>2]+ +g[(c[f+(d*52|0)+12>>2]|0)+88>>2])/+g[(c[f+(d*52|0)+4>>2]|0)+4>>2];d=d+1|0}while((d|0)!=(e|0));Vf(a);o=a+1188|0;c[o>>2]=c[b>>2];c[o+4>>2]=c[b+4>>2];c[o+8>>2]=c[b+8>>2];c[o+12>>2]=c[b+12>>2];o=a+1204|0;m=b+16|0;c[o>>2]=c[m>>2];c[o+4>>2]=c[m+4>>2];c[o+8>>2]=c[m+8>>2];c[o+12>>2]=c[m+12>>2];o=a+1220|0;m=b+32|0;c[o>>2]=c[m>>2];c[o+4>>2]=c[m+4>>2];c[o+8>>2]=c[m+8>>2];c[o+12>>2]=c[m+12>>2];a=a+1236|0;b=b+48|0;c[a>>2]=c[b>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[a+12>>2]=c[b+12>>2];return}function Ad(b,d,e,f,h,i){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=+i;var j=0,k=0,m=0.0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0,B=0;B=c[b+88>>2]|0;if((B|0)==(c[b+92>>2]|0)?(o=B|0?B<<1:1,(B|0)<(o|0)):0){if(!o){j=0;n=B}else{c[6324]=(c[6324]|0)+1;j=ic((o*152|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}n=c[b+88>>2]|0}if((n|0)>0){k=0;do{Lm(j+(k*152|0)|0,(c[b+96>>2]|0)+(k*152|0)|0,152)|0;k=k+1|0}while((k|0)!=(n|0))}k=c[b+96>>2]|0;if(k|0){if(a[b+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=j;c[b+92>>2]=o;j=c[b+88>>2]|0}else j=B;c[b+88>>2]=j+1;A=c[b+96>>2]|0;c[A+(B*152|0)+140>>2]=h;c[A+(B*152|0)+16>>2]=0;c[A+(B*152|0)+16+4>>2]=0;c[A+(B*152|0)+16+8>>2]=0;c[A+(B*152|0)+16+12>>2]=0;g[A+(B*152|0)+48>>2]=-0.0;g[A+(B*152|0)+52>>2]=-0.0;g[A+(B*152|0)+56>>2]=-0.0;g[A+(B*152|0)+60>>2]=0.0;b=c[b+16>>2]|0;o=c[b+(e*244|0)+240>>2]|0;h=c[b+(f*244|0)+240>>2]|0;c[A+(B*152|0)+144>>2]=e;c[A+(B*152|0)+148>>2]=f;g[A+(B*152|0)+104>>2]=i;c[A+(B*152|0)+132>>2]=0;g[A+(B*152|0)+100>>2]=0.0;g[A+(B*152|0)+96>>2]=0.0;x=-+g[d>>2];y=-+g[d+4>>2];z=-+g[d+8>>2];g[A+(B*152|0)>>2]=x;g[A+(B*152|0)+4>>2]=y;g[A+(B*152|0)+8>>2]=z;g[A+(B*152|0)+12>>2]=0.0;if(o|0){j=(g[l>>2]=(+g[o+304>>2]*x+ +g[o+308>>2]*y+ +g[o+312>>2]*z)*+g[o+584>>2],c[l>>2]|0);k=(g[l>>2]=(+g[o+320>>2]*x+ +g[o+324>>2]*y+ +g[o+328>>2]*z)*+g[o+588>>2],c[l>>2]|0);n=(g[l>>2]=(+g[o+336>>2]*x+ +g[o+340>>2]*y+ +g[o+344>>2]*z)*+g[o+592>>2],c[l>>2]|0)}else{j=0;k=0;n=0}c[A+(B*152|0)+64>>2]=j;c[A+(B*152|0)+68>>2]=k;c[A+(B*152|0)+72>>2]=n;g[A+(B*152|0)+76>>2]=0.0;u=+g[d>>2];v=+g[d+4>>2];w=+g[d+8>>2];d=c[d+12>>2]|0;g[A+(B*152|0)+32>>2]=u;g[A+(B*152|0)+36>>2]=v;g[A+(B*152|0)+40>>2]=w;c[A+(B*152|0)+44>>2]=d;if(h|0){j=(g[l>>2]=(u*+g[h+304>>2]+v*+g[h+308>>2]+w*+g[h+312>>2])*+g[h+584>>2],c[l>>2]|0);k=(g[l>>2]=(u*+g[h+320>>2]+v*+g[h+324>>2]+w*+g[h+328>>2])*+g[h+588>>2],c[l>>2]|0);n=(g[l>>2]=(u*+g[h+336>>2]+v*+g[h+340>>2]+w*+g[h+344>>2])*+g[h+592>>2],c[l>>2]|0)}else{j=0;k=0;n=0}c[A+(B*152|0)+80>>2]=j;c[A+(B*152|0)+84>>2]=k;c[A+(B*152|0)+88>>2]=n;g[A+(B*152|0)+92>>2]=0.0;if(o|0){p=+g[o+304>>2]*x+ +g[o+308>>2]*y+ +g[o+312>>2]*z;r=+g[o+320>>2]*x+ +g[o+324>>2]*y+ +g[o+328>>2]*z;t=+g[o+336>>2]*x+ +g[o+340>>2]*y+ +g[o+344>>2]*z}else{p=0.0;r=0.0;t=0.0}if(h|0){m=+g[h+304>>2]*u+ +g[h+308>>2]*v+ +g[h+312>>2]*w;q=u*+g[h+320>>2]+v*+g[h+324>>2]+w*+g[h+328>>2];s=u*+g[h+336>>2]+v*+g[h+340>>2]+w*+g[h+344>>2]}else{m=0.0;q=0.0;s=0.0}s=1.0/(p*x+r*y+t*z+0.0+(m*u+q*v+s*w));g[A+(B*152|0)+108>>2]=s;if(o|0){p=+g[b+(e*244|0)+192>>2];q=+g[b+(e*244|0)+196>>2];r=+g[b+(e*244|0)+200>>2];m=(+g[b+(e*244|0)+176>>2]+ +g[b+(e*244|0)+208>>2])*0.0+(+g[b+(e*244|0)+180>>2]+ +g[b+(e*244|0)+212>>2])*0.0+(+g[b+(e*244|0)+184>>2]+ +g[b+(e*244|0)+216>>2])*0.0}else{p=0.0;q=0.0;r=0.0;m=0.0}m=m+(p*x+q*y+r*z);if(!h){t=0.0;x=0.0;z=0.0;y=-0.0;u=t*u;x=x*v;x=u+x;z=z*w;z=x+z;z=y+z;z=m+z;z=0.0-z;z=s*z;f=A+(B*152|0)+112|0;g[f>>2]=z;f=A+(B*152|0)+116|0;g[f>>2]=0.0;z=-i;f=A+(B*152|0)+120|0;g[f>>2]=z;B=A+(B*152|0)+124|0;g[B>>2]=i;return}t=+g[b+(f*244|0)+192>>2];x=+g[b+(f*244|0)+196>>2];z=+g[b+(f*244|0)+200>>2];y=(+g[b+(f*244|0)+176>>2]+ +g[b+(f*244|0)+208>>2])*-0.0+(+g[b+(f*244|0)+180>>2]+ +g[b+(f*244|0)+212>>2])*-0.0+(+g[b+(f*244|0)+184>>2]+ +g[b+(f*244|0)+216>>2])*-0.0;u=t*u;x=x*v;x=u+x;z=z*w;z=x+z;z=y+z;z=m+z;z=0.0-z;z=s*z;f=A+(B*152|0)+112|0;g[f>>2]=z;f=A+(B*152|0)+116|0;g[f>>2]=0.0;z=-i;f=A+(B*152|0)+120|0;g[f>>2]=z;B=A+(B*152|0)+124|0;g[B>>2]=i;return}function Bd(b){b=b|0;var d=0.0,e=0,f=0,h=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0;q=i;i=i+192|0;if(!(ob[c[(c[b>>2]|0)+20>>2]&127](b)|0)){i=q;return}j=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;mb[c[(c[j>>2]|0)+8>>2]&127](q+80|0,j);j=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;if(((ob[c[(c[j>>2]|0)+56>>2]&127](j)|0)&8|0?(e=c[b+24>>2]|0,e|0):0)?(k=ob[c[(c[e>>2]|0)+36>>2]&127](e)|0,(k|0)>0):0){f=0;do{h=c[b+24>>2]|0;h=Jb[c[(c[h>>2]|0)+40>>2]&31](h,f)|0;j=c[h+780>>2]|0;if((j|0)>0){e=0;do{r=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;lb[c[(c[r>>2]|0)+40>>2]&0](r,h+4+(e*192|0)+32|0,h+4+(e*192|0)+64|0,+g[h+4+(e*192|0)+80>>2],c[h+4+(e*192|0)+156>>2]|0,q+80+96|0);e=e+1|0}while((e|0)!=(j|0))}f=f+1|0}while((f|0)!=(k|0))}r=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;if((ob[c[(c[r>>2]|0)+56>>2]&127](r)|0)&3|0?(c[b+8>>2]|0)>0:0){h=0;do{f=c[(c[b+16>>2]|0)+(h<<2)>>2]|0;if(!(c[f+204>>2]&32)){if(ob[c[(c[b>>2]|0)+20>>2]&127](b)|0?(r=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0,(ob[c[(c[r>>2]|0)+56>>2]&127](r)|0)&1|0):0){c[q+64>>2]=1053609165;c[q+64+4>>2]=1053609165;c[q+64+8>>2]=1053609165;g[q+64+12>>2]=0.0;switch(c[f+216>>2]|0){case 1:{c[q+64>>2]=c[q+80>>2];c[q+64+4>>2]=c[q+80+4>>2];c[q+64+8>>2]=c[q+80+8>>2];c[q+64+12>>2]=c[q+80+12>>2];break}case 2:{c[q+64>>2]=c[q+80+16>>2];c[q+64+4>>2]=c[q+80+16+4>>2];c[q+64+8>>2]=c[q+80+16+8>>2];c[q+64+12>>2]=c[q+80+16+12>>2];break}case 3:{c[q+64>>2]=c[q+80+32>>2];c[q+64+4>>2]=c[q+80+32+4>>2];c[q+64+8>>2]=c[q+80+32+8>>2];c[q+64+12>>2]=c[q+80+32+12>>2];break}case 4:{c[q+64>>2]=c[q+80+48>>2];c[q+64+4>>2]=c[q+80+48+4>>2];c[q+64+8>>2]=c[q+80+48+8>>2];c[q+64+12>>2]=c[q+80+48+12>>2];break}case 5:{c[q+64>>2]=c[q+80+64>>2];c[q+64+4>>2]=c[q+80+64+4>>2];c[q+64+8>>2]=c[q+80+64+8>>2];c[q+64+12>>2]=c[q+80+64+12>>2];break}default:{c[q+64>>2]=1050253722;c[q+64+4>>2]=1050253722;c[q+64+8>>2]=1050253722;g[q+64+12>>2]=0.0}}Yb[c[(c[b>>2]|0)+28>>2]&127](b,f+4|0,c[f+192>>2]|0,q+64|0)}e=c[b+72>>2]|0;if(e|0?(ob[c[(c[e>>2]|0)+56>>2]&127](e)|0)&2|0:0){c[q+32>>2]=c[q+80+80>>2];c[q+32+4>>2]=c[q+80+80+4>>2];c[q+32+8>>2]=c[q+80+80+8>>2];c[q+32+12>>2]=c[q+80+80+12>>2];r=c[f+192>>2]|0;Yb[c[(c[r>>2]|0)+8>>2]&127](r,f+4|0,q+64|0,q+48|0);g[q+64>>2]=+g[q+64>>2]+-.019999999552965164;g[q+64+4>>2]=+g[q+64+4>>2]+-.019999999552965164;g[q+64+8>>2]=+g[q+64+8>>2]+-.019999999552965164;g[q+48>>2]=+g[q+48>>2]+.019999999552965164;g[q+48+4>>2]=+g[q+48+4>>2]+.019999999552965164;g[q+48+8>>2]=+g[q+48+8>>2]+.019999999552965164;do if((a[b+44>>0]|0?(c[f+248>>2]|0)==2:0)?(c[f+204>>2]&3|0)==0:0){r=c[f+192>>2]|0;Yb[c[(c[r>>2]|0)+8>>2]&127](r,f+68|0,q+16|0,q);d=+g[q+16>>2]+-.019999999552965164;g[q+16>>2]=d;l=+g[q+16+4>>2]+-.019999999552965164;g[q+16+4>>2]=l;m=+g[q+16+8>>2]+-.019999999552965164;g[q+16+8>>2]=m;n=+g[q>>2]+.019999999552965164;g[q>>2]=n;o=+g[q+4>>2]+.019999999552965164;g[q+4>>2]=o;p=+g[q+8>>2]+.019999999552965164;g[q+8>>2]=p;if(d<+g[q+64>>2])g[q+64>>2]=d;if(l<+g[q+64+4>>2])g[q+64+4>>2]=l;if(m<+g[q+64+8>>2])g[q+64+8>>2]=m;d=+g[q+16+12>>2];if(d<+g[q+64+12>>2])g[q+64+12>>2]=d;if(+g[q+48>>2]<n)g[q+48>>2]=n;if(+g[q+48+4>>2]<o)g[q+48+4>>2]=o;if(+g[q+48+8>>2]<p)g[q+48+8>>2]=p;d=+g[q+12>>2];if(!(+g[q+48+12>>2]<d))break;g[q+48+12>>2]=d}while(0);r=c[b+72>>2]|0;Yb[c[(c[r>>2]|0)+60>>2]&127](r,q+64|0,q+48|0,q+32|0)}}h=h+1|0}while((h|0)<(c[b+8>>2]|0))}i=q;return}function Cd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,i=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0;if(a[b+165>>0]|0){h=c[b+88>>2]|0;a:do if((h|0)>0&e){f=c[b+96>>2]|0;j=+g[d>>2];k=+g[d+4>>2];l=+g[d+8>>2];m=+g[b+168>>2];e=0;while(1){s=+g[f+(e<<4)>>2]-j;r=+g[f+(e<<4)+4>>2]-k;q=+g[f+(e<<4)+8>>2]-l;if(s*s+r*r+q*q<=m)break;e=e+1|0;if((e|0)>=(h|0))break a}return e|0}while(0);p=(c[b+32>>2]|0)+12|0;c[p>>2]=(c[p>>2]|0)+1;if((h|0)==(c[b+92>>2]|0)?(i=h|0?h<<1:1,(h|0)<(i|0)):0){if(!i)e=0;else{c[6324]=(c[6324]|0)+1;e=ic((i<<4|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}h=c[b+88>>2]|0}if((h|0)>0){f=0;do{p=e+(f<<4)|0;o=(c[b+96>>2]|0)+(f<<4)|0;c[p>>2]=c[o>>2];c[p+4>>2]=c[o+4>>2];c[p+8>>2]=c[o+8>>2];c[p+12>>2]=c[o+12>>2];f=f+1|0}while((f|0)!=(h|0))}f=c[b+96>>2]|0;if(f|0){if(a[b+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=e;c[b+92>>2]=i;e=c[b+88>>2]|0}else e=h;p=(c[b+96>>2]|0)+(e<<4)|0;c[p>>2]=c[d>>2];c[p+4>>2]=c[d+4>>2];c[p+8>>2]=c[d+8>>2];c[p+12>>2]=c[d+12>>2];d=c[b+88>>2]|0;c[b+88>>2]=d+1;c[(c[b+32>>2]|0)+16>>2]=c[b+96>>2];return d|0}h=c[b+108>>2]|0;b:do if((h|0)>0&e){f=c[b+116>>2]|0;j=+g[d>>2];k=+g[d+4>>2];l=+g[d+8>>2];m=+g[b+168>>2];e=0;while(1){q=+g[f+(e<<2)>>2]-j;r=+g[f+(e+1<<2)>>2]-k;s=+g[f+(e+2<<2)>>2]-l;i=e+3|0;if(q*q+r*r+s*s<=m)break;if((i|0)<(h|0))e=i;else break b}d=(e|0)/3|0;return d|0}while(0);e=c[b+112>>2]|0;if((h|0)==(e|0)){n=h|0?h<<1:1;if((h|0)<(n|0)){if(!n)e=0;else{c[6324]=(c[6324]|0)+1;e=ic((n<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}h=c[b+108>>2]|0}i=c[b+116>>2]|0;if((h|0)<=0)if(!i)f=b+120|0;else p=34;else{f=0;do{c[e+(f<<2)>>2]=c[i+(f<<2)>>2];f=f+1|0}while((f|0)!=(h|0));p=34}if((p|0)==34){if(a[b+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[i+-4>>2]|0)}c[b+116>>2]=0;f=b+120|0}a[f>>0]=1;c[b+116>>2]=e;c[b+112>>2]=n;f=c[b+108>>2]|0;i=n}else{f=h;i=h}}else{f=h;i=e}h=c[b+116>>2]|0;c[h+(f<<2)>>2]=c[d>>2];e=f+1|0;c[b+108>>2]=e;if((e|0)==(i|0)){n=i|0?i<<1:1;if((i|0)<(n|0)){if(!n)e=0;else{c[6324]=(c[6324]|0)+1;e=ic((n<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}i=c[b+108>>2]|0;h=c[b+116>>2]|0}if((i|0)<=0)if(!h)f=b+120|0;else p=48;else{f=0;do{c[e+(f<<2)>>2]=c[h+(f<<2)>>2];f=f+1|0}while((f|0)!=(i|0));p=48}if((p|0)==48){if(a[b+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+116>>2]=0;f=b+120|0}a[f>>0]=1;c[b+116>>2]=e;c[b+112>>2]=n;o=e;f=c[b+108>>2]|0;i=n}else{o=h;f=i;e=h}}else{o=h;f=e;e=h}c[o+(f<<2)>>2]=c[d+4>>2];f=f+1|0;c[b+108>>2]=f;if((f|0)==(i|0)){n=i|0?i<<1:1;if((i|0)<(n|0)){if(!n){e=0;h=o}else{c[6324]=(c[6324]|0)+1;e=ic((n<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}i=c[b+108>>2]|0;h=c[b+116>>2]|0}if((i|0)<=0)if(!h)f=b+120|0;else p=62;else{f=0;do{c[e+(f<<2)>>2]=c[h+(f<<2)>>2];f=f+1|0}while((f|0)!=(i|0));p=62}if((p|0)==62){if(a[b+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+116>>2]=0;f=b+120|0}a[f>>0]=1;c[b+116>>2]=e;c[b+112>>2]=n;h=e;f=c[b+108>>2]|0}else{h=o;f=i}}else h=o;c[h+(f<<2)>>2]=c[d+8>>2];d=f+1|0;c[b+108>>2]=d;b=c[b+32>>2]|0;c[b+12>>2]=(c[b+12>>2]|0)+1;c[b+16>>2]=e;d=((d|0)/3|0)+-1|0;return d|0}function Dd(b){b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0,k=0,l=0;j=i;i=i+16|0;if(!(a[b+1308>>0]|0)){i=j;return}g[b+928>>2]=0.0;g[b+992>>2]=0.0;g[b+1056>>2]=0.0;c[b+712>>2]=0;c[b+712+4>>2]=0;c[b+712+8>>2]=0;c[b+712+12>>2]=0;ed(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);kb[c[(c[b>>2]|0)+44>>2]&255](b);e=+g[b+1284>>2];f=+g[b+1288>>2];h=+g[b+1292>>2];if(+g[b+696>>2]>=+g[b+680>>2]){l=(a[b+1300>>0]|0)==0;d=c[(l?b+1160|0:b+1096|0)>>2]|0;k=c[(l?b+1144|0:b+1080|0)>>2]|0;c[j>>2]=c[(l?b+1128|0:b+1064|0)>>2];c[j+4>>2]=k;c[j+8>>2]=d;g[j+12>>2]=0.0;Bh(c[b+28>>2]|0,c[b+32>>2]|0,b+176|0,j,e,f,h,e,f,h)}if(+g[b+700>>2]>=+g[b+684>>2]){d=(a[b+1300>>0]|0)==0;l=c[(d?b+1164|0:b+1100|0)>>2]|0;k=c[(d?b+1148|0:b+1084|0)>>2]|0;c[j>>2]=c[(d?b+1132|0:b+1068|0)>>2];c[j+4>>2]=k;c[j+8>>2]=l;g[j+12>>2]=0.0;Bh(c[b+28>>2]|0,c[b+32>>2]|0,b+260|0,j,e,f,h,e,f,h)}if(+g[b+704>>2]>=+g[b+688>>2]){d=(a[b+1300>>0]|0)==0;l=c[(d?b+1168|0:b+1104|0)>>2]|0;k=c[(d?b+1152|0:b+1088|0)>>2]|0;c[j>>2]=c[(d?b+1136|0:b+1072|0)>>2];c[j+4>>2]=k;c[j+8>>2]=l;g[j+12>>2]=0.0;Bh(c[b+28>>2]|0,c[b+32>>2]|0,b+344|0,j,e,f,h,e,f,h)}e=+g[b+868>>2];f=+g[b+872>>2];h=+Tj(+g[b+1192>>2],e,f);g[b+920>>2]=h;do if(!(e>f)){if(e>h){c[b+924>>2]=1;g[b+916>>2]=h-e;if(h-e>3.1415927410125732){g[b+916>>2]=h-e+-6.2831854820251465;d=5;break}if(!(h-e<-3.1415927410125732)){d=5;break}g[b+916>>2]=h-e+6.2831854820251465;d=5;break}if(!(f<h)){c[b+924>>2]=0;d=54;break}c[b+924>>2]=2;g[b+916>>2]=h-f;if(h-f>3.1415927410125732){g[b+916>>2]=h-f+-6.2831854820251465;d=5;break}if(h-f<-3.1415927410125732){g[b+916>>2]=h-f+6.2831854820251465;d=5}else d=5}else{c[b+924>>2]=0;d=54}while(0);if((d|0)==54?a[b+912>>0]|0:0)d=5;if((d|0)==5){c[j>>2]=c[b+1208>>2];c[j+4>>2]=c[b+1208+4>>2];c[j+8>>2]=c[b+1208+8>>2];c[j+12>>2]=c[b+1208+12>>2];Bg(c[b+28>>2]|0,c[b+32>>2]|0,b+428|0,j)}e=+g[b+932>>2];f=+g[b+936>>2];h=+Tj(+g[b+1196>>2],e,f);g[b+984>>2]=h;do if(!(e>f)){if(e>h){c[b+988>>2]=1;g[b+980>>2]=h-e;if(h-e>3.1415927410125732){g[b+980>>2]=h-e+-6.2831854820251465;d=21;break}if(!(h-e<-3.1415927410125732)){d=21;break}g[b+980>>2]=h-e+6.2831854820251465;d=21;break}if(!(f<h)){c[b+988>>2]=0;d=19;break}c[b+988>>2]=2;g[b+980>>2]=h-f;if(h-f>3.1415927410125732){g[b+980>>2]=h-f+-6.2831854820251465;d=21;break}if(h-f<-3.1415927410125732){g[b+980>>2]=h-f+6.2831854820251465;d=21}else d=21}else{c[b+988>>2]=0;d=19}while(0);if((d|0)==19?a[b+976>>0]|0:0)d=21;if((d|0)==21){c[j>>2]=c[b+1224>>2];c[j+4>>2]=c[b+1224+4>>2];c[j+8>>2]=c[b+1224+8>>2];c[j+12>>2]=c[b+1224+12>>2];Bg(c[b+28>>2]|0,c[b+32>>2]|0,b+512|0,j)}e=+g[b+996>>2];f=+g[b+1e3>>2];h=+Tj(+g[b+1200>>2],e,f);g[b+1048>>2]=h;do if(!(e>f)){if(e>h){c[b+1052>>2]=1;g[b+1044>>2]=h-e;if(h-e>3.1415927410125732){g[b+1044>>2]=h-e+-6.2831854820251465;d=36;break}if(!(h-e<-3.1415927410125732)){d=36;break}g[b+1044>>2]=h-e+6.2831854820251465;d=36;break}if(!(f<h)){c[b+1052>>2]=0;d=35;break}c[b+1052>>2]=2;g[b+1044>>2]=h-f;if(h-f>3.1415927410125732){g[b+1044>>2]=h-f+-6.2831854820251465;d=36;break}if(h-f<-3.1415927410125732){g[b+1044>>2]=h-f+6.2831854820251465;d=36}else d=36}else{c[b+1052>>2]=0;d=35}while(0);if((d|0)==35?a[b+1040>>0]|0:0)d=36;if((d|0)==36){c[j>>2]=c[b+1240>>2];c[j+4>>2]=c[b+1240+4>>2];c[j+8>>2]=c[b+1240+8>>2];c[j+12>>2]=c[b+1240+12>>2];Bg(c[b+28>>2]|0,c[b+32>>2]|0,b+596|0,j)}i=j;return}function Ed(b,d,e){b=b|0;d=d|0;e=e|0;var f=0.0,h=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0,q=0,r=0,s=0;p=i;i=i+128|0;c[b+72>>2]=(c[b+72>>2]|0)+1;c[p>>2]=c[d>>2];c[p+4>>2]=c[d+4>>2];c[p+8>>2]=c[d+8>>2];c[p+12>>2]=c[d+12>>2];c[p+16>>2]=c[d+16>>2];c[p+16+4>>2]=c[d+16+4>>2];c[p+16+8>>2]=c[d+16+8>>2];c[p+16+12>>2]=c[d+16+12>>2];c[p+32>>2]=c[d+32>>2];c[p+32+4>>2]=c[d+32+4>>2];c[p+32+8>>2]=c[d+32+8>>2];c[p+32+12>>2]=c[d+32+12>>2];c[p+48>>2]=c[d+48>>2];c[p+48+4>>2]=c[d+48+4>>2];c[p+48+8>>2]=c[d+48+8>>2];c[p+48+12>>2]=c[d+48+12>>2];n=c[e+4>>2]|0;o=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);Yb[c[(c[e>>2]|0)+8>>2]&127](e,d,p+112|0,p+96|0);f=+g[p+112>>2];if(+g[b+36>>2]>f)g[b+36>>2]=f;f=+g[p+96>>2];if(+g[b+52>>2]<f)g[b+52>>2]=f;f=+g[p+112+4>>2];if(+g[b+40>>2]>f)g[b+40>>2]=f;f=+g[p+96+4>>2];if(+g[b+56>>2]<f)g[b+56>>2]=f;f=+g[p+112+8>>2];if(+g[b+44>>2]>f)g[b+44>>2]=f;f=+g[p+96+8>>2];if(+g[b+60>>2]<f)g[b+60>>2]=f;l=c[b+68>>2]|0;if(!l){l=b+20|0;k=0}else{c[p+64>>2]=c[p+112>>2];c[p+64+4>>2]=c[p+112+4>>2];c[p+64+8>>2]=c[p+112+8>>2];c[p+64+12>>2]=c[p+112+12>>2];c[p+64+16>>2]=c[p+96>>2];c[p+64+16+4>>2]=c[p+96+4>>2];c[p+64+16+8>>2]=c[p+96+8>>2];c[p+64+16+12>>2]=c[p+96+12>>2];k=c[b+20>>2]|0;d=c[l+4>>2]|0;if(!d){c[6324]=(c[6324]|0)+1;d=ic(63)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}h=d;j=h+44|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(j|0))}else c[l+4>>2]=0;c[d+32>>2]=0;c[d+36>>2]=k;c[d+40>>2]=0;c[d>>2]=c[p+64>>2];c[d+4>>2]=c[p+64+4>>2];c[d+8>>2]=c[p+64+8>>2];c[d+12>>2]=c[p+64+12>>2];c[d+16>>2]=c[p+64+16>>2];c[d+20>>2]=c[p+64+20>>2];c[d+24>>2]=c[p+64+24>>2];c[d+28>>2]=c[p+64+28>>2];Ze(l,c[l>>2]|0,d);c[l+12>>2]=(c[l+12>>2]|0)+1;l=b+20|0;k=d}d=c[l>>2]|0;if((d|0)==(c[b+24>>2]|0)?(m=d|0?d<<1:1,(d|0)<(m|0)):0){if(!m)j=0;else{c[6324]=(c[6324]|0)+1;d=ic((m*80|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}j=d;d=c[l>>2]|0}if((d|0)>0){h=0;do{q=j+(h*80|0)|0;r=c[b+28>>2]|0;s=r+(h*80|0)|0;c[q>>2]=c[s>>2];c[q+4>>2]=c[s+4>>2];c[q+8>>2]=c[s+8>>2];c[q+12>>2]=c[s+12>>2];q=j+(h*80|0)+16|0;s=r+(h*80|0)+16|0;c[q>>2]=c[s>>2];c[q+4>>2]=c[s+4>>2];c[q+8>>2]=c[s+8>>2];c[q+12>>2]=c[s+12>>2];q=j+(h*80|0)+32|0;s=r+(h*80|0)+32|0;c[q>>2]=c[s>>2];c[q+4>>2]=c[s+4>>2];c[q+8>>2]=c[s+8>>2];c[q+12>>2]=c[s+12>>2];q=j+(h*80|0)+48|0;s=r+(h*80|0)+48|0;c[q>>2]=c[s>>2];c[q+4>>2]=c[s+4>>2];c[q+8>>2]=c[s+8>>2];c[q+12>>2]=c[s+12>>2];q=j+(h*80|0)+64|0;r=r+(h*80|0)+64|0;c[q>>2]=c[r>>2];c[q+4>>2]=c[r+4>>2];c[q+8>>2]=c[r+8>>2];c[q+12>>2]=c[r+12>>2];h=h+1|0}while((h|0)!=(d|0))}d=c[b+28>>2]|0;if(d|0){if(a[b+32>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+28>>2]=0}a[b+32>>0]=1;c[b+28>>2]=j;c[b+24>>2]=m;d=c[l>>2]|0}s=c[b+28>>2]|0;r=s+(d*80|0)|0;c[r>>2]=c[p>>2];c[r+4>>2]=c[p+4>>2];c[r+8>>2]=c[p+8>>2];c[r+12>>2]=c[p+12>>2];r=s+(d*80|0)+16|0;c[r>>2]=c[p+16>>2];c[r+4>>2]=c[p+16+4>>2];c[r+8>>2]=c[p+16+8>>2];c[r+12>>2]=c[p+16+12>>2];r=s+(d*80|0)+32|0;c[r>>2]=c[p+32>>2];c[r+4>>2]=c[p+32+4>>2];c[r+8>>2]=c[p+32+8>>2];c[r+12>>2]=c[p+32+12>>2];r=s+(d*80|0)+48|0;c[r>>2]=c[p+48>>2];c[r+4>>2]=c[p+48+4>>2];c[r+8>>2]=c[p+48+8>>2];c[r+12>>2]=c[p+48+12>>2];s=s+(d*80|0)+64|0;c[s>>2]=e;c[s+4>>2]=n;g[s+8>>2]=o;c[s+12>>2]=k;c[l>>2]=(c[l>>2]|0)+1;i=p;return}function Fd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0;m=i;i=i+400|0;f=c[d+36>>2]|0;d=c[e+36>>2]|0;e=c[b+24>>2]|0;if(((e|0)==(c[b+28>>2]|0)?c[e+1172>>2]|0:0)?(k=(S(c[d+380>>2]|0,c[e+1152>>2]|0)|0)+(c[f+380>>2]|0)|0,a[(c[e+1180>>2]|0)+k>>0]|0):0){c[5690]=(c[5690]|0)+1;i=m;return}c[m+332+4>>2]=35;c[m+332+8>>2]=0;c[m+332+12>>2]=-1;c[m+332+16>>2]=1065353216;c[m+332+20>>2]=1065353216;c[m+332+24>>2]=1065353216;g[m+332+28>>2]=0.0;c[m+332>>2]=3252;c[m+332+56>>2]=f;g[m+332+48>>2]=0.0;c[m+272+4>>2]=35;c[m+272+8>>2]=0;c[m+272+12>>2]=-1;c[m+272+16>>2]=1065353216;c[m+272+20>>2]=1065353216;c[m+272+24>>2]=1065353216;g[m+272+28>>2]=0.0;c[m+272>>2]=3252;c[m+272+56>>2]=d;g[m+272+48>>2]=0.0;if(!(a[21984]|0)){a[21984]=1;if(!(a[21992]|0)){a[21992]=1;c[5577]=1065353216;c[5578]=0;c[5579]=0;c[5580]=0;c[5581]=0;c[5582]=1065353216;c[5583]=0;c[5584]=0;c[5585]=0;c[5586]=0;c[5587]=1065353216;g[5588]=0.0}c[5561]=c[5577];c[5562]=c[5578];c[5563]=c[5579];c[5564]=c[5580];c[5565]=c[5581];c[5566]=c[5582];c[5567]=c[5583];c[5568]=c[5584];c[5569]=c[5585];c[5570]=c[5586];c[5571]=c[5587];c[5572]=c[5588];c[5573]=0;c[5574]=0;c[5575]=0;c[5576]=0}if(!(a[21984]|0)){a[21984]=1;if(!(a[21992]|0)){a[21992]=1;c[5577]=1065353216;c[5578]=0;c[5579]=0;c[5580]=0;c[5581]=0;c[5582]=1065353216;c[5583]=0;c[5584]=0;c[5585]=0;c[5586]=0;c[5587]=1065353216;g[5588]=0.0}c[5561]=c[5577];c[5562]=c[5578];c[5563]=c[5579];c[5564]=c[5580];c[5565]=c[5581];c[5566]=c[5582];c[5567]=c[5583];c[5568]=c[5584];c[5569]=c[5585];c[5570]=c[5586];c[5571]=c[5587];c[5572]=c[5588];c[5573]=0;c[5574]=0;c[5575]=0;c[5576]=0}o=+g[f+232>>2]-+g[d+232>>2];n=+g[f+236>>2]-+g[d+236>>2];g[m>>2]=+g[f+228>>2]-+g[d+228>>2];g[m+4>>2]=o;g[m+8>>2]=n;g[m+12>>2]=0.0;if(!(!(td(m+332|0,22244,m+272|0,22244,m,m+216|0)|0)?!(Bc(m+332|0,22244,m+272|0,22244,m,m+216|0,0)|0):0))h=15;if((h|0)==15?(c[m+4>>2]=0,c[m+4+4>>2]=0,c[m+4+8>>2]=0,c[m+4+12>>2]=0,c[m+4+16>>2]=0,c[m+4+20>>2]=0,a[m+152>>0]=0,c[m>>2]=3072,Uc(b,m+216|0,f,0,0,d,0,0,m)|0):0){c[6324]=(c[6324]|0)+1;d=ic(235)|0;if(!d)k=0;else{c[(d+4+15&-16)+-4>>2]=d;k=d+4+15&-16}e=k+4|0;d=k+152|0;yn(e|0,0,212)|0;c[k>>2]=3072;f=m+4|0;h=e+100|0;do{c[e>>2]=c[f>>2];e=e+4|0;f=f+4|0}while((e|0)<(h|0));e=k+104|0;c[e>>2]=c[m+104>>2];c[e+4>>2]=c[m+104+4>>2];c[e+8>>2]=c[m+104+8>>2];c[e+12>>2]=c[m+104+12>>2];e=k+120|0;c[e>>2]=c[m+120>>2];c[e+4>>2]=c[m+120+4>>2];c[e+8>>2]=c[m+120+8>>2];c[e+12>>2]=c[m+120+12>>2];e=k+136|0;c[e>>2]=c[m+136>>2];c[e+4>>2]=c[m+136+4>>2];c[e+8>>2]=c[m+136+8>>2];c[e+12>>2]=c[m+136+12>>2];a[d>>0]=a[m+152>>0]|0;e=k+156|0;f=m+156|0;h=e+60|0;do{c[e>>2]=c[f>>2];e=e+4|0;f=f+4|0}while((e|0)<(h|0));h=c[b+24>>2]|0;j=k;d=c[h+892>>2]|0;if((d|0)==(c[h+896>>2]|0)?(l=d|0?d<<1:1,(d|0)<(l|0)):0){if(!l)f=0;else{c[6324]=(c[6324]|0)+1;d=ic((l<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}f=d;d=c[h+892>>2]|0}if((d|0)>0){e=0;do{c[f+(e<<2)>>2]=c[(c[h+900>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(d|0))}e=c[h+900>>2]|0;if(e){if(a[h+904>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);d=c[h+892>>2]|0}c[h+900>>2]=0}a[h+904>>0]=1;c[h+900>>2]=f;c[h+896>>2]=l}c[(c[h+900>>2]|0)+(d<<2)>>2]=j;c[h+892>>2]=d+1;j=c[b+24>>2]|0;l=c[b+28>>2]|0;n=+g[j+388>>2];o=+g[l+388>>2];b=k+64|0;g[b>>2]=+g[b>>2]*(n>o?n:o);b=k+68|0;g[b>>2]=+g[b>>2]*(+g[j+400>>2]+ +g[l+400>>2])*.5}i=m;return}function Gd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;while(1){o=(b+d|0)/2|0;m=c[a+12>>2]|0;p=c[m+(o<<4)>>2]|0;n=c[m+(o<<4)+4>>2]|0;o=c[m+(o<<4)+8>>2]|0;e=d;f=b;while(1){a:do if(!p)while(1){j=c[m+(f<<4)>>2]|0;if(!j)g=-1;else g=c[j+12>>2]|0;k=c[m+(f<<4)+4>>2]|0;if(!k)h=-1;else h=c[k+12>>2]|0;if(!n)i=-1;else i=c[n+12>>2]|0;do if((g|0)<=-1){g=(h|0)>(i|0);if(g|(j|0)==0^1)if((j|0)==0&g)break;else break a;if((k|0)!=(n|0))break a;if((c[m+(f<<4)+8>>2]|0)>>>0<=o>>>0)break a}while(0);f=f+1|0}else{l=c[p+12>>2]|0;if(!n)while(1){i=c[m+(f<<4)>>2]|0;if(!i)g=-1;else g=c[i+12>>2]|0;j=c[m+(f<<4)+4>>2]|0;if(!j)h=-1;else h=c[j+12>>2]|0;do if((g|0)<=(l|0)){g=(h|0)>-1;if(g|(i|0)==(p|0)^1)if((i|0)==(p|0)&g)break;else break a;if(j|0)break a;if((c[m+(f<<4)+8>>2]|0)>>>0<=o>>>0)break a}while(0);f=f+1|0}k=c[n+12>>2]|0;while(1){i=c[m+(f<<4)>>2]|0;if(!i)g=-1;else g=c[i+12>>2]|0;j=c[m+(f<<4)+4>>2]|0;if(!j)h=-1;else h=c[j+12>>2]|0;do if((g|0)<=(l|0)){g=(h|0)>(k|0);if(g|(i|0)==(p|0)^1)if((i|0)==(p|0)&g)break;else break a;if((j|0)!=(n|0))break a;if((c[m+(f<<4)+8>>2]|0)>>>0<=o>>>0)break a}while(0);f=f+1|0}}while(0);b:do if(!p)while(1){j=c[m+(e<<4)>>2]|0;if(!j)g=-1;else g=c[j+12>>2]|0;if(!n)h=-1;else h=c[n+12>>2]|0;k=c[m+(e<<4)+4>>2]|0;if(!k)i=-1;else i=c[k+12>>2]|0;do if((g|0)>=-1){g=(h|0)>(i|0);if(g|(j|0)==0^1)if((j|0)==0&g)break;else break b;if((n|0)!=(k|0))break b;if(o>>>0<=(c[m+(e<<4)+8>>2]|0)>>>0)break b}while(0);e=e+-1|0}else{l=c[p+12>>2]|0;if(!n)while(1){i=c[m+(e<<4)>>2]|0;if(!i)g=-1;else g=c[i+12>>2]|0;j=c[m+(e<<4)+4>>2]|0;if(!j)h=-1;else h=c[j+12>>2]|0;do if((l|0)<=(g|0)){g=(h|0)<-1;if(g|(p|0)==(i|0)^1)if((p|0)==(i|0)&g)break;else break b;if(j|0)break b;if(o>>>0<=(c[m+(e<<4)+8>>2]|0)>>>0)break b}while(0);e=e+-1|0}k=c[n+12>>2]|0;while(1){i=c[m+(e<<4)>>2]|0;if(!i)g=-1;else g=c[i+12>>2]|0;j=c[m+(e<<4)+4>>2]|0;if(!j)h=-1;else h=c[j+12>>2]|0;do if((l|0)<=(g|0)){g=(k|0)>(h|0);if(g|(p|0)==(i|0)^1)if((p|0)==(i|0)&g)break;else break b;if((n|0)!=(j|0))break b;if(o>>>0<=(c[m+(e<<4)+8>>2]|0)>>>0)break b}while(0);e=e+-1|0}}while(0);if((f|0)<=(e|0)){h=m+(f<<4)|0;i=c[h>>2]|0;j=c[m+(f<<4)+4>>2]|0;k=c[m+(f<<4)+8>>2]|0;l=c[m+(f<<4)+12>>2]|0;m=m+(e<<4)|0;c[h>>2]=c[m>>2];c[h+4>>2]=c[m+4>>2];c[h+8>>2]=c[m+8>>2];c[h+12>>2]=c[m+12>>2];m=c[a+12>>2]|0;c[m+(e<<4)>>2]=i;c[m+(e<<4)+4>>2]=j;c[m+(e<<4)+8>>2]=k;c[m+(e<<4)+12>>2]=l;e=e+-1|0;f=f+1|0}if((f|0)>(e|0))break;m=c[a+12>>2]|0}if((e|0)>(b|0))Gd(a,b,e);if((f|0)<(d|0))b=f;else break}return}function Hd(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=+h;var j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0,t=0.0;j=i;i=i+464|0;c[j+128>>2]=c[d>>2];c[j+128+4>>2]=c[d+4>>2];c[j+128+8>>2]=c[d+8>>2];c[j+128+12>>2]=c[d+12>>2];c[j+128+16>>2]=c[d+16>>2];c[j+128+16+4>>2]=c[d+16+4>>2];c[j+128+16+8>>2]=c[d+16+8>>2];c[j+128+16+12>>2]=c[d+16+12>>2];c[j+128+32>>2]=c[d+32>>2];c[j+128+32+4>>2]=c[d+32+4>>2];c[j+128+32+8>>2]=c[d+32+8>>2];c[j+128+32+12>>2]=c[d+32+12>>2];l=j+128+48|0;c[l>>2]=c[d+48>>2];c[l+4>>2]=c[d+48+4>>2];c[l+8>>2]=c[d+48+8>>2];c[l+12>>2]=c[d+48+12>>2];c[j+64>>2]=c[e>>2];c[j+64+4>>2]=c[e+4>>2];c[j+64+8>>2]=c[e+8>>2];c[j+64+12>>2]=c[e+12>>2];c[j+64+16>>2]=c[e+16>>2];c[j+64+16+4>>2]=c[e+16+4>>2];c[j+64+16+8>>2]=c[e+16+8>>2];c[j+64+16+12>>2]=c[e+16+12>>2];c[j+64+32>>2]=c[e+32>>2];c[j+64+32+4>>2]=c[e+32+4>>2];c[j+64+32+8>>2]=c[e+32+8>>2];c[j+64+32+12>>2]=c[e+32+12>>2];k=j+64+48|0;c[k>>2]=c[e+48>>2];c[k+4>>2]=c[e+48+4>>2];c[k+8>>2]=c[e+48+8>>2];c[k+12>>2]=c[e+48+12>>2];rf(j+128|0,j+64|0,j+256|0,j+192|0);t=+g[j+192>>2];m=t*+g[j+256+4>>2];r=t*+g[j+256+8>>2];g[j+16>>2]=+g[j+256>>2]*t;g[j+16+4>>2]=m;g[j+16+8>>2]=r;g[j+16+12>>2]=0.0;c[j+256>>2]=0;c[j+256+4>>2]=0;c[j+256+8>>2]=0;c[j+256+12>>2]=0;c[j+192+48>>2]=0;c[j+192+48+4>>2]=0;c[j+192+48+8>>2]=0;c[j+192+48+12>>2]=0;Jg(j+128|0,j);r=+g[j>>2];m=+g[j+4>>2];t=+g[j+8>>2];q=+g[j+12>>2];o=r*(2.0/(r*r+m*m+t*t+q*q));n=m*(2.0/(r*r+m*m+t*t+q*q));p=t*(2.0/(r*r+m*m+t*t+q*q));g[j+192>>2]=1.0-(m*n+t*p);g[j+192+4>>2]=r*n-q*p;g[j+192+8>>2]=r*p+q*n;g[j+192+12>>2]=0.0;g[j+192+16>>2]=r*n+q*p;g[j+192+20>>2]=1.0-(r*o+t*p);g[j+192+24>>2]=m*p-q*o;g[j+192+28>>2]=0.0;g[j+192+32>>2]=r*p-q*n;g[j+192+36>>2]=m*p+q*o;g[j+192+40>>2]=1.0-(r*o+m*n);g[j+192+44>>2]=0.0;eh(b,j+192|0,j+256|0,j+16|0,j+48|0,j+32|0);c[j+256>>2]=5968;c[j+256+36>>2]=c[d>>2];c[j+256+36+4>>2]=c[d+4>>2];c[j+256+36+8>>2]=c[d+8>>2];c[j+256+36+12>>2]=c[d+12>>2];c[j+256+52>>2]=c[d+16>>2];c[j+256+52+4>>2]=c[d+16+4>>2];c[j+256+52+8>>2]=c[d+16+8>>2];c[j+256+52+12>>2]=c[d+16+12>>2];c[j+256+68>>2]=c[d+32>>2];c[j+256+68+4>>2]=c[d+32+4>>2];c[j+256+68+8>>2]=c[d+32+8>>2];c[j+256+68+12>>2]=c[d+32+12>>2];s=j+256+84|0;c[s>>2]=c[d+48>>2];c[s+4>>2]=c[d+48+4>>2];c[s+8>>2]=c[d+48+8>>2];c[s+12>>2]=c[d+48+12>>2];c[j+256+100>>2]=c[e>>2];c[j+256+100+4>>2]=c[e+4>>2];c[j+256+100+8>>2]=c[e+8>>2];c[j+256+100+12>>2]=c[e+12>>2];c[j+256+116>>2]=c[e+16>>2];c[j+256+116+4>>2]=c[e+16+4>>2];c[j+256+116+8>>2]=c[e+16+8>>2];c[j+256+116+12>>2]=c[e+16+12>>2];c[j+256+132>>2]=c[e+32>>2];c[j+256+132+4>>2]=c[e+32+4>>2];c[j+256+132+8>>2]=c[e+32+8>>2];c[j+256+132+12>>2]=c[e+32+12>>2];d=j+256+148|0;c[d>>2]=c[e+48>>2];c[d+4>>2]=c[e+48+4>>2];c[d+8>>2]=c[e+48+8>>2];c[d+12>>2]=c[e+48+12>>2];c[j+256+180>>2]=a;c[j+256+184>>2]=f;g[j+256+188>>2]=h;c[j+256+192>>2]=b;n=+g[d>>2]-+g[s>>2];m=+g[j+256+152>>2]-+g[j+256+88>>2];o=+g[j+256+156>>2]-+g[j+256+92>>2];h=1.0/+G(+(n*n+m*m+o*o));r=n*h==0.0?999999984306749440.0:1.0/(n*h);g[j+256+4>>2]=r;q=m*h==0.0?999999984306749440.0:1.0/(m*h);g[j+256+8>>2]=q;p=o*h==0.0?999999984306749440.0:1.0/(o*h);g[j+256+12>>2]=p;c[j+256+20>>2]=r<0.0&1;c[j+256+24>>2]=q<0.0&1;c[j+256+28>>2]=p<0.0&1;g[j+256+32>>2]=o*o*h+(n*n*h+m*m*h);f=c[a+68>>2]|0;Ab[c[(c[f>>2]|0)+24>>2]&7](f,l,k,j+256|0,j+48|0,j+32|0);i=j;return}function Id(a,b,d,e){a=a|0;b=b|0;d=d|0;e=+e;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0.0,D=0.0,E=0.0,H=0,I=0;B=i;i=i+192|0;A=c[a+4>>2]|0;t=+g[A+784>>2];if(t<e){i=B;return}y=c[A+772>>2]|0;w=(c[a+8>>2]|0)+8|0;z=c[w>>2]|0;j=+g[d>>2];q=+g[b>>2]*e+j;k=+g[d+4>>2];r=+g[b+4>>2]*e+k;h=+g[d+8>>2];s=+g[b+8>>2]*e+h;x=(c[a+12>>2]|0)+8|0;f=c[x>>2]|0;n=+g[f+52>>2];o=+g[f+56>>2];if((y|0)!=(z|0)){C=s-+g[f+60>>2];v=j-+g[z+52>>2];u=k-+g[z+56>>2];h=h-+g[z+60>>2];l=v*+g[z+4>>2]+u*+g[z+20>>2]+h*+g[z+36>>2];m=v*+g[z+8>>2]+u*+g[z+24>>2]+h*+g[z+40>>2];h=v*+g[z+12>>2]+u*+g[z+28>>2]+h*+g[z+44>>2];u=(q-n)*+g[f+4>>2]+(r-o)*+g[f+20>>2]+C*+g[f+36>>2];v=(q-n)*+g[f+8>>2]+(r-o)*+g[f+24>>2]+C*+g[f+40>>2];n=(q-n)*+g[f+12>>2]+(r-o)*+g[f+28>>2]+C*+g[f+44>>2]}else{E=q-+g[y+52>>2];D=r-+g[y+56>>2];C=s-+g[y+60>>2];h=h-+g[f+60>>2];l=(j-n)*+g[f+4>>2]+(k-o)*+g[f+20>>2]+h*+g[f+36>>2];m=(j-n)*+g[f+8>>2]+(k-o)*+g[f+24>>2]+h*+g[f+40>>2];h=(j-n)*+g[f+12>>2]+(k-o)*+g[f+28>>2]+h*+g[f+44>>2];u=E*+g[y+4>>2]+D*+g[y+20>>2]+C*+g[y+36>>2];v=E*+g[y+8>>2]+D*+g[y+24>>2]+C*+g[y+40>>2];n=E*+g[y+12>>2]+D*+g[y+28>>2]+C*+g[y+44>>2]}g[B>>2]=u;g[B+4>>2]=v;g[B+8>>2]=n;g[B+12>>2]=0.0;g[B+16>>2]=l;g[B+20>>2]=m;g[B+24>>2]=h;g[B+28>>2]=0.0;c[B+64>>2]=c[b>>2];c[B+64+4>>2]=c[b+4>>2];c[B+64+8>>2]=c[b+8>>2];c[B+64+12>>2]=c[b+12>>2];g[B+80>>2]=e;c[B+84>>2]=0;c[B+84+4>>2]=0;c[B+84+8>>2]=0;c[B+84+12>>2]=0;f=B+116|0;b=f+44|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(b|0));g[B+48>>2]=q;g[B+52>>2]=r;g[B+56>>2]=s;g[B+60>>2]=0.0;c[B+32>>2]=c[d>>2];c[B+32+4>>2]=c[d+4>>2];c[B+32+8>>2]=c[d+8>>2];c[B+32+12>>2]=c[d+12>>2];p=c[A+780>>2]|0;if((p|0)>0){d=-1;b=0;h=t*t;while(1){j=+g[A+4+(b*192|0)>>2]-u;k=+g[A+4+(b*192|0)+4>>2]-v;l=+g[A+4+(b*192|0)+8>>2]-n;f=j*j+k*k+l*l<h;d=f?b:d;b=b+1|0;if((b|0)==(p|0))break;else h=f?j*j+k*k+l*l:h}}else d=-1;b=c[w>>2]|0;f=c[x>>2]|0;E=+g[b+224>>2];D=+g[f+224>>2];C=E*D<-10.0?-10.0:E*D;g[B+84>>2]=C>10.0?10.0:C;g[B+96>>2]=+g[b+228>>2]*+g[f+228>>2];C=+g[b+232>>2]*D+ +g[f+232>>2]*E;C=C<-10.0?-10.0:C;g[B+88>>2]=C>10.0?10.0:C;E=+g[b+236>>2]*D+ +g[f+236>>2]*E;E=E<-10.0?-10.0:E;g[B+92>>2]=E>10.0?10.0:E;if(!((c[b+204>>2]&128|0)==0?!(c[f+204>>2]&128|0):0)){g[B+148>>2]=+g[b+240>>2]+ +g[f+240>>2];g[B+144>>2]=1.0/(1.0/+g[b+244>>2]+1.0/+g[f+244>>2]);c[B+120>>2]=8}h=+g[B+72>>2];x=+F(+h)>.7071067690849304;k=+g[B+68>>2];if(x){j=1.0/+G(+(h*h+k*k));m=+g[B+64>>2];l=-(j*k*m);m=m*-(j*h);n=(h*h+k*k)*j;o=j*k;j=-(j*h);h=0.0}else{j=+g[B+64>>2];E=1.0/+G(+(j*j+k*k));l=h*-(k*E);m=(j*j+k*k)*E;n=-(E*j*h);o=0.0;j=E*j;h=-(k*E)}g[B+160>>2]=h;g[B+164>>2]=j;g[B+168>>2]=o;g[B+176>>2]=n;g[B+180>>2]=l;g[B+184>>2]=m;w=c[a+20>>2]|0;p=c[a+16>>2]|0;x=c[a+28>>2]|0;a=c[a+24>>2]|0;c[B+100>>2]=(y|0)!=(z|0)?w:p;c[B+104>>2]=(y|0)!=(z|0)?p:w;c[B+108>>2]=(y|0)!=(z|0)?x:a;c[B+112>>2]=(y|0)!=(z|0)?a:x;if((d|0)>-1){z=A+4+(d*192|0)+156|0;y=c[z>>2]|0;b=A+4+(d*192|0)+124|0;f=c[b>>2]|0;w=A+4+(d*192|0)+128|0;p=c[w>>2]|0;a=A+4+(d*192|0)+132|0;x=c[a>>2]|0;H=A+4+(d*192|0)+116|0;I=c[H>>2]|0;Lm(A+4+(d*192|0)|0,B|0,192)|0;c[H>>2]=I;c[b>>2]=f;c[w>>2]=p;c[a>>2]=x;c[z>>2]=y}else Le(A,B)|0;i=B;return}function Jd(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,m=0.0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0;C=i;i=i+272|0;z=+g[e+48>>2]-+g[d+48>>2];A=+g[e+52>>2]-+g[d+52>>2];B=+g[e+56>>2]-+g[d+56>>2];rf(d,e,C+256|0,C+208|0);v=+g[C+208>>2];t=+g[C+256>>2]*v;u=v*+g[C+256+4>>2];v=v*+g[C+256+8>>2];g[C+192>>2]=t;g[C+192+4>>2]=u;g[C+192+8>>2]=v;g[C+192+12>>2]=0.0;w=+g[h+48>>2]-+g[f+48>>2];x=+g[h+52>>2]-+g[f+52>>2];y=+g[h+56>>2]-+g[f+56>>2];rf(f,h,C+256|0,C+208|0);r=+g[C+208>>2];p=+g[C+256>>2]*r;q=r*+g[C+256+4>>2];r=r*+g[C+256+8>>2];g[C+176>>2]=p;g[C+176+4>>2]=q;g[C+176+8>>2]=r;g[C+176+12>>2]=0.0;e=c[b+12>>2]|0;s=+Cb[c[(c[e>>2]|0)+16>>2]&15](e);e=c[b+16>>2]|0;if(!e)m=0.0;else m=+Cb[c[(c[e>>2]|0)+16>>2]&15](e);s=s*+G(+(t*t+u*u+v*v))+m*+G(+(p*p+q*q+r*r));if(s+ +G(+((w-z)*(w-z)+(x-A)*(x-A)+(y-B)*(y-B)))==0.0){j=0;i=C;return j|0}c[C+208>>2]=8756;g[C+208+36>>2]=999999984306749440.0;a[C+208+40>>0]=0;vd(b,d,f,C+208|0);h=(a[C+208+40>>0]|0)==0;c[C+256>>2]=c[C+208+20>>2];c[C+256+4>>2]=c[C+208+20+4>>2];c[C+256+8>>2]=c[C+208+20+8>>2];c[C+256+12>>2]=c[C+208+20+12>>2];a:do if(!h?(o=c[C+208+4>>2]|0,k=c[C+208+8>>2]|0,n=c[C+208+12>>2]|0,v=(w-z)*(c[l>>2]=o,+g[l>>2]),v=v+(x-A)*(c[l>>2]=k,+g[l>>2]),!(s+(v+(y-B)*(c[l>>2]=n,+g[l>>2]))<=1.1920928955078125e-007)):0){m=+g[C+208+16>>2];p=+g[C+208+36>>2]+ +g[j+172>>2];b:do if(p>1.0000000474974513e-003){h=0;q=0.0;r=p;while(1){e=c[j+168>>2]|0;if(e|0){D=c[(c[e>>2]|0)+28>>2]|0;c[C+112>>2]=1065353216;c[C+112+4>>2]=1065353216;c[C+112+8>>2]=1065353216;g[C+112+12>>2]=0.0;pb[D&7](e,C+256|0,.20000000298023224,C+112|0)}m=(w-z)*(c[l>>2]=o,+g[l>>2]);m=m+(x-A)*(c[l>>2]=k,+g[l>>2]);m=s+(m+(y-B)*(c[l>>2]=n,+g[l>>2]));if(m<=1.1920928955078125e-007){k=0;break a}p=q+r/m;if(!(!(p<=q)&(!(p<0.0)&!(p>1.0)))){k=0;break a}Mg(d,z,A,B,C+192|0,p,C+112|0);Mg(f,w,x,y,C+176|0,p,C+48|0);k=c[j+168>>2]|0;if(k|0){D=c[(c[k>>2]|0)+28>>2]|0;c[C>>2]=1065353216;c[C+4>>2]=0;c[C+8>>2]=0;g[C+12>>2]=0.0;pb[D&7](k,C+112+48|0,.20000000298023224,C)}jb[c[c[j>>2]>>2]&31](j,p);c[C>>2]=8756;g[C+36>>2]=999999984306749440.0;a[C+40>>0]=0;vd(b,C+112|0,C+48|0,C);if(!(a[C+40>>0]|0)){k=15;break}m=+g[C+36>>2];q=+g[j+172>>2];c[C+256>>2]=c[C+20>>2];c[C+256+4>>2]=c[C+20+4>>2];c[C+256+8>>2]=c[C+20+8>>2];c[C+256+12>>2]=c[C+20+12>>2];e=h+1|0;if((h|0)>63){k=16;break}n=c[C+12>>2]|0;k=c[C+8>>2]|0;o=c[C+4>>2]|0;r=m+q;if(!(r>1.0000000474974513e-003)){m=+g[C+16>>2];break b}else{h=e;q=p}}if((k|0)==15)Ub[c[(c[j>>2]|0)+8>>2]&127](j,-1,h);else if((k|0)==16)Ub[c[(c[j>>2]|0)+8>>2]&127](j,-2,e);k=0;break a}else p=0.0;while(0);g[j+164>>2]=p;c[j+132>>2]=o;c[j+136>>2]=k;c[j+140>>2]=n;g[j+144>>2]=m;c[j+148>>2]=c[C+256>>2];c[j+148+4>>2]=c[C+256+4>>2];c[j+148+8>>2]=c[C+256+8>>2];c[j+148+12>>2]=c[C+256+12>>2];k=1}else k=0;while(0);D=k;i=C;return D|0}function Kd(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=+h;var j=0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0;D=i;i=i+80|0;o=+g[e+4>>2];p=+g[e+20>>2];q=+g[e+36>>2];r=+g[e+8>>2];s=+g[e+24>>2];t=+g[e+40>>2];u=+g[e+12>>2];v=+g[e+28>>2];w=+g[e+44>>2];x=-+g[e+52>>2];y=-+g[e+56>>2];z=-+g[e+60>>2];l=c[b+760>>2]|0;A=+g[l+(d*104|0)+8>>2];B=+g[l+(d*104|0)+12>>2];C=+g[l+(d*104|0)+16>>2];a:do if(f){f=c[b+308>>2]|0;b:do if((f|0)>0){k=c[b+316>>2]|0;j=0;while(1){if((c[k+(j<<2)>>2]|0)==(e|0))break;j=j+1|0;if((j|0)>=(f|0))break b}if((j|0)!=(f|0)){f=l;break a}}while(0);if((f|0)==(c[b+312>>2]|0)?(m=f|0?f<<1:1,(f|0)<(m|0)):0){if(!m)k=0;else{c[6324]=(c[6324]|0)+1;f=ic((m<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}k=f;f=c[b+308>>2]|0}if((f|0)>0){j=0;do{c[k+(j<<2)>>2]=c[(c[b+316>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(f|0))}j=c[b+316>>2]|0;if(j){if(a[b+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);f=c[b+308>>2]|0}c[b+316>>2]=0}a[b+320>>0]=1;c[b+316>>2]=k;c[b+312>>2]=m}c[(c[b+316>>2]|0)+(f<<2)>>2]=e;c[b+308>>2]=f+1;f=c[b+760>>2]|0}else f=l;while(0);l=f+(d*104|0)|0;f=f+(d*104|0)+100|0;a[f>>0]=a[f>>0]|1;f=c[b+832>>2]|0;if((f|0)==(c[b+836>>2]|0)?(n=f|0?f<<1:1,(f|0)<(n|0)):0){if(!n)k=0;else{c[6324]=(c[6324]|0)+1;f=ic(n*96|19)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}k=f;f=c[b+832>>2]|0}if((f|0)>0){j=0;do{d=k+(j*96|0)|0;m=c[b+840>>2]|0;E=m+(j*96|0)|0;c[d>>2]=c[E>>2];c[d+4>>2]=c[E+4>>2];c[d+8>>2]=c[E+8>>2];c[d+12>>2]=c[E+12>>2];c[d+16>>2]=c[E+16>>2];c[d+20>>2]=c[E+20>>2];c[d+24>>2]=c[E+24>>2];d=k+(j*96|0)+28|0;E=m+(j*96|0)+28|0;c[d>>2]=c[E>>2];c[d+4>>2]=c[E+4>>2];c[d+8>>2]=c[E+8>>2];c[d+12>>2]=c[E+12>>2];d=k+(j*96|0)+44|0;E=m+(j*96|0)+44|0;c[d>>2]=c[E>>2];c[d+4>>2]=c[E+4>>2];c[d+8>>2]=c[E+8>>2];c[d+12>>2]=c[E+12>>2];d=k+(j*96|0)+60|0;E=m+(j*96|0)+60|0;c[d>>2]=c[E>>2];c[d+4>>2]=c[E+4>>2];c[d+8>>2]=c[E+8>>2];c[d+12>>2]=c[E+12>>2];d=k+(j*96|0)+76|0;m=m+(j*96|0)+76|0;c[d>>2]=c[m>>2];c[d+4>>2]=c[m+4>>2];c[d+8>>2]=c[m+8>>2];c[d+12>>2]=c[m+12>>2];c[d+16>>2]=c[m+16>>2];j=j+1|0}while((j|0)!=(f|0))}f=c[b+840>>2]|0;if(f|0){if(a[b+844>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+840>>2]=0}a[b+844>>0]=1;c[b+840>>2]=k;c[b+836>>2]=n;f=c[b+832>>2]|0}E=c[b+840>>2]|0;c[E+(f*96|0)>>2]=l;g[E+(f*96|0)+4>>2]=o*x+p*y+q*z+(o*A+p*B+q*C);g[E+(f*96|0)+8>>2]=r*x+s*y+t*z+(r*A+s*B+t*C);g[E+(f*96|0)+12>>2]=u*x+v*y+w*z+(u*A+v*B+w*C);g[E+(f*96|0)+16>>2]=0.0;c[E+(f*96|0)+20>>2]=e;g[E+(f*96|0)+24>>2]=h;e=E+(f*96|0)+28|0;c[e>>2]=c[D+56>>2];c[e+4>>2]=c[D+56+4>>2];c[e+8>>2]=c[D+56+8>>2];c[e+12>>2]=c[D+56+12>>2];e=E+(f*96|0)+44|0;c[e>>2]=c[D+40>>2];c[e+4>>2]=c[D+40+4>>2];c[e+8>>2]=c[D+40+8>>2];c[e+12>>2]=c[D+40+12>>2];e=E+(f*96|0)+60|0;c[e>>2]=c[D+24>>2];c[e+4>>2]=c[D+24+4>>2];c[e+8>>2]=c[D+24+8>>2];c[e+12>>2]=c[D+24+12>>2];E=E+(f*96|0)+76|0;c[E>>2]=c[D>>2];c[E+4>>2]=c[D+4>>2];c[E+8>>2]=c[D+8>>2];c[E+12>>2]=c[D+12>>2];c[E+16>>2]=c[D+16>>2];c[b+832>>2]=(c[b+832>>2]|0)+1;i=D;return}function Ld(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0;E=i;i=i+32|0;A=+g[b+48>>2]-+g[b+112>>2];h=+g[b+52>>2]-+g[b+116>>2];D=+g[b+56>>2]-+g[b+120>>2];B=A*+g[b+64>>2]+h*+g[b+80>>2]+D*+g[b+96>>2];C=A*+g[b+68>>2]+h*+g[b+84>>2]+D*+g[b+100>>2];D=A*+g[b+72>>2]+h*+g[b+88>>2]+D*+g[b+104>>2];e=c[a+8>>2]|0;z=c[a+4>>2]|0;h=+g[z+32>>2]*+g[z+16>>2];A=h+ +g[a+12>>2];p=+g[e+76>>2];q=+g[e+60>>2];r=+g[e+80>>2];s=+g[e+64>>2];t=+g[e+84>>2];u=+g[e+68>>2];v=+g[e+92>>2];w=+g[e+96>>2];x=+g[e+100>>2];k=(r-s)*(x-u)-(t-u)*(w-s);m=(t-u)*(v-q)-(p-q)*(x-u);o=(p-q)*(w-s)-(r-s)*(v-q);n=1.0/+G(+(o*o+(k*k+m*m)));j=(B-q)*n*k+(C-s)*n*m+n*o*(D-u);if(j<0.0){y=-j;l=-(n*k);j=-(n*m);k=-(n*o)}else{y=j;l=n*k;j=n*m;k=n*o}if(!(y<A)){i=E;return}o=(D-u)*((p-q)*j-(r-s)*l)+((B-q)*((r-s)*k-(t-u)*j)+(C-s)*((t-u)*l-(p-q)*k));t=(D-t)*((v-p)*j-(w-r)*l)+((B-p)*((w-r)*k-(x-t)*j)+(C-r)*((x-t)*l-(v-p)*k));x=(D-x)*((q-v)*j-(s-w)*l)+((B-v)*((s-w)*k-(u-x)*j)+(C-w)*((u-x)*l-(q-v)*k));if(!(x>0.0&(o>0.0&t>0.0))?!(x<=0.0&(o<=0.0&t<=0.0)):0){if((ob[c[(c[e>>2]|0)+100>>2]&127](e)|0)<=0){i=E;return}e=0;z=0;s=0.0;r=0.0;q=0.0;do{F=c[a+8>>2]|0;Yb[c[(c[F>>2]|0)+104>>2]&127](F,z,E+16|0,E);p=+g[E+16>>2];x=+g[E+16+4>>2];u=+g[E+16+8>>2];t=+g[E>>2]-p;y=+g[E+4>>2]-x;v=+g[E+8>>2]-u;do if((B-p)*t+(C-x)*y+(D-u)*v>0.0)if((B-p)*t+(C-x)*y+(D-u)*v<t*t+y*y+v*v){o=((B-p)*t+(C-x)*y+(D-u)*v)/(t*t+y*y+v*v);w=o;m=B-p-t*o;n=C-x-y*o;o=D-u-v*o;break}else{w=1.0;m=B-p-t;n=C-x-y;o=D-u-v;break}else{w=0.0;m=B-p;n=C-x;o=D-u}while(0);if(m*m+n*n+o*o<A*A){e=1;s=p+t*w;r=u+v*w;q=x+y*w}z=z+1|0;F=c[a+8>>2]|0}while((z|0)<(ob[c[(c[F>>2]|0)+100>>2]&127](F)|0));if(!(e&1)){i=E;return}else p=A*A}else{p=A*A;s=B-y*l;r=D-y*k;q=C-y*j}n=B-s;o=C-q;m=D-r;if(!(n*n+o*o+m*m<p)){i=E;return}if(n*n+o*o+m*m>1.1920928955078125e-007){j=+G(+(n*n+o*o+m*m));h=h-j;l=n*(1.0/j);k=m*(1.0/j);j=o*(1.0/j)}h=-h;if(f){x=+g[b+64>>2];y=+g[b+68>>2];A=+g[b+72>>2];B=x*l+y*j+A*k;o=+g[b+80>>2];p=+g[b+84>>2];t=+g[b+88>>2];C=l*o+j*p+k*t;u=+g[b+96>>2];v=+g[b+100>>2];w=+g[b+104>>2];D=l*u+j*v+k*w;g[E+16>>2]=-B;g[E+16+4>>2]=-C;g[E+16+8>>2]=-D;g[E+16+12>>2]=0.0;C=s*o+q*p+r*t+ +g[b+116>>2]+C*h;D=s*u+q*v+r*w+ +g[b+120>>2]+D*h;g[E>>2]=s*x+q*y+r*A+ +g[b+112>>2]+B*h;g[E+4>>2]=C;g[E+8>>2]=D;g[E+12>>2]=0.0;Tb[c[(c[d>>2]|0)+16>>2]&15](d,E+16|0,E,h);i=E;return}else{F=c[(c[d>>2]|0)+16>>2]|0;y=+g[b+64>>2];A=+g[b+68>>2];B=+g[b+72>>2];u=+g[b+80>>2];v=+g[b+84>>2];C=+g[b+88>>2];w=+g[b+96>>2];x=+g[b+100>>2];D=+g[b+104>>2];g[E+16>>2]=y*l+A*j+B*k;g[E+16+4>>2]=l*u+j*v+k*C;g[E+16+8>>2]=l*w+j*x+k*D;g[E+16+12>>2]=0.0;C=s*u+q*v+r*C+ +g[b+116>>2];D=s*w+q*x+r*D+ +g[b+120>>2];g[E>>2]=s*y+q*A+r*B+ +g[b+112>>2];g[E+4>>2]=C;g[E+8>>2]=D;g[E+12>>2]=0.0;Tb[F&15](d,E+16|0,E,h);i=E;return}}function Md(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0;j=i;i=i+16|0;if(!(a[22088]|0)){a[22088]=1;c[j>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;If(22832,0.0,0,0,j)}c[5759]=c[5759]|1;g[5804]=0.0;k=+g[5814]*0.0;l=+g[5815]*0.0;g[5809]=+g[5813]*0.0;g[5810]=k;g[5811]=l;g[5812]=0.0;c[5817]=0;c[5818]=0;c[5819]=0;c[5820]=0;l=+g[5806]*0.0;k=+g[5807]*0.0;g[5858]=+g[5805]*0.0;g[5859]=l;g[5860]=k;g[5861]=0.0;c[b+4>>2]=6;c[b+8>>2]=-1;c[b+12>>2]=-1;g[b+16>>2]=34028234663852886.0e22;a[b+20>>0]=1;a[b+21>>0]=0;c[b+24>>2]=-1;c[b+28>>2]=22832;c[b+32>>2]=d;g[b+36>>2]=0.0;g[b+40>>2]=.30000001192092896;c[b+44>>2]=0;c[b>>2]=4328;c[b+112>>2]=c[e>>2];c[b+112+4>>2]=c[e+4>>2];c[b+112+8>>2]=c[e+8>>2];c[b+112+12>>2]=c[e+12>>2];c[b+128>>2]=c[e+16>>2];c[b+128+4>>2]=c[e+16+4>>2];c[b+128+8>>2]=c[e+16+8>>2];c[b+128+12>>2]=c[e+16+12>>2];c[b+144>>2]=c[e+32>>2];c[b+144+4>>2]=c[e+32+4>>2];c[b+144+8>>2]=c[e+32+8>>2];c[b+144+12>>2]=c[e+32+12>>2];c[b+160>>2]=c[e+48>>2];c[b+160+4>>2]=c[e+48+4>>2];c[b+160+8>>2]=c[e+48+8>>2];c[b+160+12>>2]=c[e+48+12>>2];e=b+680|0;h=e+48|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(h|0));c[b+740>>2]=0;c[b+740+4>>2]=0;c[b+740+8>>2]=0;c[b+740+12>>2]=0;c[b+756>>2]=1045220557;c[b+760>>2]=1045220557;c[b+764>>2]=1045220557;c[b+768>>2]=0;c[b+768+4>>2]=0;c[b+768+8>>2]=0;c[b+768+12>>2]=0;c[b+768+16>>2]=0;g[b+728>>2]=.699999988079071;g[b+732>>2]=1.0;g[b+736>>2]=.5;a[b+788>>0]=0;g[b+792>>2]=0.0;g[b+808>>2]=0.0;a[b+789>>0]=0;g[b+796>>2]=0.0;g[b+812>>2]=0.0;a[b+790>>0]=0;g[b+800>>2]=0.0;g[b+816>>2]=0.0;g[b+928>>2]=0.0;g[b+876>>2]=0.0;g[b+880>>2]=.10000000149011612;g[b+884>>2]=300.0;g[b+868>>2]=1.0;g[b+872>>2]=-1.0;g[b+896>>2]=0.0;g[b+900>>2]=.20000000298023224;g[b+904>>2]=0.0;g[b+908>>2]=0.0;g[b+888>>2]=1.0;g[b+892>>2]=.5;c[b+924>>2]=0;g[b+916>>2]=0.0;a[b+912>>0]=0;g[b+992>>2]=0.0;g[b+940>>2]=0.0;g[b+944>>2]=.10000000149011612;g[b+948>>2]=300.0;g[b+932>>2]=1.0;g[b+936>>2]=-1.0;g[b+960>>2]=0.0;g[b+964>>2]=.20000000298023224;g[b+968>>2]=0.0;g[b+972>>2]=0.0;g[b+952>>2]=1.0;g[b+956>>2]=.5;c[b+988>>2]=0;g[b+980>>2]=0.0;a[b+976>>0]=0;g[b+1056>>2]=0.0;g[b+1004>>2]=0.0;g[b+1008>>2]=.10000000149011612;g[b+1012>>2]=300.0;g[b+996>>2]=1.0;g[b+1e3>>2]=-1.0;g[b+1024>>2]=0.0;g[b+1028>>2]=.20000000298023224;g[b+1032>>2]=0.0;g[b+1036>>2]=0.0;g[b+1016>>2]=1.0;g[b+1020>>2]=.5;c[b+1052>>2]=0;g[b+1044>>2]=0.0;a[b+1040>>0]=0;a[b+1300>>0]=f&1;a[b+1301>>0]=1;c[b+1304>>2]=0;a[b+1308>>0]=0;y=+g[b+112>>2];E=+g[d+4>>2];x=+g[b+128>>2];D=+g[d+8>>2];w=+g[b+144>>2];C=+g[d+12>>2];v=+g[b+116>>2];u=+g[b+132>>2];t=+g[b+148>>2];s=+g[b+120>>2];q=+g[b+136>>2];o=+g[b+152>>2];B=+g[d+20>>2];A=+g[d+24>>2];z=+g[d+28>>2];r=+g[d+36>>2];p=+g[d+40>>2];n=+g[d+44>>2];G=+g[b+160>>2];F=+g[b+164>>2];l=+g[b+168>>2];m=+g[d+52>>2]+(E*G+D*F+C*l);k=B*G+A*F+z*l+ +g[d+56>>2];l=r*G+p*F+n*l+ +g[d+60>>2];g[b+48>>2]=y*E+x*D+w*C;g[b+52>>2]=E*v+D*u+C*t;g[b+56>>2]=E*s+D*q+C*o;g[b+60>>2]=0.0;g[b+64>>2]=y*B+x*A+w*z;g[b+68>>2]=v*B+u*A+t*z;g[b+72>>2]=s*B+q*A+o*z;g[b+76>>2]=0.0;g[b+80>>2]=y*r+x*p+w*n;g[b+84>>2]=v*r+u*p+t*n;g[b+88>>2]=s*r+q*p+o*n;g[b+92>>2]=0.0;g[b+96>>2]=m;g[b+100>>2]=k;g[b+104>>2]=l;g[b+108>>2]=0.0;ed(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);i=j;return}function Nd(b,d,e,f,h,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;h=+h;j=+j;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=i;i=i+288|0;c[w+208>>2]=c[d>>2];c[w+208+4>>2]=c[d+4>>2];c[w+208+8>>2]=c[d+8>>2];c[w+208+12>>2]=c[d+12>>2];o=w+208+16|0;c[o>>2]=c[e>>2];c[o+4>>2]=c[e+4>>2];c[o+8>>2]=c[e+8>>2];c[o+12>>2]=c[e+12>>2];e=w+208+32|0;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];v=c[k>>2]|0;q=c[k+4>>2]|0;r=c[k+8>>2]|0;s=c[k+16>>2]|0;t=c[k+12>>2]|0;p=c[k+20>>2]|0;c[w+156>>2]=c[w+208>>2];c[w+156+4>>2]=c[w+208+4>>2];c[w+156+8>>2]=c[w+208+8>>2];c[w+156+12>>2]=c[w+208+12>>2];c[w+172>>2]=c[o>>2];c[w+172+4>>2]=c[o+4>>2];c[w+172+8>>2]=c[o+8>>2];c[w+172+12>>2]=c[o+12>>2];c[w+188>>2]=c[e>>2];c[w+188+4>>2]=c[e+4>>2];c[w+188+8>>2]=c[e+8>>2];c[w+188+12>>2]=c[e+12>>2];e=c[b+128>>2]|0;if((e|0)==(c[b+132>>2]|0)?(u=e|0?e<<1:1,(e|0)<(u|0)):0){if(!u)d=0;else{c[6324]=(c[6324]|0)+1;d=ic((u*284|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}e=c[b+128>>2]|0}if((e|0)>0){f=0;do{k=c[b+136>>2]|0;m=d+(f*284|0)|0;n=k+(f*284|0)|0;o=m+92|0;do{c[m>>2]=c[n>>2];m=m+4|0;n=n+4|0}while((m|0)<(o|0));m=d+(f*284|0)+92|0;n=k+(f*284|0)+92|0;c[m>>2]=c[n>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];m=d+(f*284|0)+108|0;n=k+(f*284|0)+108|0;c[m>>2]=c[n>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];m=d+(f*284|0)+124|0;n=k+(f*284|0)+124|0;c[m>>2]=c[n>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];m=d+(f*284|0)+140|0;n=k+(f*284|0)+140|0;c[m>>2]=c[n>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];m=d+(f*284|0)+156|0;n=k+(f*284|0)+156|0;o=m+128|0;do{c[m>>2]=c[n>>2];m=m+4|0;n=n+4|0}while((m|0)<(o|0));f=f+1|0}while((f|0)!=(e|0))}e=c[b+136>>2]|0;if(e|0){if(a[b+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=d;c[b+132>>2]=u;e=c[b+128>>2]|0}d=c[b+136>>2]|0;m=d+(e*284|0)|0;n=w;o=m+92|0;do{c[m>>2]=c[n>>2];m=m+4|0;n=n+4|0}while((m|0)<(o|0));m=d+(e*284|0)+92|0;c[m>>2]=c[w+92>>2];c[m+4>>2]=c[w+92+4>>2];c[m+8>>2]=c[w+92+8>>2];c[m+12>>2]=c[w+92+12>>2];m=d+(e*284|0)+108|0;c[m>>2]=c[w+108>>2];c[m+4>>2]=c[w+108+4>>2];c[m+8>>2]=c[w+108+8>>2];c[m+12>>2]=c[w+108+12>>2];m=d+(e*284|0)+124|0;c[m>>2]=c[w+124>>2];c[m+4>>2]=c[w+124+4>>2];c[m+8>>2]=c[w+124+8>>2];c[m+12>>2]=c[w+124+12>>2];m=d+(e*284|0)+140|0;c[m>>2]=c[w+140>>2];c[m+4>>2]=c[w+140+4>>2];c[m+8>>2]=c[w+140+8>>2];c[m+12>>2]=c[w+140+12>>2];d=d+(e*284|0)+156|0;m=d;n=w+156|0;o=m+48|0;do{c[m>>2]=c[n>>2];m=m+4|0;n=n+4|0}while((m|0)<(o|0));g[d+48>>2]=h;c[d+52>>2]=t;g[d+56>>2]=j;c[d+60>>2]=v;c[d+64>>2]=q;c[d+68>>2]=r;c[d+72>>2]=s;g[d+76>>2]=0.0;g[d+80>>2]=0.0;g[d+84>>2]=0.0;g[d+88>>2]=.10000000149011612;c[d+92>>2]=p;g[d+96>>2]=0.0;g[d+100>>2]=0.0;a[d+104>>0]=l&1;m=d+105|0;n=w+256|0;o=m+23|0;do{a[m>>0]=a[n>>0]|0;m=m+1|0;n=n+1|0}while((m|0)<(o|0));l=c[b+128>>2]|0;c[b+128>>2]=l+1;l=(c[b+136>>2]|0)+(l*284|0)|0;Gg(c[b+108>>2]|0,l,0);me(c[b+108>>2]|0,c[b+136>>2]|0,(c[b+128>>2]|0)+-1|0,0);i=w;return l|0}function Od(a,d,f,h,j){a=a|0;d=d|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;I=i;i=i+16|0;c[d+16>>2]=c[f>>2];c[d+16+4>>2]=c[f+4>>2];c[d+16+8>>2]=c[f+8>>2];c[d+16+12>>2]=c[f+12>>2];c[d+32>>2]=c[h>>2];c[d+32+4>>2]=c[h+4>>2];c[d+32+8>>2]=c[h+8>>2];c[d+32+12>>2]=c[h+12>>2];x=c[a+60>>2]|0;y=c[d+12>>2]&65535;lj(a,I+6|0,+g[f>>2],+g[f+4>>2],+g[f+8>>2],0);lj(a,I,+g[h>>2],+g[h+4>>2],+g[h+8>>2],1);u=0;do{t=b[x+(y<<6)+48+(u<<1)>>1]|0;A=b[x+(y<<6)+54+(u<<1)>>1]|0;q=b[I+6+(u<<1)>>1]|0;n=a+68+(u<<2)|0;s=c[n>>2]|0;o=(q&65535)-(e[s+((t&65535)<<2)>>1]|0)|0;r=b[I+(u<<1)>>1]|0;B=(r&65535)-(e[s+((A&65535)<<2)>>1]|0)|0;b[s+((t&65535)<<2)>>1]=q;b[s+((A&65535)<<2)>>1]=r;if((o|0)<0)ph(a,u,t);a:do if((B|0)>0?(C=c[n>>2]|0,D=c[a+60>>2]|0,E=e[C+((A&65535)<<2)+2>>1]|0,F=b[C+((A&65535)<<2)+6>>1]|0,F<<16>>16):0){p=1<<u&3;q=D+(E<<6)+54+(u<<1)|0;l=C+((A&65535)<<2)|0;k=F;do{m=l;l=l+4|0;r=b[l>>1]|0;if((e[m>>1]|0)<(r&65535))break a;s=c[a+60>>2]|0;k=k&65535;if(!(r&1)){if(((((e[D+(E<<6)+54+(p<<1)>>1]|0)>=(e[s+(k<<6)+48+(p<<1)>>1]|0)?(e[s+(k<<6)+54+(p<<1)>>1]|0)>=(e[D+(E<<6)+48+(p<<1)>>1]|0):0)?(e[D+(E<<6)+54+((1<<p&3)<<1)>>1]|0)>=(e[s+(k<<6)+48+((1<<p&3)<<1)>>1]|0):0)?(e[s+(k<<6)+54+((1<<p&3)<<1)>>1]|0)>=(e[D+(E<<6)+48+((1<<p&3)<<1)>>1]|0):0)?(H=c[a+92>>2]|0,G=s+((e[m+2>>1]|0)<<6)|0,yb[c[(c[H>>2]|0)+8>>2]&63](H,G,s+(k<<6)|0)|0,H=c[a+96>>2]|0,H|0):0)yb[c[(c[H>>2]|0)+8>>2]&63](H,G,s+(k<<6)|0)|0;s=s+(k<<6)+48+(u<<1)|0;b[s>>1]=(b[s>>1]|0)+-1<<16>>16}else{s=s+(k<<6)+54+(u<<1)|0;b[s>>1]=(b[s>>1]|0)+-1<<16>>16}b[q>>1]=(b[q>>1]|0)+1<<16>>16;k=e[m>>1]|e[m+2>>1]<<16;s=e[l>>1]|e[l+2>>1]<<16;b[m>>1]=s;b[m+2>>1]=s>>>16;b[l>>1]=k;b[l+2>>1]=k>>>16;k=b[m+10>>1]|0}while(k<<16>>16!=0)}while(0);b:do if((o|0)>0?(v=c[n>>2]|0,w=b[v+((t&65535)<<2)+6>>1]|0,w<<16>>16):0){q=(c[a+60>>2]|0)+((e[v+((t&65535)<<2)+2>>1]|0)<<6)+48+(u<<1)|0;r=1<<u&3;n=v+((t&65535)<<2)|0;k=w;do{o=n;n=n+4|0;l=b[n>>1]|0;if((e[o>>1]|0)<(l&65535))break b;p=c[a+60>>2]|0;m=k&65535;if(!(l&1)){t=p+(m<<6)+48+(u<<1)|0;b[t>>1]=(b[t>>1]|0)+-1<<16>>16}else{k=e[o+2>>1]|0;if(((((e[p+(k<<6)+54+(r<<1)>>1]|0)>=(e[p+(m<<6)+48+(r<<1)>>1]|0)?(e[p+(m<<6)+54+(r<<1)>>1]|0)>=(e[p+(k<<6)+48+(r<<1)>>1]|0):0)?(e[p+(k<<6)+54+((1<<r&3)<<1)>>1]|0)>=(e[p+(m<<6)+48+((1<<r&3)<<1)>>1]|0):0)?(e[p+(m<<6)+54+((1<<r&3)<<1)>>1]|0)>=(e[p+(k<<6)+48+((1<<r&3)<<1)>>1]|0):0)?(z=c[a+92>>2]|0,sb[c[(c[z>>2]|0)+12>>2]&31](z,p+(k<<6)|0,p+(m<<6)|0,j)|0,z=c[a+96>>2]|0,z|0):0)sb[c[(c[z>>2]|0)+12>>2]&31](z,p+(k<<6)|0,p+(m<<6)|0,j)|0;t=p+(m<<6)+54+(u<<1)|0;b[t>>1]=(b[t>>1]|0)+-1<<16>>16}b[q>>1]=(b[q>>1]|0)+1<<16>>16;k=e[o>>1]|e[o+2>>1]<<16;t=e[n>>1]|e[n+2>>1]<<16;b[o>>1]=t;b[o+2>>1]=t>>>16;b[n>>1]=k;b[n+2>>1]=k>>>16;k=b[o+10>>1]|0}while(k<<16>>16!=0)}while(0);if((B|0)<0)ih(a,u,A,j);u=u+1|0}while((u|0)!=3);k=c[a+108>>2]|0;if(!k){i=I;return}ib[c[(c[k>>2]|0)+16>>2]&31](k,c[d+60>>2]|0,f,h,j);i=I;return}function Pd(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0;if((h|0)<0){o=c[b+8>>2]|0;+Lb[c[(c[o>>2]|0)+12>>2]&3](o,d,e,f,g,c[b+12>>2]|0,c[b+16>>2]|0,c[b+4>>2]|0,c[b+20>>2]|0,c[b+24>>2]|0);return}o=c[b+16>>2]|0;a:do if((o|0)>0){m=c[b+12>>2]|0;i=0;while(1){l=m+(i<<2)|0;k=c[l>>2]|0;j=c[(c[k+28>>2]|0)+208>>2]|0;if((j|0)<=-1)j=c[(c[k+32>>2]|0)+208>>2]|0;if((j|0)==(h|0))break a;i=i+1|0;if((i|0)>=(o|0)){l=0;break}}}else{l=0;i=0}while(0);if((i|0)<(o|0)){n=c[b+12>>2]|0;j=0;do{m=c[n+(i<<2)>>2]|0;k=c[(c[m+28>>2]|0)+208>>2]|0;if((k|0)<=-1)k=c[(c[m+32>>2]|0)+208>>2]|0;j=((k|0)==(h|0)&1)+j|0;i=i+1|0}while((i|0)!=(o|0));o=j}else o=0;i=c[b+4>>2]|0;if((c[i+72>>2]|0)<2){h=c[b+8>>2]|0;+Lb[c[(c[h>>2]|0)+12>>2]&3](h,d,e,f,g,l,o,i,c[b+20>>2]|0,c[b+24>>2]|0);return}if((e|0)>0){n=0;i=c[b+32>>2]|0;j=c[b+36>>2]|0;do{h=d+(n<<2)|0;if((i|0)==(j|0)){m=j|0?j<<1:1;if((j|0)<(m|0)){if(!m)i=0;else{c[6324]=(c[6324]|0)+1;i=ic((m<<2|3)+16|0)|0;if(!i)i=0;else{c[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}j=c[b+32>>2]|0}if((j|0)>0){k=0;do{c[i+(k<<2)>>2]=c[(c[b+40>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(j|0))}k=c[b+40>>2]|0;if(k){if(a[b+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);j=c[b+32>>2]|0}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=i;c[b+36>>2]=m;i=j;j=m}else i=j}c[(c[b+40>>2]|0)+(i<<2)>>2]=c[h>>2];i=i+1|0;c[b+32>>2]=i;n=n+1|0}while((n|0)!=(e|0))}if((g|0)>0){n=0;i=c[b+52>>2]|0;j=c[b+56>>2]|0;do{h=f+(n<<2)|0;if((i|0)==(j|0)){m=j|0?j<<1:1;if((j|0)<(m|0)){if(!m)i=0;else{c[6324]=(c[6324]|0)+1;i=ic((m<<2|3)+16|0)|0;if(!i)i=0;else{c[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}j=c[b+52>>2]|0}if((j|0)>0){k=0;do{c[i+(k<<2)>>2]=c[(c[b+60>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(j|0))}k=c[b+60>>2]|0;if(k){if(a[b+64>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);j=c[b+52>>2]|0}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=i;c[b+56>>2]=m;i=j;j=m}else i=j}c[(c[b+60>>2]|0)+(i<<2)>>2]=c[h>>2];i=i+1|0;c[b+52>>2]=i;n=n+1|0}while((n|0)!=(g|0))}if((o|0)>0){h=0;i=c[b+72>>2]|0;j=c[b+76>>2]|0;do{n=l+(h<<2)|0;if((i|0)==(j|0)){m=j|0?j<<1:1;if((j|0)<(m|0)){if(!m){k=0;i=j}else{c[6324]=(c[6324]|0)+1;i=ic((m<<2|3)+16|0)|0;if(!i)i=0;else{c[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}k=i;i=c[b+72>>2]|0}if((i|0)>0){j=0;do{c[k+(j<<2)>>2]=c[(c[b+80>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(i|0))}j=c[b+80>>2]|0;if(j){if(a[b+84>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);i=c[b+72>>2]|0}c[b+80>>2]=0}a[b+84>>0]=1;c[b+80>>2]=k;c[b+76>>2]=m;j=m}else i=j}c[(c[b+80>>2]|0)+(i<<2)>>2]=c[n>>2];i=i+1|0;c[b+72>>2]=i;h=h+1|0}while((h|0)!=(o|0))}else i=c[b+72>>2]|0;if(((c[b+52>>2]|0)+i|0)<=(c[(c[b+4>>2]|0)+72>>2]|0))return;ah(b);return}function Qd(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+24>>2]=d;g[b+28>>2]=0.0;c[b+32>>2]=0;c[b+36>>2]=1;g[b+40>>2]=1.0;a[b+44>>0]=1;c[b+48>>2]=0;a[b+52>>0]=0;a[b+53>>0]=1;a[b+54>>0]=1;g[b+56>>2]=.03999999910593033;a[b+60>>0]=0;g[b+64>>2]=0.0;c[b+68>>2]=e;c[b+72>>2]=0;a[b+76>>0]=1;c[b+80>>2]=0;c[b+84>>2]=0;c[b+88>>2]=0;g[b+92>>2]=.6000000238418579;g[b+96>>2]=1.0;g[b+100>>2]=.30000001192092896;g[b+104>>2]=.01666666753590107;g[b+108>>2]=0.0;g[b+116>>2]=20.0;c[b+112>>2]=10;g[b+124>>2]=.20000000298023224;g[b+128>>2]=.20000000298023224;g[b+132>>2]=0.0;g[b+120>>2]=1.0;c[b+136>>2]=1;g[b+140>>2]=-.03999999910593033;g[b+144>>2]=.10000000149011612;g[b+148>>2]=0.0;g[b+152>>2]=.8500000238418579;c[b+156>>2]=260;c[b+160>>2]=2;c[b+164>>2]=128;g[b+168>>2]=100.0;g[b+172>>2]=10000000150474662.0e14;c[b>>2]=4680;a[b+192>>0]=1;c[b+188>>2]=0;c[b+180>>2]=0;c[b+184>>2]=0;c[b+196>>2]=0;c[b+200>>2]=f;a[b+224>>0]=1;c[b+220>>2]=0;c[b+212>>2]=0;c[b+216>>2]=0;a[b+244>>0]=1;c[b+240>>2]=0;c[b+232>>2]=0;c[b+236>>2]=0;c[b+248>>2]=0;c[b+252>>2]=-1054867456;a[b+274>>0]=0;a[b+275>>0]=0;c[b+256>>2]=0;c[b+256+4>>2]=0;c[b+256+8>>2]=0;c[b+256+12>>2]=0;a[b+292>>0]=1;c[b+288>>2]=0;c[b+280>>2]=0;c[b+284>>2]=0;c[b+296>>2]=0;a[b+300>>0]=1;a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;if(!f){c[6324]=(c[6324]|0)+1;e=ic(223)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[e>>2]=4564;a[e+20>>0]=1;c[e+16>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;a[e+40>>0]=1;c[e+36>>2]=0;c[e+28>>2]=0;c[e+32>>2]=0;a[e+60>>0]=1;c[e+56>>2]=0;c[e+48>>2]=0;c[e+52>>2]=0;a[e+80>>0]=1;c[e+76>>2]=0;c[e+68>>2]=0;c[e+72>>2]=0;a[e+100>>0]=1;c[e+96>>2]=0;c[e+88>>2]=0;c[e+92>>2]=0;a[e+120>>0]=1;c[e+116>>2]=0;c[e+108>>2]=0;c[e+112>>2]=0;a[e+140>>0]=1;c[e+136>>2]=0;c[e+128>>2]=0;c[e+132>>2]=0;a[e+160>>0]=1;c[e+156>>2]=0;c[e+148>>2]=0;c[e+152>>2]=0;a[e+180>>0]=1;c[e+176>>2]=0;c[e+168>>2]=0;c[e+172>>2]=0;c[e+192>>2]=13;c[e+196>>2]=14;c[e+200>>2]=0;c[b+200>>2]=e;a[b+273>>0]=1}else a[b+273>>0]=0;c[6324]=(c[6324]|0)+1;e=ic(87)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[e>>2]=6412;a[e+20>>0]=1;c[e+16>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;a[e+40>>0]=1;c[e+36>>2]=0;c[e+28>>2]=0;c[e+32>>2]=0;a[e+60>>0]=1;c[e+56>>2]=0;c[e+48>>2]=0;c[e+52>>2]=0;a[e+64>>0]=1;c[b+204>>2]=e;a[b+272>>0]=1;c[6324]=(c[6324]|0)+1;e=ic(107)|0;if(!e){f=0;h=c[b+200>>2]|0;c[f>>2]=4896;e=f+4|0;c[e>>2]=0;e=f+8|0;c[e>>2]=h;e=f+12|0;c[e>>2]=0;e=f+16|0;c[e>>2]=0;e=f+20|0;c[e>>2]=0;e=f+24|0;c[e>>2]=d;d=f+44|0;a[d>>0]=1;d=f+40|0;c[d>>2]=0;d=f+32|0;c[d>>2]=0;d=f+36|0;c[d>>2]=0;d=f+64|0;a[d>>0]=1;d=f+60|0;c[d>>2]=0;d=f+52|0;c[d>>2]=0;d=f+56|0;c[d>>2]=0;d=f+84|0;a[d>>0]=1;d=f+80|0;c[d>>2]=0;d=f+72|0;c[d>>2]=0;d=f+76|0;c[d>>2]=0;c[b+196>>2]=f;return}c[(e+4+15&-16)+-4>>2]=e;h=e+4+15&-16;e=c[b+200>>2]|0;c[h>>2]=4896;f=h+4|0;c[f>>2]=0;f=h+8|0;c[f>>2]=e;f=h+12|0;c[f>>2]=0;f=h+16|0;c[f>>2]=0;f=h+20|0;c[f>>2]=0;f=h+24|0;c[f>>2]=d;d=h+44|0;a[d>>0]=1;d=h+40|0;c[d>>2]=0;d=h+32|0;c[d>>2]=0;d=h+36|0;c[d>>2]=0;d=h+64|0;a[d>>0]=1;d=h+60|0;c[d>>2]=0;d=h+52|0;c[d>>2]=0;d=h+56|0;c[d>>2]=0;d=h+84|0;a[d>>0]=1;d=h+80|0;c[d>>2]=0;d=h+72|0;c[d>>2]=0;d=h+76|0;c[d>>2]=0;c[b+196>>2]=h;return}function Rd(d,f,h,j){d=d|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0;w=i;i=i+80|0;v=c[d+52>>2]|0;c[w>>2]=6740;c[w+4>>2]=v;c[w+8>>2]=f;c[w+60>>2]=0;v=c[d+56>>2]|0;if(!(a[v+60>>0]|0)){f=c[v+56>>2]|0;if((f|0)>0){p=0;d=0;m=c[v+96>>2]|0;while(1){d=d+1|0;if(!(+g[h>>2]>+g[m+16>>2])?!(+g[j>>2]<+g[m>>2]):0)k=1;else k=0;if(!(!(+g[h+8>>2]>+g[m+24>>2])?!(+g[j+8>>2]<+g[m+8>>2]):0))k=0;if(!(+g[h+4>>2]>+g[m+20>>2])?!(+g[j+4>>2]<+g[m+4>>2]):0){l=c[m+32>>2]|0;if(k&(l|0)==-1){Ub[c[(c[w>>2]|0)+8>>2]&127](w,c[m+36>>2]|0,c[m+40>>2]|0);f=c[v+56>>2]|0;o=43}else{n=(l|0)==-1;o=42}}else{l=c[m+32>>2]|0;n=(l|0)==-1;k=0;o=42}if((o|0)==42){o=0;if(n|k)o=43;else{m=m+(l<<6)|0;k=l+p|0}}if((o|0)==43){m=m+64|0;k=p+1|0}if((k|0)<(f|0))p=k;else break}}else d=0;if((c[6317]|0)>=(d|0)){i=w;return}c[6317]=d;i=w;return}D=+g[h>>2];H=+g[h+4>>2];z=+g[h+8>>2];G=+g[v+4>>2];D=D<G?G:D;y=+g[v+8>>2];H=H<y?y:H;C=+g[v+12>>2];z=z<C?C:z;I=+g[v+20>>2];A=+g[v+24>>2];E=+g[v+28>>2];F=+g[v+36>>2];x=+g[v+40>>2];B=+g[v+44>>2];u=~~(((I<D?I:D)-G)*F)&65534;b[w+70>>1]=u;s=~~(((E<z?E:z)-C)*B)&65534;t=~~(((A<H?A:H)-y)*x)&65534;b[w+70+2>>1]=t;b[w+70+4>>1]=s;H=+g[j>>2];z=+g[j+4>>2];D=+g[j+8>>2];H=H<G?G:H;z=z<y?y:z;D=D<C?C:D;r=(~~(((I<H?I:H)-G)*F+1.0)&65535|1)&65535;b[w+64>>1]=r;j=(~~(((E<D?E:D)-C)*B+1.0)&65535|1)&65535;q=(~~(((A<z?A:z)-y)*x+1.0)&65535|1)&65535;b[w+64+2>>1]=q;b[w+64+4>>1]=j;switch(c[v+144>>2]|0){case 0:{o=c[v+56>>2]|0;if((o|0)>0){d=0;f=c[v+136>>2]|0;k=0;do{d=d+1|0;l=f+12|0;m=c[l>>2]|0;n=(((r&65535)>=(e[f>>1]|0)?(u&65535)<=(e[f+6>>1]|0):0)&(s&65535)<=(e[f+10>>1]|0)&(j&65535)>=(e[f+4>>1]|0)&(t&65535)<=(e[f+8>>1]|0)&(q&65535)>=(e[f+2>>1]|0)|0)!=0;if((m|0)>-1&n)Ub[c[(c[w>>2]|0)+8>>2]&127](w,m>>21,m&2097151);if((m|0)>-1|n){k=k+1|0;f=f+16|0}else{v=c[l>>2]|0;k=k-v|0;f=f+(0-v<<4)|0}}while((k|0)<(o|0))}else d=0;if((c[6317]|0)<(d|0))c[6317]=d;break}case 1:{if((c[v+152>>2]|0)>0){h=0;do{d=c[v+160>>2]|0;if(((r&65535)>=(e[d+(h<<5)>>1]|0)?(u&65535)<=(e[d+(h<<5)+6>>1]|0):0)&(s&65535)<=(e[d+(h<<5)+10>>1]|0)&(j&65535)>=(e[d+(h<<5)+4>>1]|0)&(t&65535)<=(e[d+(h<<5)+8>>1]|0)&(q&65535)>=(e[d+(h<<5)+2>>1]|0)|0){p=c[d+(h<<5)+12>>2]|0;o=c[d+(h<<5)+16>>2]|0;if((o|0)>0){d=0;f=(c[v+136>>2]|0)+(p<<4)|0;k=p;do{d=d+1|0;l=f+12|0;m=c[l>>2]|0;n=(((r&65535)>=(e[f>>1]|0)?(u&65535)<=(e[f+6>>1]|0):0)&(s&65535)<=(e[f+10>>1]|0)&(j&65535)>=(e[f+4>>1]|0)&(t&65535)<=(e[f+8>>1]|0)&(q&65535)>=(e[f+2>>1]|0)|0)!=0;if((m|0)>-1&n)Ub[c[(c[w>>2]|0)+8>>2]&127](w,m>>21,m&2097151);if((m|0)>-1|n){k=k+1|0;f=f+16|0}else{n=c[l>>2]|0;k=k-n|0;f=f+(0-n<<4)|0}}while((k|0)<(o+p|0))}else d=0;if((c[6317]|0)<(d|0))c[6317]=d}h=h+1|0}while((h|0)<(c[v+152>>2]|0))}break}case 2:{xk(c[v+136>>2]|0,w,w+70|0,w+64|0);break}default:{}}i=w;return}function Sd(b,d,e,f,h,i,j,k,l,m,n){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0.0,s=0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0;if((j|0)<2|(k|0)<2){m=0;return m|0}u=S(k,j)|0;c[6324]=(c[6324]|0)+1;b=ic(u>>>0>268435455?18:(u<<4|3)+16|0)|0;if(!b)s=0;else{c[(b+4+15&-16)+-4>>2]=b;s=b+4+15&-16}o=u>>>0>1073741823?-1:u<<2;o=(o|0)==0?1:o;while(1){b=ic(o)|0;if(b|0){q=b;break}b=c[6453]|0;c[6453]=b+0;if(!b){q=0;break}Vb[b&3]()}if((k|0)>0?(j|0)>0:0){b=0;do{z=+(b|0)/+(k+-1|0);r=+g[e>>2];r=r+z*(+g[h>>2]-r);t=+g[e+4>>2];t=t+z*(+g[h+4>>2]-t);v=+g[e+8>>2];v=v+z*(+g[h+8>>2]-v);w=+g[f>>2];x=+g[f+4>>2];y=+g[f+8>>2];p=S(b,j)|0;w=w+z*(+g[i>>2]-w)-r;x=x+z*(+g[i+4>>2]-x)-t;y=y+z*(+g[i+8>>2]-y)-v;o=0;do{z=+(o|0)/+(j+-1|0);A=o+p|0;g[s+(A<<4)>>2]=r+w*z;g[s+(A<<4)+4>>2]=t+x*z;g[s+(A<<4)+8>>2]=v+y*z;g[s+(A<<4)+12>>2]=0.0;g[q+(A<<2)>>2]=1.0;o=o+1|0}while((o|0)!=(j|0));b=b+1|0}while((b|0)!=(k|0))}c[6324]=(c[6324]|0)+1;b=ic(1311)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}tc(b,d,u,s,q);if(l&1|0){g[(c[b+760>>2]|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&2|0){g[(c[b+760>>2]|0)+((j+-1|0)*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&4|0){A=S(k+-1|0,j)|0;g[(c[b+760>>2]|0)+(A*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&8|0){A=j+-1+(S(k+-1|0,j)|0)|0;g[(c[b+760>>2]|0)+(A*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&16|0){g[(c[b+760>>2]|0)+(((j+-1|0)/2|0)*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&32|0){A=S((k+-1|0)/2|0,j)|0;g[(c[b+760>>2]|0)+(A*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&64|0){A=j+-1+(S((k+-1|0)/2|0,j)|0)|0;g[(c[b+760>>2]|0)+(A*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&128|0){A=(S(k+-1|0,j)|0)+((j+-1|0)/2|0)|0;g[(c[b+760>>2]|0)+(A*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&256|0){A=(S((k+-1|0)/2|0,j)|0)+((j+-1|0)/2|0)|0;g[(c[b+760>>2]|0)+(A*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(s|0){c[6325]=(c[6325]|0)+1;Rc(c[s+-4>>2]|0)}Rc(q);if((k|0)<=0){A=b;return A|0}o=0;u=0;d=j+-1|0;while(1){p=u;u=u+1|0;a:do if((j|0)>0){i=S(p,j)|0;h=S(u,j)|0;t=1.0/+(k+-1|0)*+(k+-1-p|0);r=1.0/+(k+-1|0)*+(k+-2-p|0);if((u|0)<(k|0)){p=0;q=o}else{p=0;while(1){q=p;p=p+1|0;if((p|0)<(j|0))Gf(b,q+i|0,p+i|0,0,0);if((p|0)==(j|0))break a}}while(1){s=p+1|0;e=p+i|0;f=p+h|0;if((p|0)==(j+-1|0))break;Gf(b,e,s+i|0,0,0);Gf(b,e,f,0,0);Pf(b,e,f,s+h|0,0);if(!n)Pf(b,s+h|0,s+i|0,e,0);else{z=1.0/+(j+-1|0)*+(p|0);g[n+(q<<2)>>2]=z;g[n+(q+1<<2)>>2]=t;g[n+(q+2<<2)>>2]=z;g[n+(q+3<<2)>>2]=r;y=1.0/+(j+-1|0)*+(s|0);g[n+(q+4<<2)>>2]=y;g[n+(q+5<<2)>>2]=r;Pf(b,s+h|0,s+i|0,e,0);g[n+(q+6<<2)>>2]=y;g[n+(q+7<<2)>>2]=r;g[n+(q+8<<2)>>2]=y;g[n+(q+9<<2)>>2]=t;g[n+(q+10<<2)>>2]=z;g[n+(q+11<<2)>>2]=t}if(m)Gf(b,e,s+h|0,0,0);p=s;q=q+12|0}Gf(b,d,f,0,0);o=(j*12|0)+-12+o|0}while(0);if((u|0)==(k|0))break;else d=d+j|0}return b|0}function Td(b,d,e){b=b|0;d=+d;e=+e;var f=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0,t=0.0,u=0.0,v=0.0;s=i;i=i+80|0;f=c[b+8>>2]|0;if(!f){f=c[b+4>>2]|0;if(!f){d=0.0;k=0.0;n=0.0;o=0.0;l=0.0;m=0.0}else{r=+g[f+336>>2];n=+g[b+172>>2];o=+g[f+340>>2];p=+g[b+168>>2];m=+g[b+164>>2];q=+g[f+332>>2];d=r*n-o*p;k=+g[f+316>>2];n=o*m-n*q;o=+g[f+320>>2];l=+g[f+324>>2];m=p*q-r*m}}else{r=+g[f+372>>2];n=+g[b+172>>2];o=+g[f+376>>2];p=+g[b+168>>2];m=+g[b+164>>2];q=+g[f+368>>2];d=r*n-o*p;k=+g[f+352>>2];n=o*m-n*q;o=+g[f+356>>2];l=+g[f+360>>2];m=p*q-r*m}p=k+d;r=o+n;q=l+m;f=c[b+20>>2]|0;if(!f){f=c[b+16>>2]|0;if(!f){d=0.0;k=0.0;n=0.0;o=0.0;l=0.0;m=0.0}else{t=+g[f+336>>2];n=+g[b+188>>2];o=+g[f+340>>2];v=+g[b+184>>2];m=+g[b+180>>2];u=+g[f+332>>2];d=t*n-o*v;k=+g[f+316>>2];n=o*m-n*u;o=+g[f+320>>2];l=+g[f+324>>2];m=v*u-t*m}}else{v=+g[f+372>>2];n=+g[b+188>>2];o=+g[f+376>>2];t=+g[b+184>>2];m=+g[b+180>>2];u=+g[f+368>>2];d=v*n-o*t;k=+g[f+352>>2];n=o*m-n*u;o=+g[f+356>>2];l=+g[f+360>>2];m=t*u-v*m}p=p-(k+d);n=r-(o+n);d=q-(l+m);k=+g[b+196>>2];l=+g[b+200>>2];m=+g[b+204>>2];a[s+36+32>>0]=1;c[s+36+16>>2]=0;c[s+36+16+4>>2]=0;c[s+36+16+8>>2]=0;c[s+36+16+12>>2]=0;c[s+36>>2]=c[b+72>>2];c[s+36+4>>2]=c[b+72+4>>2];c[s+36+8>>2]=c[b+72+8>>2];c[s+36+12>>2]=c[b+72+12>>2];if(k*p+n*l+d*m<0.0){t=+g[b+212>>2];u=+g[s+36>>2]+((k*p+n*l+d*m)*k+(p-(k*p+n*l+d*m)*k)*t);g[s+36>>2]=u;v=(k*p+n*l+d*m)*l+t*(n-(k*p+n*l+d*m)*l)+ +g[s+36+4>>2];g[s+36+4>>2]=v;l=(k*p+n*l+d*m)*m+t*(d-(k*p+n*l+d*m)*m)+ +g[s+36+8>>2];g[s+36+8>>2]=l;f=s+36+4|0;h=s+36+8|0;j=s+36|0;d=u;k=v}else{f=s+36+4|0;h=s+36+8|0;j=s+36|0;d=+g[s+36>>2];k=+g[s+36+4>>2];l=+g[s+36+8>>2]}m=(+g[b+104>>2]*d+ +g[b+108>>2]*k+ +g[b+112>>2]*l)*e;n=(d*+g[b+120>>2]+k*+g[b+124>>2]+l*+g[b+128>>2])*e;d=(d*+g[b+136>>2]+k*+g[b+140>>2]+l*+g[b+144>>2])*e;g[j>>2]=m;g[f>>2]=n;g[h>>2]=d;g[s+36+12>>2]=0.0;f=c[b+4>>2]|0;if((f|0)!=(c[b+16>>2]|0)){f=s;h=s+36|0;j=f+36|0;do{c[f>>2]=c[h>>2];f=f+4|0;h=h+4|0}while((f|0)<(j|0));v=-+g[s+4>>2];u=-+g[s+8>>2];g[s>>2]=-+g[s>>2];g[s+4>>2]=v;g[s+8>>2]=u;g[s+12>>2]=0.0;u=-+g[s+20>>2];v=-+g[s+24>>2];g[s+16>>2]=-+g[s+16>>2];g[s+20>>2]=u;g[s+24>>2]=v;g[s+28>>2]=0.0;Nh(b+4|0,s,b+164|0);Nh(b+16|0,s+36|0,b+180|0);i=s;return}if(!(m==m&n==n&(d==d&0.0==0.0))){i=s;return}v=+G(+(m*m+n*n+d*d));if(v<+g[f+368>>2]){i=s;return}h=c[s+36+32>>2]|0;v=+g[f+372>>2];g[s+12>>2]=0.0;g[s+28>>2]=0.0;c[s+32>>2]=h;g[s>>2]=-(m*v);g[s+4>>2]=-(n*v);g[s+8>>2]=-(d*v);g[s+16>>2]=v*-0.0;g[s+20>>2]=v*-0.0;g[s+24>>2]=v*-0.0;Nh(b+4|0,s,b+164|0);d=+g[(c[b+4>>2]|0)+372>>2];f=s;h=s+36|0;j=f+36|0;do{c[f>>2]=c[h>>2];f=f+4|0;h=h+4|0}while((f|0)<(j|0));g[s>>2]=d*+g[s>>2];g[s+4>>2]=d*+g[s+4>>2];g[s+8>>2]=d*+g[s+8>>2];g[s+16>>2]=d*+g[s+16>>2];g[s+20>>2]=d*+g[s+20>>2];g[s+24>>2]=d*+g[s+24>>2];Nh(b+16|0,s,b+180|0);i=s;return}function Ud(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,i=0,j=0,k=0,l=0,m=0;c[b>>2]=6036;c[6324]=(c[6324]|0)+1;e=ic(379)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}g[e+308>>2]=9.999999747378752e-005;l=e+332|0;a[l>>0]=a[l>>0]&-16;c[b+24>>2]=e;l=(c[d+20>>2]|0)==0;c[6324]=(c[6324]|0)+1;e=ic(23)|0;f=e+4+15&-16;c[f+-4>>2]=e;if(l){c[(e+4+15&-16)>>2]=8868;c[b+28>>2]=f}else{c[(e+4+15&-16)>>2]=8828;c[b+28>>2]=f}c[6324]=(c[6324]|0)+1;e=ic(43)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}k=c[b+24>>2]|0;l=c[b+28>>2]|0;a[e+4>>0]=0;c[e>>2]=9240;c[e+16>>2]=0;c[e+20>>2]=3;c[e+12>>2]=k;c[e+8>>2]=l;c[b+32>>2]=e;c[6324]=(c[6324]|0)+1;e=ic(27)|0;l=e+4+15&-16;c[l+-4>>2]=e;a[l+4>>0]=0;c[(e+4+15&-16)>>2]=6068;c[b+36>>2]=l;c[6324]=(c[6324]|0)+1;l=ic(27)|0;e=l+4+15&-16;c[e+-4>>2]=l;a[e+4>>0]=0;c[(l+4+15&-16)>>2]=6088;c[b+40>>2]=e;c[6324]=(c[6324]|0)+1;e=ic(27)|0;l=e+4+15&-16;c[l+-4>>2]=e;a[l+4>>0]=0;c[(e+4+15&-16)>>2]=6108;c[b+44>>2]=l;c[6324]=(c[6324]|0)+1;l=ic(27)|0;e=l+4+15&-16;c[e+-4>>2]=l;a[e+4>>0]=0;c[(l+4+15&-16)>>2]=6128;c[b+48>>2]=e;c[6324]=(c[6324]|0)+1;e=ic(27)|0;l=e+4+15&-16;c[l+-4>>2]=e;a[l+4>>0]=0;c[(e+4+15&-16)>>2]=6148;c[b+52>>2]=l;c[6324]=(c[6324]|0)+1;l=ic(27)|0;e=l+4+15&-16;c[e+-4>>2]=l;a[e+4>>0]=0;c[(l+4+15&-16)>>2]=6168;c[b+56>>2]=e;c[6324]=(c[6324]|0)+1;e=ic(27)|0;l=e+4+15&-16;c[l+-4>>2]=e;a[l+4>>0]=0;c[(e+4+15&-16)>>2]=6188;c[b+60>>2]=l;c[6324]=(c[6324]|0)+1;l=ic(27)|0;e=l+4+15&-16;c[e+-4>>2]=l;a[e+4>>0]=0;c[(l+4+15&-16)>>2]=6208;c[b+76>>2]=e;c[6324]=(c[6324]|0)+1;e=ic(27)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[e>>2]=6208;c[b+80>>2]=e;a[e+4>>0]=1;c[6324]=(c[6324]|0)+1;l=ic(27)|0;e=l+4+15&-16;c[e+-4>>2]=l;a[e+4>>0]=0;c[(l+4+15&-16)>>2]=6228;c[b+72>>2]=e;c[6324]=(c[6324]|0)+1;e=ic(35)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}a[e+4>>0]=0;c[e>>2]=6248;c[e+8>>2]=1;c[e+12>>2]=0;c[b+88>>2]=e;c[6324]=(c[6324]|0)+1;e=ic(35)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[e>>2]=6248;c[e+8>>2]=1;c[e+12>>2]=0;c[b+84>>2]=e;a[e+4>>0]=1;l=c[d+16>>2]|0;l=(l|0)>80?l:80;e=c[d>>2]|0;if(!e){a[b+12>>0]=1;c[6324]=(c[6324]|0)+1;e=ic(39)|0;if(!e)k=0;else{c[(e+4+15&-16)+-4>>2]=e;k=e+4+15&-16}e=c[d+8>>2]|0;c[k>>2]=804;f=k+4|0;c[f>>2]=e;c[6324]=(c[6324]|0)+1;e=ic((e*804|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[k+16>>2]=e;c[k+12>>2]=e;h=c[f>>2]|0;c[k+8>>2]=h;if(h+-1|0){i=c[k>>2]|0;f=e;j=h+-1|0;do{m=f;f=f+i|0;c[m>>2]=f;j=j+-1|0}while((j|0)!=0);e=e+(S(i,h+-1|0)|0)|0}c[e>>2]=0;c[b+8>>2]=k}else{a[b+12>>0]=0;c[b+8>>2]=e}h=(l|0)>116?l+16&-16:128;e=c[d+4>>2]|0;if(e|0){a[b+20>>0]=0;c[b+16>>2]=e;return}a[b+20>>0]=1;c[6324]=(c[6324]|0)+1;e=ic(39)|0;if(!e)k=0;else{c[(e+4+15&-16)+-4>>2]=e;k=e+4+15&-16}e=c[d+12>>2]|0;c[k>>2]=h;f=k+4|0;c[f>>2]=e;e=S(e,h)|0;c[6324]=(c[6324]|0)+1;e=ic((e|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[k+16>>2]=e;c[k+12>>2]=e;h=c[f>>2]|0;c[k+8>>2]=h;if(h+-1|0){i=c[k>>2]|0;f=e;j=h+-1|0;do{m=f;f=f+i|0;c[m>>2]=f;j=j+-1|0}while((j|0)!=0);e=e+(S(i,h+-1|0)|0)|0}c[e>>2]=0;c[b+16>>2]=k;return}function Vd(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0,s=0,t=0.0,u=0.0;s=i;i=i+48|0;c[s+16>>2]=c[e>>2];c[s+16+4>>2]=c[e+4>>2];c[s+16+8>>2]=c[e+8>>2];c[s+16+12>>2]=c[e+12>>2];c[s+16+16>>2]=c[f>>2];c[s+16+16+4>>2]=c[f+4>>2];c[s+16+16+8>>2]=c[f+8>>2];c[s+16+16+12>>2]=c[f+12>>2];do if((c[d+60>>2]|0)==2){h=c[d+48>>2]|0;Wg(b+64|0,h)|0;j=c[b+68>>2]|0;if(j|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[b+68>>2]=h;c[b+76>>2]=(c[b+76>>2]|0)+-1;h=c[b+8>>2]|0;if(!h){c[6324]=(c[6324]|0)+1;h=ic(63)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}j=h;k=j+44|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(k|0))}else c[b+8>>2]=0;c[h+32>>2]=0;c[h+36>>2]=d;c[h+40>>2]=0;c[h>>2]=c[s+16>>2];c[h+4>>2]=c[s+16+4>>2];c[h+8>>2]=c[s+16+8>>2];c[h+12>>2]=c[s+16+12>>2];c[h+16>>2]=c[s+16+16>>2];c[h+20>>2]=c[s+16+20>>2];c[h+24>>2]=c[s+16+24>>2];c[h+28>>2]=c[s+16+28>>2];Ze(b+4|0,c[b+4>>2]|0,h);c[b+16>>2]=(c[b+16>>2]|0)+1;c[d+48>>2]=h;h=1}else{c[b+168>>2]=(c[b+168>>2]|0)+1;r=c[d+48>>2]|0;if(((((+g[r>>2]<=+g[s+16+16>>2]?+g[r+16>>2]>=+g[s+16>>2]:0)?+g[r+4>>2]<=+g[s+16+20>>2]:0)?+g[r+20>>2]>=+g[s+16+4>>2]:0)?+g[r+8>>2]<=+g[s+16+24>>2]:0)?+g[r+24>>2]>=+g[s+16+8>>2]:0){l=+g[d+16>>2];t=+g[e>>2]-l;m=+g[d+20>>2];p=+g[e+4>>2]-m;n=+g[d+24>>2];q=+g[e+8>>2]-n;u=+g[b+140>>2];l=(+g[d+32>>2]-l)*.5*u;m=(+g[d+36>>2]-m)*.5*u;n=u*(+g[d+40>>2]-n)*.5;g[s>>2]=l;g[s+4>>2]=m;g[s+8>>2]=n;g[s+12>>2]=0.0;if(t<0.0)g[s>>2]=-l;if(p<0.0)g[s+4>>2]=-m;if(q<0.0)g[s+8>>2]=-n;if(Yg(b+4|0,r,s+16|0,s,.05000000074505806)|0){c[b+172>>2]=(c[b+172>>2]|0)+1;h=1}else h=0;break}h=Wg(b+4|0,r)|0;a:do if(h){o=c[b+12>>2]|0;if((o|0)<=-1){h=c[b+4>>2]|0;break}if(o){j=0;while(1){k=c[h+32>>2]|0;j=j+1|0;if(!k)break a;if((j|0)>=(o|0)){h=k;break}else h=k}}}else h=0;while(0);c[r>>2]=c[s+16>>2];c[r+4>>2]=c[s+16+4>>2];c[r+8>>2]=c[s+16+8>>2];c[r+12>>2]=c[s+16+12>>2];c[r+16>>2]=c[s+16+16>>2];c[r+20>>2]=c[s+16+20>>2];c[r+24>>2]=c[s+16+24>>2];c[r+28>>2]=c[s+16+28>>2];Ze(b+4|0,h,r);c[b+172>>2]=(c[b+172>>2]|0)+1;h=1}while(0);j=c[d+52>>2]|0;k=c[d+56>>2]|0;if(!j)c[b+124+(c[d+60>>2]<<2)>>2]=k;else c[j+56>>2]=k;j=c[d+56>>2]|0;if(j|0)c[j+52>>2]=c[d+52>>2];c[d+16>>2]=c[e>>2];c[d+16+4>>2]=c[e+4>>2];c[d+16+8>>2]=c[e+8>>2];c[d+16+12>>2]=c[e+12>>2];c[d+32>>2]=c[f>>2];c[d+32+4>>2]=c[f+4>>2];c[d+32+8>>2]=c[f+8>>2];c[d+32+12>>2]=c[f+12>>2];j=c[b+144>>2]|0;c[d+60>>2]=j;c[d+52>>2]=0;c[d+56>>2]=c[b+124+(j<<2)>>2];k=c[b+124+(j<<2)>>2]|0;if(k|0)c[k+52>>2]=d;c[b+124+(j<<2)>>2]=d;if(!h){i=s;return}a[b+194>>0]=1;if(a[b+193>>0]|0){i=s;return}c[s>>2]=5276;c[s+4>>2]=b;ge(b+64|0,c[b+64>>2]|0,c[d+48>>2]|0,s);ge(b+4|0,c[b+4>>2]|0,c[d+48>>2]|0,s);i=s;return}function Wd(d,e,f,h){d=d|0;e=e|0;f=f|0;h=h|0;var i=0,j=0.0,k=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0,C=0.0,D=0.0;k=+g[e>>2];i=(g[l>>2]=k,c[l>>2]|0);r=k<999999984306749440.0?i:1566444395;j=+g[e+4>>2];n=(g[l>>2]=j,c[l>>2]|0);u=j<999999984306749440.0?n:1566444395;A=+g[e+8>>2];p=(g[l>>2]=A,c[l>>2]|0);z=A<999999984306749440.0?p:1566444395;i=k>-999999984306749440.0?i:-581039253;n=j>-999999984306749440.0?n:-581039253;p=A>-999999984306749440.0?p:-581039253;A=+g[e+16>>2];v=A<(c[l>>2]=r,+g[l>>2]);m=(g[l>>2]=A,c[l>>2]|0);r=v?m:r;j=+g[e+20>>2];v=j<(c[l>>2]=u,+g[l>>2]);o=(g[l>>2]=j,c[l>>2]|0);u=v?o:u;k=+g[e+24>>2];v=k<(c[l>>2]=z,+g[l>>2]);q=(g[l>>2]=k,c[l>>2]|0);z=v?q:z;v=(c[l>>2]=i,+g[l>>2])<A?m:i;t=(c[l>>2]=n,+g[l>>2])<j?o:n;s=(c[l>>2]=p,+g[l>>2])<k?q:p;A=+g[e+32>>2];o=A<(c[l>>2]=r,+g[l>>2]);n=(g[l>>2]=A,c[l>>2]|0);o=o?n:r;k=+g[e+36>>2];m=k<(c[l>>2]=u,+g[l>>2]);q=(g[l>>2]=k,c[l>>2]|0);m=m?q:u;j=+g[e+40>>2];i=j<(c[l>>2]=z,+g[l>>2]);p=(g[l>>2]=j,c[l>>2]|0);i=i?p:z;n=(c[l>>2]=v,+g[l>>2])<A?n:v;q=(c[l>>2]=t,+g[l>>2])<k?q:t;p=(c[l>>2]=s,+g[l>>2])<j?p:s;j=(c[l>>2]=n,+g[l>>2]);k=(c[l>>2]=o,+g[l>>2]);if(j-k<2.0000000949949026e-003){n=(g[l>>2]=j+1.0000000474974513e-003,c[l>>2]|0);o=(g[l>>2]=k+-1.0000000474974513e-003,c[l>>2]|0)}j=(c[l>>2]=q,+g[l>>2]);k=(c[l>>2]=m,+g[l>>2]);if(j-k<2.0000000949949026e-003){q=(g[l>>2]=j+1.0000000474974513e-003,c[l>>2]|0);m=(g[l>>2]=k+-1.0000000474974513e-003,c[l>>2]|0)}j=(c[l>>2]=p,+g[l>>2]);k=(c[l>>2]=i,+g[l>>2]);if(j-k<2.0000000949949026e-003){p=(g[l>>2]=j+1.0000000474974513e-003,c[l>>2]|0);i=(g[l>>2]=k+-1.0000000474974513e-003,c[l>>2]|0)}r=c[d+8>>2]|0;k=+g[r+4>>2];A=(c[l>>2]=o,+g[l>>2])-k;j=+g[r+8>>2];x=(c[l>>2]=m,+g[l>>2])-j;D=+g[r+12>>2];y=+g[r+36>>2];w=+g[r+40>>2];C=+g[r+44>>2];r=~~(((c[l>>2]=i,+g[l>>2])-D)*C)&65534;k=(c[l>>2]=n,+g[l>>2])-k;j=(c[l>>2]=q,+g[l>>2])-j;p=(~~(((c[l>>2]=p,+g[l>>2])-D)*C+1.0)&65535|1)&65535;o=c[d+4>>2]|0;i=c[o+4>>2]|0;if((i|0)==(c[o+8>>2]|0)?(B=i|0?i<<1:1,(i|0)<(B|0)):0){if(!B)n=0;else{c[6324]=(c[6324]|0)+1;i=ic((B<<4|3)+16|0)|0;if(!i)i=0;else{c[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n=i;i=c[o+4>>2]|0}if((i|0)>0){m=0;do{d=n+(m<<4)|0;z=(c[o+12>>2]|0)+(m<<4)|0;c[d>>2]=c[z>>2];c[d+4>>2]=c[z+4>>2];c[d+8>>2]=c[z+8>>2];c[d+12>>2]=c[z+12>>2];m=m+1|0}while((m|0)!=(i|0))}i=c[o+12>>2]|0;if(i|0){if(a[o+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[i+-4>>2]|0)}c[o+12>>2]=0}a[o+16>>0]=1;c[o+12>>2]=n;c[o+8>>2]=B;i=c[o+4>>2]|0}B=c[o+12>>2]|0;b[B+(i<<4)>>1]=~~(A*y)&65534;b[B+(i<<4)+2>>1]=~~(x*w)&65534;b[B+(i<<4)+4>>1]=r;b[B+(i<<4)+6>>1]=~~(k*y+1.0)&65535|1;b[B+(i<<4)+8>>1]=~~(j*w+1.0)&65535|1;b[B+(i<<4)+10>>1]=p;c[B+(i<<4)+12>>2]=f<<21|h;c[o+4>>2]=(c[o+4>>2]|0)+1;return}function Xd(b,d,e,f,h,i,j,k){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;j=j|0;k=k|0;var m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0;c[b+4>>2]=4;c[b+8>>2]=-1;c[b+12>>2]=-1;g[b+16>>2]=34028234663852886.0e22;a[b+20>>0]=1;a[b+21>>0]=0;c[b+24>>2]=-1;c[b+28>>2]=d;c[b+32>>2]=e;g[b+36>>2]=0.0;g[b+40>>2]=.30000001192092896;c[b+44>>2]=0;c[b>>2]=4452;g[b+688>>2]=0.0;g[b+692>>2]=-1.0;g[b+696>>2]=.8999999761581421;g[b+700>>2]=.30000001192092896;g[b+704>>2]=1.0;g[b+708>>2]=0.0;g[b+712>>2]=0.0;a[b+716>>0]=0;a[b+736>>0]=0;a[b+737>>0]=0;a[b+738>>0]=0;a[b+739>>0]=1;a[b+740>>0]=k&1;c[b+748>>2]=0;c[b+748+4>>2]=0;c[b+748+8>>2]=0;c[b+748+12>>2]=0;c[b+748+16>>2]=0;c[b+600>>2]=c[f>>2];c[b+600+4>>2]=c[f+4>>2];c[b+600+8>>2]=c[f+8>>2];c[b+600+12>>2]=c[f+12>>2];m=+g[d+4>>2];n=+g[d+20>>2];o=+g[d+36>>2];p=+g[i>>2];q=+g[i+4>>2];r=+g[i+8>>2];do if(!(m*p+n*q+o*r>=.9999998807907105))if(!(m*p+n*q+o*r<=-.9999998807907105)){f=(g[l>>2]=o*q-n*r,c[l>>2]|0);e=(g[l>>2]=m*r-o*p,c[l>>2]|0);k=(g[l>>2]=n*p-m*q,c[l>>2]|0);u=(g[l>>2]=r*(m*r-o*p)-q*(n*p-m*q),c[l>>2]|0);v=(g[l>>2]=p*(n*p-m*q)-r*(o*q-n*r),c[l>>2]|0);t=(g[l>>2]=q*(o*q-n*r)-p*(m*r-o*p),c[l>>2]|0);break}else{f=c[d+8>>2]|0;u=c[d+12>>2]|0;v=c[d+28>>2]|0;k=c[d+40>>2]|0;t=c[d+44>>2]|0;e=c[d+24>>2]|0;break}else{u=(g[l>>2]=-+g[d+12>>2],c[l>>2]|0);v=(g[l>>2]=-+g[d+28>>2],c[l>>2]|0);f=c[d+8>>2]|0;k=c[d+40>>2]|0;t=(g[l>>2]=-+g[d+44>>2],c[l>>2]|0);e=c[d+24>>2]|0}while(0);c[b+552>>2]=u;c[b+556>>2]=f;c[b+560>>2]=c[i>>2];g[b+564>>2]=0.0;c[b+568>>2]=v;c[b+572>>2]=e;c[b+576>>2]=c[i+4>>2];g[b+580>>2]=0.0;c[b+584>>2]=t;c[b+588>>2]=k;c[b+592>>2]=c[i+8>>2];g[b+596>>2]=0.0;p=+g[i+4>>2];q=+g[j+8>>2];m=+g[i+8>>2];r=+g[j+4>>2];s=+g[j>>2];n=+g[i>>2];do if(q*m+(p*r+s*n)<-.9999998807907105)if(+F(+m)>.7071067690849304){n=1.0/+G(+(p*p+m*m));f=0;o=0.0;m=-(m*n);e=(g[l>>2]=p*n,c[l>>2]|0);break}else{m=1.0/+G(+(p*p+n*n));f=(g[l>>2]=-(p*m),c[l>>2]|0);o=0.0;m=n*m;e=0;break}else{w=+G(+((q*m+(p*r+s*n)+1.0)*2.0));f=(g[l>>2]=(p*q-m*r)*(1.0/w),c[l>>2]|0);o=w*.5;m=(m*s-q*n)*(1.0/w);e=(g[l>>2]=(r*n-p*s)*(1.0/w),c[l>>2]|0)}while(0);p=(c[l>>2]=u,+g[l>>2]);A=(c[l>>2]=t,+g[l>>2]);z=(c[l>>2]=e,+g[l>>2]);w=(c[l>>2]=v,+g[l>>2]);B=p*o+A*m-w*z;n=(c[l>>2]=f,+g[l>>2]);x=w*o+p*z-A*n;y=A*o+w*n-p*m;A=-(p*n)-w*m-A*z;m=-m;w=x*-z+(o*B+A*-n)-y*m;p=y*-n+(o*x+A*m)-B*-z;o=B*m+(A*-z+o*y)-x*-n;c[b+664>>2]=c[h>>2];c[b+664+4>>2]=c[h+4>>2];c[b+664+8>>2]=c[h+8>>2];c[b+664+12>>2]=c[h+12>>2];g[b+616>>2]=w;g[b+620>>2]=r*o-q*p;c[b+624>>2]=c[j>>2];g[b+628>>2]=0.0;g[b+632>>2]=p;g[b+636>>2]=q*w-s*o;c[b+640>>2]=c[j+4>>2];g[b+644>>2]=0.0;g[b+648>>2]=o;g[b+652>>2]=s*p-r*w;c[b+656>>2]=c[j+8>>2];g[b+660>>2]=0.0;g[b+732>>2]=a[b+740>>0]|0?-1.0:1.0;return}function Yd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0;p=i;i=i+144|0;if((c[a+20>>2]|0)<=0){o=a+80|0;c[o>>2]=c[b>>2];c[o+4>>2]=c[b+4>>2];c[o+8>>2]=c[b+8>>2];c[o+12>>2]=c[b+12>>2];o=c[a>>2]|0;o=o+68|0;o=c[o>>2]|0;kb[o&255](a);i=p;return}k=p+16+16|0;l=p+16+32|0;m=p+16+48|0;j=0;do{o=c[a+28>>2]|0;n=o+(j*80|0)|0;c[p+16>>2]=c[n>>2];c[p+16+4>>2]=c[n+4>>2];c[p+16+8>>2]=c[n+8>>2];c[p+16+12>>2]=c[n+12>>2];n=o+(j*80|0)+16|0;c[k>>2]=c[n>>2];c[k+4>>2]=c[n+4>>2];c[k+8>>2]=c[n+8>>2];c[k+12>>2]=c[n+12>>2];n=o+(j*80|0)+32|0;c[l>>2]=c[n>>2];c[l+4>>2]=c[n+4>>2];c[l+8>>2]=c[n+8>>2];c[l+12>>2]=c[n+12>>2];n=o+(j*80|0)+48|0;c[m>>2]=c[n>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];o=c[o+(j*80|0)+64>>2]|0;o=ob[c[(c[o>>2]|0)+28>>2]&127](o)|0;c[p>>2]=c[o>>2];c[p+4>>2]=c[o+4>>2];c[p+8>>2]=c[o+8>>2];q=+g[p+4>>2]*+g[b+4>>2]/+g[a+84>>2];r=+g[p+8>>2]*+g[b+8>>2]/+g[a+88>>2];g[p>>2]=+g[p>>2]*+g[b>>2]/+g[a+80>>2];g[p+4>>2]=q;g[p+8>>2]=r;g[p+12>>2]=0.0;o=c[(c[a+28>>2]|0)+(j*80|0)+64>>2]|0;mb[c[(c[o>>2]|0)+24>>2]&127](o,p);r=+g[p+16+52>>2]*+g[b+4>>2]/+g[a+84>>2];q=+g[p+16+56>>2]*+g[b+8>>2]/+g[a+88>>2];g[p+16+48>>2]=+g[m>>2]*+g[b>>2]/+g[a+80>>2];g[p+16+52>>2]=r;g[p+16+56>>2]=q;g[p+16+60>>2]=0.0;o=c[a+28>>2]|0;n=o+(j*80|0)|0;c[n>>2]=c[p+16>>2];c[n+4>>2]=c[p+16+4>>2];c[n+8>>2]=c[p+16+8>>2];c[n+12>>2]=c[p+16+12>>2];n=o+(j*80|0)+16|0;c[n>>2]=c[k>>2];c[n+4>>2]=c[k+4>>2];c[n+8>>2]=c[k+8>>2];c[n+12>>2]=c[k+12>>2];n=o+(j*80|0)+32|0;c[n>>2]=c[l>>2];c[n+4>>2]=c[l+4>>2];c[n+8>>2]=c[l+8>>2];c[n+12>>2]=c[l+12>>2];o=o+(j*80|0)+48|0;c[o>>2]=c[m>>2];c[o+4>>2]=c[m+4>>2];c[o+8>>2]=c[m+8>>2];c[o+12>>2]=c[m+12>>2];if(c[a+68>>2]|0){n=c[(c[a+28>>2]|0)+(j*80|0)+64>>2]|0;Yb[c[(c[n>>2]|0)+8>>2]&127](n,p+16|0,p+128|0,p+112|0);c[p+80>>2]=c[p+128>>2];c[p+80+4>>2]=c[p+128+4>>2];c[p+80+8>>2]=c[p+128+8>>2];c[p+80+12>>2]=c[p+128+12>>2];c[p+80+16>>2]=c[p+112>>2];c[p+80+16+4>>2]=c[p+112+4>>2];c[p+80+16+8>>2]=c[p+112+8>>2];c[p+80+16+12>>2]=c[p+112+12>>2];n=c[a+68>>2]|0;o=c[(c[a+28>>2]|0)+(j*80|0)+76>>2]|0;d=Wg(n,o)|0;a:do if(d){h=c[n+8>>2]|0;if((h|0)<=-1){d=c[n>>2]|0;break}if(h){e=0;while(1){f=c[d+32>>2]|0;e=e+1|0;if(!f)break a;if((e|0)>=(h|0)){d=f;break}else d=f}}}else d=0;while(0);c[o>>2]=c[p+80>>2];c[o+4>>2]=c[p+80+4>>2];c[o+8>>2]=c[p+80+8>>2];c[o+12>>2]=c[p+80+12>>2];c[o+16>>2]=c[p+80+16>>2];c[o+20>>2]=c[p+80+20>>2];c[o+24>>2]=c[p+80+24>>2];c[o+28>>2]=c[p+80+28>>2];Ze(n,d,o)}j=j+1|0}while((j|0)<(c[a+20>>2]|0));o=a+80|0;c[o>>2]=c[b>>2];c[o+4>>2]=c[b+4>>2];c[o+8>>2]=c[b+8>>2];c[o+12>>2]=c[b+12>>2];o=c[a>>2]|0;o=o+68|0;o=c[o>>2]|0;kb[o&255](a);i=p;return}function Zd(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0;s=i;i=i+96|0;q=c[b+12>>2]|0;Yb[c[(c[q>>2]|0)+8>>2]&127](q,(c[b+8>>2]|0)+4|0,s+80|0,s+64|0);q=c[d+68>>2]|0;ib[c[(c[q>>2]|0)+16>>2]&31](q,c[(c[b+8>>2]|0)+188>>2]|0,s+80|0,s+64|0,c[d+24>>2]|0);q=c[d+24>>2]|0;Yb[c[(c[q>>2]|0)+32>>2]&127](q,c[(c[b+8>>2]|0)+324>>2]|0,d+28|0,q);q=c[b+8>>2]|0;c[b+132>>2]=c[q+52>>2];c[b+132+4>>2]=c[q+52+4>>2];c[b+132+8>>2]=c[q+52+8>>2];c[b+132+12>>2]=c[q+52+12>>2];q=c[q+324>>2]|0;if((ob[c[(c[q>>2]|0)+36>>2]&127](q)|0)>0){d=0;q=0;do{e=c[b+204>>2]|0;if((e|0)<0){if((c[b+208>>2]|0)<0){f=c[b+212>>2]|0;if(f|0){if(a[b+216>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+212>>2]=0}a[b+216>>0]=1;c[b+212>>2]=0;c[b+208>>2]=0}do{c[(c[b+212>>2]|0)+(e<<2)>>2]=0;e=e+1|0}while((e|0)!=0)}c[b+204>>2]=0;e=c[(c[b+8>>2]|0)+324>>2]|0;e=c[(ob[c[(c[e>>2]|0)+28>>2]&127](e)|0)+12>>2]|0;f=c[c[e+(q<<4)>>2]>>2]|0;h=c[c[e+(q<<4)+4>>2]>>2]|0;if(!((f|0)!=0?(c[f+204>>2]&4|0)!=0:0))r=14;do if((r|0)==14){r=0;if(h|0?c[h+204>>2]&4|0:0)break;if(yb[c[(c[b>>2]|0)+56>>2]&63](b,f,h)|0){e=c[e+(q<<4)+8>>2]|0;if(e|0)mb[c[(c[e>>2]|0)+16>>2]&127](e,b+200|0);p=c[b+204>>2]|0;if((p|0)>0){n=c[b+212>>2]|0;o=c[b+8>>2]|0;m=0;do{f=c[n+(m<<2)>>2]|0;k=(c[f+772>>2]|0)==(o|0)?-1.0:1.0;h=c[f+780>>2]|0;if((h|0)>0){l=-+g[b+16>>2];e=0;do{j=+g[f+4+(e*192|0)+80>>2];if(j<l){u=j*k*+g[f+4+(e*192|0)+68>>2]*.20000000298023224;t=j*k*+g[f+4+(e*192|0)+72>>2]*.20000000298023224;g[b+132>>2]=j*k*+g[f+4+(e*192|0)+64>>2]*.20000000298023224+ +g[b+132>>2];g[b+136>>2]=u+ +g[b+136>>2];g[b+140>>2]=t+ +g[b+140>>2];d=1}e=e+1|0}while((e|0)!=(h|0))}m=m+1|0}while((m|0)!=(p|0))}}}while(0);q=q+1|0;p=c[(c[b+8>>2]|0)+324>>2]|0}while((q|0)<(ob[c[(c[p>>2]|0)+36>>2]&127](p)|0))}else d=0;r=c[b+8>>2]|0;c[s>>2]=c[r+4>>2];c[s+4>>2]=c[r+4+4>>2];c[s+8>>2]=c[r+4+8>>2];c[s+12>>2]=c[r+4+12>>2];c[s+16>>2]=c[r+20>>2];c[s+16+4>>2]=c[r+20+4>>2];c[s+16+8>>2]=c[r+20+8>>2];c[s+16+12>>2]=c[r+20+12>>2];c[s+32>>2]=c[r+36>>2];c[s+32+4>>2]=c[r+36+4>>2];c[s+32+8>>2]=c[r+36+8>>2];c[s+32+12>>2]=c[r+36+12>>2];c[s+48>>2]=c[b+132>>2];c[s+48+4>>2]=c[b+132+4>>2];c[s+48+8>>2]=c[b+132+8>>2];c[s+48+12>>2]=c[b+132+12>>2];c[r+300>>2]=(c[r+300>>2]|0)+1;c[r+4>>2]=c[s>>2];c[r+4+4>>2]=c[s+4>>2];c[r+4+8>>2]=c[s+8>>2];c[r+4+12>>2]=c[s+12>>2];c[r+20>>2]=c[s+16>>2];c[r+20+4>>2]=c[s+16+4>>2];c[r+20+8>>2]=c[s+16+8>>2];c[r+20+12>>2]=c[s+16+12>>2];c[r+36>>2]=c[s+32>>2];c[r+36+4>>2]=c[s+32+4>>2];c[r+36+8>>2]=c[s+32+8>>2];c[r+36+12>>2]=c[s+32+12>>2];c[r+52>>2]=c[s+48>>2];c[r+52+4>>2]=c[s+48+4>>2];c[r+52+8>>2]=c[s+48+8>>2];c[r+52+12>>2]=c[s+48+12>>2];i=s;return d|0}function _d(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+336|0;f=c[d+36>>2]|0;c[m+272+4>>2]=35;c[m+272+8>>2]=0;c[m+272+12>>2]=-1;c[m+272+16>>2]=1065353216;c[m+272+20>>2]=1065353216;c[m+272+24>>2]=1065353216;g[m+272+28>>2]=0.0;c[m+272>>2]=3252;c[m+272+56>>2]=f;g[m+272+48>>2]=0.0;k=c[b+28>>2]|0;d=c[k+4>>2]|0;if(c[(c[k+8>>2]|0)+204>>2]&3|0?a[f+376>>0]|0:0){i=m;return}if(!(a[21984]|0)){a[21984]=1;if(!(a[21992]|0)){a[21992]=1;c[5577]=1065353216;c[5578]=0;c[5579]=0;c[5580]=0;c[5581]=0;c[5582]=1065353216;c[5583]=0;c[5584]=0;c[5585]=0;c[5586]=0;c[5587]=1065353216;g[5588]=0.0}c[5561]=c[5577];c[5562]=c[5578];c[5563]=c[5579];c[5564]=c[5580];c[5565]=c[5581];c[5566]=c[5582];c[5567]=c[5583];c[5568]=c[5584];c[5569]=c[5585];c[5570]=c[5586];c[5571]=c[5587];c[5572]=c[5588];c[5573]=0;c[5574]=0;c[5575]=0;c[5576]=0}e=c[(c[b+28>>2]|0)+12>>2]|0;c[m>>2]=1065353216;c[m+4>>2]=0;c[m+8>>2]=0;g[m+12>>2]=0.0;if(!(!(td(m+272|0,22244,d,e,m,m+216|0)|0)?!(Bc(m+272|0,22244,d,e,m,m+216|0,0)|0):0)){c[m+4>>2]=0;c[m+4+4>>2]=0;c[m+4+8>>2]=0;c[m+4+12>>2]=0;c[m+4+16>>2]=0;c[m+4+20>>2]=0;a[m+152>>0]=0;c[m>>2]=3072;k=c[(c[b+28>>2]|0)+8>>2]|0;do if(Uc(b,m+216|0,f,0,0,0,(c[k+248>>2]&2|0)==0?0:k,k,m)|0){c[6324]=(c[6324]|0)+1;d=ic(235)|0;if(!d)k=0;else{c[(d+4+15&-16)+-4>>2]=d;k=d+4+15&-16}e=k+4|0;d=k+152|0;yn(e|0,0,212)|0;c[k>>2]=3072;f=m+4|0;h=e+100|0;do{c[e>>2]=c[f>>2];e=e+4|0;f=f+4|0}while((e|0)<(h|0));e=k+104|0;c[e>>2]=c[m+104>>2];c[e+4>>2]=c[m+104+4>>2];c[e+8>>2]=c[m+104+8>>2];c[e+12>>2]=c[m+104+12>>2];e=k+120|0;c[e>>2]=c[m+120>>2];c[e+4>>2]=c[m+120+4>>2];c[e+8>>2]=c[m+120+8>>2];c[e+12>>2]=c[m+120+12>>2];e=k+136|0;c[e>>2]=c[m+136>>2];c[e+4>>2]=c[m+136+4>>2];c[e+8>>2]=c[m+136+8>>2];c[e+12>>2]=c[m+136+12>>2];a[d>>0]=a[m+152>>0]|0;e=k+156|0;f=m+156|0;h=e+60|0;do{c[e>>2]=c[f>>2];e=e+4|0;f=f+4|0}while((e|0)<(h|0));h=c[b+24>>2]|0;j=k;d=c[h+892>>2]|0;if((d|0)==(c[h+896>>2]|0)?(l=d|0?d<<1:1,(d|0)<(l|0)):0){if(!l)f=0;else{c[6324]=(c[6324]|0)+1;d=ic((l<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}f=d;d=c[h+892>>2]|0}if((d|0)>0){e=0;do{c[f+(e<<2)>>2]=c[(c[h+900>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(d|0))}e=c[h+900>>2]|0;if(e){if(a[h+904>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);d=c[h+892>>2]|0}c[h+900>>2]=0}a[h+904>>0]=1;c[h+900>>2]=f;c[h+896>>2]=l}c[(c[h+900>>2]|0)+(d<<2)>>2]=j;c[h+892>>2]=d+1;d=c[b+24>>2]|0;if(!(c[(c[(c[b+28>>2]|0)+8>>2]|0)+204>>2]&3)){b=k+64|0;g[b>>2]=+g[d+380>>2]*+g[b>>2];b=k+68|0;g[b>>2]=+g[d+392>>2]*+g[b>>2];break}else{b=k+64|0;g[b>>2]=+g[d+384>>2]*+g[b>>2];b=k+68|0;g[b>>2]=+g[d+396>>2]*+g[b>>2];break}}while(0)}i=m;return}function $d(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,h=0,i=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0;B=c[a+752>>2]|0;if((B|0)>=1){c[6324]=(c[6324]|0)+1;d=ic((B<<4|3)+16|0)|0;if(!d)h=0;else{c[(d+4+15&-16)+-4>>2]=d;h=d+4+15&-16}yn(h|0,0,B<<4|0)|0;f=c[a+752>>2]|0;if((f|0)>0){c[6324]=(c[6324]|0)+1;d=ic((f<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}yn(d|0,0,f<<2|0)|0;A=d;z=h}else{A=0;z=h}}else{A=0;z=0}y=c[a+1152>>2]|0;if(b){if((y|0)>0){i=c[a+1160>>2]|0;d=0;do{f=c[i+(d<<2)>>2]|0;h=c[f+312>>2]|0;if(h|0){g[f+276>>2]=1.0/+(h|0)*+g[f+276>>2];g[f+280>>2]=1.0/+(h|0)*+g[f+280>>2];g[f+284>>2]=1.0/+(h|0)*+g[f+284>>2];g[f+292>>2]=+g[f+292>>2]*(1.0/+(h|0));g[f+296>>2]=1.0/+(h|0)*+g[f+296>>2];g[f+300>>2]=1.0/+(h|0)*+g[f+300>>2]}d=d+1|0}while((d|0)!=(y|0));i=11}}else i=11;if((i|0)==11?(y|0)>0:0){k=c[a+1160>>2]|0;if(b){f=0;do{h=c[k+(f<<2)>>2]|0;if((c[h+312>>2]|0)>0?(w=+g[a+492>>2],r=+g[h+276>>2]*w,s=w*+g[h+280>>2],t=w*+g[h+284>>2],u=w*+g[h+292>>2],v=w*+g[h+296>>2],w=w*+g[h+300>>2],x=c[h+24>>2]|0,(x|0)>0):0){i=c[h+32>>2]|0;b=c[a+760>>2]|0;j=c[h+12>>2]|0;d=0;do{q=c[i+(d<<2)>>2]|0;p=+g[j+(d<<2)>>2];o=+g[q+8>>2]-+g[h+228>>2];n=+g[q+12>>2]-+g[h+232>>2];m=+g[q+16>>2]-+g[h+236>>2];C=z+(((q-b|0)/104|0)<<4)|0;g[C>>2]=+g[C>>2]+p*(r+(v*m-w*n));C=z+(((q-b|0)/104|0)<<4)+4|0;g[C>>2]=+g[C>>2]+p*(s+(w*o-u*m));C=z+(((q-b|0)/104|0)<<4)+8|0;g[C>>2]=p*(t+(u*n-v*o))+ +g[C>>2];q=A+(((q-b|0)/104|0)<<2)|0;g[q>>2]=p+ +g[q>>2];d=d+1|0}while((d|0)!=(x|0))}f=f+1|0}while((f|0)!=(y|0))}else{f=0;do{h=c[k+(f<<2)>>2]|0;if((c[h+308>>2]|0)>0?(p=+g[a+492>>2],e=+g[h+244>>2]*p,l=p*+g[h+248>>2],m=p*+g[h+252>>2],n=p*+g[h+260>>2],o=p*+g[h+264>>2],p=p*+g[h+268>>2],q=c[h+24>>2]|0,(q|0)>0):0){i=c[h+32>>2]|0;b=c[a+760>>2]|0;j=c[h+12>>2]|0;d=0;do{C=c[i+(d<<2)>>2]|0;w=+g[j+(d<<2)>>2];v=+g[C+8>>2]-+g[h+228>>2];u=+g[C+12>>2]-+g[h+232>>2];t=+g[C+16>>2]-+g[h+236>>2];x=z+(((C-b|0)/104|0)<<4)|0;g[x>>2]=+g[x>>2]+w*(e+(o*t-p*u));x=z+(((C-b|0)/104|0)<<4)+4|0;g[x>>2]=+g[x>>2]+w*(l+(p*v-n*t));x=z+(((C-b|0)/104|0)<<4)+8|0;g[x>>2]=w*(m+(n*u-o*v))+ +g[x>>2];C=A+(((C-b|0)/104|0)<<2)|0;g[C>>2]=w+ +g[C>>2];d=d+1|0}while((d|0)!=(q|0))}f=f+1|0}while((f|0)!=(y|0))}}if((B|0)>0){d=0;do{e=+g[A+(d<<2)>>2];if(e>0.0){C=c[a+760>>2]|0;v=1.0/e*+g[z+(d<<4)+4>>2];w=1.0/e*+g[z+(d<<4)+8>>2];y=C+(d*104|0)+8|0;g[y>>2]=1.0/e*+g[z+(d<<4)>>2]+ +g[y>>2];y=C+(d*104|0)+12|0;g[y>>2]=v+ +g[y>>2];C=C+(d*104|0)+16|0;g[C>>2]=w+ +g[C>>2]}d=d+1|0}while((d|0)!=(B|0))}if(A|0){c[6325]=(c[6325]|0)+1;Rc(c[A+-4>>2]|0)}if(!z)return;c[6325]=(c[6325]|0)+1;Rc(c[z+-4>>2]|0);return}function ae(d,f,h,i,j,k){d=d|0;f=f|0;h=h|0;i=i|0;j=j|0;k=k|0;var l=0.0,m=0.0,n=0.0;c[d>>2]=5072;b[d+4>>1]=-2;b[d+6>>1]=-1;c[d+92>>2]=j;c[d+96>>2]=0;a[d+100>>0]=0;c[d+104>>2]=0;c[d+108>>2]=0;if(!j){c[6324]=(c[6324]|0)+1;j=ic(91)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}Hi(j);c[d+92>>2]=j;a[d+100>>0]=1}if(!k){c[6324]=(c[6324]|0)+1;j=ic(43)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}k=j+4|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;c[j>>2]=5136;a[j+20>>0]=1;c[j+16>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[d+112>>2]=j;c[6324]=(c[6324]|0)+1;j=ic(215)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}Oh(j,c[d+112>>2]|0);c[d+108>>2]=j;a[j+193>>0]=1}c[d+8>>2]=c[f>>2];c[d+8+4>>2]=c[f+4>>2];c[d+8+8>>2]=c[f+8>>2];c[d+8+12>>2]=c[f+12>>2];c[d+24>>2]=c[h>>2];c[d+24+4>>2]=c[h+4>>2];c[d+24+8>>2]=c[h+8>>2];c[d+24+12>>2]=c[h+12>>2];n=+(e[d+6>>1]|0);m=n/(+g[d+28>>2]-+g[d+12>>2]);l=n/(+g[d+32>>2]-+g[d+16>>2]);g[d+40>>2]=n/(+g[d+24>>2]-+g[d+8>>2]);g[d+44>>2]=m;g[d+48>>2]=l;g[d+52>>2]=0.0;h=(i&65535)+1&65535;c[6324]=(c[6324]|0)+1;j=ic(h<<6|19)|0;if(!j)f=0;else{c[(j+4+15&-16)+-4>>2]=j;f=j+4+15&-16}if(h|0){j=f+(h<<6)|0;k=f;do{c[k>>2]=0;c[k+8>>2]=0;k=k+64|0}while((k|0)!=(j|0))}c[d+60>>2]=f;b[d+58>>1]=(i&65535)+1;b[d+56>>1]=0;b[d+64>>1]=1;if(h>>>0>1){j=1;k=1;do{b[f+(k<<6)+48>>1]=k+1;j=j+1<<16>>16;k=j&65535}while(k>>>0<h>>>0)}b[f+(h+-1<<6)+48>>1]=0;c[6324]=(c[6324]|0)+1;j=ic((h<<3|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}c[d+80>>2]=j;c[d+68>>2]=j;c[6324]=(c[6324]|0)+1;j=ic((h<<3|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}c[d+84>>2]=j;c[d+72>>2]=j;c[6324]=(c[6324]|0)+1;j=ic((h<<3|3)+16|0)|0;if(!j){f=0;i=d+88|0;c[i>>2]=f;i=d+76|0;c[i>>2]=f;f=c[d+60>>2]|0;c[f>>2]=0;h=f+48|0;b[h>>1]=0;h=f+54|0;b[h>>1]=1;h=c[d+68>>2]|0;b[h>>1]=0;k=h+2|0;b[k>>1]=0;k=b[d+6>>1]|0;j=h+4|0;b[j>>1]=k;h=h+6|0;b[h>>1]=0;h=f+50|0;b[h>>1]=0;h=f+56|0;b[h>>1]=1;h=c[d+72>>2]|0;b[h>>1]=0;j=h+2|0;b[j>>1]=0;j=b[d+6>>1]|0;k=h+4|0;b[k>>1]=j;h=h+6|0;b[h>>1]=0;h=f+52|0;b[h>>1]=0;f=f+58|0;b[f>>1]=1;i=c[i>>2]|0;b[i>>1]=0;f=i+2|0;b[f>>1]=0;f=b[d+6>>1]|0;h=i+4|0;b[h>>1]=f;i=i+6|0;b[i>>1]=0;c[d>>2]=5008;return}c[(j+4+15&-16)+-4>>2]=j;f=j+4+15&-16;i=d+88|0;c[i>>2]=f;i=d+76|0;c[i>>2]=f;f=c[d+60>>2]|0;c[f>>2]=0;h=f+48|0;b[h>>1]=0;h=f+54|0;b[h>>1]=1;h=c[d+68>>2]|0;b[h>>1]=0;k=h+2|0;b[k>>1]=0;k=b[d+6>>1]|0;j=h+4|0;b[j>>1]=k;h=h+6|0;b[h>>1]=0;h=f+50|0;b[h>>1]=0;h=f+56|0;b[h>>1]=1;h=c[d+72>>2]|0;b[h>>1]=0;j=h+2|0;b[j>>1]=0;j=b[d+6>>1]|0;k=h+4|0;b[k>>1]=j;h=h+6|0;b[h>>1]=0;h=f+52|0;b[h>>1]=0;f=f+58|0;b[f>>1]=1;i=c[i>>2]|0;b[i>>1]=0;f=i+2|0;b[f>>1]=0;f=b[d+6>>1]|0;h=i+4|0;b[h>>1]=f;i=i+6|0;b[i>>1]=0;c[d>>2]=5008;return}function be(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,j=0.0,k=0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0,t=0.0,u=0;s=i;i=i+80|0;m=+g[b+12>>2];if(+g[a+268>>2]==m){d=+g[a+264>>2];e=+g[b+8>>2];if((d==e?+g[a+260>>2]==+g[b+4>>2]:0)?+g[a+256>>2]==+g[b>>2]:0){i=s;return}else k=a+264|0}else{k=a+264|0;d=+g[a+264>>2];e=+g[b+8>>2]}q=+g[a+256>>2];r=+g[a+260>>2];h=+g[b>>2];j=+g[b+4>>2];f=h*h+j*j+e*e;if(f>0.0){t=1.0/+G(+f);n=e*t;g[a+256>>2]=h*t;g[a+260>>2]=j*t;g[k>>2]=n;g[a+268>>2]=m;f=h*t;h=j*t;j=n}else{c[a+256>>2]=0;c[a+256+4>>2]=0;c[a+256+8>>2]=0;c[a+256+12>>2]=0;f=0.0;h=0.0;j=0.0}p=c[a+8>>2]|0;if(!p){i=s;return}e=f*f+h*h+j*j;if(!(e==0.0)?(o=q*q+r*r+d*d,!(o==0.0)):0){e=1.0/+G(+e);n=f*e;g[a+256>>2]=n;m=h*e;g[a+260>>2]=m;f=j*e;g[k>>2]=f;h=1.0/+G(+o);e=d*h;do if(e*f+(r*h*m+q*h*n)<-.9999998807907105)if(+F(+f)>.7071067690849304){t=1.0/+G(+(m*m+f*f));k=0;d=0.0;f=-(f*t);b=(g[l>>2]=m*t,c[l>>2]|0);break}else{f=1.0/+G(+(m*m+n*n));k=(g[l>>2]=-(m*f),c[l>>2]|0);d=0.0;f=n*f;b=0;break}else{t=+G(+((e*f+(r*h*m+q*h*n)+1.0)*2.0));k=(g[l>>2]=(e*m-r*h*f)*(1.0/t),c[l>>2]|0);d=t*.5;f=(f*q*h-e*n)*(1.0/t);b=(g[l>>2]=(r*h*n-m*q*h)*(1.0/t),c[l>>2]|0)}while(0);h=(c[l>>2]=k,+g[l>>2]);e=(c[l>>2]=b,+g[l>>2])}else{h=0.0;f=0.0;e=0.0;d=0.0}c[s+16>>2]=c[p+4>>2];c[s+16+4>>2]=c[p+4+4>>2];c[s+16+8>>2]=c[p+4+8>>2];c[s+16+12>>2]=c[p+4+12>>2];u=s+16+16|0;c[u>>2]=c[p+20>>2];c[u+4>>2]=c[p+20+4>>2];c[u+8>>2]=c[p+20+8>>2];c[u+12>>2]=c[p+20+12>>2];b=s+16+32|0;c[b>>2]=c[p+36>>2];c[b+4>>2]=c[p+36+4>>2];c[b+8>>2]=c[p+36+8>>2];c[b+12>>2]=c[p+36+12>>2];k=s+16+48|0;c[k>>2]=c[p+52>>2];c[k+4>>2]=c[p+52+4>>2];c[k+8>>2]=c[p+52+8>>2];c[k+12>>2]=c[p+52+12>>2];h=-h;t=-f;n=-e;Jg(s+16|0,s);f=+g[s>>2];e=+g[s+12>>2];q=+g[s+8>>2];m=+g[s+4>>2];o=d*f+e*h+q*t-m*n;r=f*n+(e*t+d*m)-q*h;j=e*n+d*q+m*h-f*t;n=d*e-f*h-m*t-q*n;q=o*(2.0/(n*n+(j*j+(o*o+r*r))));t=r*(2.0/(n*n+(j*j+(o*o+r*r))));m=j*(2.0/(n*n+(j*j+(o*o+r*r))));g[s+16>>2]=1.0-(r*t+j*m);g[s+16+4>>2]=o*t-n*m;g[s+16+8>>2]=o*m+n*t;g[s+16+12>>2]=0.0;g[s+16+16>>2]=o*t+n*m;g[s+16+20>>2]=1.0-(o*q+j*m);g[s+16+24>>2]=r*m-n*q;g[s+16+28>>2]=0.0;g[s+16+32>>2]=o*m-n*t;g[s+16+36>>2]=r*m+n*q;g[s+16+40>>2]=1.0-(o*q+r*t);g[s+16+44>>2]=0.0;a=c[a+8>>2]|0;c[a+300>>2]=(c[a+300>>2]|0)+1;c[a+4>>2]=c[s+16>>2];c[a+4+4>>2]=c[s+16+4>>2];c[a+4+8>>2]=c[s+16+8>>2];c[a+4+12>>2]=c[s+16+12>>2];c[a+20>>2]=c[u>>2];c[a+20+4>>2]=c[u+4>>2];c[a+20+8>>2]=c[u+8>>2];c[a+20+12>>2]=c[u+12>>2];c[a+36>>2]=c[b>>2];c[a+36+4>>2]=c[b+4>>2];c[a+36+8>>2]=c[b+8>>2];c[a+36+12>>2]=c[b+12>>2];c[a+52>>2]=c[k>>2];c[a+52+4>>2]=c[k+4>>2];c[a+52+8>>2]=c[k+8>>2];c[a+52+12>>2]=c[k+12>>2];i=s;return}function ce(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0,X=0.0,Y=0.0;W=i;i=i+240|0;f=(a[b+8>>0]|0)!=0;h=f?e:d;f=f?d:e;S=+g[h+116>>2]-+g[h+52>>2];T=+g[h+120>>2]-+g[h+56>>2];U=+g[h+124>>2]-+g[h+60>>2];V=+g[h+272>>2];if(S*S+T*T+U*U<V*V){X=1.0;i=W;return +X}H=+g[f+4>>2];I=+g[f+20>>2];J=+g[f+36>>2];K=+g[f+8>>2];L=+g[f+24>>2];M=+g[f+40>>2];N=+g[f+12>>2];O=+g[f+28>>2];P=+g[f+44>>2];k=-+g[f+52>>2];l=-+g[f+56>>2];m=-+g[f+60>>2];Q=+g[h+4>>2];R=+g[h+20>>2];S=+g[h+36>>2];T=+g[h+8>>2];U=+g[h+24>>2];V=+g[h+40>>2];p=+g[h+12>>2];q=+g[h+28>>2];r=+g[h+44>>2];w=+g[h+52>>2];v=+g[h+56>>2];u=+g[h+60>>2];s=H*k+I*l+J*m+(H*w+I*v+J*u);t=K*k+L*l+M*m+(K*w+L*v+M*u);u=N*k+O*l+P*m+(N*w+O*v+P*u);v=+g[h+68>>2];w=+g[h+84>>2];x=+g[h+100>>2];y=+g[h+72>>2];z=+g[h+88>>2];A=+g[h+104>>2];B=+g[h+76>>2];C=+g[h+92>>2];D=+g[h+108>>2];n=+g[h+116>>2];o=+g[h+120>>2];G=+g[h+124>>2];E=H*k+I*l+J*m+(H*n+I*o+J*G);F=K*k+L*l+M*m+(K*n+L*o+M*G);G=N*k+O*l+P*m+(N*n+O*o+P*G);f=c[f+192>>2]|0;if(((c[f+4>>2]|0)+-21|0)>>>0>=9){X=1.0;i=W;return +X}g[W+224>>2]=s;g[W+224+4>>2]=t;g[W+224+8>>2]=u;g[W+224+12>>2]=0.0;if(E<s){g[W+224>>2]=E;j=E}else j=s;if(F<t){g[W+224+4>>2]=F;k=F}else k=t;if(G<u){g[W+224+8>>2]=G;l=G}else l=u;g[W+208>>2]=s;g[W+208+4>>2]=t;g[W+208+8>>2]=u;g[W+208+12>>2]=0.0;if(s<E){g[W+208>>2]=E;m=E}else m=s;if(t<F){g[W+208+4>>2]=F;n=F}else n=t;if(u<G){g[W+208+8>>2]=G;o=G}else o=u;Y=+g[h+268>>2];g[W+224>>2]=j-Y;g[W+224+4>>2]=k-Y;g[W+224+8>>2]=l-Y;g[W+208>>2]=Y+m;g[W+208+4>>2]=Y+n;g[W+208+8>>2]=Y+o;c[W>>2]=3908;g[W+4>>2]=H*Q+I*R+J*S;g[W+8>>2]=H*T+I*U+J*V;g[W+12>>2]=H*p+I*q+J*r;g[W+16>>2]=0.0;g[W+20>>2]=K*Q+L*R+M*S;g[W+24>>2]=K*T+L*U+M*V;g[W+28>>2]=K*p+L*q+M*r;g[W+32>>2]=0.0;g[W+36>>2]=N*Q+O*R+P*S;g[W+40>>2]=N*T+O*U+P*V;g[W+44>>2]=N*p+O*q+P*r;g[W+48>>2]=0.0;g[W+52>>2]=s;g[W+56>>2]=t;g[W+60>>2]=u;g[W+64>>2]=0.0;g[W+68>>2]=H*v+I*w+J*x;g[W+72>>2]=H*y+I*z+J*A;g[W+76>>2]=H*B+I*C+J*D;g[W+80>>2]=0.0;g[W+84>>2]=K*v+L*w+M*x;g[W+88>>2]=K*y+L*z+M*A;g[W+92>>2]=K*B+L*C+M*D;g[W+96>>2]=0.0;g[W+100>>2]=N*v+O*w+P*x;g[W+104>>2]=N*y+O*z+P*A;g[W+108>>2]=N*B+O*C+P*D;g[W+112>>2]=0.0;g[W+116>>2]=E;g[W+120>>2]=F;g[W+124>>2]=G;g[W+128>>2]=0.0;g[W+196>>2]=Y;c[W+200>>2]=c[h+264>>2];if(f|0?(Yb[c[(c[f>>2]|0)+64>>2]&127](f,W,W+224|0,W+208|0),X=+g[W+200>>2],X<+g[h+264>>2]):0){g[h+264>>2]=X;Y=X;i=W;return +Y}Y=1.0;i=W;return +Y}function de(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0,X=0.0,Y=0.0;W=i;i=i+240|0;f=(a[b+76>>0]|0)!=0;h=f?e:d;f=f?d:e;S=+g[h+116>>2]-+g[h+52>>2];T=+g[h+120>>2]-+g[h+56>>2];U=+g[h+124>>2]-+g[h+60>>2];V=+g[h+272>>2];if(S*S+T*T+U*U<V*V){X=1.0;i=W;return +X}H=+g[f+4>>2];I=+g[f+20>>2];J=+g[f+36>>2];K=+g[f+8>>2];L=+g[f+24>>2];M=+g[f+40>>2];N=+g[f+12>>2];O=+g[f+28>>2];P=+g[f+44>>2];k=-+g[f+52>>2];l=-+g[f+56>>2];m=-+g[f+60>>2];Q=+g[h+4>>2];R=+g[h+20>>2];S=+g[h+36>>2];T=+g[h+8>>2];U=+g[h+24>>2];V=+g[h+40>>2];p=+g[h+12>>2];q=+g[h+28>>2];r=+g[h+44>>2];w=+g[h+52>>2];v=+g[h+56>>2];u=+g[h+60>>2];s=H*k+I*l+J*m+(H*w+I*v+J*u);t=K*k+L*l+M*m+(K*w+L*v+M*u);u=N*k+O*l+P*m+(N*w+O*v+P*u);v=+g[h+68>>2];w=+g[h+84>>2];x=+g[h+100>>2];y=+g[h+72>>2];z=+g[h+88>>2];A=+g[h+104>>2];B=+g[h+76>>2];C=+g[h+92>>2];D=+g[h+108>>2];n=+g[h+116>>2];o=+g[h+120>>2];G=+g[h+124>>2];E=H*k+I*l+J*m+(H*n+I*o+J*G);F=K*k+L*l+M*m+(K*n+L*o+M*G);G=N*k+O*l+P*m+(N*n+O*o+P*G);f=c[f+192>>2]|0;if(((c[f+4>>2]|0)+-21|0)>>>0>=9){X=1.0;i=W;return +X}g[W+224>>2]=s;g[W+224+4>>2]=t;g[W+224+8>>2]=u;g[W+224+12>>2]=0.0;if(E<s){g[W+224>>2]=E;j=E}else j=s;if(F<t){g[W+224+4>>2]=F;k=F}else k=t;if(G<u){g[W+224+8>>2]=G;l=G}else l=u;g[W+208>>2]=s;g[W+208+4>>2]=t;g[W+208+8>>2]=u;g[W+208+12>>2]=0.0;if(s<E){g[W+208>>2]=E;m=E}else m=s;if(t<F){g[W+208+4>>2]=F;n=F}else n=t;if(u<G){g[W+208+8>>2]=G;o=G}else o=u;Y=+g[h+268>>2];g[W+224>>2]=j-Y;g[W+224+4>>2]=k-Y;g[W+224+8>>2]=l-Y;g[W+208>>2]=Y+m;g[W+208+4>>2]=Y+n;g[W+208+8>>2]=Y+o;c[W>>2]=9200;g[W+4>>2]=H*Q+I*R+J*S;g[W+8>>2]=H*T+I*U+J*V;g[W+12>>2]=H*p+I*q+J*r;g[W+16>>2]=0.0;g[W+20>>2]=K*Q+L*R+M*S;g[W+24>>2]=K*T+L*U+M*V;g[W+28>>2]=K*p+L*q+M*r;g[W+32>>2]=0.0;g[W+36>>2]=N*Q+O*R+P*S;g[W+40>>2]=N*T+O*U+P*V;g[W+44>>2]=N*p+O*q+P*r;g[W+48>>2]=0.0;g[W+52>>2]=s;g[W+56>>2]=t;g[W+60>>2]=u;g[W+64>>2]=0.0;g[W+68>>2]=H*v+I*w+J*x;g[W+72>>2]=H*y+I*z+J*A;g[W+76>>2]=H*B+I*C+J*D;g[W+80>>2]=0.0;g[W+84>>2]=K*v+L*w+M*x;g[W+88>>2]=K*y+L*z+M*A;g[W+92>>2]=K*B+L*C+M*D;g[W+96>>2]=0.0;g[W+100>>2]=N*v+O*w+P*x;g[W+104>>2]=N*y+O*z+P*A;g[W+108>>2]=N*B+O*C+P*D;g[W+112>>2]=0.0;g[W+116>>2]=E;g[W+120>>2]=F;g[W+124>>2]=G;g[W+128>>2]=0.0;g[W+196>>2]=Y;c[W+200>>2]=c[h+264>>2];if(f|0?(Yb[c[(c[f>>2]|0)+64>>2]&127](f,W,W+224|0,W+208|0),X=+g[W+200>>2],X<+g[h+264>>2]):0){g[h+264>>2]=X;Y=X;i=W;return +Y}Y=1.0;i=W;return +Y}function ee(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;l=c[b>>2]|0;m=c[b+4>>2]|0;i=c[b+8>>2]|0;n=c[a+4>>2]|0;p=Kh(a,d,m,i)|0;c[p+12>>2]=c[b+12>>2];c[p+16>>2]=n+1;c[p+20>>2]=n+2;h=c[(c[a+12>>2]|0)+(c[b+12>>2]<<2)>>2]|0;e=c[h>>2]|0;f=c[h+4>>2]|0;do if(!((e|0)==(m|0)&(f|0)==(i|0))){if((e|0)==(i|0)?(f|0)==(m|0):0){e=h+12+8|0;break}g=c[h+8>>2]|0;if(!((f|0)==(m|0)&(g|0)==(i|0)))if(!((f|0)==(i|0)&(g|0)==(m|0)))if((g|0)!=(m|0)|(e|0)==(i|0)^1){if((g|0)==(i|0)?(e|0)==(m|0):0){e=h+12+4|0;break}e=9504}else{e=1;o=2}else e=h+12|0;else{e=0;o=2}}else{e=2;o=2}while(0);if((o|0)==2)e=h+12+(e<<2)|0;c[e>>2]=n;k=Kh(a,d,i,l)|0;c[k+12>>2]=c[b+12+4>>2];c[k+16>>2]=n+2;c[k+20>>2]=n;h=c[(c[a+12>>2]|0)+(c[b+12+4>>2]<<2)>>2]|0;e=c[h>>2]|0;f=c[h+4>>2]|0;do if(!((e|0)==(i|0)&(f|0)==(l|0))){if((e|0)==(l|0)?(f|0)==(i|0):0){e=h+12+8|0;break}g=c[h+8>>2]|0;if(!((f|0)==(i|0)&(g|0)==(l|0)))if(!((f|0)==(l|0)&(g|0)==(i|0)))if((g|0)!=(i|0)|(e|0)==(l|0)^1){if((g|0)==(l|0)?(e|0)==(i|0):0){e=h+12+4|0;break}e=9504}else{e=1;o=12}else e=h+12|0;else{e=0;o=12}}else{e=2;o=12}while(0);if((o|0)==12)e=h+12+(e<<2)|0;c[e>>2]=n+1;j=Kh(a,d,l,m)|0;c[j+12>>2]=c[b+12+8>>2];c[j+16>>2]=n;c[j+20>>2]=n+1;e=c[a+12>>2]|0;i=c[e+(c[b+12+8>>2]<<2)>>2]|0;f=c[i>>2]|0;g=c[i+4>>2]|0;do if(!((f|0)==(l|0)&(g|0)==(m|0))){if((f|0)==(m|0)?(g|0)==(l|0):0){f=i+12+8|0;break}h=c[i+8>>2]|0;if(!((g|0)==(l|0)&(h|0)==(m|0)))if(!((g|0)==(m|0)&(h|0)==(l|0)))if((h|0)!=(l|0)|(f|0)==(m|0)^1){if((h|0)==(m|0)?(f|0)==(l|0):0){f=i+12+4|0;break}f=9504}else{f=1;o=22}else f=i+12|0;else{f=0;o=22}}else{f=2;o=22}while(0);if((o|0)==22)f=i+12+(f<<2)|0;c[f>>2]=n+2;f=c[e+(c[p+12>>2]<<2)>>2]|0;if(!(((c[f>>2]|0)!=(d|0)?(c[f+4>>2]|0)!=(d|0):0)?(c[f+8>>2]|0)!=(d|0):0)){he(e,p,f);c[(c[a+12>>2]|0)+(c[p+24>>2]<<2)>>2]=0;c[6325]=(c[6325]|0)+1;Rc(c[p+-4>>2]|0);c[(c[a+12>>2]|0)+(c[f+24>>2]<<2)>>2]=0;if(f|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}e=c[a+12>>2]|0}f=c[e+(c[k+12>>2]<<2)>>2]|0;if(!(((c[f>>2]|0)!=(d|0)?(c[f+4>>2]|0)!=(d|0):0)?(c[f+8>>2]|0)!=(d|0):0)){he(e,k,f);c[(c[a+12>>2]|0)+(c[k+24>>2]<<2)>>2]=0;c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);c[(c[a+12>>2]|0)+(c[f+24>>2]<<2)>>2]=0;if(f|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}e=c[a+12>>2]|0}f=c[e+(c[j+12>>2]<<2)>>2]|0;if(!(((c[f>>2]|0)!=(d|0)?(c[f+4>>2]|0)!=(d|0):0)?(c[f+8>>2]|0)!=(d|0):0)){he(e,j,f);c[(c[a+12>>2]|0)+(c[j+24>>2]<<2)>>2]=0;c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);c[(c[a+12>>2]|0)+(c[f+24>>2]<<2)>>2]=0;if(f|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}e=c[a+12>>2]|0}c[e+(c[b+24>>2]<<2)>>2]=0;if(!b)return;c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function fe(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0,J=0,K=0,L=0;h=i;i=i+16|0;c[6324]=(c[6324]|0)+1;f=ic(1147)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}if(!(a[22088]|0)){a[22088]=1;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;If(22832,0.0,0,0,h)}c[5759]=c[5759]|1;g[5804]=0.0;z=+g[5814]*0.0;F=+g[5815]*0.0;g[5809]=+g[5813]*0.0;g[5810]=z;g[5811]=F;g[5812]=0.0;c[5817]=0;c[5818]=0;c[5819]=0;c[5820]=0;F=+g[5806]*0.0;z=+g[5807]*0.0;g[5858]=+g[5805]*0.0;g[5859]=F;g[5860]=z;g[5861]=0.0;c[f+4>>2]=7;c[f+8>>2]=-1;c[f+12>>2]=-1;g[f+16>>2]=34028234663852886.0e22;a[f+20>>0]=1;a[f+21>>0]=0;c[f+24>>2]=-1;k=f+28|0;c[k>>2]=22832;j=f+32|0;c[j>>2]=b;g[f+36>>2]=0.0;g[f+40>>2]=.30000001192092896;c[f+44>>2]=0;c[f>>2]=4624;a[f+48>>0]=0;L=f+116|0;c[L>>2]=c[d>>2];c[L+4>>2]=c[d+4>>2];c[L+8>>2]=c[d+8>>2];c[L+12>>2]=c[d+12>>2];K=f+132|0;c[K>>2]=c[d+16>>2];c[K+4>>2]=c[d+16+4>>2];c[K+8>>2]=c[d+16+8>>2];c[K+12>>2]=c[d+16+12>>2];J=f+148|0;c[J>>2]=c[d+32>>2];c[J+4>>2]=c[d+32+4>>2];c[J+8>>2]=c[d+32+8>>2];c[J+12>>2]=c[d+32+12>>2];I=f+164|0;c[I>>2]=c[d+48>>2];c[I+4>>2]=c[d+48+4>>2];c[I+8>>2]=c[d+48+8>>2];c[I+12>>2]=c[d+48+12>>2];a[f+180>>0]=e&1;z=+g[L>>2];F=+g[b+4>>2];y=+g[K>>2];E=+g[b+8>>2];x=+g[J>>2];D=+g[b+12>>2];w=+g[f+120>>2];v=+g[f+136>>2];u=+g[f+152>>2];t=+g[f+124>>2];r=+g[f+140>>2];p=+g[f+156>>2];C=+g[b+20>>2];B=+g[b+24>>2];A=+g[b+28>>2];s=+g[b+36>>2];q=+g[b+40>>2];o=+g[b+44>>2];H=+g[I>>2];G=+g[f+168>>2];l=+g[f+172>>2];n=+g[b+52>>2]+(F*H+E*G+D*l);m=C*H+B*G+A*l+ +g[b+56>>2];l=s*H+q*G+o*l+ +g[b+60>>2];g[f+52>>2]=z*F+y*E+x*D;g[f+56>>2]=F*w+E*v+D*u;g[f+60>>2]=F*t+E*r+D*p;g[f+64>>2]=0.0;g[f+68>>2]=z*C+y*B+x*A;g[f+72>>2]=w*C+v*B+u*A;g[f+76>>2]=t*C+r*B+p*A;g[f+80>>2]=0.0;g[f+84>>2]=z*s+y*q+x*o;g[f+88>>2]=w*s+v*q+u*o;g[f+92>>2]=t*s+r*q+p*o;g[f+96>>2]=0.0;g[f+100>>2]=n;g[f+104>>2]=m;g[f+108>>2]=l;g[f+112>>2]=0.0;g[f+184>>2]=1.0;g[f+188>>2]=-1.0;g[f+192>>2]=0.0;g[f+196>>2]=0.0;g[f+200>>2]=1.0;g[f+204>>2]=.699999988079071;g[f+208>>2]=0.0;g[f+212>>2]=0.0;g[f+216>>2]=1.0;g[f+220>>2]=.699999988079071;g[f+224>>2]=0.0;g[f+228>>2]=0.0;g[f+264>>2]=1.0;g[f+268>>2]=.699999988079071;g[f+272>>2]=1.0;g[f+276>>2]=0.0;g[f+280>>2]=1.0;g[f+284>>2]=.699999988079071;g[f+288>>2]=1.0;g[f+292>>2]=0.0;g[f+232>>2]=1.0;g[f+236>>2]=.699999988079071;g[f+240>>2]=1.0;g[f+244>>2]=0.0;g[f+248>>2]=1.0;g[f+252>>2]=.699999988079071;g[f+256>>2]=1.0;g[f+260>>2]=0.0;a[f+1096>>0]=0;e=f+1100|0;g[f+1116>>2]=0.0;g[f+1120>>2]=0.0;g[f+1124>>2]=0.0;c[f+300>>2]=0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;a[e+12>>0]=0;a[f+49>>0]=1;Tc(f,(c[k>>2]|0)+4|0,(c[j>>2]|0)+4|0);i=h;return f|0}function ge(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;if(!((d|0)!=0&(e|0)!=0))return;if((c[b+24>>2]|0)<128?(c[b+28>>2]|0)<128:0){c[6324]=(c[6324]|0)+1;h=ic(1043)|0;if(!h)j=0;else{c[(h+4+15&-16)+-4>>2]=h;j=h+4+15&-16}i=c[b+24>>2]|0;if((i|0)>0){h=0;do{l=(c[b+32>>2]|0)+(h<<3)|0;m=c[l+4>>2]|0;n=j+(h<<3)|0;c[n>>2]=c[l>>2];c[n+4>>2]=m;h=h+1|0}while((h|0)!=(i|0))}h=c[b+32>>2]|0;if(h|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=j;c[b+28>>2]=128}c[b+24>>2]=128;h=c[b+32>>2]|0;c[h>>2]=d;c[h+4>>2]=e;h=1;i=124;do{n=h+-1|0;j=c[b+32>>2]|0;l=c[j+(n<<3)>>2]|0;m=c[j+(n<<3)+4>>2]|0;if((n|0)>(i|0)){e=c[b+24>>2]|0;if((e|0)<(e<<1|0)?(c[b+28>>2]|0)<(e<<1|0):0){if(e){c[6324]=(c[6324]|0)+1;i=ic((e<<4|3)+16|0)|0;if(!i)i=0;else{c[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}d=c[b+24>>2]|0;if((d|0)>0){j=0;do{p=(c[b+32>>2]|0)+(j<<3)|0;o=c[p+4>>2]|0;k=i+(j<<3)|0;c[k>>2]=c[p>>2];c[k+4>>2]=o;j=j+1|0}while((j|0)!=(d|0))}}else i=0;j=c[b+32>>2]|0;if(j|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=i;c[b+28>>2]=e<<1;j=i}c[b+24>>2]=e<<1;i=(e<<1)+-4|0}do if((l|0)==(m|0))if(!(c[l+40>>2]|0))h=n;else{p=c[l+36>>2]|0;c[j+(n<<3)>>2]=p;c[j+(n<<3)+4>>2]=p;p=h+1|0;o=c[b+32>>2]|0;n=c[l+40>>2]|0;c[o+(h<<3)>>2]=n;c[o+(h<<3)+4>>2]=n;o=c[b+32>>2]|0;n=c[l+40>>2]|0;c[o+(p<<3)>>2]=c[l+36>>2];c[o+(p<<3)+4>>2]=n;h=h+2|0}else if(((((+g[l>>2]<=+g[m+16>>2]?+g[l+16>>2]>=+g[m>>2]:0)?+g[l+4>>2]<=+g[m+20>>2]:0)?+g[l+20>>2]>=+g[m+4>>2]:0)?+g[l+8>>2]<=+g[m+24>>2]:0)?+g[l+24>>2]>=+g[m+8>>2]:0){d=(c[m+40>>2]|0)!=0;if(!(c[l+40>>2]|0))if(d){p=c[m+36>>2]|0;c[j+(n<<3)>>2]=l;c[j+(n<<3)+4>>2]=p;p=c[b+32>>2]|0;o=c[m+40>>2]|0;c[p+(h<<3)>>2]=l;c[p+(h<<3)+4>>2]=o;h=h+1|0;break}else{Ub[c[(c[f>>2]|0)+8>>2]&127](f,l,m);h=n;break}else{e=j+(n<<3)|0;k=c[l+36>>2]|0;if(d){o=c[m+36>>2]|0;c[e>>2]=k;c[j+(n<<3)+4>>2]=o;o=h+1|0;p=c[b+32>>2]|0;n=c[m+36>>2]|0;c[p+(h<<3)>>2]=c[l+40>>2];c[p+(h<<3)+4>>2]=n;p=h+2|0;n=c[b+32>>2]|0;k=c[m+40>>2]|0;c[n+(o<<3)>>2]=c[l+36>>2];c[n+(o<<3)+4>>2]=k;o=c[b+32>>2]|0;n=c[m+40>>2]|0;c[o+(p<<3)>>2]=c[l+40>>2];c[o+(p<<3)+4>>2]=n;h=h+3|0;break}else{c[e>>2]=k;c[j+(n<<3)+4>>2]=m;p=c[b+32>>2]|0;c[p+(h<<3)>>2]=c[l+40>>2];c[p+(h<<3)+4>>2]=m;h=h+1|0;break}}}else h=n;while(0)}while((h|0)!=0);return}function he(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;l=0;do{k=l;l=l+1|0;m=(l|0)==3;j=c[b+((m?0:l)<<2)>>2]|0;k=c[b+(((k+2|0)%3|0)<<2)>>2]|0;e=c[d>>2]|0;f=c[d+4>>2]|0;if(!((e|0)==(k|0)&(f|0)==(j|0)))if(!((e|0)==(j|0)&(f|0)==(k|0))){g=c[d+8>>2]|0;if(!((f|0)==(k|0)&(g|0)==(j|0)))if(!((f|0)==(j|0)&(g|0)==(k|0)))if((g|0)!=(k|0)|(e|0)==(j|0)^1)e=(g|0)!=(j|0)|(e|0)==(k|0)^1?9504:d+12+4|0;else{e=1;n=3}else e=d+12|0;else{e=0;n=3}}else e=d+12+8|0;else{e=2;n=3}if((n|0)==3){n=0;e=d+12+(e<<2)|0}i=c[e>>2]|0;e=c[b>>2]|0;f=c[b+4>>2]|0;if(!((e|0)==(j|0)&(f|0)==(k|0)))if(!((e|0)==(k|0)&(f|0)==(j|0))){g=c[b+8>>2]|0;if(!((f|0)==(j|0)&(g|0)==(k|0)))if(!((f|0)==(k|0)&(g|0)==(j|0)))if((g|0)!=(j|0)|(e|0)==(k|0)^1)e=(g|0)!=(k|0)|(e|0)==(j|0)^1?9504:b+12+4|0;else{e=1;n=10}else e=b+12|0;else{e=0;n=10}}else e=b+12+8|0;else{e=2;n=10}if((n|0)==10){n=0;e=b+12+(e<<2)|0}h=c[a+(c[e>>2]<<2)>>2]|0;e=c[h>>2]|0;f=c[h+4>>2]|0;do if(!((e|0)==(k|0)&(f|0)==(j|0))){if((e|0)==(j|0)?(f|0)==(k|0):0){e=h+12+8|0;break}g=c[h+8>>2]|0;if(!((f|0)==(k|0)&(g|0)==(j|0)))if(!((f|0)==(j|0)&(g|0)==(k|0)))if((g|0)!=(k|0)|(e|0)==(j|0)^1){if((g|0)==(j|0)?(e|0)==(k|0):0){e=h+12+4|0;break}e=9504}else{e=1;n=17}else e=h+12|0;else{e=0;n=17}}else{e=2;n=17}while(0);if((n|0)==17){n=0;e=h+12+(e<<2)|0}c[e>>2]=i;e=c[b>>2]|0;f=c[b+4>>2]|0;if(!((e|0)==(j|0)&(f|0)==(k|0)))if(!((e|0)==(k|0)&(f|0)==(j|0))){g=c[b+8>>2]|0;if(!((f|0)==(j|0)&(g|0)==(k|0)))if(!((f|0)==(k|0)&(g|0)==(j|0)))if((g|0)!=(j|0)|(e|0)==(k|0)^1)e=(g|0)!=(k|0)|(e|0)==(j|0)^1?9504:b+12+4|0;else{e=1;n=27}else e=b+12|0;else{e=0;n=27}}else e=b+12+8|0;else{e=2;n=27}if((n|0)==27){n=0;e=b+12+(e<<2)|0}i=c[e>>2]|0;e=c[d>>2]|0;f=c[d+4>>2]|0;if(!((e|0)==(k|0)&(f|0)==(j|0)))if(!((e|0)==(j|0)&(f|0)==(k|0))){g=c[d+8>>2]|0;if(!((f|0)==(k|0)&(g|0)==(j|0)))if(!((f|0)==(j|0)&(g|0)==(k|0)))if((g|0)!=(k|0)|(e|0)==(j|0)^1)e=(g|0)!=(j|0)|(e|0)==(k|0)^1?9504:d+12+4|0;else{e=1;n=34}else e=d+12|0;else{e=0;n=34}}else e=d+12+8|0;else{e=2;n=34}if((n|0)==34){n=0;e=d+12+(e<<2)|0}h=c[a+(c[e>>2]<<2)>>2]|0;e=c[h>>2]|0;f=c[h+4>>2]|0;do if(!((e|0)==(j|0)&(f|0)==(k|0))){if((e|0)==(k|0)?(f|0)==(j|0):0){e=h+12+8|0;break}g=c[h+8>>2]|0;if(!((f|0)==(j|0)&(g|0)==(k|0)))if(!((f|0)==(k|0)&(g|0)==(j|0)))if((g|0)!=(j|0)|(e|0)==(k|0)^1){if((g|0)==(k|0)?(e|0)==(j|0):0){e=h+12+4|0;break}e=9504}else{e=1;n=41}else e=h+12|0;else{e=0;n=41}}else{e=2;n=41}while(0);if((n|0)==41){n=0;e=h+12+(e<<2)|0}c[e>>2]=i}while(!m);return}function ie(b){b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0;u=i;i=i+176|0;if(!(a[b+527>>0]|0)){i=u;return}g[b+36>>2]=0.0;g[b+520>>2]=0.0;g[b+516>>2]=0.0;c[b+576>>2]=0;c[b+576+4>>2]=0;c[b+576+8>>2]=0;c[b+576+12>>2]=0;if(!(a[b+524>>0]|0)){d=c[b+28>>2]|0;k=+g[b+348>>2];l=+g[b+352>>2];q=+g[b+356>>2];s=k*+g[d+20>>2]+l*+g[d+24>>2]+q*+g[d+28>>2]+ +g[d+56>>2];e=c[b+32>>2]|0;m=+g[b+412>>2];n=+g[b+416>>2];r=+g[b+420>>2];t=m*+g[e+20>>2]+n*+g[e+24>>2]+r*+g[e+28>>2]+ +g[e+56>>2];o=m*+g[e+36>>2]+n*+g[e+40>>2]+r*+g[e+44>>2]+ +g[e+60>>2];p=k*+g[d+4>>2]+l*+g[d+8>>2]+q*+g[d+12>>2]+ +g[d+52>>2];q=k*+g[d+36>>2]+l*+g[d+40>>2]+q*+g[d+44>>2]+ +g[d+60>>2];r=m*+g[e+4>>2]+n*+g[e+8>>2]+r*+g[e+12>>2]+ +g[e+52>>2];if((r-p)*(r-p)+(t-s)*(t-s)+(o-q)*(o-q)>1.1920928955078125e-007){h=1.0/+G(+((r-p)*(r-p)+(t-s)*(t-s)+(o-q)*(o-q)));g[u+128>>2]=(r-p)*h;g[u+128+4>>2]=(t-s)*h;g[u+128+8>>2]=(o-q)*h;c[u+128+12>>2]=0;m=(o-q)*h;f=(t-s)*h;h=(r-p)*h}else{c[u+128>>2]=1065353216;c[u+128+4>>2]=0;c[u+128+8>>2]=0;g[u+128+12>>2]=0.0;m=0.0;f=0.0;h=1.0}if(+F(+m)>.7071067690849304){w=m*m+f*f;v=1.0/+G(+w);k=-(v*m);m=v*f;n=-(m*h);j=h*k;l=0.0;f=w*v;h=m}else{k=h*h+f*f;j=1.0/+G(+k);l=-(f*j);f=j*h;n=m*l;j=k*j;k=f;f=-(f*m);h=0.0}g[u+128+16>>2]=l;g[u+128+20>>2]=k;g[u+128+24>>2]=h;g[u+128+32>>2]=f;g[u+128+36>>2]=n;g[u+128+40>>2]=j;d=0;while(1){x=c[b+28>>2]|0;c[u+80>>2]=c[x+4>>2];c[u+80+4>>2]=c[x+20>>2];c[u+80+8>>2]=c[x+36>>2];g[u+80+12>>2]=0.0;c[u+80+16>>2]=c[x+8>>2];c[u+80+20>>2]=c[x+24>>2];c[u+80+24>>2]=c[x+40>>2];g[u+80+28>>2]=0.0;c[u+80+32>>2]=c[x+12>>2];c[u+80+36>>2]=c[x+28>>2];c[u+80+40>>2]=c[x+44>>2];g[u+80+44>>2]=0.0;c[u+32>>2]=c[e+4>>2];c[u+32+4>>2]=c[e+20>>2];c[u+32+8>>2]=c[e+36>>2];g[u+32+12>>2]=0.0;c[u+32+16>>2]=c[e+8>>2];c[u+32+20>>2]=c[e+24>>2];c[u+32+24>>2]=c[e+40>>2];g[u+32+28>>2]=0.0;c[u+32+32>>2]=c[e+12>>2];c[u+32+36>>2]=c[e+28>>2];c[u+32+40>>2]=c[e+44>>2];g[u+32+44>>2]=0.0;w=s-+g[x+56>>2];v=q-+g[x+60>>2];g[u+16>>2]=p-+g[x+52>>2];g[u+16+4>>2]=w;g[u+16+8>>2]=v;g[u+16+12>>2]=0.0;v=t-+g[e+56>>2];w=o-+g[e+60>>2];g[u>>2]=r-+g[e+52>>2];g[u+4>>2]=v;g[u+8>>2]=w;g[u+12>>2]=0.0;x=c[b+28>>2]|0;e=c[b+32>>2]|0;Eg(b+48+(d*84|0)|0,u+80|0,u+32|0,u+16|0,u,u+128+(d<<4)|0,x+436|0,+g[x+384>>2],e+436|0,+g[e+384>>2]);d=d+1|0;if((d|0)==3)break;e=c[b+32>>2]|0}d=b+32|0}else d=b+32|0;e=c[b+28>>2]|0;x=c[d>>2]|0;qc(b,e+4|0,x+4|0,e+304|0,x+304|0);i=u;return}function je(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;g=i;i=i+80|0;c[a+72>>2]=(c[a+72>>2]|0)+1;f=c[a+68>>2]|0;if(f|0){d=c[(c[a+28>>2]|0)+(b*80|0)+76>>2]|0;Wg(f,d)|0;e=c[f+4>>2]|0;if(e|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[f+4>>2]=d;c[f+12>>2]=(c[f+12>>2]|0)+-1}f=(c[a+20>>2]|0)+-1|0;e=c[a+28>>2]|0;c[g>>2]=c[e+(b*80|0)>>2];c[g+4>>2]=c[e+(b*80|0)+4>>2];c[g+8>>2]=c[e+(b*80|0)+8>>2];c[g+12>>2]=c[e+(b*80|0)+12>>2];c[g+16>>2]=c[e+(b*80|0)+16>>2];c[g+16+4>>2]=c[e+(b*80|0)+16+4>>2];c[g+16+8>>2]=c[e+(b*80|0)+16+8>>2];c[g+16+12>>2]=c[e+(b*80|0)+16+12>>2];c[g+32>>2]=c[e+(b*80|0)+32>>2];c[g+32+4>>2]=c[e+(b*80|0)+32+4>>2];c[g+32+8>>2]=c[e+(b*80|0)+32+8>>2];c[g+32+12>>2]=c[e+(b*80|0)+32+12>>2];c[g+48>>2]=c[e+(b*80|0)+48>>2];c[g+48+4>>2]=c[e+(b*80|0)+48+4>>2];c[g+48+8>>2]=c[e+(b*80|0)+48+8>>2];c[g+48+12>>2]=c[e+(b*80|0)+48+12>>2];c[g+64>>2]=c[e+(b*80|0)+64>>2];c[g+64+4>>2]=c[e+(b*80|0)+64+4>>2];c[g+64+8>>2]=c[e+(b*80|0)+64+8>>2];c[g+64+12>>2]=c[e+(b*80|0)+64+12>>2];c[e+(b*80|0)>>2]=c[e+(f*80|0)>>2];c[e+(b*80|0)+4>>2]=c[e+(f*80|0)+4>>2];c[e+(b*80|0)+8>>2]=c[e+(f*80|0)+8>>2];c[e+(b*80|0)+12>>2]=c[e+(f*80|0)+12>>2];c[e+(b*80|0)+16>>2]=c[e+(f*80|0)+16>>2];c[e+(b*80|0)+16+4>>2]=c[e+(f*80|0)+16+4>>2];c[e+(b*80|0)+16+8>>2]=c[e+(f*80|0)+16+8>>2];c[e+(b*80|0)+16+12>>2]=c[e+(f*80|0)+16+12>>2];c[e+(b*80|0)+32>>2]=c[e+(f*80|0)+32>>2];c[e+(b*80|0)+32+4>>2]=c[e+(f*80|0)+32+4>>2];c[e+(b*80|0)+32+8>>2]=c[e+(f*80|0)+32+8>>2];c[e+(b*80|0)+32+12>>2]=c[e+(f*80|0)+32+12>>2];c[e+(b*80|0)+48>>2]=c[e+(f*80|0)+48>>2];c[e+(b*80|0)+48+4>>2]=c[e+(f*80|0)+48+4>>2];c[e+(b*80|0)+48+8>>2]=c[e+(f*80|0)+48+8>>2];c[e+(b*80|0)+48+12>>2]=c[e+(f*80|0)+48+12>>2];c[e+(b*80|0)+64>>2]=c[e+(f*80|0)+64>>2];c[e+(b*80|0)+64+4>>2]=c[e+(f*80|0)+64+4>>2];c[e+(b*80|0)+64+8>>2]=c[e+(f*80|0)+64+8>>2];c[e+(b*80|0)+64+12>>2]=c[e+(f*80|0)+64+12>>2];e=c[a+28>>2]|0;c[e+(f*80|0)>>2]=c[g>>2];c[e+(f*80|0)+4>>2]=c[g+4>>2];c[e+(f*80|0)+8>>2]=c[g+8>>2];c[e+(f*80|0)+12>>2]=c[g+12>>2];c[e+(f*80|0)+16>>2]=c[g+16>>2];c[e+(f*80|0)+16+4>>2]=c[g+16+4>>2];c[e+(f*80|0)+16+8>>2]=c[g+16+8>>2];c[e+(f*80|0)+16+12>>2]=c[g+16+12>>2];c[e+(f*80|0)+32>>2]=c[g+32>>2];c[e+(f*80|0)+32+4>>2]=c[g+32+4>>2];c[e+(f*80|0)+32+8>>2]=c[g+32+8>>2];c[e+(f*80|0)+32+12>>2]=c[g+32+12>>2];c[e+(f*80|0)+48>>2]=c[g+48>>2];c[e+(f*80|0)+48+4>>2]=c[g+48+4>>2];c[e+(f*80|0)+48+8>>2]=c[g+48+8>>2];c[e+(f*80|0)+48+12>>2]=c[g+48+12>>2];c[e+(f*80|0)+64>>2]=c[g+64>>2];c[e+(f*80|0)+64+4>>2]=c[g+64+4>>2];c[e+(f*80|0)+64+8>>2]=c[g+64+8>>2];c[e+(f*80|0)+64+12>>2]=c[g+64+12>>2];if(!(c[a+68>>2]|0)){f=c[a+20>>2]|0;f=f+-1|0;c[a+20>>2]=f;i=g;return}c[(c[(c[a+28>>2]|0)+(b*80|0)+76>>2]|0)+36>>2]=b;f=c[a+20>>2]|0;f=f+-1|0;c[a+20>>2]=f;i=g;return}function ke(a,d,f,h,j,k,l,m,n){a=a|0;d=d|0;f=f|0;h=+h;j=+j;k=+k;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0,F=0,H=0,I=0,J=0.0,K=0,L=0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0;V=i;i=i+32|0;U=+g[f>>2];J=+g[f+4>>2];M=+g[f+8>>2];N=1.0/+G(+((h-U)*(h-U)+(j-J)*(j-J)+(k-M)*(k-M)));R=(h-U)*N==0.0?999999984306749440.0:1.0/((h-U)*N);S=(j-J)*N==0.0?999999984306749440.0:1.0/((j-J)*N);T=(k-M)*N==0.0?999999984306749440.0:1.0/((k-M)*N);ea=(U>h?h:U)+ +g[l>>2];ca=(J>j?j:J)+ +g[l+4>>2];da=(M>k?k:M)+ +g[l+8>>2];aa=(U<h?h:U)+ +g[m>>2];t=(J<j?j:J)+ +g[m+4>>2];Y=(M<k?k:M)+ +g[m+8>>2];$=+g[a+4>>2];ea=ea<$?$:ea;u=+g[a+8>>2];ca=ca<u?u:ca;X=+g[a+12>>2];da=da<X?X:da;ba=+g[a+20>>2];s=+g[a+24>>2];Z=+g[a+28>>2];_=+g[a+36>>2];v=+g[a+40>>2];W=+g[a+44>>2];K=~~(((ba<ea?ba:ea)-$)*_)&65534;F=~~(((Z<da?Z:da)-X)*W)&65534;I=~~(((s<ca?s:ca)-u)*v)&65534;aa=aa<$?$:aa;t=t<u?u:t;Y=Y<X?X:Y;L=(~~(((ba<aa?ba:aa)-$)*_+1.0)&65535|1)&65535;E=(~~(((Z<Y?Z:Y)-X)*W+1.0)&65535|1)&65535;H=(~~(((s<t?s:t)-u)*v+1.0)&65535|1)&65535;if((n|0)>0){p=0;o=0;q=c[a+136>>2]|0;do{o=o+1|0;r=q+6|0;w=b[q>>1]|0;x=q+10|0;y=b[q+4>>1]|0;z=q+8|0;A=b[q+2>>1]|0;B=q+12|0;C=(c[B>>2]|0)>-1;do if(!(((L&65535)>=(w&65535)?(K&65535)<=(e[r>>1]|0):0)&(F&65535)<=(e[x>>1]|0)&(E&65535)>=(y&65535)&(I&65535)<=(e[z>>1]|0)&(H&65535)>=(A&65535))){r=0;w=9}else{aa=+g[a+36>>2];ca=+g[a+40>>2];ea=+g[a+44>>2];ba=+g[a+4>>2];da=+g[a+8>>2];u=+g[a+12>>2];g[V+12>>2]=0.0;v=+(e[r>>1]|0)/aa+ba;s=+(e[z>>1]|0)/ca+da;t=+(e[x>>1]|0)/ea+u;g[V+28>>2]=0.0;g[V>>2]=+(w&65535)/aa+ba-+g[m>>2];g[V+4>>2]=+(A&65535)/ca+da-+g[m+4>>2];g[V+8>>2]=+(y&65535)/ea+u-+g[m+8>>2];g[V+16>>2]=v-+g[l>>2];g[V+20>>2]=s-+g[l+4>>2];g[V+24>>2]=t-+g[l+8>>2];t=+g[f>>2];s=R*(+g[V+((R<0.0&1)<<4)>>2]-t);t=R*(+g[V+((R<0.0^1)<<4)>>2]-t);v=+g[f+4>>2];u=S*(+g[V+((S<0.0&1)<<4)+4>>2]-v);v=S*(+g[V+((S<0.0^1)<<4)+4>>2]-v);if(!(u>t|s>v)?(O=u>s?u:s,D=v<t?v:t,Q=+g[f+8>>2],P=T*(+g[V+((T<0.0&1)<<4)+8>>2]-Q),Q=T*(+g[V+((T<0.0^1)<<4)+8>>2]-Q),!(P>D|O>Q)):0){r=(Q<D?Q:D)>0.0?(P>O?P:O)<(k-M)*(k-M)*N+((h-U)*(h-U)*N+(j-J)*(j-J)*N):0;if(!(C&r)){w=9;break}w=c[B>>2]|0;Ub[c[(c[d>>2]|0)+8>>2]&127](d,w>>21,w&2097151);w=10;break}r=0;w=9}while(0);if((w|0)==9){w=0;if(C|r)w=10;else{C=c[B>>2]|0;p=p-C|0;q=q+(0-C<<4)|0}}if((w|0)==10){p=p+1|0;q=q+16|0}}while((p|0)<(n|0))}else o=0;if((c[6317]|0)>=(o|0)){i=V;return}c[6317]=o;i=V;return}function le(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=i;i=i+64|0;if((h|0)>0){b=0;k=0;do{r=c[f+(k<<2)>>2]|0;b=(r|0)>(b|0)?r:b;k=k+1|0}while((k|0)<(h*3|0))}else b=0;q=b+1|0;l=S(q,q)|0;if(!l)k=0;else{c[6324]=(c[6324]|0)+1;k=ic(l+19|0)|0;if(!k)k=0;else{c[(k+4+15&-16)+-4>>2]=k;k=k+4+15&-16}yn(k|0,0,l|0)|0}if((b|0)>-1){c[6324]=(c[6324]|0)+1;b=ic((q<<4|3)+16|0)|0;if(!b)m=0;else{c[(b+4+15&-16)+-4>>2]=b;m=b+4+15&-16}b=0;do{r=m+(b<<4)|0;c[r>>2]=c[s>>2];c[r+4>>2]=c[s+4>>2];c[r+8>>2]=c[s+8>>2];c[r+12>>2]=c[s+12>>2];b=b+1|0}while((b|0)!=(q|0));b=0;l=0;while(1){p=c[e+(l+1<<2)>>2]|0;r=c[e+(l+2<<2)>>2]|0;c[m+(b<<4)>>2]=c[e+(l<<2)>>2];c[m+(b<<4)+4>>2]=p;c[m+(b<<4)+8>>2]=r;g[m+(b<<4)+12>>2]=0.0;l=l+3|0;if((l|0)>=(q*3|0))break;else b=b+1|0}}else m=0;c[6324]=(c[6324]|0)+1;b=ic(1311)|0;if(!b)r=0;else{c[(b+4+15&-16)+-4>>2]=b;r=b+4+15&-16}tc(r,d,q,m,0);if((h|0)>0){d=0;do{n=c[f+(d<<2)>>2]|0;o=c[f+(d+1<<2)>>2]|0;p=c[f+(d+2<<2)>>2]|0;l=S(n,q)|0;b=k+(l+p)|0;if(!(a[b>>0]|0)){a[b>>0]=1;a[k+(n+(S(p,q)|0))>>0]=1;Gf(r,p,n,0,0)}e=S(o,q)|0;b=k+(e+n)|0;if(!(a[b>>0]|0)){a[b>>0]=1;a[k+(o+l)>>0]=1;Gf(r,n,o,0,0)}b=k+((S(p,q)|0)+o)|0;if(!(a[b>>0]|0)){a[b>>0]=1;a[k+(p+e)>>0]=1;Gf(r,o,p,0,0)}Pf(r,n,o,p,0);d=d+3|0}while((d|0)<(h*3|0))}if(j){e=c[r+772>>2]|0;if((e|0)>0){d=r+780|0;b=243703;l=0;do{n=c[d>>2]|0;o=n+(l*52|0)|0;b=(S(b,1664525)|0)+1013904223|0;p=s;q=o;f=p+52|0;do{c[p>>2]=c[q>>2];p=p+4|0;q=q+4|0}while((p|0)<(f|0));p=o;q=n+(((b>>>0)%(e>>>0)|0)*52|0)|0;f=p+52|0;do{c[p>>2]=c[q>>2];p=p+4|0;q=q+4|0}while((p|0)<(f|0));p=n+(((b>>>0)%(e>>>0)|0)*52|0)|0;q=s;f=p+52|0;do{c[p>>2]=c[q>>2];p=p+4|0;q=q+4|0}while((p|0)<(f|0));l=l+1|0}while((l|0)!=(e|0))}else b=243703;n=c[r+792>>2]|0;if((n|0)>0){o=r+800|0;l=0;do{d=c[o>>2]|0;e=d+(l*44|0)|0;b=(S(b,1664525)|0)+1013904223|0;d=d+(((b>>>0)%(n>>>0)|0)*44|0)|0;p=s;q=e;f=p+44|0;do{c[p>>2]=c[q>>2];p=p+4|0;q=q+4|0}while((p|0)<(f|0));p=e;q=d;f=p+44|0;do{c[p>>2]=c[q>>2];p=p+4|0;q=q+4|0}while((p|0)<(f|0));p=d;q=s;f=p+44|0;do{c[p>>2]=c[q>>2];p=p+4|0;q=q+4|0}while((p|0)<(f|0));l=l+1|0}while((l|0)!=(n|0))}}if(m|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0)}if(!k){i=s;return r|0}c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);i=s;return r|0}function me(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0;Gg(a,b+(c*284|0)|0,d);m=+g[b+(c*284|0)+52>>2];h=+g[b+(c*284|0)+56>>2];q=+g[b+(c*284|0)+60>>2];H=+g[b+(c*284|0)+76>>2];x=+g[b+(c*284|0)+72>>2];z=+g[b+(c*284|0)+68>>2];w=1.0/+G(+((x*-m-z*-h)*(x*-m-z*-h)+((H*-h-x*-q)*(H*-h-x*-q)+(z*-q-H*-m)*(z*-q-H*-m))));v=(H*-h-x*-q)*w;u=w*(z*-q-H*-m);w=w*(x*-m-z*-h);e=+g[b+(c*284|0)+232>>2]*.5;k=+J(+e)/+G(+(m*m+h*h+q*q));e=+I(+e);l=2.0/(e*e+(k*-q*k*-q+(k*-m*k*-m+k*-h*k*-h)));E=1.0-(k*-h*k*-h*l+k*-q*k*-q*l);D=k*-m*k*-h*l-e*k*-q*l;F=k*-m*k*-q*l+e*k*-h*l;B=k*-m*k*-h*l+e*k*-q*l;A=1.0-(k*-m*k*-m*l+k*-q*k*-q*l);C=k*-h*k*-q*l-e*k*-m*l;j=k*-m*k*-q*l-e*k*-h*l;e=k*-h*k*-q*l+e*k*-m*l;l=1.0-(k*-m*k*-m*l+k*-h*k*-h*l);k=+g[b+(c*284|0)+236>>2]*-.5;y=+J(+k)/+G(+(H*H+(x*x+z*z)));k=+I(+k);r=2.0/(k*k+(H*y*H*y+(z*y*z*y+x*y*x*y)));n=1.0-(x*y*x*y*r+H*y*H*y*r);i=z*y*x*y*r-k*H*y*r;t=z*y*H*y*r+k*x*y*r;o=z*y*x*y*r+k*H*y*r;f=1.0-(z*y*z*y*r+H*y*H*y*r);s=x*y*H*y*r-k*z*y*r;p=z*y*H*y*r-k*x*y*r;k=x*y*H*y*r+k*z*y*r;r=1.0-(z*y*z*y*r+x*y*x*y*r);y=+g[b+(c*284|0)+68>>2];x=+g[b+(c*284|0)+72>>2];z=+g[b+(c*284|0)+76>>2];g[b+(c*284|0)+92>>2]=z*(E*t+D*s+F*r)+(y*(F*p+(D*o+E*n))+x*(F*k+(E*i+D*f)));g[b+(c*284|0)+96>>2]=w*(E*t+D*s+F*r)+(v*(F*p+(D*o+E*n))+u*(F*k+(E*i+D*f)));g[b+(c*284|0)+100>>2]=(E*t+D*s+F*r)*-q+((F*p+(D*o+E*n))*-m+(F*k+(E*i+D*f))*-h);g[b+(c*284|0)+104>>2]=0.0;g[b+(c*284|0)+108>>2]=z*(B*t+A*s+C*r)+(y*(C*p+(A*o+B*n))+x*(C*k+(B*i+A*f)));g[b+(c*284|0)+112>>2]=w*(B*t+A*s+C*r)+(v*(C*p+(A*o+B*n))+u*(C*k+(B*i+A*f)));g[b+(c*284|0)+116>>2]=(B*t+A*s+C*r)*-q+((C*p+(A*o+B*n))*-m+(C*k+(B*i+A*f))*-h);g[b+(c*284|0)+120>>2]=0.0;g[b+(c*284|0)+124>>2]=z*(j*t+e*s+l*r)+(y*(l*p+(e*o+j*n))+x*(l*k+(j*i+e*f)));g[b+(c*284|0)+128>>2]=w*(j*t+e*s+l*r)+(v*(l*p+(e*o+j*n))+u*(l*k+(j*i+e*f)));g[b+(c*284|0)+132>>2]=(j*t+e*s+l*r)*-q+((l*p+(e*o+j*n))*-m+(l*k+(j*i+e*f))*-h);g[b+(c*284|0)+136>>2]=0.0;h=+g[b+(c*284|0)+32>>2];f=h*+g[b+(c*284|0)+56>>2]+ +g[b+(c*284|0)+40>>2];e=h*+g[b+(c*284|0)+60>>2]+ +g[b+(c*284|0)+44>>2];g[b+(c*284|0)+140>>2]=+g[b+(c*284|0)+52>>2]*h+ +g[b+(c*284|0)+36>>2];g[b+(c*284|0)+144>>2]=f;g[b+(c*284|0)+148>>2]=e;g[b+(c*284|0)+152>>2]=0.0;return}function ne(b,d,e,f,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=+j;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0;D=i;i=i+32|0;if(!d){i=D;return}n=c[b+44>>2]|0;if((n|0)<128){if((c[b+48>>2]|0)<128){c[6324]=(c[6324]|0)+1;o=ic(531)|0;if(!o)q=0;else{c[(o+4+15&-16)+-4>>2]=o;q=o+4+15&-16}p=c[b+44>>2]|0;if((p|0)>0){o=0;do{c[q+(o<<2)>>2]=c[(c[b+52>>2]|0)+(o<<2)>>2];o=o+1|0}while((o|0)!=(p|0))}o=c[b+52>>2]|0;if(o|0){if(a[b+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=q;c[b+48>>2]=128;o=b+52|0}else o=b+52|0;do{c[(c[o>>2]|0)+(n<<2)>>2]=0;n=n+1|0}while((n|0)!=128);y=b+48|0}else{o=b+52|0;y=b+48|0}c[b+44>>2]=128;c[c[o>>2]>>2]=d;p=1;n=126;do{w=p+-1|0;q=c[o>>2]|0;x=c[q+(w<<2)>>2]|0;u=+g[x+4>>2]-+g[l+4>>2];s=+g[x+8>>2]-+g[l+8>>2];g[D>>2]=+g[x>>2]-+g[l>>2];g[D+4>>2]=u;g[D+8>>2]=s;g[D+12>>2]=0.0;s=+g[x+20>>2]-+g[k+4>>2];u=+g[x+24>>2]-+g[k+8>>2];g[D+16>>2]=+g[x+16>>2]-+g[k>>2];g[D+20>>2]=s;g[D+24>>2]=u;g[D+28>>2]=0.0;v=c[h>>2]|0;u=+g[e>>2];s=+g[f>>2];t=(+g[D+(v<<4)>>2]-u)*s;u=s*(+g[D+(1-v<<4)>>2]-u);v=c[h+4>>2]|0;s=+g[e+4>>2];E=+g[f+4>>2];r=(+g[D+(v<<4)+4>>2]-s)*E;s=E*(+g[D+(1-v<<4)+4>>2]-s);do if((!(r>u|t>s)?(A=r>t?r:t,z=s<u?s:u,v=c[h+8>>2]|0,C=+g[e+8>>2],E=+g[f+8>>2],B=(+g[D+(v<<4)+8>>2]-C)*E,C=E*(+g[D+(1-v<<4)+8>>2]-C),!(B>z|A>C)):0)?((C<z?C:z)>0.0?(B>A?B:A)<j:0):0){if(!(c[x+40>>2]|0)){mb[c[(c[m>>2]|0)+12>>2]&127](m,x);p=w;break}if((w|0)>(n|0)){v=c[b+44>>2]|0;if((v|0)<(v<<1|0)){if((c[y>>2]|0)<(v<<1|0)){if(v){c[6324]=(c[6324]|0)+1;n=ic((v<<3|3)+16|0)|0;if(!n)q=0;else{c[(n+4+15&-16)+-4>>2]=n;q=n+4+15&-16}d=c[b+44>>2]|0;if((d|0)>0){n=0;do{c[q+(n<<2)>>2]=c[(c[o>>2]|0)+(n<<2)>>2];n=n+1|0}while((n|0)!=(d|0))}}else q=0;n=c[o>>2]|0;if(n|0){if(a[b+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0)}c[o>>2]=0}a[b+56>>0]=1;c[o>>2]=q;c[y>>2]=v<<1;n=v}else n=v;do{c[q+(n<<2)>>2]=0;n=n+1|0;q=c[o>>2]|0}while((n|0)!=(v<<1|0))}c[b+44>>2]=v<<1;n=(v<<1)+-2|0}c[q+(w<<2)>>2]=c[x+36>>2];c[(c[o>>2]|0)+(p<<2)>>2]=c[x+40>>2];p=p+1|0}else p=w;while(0)}while((p|0)!=0);i=D;return}function oe(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0.0;D=i;i=i+32|0;q=+g[d>>2];h=(g[l>>2]=q,c[l>>2]|0);t=q<999999984306749440.0?h:1566444395;p=+g[d+4>>2];k=(g[l>>2]=p,c[l>>2]|0);u=p<999999984306749440.0?k:1566444395;E=+g[d+8>>2];n=(g[l>>2]=E,c[l>>2]|0);w=E<999999984306749440.0?n:1566444395;r=+g[d+12>>2];y=r<0.0?r:0.0;h=q>-999999984306749440.0?h:-581039253;k=p>-999999984306749440.0?k:-581039253;n=E>-999999984306749440.0?n:-581039253;r=r>0.0?r:0.0;E=+g[d+16>>2];B=E<(c[l>>2]=t,+g[l>>2]);j=(g[l>>2]=E,c[l>>2]|0);t=B?j:t;p=+g[d+20>>2];B=p<(c[l>>2]=u,+g[l>>2]);m=(g[l>>2]=p,c[l>>2]|0);u=B?m:u;q=+g[d+24>>2];B=q<(c[l>>2]=w,+g[l>>2]);o=(g[l>>2]=q,c[l>>2]|0);w=B?o:w;s=+g[d+28>>2];y=s<y?s:y;x=(c[l>>2]=h,+g[l>>2])<E?j:h;v=(c[l>>2]=k,+g[l>>2])<p?m:k;m=(c[l>>2]=n,+g[l>>2])<q?o:n;s=r<s?s:r;E=+g[d+32>>2];B=E<(c[l>>2]=t,+g[l>>2]);h=(g[l>>2]=E,c[l>>2]|0);B=B?h:t;q=+g[d+36>>2];A=q<(c[l>>2]=u,+g[l>>2]);j=(g[l>>2]=q,c[l>>2]|0);A=A?j:u;r=+g[d+40>>2];z=r<(c[l>>2]=w,+g[l>>2]);k=(g[l>>2]=r,c[l>>2]|0);z=z?k:w;p=+g[d+44>>2];y=p<y?p:y;w=(c[l>>2]=x,+g[l>>2])<E?h:x;v=(c[l>>2]=v,+g[l>>2])<q?j:v;u=(c[l>>2]=m,+g[l>>2])<r?k:m;p=s<p?p:s;t=c[b+4>>2]|0;h=c[t+4>>2]|0;if((h|0)==(c[t+8>>2]|0)?(C=h|0?h<<1:1,(h|0)<(C|0)):0){if(!C)o=0;else{c[6324]=(c[6324]|0)+1;h=ic(C<<6|19)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}o=h;h=c[t+4>>2]|0}if((h|0)>0){j=0;do{k=o+(j<<6)|0;m=(c[t+12>>2]|0)+(j<<6)|0;n=k+64|0;do{c[k>>2]=c[m>>2];k=k+4|0;m=m+4|0}while((k|0)<(n|0));j=j+1|0}while((j|0)!=(h|0))}h=c[t+12>>2]|0;if(h|0){if(a[t+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[t+12>>2]=0}a[t+16>>0]=1;c[t+12>>2]=o;c[t+8>>2]=C;h=c[t+4>>2]|0}C=c[t+12>>2]|0;c[C+(h<<6)>>2]=B;c[C+(h<<6)+4>>2]=A;c[C+(h<<6)+8>>2]=z;g[C+(h<<6)+12>>2]=y;c[C+(h<<6)+16>>2]=w;c[C+(h<<6)+20>>2]=v;c[C+(h<<6)+24>>2]=u;g[C+(h<<6)+28>>2]=p;c[C+(h<<6)+32>>2]=-1;c[C+(h<<6)+36>>2]=e;c[C+(h<<6)+40>>2]=f;f=C+(h<<6)+44|0;c[f>>2]=c[D>>2];c[f+4>>2]=c[D+4>>2];c[f+8>>2]=c[D+8>>2];c[f+12>>2]=c[D+12>>2];c[f+16>>2]=c[D+16>>2];c[t+4>>2]=(c[t+4>>2]|0)+1;i=D;return}function pe(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0;o=i;i=i+16|0;n=+g[d>>2];j=+g[d+4>>2];k=+g[d+8>>2];l=+g[e>>2];m=+g[e+4>>2];h=+g[e+8>>2];if(!(a[b+228>>0]|0)){z=+g[b+100>>2];w=+g[b+116>>2];C=+g[b+132>>2];y=+g[b+104>>2];u=+g[b+120>>2];B=+g[b+136>>2];x=+g[b+108>>2];s=+g[b+124>>2];A=+g[b+140>>2];F=-+g[b+148>>2];E=-+g[b+152>>2];D=-+g[b+156>>2];J=+g[b+164>>2];I=+g[b+168>>2];r=+g[b+172>>2];H=+g[b+180>>2];G=+g[b+184>>2];q=+g[b+188>>2];v=+g[b+196>>2];t=+g[b+200>>2];p=+g[b+204>>2];r=h*(C*J+B*I+A*r)+(l*(z*J+y*I+x*r)+m*(w*J+u*I+s*r))+(J*(z*F+w*E+C*D)+(y*F+u*E+B*D)*I+(x*F+s*E+A*D)*r+ +g[b+212>>2]);q=h*(C*H+B*G+A*q)+(l*(z*H+y*G+x*q)+m*(w*H+u*G+s*q))+((z*F+w*E+C*D)*H+(y*F+u*E+B*D)*G+(x*F+s*E+A*D)*q+ +g[b+216>>2]);p=(z*F+w*E+C*D)*v+(y*F+u*E+B*D)*t+(x*F+s*E+A*D)*p+ +g[b+220>>2]+(h*(C*v+B*t+A*p)+(l*(z*v+y*t+x*p)+m*(w*v+u*t+s*p)));g[o>>2]=r;g[o+4>>2]=q;n=(n*f+l-r)*+g[d>>2]+(j*f+m-q)*+g[d+4>>2]+(k*f+h-p)*+g[d+8>>2];f=p;e=o+8|0;g[e>>2]=f;e=o+12|0;g[e>>2]=0.0;b=b+32|0;b=c[b>>2]|0;e=c[b>>2]|0;e=e+16|0;e=c[e>>2]|0;Tb[e&15](b,d,o,n);i=o;return}else{z=+g[b+36>>2];C=+g[b+52>>2];w=+g[b+68>>2];A=+g[b+40>>2];E=+g[b+56>>2];x=+g[b+72>>2];B=+g[b+44>>2];J=+g[b+60>>2];y=+g[b+76>>2];t=-+g[b+84>>2];u=-+g[b+88>>2];v=-+g[b+92>>2];p=+g[b+164>>2];q=+g[b+168>>2];G=+g[b+172>>2];r=+g[b+180>>2];s=+g[b+184>>2];H=+g[b+188>>2];D=+g[b+196>>2];F=+g[b+200>>2];I=+g[b+204>>2];G=(k*f+h)*(w*p+x*q+y*G)+((n*f+l)*(z*p+A*q+B*G)+(j*f+m)*(C*p+E*q+J*G))+(p*(z*t+C*u+w*v)+(A*t+E*u+x*v)*q+(B*t+J*u+y*v)*G+ +g[b+212>>2]);H=(k*f+h)*(w*r+x*s+y*H)+((n*f+l)*(z*r+A*s+B*H)+(j*f+m)*(C*r+E*s+J*H))+((z*t+C*u+w*v)*r+(A*t+E*u+x*v)*s+(B*t+J*u+y*v)*H+ +g[b+216>>2]);I=(z*t+C*u+w*v)*D+(A*t+E*u+x*v)*F+(B*t+J*u+y*v)*I+ +g[b+220>>2]+((k*f+h)*(w*D+x*F+y*I)+((n*f+l)*(z*D+A*F+B*I)+(j*f+m)*(C*D+E*F+J*I)));g[o>>2]=G+n*(n*(G-l)+j*(H-m)+k*(I-h));g[o+4>>2]=H+j*(n*(G-l)+j*(H-m)+k*(I-h));J=n*(G-l)+j*(H-m)+k*(I-h);I=I+k*(n*(G-l)+j*(H-m)+k*(I-h));e=o+8|0;g[e>>2]=I;e=o+12|0;g[e>>2]=0.0;b=b+32|0;b=c[b>>2]|0;e=c[b>>2]|0;e=e+16|0;e=c[e>>2]|0;Tb[e&15](b,d,o,J);i=o;return}}function qe(b,d,e,f,h,i,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0;if((j|0)<2|(k|0)<2){m=0;return m|0}r=S(k,j)|0;c[6324]=(c[6324]|0)+1;b=ic(r>>>0>268435455?18:(r<<4|3)+16|0)|0;if(!b)q=0;else{c[(b+4+15&-16)+-4>>2]=b;q=b+4+15&-16}n=r>>>0>1073741823?-1:r<<2;n=(n|0)==0?1:n;while(1){b=ic(n)|0;if(b|0){p=b;break}b=c[6453]|0;c[6453]=b+0;if(!b){p=0;break}Vb[b&3]()}if((k|0)>0?(j|0)>0:0){b=0;do{y=+(b|0)/+(k+-1|0);s=+g[e>>2];s=s+y*(+g[h>>2]-s);t=+g[e+4>>2];t=t+y*(+g[h+4>>2]-t);u=+g[e+8>>2];u=u+y*(+g[h+8>>2]-u);v=+g[f>>2];w=+g[f+4>>2];x=+g[f+8>>2];o=S(b,j)|0;v=v+y*(+g[i>>2]-v)-s;w=w+y*(+g[i+4>>2]-w)-t;x=x+y*(+g[i+8>>2]-x)-u;n=0;do{y=+(n|0)/+(j+-1|0);z=n+o|0;g[q+(z<<4)>>2]=s+v*y;g[q+(z<<4)+4>>2]=t+w*y;g[q+(z<<4)+8>>2]=u+x*y;g[q+(z<<4)+12>>2]=0.0;g[p+(z<<2)>>2]=1.0;n=n+1|0}while((n|0)!=(j|0));b=b+1|0}while((b|0)!=(k|0))}c[6324]=(c[6324]|0)+1;b=ic(1311)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}tc(b,d,r,q,p);if(l&1|0){g[(c[b+760>>2]|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&2|0){g[(c[b+760>>2]|0)+((j+-1|0)*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&4|0){z=S(k+-1|0,j)|0;g[(c[b+760>>2]|0)+(z*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(l&8|0){z=j+-1+(S(k+-1|0,j)|0)|0;g[(c[b+760>>2]|0)+(z*104|0)+88>>2]=0.0;a[b+964>>0]=1}if(q|0){c[6325]=(c[6325]|0)+1;Rc(c[q+-4>>2]|0)}Rc(p);if((k|0)<=0){z=b;return z|0}n=0;do a:do if((j|0)>0){i=S(n,j)|0;r=n+1|0;q=S(r,j)|0;if((r|0)<(k|0))o=0;else{n=0;while(1){o=n;n=n+1|0;if((n|0)<(j|0))Gf(b,o+i|0,n+i|0,0,0);if((n|0)==(j|0)){n=r;break a}}}do{e=o+i|0;p=o;o=o+1|0;do if((o|0)<(j|0)){f=o+i|0;Gf(b,e,f,0,0);Gf(b,e,p+q|0,0,0);if(!(p+n&1)){Pf(b,p+q|0,e,f,0);Pf(b,p+q|0,f,o+q|0,0);if(!m)break;Gf(b,f,p+q|0,0,0);break}else{h=o+q|0;Pf(b,e,f,h,0);Pf(b,e,h,p+q|0,0);if(!m)break;Gf(b,e,h,0,0);break}}else Gf(b,e,p+q|0,0,0);while(0)}while((o|0)!=(j|0));n=r}else n=n+1|0;while(0);while((n|0)!=(k|0));return b|0}function re(a,b,d){a=a|0;b=b|0;d=d|0;var f=0.0,j=0.0,k=0.0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+80|0;n=c[a+4>>2]|0;Ib[c[(c[n>>2]|0)+16>>2]&3](n,r+28|0,r+24|0,r+20|0,r+16|0,r+12|0,r+8|0,r+4|0,r,b);n=(c[r+12>>2]|0)+(S(c[r+8>>2]|0,d)|0)|0;q=c[a+4>>2]|0;p=(c[r+20>>2]|0)==0;o=c[r+28>>2]|0;if((c[r>>2]|0)==3){m=c[r+16>>2]|0;l=o+(S(m,e[n+4>>1]|0)|0)|0;if(p){j=+g[l+8>>2]*+g[q+12>>2];k=+g[l+4>>2]*+g[q+8>>2];f=+g[l>>2]*+g[q+4>>2]}else{j=+h[l+16>>3]*+g[q+12>>2];k=+h[l+8>>3]*+g[q+8>>2];f=+h[l>>3]*+g[q+4>>2]}g[r+32+32>>2]=f;g[r+32+36>>2]=k;g[r+32+40>>2]=j;g[r+32+44>>2]=0.0;l=o+(S(m,e[n+2>>1]|0)|0)|0;if(p){j=+g[l+8>>2]*+g[q+12>>2];k=+g[l+4>>2]*+g[q+8>>2];f=+g[l>>2]*+g[q+4>>2]}else{j=+h[l+16>>3]*+g[q+12>>2];k=+h[l+8>>3]*+g[q+8>>2];f=+h[l>>3]*+g[q+4>>2]}g[r+32+16>>2]=f;g[r+32+20>>2]=k;g[r+32+24>>2]=j;g[r+32+28>>2]=0.0;l=o+(S(m,e[n>>1]|0)|0)|0;if(p){j=+g[l+8>>2]*+g[q+12>>2];k=+g[l+4>>2]*+g[q+8>>2];f=+g[l>>2]*+g[q+4>>2]}else{j=+h[l+16>>3]*+g[q+12>>2];k=+h[l+8>>3]*+g[q+8>>2];f=+h[l>>3]*+g[q+4>>2]}g[r+32>>2]=f;g[r+32+4>>2]=k;g[r+32+8>>2]=j;g[r+32+12>>2]=0.0;q=a+8|0;q=c[q>>2]|0;p=c[q>>2]|0;p=p+8|0;p=c[p>>2]|0;Yb[p&127](q,r+32|0,b,d);d=c[a+4>>2]|0;a=c[d>>2]|0;a=a+24|0;a=c[a>>2]|0;mb[a&127](d,b);i=r;return}else{m=c[r+16>>2]|0;l=o+(S(m,c[n+8>>2]|0)|0)|0;if(p){j=+g[l+8>>2]*+g[q+12>>2];k=+g[l+4>>2]*+g[q+8>>2];f=+g[l>>2]*+g[q+4>>2]}else{j=+h[l+16>>3]*+g[q+12>>2];k=+h[l+8>>3]*+g[q+8>>2];f=+h[l>>3]*+g[q+4>>2]}g[r+32+32>>2]=f;g[r+32+36>>2]=k;g[r+32+40>>2]=j;g[r+32+44>>2]=0.0;l=o+(S(m,c[n+4>>2]|0)|0)|0;if(p){j=+g[l+8>>2]*+g[q+12>>2];k=+g[l+4>>2]*+g[q+8>>2];f=+g[l>>2]*+g[q+4>>2]}else{j=+h[l+16>>3]*+g[q+12>>2];k=+h[l+8>>3]*+g[q+8>>2];f=+h[l>>3]*+g[q+4>>2]}g[r+32+16>>2]=f;g[r+32+20>>2]=k;g[r+32+24>>2]=j;g[r+32+28>>2]=0.0;l=o+(S(m,c[n>>2]|0)|0)|0;if(p){j=+g[l+8>>2]*+g[q+12>>2];k=+g[l+4>>2]*+g[q+8>>2];f=+g[l>>2]*+g[q+4>>2]}else{j=+h[l+16>>3]*+g[q+12>>2];k=+h[l+8>>3]*+g[q+8>>2];f=+h[l>>3]*+g[q+4>>2]}g[r+32>>2]=f;g[r+32+4>>2]=k;g[r+32+8>>2]=j;g[r+32+12>>2]=0.0;q=a+8|0;q=c[q>>2]|0;p=c[q>>2]|0;p=p+8|0;p=c[p>>2]|0;Yb[p&127](q,r+32|0,b,d);d=c[a+4>>2]|0;a=c[d>>2]|0;a=a+24|0;a=c[a>>2]|0;mb[a&127](d,b);i=r;return}}function se(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,H=0.0,I=0.0,J=0.0;d=i;i=i+96|0;l=+g[b>>2];m=+g[a+28>>2];n=+g[b+4>>2];o=+g[a+32>>2];p=+g[b+8>>2];q=+g[a+36>>2];r=+g[a+44>>2];s=+g[a+48>>2];t=+g[a+52>>2];u=+g[a+60>>2];v=+g[a+64>>2];w=+g[a+68>>2];x=+g[a+76>>2];y=+g[a+80>>2];z=+g[a+84>>2];g[d+80>>2]=l*m+n*o+p*q+x;g[d+80+4>>2]=l*r+n*s+p*t+y;g[d+80+8>>2]=l*u+n*v+p*w+z;g[d+80+12>>2]=0.0;A=+g[b+16>>2];B=+g[b+20>>2];C=+g[b+24>>2];g[d+64>>2]=A*m+B*o+C*q+x;g[d+64+4>>2]=A*r+B*s+C*t+y;g[d+64+8>>2]=A*u+B*v+C*w+z;g[d+64+12>>2]=0.0;D=+g[b+32>>2];E=+g[b+36>>2];k=+g[b+40>>2];g[d+48>>2]=D*m+E*o+k*q+x;g[d+48+4>>2]=D*r+E*s+k*t+y;g[d+48+8>>2]=D*u+E*v+k*w+z;g[d+48+12>>2]=0.0;f=(l*m+n*o+p*q+x+(A*m+B*o+C*q+x)+(D*m+E*o+k*q+x))*.3333333432674408;h=(l*r+n*s+p*t+y+(A*r+B*s+C*t+y)+(D*r+E*s+k*t+y))*.3333333432674408;j=(l*u+n*v+p*w+z+(A*u+B*v+C*w+z)+(D*u+E*v+k*w+z))*.3333333432674408;g[d+32>>2]=f;g[d+32+4>>2]=h;g[d+32+8>>2]=j;g[d+32+12>>2]=0.0;b=c[a+8>>2]|0;if(!((ob[c[(c[b>>2]|0)+56>>2]&127](b)|0)&16384)){e=c[a+8>>2]|0;F=c[e>>2]|0;F=F+16|0;F=c[F>>2]|0;b=a+12|0;Yb[F&127](e,d+80|0,d+64|0,b);e=c[a+8>>2]|0;F=c[e>>2]|0;F=F+16|0;F=c[F>>2]|0;Yb[F&127](e,d+64|0,d+48|0,b);a=c[a+8>>2]|0;e=c[a>>2]|0;e=e+16|0;e=c[e>>2]|0;Yb[e&127](a,d+48|0,d+80|0,b);i=d;return}J=+g[d+80>>2];I=A*r+B*s+C*t+y-(l*r+n*s+p*t+y);H=A*u+B*v+C*w+z-(l*u+n*v+p*w+z);y=D*r+E*s+k*t+y-(l*r+n*s+p*t+y);w=D*u+E*v+k*w+z-(l*u+n*v+p*w+z);z=H*(D*m+E*o+k*q+x-J)-(A*m+B*o+C*q+x-J)*w;E=(A*m+B*o+C*q+x-J)*y-I*(D*m+E*o+k*q+x-J);D=1.0/+G(+(E*E+((I*w-H*y)*(I*w-H*y)+z*z)));c[d+16>>2]=1065353216;c[d+16+4>>2]=1065353216;c[d+16+8>>2]=0;g[d+16+12>>2]=0.0;b=c[a+8>>2]|0;e=c[(c[b>>2]|0)+16>>2]|0;g[d>>2]=D*(I*w-H*y)+f;g[d+4>>2]=D*z+h;g[d+8>>2]=D*E+j;g[d+12>>2]=0.0;Yb[e&127](b,d+32|0,d,d+16|0);b=c[a+8>>2]|0;e=c[b>>2]|0;e=e+16|0;e=c[e>>2]|0;F=a+12|0;Yb[e&127](b,d+80|0,d+64|0,F);b=c[a+8>>2]|0;e=c[b>>2]|0;e=e+16|0;e=c[e>>2]|0;Yb[e&127](b,d+64|0,d+48|0,F);a=c[a+8>>2]|0;b=c[a>>2]|0;b=b+16|0;b=c[b>>2]|0;Yb[b&127](a,d+48|0,d+80|0,F);i=d;return}function te(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0,j=0,k=0.0;a=i;i=i+144|0;switch(c[b+428>>2]&15){case 1:{c[a+112>>2]=3180;h=c[d+8>>2]|0;h=(c[h+248>>2]&2|0)==0?0:h;j=c[d+12>>2]|0;k=+g[j+48>>2];e=+g[j+52>>2];f=+g[j+56>>2];f=+G(+((k-k)*(k-k)+(e-e)*(e-e)+(f-f)*(f-f)));j=c[b+192>>2]|0;e=+Cb[c[(c[j>>2]|0)+48>>2]&15](j);j=c[d+4>>2]|0;Yb[c[(c[j>>2]|0)+8>>2]&127](j,c[d+12>>2]|0,a+96|0,a+64|0);c[a>>2]=c[a+96>>2];c[a+4>>2]=c[a+96+4>>2];c[a+8>>2]=c[a+96+8>>2];c[a+12>>2]=c[a+96+12>>2];c[a+16>>2]=c[a+64>>2];c[a+16+4>>2]=c[a+64+4>>2];c[a+16+8>>2]=c[a+64+8>>2];c[a+16+12>>2]=c[a+64+12>>2];c[a+32>>2]=c[a>>2];c[a+32+4>>2]=c[a+4>>2];c[a+32+8>>2]=c[a+8>>2];c[a+32+12>>2]=c[a+12>>2];c[a+32+16>>2]=c[a+16>>2];c[a+32+20>>2]=c[a+20>>2];c[a+32+24>>2]=c[a+24>>2];c[a+32+28>>2]=c[a+28>>2];g[a+32>>2]=+g[a+32>>2]-e;g[a+32+4>>2]=+g[a+32+4>>2]-e;g[a+32+8>>2]=+g[a+32+8>>2]-e;g[a+32+16>>2]=e+ +g[a+32+16>>2];g[a+32+20>>2]=e+ +g[a+32+20>>2];g[a+32+24>>2]=e+ +g[a+32+24>>2];c[a+112+4>>2]=b;c[a+112+8>>2]=d;c[a+112+12>>2]=h;g[a+112+16>>2]=f+e;g[a+112+20>>2]=e;Mf(c[b+968>>2]|0,a+32|0,a+112|0);i=a;return}case 2:{g[a+4>>2]=1.0;c[a+8+4>>2]=0;c[a+8+4+4>>2]=0;c[a+8+4+8>>2]=0;c[a>>2]=3216;c[a+24>>2]=b;c[a+28>>2]=d;c[a+8>>2]=c[b+496>>2];j=c[d+4>>2]|0;k=+Cb[c[(c[j>>2]|0)+48>>2]&15](j);j=c[b+192>>2]|0;k=k+ +Cb[c[(c[j>>2]|0)+48>>2]&15](j);g[a+12>>2]=k;f=+g[(c[d+8>>2]|0)+224>>2];g[a+112>>2]=f;c[a+16>>2]=c[(+g[b+356>>2]<f?b+356|0:a+112|0)>>2];j=c[d+4>>2]|0;Yb[c[(c[j>>2]|0)+8>>2]&127](j,c[d+12>>2]|0,a+112|0,a+96|0);c[a+32>>2]=c[a+112>>2];c[a+32+4>>2]=c[a+112+4>>2];c[a+32+8>>2]=c[a+112+8>>2];c[a+32+12>>2]=c[a+112+12>>2];c[a+32+16>>2]=c[a+96>>2];c[a+32+16+4>>2]=c[a+96+4>>2];c[a+32+16+8>>2]=c[a+96+8>>2];c[a+32+16+12>>2]=c[a+96+12>>2];c[a+64>>2]=c[a+32>>2];c[a+64+4>>2]=c[a+32+4>>2];c[a+64+8>>2]=c[a+32+8>>2];c[a+64+12>>2]=c[a+32+12>>2];c[a+64+16>>2]=c[a+32+16>>2];c[a+64+20>>2]=c[a+32+20>>2];c[a+64+24>>2]=c[a+32+24>>2];c[a+64+28>>2]=c[a+32+28>>2];g[a+64>>2]=+g[a+64>>2]-k;g[a+64+4>>2]=+g[a+64+4>>2]-k;g[a+64+8>>2]=+g[a+64+8>>2]-k;g[a+64+16>>2]=k+ +g[a+64+16>>2];g[a+64+20>>2]=k+ +g[a+64+20>>2];g[a+64+24>>2]=k+ +g[a+64+24>>2];Mf(c[b+1088>>2]|0,a+64|0,a);i=a;return}default:{i=a;return}}}function ue(b,d,e,f,h,i){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;c[b+4>>2]=6;c[b+8>>2]=-1;c[b+12>>2]=-1;g[b+16>>2]=34028234663852886.0e22;a[b+20>>0]=1;a[b+21>>0]=0;c[b+24>>2]=-1;c[b+28>>2]=d;c[b+32>>2]=e;g[b+36>>2]=0.0;g[b+40>>2]=.30000001192092896;c[b+44>>2]=0;c[b>>2]=4328;c[b+48>>2]=c[f>>2];c[b+48+4>>2]=c[f+4>>2];c[b+48+8>>2]=c[f+8>>2];c[b+48+12>>2]=c[f+12>>2];c[b+64>>2]=c[f+16>>2];c[b+64+4>>2]=c[f+16+4>>2];c[b+64+8>>2]=c[f+16+8>>2];c[b+64+12>>2]=c[f+16+12>>2];c[b+80>>2]=c[f+32>>2];c[b+80+4>>2]=c[f+32+4>>2];c[b+80+8>>2]=c[f+32+8>>2];c[b+80+12>>2]=c[f+32+12>>2];c[b+96>>2]=c[f+48>>2];c[b+96+4>>2]=c[f+48+4>>2];c[b+96+8>>2]=c[f+48+8>>2];c[b+96+12>>2]=c[f+48+12>>2];c[b+112>>2]=c[h>>2];c[b+112+4>>2]=c[h+4>>2];c[b+112+8>>2]=c[h+8>>2];c[b+112+12>>2]=c[h+12>>2];c[b+128>>2]=c[h+16>>2];c[b+128+4>>2]=c[h+16+4>>2];c[b+128+8>>2]=c[h+16+8>>2];c[b+128+12>>2]=c[h+16+12>>2];c[b+144>>2]=c[h+32>>2];c[b+144+4>>2]=c[h+32+4>>2];c[b+144+8>>2]=c[h+32+8>>2];c[b+144+12>>2]=c[h+32+12>>2];c[b+160>>2]=c[h+48>>2];c[b+160+4>>2]=c[h+48+4>>2];c[b+160+8>>2]=c[h+48+8>>2];c[b+160+12>>2]=c[h+48+12>>2];d=b+680|0;e=d+48|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(e|0));c[b+740>>2]=0;c[b+740+4>>2]=0;c[b+740+8>>2]=0;c[b+740+12>>2]=0;c[b+756>>2]=1045220557;c[b+760>>2]=1045220557;c[b+764>>2]=1045220557;c[b+768>>2]=0;c[b+768+4>>2]=0;c[b+768+8>>2]=0;c[b+768+12>>2]=0;c[b+768+16>>2]=0;g[b+728>>2]=.699999988079071;g[b+732>>2]=1.0;g[b+736>>2]=.5;a[b+788>>0]=0;g[b+792>>2]=0.0;g[b+808>>2]=0.0;a[b+789>>0]=0;g[b+796>>2]=0.0;g[b+812>>2]=0.0;a[b+790>>0]=0;g[b+800>>2]=0.0;g[b+816>>2]=0.0;g[b+928>>2]=0.0;g[b+876>>2]=0.0;g[b+880>>2]=.10000000149011612;g[b+884>>2]=300.0;g[b+868>>2]=1.0;g[b+872>>2]=-1.0;g[b+896>>2]=0.0;g[b+900>>2]=.20000000298023224;g[b+904>>2]=0.0;g[b+908>>2]=0.0;g[b+888>>2]=1.0;g[b+892>>2]=.5;c[b+924>>2]=0;g[b+916>>2]=0.0;a[b+912>>0]=0;g[b+992>>2]=0.0;g[b+940>>2]=0.0;g[b+944>>2]=.10000000149011612;g[b+948>>2]=300.0;g[b+932>>2]=1.0;g[b+936>>2]=-1.0;g[b+960>>2]=0.0;g[b+964>>2]=.20000000298023224;g[b+968>>2]=0.0;g[b+972>>2]=0.0;g[b+952>>2]=1.0;g[b+956>>2]=.5;c[b+988>>2]=0;g[b+980>>2]=0.0;a[b+976>>0]=0;g[b+1056>>2]=0.0;g[b+1004>>2]=0.0;g[b+1008>>2]=.10000000149011612;g[b+1012>>2]=300.0;g[b+996>>2]=1.0;g[b+1e3>>2]=-1.0;g[b+1024>>2]=0.0;g[b+1028>>2]=.20000000298023224;g[b+1032>>2]=0.0;g[b+1036>>2]=0.0;g[b+1016>>2]=1.0;g[b+1020>>2]=.5;c[b+1052>>2]=0;g[b+1044>>2]=0.0;a[b+1040>>0]=0;a[b+1300>>0]=i&1;a[b+1301>>0]=1;c[b+1304>>2]=0;a[b+1308>>0]=0;ed(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);return}function ve(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0,m=0;if(!b)b=0;else b=(c[b+248>>2]&2|0)==0?0:b;c[a+64>>2]=0;c[a+64+4>>2]=0;c[a+64+8>>2]=0;c[a+64+12>>2]=0;c[a+64+16>>2]=0;c[a+64+20>>2]=0;c[a+64+24>>2]=0;c[a+64+28>>2]=0;c[a+144>>2]=0;c[a+144+4>>2]=0;c[a+144+8>>2]=0;c[a+144+12>>2]=0;c[a+144+16>>2]=0;c[a+144+20>>2]=0;c[a+144+24>>2]=0;c[a+144+28>>2]=0;if(!b){c[a>>2]=1065353216;c[a+4>>2]=0;c[a+4+4>>2]=0;c[a+4+8>>2]=0;c[a+4+12>>2]=0;c[a+20>>2]=1065353216;c[a+24>>2]=0;c[a+24+4>>2]=0;c[a+24+8>>2]=0;c[a+24+12>>2]=0;c[a+40>>2]=1065353216;c[a+44>>2]=0;c[a+44+4>>2]=0;c[a+44+8>>2]=0;c[a+44+12>>2]=0;c[a+44+16>>2]=0;c[a+240>>2]=0;c[a+128>>2]=0;c[a+128+4>>2]=0;c[a+128+8>>2]=0;c[a+128+12>>2]=0;c[a+96>>2]=1065353216;c[a+100>>2]=1065353216;c[a+104>>2]=1065353216;g[a+108>>2]=0.0;c[a+112>>2]=1065353216;c[a+116>>2]=1065353216;c[a+120>>2]=1065353216;g[a+124>>2]=0.0;b=a+176|0;e=b+60|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(e|0));a=a+236|0;g[a>>2]=0.0;return}else{e=b+4|0;c[a>>2]=c[e>>2];c[a+4>>2]=c[e+4>>2];c[a+8>>2]=c[e+8>>2];c[a+12>>2]=c[e+12>>2];e=b+20|0;c[a+16>>2]=c[e>>2];c[a+16+4>>2]=c[e+4>>2];c[a+16+8>>2]=c[e+8>>2];c[a+16+12>>2]=c[e+12>>2];e=b+36|0;c[a+32>>2]=c[e>>2];c[a+32+4>>2]=c[e+4>>2];c[a+32+8>>2]=c[e+8>>2];c[a+32+12>>2]=c[e+12>>2];e=b+52|0;c[a+48>>2]=c[e>>2];c[a+48+4>>2]=c[e+4>>2];c[a+48+8>>2]=c[e+8>>2];c[a+48+12>>2]=c[e+12>>2];e=b+384|0;k=+g[e>>2];l=b+388|0;j=k*+g[b+392>>2];i=k*+g[b+396>>2];g[a+128>>2]=k*+g[l>>2];g[a+132>>2]=j;g[a+136>>2]=i;g[a+140>>2]=0.0;c[a+240>>2]=b;m=b+584|0;c[a+96>>2]=c[m>>2];c[a+96+4>>2]=c[m+4>>2];c[a+96+8>>2]=c[m+8>>2];c[a+96+12>>2]=c[m+12>>2];c[a+112>>2]=c[l>>2];c[a+112+4>>2]=c[l+4>>2];c[a+112+8>>2]=c[l+8>>2];c[a+112+12>>2]=c[l+12>>2];l=b+352|0;c[a+176>>2]=c[l>>2];c[a+176+4>>2]=c[l+4>>2];c[a+176+8>>2]=c[l+8>>2];c[a+176+12>>2]=c[l+12>>2];l=b+368|0;c[a+192>>2]=c[l>>2];c[a+192+4>>2]=c[l+4>>2];c[a+192+8>>2]=c[l+8>>2];c[a+192+12>>2]=c[l+12>>2];i=+g[e>>2];j=i*+g[b+456>>2]*d;k=i*+g[b+460>>2]*d;g[a+208>>2]=i*+g[b+452>>2]*d;g[a+212>>2]=j;g[a+216>>2]=k;g[a+220>>2]=0.0;k=+g[b+468>>2];j=+g[b+472>>2];i=+g[b+476>>2];h=(k*+g[b+308>>2]+j*+g[b+324>>2]+i*+g[b+340>>2])*d;f=(k*+g[b+312>>2]+j*+g[b+328>>2]+i*+g[b+344>>2])*d;g[a+224>>2]=(+g[b+304>>2]*k+ +g[b+320>>2]*j+ +g[b+336>>2]*i)*d;g[a+228>>2]=h;g[a+232>>2]=f;a=a+236|0;g[a>>2]=0.0;return}}function we(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0,N=0;M=i;i=i+64|0;c[M+48>>2]=a;c[M+48+4>>2]=b;c[M+48+8>>2]=d;L=+g[a>>2];z=+g[b>>2];A=+g[a+4>>2];B=+g[b+4>>2];C=+g[a+8>>2];D=+g[b+8>>2];g[M>>2]=L-z;g[M+4>>2]=A-B;g[M+8>>2]=C-D;g[M+12>>2]=0.0;E=+g[d>>2];F=+g[d+4>>2];H=+g[d+8>>2];g[M+16>>2]=z-E;g[M+20>>2]=B-F;g[M+24>>2]=D-H;g[M+28>>2]=0.0;g[M+32>>2]=E-L;g[M+36>>2]=F-A;g[M+40>>2]=H-C;g[M+44>>2]=0.0;I=(A-B)*(D-H)-(C-D)*(B-F);J=(C-D)*(z-E)-(D-H)*(L-z);K=(B-F)*(L-z)-(A-B)*(z-E);if(K*K+(I*I+J*J)>0.0){k=0;x=-1.0;y=0;m=0;h=0;o=A-B;p=C-D;j=L-z;u=L;v=A;w=C}else{L=-1.0;i=M;return +L}while(1){if(u*(K*o-J*p)+v*(I*p-K*j)+(J*j-I*o)*w>0.0){n=c[8796+(y<<2)>>2]|0;N=c[M+48+(n<<2)>>2]|0;r=+g[N>>2];j=r-u;s=+g[N+4>>2];p=s-v;t=+g[N+8>>2];q=t-w;do if(j*j+p*p+q*q>0.0){o=-(u*j+v*p+w*q)/(j*j+p*p+q*q);if(o>=1.0){k=2;j=r*r+s*s+t*t;m=0;h=1065353216;break}if(!(o<=0.0)){h=(g[l>>2]=o,c[l>>2]|0);u=u+j*o;j=v+p*o;w=w+q*o;k=3;j=w*w+(u*u+j*j);m=(g[l>>2]=1.0-o,c[l>>2]|0);break}else{k=1;j=u*u+v*v+w*w;m=1065353216;h=0;break}}else j=-1.0;while(0);if(x<0.0|j<x){c[f>>2]=(k&1|0?1<<y:0)+(k&2|0?1<<n:0);c[e+(y<<2)>>2]=m;c[e+(n<<2)>>2]=h;g[e+(c[8796+(n<<2)>>2]<<2)>>2]=0.0}else j=x}else j=x;n=y+1|0;if((n|0)==3)break;N=c[M+48+(n<<2)>>2]|0;x=j;y=n;o=+g[M+(n<<4)+4>>2];p=+g[M+(n<<4)+8>>2];j=+g[M+(n<<4)>>2];u=+g[N>>2];v=+g[N+4>>2];w=+g[N+8>>2]}if(!(j<0.0)){L=j;i=M;return +L}w=+G(+(K*K+(I*I+J*J)));x=(I*+g[a>>2]+J*+g[a+4>>2]+K*+g[a+8>>2])/(K*K+(I*I+J*J));c[f>>2]=7;u=+g[b>>2]-I*x;t=+g[b+4>>2]-J*x;v=+g[b+8>>2]-K*x;D=+G(+((t*(z-E)-u*(B-F))*(t*(z-E)-u*(B-F))+(((B-F)*v-t*(D-H))*((B-F)*v-t*(D-H))+(u*(D-H)-v*(z-E))*(u*(D-H)-v*(z-E)))))/w;g[e>>2]=D;z=+g[d>>2]-I*x;v=+g[d+4>>2]-J*x;B=+g[d+8>>2]-K*x;L=+G(+((v*(E-L)-z*(F-A))*(v*(E-L)-z*(F-A))+(((F-A)*B-v*(H-C))*((F-A)*B-v*(H-C))+(z*(H-C)-B*(E-L))*(z*(H-C)-B*(E-L)))))/w;g[e+4>>2]=L;g[e+8>>2]=1.0-(L+D);L=K*x*K*x+(I*x*I*x+J*x*J*x);i=M;return +L}function xe(a,e,f){a=a|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;c[e+16>>2]=c[a+20>>2];c[e+20>>2]=c[a+24>>2];c[e+24>>2]=c[a+28>>2];c[e+28>>2]=c[a+32>>2];c[e>>2]=c[a+4>>2];c[e+4>>2]=c[a+8>>2];c[e+8>>2]=c[a+12>>2];c[e+12>>2]=c[a+16>>2];c[e+32>>2]=c[a+36>>2];c[e+36>>2]=c[a+40>>2];c[e+40>>2]=c[a+44>>2];c[e+44>>2]=c[a+48>>2];c[e+48>>2]=c[a+56>>2];c[e+52>>2]=d[a+60>>0];k=c[a+88>>2]|0;c[e+56>>2]=k;if(k){k=Jb[c[(c[f>>2]|0)+28>>2]&31](f,c[a+96>>2]|0)|0;c[e+64>>2]=k;if(k|0){j=c[a+88>>2]|0;k=yb[c[(c[f>>2]|0)+16>>2]&63](f,48,j)|0;if((j|0)>0){g=c[a+96>>2]|0;h=c[k+8>>2]|0;i=0;while(1){c[h+16>>2]=c[g+(i<<6)+16>>2];c[h+20>>2]=c[g+(i<<6)+20>>2];c[h+24>>2]=c[g+(i<<6)+24>>2];c[h+28>>2]=c[g+(i<<6)+28>>2];c[h>>2]=c[g+(i<<6)>>2];c[h+4>>2]=c[g+(i<<6)+4>>2];c[h+8>>2]=c[g+(i<<6)+8>>2];c[h+12>>2]=c[g+(i<<6)+12>>2];c[h+32>>2]=c[g+(i<<6)+32>>2];c[h+36>>2]=c[g+(i<<6)+36>>2];c[h+40>>2]=c[g+(i<<6)+40>>2];i=i+1|0;if((i|0)==(j|0))break;else h=h+48|0}}else g=c[a+96>>2]|0;ib[c[(c[f>>2]|0)+20>>2]&31](f,k,17765,1497453121,g)}}else c[e+64>>2]=0;k=c[a+128>>2]|0;c[e+60>>2]=k;if(k){k=Jb[c[(c[f>>2]|0)+28>>2]&31](f,c[a+136>>2]|0)|0;c[e+68>>2]=k;if(k|0){j=c[a+128>>2]|0;k=yb[c[(c[f>>2]|0)+16>>2]&63](f,16,j)|0;if((j|0)>0){g=c[a+136>>2]|0;h=c[k+8>>2]|0;i=0;while(1){c[h+12>>2]=c[g+(i<<4)+12>>2];b[h+6>>1]=b[g+(i<<4)+6>>1]|0;b[h+8>>1]=b[g+(i<<4)+8>>1]|0;b[h+10>>1]=b[g+(i<<4)+10>>1]|0;b[h>>1]=b[g+(i<<4)>>1]|0;b[h+2>>1]=b[g+(i<<4)+2>>1]|0;b[h+4>>1]=b[g+(i<<4)+4>>1]|0;i=i+1|0;if((i|0)==(j|0))break;else h=h+16|0}}else g=c[a+136>>2]|0;ib[c[(c[f>>2]|0)+20>>2]&31](f,k,17788,1497453121,g)}}else c[e+68>>2]=0;c[e+76>>2]=c[a+144>>2];k=c[a+152>>2]|0;c[e+80>>2]=k;if(!k){c[e+72>>2]=0;return 17832}k=Jb[c[(c[f>>2]|0)+28>>2]&31](f,c[a+160>>2]|0)|0;c[e+72>>2]=k;if(!k)return 17832;j=c[a+152>>2]|0;k=yb[c[(c[f>>2]|0)+16>>2]&63](f,20,j)|0;if((j|0)>0){g=c[a+160>>2]|0;h=c[k+8>>2]|0;i=0;while(1){b[h+14>>1]=b[g+(i<<5)+6>>1]|0;b[h+16>>1]=b[g+(i<<5)+8>>1]|0;b[h+18>>1]=b[g+(i<<5)+10>>1]|0;b[h+8>>1]=b[g+(i<<5)>>1]|0;b[h+10>>1]=b[g+(i<<5)+2>>1]|0;b[h+12>>1]=b[g+(i<<5)+4>>1]|0;c[h>>2]=c[g+(i<<5)+12>>2];c[h+4>>2]=c[g+(i<<5)+16>>2];i=i+1|0;if((i|0)==(j|0))break;else h=h+20|0}}else g=c[a+160>>2]|0;ib[c[(c[f>>2]|0)+20>>2]&31](f,k,17811,1497453121,g);return 17832}function ye(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0.0,k=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;d=i;i=i+144|0;g[a+36>>2]=0.0;c[d+128>>2]=0;c[d+128+4>>2]=0;c[d+128+8>>2]=0;c[d+128+12>>2]=0;b=0;do{e=d+128+(b<<2)|0;g[e>>2]=1.0;A=c[a+28>>2]|0;I=c[A+4>>2]|0;c[d+80>>2]=I;F=c[A+20>>2]|0;c[d+80+4>>2]=F;C=c[A+36>>2]|0;c[d+80+8>>2]=C;g[d+80+12>>2]=0.0;H=c[A+8>>2]|0;c[d+80+16>>2]=H;E=c[A+24>>2]|0;c[d+80+20>>2]=E;B=c[A+40>>2]|0;c[d+80+24>>2]=B;g[d+80+28>>2]=0.0;G=c[A+12>>2]|0;c[d+80+32>>2]=G;D=c[A+28>>2]|0;c[d+80+36>>2]=D;z=c[A+44>>2]|0;c[d+80+40>>2]=z;g[d+80+44>>2]=0.0;f=c[a+32>>2]|0;y=c[f+4>>2]|0;c[d+32>>2]=y;v=c[f+20>>2]|0;c[d+32+4>>2]=v;s=c[f+36>>2]|0;c[d+32+8>>2]=s;g[d+32+12>>2]=0.0;x=c[f+8>>2]|0;c[d+32+16>>2]=x;u=c[f+24>>2]|0;c[d+32+20>>2]=u;r=c[f+40>>2]|0;c[d+32+24>>2]=r;g[d+32+28>>2]=0.0;w=c[f+12>>2]|0;c[d+32+32>>2]=w;t=c[f+28>>2]|0;c[d+32+36>>2]=t;h=c[f+44>>2]|0;c[d+32+40>>2]=h;g[d+32+44>>2]=0.0;p=+g[a+300>>2];m=p*(c[l>>2]=I,+g[l>>2]);j=+g[a+304>>2];m=m+j*(c[l>>2]=H,+g[l>>2]);k=+g[a+308>>2];m=m+k*(c[l>>2]=G,+g[l>>2]);q=p*(c[l>>2]=F,+g[l>>2]);q=q+j*(c[l>>2]=E,+g[l>>2]);q=q+k*(c[l>>2]=D,+g[l>>2]);p=p*(c[l>>2]=C,+g[l>>2]);j=p+j*(c[l>>2]=B,+g[l>>2]);p=+g[A+52>>2];o=+g[A+56>>2];n=+g[A+60>>2];n=j+k*(c[l>>2]=z,+g[l>>2])+n-n;g[d+16>>2]=m+p-p;g[d+16+4>>2]=q+o-o;g[d+16+8>>2]=n;g[d+16+12>>2]=0.0;n=+g[a+316>>2];o=n*(c[l>>2]=y,+g[l>>2]);q=+g[a+320>>2];o=o+q*(c[l>>2]=x,+g[l>>2]);p=+g[a+324>>2];o=o+p*(c[l>>2]=w,+g[l>>2]);m=n*(c[l>>2]=v,+g[l>>2]);m=m+q*(c[l>>2]=u,+g[l>>2]);m=m+p*(c[l>>2]=t,+g[l>>2]);n=n*(c[l>>2]=s,+g[l>>2]);q=n+q*(c[l>>2]=r,+g[l>>2]);n=+g[f+52>>2];k=+g[f+56>>2];j=+g[f+60>>2];j=q+p*(c[l>>2]=h,+g[l>>2])+j-j;g[d>>2]=o+n-n;g[d+4>>2]=m+k-k;g[d+8>>2]=j;g[d+12>>2]=0.0;h=c[a+28>>2]|0;f=c[a+32>>2]|0;Eg(a+48+(b*84|0)|0,d+80|0,d+32|0,d+16|0,d,d+128|0,h+436|0,+g[h+384>>2],f+436|0,+g[f+384>>2]);g[e>>2]=0.0;b=b+1|0}while((b|0)!=3);i=d;return}function ze(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,i=0.0,j=0.0,k=0;if(a[b+1308>>0]|0){c[d>>2]=0;c[d+4>>2]=0;return}ed(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);c[d>>2]=0;c[d+4>>2]=6;if((c[b+856>>2]|0)==0?(a[b+788>>0]|0)==0:0){e=0;f=6}else{c[d>>2]=1;c[d+4>>2]=5;e=1;f=5}if(!((c[b+860>>2]|0)==0?(a[b+789>>0]|0)==0:0)){e=e+1|0;c[d>>2]=e;f=f+-1|0;c[d+4>>2]=f}if(!((c[b+864>>2]|0)==0?(a[b+790>>0]|0)==0:0)){e=e+1|0;c[d>>2]=e;f=f+-1|0;c[d+4>>2]=f}h=+g[b+868>>2];i=+g[b+872>>2];j=+Tj(+g[b+1192>>2],h,i);g[b+920>>2]=j;do if(!(h>i)){if(h>j){c[b+924>>2]=1;g[b+916>>2]=j-h;if(j-h>3.1415927410125732){g[b+916>>2]=j-h+-6.2831854820251465;k=7;break}if(!(j-h<-3.1415927410125732)){k=7;break}g[b+916>>2]=j-h+6.2831854820251465;k=7;break}if(!(i<j)){c[b+924>>2]=0;k=57;break}c[b+924>>2]=2;g[b+916>>2]=j-i;if(j-i>3.1415927410125732){g[b+916>>2]=j-i+-6.2831854820251465;k=7;break}if(j-i<-3.1415927410125732){g[b+916>>2]=j-i+6.2831854820251465;k=7}else k=7}else{c[b+924>>2]=0;k=57}while(0);if((k|0)==57)if(a[b+912>>0]|0)k=7;if((k|0)==7){e=e+1|0;c[d>>2]=e;f=f+-1|0;c[d+4>>2]=f}h=+g[b+932>>2];i=+g[b+936>>2];j=+Tj(+g[b+1196>>2],h,i);g[b+984>>2]=j;do if(!(h>i)){if(h>j){c[b+988>>2]=1;g[b+980>>2]=j-h;if(j-h>3.1415927410125732){g[b+980>>2]=j-h+-6.2831854820251465;k=23;break}if(!(j-h<-3.1415927410125732)){k=23;break}g[b+980>>2]=j-h+6.2831854820251465;k=23;break}if(!(i<j)){c[b+988>>2]=0;k=21;break}c[b+988>>2]=2;g[b+980>>2]=j-i;if(j-i>3.1415927410125732){g[b+980>>2]=j-i+-6.2831854820251465;k=23;break}if(j-i<-3.1415927410125732){g[b+980>>2]=j-i+6.2831854820251465;k=23}else k=23}else{c[b+988>>2]=0;k=21}while(0);if((k|0)==21)if(a[b+976>>0]|0)k=23;if((k|0)==23){e=e+1|0;c[d>>2]=e;f=f+-1|0;c[d+4>>2]=f}h=+g[b+996>>2];i=+g[b+1e3>>2];j=+Tj(+g[b+1200>>2],h,i);g[b+1048>>2]=j;do if(!(h>i)){if(h>j){c[b+1052>>2]=1;g[b+1044>>2]=j-h;if(j-h>3.1415927410125732){g[b+1044>>2]=j-h+-6.2831854820251465;break}if(!(j-h<-3.1415927410125732))break;g[b+1044>>2]=j-h+6.2831854820251465;break}if(!(i<j)){c[b+1052>>2]=0;k=37;break}c[b+1052>>2]=2;g[b+1044>>2]=j-i;if(j-i>3.1415927410125732){g[b+1044>>2]=j-i+-6.2831854820251465;break}if(j-i<-3.1415927410125732)g[b+1044>>2]=j-i+6.2831854820251465}else{c[b+1052>>2]=0;k=37}while(0);if((k|0)==37?(a[b+1040>>0]|0)==0:0)return;c[d>>2]=e+1;c[d+4>>2]=f+-1;return}function Ae(a,b,d,e,f,h,j,k){a=a|0;b=b|0;d=d|0;e=+e;f=+f;h=+h;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0;V=i;i=i+32|0;A=+g[d>>2];C=+g[d+4>>2];B=+g[d+8>>2];w=+g[j>>2];t=+g[j+4>>2];r=+g[j+8>>2];q=+g[k>>2];s=+g[k+4>>2];v=+g[k+8>>2];L=1.0/+G(+((e-A)*(e-A)+(f-C)*(f-C)+(h-B)*(h-B)));M=(e-A)*L==0.0?999999984306749440.0:1.0/((e-A)*L);N=(f-C)*L==0.0?999999984306749440.0:1.0/((f-C)*L);O=(h-B)*L==0.0?999999984306749440.0:1.0/((h-B)*L);P=(A>e?e:A)+w;Q=(C>f?f:C)+t;R=(B>h?h:B)+r;S=(A<e?e:A)+q;T=(C<f?f:C)+s;U=(B<h?h:B)+v;m=c[a+56>>2]|0;a:do if((m|0)>0){o=c[a+96>>2]|0;l=0;y=0;x=m;while(1){l=l+1|0;c[V>>2]=c[o>>2];c[V+4>>2]=c[o+4>>2];c[V+8>>2]=c[o+8>>2];c[V+12>>2]=c[o+12>>2];u=o+16|0;c[V+16>>2]=c[u>>2];c[V+16+4>>2]=c[u+4>>2];c[V+16+8>>2]=c[u+8>>2];c[V+16+12>>2]=c[u+12>>2];g[V>>2]=+g[V>>2]-q;g[V+4>>2]=+g[V+4>>2]-s;g[V+8>>2]=+g[V+8>>2]-v;g[V+16>>2]=+g[V+16>>2]-w;g[V+20>>2]=+g[V+20>>2]-t;g[V+24>>2]=+g[V+24>>2]-r;if(!(P>+g[u>>2])?!(S<+g[o>>2]):0)m=1;else m=0;if(!(!(R>+g[o+24>>2])?!(U<+g[o+8>>2]):0))m=0;if(((!(Q>+g[o+20>>2])?!(T<+g[o+4>>2]|m^1):0)?(E=+g[d>>2],D=M*(+g[V+((M<0.0&1)<<4)>>2]-E),E=M*(+g[V+((M<0.0^1)<<4)>>2]-E),H=+g[d+4>>2],F=N*(+g[V+((N<0.0&1)<<4)+4>>2]-H),H=N*(+g[V+((N<0.0^1)<<4)+4>>2]-H),!(F>E|D>H)):0)?(I=F>D?F:D,z=H<E?H:E,K=+g[d+8>>2],J=O*(+g[V+((O<0.0&1)<<4)+8>>2]-K),K=O*(+g[V+((O<0.0^1)<<4)+8>>2]-K),!(J>z|I>K)):0){m=(K<z?K:z)>0.0?(J>I?J:I)<(h-B)*(h-B)*L+((e-A)*(e-A)*L+(f-C)*(f-C)*L):0;n=c[o+32>>2]|0;if(m&(n|0)==-1){Ub[c[(c[b>>2]|0)+8>>2]&127](b,c[o+36>>2]|0,c[o+40>>2]|0);m=c[a+56>>2]|0;u=17}else{p=(n|0)==-1;u=16}}else{n=c[o+32>>2]|0;p=(n|0)==-1;m=0;u=16}if((u|0)==16){u=0;if(p|m){m=x;u=17}else{o=o+(n<<6)|0;n=n+y|0;m=x}}if((u|0)==17){o=o+64|0;n=y+1|0}if((n|0)>=(m|0))break a;y=n;x=m;q=+g[k>>2];s=+g[k+4>>2];v=+g[k+8>>2];w=+g[j>>2];t=+g[j+4>>2];r=+g[j+8>>2]}}else l=0;while(0);if((c[6317]|0)>=(l|0)){i=V;return}c[6317]=l;i=V;return}function Be(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,i=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0;if(!(c[a+204>>2]&2)){c[a+68>>2]=c[b>>2];c[a+68+4>>2]=c[b+4>>2];c[a+68+8>>2]=c[b+8>>2];c[a+68+12>>2]=c[b+12>>2];c[a+84>>2]=c[b+16>>2];c[a+84+4>>2]=c[b+16+4>>2];c[a+84+8>>2]=c[b+16+8>>2];c[a+84+12>>2]=c[b+16+12>>2];c[a+100>>2]=c[b+32>>2];c[a+100+4>>2]=c[b+32+4>>2];c[a+100+8>>2]=c[b+32+8>>2];c[a+100+12>>2]=c[b+32+12>>2];c[a+116>>2]=c[b+48>>2];c[a+116+4>>2]=c[b+48+4>>2];c[a+116+8>>2]=c[b+48+8>>2];c[a+116+12>>2]=c[b+48+12>>2];d=a+20|0;e=b+16|0;f=a+36|0;h=b+32|0;i=a+52|0;j=b+48|0;k=a+4|0}else{c[a+68>>2]=c[a+4>>2];c[a+68+4>>2]=c[a+4+4>>2];c[a+68+8>>2]=c[a+4+8>>2];c[a+68+12>>2]=c[a+4+12>>2];c[a+84>>2]=c[a+20>>2];c[a+84+4>>2]=c[a+20+4>>2];c[a+84+8>>2]=c[a+20+8>>2];c[a+84+12>>2]=c[a+20+12>>2];c[a+100>>2]=c[a+36>>2];c[a+100+4>>2]=c[a+36+4>>2];c[a+100+8>>2]=c[a+36+8>>2];c[a+100+12>>2]=c[a+36+12>>2];c[a+116>>2]=c[a+52>>2];c[a+116+4>>2]=c[a+52+4>>2];c[a+116+8>>2]=c[a+52+8>>2];c[a+116+12>>2]=c[a+52+12>>2];d=a+20|0;e=b+16|0;f=a+36|0;h=b+32|0;i=a+52|0;j=b+48|0;k=a+4|0}c[a+132>>2]=c[a+352>>2];c[a+132+4>>2]=c[a+352+4>>2];c[a+132+8>>2]=c[a+352+8>>2];c[a+132+12>>2]=c[a+352+12>>2];c[a+148>>2]=c[a+368>>2];c[a+148+4>>2]=c[a+368+4>>2];c[a+148+8>>2]=c[a+368+8>>2];c[a+148+12>>2]=c[a+368+12>>2];c[k>>2]=c[b>>2];c[k+4>>2]=c[b+4>>2];c[k+8>>2]=c[b+8>>2];c[k+12>>2]=c[b+12>>2];c[d>>2]=c[e>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];c[f>>2]=c[h>>2];c[f+4>>2]=c[h+4>>2];c[f+8>>2]=c[h+8>>2];c[f+12>>2]=c[h+12>>2];c[i>>2]=c[j>>2];c[i+4>>2]=c[j+4>>2];c[i+8>>2]=c[j+8>>2];c[i+12>>2]=c[j+12>>2];w=+g[a+4>>2];q=+g[a+436>>2];v=+g[a+8>>2];o=+g[a+440>>2];u=+g[a+12>>2];m=+g[a+444>>2];t=+g[a+20>>2];s=+g[a+24>>2];r=+g[a+28>>2];p=+g[a+36>>2];n=+g[a+40>>2];l=+g[a+44>>2];g[a+304>>2]=w*w*q+v*v*o+u*u*m;g[a+308>>2]=w*q*t+v*o*s+u*m*r;g[a+312>>2]=w*q*p+v*o*n+u*m*l;g[a+316>>2]=0.0;g[a+320>>2]=w*q*t+v*o*s+u*m*r;g[a+324>>2]=t*q*t+s*o*s+r*m*r;g[a+328>>2]=q*t*p+o*s*n+m*r*l;g[a+332>>2]=0.0;g[a+336>>2]=w*q*p+v*o*n+u*m*l;g[a+340>>2]=t*q*p+s*o*n+r*m*l;g[a+344>>2]=p*q*p+n*o*n+l*m*l;g[a+348>>2]=0.0;return}function Ce(a,b,d,e,f,h){a=a|0;b=b|0;d=+d;e=+e;f=+f;h=h|0;var i=0,j=0,k=0.0,l=0.0,m=0,n=0,o=0.0,p=0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0.0,z=0.0,A=0,B=0.0;a:while(1){if((b|0)>0){i=-1;j=0;do{do if(c[h+(j<<2)>>2]|0){if((i|0)!=-1?!(+g[a+(j<<4)>>2]*d+ +g[a+(j<<4)+4>>2]*e+ +g[a+(j<<4)+8>>2]*f>+g[a+(i<<4)>>2]*d+ +g[a+(i<<4)+4>>2]*e+ +g[a+(i<<4)+8>>2]*f):0)break;i=j}while(0);j=j+1|0}while((j|0)!=(b|0))}else i=-1;A=h+(i<<2)|0;if((c[A>>2]|0)==3){j=37;break}k=+G(+((e-f*0.0)*(e-f*0.0)+(f*0.0-d)*(f*0.0-d)+(d*0.0-e*0.0)*(d*0.0-e*0.0)));l=+G(+((d-e*0.0)*(d-e*0.0)+((e*0.0-f)*(e*0.0-f)+(f*0.0-d*0.0)*(f*0.0-d*0.0))));if(k>l){y=(e-f*0.0)*(1.0/k);z=(d*0.0-e*0.0)*(1.0/k);s=(f*0.0-d)*(1.0/k)}else{y=(e*0.0-f)*(1.0/l);z=(d-e*0.0)*(1.0/l);s=(f*0.0-d*0.0)*(1.0/l)}t=s*f-z*e;u=z*d-y*f;v=y*e-s*d;w=(i|0)==-1;r=0;j=-1;while(1){x=+(r|0);q=+J(+(x*.01745329238474369));o=+I(+(x*.01745329238474369));k=(y*q+t*o)*.02500000037252903+d;l=(s*q+u*o)*.02500000037252903+e;o=(z*q+v*o)*.02500000037252903+f;if((b|0)>0){m=-1;n=0;do{do if(c[h+(n<<2)>>2]|0){if((m|0)!=-1?!(k*+g[a+(n<<4)>>2]+l*+g[a+(n<<4)+4>>2]+o*+g[a+(n<<4)+8>>2]>k*+g[a+(m<<4)>>2]+l*+g[a+(m<<4)+4>>2]+o*+g[a+(m<<4)+8>>2]):0)break;m=n}while(0);n=n+1|0}while((n|0)!=(b|0))}else m=-1;if((j|0)==(i|0)&(m|0)==(i|0)){j=20;break a}b:do if(!((j|0)==-1|(j|0)==(m|0))?x+-40.0<=x:0){if((b|0)>0)q=x+-40.0;else{k=x+-40.0;while(1){if((j|0)==(i|0)&w){i=-1;j=33;break a}k=k+5.0;if(!(k<=x))break b;else j=-1}}while(1){o=q*.01745329238474369;B=+J(+o);o=+I(+o);k=(y*B+t*o)*.02500000037252903+d;l=(s*B+u*o)*.02500000037252903+e;o=(z*B+v*o)*.02500000037252903+f;n=-1;p=0;do{do if(c[h+(p<<2)>>2]|0){if((n|0)!=-1?!(k*+g[a+(p<<4)>>2]+l*+g[a+(p<<4)+4>>2]+o*+g[a+(p<<4)+8>>2]>k*+g[a+(n<<4)>>2]+l*+g[a+(n<<4)+4>>2]+o*+g[a+(n<<4)+8>>2]):0)break;n=p}while(0);p=p+1|0}while((p|0)!=(b|0));if((j|0)==(i|0)&(n|0)==(i|0)){j=33;break a}q=q+5.0;if(!(q<=x))break;else j=n}}while(0);r=r+45|0;if((r|0)>360)break;else j=m}c[A>>2]=0}if((j|0)==20){c[A>>2]=3;h=i;return h|0}else if((j|0)==33){c[h+(i<<2)>>2]=3;h=i;return h|0}else if((j|0)==37)return i|0;return 0}function De(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0;h=i;i=i+160|0;e=c[a+4>>2]|0;f=c[e+12>>2]|0;D=+g[f>>2];C=+g[f+4>>2];B=+g[f+8>>2];A=+g[f+16>>2];z=+g[f+20>>2];y=+g[f+24>>2];r=+g[f+32>>2];p=+g[f+36>>2];n=+g[f+40>>2];e=c[(c[e+4>>2]|0)+28>>2]|0;x=+g[e+(d*80|0)>>2];w=+g[e+(d*80|0)+16>>2];v=+g[e+(d*80|0)+32>>2];u=+g[e+(d*80|0)+4>>2];t=+g[e+(d*80|0)+20>>2];s=+g[e+(d*80|0)+36>>2];q=+g[e+(d*80|0)+8>>2];o=+g[e+(d*80|0)+24>>2];m=+g[e+(d*80|0)+40>>2];F=+g[e+(d*80|0)+48>>2];E=+g[e+(d*80|0)+52>>2];j=+g[e+(d*80|0)+56>>2];l=+g[f+48>>2]+(D*F+C*E+B*j);k=+g[f+52>>2]+(A*F+z*E+y*j);j=+g[f+56>>2]+(r*F+p*E+n*j);g[h+88>>2]=D*x+C*w+B*v;g[h+88+4>>2]=D*u+C*t+B*s;g[h+88+8>>2]=D*q+C*o+B*m;g[h+88+12>>2]=0.0;g[h+88+16>>2]=A*x+z*w+y*v;g[h+88+20>>2]=A*u+z*t+y*s;g[h+88+24>>2]=A*q+z*o+y*m;g[h+88+28>>2]=0.0;g[h+88+32>>2]=r*x+p*w+n*v;g[h+88+36>>2]=r*u+p*t+n*s;g[h+88+40>>2]=r*q+p*o+n*m;g[h+88+44>>2]=0.0;g[h+88+48>>2]=l;g[h+88+52>>2]=k;g[h+88+56>>2]=j;g[h+88+60>>2]=0.0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,h+88|0,h+72|0,h+56|0);f=c[a+8>>2]|0;e=c[f+4>>2]|0;Yb[c[(c[e>>2]|0)+8>>2]&127](e,c[f+12>>2]|0,h+40|0,h+24|0);if(!(+g[h+72>>2]>+g[h+24>>2])?!(+g[h+56>>2]<+g[h+40>>2]):0)e=1;else e=0;if(!(!(+g[h+72+8>>2]>+g[h+24+8>>2])?!(+g[h+56+8>>2]<+g[h+40+8>>2]):0))e=0;if(+g[h+72+4>>2]>+g[h+24+4>>2]){i=h;return}if(+g[h+56+4>>2]<+g[h+40+4>>2]|e^1){i=h;return}e=c[a+4>>2]|0;f=c[e+8>>2]|0;c[h>>2]=e;c[h+4>>2]=b;c[h+8>>2]=f;c[h+12>>2]=h+88;c[h+16>>2]=-1;c[h+20>>2]=d;if(!(c[(c[a+24>>2]|0)+(d<<2)>>2]|0)){e=c[a+12>>2]|0;e=sb[c[(c[e>>2]|0)+8>>2]&31](e,h,c[a+8>>2]|0,c[a+28>>2]|0)|0;c[(c[a+24>>2]|0)+(d<<2)>>2]=e;e=c[a+4>>2]|0}f=c[a+20>>2]|0;b=c[f+8>>2]|0;if((c[b+8>>2]|0)==(c[e+8>>2]|0)){c[f+8>>2]=h;Ub[c[(c[f>>2]|0)+8>>2]&127](f,-1,d)}else{b=c[f+12>>2]|0;c[f+12>>2]=h;Ub[c[(c[f>>2]|0)+12>>2]&127](f,-1,d)}e=c[(c[a+24>>2]|0)+(d<<2)>>2]|0;ib[c[(c[e>>2]|0)+8>>2]&31](e,h,c[a+8>>2]|0,c[a+16>>2]|0,c[a+20>>2]|0);e=c[a+20>>2]|0;if((c[(c[e+8>>2]|0)+8>>2]|0)==(c[(c[a+4>>2]|0)+8>>2]|0))c[e+8>>2]=b;else c[e+12>>2]=b;i=h;return}function Ee(){if(a[22112]|0)return;a[22112]=1;c[6069]=0;c[6070]=-2147483648;c[6071]=-1082130432;g[6072]=0.0;c[6073]=1060716128;c[6074]=-1090087446;c[6075]=-1092290076;g[6076]=0.0;c[6077]=-1098022214;c[6078]=-1084636126;c[6079]=-1092290076;g[6080]=0.0;c[6081]=-1083901670;c[6082]=-2147483648;c[6083]=-1092290177;g[6084]=0.0;c[6085]=-1098022214;c[6086]=1062847522;c[6087]=-1092290043;g[6088]=0.0;c[6089]=1060716128;c[6090]=1057396202;c[6091]=-1092290076;g[6092]=0.0;c[6093]=1049461434;c[6094]=-1084636126;c[6095]=1055193605;g[6096]=0.0;c[6097]=-1086767520;c[6098]=-1090087446;c[6099]=1055193572;g[6100]=0.0;c[6101]=-1086767520;c[6102]=1057396202;c[6103]=1055193572;g[6104]=0.0;c[6105]=1049461434;c[6106]=1062847522;c[6107]=1055193572;g[6108]=0.0;c[6109]=1063581978;c[6110]=0;c[6111]=1055193471;g[6112]=0.0;c[6113]=-2147483648;c[6114]=0;c[6115]=1065353216;g[6116]=0.0;c[6117]=1054458864;c[6118]=-1096927567;c[6119]=-1084636042;g[6120]=0.0;c[6121]=-1104782626;c[6122]=-1090519208;c[6123]=-1084636042;g[6124]=0.0;c[6125]=1049007812;c[6126]=-1085334679;c[6127]=-1090087228;g[6128]=0.0;c[6129]=1054458864;c[6130]=1050556081;c[6131]=-1084636042;g[6132]=0.0;c[6133]=1062847505;c[6134]=-2147483648;c[6135]=-1090087262;g[6136]=0.0;c[6137]=-1090087362;c[6138]=-2147483648;c[6139]=-1084636076;g[6140]=0.0;c[6141]=-1087361736;c[6142]=-1090519141;c[6143]=-1090087262;g[6144]=0.0;c[6145]=-1104782626;c[6146]=1056964440;c[6147]=-1084636042;g[6148]=0.0;c[6149]=-1087361736;c[6150]=1056964507;c[6151]=-1090087262;g[6152]=0.0;c[6153]=1049007812;c[6154]=1062148969;c[6155]=-1090087228;g[6156]=0.0;c[6157]=1064532105;c[6158]=1050556148;c[6159]=0;g[6160]=0.0;c[6161]=1064532105;c[6162]=-1096927500;c[6163]=0;g[6164]=0.0;c[6165]=1058437413;c[6166]=-1085334595;c[6167]=0;g[6168]=0.0;c[6169]=0;c[6170]=-1082130432;c[6171]=0;g[6172]=0.0;c[6173]=-1089046235;c[6174]=-1085334595;c[6175]=0;g[6176]=0.0;c[6177]=-1082951543;c[6178]=-1096927500;c[6179]=-2147483648;g[6180]=0.0;c[6181]=-1082951543;c[6182]=1050556148;c[6183]=-2147483648;g[6184]=0.0;c[6185]=-1089046235;c[6186]=1062149053;c[6187]=-2147483648;g[6188]=0.0;c[6189]=-2147483648;c[6190]=1065353216;c[6191]=-2147483648;g[6192]=0.0;c[6193]=1058437413;c[6194]=1062149053;c[6195]=-2147483648;g[6196]=0.0;c[6197]=1060121912;c[6198]=-1090519141;c[6199]=1057396386;g[6200]=0.0;c[6201]=-1098475836;c[6202]=-1085334679;c[6203]=1057396420;g[6204]=0.0;c[6205]=-1084636143;c[6206]=0;c[6207]=1057396386;g[6208]=0.0;c[6209]=-1098475836;c[6210]=1062148969;c[6211]=1057396420;g[6212]=0.0;c[6213]=1060121912;c[6214]=1056964507;c[6215]=1057396386;g[6216]=0.0;c[6217]=1057396286;c[6218]=0;c[6219]=1062847572;g[6220]=0.0;c[6221]=1042701022;c[6222]=-1090519208;c[6223]=1062847606;g[6224]=0.0;c[6225]=-1093024784;c[6226]=-1096927567;c[6227]=1062847606;g[6228]=0.0;c[6229]=-1093024784;c[6230]=1050556081;c[6231]=1062847606;g[6232]=0.0;c[6233]=1042701022;c[6234]=1056964440;c[6235]=1062847606;g[6236]=0.0;return}function Fe(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0.0,z=0.0;x=a[h+16>>0]&-16;a[h+16>>0]=x;y=+g[e>>2];z=+g[d>>2];q=+g[e+4>>2];r=+g[d+4>>2];s=+g[e+8>>2];t=+g[d+8>>2];u=+g[f>>2];v=+g[f+4>>2];w=+g[f+8>>2];m=+g[b>>2];n=+g[b+4>>2];i=+g[b+8>>2];o=(y-z)*(m-z)+(q-r)*(n-r)+(s-t)*(i-t);p=(u-z)*(m-z)+(v-r)*(n-r)+(w-t)*(i-t);if(o<=0.0&p<=0.0){c[h>>2]=c[d>>2];c[h+4>>2]=c[d+4>>2];c[h+8>>2]=c[d+8>>2];c[h+12>>2]=c[d+12>>2];a[h+16>>0]=x|1;g[h+20>>2]=1.0;g[h+24>>2]=0.0;g[h+28>>2]=0.0;g[h+32>>2]=0.0;return}k=(y-z)*(m-y)+(q-r)*(n-q)+(s-t)*(i-s);l=(u-z)*(m-y)+(v-r)*(n-q)+(w-t)*(i-s);if(!(!(k>=0.0)|!(l<=k))){c[h>>2]=c[e>>2];c[h+4>>2]=c[e+4>>2];c[h+8>>2]=c[e+8>>2];c[h+12>>2]=c[e+12>>2];a[h+16>>0]=x|2;g[h+20>>2]=0.0;g[h+24>>2]=1.0;g[h+28>>2]=0.0;g[h+32>>2]=0.0;return}if(k<=0.0&(o>=0.0?o*l-k*p<=0.0:0)){g[h>>2]=z+(y-z)*(o/(o-k));g[h+4>>2]=r+(q-r)*(o/(o-k));g[h+8>>2]=t+(s-t)*(o/(o-k));g[h+12>>2]=0.0;a[h+16>>0]=x|3;g[h+20>>2]=1.0-o/(o-k);g[h+24>>2]=o/(o-k);g[h+28>>2]=0.0;g[h+32>>2]=0.0;return}j=(y-z)*(m-u)+(q-r)*(n-v)+(s-t)*(i-w);i=(u-z)*(m-u)+(v-r)*(n-v)+(w-t)*(i-w);if(!(!(i>=0.0)|!(j<=i))){c[h>>2]=c[f>>2];c[h+4>>2]=c[f+4>>2];c[h+8>>2]=c[f+8>>2];c[h+12>>2]=c[f+12>>2];a[h+16>>0]=x|4;g[h+20>>2]=0.0;g[h+24>>2]=0.0;g[h+28>>2]=1.0;g[h+32>>2]=0.0;return}if(i<=0.0&(p>=0.0?j*p-o*i<=0.0:0)){g[h>>2]=z+(u-z)*(p/(p-i));g[h+4>>2]=r+(v-r)*(p/(p-i));g[h+8>>2]=t+(w-t)*(p/(p-i));g[h+12>>2]=0.0;a[h+16>>0]=x|5;g[h+20>>2]=1.0-p/(p-i);g[h+24>>2]=0.0;g[h+28>>2]=p/(p-i);g[h+32>>2]=0.0;return}if((k*i-j*l<=0.0?l-k>=0.0:0)?j-i>=0.0:0){z=(l-k)/(l-k+(j-i));g[h>>2]=y+(u-y)*z;g[h+4>>2]=q+(v-q)*z;g[h+8>>2]=s+(w-s)*z;g[h+12>>2]=0.0;a[h+16>>0]=x|6;g[h+20>>2]=0.0;g[h+24>>2]=1.0-z;g[h+28>>2]=z;g[h+32>>2]=0.0;return}m=1.0/(o*l-k*p+(k*i-j*l+(j*p-o*i)));n=(j*p-o*i)*m;p=(o*l-k*p)*m;g[h>>2]=(u-z)*p+((y-z)*n+z);g[h+4>>2]=(v-r)*p+((q-r)*n+r);g[h+8>>2]=(w-t)*p+((s-t)*n+t);g[h+12>>2]=0.0;a[h+16>>0]=x|7;g[h+20>>2]=1.0-n-p;g[h+24>>2]=n;g[h+28>>2]=p;g[h+32>>2]=0.0;return}function Ge(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;if(!((a|0)!=0&(b|0)!=0))return;c[6324]=(c[6324]|0)+1;e=ic(1043)|0;if(!e)f=0;else{c[(e+4+15&-16)+-4>>2]=e;f=e+4+15&-16}c[f>>2]=a;c[f+4>>2]=b;e=1;a=124;b=128;h=128;while(1){n=e+-1|0;l=c[f+(n<<3)>>2]|0;m=c[f+(n<<3)+4>>2]|0;if((n|0)>(a|0)){j=h<<1;do if((h|0)<(j|0)&(b|0)<(j|0)){if(h){c[6324]=(c[6324]|0)+1;a=ic((h<<4|3)+16|0)|0;if(!a)a=0;else{c[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}if((h|0)>0){b=0;do{p=f+(b<<3)|0;i=c[p+4>>2]|0;k=a+(b<<3)|0;c[k>>2]=c[p>>2];c[k+4>>2]=i;b=b+1|0}while((b|0)!=(h|0))}else o=12}else{a=0;o=12}if((o|0)==12){o=0;if(!f){b=j;f=a;break}}c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);b=j;f=a}while(0);k=j+-4|0}else{k=a;j=h}do if((l|0)==(m|0))if(!(c[l+40>>2]|0))e=n;else{p=c[l+36>>2]|0;c[f+(n<<3)>>2]=p;c[f+(n<<3)+4>>2]=p;p=e+1|0;n=c[l+40>>2]|0;c[f+(e<<3)>>2]=n;c[f+(e<<3)+4>>2]=n;n=c[l+40>>2]|0;c[f+(p<<3)>>2]=c[l+36>>2];c[f+(p<<3)+4>>2]=n;e=e+2|0}else if(((((+g[l>>2]<=+g[m+16>>2]?+g[l+16>>2]>=+g[m>>2]:0)?+g[l+4>>2]<=+g[m+20>>2]:0)?+g[l+20>>2]>=+g[m+4>>2]:0)?+g[l+8>>2]<=+g[m+24>>2]:0)?+g[l+24>>2]>=+g[m+8>>2]:0){a=(c[m+40>>2]|0)!=0;if(!(c[l+40>>2]|0))if(a){p=c[m+36>>2]|0;c[f+(n<<3)>>2]=l;c[f+(n<<3)+4>>2]=p;p=c[m+40>>2]|0;c[f+(e<<3)>>2]=l;c[f+(e<<3)+4>>2]=p;e=e+1|0;break}else{Ub[c[(c[d>>2]|0)+8>>2]&127](d,l,m);e=n;break}else{h=f+(n<<3)|0;i=c[l+36>>2]|0;if(a){p=c[m+36>>2]|0;c[h>>2]=i;c[f+(n<<3)+4>>2]=p;n=e+1|0;p=c[m+36>>2]|0;c[f+(e<<3)>>2]=c[l+40>>2];c[f+(e<<3)+4>>2]=p;p=e+2|0;i=c[m+40>>2]|0;c[f+(n<<3)>>2]=c[l+36>>2];c[f+(n<<3)+4>>2]=i;n=c[m+40>>2]|0;c[f+(p<<3)>>2]=c[l+40>>2];c[f+(p<<3)+4>>2]=n;e=e+3|0;break}else{c[h>>2]=i;c[f+(n<<3)+4>>2]=m;c[f+(e<<3)>>2]=c[l+40>>2];c[f+(e<<3)+4>>2]=m;e=e+1|0;break}}}else e=n;while(0);if(!e)break;else{a=k;h=j}}if(!f)return;c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);return}function He(b,d){b=b|0;d=+d;var e=0,f=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;n=c[b+452>>2]|0;Ub[c[(c[n>>2]|0)+16>>2]&127](n,b+324|0,0);n=c[b+452>>2]|0;ob[c[(c[n>>2]|0)+12>>2]&127](n)|0;Wc(b,d);n=c[b+328>>2]|0;if((n|0)>0){f=c[b+336>>2]|0;e=0;k=0;do{m=c[(c[f+(e<<2)>>2]|0)+424>>2]|0;k=(k|0)>(m|0)?k:m;e=e+1|0}while((e|0)!=(n|0));e=0;while(1){h=c[f+(e<<2)>>2]|0;if((c[h+892>>2]|0)>0){f=0;do{m=c[(c[h+900>>2]|0)+(f<<2)>>2]|0;tb[c[(c[m>>2]|0)+8>>2]&15](m,+g[h+492>>2],k);f=f+1|0}while((f|0)<(c[h+892>>2]|0))}e=e+1|0;if((e|0)==(n|0))break;f=c[b+336>>2]|0}if((k|0)>0){h=0;do{e=0;do{i=c[(c[b+336>>2]|0)+(e<<2)>>2]|0;j=c[i+892>>2]|0;if((j|0)>0){f=0;do{m=c[(c[i+900>>2]|0)+(f<<2)>>2]|0;xb[c[(c[m>>2]|0)+12>>2]&7](m,+g[i+492>>2],1.0);f=f+1|0}while((f|0)!=(j|0))}e=e+1|0}while((e|0)!=(n|0));h=h+1|0}while((h|0)!=(k|0));l=0}else l=0;do{m=c[(c[b+336>>2]|0)+(l<<2)>>2]|0;if((c[m+892>>2]|0)>0){e=0;do{f=c[(c[m+900>>2]|0)+(e<<2)>>2]|0;jb[c[(c[f>>2]|0)+16>>2]&31](f,+g[m+492>>2]);f=c[m+900>>2]|0;h=c[f+(e<<2)>>2]|0;a:do if(a[h+152>>0]|0){if(!h)k=f;else{c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0);k=c[m+900>>2]|0}j=e+-1|0;f=c[m+892>>2]|0;if((f|0)>0){i=c[k+(e<<2)>>2]|0;e=0;while(1){h=k+(e<<2)|0;if((c[h>>2]|0)==(i|0))break;e=e+1|0;if((e|0)>=(f|0)){e=j;break a}}if((e|0)<(f|0)){c[h>>2]=c[k+(f+-1<<2)>>2];c[(c[m+900>>2]|0)+(f+-1<<2)>>2]=i;c[m+892>>2]=f+-1;e=j;f=f+-1|0}else e=j}else e=j}else f=c[m+892>>2]|0;while(0);e=e+1|0}while((e|0)<(f|0))}l=l+1|0}while((l|0)!=(n|0))}n=c[b+452>>2]|0;jb[c[(c[n>>2]|0)+28>>2]&31](n,+g[n+12>>2]*d);if((c[b+328>>2]|0)<=0){b=c[b+452>>2]|0;n=c[b>>2]|0;n=n+32|0;n=c[n>>2]|0;kb[n&255](b);return}e=0;do{n=c[(c[b+336>>2]|0)+(e<<2)>>2]|0;Yh(n,n);e=e+1|0}while((e|0)<(c[b+328>>2]|0));b=c[b+452>>2]|0;n=c[b>>2]|0;n=n+32|0;n=c[n>>2]|0;kb[n&255](b);return}function Ie(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,i=0,j=0.0,k=0.0,l=0.0,m=0,n=0.0,o=0;o=c[a+192>>2]|0;n=+Cb[c[(c[o>>2]|0)+48>>2]&15](o);o=c[a+752>>2]|0;if((o|0)>0){i=0;do{m=c[a+760>>2]|0;d=m+(i*104|0)+8|0;j=+g[b>>2]*+g[d>>2];g[d>>2]=j;d=m+(i*104|0)+12|0;k=+g[b+4>>2]*+g[d>>2];g[d>>2]=k;d=m+(i*104|0)+16|0;l=+g[b+8>>2]*+g[d>>2];g[d>>2]=l;d=m+(i*104|0)+24|0;g[d>>2]=+g[b>>2]*+g[d>>2];d=m+(i*104|0)+28|0;g[d>>2]=+g[b+4>>2]*+g[d>>2];d=m+(i*104|0)+32|0;g[d>>2]=+g[b+8>>2]*+g[d>>2];m=c[m+(i*104|0)+96>>2]|0;d=Wg(a+968|0,m)|0;a:do if(d){h=c[a+976>>2]|0;if((h|0)<=-1){d=c[a+968>>2]|0;break}if(h){e=0;while(1){f=c[d+32>>2]|0;e=e+1|0;if(!f)break a;if((e|0)>=(h|0)){d=f;break}else d=f}}}else d=0;while(0);g[m>>2]=j-n;g[m+4>>2]=k-n;g[m+8>>2]=l-n;g[m+12>>2]=0.0;g[m+16>>2]=n+j;g[m+20>>2]=n+k;g[m+24>>2]=n+l;g[m+28>>2]=0.0;Ze(a+968|0,d,m);i=i+1|0}while((i|0)!=(o|0))}rg(a);d=c[a+968>>2]|0;if(d){o=c[a+192>>2]|0;k=+Cb[c[(c[o>>2]|0)+48>>2]&15](o);n=+g[d+4>>2]-k;l=+g[d+8>>2]-k;g[a+932>>2]=+g[d>>2]-k;g[a+936>>2]=n;g[a+940>>2]=l;g[a+944>>2]=0.0;l=k+ +g[d+20>>2];n=k+ +g[d+24>>2];g[a+948>>2]=k+ +g[d+16>>2];g[a+952>>2]=l;g[a+956>>2]=n;g[a+960>>2]=0.0;d=c[a+188>>2]|0;if(d|0){o=c[a+724>>2]|0;m=c[o+32>>2]|0;ib[c[(c[m>>2]|0)+16>>2]&31](m,d,a+932|0,a+948|0,c[o+36>>2]|0)}}else{c[a+932>>2]=0;c[a+932+4>>2]=0;c[a+932+8>>2]=0;c[a+932+12>>2]=0;c[a+932+16>>2]=0;c[a+932+20>>2]=0;c[a+932+24>>2]=0;c[a+932+28>>2]=0}e=c[a+772>>2]|0;if((e|0)<=0){Vf(a);return}f=c[a+780>>2]|0;d=0;do{m=c[f+(d*52|0)+8>>2]|0;o=c[f+(d*52|0)+12>>2]|0;k=+g[m+8>>2]-+g[o+8>>2];l=+g[m+12>>2]-+g[o+12>>2];n=+g[m+16>>2]-+g[o+16>>2];n=+G(+(k*k+l*l+n*n));g[f+(d*52|0)+16>>2]=n;g[f+(d*52|0)+28>>2]=n*n;d=d+1|0}while((d|0)!=(e|0));d=0;do{g[f+(d*52|0)+24>>2]=(+g[(c[f+(d*52|0)+8>>2]|0)+88>>2]+ +g[(c[f+(d*52|0)+12>>2]|0)+88>>2])/+g[(c[f+(d*52|0)+4>>2]|0)+4>>2];d=d+1|0}while((d|0)!=(e|0));Vf(a);return}function Je(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0;h=i;i=i+48|0;c[b+8>>2]=0;c[b+12>>2]=-1;g[b+16>>2]=0.0;c[b>>2]=8612;c[b+52>>2]=d;c[b+4>>2]=21;if(ob[c[(c[d>>2]|0)+40>>2]&127](d)|0)Ub[c[(c[d>>2]|0)+48>>2]&127](d,b+20|0,b+36|0);else{d=h+32+4|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;g[h+32>>2]=1.0;Ub[c[(c[b>>2]|0)+68>>2]&127](h+16|0,b,h+32|0);g[b+36>>2]=+g[h+16>>2]+ +g[b+16>>2];g[h+32>>2]=-1.0;Ub[c[(c[b>>2]|0)+68>>2]&127](h,b,h+32|0);c[h+16>>2]=c[h>>2];c[h+16+4>>2]=c[h+4>>2];c[h+16+8>>2]=c[h+8>>2];c[h+16+12>>2]=c[h+12>>2];g[b+20>>2]=+g[h+16>>2]-+g[b+16>>2];c[h+32>>2]=0;c[h+32+4>>2]=0;c[h+32+8>>2]=0;c[h+32+12>>2]=0;g[d>>2]=1.0;Ub[c[(c[b>>2]|0)+68>>2]&127](h+16|0,b,h+32|0);g[b+40>>2]=+g[h+16+4>>2]+ +g[b+16>>2];g[d>>2]=-1.0;Ub[c[(c[b>>2]|0)+68>>2]&127](h,b,h+32|0);c[h+16>>2]=c[h>>2];c[h+16+4>>2]=c[h+4>>2];c[h+16+8>>2]=c[h+8>>2];c[h+16+12>>2]=c[h+12>>2];g[b+24>>2]=+g[h+16+4>>2]-+g[b+16>>2];c[h+32>>2]=0;c[h+32+4>>2]=0;c[h+32+8>>2]=0;c[h+32+12>>2]=0;g[h+32+8>>2]=1.0;Ub[c[(c[b>>2]|0)+68>>2]&127](h+16|0,b,h+32|0);g[b+44>>2]=+g[h+16+8>>2]+ +g[b+16>>2];g[h+32+8>>2]=-1.0;Ub[c[(c[b>>2]|0)+68>>2]&127](h,b,h+32|0);c[h+16>>2]=c[h>>2];c[h+16+4>>2]=c[h+4>>2];c[h+16+8>>2]=c[h+8>>2];c[h+16+12>>2]=c[h+12>>2];g[b+28>>2]=+g[h+16+8>>2]-+g[b+16>>2]}c[b>>2]=6648;c[b+56>>2]=0;c[b+60>>2]=0;a[b+64>>0]=e&1;a[b+65>>0]=0;c[b+4>>2]=21;if(!f){i=h;return}c[6324]=(c[6324]|0)+1;d=ic(191)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+52>>2]=285;a[d+60>>0]=0;a[d+80>>0]=1;c[d+76>>2]=0;c[d+68>>2]=0;c[d+72>>2]=0;a[d+100>>0]=1;c[d+96>>2]=0;c[d+88>>2]=0;c[d+92>>2]=0;a[d+120>>0]=1;c[d+116>>2]=0;c[d+108>>2]=0;c[d+112>>2]=0;a[d+140>>0]=1;c[d+136>>2]=0;c[d+128>>2]=0;c[d+132>>2]=0;c[d+144>>2]=0;a[d+164>>0]=1;c[d+160>>2]=0;c[d+152>>2]=0;c[d+156>>2]=0;c[d+168>>2]=0;c[d+4>>2]=-8388609;c[d+8>>2]=-8388609;c[d+12>>2]=-8388609;g[d+16>>2]=0.0;c[d+20>>2]=2139095039;c[d+24>>2]=2139095039;c[d+28>>2]=2139095039;g[d+32>>2]=0.0;c[d>>2]=8156;c[b+56>>2]=d;_c(d,c[b+52>>2]|0,(a[b+64>>0]|0)!=0,b+20|0,b+36|0);a[b+65>>0]=1;i=h;return}function Ke(b){b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+64|0;d=c[b+8>>2]|0;if((d|0)<=0){i=r;return}o=0;do{n=c[(c[b+16>>2]|0)+(o<<2)>>2]|0;if(!(a[b+76>>0]|0))switch(c[n+216>>2]|0){case 2:case 5:break;default:q=6}else q=6;if((q|0)==6){q=0;d=c[n+192>>2]|0;Yb[c[(c[d>>2]|0)+8>>2]&127](d,n+4|0,r+48|0,r+32|0);e=+g[r+48>>2]+-.019999999552965164;g[r+48>>2]=e;j=+g[r+48+4>>2]+-.019999999552965164;g[r+48+4>>2]=j;k=+g[r+48+8>>2]+-.019999999552965164;g[r+48+8>>2]=k;h=+g[r+32>>2]+.019999999552965164;g[r+32>>2]=h;l=+g[r+32+4>>2]+.019999999552965164;g[r+32+4>>2]=l;f=+g[r+32+8>>2]+.019999999552965164;g[r+32+8>>2]=f;if(((a[b+44>>0]|0)!=0?(c[n+248>>2]|0)==2:0)?(c[n+204>>2]&3|0)==0:0){d=c[n+192>>2]|0;Yb[c[(c[d>>2]|0)+8>>2]&127](d,n+68|0,r+16|0,r);e=+g[r+16>>2]+-.019999999552965164;g[r+16>>2]=e;k=+g[r+16+4>>2]+-.019999999552965164;g[r+16+4>>2]=k;l=+g[r+16+8>>2]+-.019999999552965164;g[r+16+8>>2]=l;h=+g[r>>2]+.019999999552965164;g[r>>2]=h;m=+g[r+4>>2]+.019999999552965164;g[r+4>>2]=m;f=+g[r+8>>2]+.019999999552965164;g[r+8>>2]=f;j=+g[r+48>>2];if(e<j)g[r+48>>2]=e;else e=j;j=+g[r+48+4>>2];if(k<j){g[r+48+4>>2]=k;j=k}k=+g[r+48+8>>2];if(l<k){g[r+48+8>>2]=l;k=l}l=+g[r+16+12>>2];if(l<+g[r+48+12>>2])g[r+48+12>>2]=l;l=+g[r+32>>2];if(l<h)g[r+32>>2]=h;else h=l;l=+g[r+32+4>>2];if(l<m){g[r+32+4>>2]=m;l=m}m=+g[r+32+8>>2];if(m<f)g[r+32+8>>2]=f;else f=m;m=+g[r+12>>2];if(+g[r+32+12>>2]<m)g[r+32+12>>2]=m}d=c[b+68>>2]|0;if((c[n+204>>2]&1|0)==0?(h=h-e,l=l-j,m=f-k,!(h*h+l*l+m*m<999999995904.0)):0){if((c[n+216>>2]&-2|0)!=4)c[n+216>>2]=5;if(a[13798]|0?(p=c[b+72>>2]|0,p|0):0){a[13798]=0;mb[c[(c[p>>2]|0)+44>>2]&127](p,13799);n=c[b+72>>2]|0;mb[c[(c[n>>2]|0)+44>>2]&127](n,13848);n=c[b+72>>2]|0;mb[c[(c[n>>2]|0)+44>>2]&127](n,13916);n=c[b+72>>2]|0;mb[c[(c[n>>2]|0)+44>>2]&127](n,13981)}}else ib[c[(c[d>>2]|0)+16>>2]&31](d,c[n+188>>2]|0,r+48|0,r+32|0,c[b+24>>2]|0);d=c[b+8>>2]|0}o=o+1|0}while((o|0)<(d|0));i=r;return}function Le(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0.0,i=0.0,j=0.0,k=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0;d=c[a+780>>2]|0;if((d|0)!=4){c[a+780>>2]=d+1;x=d;w=(x|0)<0;x=w?0:x;a=a+4+(x*192|0)|0;Lm(a|0,b|0,192)|0;return x|0}y=+g[b+80>>2];v=+g[a+84>>2];u=v<y?v:y;t=+g[a+276>>2];s=t<u?t:u;r=+g[a+468>>2];w=+g[a+660>>2]<(r<s?r:s);f=w?3:r<s?2:t<u?1:(v<y^1)<<31>>31;y=+g[b>>2];if(f){k=+g[a+196>>2];n=+g[b+4>>2];m=+g[a+200>>2];o=+g[b+8>>2];i=+g[a+204>>2];s=+g[a+580>>2];p=+g[a+388>>2];u=+g[a+584>>2];j=+g[a+392>>2];r=+g[a+588>>2];h=+g[a+396>>2];d=(g[l>>2]=((y-k)*(u-j)-(n-m)*(s-p))*((y-k)*(u-j)-(n-m)*(s-p))+(((n-m)*(r-h)-(o-i)*(u-j))*((n-m)*(r-h)-(o-i)*(u-j))+((o-i)*(s-p)-(y-k)*(r-h))*((o-i)*(s-p)-(y-k)*(r-h))),c[l>>2]|0);if((f|0)==1){e=0;q=+g[a+8>>2];t=+g[a+12>>2];v=o;o=+g[a+4>>2];x=7}else{v=o;x=6}}else{k=+g[a+196>>2];m=+g[a+200>>2];i=+g[a+204>>2];d=0;n=+g[b+4>>2];v=+g[b+8>>2];p=+g[a+388>>2];s=+g[a+580>>2];j=+g[a+392>>2];u=+g[a+584>>2];h=+g[a+396>>2];r=+g[a+588>>2];x=6}if((x|0)==6){o=+g[a+4>>2];q=+g[a+8>>2];D=n-q;t=+g[a+12>>2];B=v-t;A=s-p;C=u-j;z=r-h;e=(g[l>>2]=((y-o)*C-D*A)*((y-o)*C-D*A)+((D*z-B*C)*(D*z-B*C)+(B*A-(y-o)*z)*(B*A-(y-o)*z)),c[l>>2]|0);if((f|0)==2){f=0;r=v;x=8}else x=7}if((x|0)==7){C=y-o;E=n-q;A=v-t;B=s-k;z=u-m;D=r-i;f=(g[l>>2]=(C*z-E*B)*(C*z-E*B)+((E*D-A*z)*(E*D-A*z)+(A*B-C*D)*(A*B-C*D)),c[l>>2]|0);if(w)h=0.0;else{r=v;x=8}}if((x|0)==8){E=y-o;A=n-q;C=r-t;D=p-k;B=j-m;h=h-i;h=(E*B-A*D)*(E*B-A*D)+((A*h-C*B)*(A*h-C*B)+(C*D-E*h)*(C*D-E*h))}E=+F(+(c[l>>2]=d,+g[l>>2]));C=+F(+(c[l>>2]=e,+g[l>>2]));A=+F(+(c[l>>2]=f,+g[l>>2]));z=+F(+h);D=E>-999999984306749440.0?E:-999999984306749440.0;B=C>D?C:D;x=z>(A>B?A:B)?3:A>B?2:C>D?1:(E>-999999984306749440.0^1)<<31>>31;w=(x|0)<0;x=w?0:x;a=a+4+(x*192|0)|0;Lm(a|0,b|0,192)|0;return x|0}function Me(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0;E=i;i=i+32|0;if(!a){i=E;return}z=+g[d>>2]-+g[b>>2];y=+g[d+4>>2]-+g[b+4>>2];s=+g[d+8>>2]-+g[b+8>>2];t=1.0/+G(+(z*z+y*y+s*s));u=z*t==0.0?999999984306749440.0:1.0/(z*t);v=y*t==0.0?999999984306749440.0:1.0/(y*t);w=s*t==0.0?999999984306749440.0:1.0/(s*t);c[6324]=(c[6324]|0)+1;d=ic(531)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}yn(d+4|0,0,508)|0;c[d>>2]=a;n=1;m=126;a=128;r=128;while(1){p=n+-1|0;q=c[d+(p<<2)>>2]|0;c[E>>2]=c[q>>2];c[E+4>>2]=c[q+4>>2];c[E+8>>2]=c[q+8>>2];c[E+12>>2]=c[q+12>>2];c[E+16>>2]=c[q+16>>2];c[E+16+4>>2]=c[q+16+4>>2];c[E+16+8>>2]=c[q+16+8>>2];c[E+16+12>>2]=c[q+16+12>>2];j=+g[b>>2];h=u*(+g[E+((u<0.0&1)<<4)>>2]-j);j=u*(+g[E+((u<0.0^1)<<4)>>2]-j);l=+g[b+4>>2];k=v*(+g[E+((v<0.0&1)<<4)+4>>2]-l);l=v*(+g[E+((v<0.0^1)<<4)+4>>2]-l);do if((!(k>j|h>l)?(A=k>h?k:h,x=l<j?l:j,C=+g[b+8>>2],B=w*(+g[E+((w<0.0&1)<<4)+8>>2]-C),C=w*(+g[E+((w<0.0^1)<<4)+8>>2]-C),!(B>x|A>C)):0)?((C<x?C:x)>0.0?(B>A?B:A)<z*t*z+y*t*y+s*t*s:0):0){if(!(c[q+40>>2]|0)){mb[c[(c[e>>2]|0)+12>>2]&127](e,q);n=p;f=r;break}if((p|0)>(m|0)){o=r<<1;if((r|0)<(o|0)){do if((a|0)<(o|0)){if(r){c[6324]=(c[6324]|0)+1;a=ic((r<<3|3)+16|0)|0;if(!a)a=0;else{c[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}if((r|0)>0){f=0;do{c[a+(f<<2)>>2]=c[d+(f<<2)>>2];f=f+1|0}while((f|0)!=(r|0))}else D=17}else{a=0;D=17}if((D|0)==17){D=0;if(!d){f=o;d=a;break}}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);f=o;d=a}else f=a;while(0);yn(d+(r<<2)|0,0,r<<2|0)|0;a=f}m=o+-2|0;f=o}else f=r;c[d+(p<<2)>>2]=c[q+36>>2];c[d+(n<<2)>>2]=c[q+40>>2];n=n+1|0}else{n=p;f=r}while(0);if(!n)break;else r=f}if(!d){i=E;return}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);i=E;return}function Ne(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;if(!b)if(!e){if(f|0){c[f>>2]=(a>>>0)%(d>>>0);c[f+4>>2]=0}e=0;f=(a>>>0)/(d>>>0)>>>0;return (D=e,f)|0}else{if(!f){e=0;f=0;return (D=e,f)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;e=0;f=0;return (D=e,f)|0}do if(d){if(e|0){h=(V(e|0)|0)-(V(b|0)|0)|0;if(h>>>0<=31){n=h+1|0;i=a>>>((h+1|0)>>>0)&h-31>>31|b<<31-h;m=b>>>((h+1|0)>>>0)&h-31>>31;g=0;h=a<<31-h;break}if(!f){e=0;f=0;return (D=e,f)|0}c[f>>2]=a|0;c[f+4>>2]=b|b&0;e=0;f=0;return (D=e,f)|0}if(d-1&d|0){h=(V(d|0)|0)+33-(V(b|0)|0)|0;n=h;i=32-h-1>>31&b>>>((h-32|0)>>>0)|(b<<32-h|a>>>(h>>>0))&h-32>>31;m=h-32>>31&b>>>(h>>>0);g=a<<64-h&32-h>>31;h=(b<<64-h|a>>>((h-32|0)>>>0))&32-h>>31|a<<32-h&h-33>>31;break}if(f|0){c[f>>2]=d-1&a;c[f+4>>2]=0}if((d|0)==1){e=b|b&0;f=a|0|0;return (D=e,f)|0}else{f=Ip(d|0)|0;e=b>>>(f>>>0)|0;f=b<<32-f|a>>>(f>>>0)|0;return (D=e,f)|0}}else{if(!e){if(f|0){c[f>>2]=(b>>>0)%(d>>>0);c[f+4>>2]=0}e=0;f=(b>>>0)/(d>>>0)>>>0;return (D=e,f)|0}if(!a){if(f|0){c[f>>2]=0;c[f+4>>2]=(b>>>0)%(e>>>0)}d=0;f=(b>>>0)/(e>>>0)>>>0;return (D=d,f)|0}if(!(e-1&e)){if(f|0){c[f>>2]=a|0;c[f+4>>2]=e-1&b|b&0}d=0;f=b>>>((Ip(e|0)|0)>>>0);return (D=d,f)|0}h=(V(e|0)|0)-(V(b|0)|0)|0;if(h>>>0<=30){n=h+1|0;i=b<<31-h|a>>>((h+1|0)>>>0);m=b>>>((h+1|0)>>>0);g=0;h=a<<31-h;break}if(!f){e=0;f=0;return (D=e,f)|0}c[f>>2]=a|0;c[f+4>>2]=b|b&0;e=0;f=0;return (D=e,f)|0}while(0);if(!n){j=h;b=m;a=0;h=0}else{k=Ct(d|0|0,e|e&0|0,-1,-1)|0;l=D;j=h;b=m;a=n;h=0;do{p=j;j=g>>>31|j<<1;g=h|g<<1;p=i<<1|p>>>31|0;o=i>>>31|b<<1|0;Ds(k|0,l|0,p|0,o|0)|0;n=D;m=n>>31|((n|0)<0?-1:0)<<1;h=m&1;i=Ds(p|0,o|0,m&(d|0)|0,(((n|0)<0?-1:0)>>31|((n|0)<0?-1:0)<<1)&(e|e&0)|0)|0;b=D;a=a-1|0}while((a|0)!=0);a=0}if(f|0){c[f>>2]=i;c[f+4>>2]=b}o=(g|0)>>>31|j<<1|(0<<1|g>>>31)&0|a;p=(g<<1|0>>>31)&-2|h;return (D=o,p)|0}function Oe(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0,m=0,n=0,o=0,p=0.0,q=0;o=i;i=i+144|0;j=+g[b>>2];k=+g[b+16>>2];p=j<k?j:k;h=+g[b+32>>2];if((p<h?p:h)>+g[a+20>>2]){i=o;return}m=j>k?b:b+16|0;if(+g[(+g[m>>2]>h?m:b+32|0)>>2]<+g[a+4>>2]){i=o;return}h=+g[b+8>>2];j=+g[b+24>>2];p=h<j?h:j;k=+g[b+40>>2];if((p<k?p:k)>+g[a+28>>2]){i=o;return}m=h>j?b+8|0:b+24|0;if(+g[(+g[m>>2]>k?m:b+40|0)>>2]<+g[a+12>>2]){i=o;return}h=+g[b+4>>2];j=+g[b+20>>2];p=h<j?h:j;k=+g[b+36>>2];if((p<k?p:k)>+g[a+24>>2]){i=o;return}m=h>j?b+4|0:b+20|0;if(+g[(+g[m>>2]>k?m:b+36|0)>>2]<+g[a+8>>2]){i=o;return}m=c[a+48>>2]|0;f=c[a+36>>2]|0;if((c[(c[f+4>>2]|0)+4>>2]|0)>=20){i=o;return}c[o+24+8>>2]=0;c[o+24+12>>2]=-1;c[o+24+16>>2]=1065353216;c[o+24+20>>2]=1065353216;c[o+24+24>>2]=1065353216;g[o+24+28>>2]=0.0;c[o+24+56>>2]=0;c[o+24>>2]=3956;c[o+24+4>>2]=1;c[o+24+60>>2]=c[b>>2];c[o+24+60+4>>2]=c[b+4>>2];c[o+24+60+8>>2]=c[b+8>>2];c[o+24+60+12>>2]=c[b+12>>2];c[o+24+76>>2]=c[b+16>>2];c[o+24+76+4>>2]=c[b+16+4>>2];c[o+24+76+8>>2]=c[b+16+8>>2];c[o+24+76+12>>2]=c[b+16+12>>2];c[o+24+92>>2]=c[b+32>>2];c[o+24+92+4>>2]=c[b+32+4>>2];c[o+24+92+8>>2]=c[b+32+8>>2];c[o+24+92+12>>2]=c[b+32+12>>2];c[o+24+48>>2]=c[a+56>>2];q=c[a+40>>2]|0;b=c[q+8>>2]|0;l=c[q+12>>2]|0;c[o>>2]=q;c[o+4>>2]=o+24;c[o+8>>2]=b;c[o+12>>2]=l;c[o+16>>2]=d;c[o+20>>2]=e;l=sb[c[(c[m>>2]|0)+8>>2]&31](m,f,o,c[a+64>>2]|0)|0;b=c[a+44>>2]|0;f=c[b+8>>2]|0;if((c[f+8>>2]|0)==(c[(c[a+40>>2]|0)+8>>2]|0)){c[b+8>>2]=o;Ub[c[(c[b>>2]|0)+8>>2]&127](b,d,e)}else{f=c[b+12>>2]|0;c[b+12>>2]=o;Ub[c[(c[b>>2]|0)+12>>2]&127](b,d,e)}ib[c[(c[l>>2]|0)+8>>2]&31](l,c[a+36>>2]|0,o,c[a+52>>2]|0,c[a+44>>2]|0);b=c[a+44>>2]|0;if((c[(c[b+8>>2]|0)+8>>2]|0)==(c[(c[a+40>>2]|0)+8>>2]|0))c[b+8>>2]=f;else c[b+12>>2]=f;kb[c[c[l>>2]>>2]&255](l);mb[c[(c[m>>2]|0)+60>>2]&127](m,l);c[o+24>>2]=8236;f=c[o+24+56>>2]|0;if(f|0?(kb[c[c[f>>2]>>2]&255](f),n=c[o+24+56>>2]|0,n|0):0){c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0)}i=o;return}function Pe(a,b,d,e){a=a|0;b=b|0;d=d|0;e=+e;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0,B=0;w=i;i=i+192|0;v=c[(c[a+4>>2]|0)+772>>2]|0;r=c[(c[a+8>>2]|0)+8>>2]|0;j=+g[d>>2];s=+g[b>>2]*e+j;k=+g[d+4>>2];t=+g[b+4>>2]*e+k;h=+g[d+8>>2];u=+g[b+8>>2]*e+h;f=c[(c[a+12>>2]|0)+8>>2]|0;p=+g[f+52>>2];q=+g[f+56>>2];if((v|0)!=(r|0)){x=u-+g[f+60>>2];y=j-+g[r+52>>2];k=k-+g[r+56>>2];j=h-+g[r+60>>2];l=y*+g[r+4>>2]+k*+g[r+20>>2]+j*+g[r+36>>2];m=(s-p)*+g[f+4>>2]+(t-q)*+g[f+20>>2]+x*+g[f+36>>2];n=y*+g[r+8>>2]+k*+g[r+24>>2]+j*+g[r+40>>2];o=(s-p)*+g[f+8>>2]+(t-q)*+g[f+24>>2]+x*+g[f+40>>2];j=y*+g[r+12>>2]+k*+g[r+28>>2]+j*+g[r+44>>2];h=(s-p)*+g[f+12>>2]+(t-q)*+g[f+28>>2]+x*+g[f+44>>2]}else{z=s-+g[v+52>>2];x=t-+g[v+56>>2];y=u-+g[v+60>>2];h=h-+g[f+60>>2];l=(j-p)*+g[f+4>>2]+(k-q)*+g[f+20>>2]+h*+g[f+36>>2];m=z*+g[v+4>>2]+x*+g[v+20>>2]+y*+g[v+36>>2];n=(j-p)*+g[f+8>>2]+(k-q)*+g[f+24>>2]+h*+g[f+40>>2];o=z*+g[v+8>>2]+x*+g[v+24>>2]+y*+g[v+40>>2];j=(j-p)*+g[f+12>>2]+(k-q)*+g[f+28>>2]+h*+g[f+44>>2];h=z*+g[v+12>>2]+x*+g[v+28>>2]+y*+g[v+44>>2]}g[w>>2]=m;g[w+4>>2]=o;g[w+8>>2]=h;g[w+12>>2]=0.0;g[w+16>>2]=l;g[w+20>>2]=n;g[w+24>>2]=j;g[w+28>>2]=0.0;c[w+64>>2]=c[b>>2];c[w+64+4>>2]=c[b+4>>2];c[w+64+8>>2]=c[b+8>>2];c[w+64+12>>2]=c[b+12>>2];g[w+80>>2]=e;c[w+84>>2]=0;c[w+84+4>>2]=0;c[w+84+8>>2]=0;c[w+84+12>>2]=0;f=w+116|0;b=f+44|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(b|0));g[w+48>>2]=s;g[w+52>>2]=t;g[w+56>>2]=u;g[w+60>>2]=0.0;c[w+32>>2]=c[d>>2];c[w+32+4>>2]=c[d+4>>2];c[w+32+8>>2]=c[d+8>>2];c[w+32+12>>2]=c[d+12>>2];b=c[a+20>>2]|0;f=c[a+16>>2]|0;d=c[a+28>>2]|0;B=c[a+24>>2]|0;A=(v|0)!=(r|0)?b:f;b=(v|0)!=(r|0)?f:b;f=(v|0)!=(r|0)?d:B;d=(v|0)!=(r|0)?B:d;c[w+100>>2]=A;c[w+104>>2]=b;c[w+108>>2]=f;c[w+112>>2]=d;B=c[a+32>>2]|0;+ub[c[(c[B>>2]|0)+12>>2]&1](B,w,c[((v|0)!=(r|0)?a+12|0:a+8|0)>>2]|0,A,f,c[((v|0)!=(r|0)?a+8|0:a+12|0)>>2]|0,b,d);i=w;return}function Qe(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0;l=i;i=i+128|0;a=c[a+20>>2]|0;n=+g[a+932>>2];x=+g[a+936>>2];v=+g[a+940>>2];w=+g[a+948>>2];f=+g[a+952>>2];j=+g[a+956>>2];z=+g[b>>2];m=+g[b+4>>2];p=v*+g[b+8>>2];q=+g[b+16>>2];r=+g[b+20>>2];t=v*+g[b+24>>2];u=+g[b+32>>2];o=+g[b+36>>2];s=+g[b+40>>2];y=+g[b+48>>2];k=+g[b+52>>2];h=+g[b+56>>2];g[l>>2]=n*z+x*m+p+y;g[l+4>>2]=n*q+x*r+t+k;g[l+8>>2]=n*u+x*o+v*s+h;g[l+12>>2]=0.0;g[l+16>>2]=w*z+x*m+p+y;g[l+20>>2]=w*q+x*r+t+k;g[l+24>>2]=w*u+x*o+v*s+h;g[l+28>>2]=0.0;g[l+32>>2]=w*z+f*m+p+y;g[l+36>>2]=w*q+f*r+t+k;g[l+40>>2]=w*u+f*o+v*s+h;g[l+44>>2]=0.0;g[l+48>>2]=n*z+f*m+p+y;g[l+52>>2]=n*q+f*r+t+k;g[l+56>>2]=n*u+f*o+v*s+h;g[l+60>>2]=0.0;v=+g[b>>2];u=+g[b+4>>2];t=j*+g[b+8>>2];r=+g[b+16>>2];q=+g[b+20>>2];p=j*+g[b+24>>2];m=+g[b+32>>2];g[l+64>>2]=n*v+x*u+t+y;g[l+68>>2]=n*r+x*q+p+k;g[l+72>>2]=n*m+x*o+j*s+h;g[l+76>>2]=0.0;h=+g[b+36>>2];j=j*+g[b+40>>2];s=+g[b+48>>2];o=+g[b+52>>2];k=+g[b+56>>2];g[l+80>>2]=w*v+x*u+t+s;g[l+84>>2]=w*r+x*q+p+o;g[l+88>>2]=w*m+x*h+j+k;g[l+92>>2]=0.0;g[l+96>>2]=w*v+f*u+t+s;g[l+100>>2]=w*r+f*q+p+o;g[l+104>>2]=w*m+f*h+j+k;g[l+108>>2]=0.0;g[l+112>>2]=n*v+f*u+t+s;g[l+116>>2]=n*r+f*q+p+o;g[l+120>>2]=n*m+f*h+j+k;g[l+124>>2]=0.0;c[e>>2]=c[l>>2];c[e+4>>2]=c[l+4>>2];c[e+8>>2]=c[l+8>>2];c[e+12>>2]=c[l+12>>2];c[d>>2]=c[l>>2];c[d+4>>2]=c[l+4>>2];c[d+8>>2]=c[l+8>>2];c[d+12>>2]=c[l+12>>2];a=1;do{f=+g[l+(a<<4)>>2];if(f<+g[d>>2])g[d>>2]=f;h=+g[l+(a<<4)+4>>2];if(h<+g[d+4>>2])g[d+4>>2]=h;j=+g[l+(a<<4)+8>>2];if(j<+g[d+8>>2])g[d+8>>2]=j;k=+g[l+(a<<4)+12>>2];if(k<+g[d+12>>2])g[d+12>>2]=k;if(+g[e>>2]<f)g[e>>2]=f;if(+g[e+4>>2]<h)g[e+4>>2]=h;if(+g[e+8>>2]<j)g[e+8>>2]=j;if(+g[e+12>>2]<k)g[e+12>>2]=k;a=a+1|0}while((a|0)!=8);i=l;return}function Re(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0;k=i;i=i+64|0;l=(a[b+76>>0]|0)!=0;j=l?e:d;d=l?d:e;e=c[d+4>>2]|0;if(((c[e+4>>2]|0)+-21|0)>>>0>=9){i=k;return}if((c[(c[j+4>>2]|0)+4>>2]|0)>=20){i=k;return}m=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);c[h+4>>2]=c[b+72>>2];c[b+44>>2]=j;c[b+48>>2]=d;c[b+60>>2]=f;g[b+64>>2]=m;c[b+52>>2]=h;l=c[d+12>>2]|0;B=+g[l>>2];A=+g[l+16>>2];z=+g[l+32>>2];y=+g[l+4>>2];x=+g[l+20>>2];w=+g[l+36>>2];s=+g[l+8>>2];q=+g[l+24>>2];o=+g[l+40>>2];v=-+g[l+48>>2];u=-+g[l+52>>2];t=-+g[l+56>>2];l=c[j+12>>2]|0;K=+g[l>>2];J=+g[l+16>>2];I=+g[l+32>>2];H=+g[l+4>>2];G=+g[l+20>>2];F=+g[l+36>>2];E=+g[l+8>>2];D=+g[l+24>>2];C=+g[l+40>>2];r=+g[l+48>>2];p=+g[l+52>>2];n=+g[l+56>>2];g[k>>2]=B*K+A*J+z*I;g[k+4>>2]=B*H+A*G+z*F;g[k+8>>2]=B*E+A*D+z*C;g[k+12>>2]=0.0;g[k+16>>2]=y*K+x*J+w*I;g[k+20>>2]=y*H+x*G+w*F;g[k+24>>2]=y*E+x*D+w*C;g[k+28>>2]=0.0;g[k+32>>2]=s*K+q*J+o*I;g[k+36>>2]=s*H+q*G+o*F;g[k+40>>2]=s*E+q*D+o*C;g[k+44>>2]=0.0;g[k+48>>2]=B*v+A*u+z*t+(B*r+A*p+z*n);g[k+52>>2]=y*v+x*u+w*t+(y*r+x*p+w*n);g[k+56>>2]=s*v+q*u+o*t+(s*r+q*p+o*n);g[k+60>>2]=0.0;l=c[(c[b+44>>2]|0)+4>>2]|0;Yb[c[(c[l>>2]|0)+8>>2]&127](l,k,b+12|0,b+28|0);g[b+28>>2]=+g[b+28>>2]+m;g[b+32>>2]=+g[b+32>>2]+m;g[b+36>>2]=+g[b+36>>2]+m;g[b+12>>2]=+g[b+12>>2]-m;g[b+16>>2]=+g[b+16>>2]-m;g[b+20>>2]=+g[b+20>>2]-m;l=c[b+72>>2]|0;f=c[d+8>>2]|0;c[l+772>>2]=c[j+8>>2];c[l+776>>2]=f;Yb[c[(c[e>>2]|0)+64>>2]&127](e,b+8|0,b+12|0,b+28|0);e=c[h+4>>2]|0;do if(c[e+780>>2]|0){f=c[e+772>>2]|0;j=c[(c[h+8>>2]|0)+8>>2]|0;d=c[(c[h+12>>2]|0)+8>>2]|0;if((f|0)==(j|0)){Te(e,f+4|0,d+4|0);break}else{Te(e,d+4|0,j+4|0);break}}while(0);c[b+44>>2]=0;c[b+48>>2]=0;i=k;return}function Se(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;e=c[b+528>>2]|0;a:do if((e|0)>0){g=c[b+536>>2]|0;f=0;while(1){if((c[g+(f<<2)>>2]|0)==(d|0))break;f=f+1|0;if((f|0)>=(e|0))break a}if((f|0)!=(e|0))return}while(0);if((e|0)==(c[b+532>>2]|0)?(h=e|0?e<<1:1,(e|0)<(h|0)):0){if(!h)g=0;else{c[6324]=(c[6324]|0)+1;e=ic((h<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}g=e;e=c[b+528>>2]|0}if((e|0)>0){f=0;do{c[g+(f<<2)>>2]=c[(c[b+536>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(e|0))}f=c[b+536>>2]|0;if(f){if(a[b+540>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);e=c[b+528>>2]|0}c[b+536>>2]=0}a[b+540>>0]=1;c[b+536>>2]=g;c[b+532>>2]=h}c[(c[b+536>>2]|0)+(e<<2)>>2]=d;c[b+528>>2]=e+1;h=c[d+28>>2]|0;d=c[d+32>>2]|0;if((h|0)==(b|0)){e=c[b+284>>2]|0;if((e|0)==(c[b+288>>2]|0)?(j=e|0?e<<1:1,(e|0)<(j|0)):0){if(!j)g=0;else{c[6324]=(c[6324]|0)+1;e=ic((j<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}g=e;e=c[b+284>>2]|0}if((e|0)>0){f=0;do{c[g+(f<<2)>>2]=c[(c[b+292>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(e|0))}f=c[b+292>>2]|0;if(f){if(a[b+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);e=c[b+284>>2]|0}c[b+292>>2]=0}a[b+296>>0]=1;c[b+292>>2]=g;c[b+288>>2]=j}c[(c[b+292>>2]|0)+(e<<2)>>2]=d;c[b+284>>2]=e+1;c[b+276>>2]=e>>>31^1;return}else{e=c[d+284>>2]|0;if((e|0)==(c[d+288>>2]|0)?(i=e|0?e<<1:1,(e|0)<(i|0)):0){if(!i)g=0;else{c[6324]=(c[6324]|0)+1;e=ic((i<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}g=e;e=c[d+284>>2]|0}if((e|0)>0){f=0;do{c[g+(f<<2)>>2]=c[(c[d+292>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(e|0))}f=c[d+292>>2]|0;if(f){if(a[d+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);e=c[d+284>>2]|0}c[d+292>>2]=0}a[d+296>>0]=1;c[d+292>>2]=g;c[d+288>>2]=i}c[(c[d+292>>2]|0)+(e<<2)>>2]=h;c[d+284>>2]=e+1;c[d+276>>2]=e>>>31^1;return}}function Te(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0;e=c[a+780>>2]|0;if((e|0)<=0)return;do{j=e;e=e+-1|0;o=+g[a+4+(e*192|0)>>2];p=+g[a+4+(e*192|0)+4>>2];f=+g[a+4+(e*192|0)+8>>2];n=o*+g[b>>2]+p*+g[b+4>>2]+f*+g[b+8>>2]+ +g[b+48>>2];l=o*+g[b+16>>2]+p*+g[b+20>>2]+f*+g[b+24>>2]+ +g[b+52>>2];f=o*+g[b+32>>2]+p*+g[b+36>>2]+f*+g[b+40>>2]+ +g[b+56>>2];g[a+4+(e*192|0)+48>>2]=n;g[a+4+(e*192|0)+52>>2]=l;g[a+4+(e*192|0)+56>>2]=f;g[a+4+(e*192|0)+60>>2]=0.0;p=+g[a+4+(e*192|0)+16>>2];o=+g[a+4+(e*192|0)+20>>2];h=+g[a+4+(e*192|0)+24>>2];m=p*+g[d>>2]+o*+g[d+4>>2]+h*+g[d+8>>2]+ +g[d+48>>2];k=p*+g[d+16>>2]+o*+g[d+20>>2]+h*+g[d+24>>2]+ +g[d+52>>2];h=p*+g[d+32>>2]+o*+g[d+36>>2]+h*+g[d+40>>2]+ +g[d+56>>2];g[a+4+(e*192|0)+32>>2]=m;g[a+4+(e*192|0)+36>>2]=k;g[a+4+(e*192|0)+40>>2]=h;g[a+4+(e*192|0)+44>>2]=0.0;g[a+4+(e*192|0)+80>>2]=(n-m)*+g[a+4+(e*192|0)+64>>2]+(l-k)*+g[a+4+(e*192|0)+68>>2]+(f-h)*+g[a+4+(e*192|0)+72>>2];i=a+4+(e*192|0)+156|0;c[i>>2]=(c[i>>2]|0)+1}while((j|0)>1);e=c[a+780>>2]|0;if((e|0)<=0)return;j=e;do{i=j;j=j+-1|0;d=a+4+(j*192|0)|0;f=+g[a+4+(j*192|0)+80>>2];h=+g[a+784>>2];if(f<=h){n=+g[a+4+(j*192|0)+32>>2]-(+g[a+4+(j*192|0)+48>>2]-+g[a+4+(j*192|0)+64>>2]*f);o=+g[a+4+(j*192|0)+36>>2]-(+g[a+4+(j*192|0)+52>>2]-f*+g[a+4+(j*192|0)+68>>2]);p=+g[a+4+(j*192|0)+40>>2]-(+g[a+4+(j*192|0)+56>>2]-f*+g[a+4+(j*192|0)+72>>2]);if(n*n+o*o+p*p>h*h){b=e+-1|0;if((b|0)!=(j|0)){Lm(d|0,a+4+(b*192|0)|0,192)|0;c[a+4+(b*192|0)+156>>2]=0;c[a+4+(b*192|0)+116>>2]=0;c[a+4+(b*192|0)+116+4>>2]=0;c[a+4+(b*192|0)+116+8>>2]=0;c[a+4+(b*192|0)+116+12>>2]=0;c[a+4+(b*192|0)+116+16>>2]=0;e=c[a+780>>2]|0}e=e+-1|0;c[a+780>>2]=e}}else{b=e+-1|0;if((b|0)!=(j|0)){Lm(d|0,a+4+(b*192|0)|0,192)|0;c[a+4+(b*192|0)+156>>2]=0;c[a+4+(b*192|0)+116>>2]=0;c[a+4+(b*192|0)+116+4>>2]=0;c[a+4+(b*192|0)+116+8>>2]=0;c[a+4+(b*192|0)+116+12>>2]=0;c[a+4+(b*192|0)+116+16>>2]=0;e=c[a+780>>2]|0}e=e+-1|0;c[a+780>>2]=e}}while((i|0)>1);return}function Ue(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;c[b+16>>2]=c[a+4>>2];c[b+20>>2]=c[a+8>>2];c[b+24>>2]=c[a+12>>2];c[b+28>>2]=c[a+16>>2];c[b+32>>2]=c[a+20>>2];c[b+36>>2]=c[a+24>>2];c[b+40>>2]=c[a+28>>2];c[b+44>>2]=c[a+32>>2];c[b+48>>2]=c[a+36>>2];c[b+52>>2]=c[a+40>>2];c[b+56>>2]=c[a+44>>2];c[b+60>>2]=c[a+48>>2];c[b+64>>2]=c[a+52>>2];c[b+68>>2]=c[a+56>>2];c[b+72>>2]=c[a+60>>2];c[b+76>>2]=c[a+64>>2];c[b+80>>2]=c[a+68>>2];c[b+84>>2]=c[a+72>>2];c[b+88>>2]=c[a+76>>2];c[b+92>>2]=c[a+80>>2];c[b+96>>2]=c[a+84>>2];c[b+100>>2]=c[a+88>>2];c[b+104>>2]=c[a+92>>2];c[b+108>>2]=c[a+96>>2];c[b+112>>2]=c[a+100>>2];c[b+116>>2]=c[a+104>>2];c[b+120>>2]=c[a+108>>2];c[b+124>>2]=c[a+112>>2];c[b+128>>2]=c[a+116>>2];c[b+132>>2]=c[a+120>>2];c[b+136>>2]=c[a+124>>2];c[b+140>>2]=c[a+128>>2];c[b+144>>2]=c[a+132>>2];c[b+148>>2]=c[a+136>>2];c[b+152>>2]=c[a+140>>2];c[b+156>>2]=c[a+144>>2];c[b+160>>2]=c[a+148>>2];c[b+164>>2]=c[a+152>>2];c[b+168>>2]=c[a+156>>2];c[b+172>>2]=c[a+160>>2];c[b+176>>2]=c[a+164>>2];c[b+180>>2]=c[a+168>>2];c[b+184>>2]=c[a+172>>2];c[b+188>>2]=c[a+176>>2];c[b+232>>2]=c[a+180>>2];c[b+192>>2]=c[a+184>>2];c[b>>2]=0;c[b+4>>2]=Jb[c[(c[d>>2]|0)+28>>2]&31](d,c[a+192>>2]|0)|0;c[b+8>>2]=0;c[b+236>>2]=c[a+204>>2];c[b+240>>2]=c[a+208>>2];c[b+244>>2]=c[a+212>>2];c[b+248>>2]=c[a+216>>2];c[b+196>>2]=c[a+220>>2];c[b+200>>2]=c[a+224>>2];c[b+204>>2]=c[a+232>>2];c[b+208>>2]=c[a+240>>2];c[b+212>>2]=c[a+244>>2];c[b+216>>2]=c[a+228>>2];c[b+252>>2]=c[a+248>>2];e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;f=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b+12>>2]=f;if(!f){f=a+264|0;f=c[f>>2]|0;d=b+220|0;c[d>>2]=f;d=a+268|0;d=c[d>>2]|0;f=b+224|0;c[f>>2]=d;f=a+272|0;f=c[f>>2]|0;d=b+228|0;c[d>>2]=f;d=a+276|0;d=c[d>>2]|0;f=b+256|0;c[f>>2]=d;return 13154}mb[c[(c[d>>2]|0)+48>>2]&127](d,e);f=a+264|0;f=c[f>>2]|0;d=b+220|0;c[d>>2]=f;d=a+268|0;d=c[d>>2]|0;f=b+224|0;c[f>>2]=d;f=a+272|0;f=c[f>>2]|0;d=b+228|0;c[d>>2]=f;d=a+276|0;d=c[d>>2]|0;f=b+256|0;c[f>>2]=d;return 13154}function Ve(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;g=c[a+108>>2]|0;if(g|0)Ub[c[(c[g>>2]|0)+12>>2]&127](g,c[d+60>>2]|0,f);p=c[d+12>>2]|0;q=c[a+60>>2]|0;o=c[a+92>>2]|0;if(!(ob[c[(c[o>>2]|0)+56>>2]&127](o)|0)){o=c[a+92>>2]|0;Ub[c[(c[o>>2]|0)+16>>2]&127](o,q+((p&65535)<<6)|0,f)}n=e[a+56>>1]|0;m=c[a+60>>2]|0;b[m+54>>1]=(e[m+54>>1]|0)+65534;b[m+56>>1]=(e[m+56>>1]|0)+65534;b[m+58>>1]=(e[m+58>>1]|0)+65534;m=0;d=b[a+6>>1]|0;do{l=a+68+(m<<2)|0;o=c[l>>2]|0;g=e[q+((p&65535)<<6)+54+(m<<1)>>1]|0;b[o+(g<<2)>>1]=d;f=b[o+(g<<2)+6>>1]|0;if(!(f<<16>>16))f=o;else{k=(c[a+60>>2]|0)+((e[o+(g<<2)+2>>1]|0)<<6)+54+(m<<1)|0;j=o+(g<<2)|0;while(1){i=j;j=j+4|0;h=b[j>>1]|0;if((d&65535)<(h&65535))break;g=c[a+60>>2]|0;d=f&65535;if(!(h&1)){h=g+(d<<6)+48+(m<<1)|0;b[h>>1]=(b[h>>1]|0)+-1<<16>>16}else{h=g+(d<<6)+54+(m<<1)|0;b[h>>1]=(b[h>>1]|0)+-1<<16>>16}b[k>>1]=(b[k>>1]|0)+1<<16>>16;d=e[i>>1]|e[i+2>>1]<<16;f=e[j>>1]|e[j+2>>1]<<16;b[i>>1]=f;b[i+2>>1]=f>>>16;b[j>>1]=d;b[j+2>>1]=d>>>16;f=b[i+10>>1]|0;if(!(f<<16>>16))break;else d=d&65535}d=b[a+6>>1]|0;f=c[l>>2]|0}g=e[q+((p&65535)<<6)+48+(m<<1)>>1]|0;b[o+(g<<2)>>1]=d;h=f+(g<<2)|0;i=b[h+6>>1]|0;if(i<<16>>16){k=(c[a+60>>2]|0)+((e[f+(g<<2)+2>>1]|0)<<6)+48+(m<<1)|0;j=h;d=b[h>>1]|0;h=i;while(1){i=j;j=j+4|0;f=b[j>>1]|0;if((d&65535)<(f&65535))break;g=c[a+60>>2]|0;d=h&65535;if(!(f&1)){l=g+(d<<6)+48+(m<<1)|0;b[l>>1]=(b[l>>1]|0)+-1<<16>>16}else{l=g+(d<<6)+54+(m<<1)|0;b[l>>1]=(b[l>>1]|0)+-1<<16>>16}b[k>>1]=(b[k>>1]|0)+1<<16>>16;d=e[i>>1]|e[i+2>>1]<<16;h=e[j>>1]|e[j+2>>1]<<16;b[i>>1]=h;b[i+2>>1]=h>>>16;b[j>>1]=d;b[j+2>>1]=d>>>16;h=b[i+10>>1]|0;if(!(h<<16>>16))break;else d=d&65535}d=b[a+6>>1]|0}b[o+((n<<1)+-1<<2)+2>>1]=0;b[o+((n<<1)+-1<<2)>>1]=d;m=m+1|0}while((m|0)!=3);b[(c[a+60>>2]|0)+((p&65535)<<6)+48>>1]=b[a+64>>1]|0;b[a+64>>1]=p;b[a+56>>1]=(b[a+56>>1]|0)+-1<<16>>16;return}function We(b,d){b=b|0;d=d|0;var e=0,f=0;e=c[b>>2]|0;do if((e|0)>3)if(!(a[d>>0]&8)){c[b>>2]=e+-1;f=b+4+(e+-1<<4)|0;c[b+52>>2]=c[f>>2];c[b+52+4>>2]=c[f+4>>2];c[b+52+8>>2]=c[f+8>>2];c[b+52+12>>2]=c[f+12>>2];f=b+84+(e+-1<<4)|0;c[b+132>>2]=c[f>>2];c[b+132+4>>2]=c[f+4>>2];c[b+132+8>>2]=c[f+8>>2];c[b+132+12>>2]=c[f+12>>2];f=b+164+(e+-1<<4)|0;c[b+212>>2]=c[f>>2];c[b+212+4>>2]=c[f+4>>2];c[b+212+8>>2]=c[f+8>>2];c[b+212+12>>2]=c[f+12>>2];e=e+-1|0;f=6}else f=6;else{if((e|0)==3){e=3;f=6;break}if((e|0)>1){e=2;f=10;break}if((e|0)==1){e=1;break}else return}while(0);if((f|0)==6)if(!(a[d>>0]&4)){e=e+-1|0;c[b>>2]=e;c[b+36>>2]=c[b+4+(e<<4)>>2];c[b+36+4>>2]=c[b+4+(e<<4)+4>>2];c[b+36+8>>2]=c[b+4+(e<<4)+8>>2];c[b+36+12>>2]=c[b+4+(e<<4)+12>>2];c[b+116>>2]=c[b+84+(e<<4)>>2];c[b+116+4>>2]=c[b+84+(e<<4)+4>>2];c[b+116+8>>2]=c[b+84+(e<<4)+8>>2];c[b+116+12>>2]=c[b+84+(e<<4)+12>>2];c[b+196>>2]=c[b+164+(e<<4)>>2];c[b+196+4>>2]=c[b+164+(e<<4)+4>>2];c[b+196+8>>2]=c[b+164+(e<<4)+8>>2];c[b+196+12>>2]=c[b+164+(e<<4)+12>>2];f=10}else f=10;if((f|0)==10)if(!(a[d>>0]&2)){e=e+-1|0;c[b>>2]=e;c[b+20>>2]=c[b+4+(e<<4)>>2];c[b+20+4>>2]=c[b+4+(e<<4)+4>>2];c[b+20+8>>2]=c[b+4+(e<<4)+8>>2];c[b+20+12>>2]=c[b+4+(e<<4)+12>>2];c[b+100>>2]=c[b+84+(e<<4)>>2];c[b+100+4>>2]=c[b+84+(e<<4)+4>>2];c[b+100+8>>2]=c[b+84+(e<<4)+8>>2];c[b+100+12>>2]=c[b+84+(e<<4)+12>>2];c[b+180>>2]=c[b+164+(e<<4)>>2];c[b+180+4>>2]=c[b+164+(e<<4)+4>>2];c[b+180+8>>2]=c[b+164+(e<<4)+8>>2];c[b+180+12>>2]=c[b+164+(e<<4)+12>>2]}if(a[d>>0]&1)return;f=e+-1|0;c[b>>2]=f;c[b+4>>2]=c[b+4+(f<<4)>>2];c[b+4+4>>2]=c[b+4+(f<<4)+4>>2];c[b+4+8>>2]=c[b+4+(f<<4)+8>>2];c[b+4+12>>2]=c[b+4+(f<<4)+12>>2];c[b+84>>2]=c[b+84+(f<<4)>>2];c[b+84+4>>2]=c[b+84+(f<<4)+4>>2];c[b+84+8>>2]=c[b+84+(f<<4)+8>>2];c[b+84+12>>2]=c[b+84+(f<<4)+12>>2];c[b+164>>2]=c[b+164+(f<<4)>>2];c[b+164+4>>2]=c[b+164+(f<<4)+4>>2];c[b+164+8>>2]=c[b+164+(f<<4)+8>>2];c[b+164+12>>2]=c[b+164+(f<<4)+12>>2];return}function Xe(b){b=b|0;var d=0,e=0;c[b>>2]=6036;if(a[b+20>>0]|0){d=c[b+16>>2]|0;e=c[d+16>>2]|0;if(e){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);d=c[b+16>>2]|0}if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}}if(a[b+12>>0]|0){d=c[b+8>>2]|0;e=c[d+16>>2]|0;if(e){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);d=c[b+8>>2]|0}if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}}d=c[b+32>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+32>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+36>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+36>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+40>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+40>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+44>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+44>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+48>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+48>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+52>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+52>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+56>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+56>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+60>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+60>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+76>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+76>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+80>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+80>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+72>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+72>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+88>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+88>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+84>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+84>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+24>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+28>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+28>>2]|0;if(!d)return;c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);return}function Ye(a,b,f){a=a|0;b=b|0;f=f|0;var j=0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=i;i=i+32|0;c[a+60>>2]=(c[a+60>>2]|0)+1;o=c[a+4>>2]|0;Ib[c[(c[o>>2]|0)+16>>2]&3](o,t+28|0,t+24|0,t+20|0,t+16|0,t+12|0,t+8|0,t+4|0,t,b);o=(c[t+12>>2]|0)+(S(c[t+8>>2]|0,f)|0)|0;r=c[a+4>>2]|0;n=c[t>>2]|0;switch(n|0){case 3:{j=e[o+4>>1]|0;break}case 2:{j=c[o+8>>2]|0;break}default:j=d[o+2>>0]|0}s=(c[t+20>>2]|0)==0;p=c[t+28>>2]|0;q=c[t+16>>2]|0;j=p+(S(q,j)|0)|0;if(s){l=+g[j+8>>2]*+g[r+12>>2];m=+g[j+4>>2]*+g[r+8>>2];k=+g[j>>2]*+g[r+4>>2]}else{l=+h[j+16>>3]*+g[r+12>>2];m=+h[j+8>>3]*+g[r+8>>2];k=+h[j>>3]*+g[r+4>>2]}g[a+44>>2]=k;g[a+48>>2]=m;g[a+52>>2]=l;g[a+56>>2]=0.0;switch(n|0){case 3:{j=e[o+2>>1]|0;break}case 2:{j=c[o+4>>2]|0;break}default:j=d[o+1>>0]|0}j=p+(S(q,j)|0)|0;if(s){l=+g[j+8>>2]*+g[r+12>>2];m=+g[j+4>>2]*+g[r+8>>2];k=+g[j>>2]*+g[r+4>>2]}else{l=+h[j+16>>3]*+g[r+12>>2];m=+h[j+8>>3]*+g[r+8>>2];k=+h[j>>3]*+g[r+4>>2]}g[a+28>>2]=k;g[a+32>>2]=m;g[a+36>>2]=l;g[a+40>>2]=0.0;switch(n|0){case 3:{j=e[o>>1]|0;break}case 2:{j=c[o>>2]|0;break}default:j=d[o>>0]|0}j=p+(S(q,j)|0)|0;if(s){m=+g[j+8>>2]*+g[r+12>>2];l=+g[j+4>>2]*+g[r+8>>2];k=+g[j>>2]*+g[r+4>>2];r=a+12|0;g[r>>2]=k;r=a+16|0;g[r>>2]=l;r=a+20|0;g[r>>2]=m;r=a+24|0;g[r>>2]=0.0;r=a+8|0;r=c[r>>2]|0;q=c[r>>2]|0;q=q+8|0;q=c[q>>2]|0;s=a+12|0;Yb[q&127](r,s,b,f);s=c[a+4>>2]|0;r=c[s>>2]|0;r=r+24|0;r=c[r>>2]|0;mb[r&127](s,b);i=t;return}else{m=+h[j+16>>3]*+g[r+12>>2];l=+h[j+8>>3]*+g[r+8>>2];k=+h[j>>3]*+g[r+4>>2];r=a+12|0;g[r>>2]=k;r=a+16|0;g[r>>2]=l;r=a+20|0;g[r>>2]=m;r=a+24|0;g[r>>2]=0.0;r=a+8|0;r=c[r>>2]|0;q=c[r>>2]|0;q=q+8|0;q=c[q>>2]|0;s=a+12|0;Yb[q&127](r,s,b,f);s=c[a+4>>2]|0;r=c[s>>2]|0;r=r+24|0;r=c[r>>2]|0;mb[r&127](s,b);i=t;return}}function Ze(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,h=0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0.0;if(!(c[a>>2]|0)){c[a>>2]=d;c[d+32>>2]=0;return}f=c[b+40>>2]|0;if(!f)n=b;else{e=+g[d>>2]+ +g[d+16>>2];i=+g[d+4>>2]+ +g[d+20>>2];j=+g[d+8>>2]+ +g[d+24>>2];do{p=c[b+36>>2]|0;m=+F(+(e-(+g[p>>2]+ +g[p+16>>2])))+ +F(+(i-(+g[p+4>>2]+ +g[p+20>>2])))+ +F(+(j-(+g[p+8>>2]+ +g[p+24>>2])));b=c[b+36+((!(m<+F(+(e-(+g[f>>2]+ +g[f+16>>2])))+ +F(+(i-(+g[f+4>>2]+ +g[f+20>>2])))+ +F(+(j-(+g[f+8>>2]+ +g[f+24>>2]))))&1)<<2)>>2]|0;f=c[b+40>>2]|0}while((f|0)!=0);n=b}o=n+32|0;p=c[o>>2]|0;b=c[a+4>>2]|0;if(!b){c[6324]=(c[6324]|0)+1;b=ic(63)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}f=b;h=f+44|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(h|0))}else c[a+4>>2]=0;c[b+32>>2]=p;c[b+36>>2]=0;f=b+40|0;c[f>>2]=0;q=+g[d>>2];m=+g[n>>2];m=q<m?q:m;g[b>>2]=m;q=+g[d+16>>2];j=+g[n+16>>2];j=q>j?q:j;g[b+16>>2]=j;q=+g[d+4>>2];l=+g[n+4>>2];l=q<l?q:l;g[b+4>>2]=l;q=+g[d+20>>2];i=+g[n+20>>2];i=q>i?q:i;g[b+20>>2]=i;q=+g[d+8>>2];k=+g[n+8>>2];k=q<k?q:k;g[b+8>>2]=k;q=+g[d+24>>2];e=+g[n+24>>2];e=q>e?q:e;g[b+24>>2]=e;if(!p){c[b+36>>2]=n;c[o>>2]=b;c[f>>2]=d;c[d+32>>2]=b;c[a>>2]=b;return}c[p+36+(((c[(c[o>>2]|0)+40>>2]|0)==(n|0)&1)<<2)>>2]=b;c[b+36>>2]=n;c[o>>2]=b;c[f>>2]=d;c[d+32>>2]=b;f=p;while(1){b=f+4|0;if(((((+g[f>>2]<=m?+g[b>>2]<=l:0)?+g[f+8>>2]<=k:0)?+g[f+16>>2]>=j:0)?+g[f+20>>2]>=i:0)?+g[f+24>>2]>=e:0){b=21;break}a=c[f+36>>2]|0;d=c[f+40>>2]|0;q=+g[a>>2];m=+g[d>>2];m=q<m?q:m;g[f>>2]=m;q=+g[a+16>>2];j=+g[d+16>>2];j=q>j?q:j;g[f+16>>2]=j;q=+g[a+4>>2];l=+g[d+4>>2];l=q<l?q:l;g[b>>2]=l;q=+g[a+20>>2];i=+g[d+20>>2];i=q>i?q:i;g[f+20>>2]=i;q=+g[a+8>>2];k=+g[d+8>>2];k=q<k?q:k;g[f+8>>2]=k;q=+g[a+24>>2];e=+g[d+24>>2];e=q>e?q:e;g[f+24>>2]=e;f=c[f+32>>2]|0;if(!f){b=21;break}}if((b|0)==21)return}function _e(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var i=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0;q=c[b+18504>>2]|0;if(!q){c[b>>2]=5;q=0;return q|0}i=c[q+48>>2]|0;if(i|0)c[i+44>>2]=c[q+44>>2];i=c[q+44>>2]|0;if(i|0)c[i+48>>2]=c[q+48>>2];if((c[b+18504>>2]|0)==(q|0))c[b+18504>>2]=c[q+48>>2];c[b+18508>>2]=(c[b+18508>>2]|0)+-1;c[q+44>>2]=0;c[q+48>>2]=c[b+18496>>2];i=c[b+18496>>2]|0;if(i|0)c[i+44>>2]=q;c[b+18496>>2]=q;c[b+18500>>2]=(c[b+18500>>2]|0)+1;a[q+55>>0]=0;c[q+20>>2]=d;c[q+24>>2]=e;c[q+28>>2]=f;m=+g[d+16>>2];j=+g[e+16>>2]-m;n=+g[d+20>>2];k=+g[e+20>>2]-n;o=+g[d+24>>2];l=+g[e+24>>2]-o;m=+g[f+16>>2]-m;n=+g[f+20>>2]-n;o=+g[f+24>>2]-o;g[q>>2]=k*o-l*n;g[q+4>>2]=l*m-j*o;g[q+8>>2]=j*n-k*m;g[q+12>>2]=0.0;p=+G(+((k*o-l*n)*(k*o-l*n)+(l*m-j*o)*(l*m-j*o)+(j*n-k*m)*(j*n-k*m)));do if(p>9.999999747378752e-005){if((!(Jk(k*o-l*n,l*m-j*o,j*n-k*m,+g[d+16>>2],+g[d+20>>2],+g[d+24>>2],+g[e+16>>2],+g[e+20>>2],+g[e+24>>2],q+16|0)|0)?!(Jk(+g[q>>2],+g[q+4>>2],+g[q+8>>2],+g[e+16>>2],+g[e+20>>2],+g[e+24>>2],+g[f+16>>2],+g[f+20>>2],+g[f+24>>2],q+16|0)|0):0)?!(Jk(+g[q>>2],+g[q+4>>2],+g[q+8>>2],+g[f+16>>2],+g[f+20>>2],+g[f+24>>2],+g[d+16>>2],+g[d+20>>2],+g[d+24>>2],q+16|0)|0):0)g[q+16>>2]=(+g[d+16>>2]*+g[q>>2]+ +g[d+20>>2]*+g[q+4>>2]+ +g[d+24>>2]*+g[q+8>>2])/p;g[q>>2]=1.0/p*+g[q>>2];g[q+4>>2]=1.0/p*+g[q+4>>2];g[q+8>>2]=1.0/p*+g[q+8>>2];if(h)return q|0;if(!(+g[q+16>>2]>=-9.999999747378752e-006)){c[b>>2]=3;break}else return q|0}else c[b>>2]=2;while(0);i=c[q+48>>2]|0;if(i|0)c[i+44>>2]=c[q+44>>2];i=c[q+44>>2]|0;if(i|0)c[i+48>>2]=c[q+48>>2];if((c[b+18496>>2]|0)==(q|0))c[b+18496>>2]=c[q+48>>2];c[b+18500>>2]=(c[b+18500>>2]|0)+-1;c[q+44>>2]=0;c[q+48>>2]=c[b+18504>>2];i=c[b+18504>>2]|0;if(i|0)c[i+44>>2]=q;c[b+18504>>2]=q;c[b+18508>>2]=(c[b+18508>>2]|0)+1;q=0;return q|0}function $e(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;c[6324]=(c[6324]|0)+1;f=ic(479)|0;if(!f)s=0;else{c[(f+4+15&-16)+-4>>2]=f;s=f+4+15&-16}Qd(s,b,d,e);c[s>>2]=3568;a[s+340>>0]=1;c[s+336>>2]=0;c[s+328>>2]=0;c[s+332>>2]=0;k=s+352|0;g[k>>2]=1.2000000476837158;l=s+356|0;g[l>>2]=0.0;m=s+360|0;g[m>>2]=0.0;g[s+364>>2]=1.0e3;n=s+368|0;o=s+396|0;c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;c[n+20>>2]=0;c[n+24>>2]=0;c[o>>2]=-1054867456;p=s+400|0;c[p>>2]=0;q=s+404|0;g[q>>2]=0.0;a[s+424>>0]=1;r=s+420|0;c[r>>2]=0;j=s+412|0;c[j>>2]=0;c[s+416>>2]=0;e=s+452|0;c[e>>2]=h;i=s+456|0;a[i>>0]=0;if(!h){c[6324]=(c[6324]|0)+1;f=ic(59)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}g[f+12>>2]=1.0;c[f+8>>2]=0;c[f+4>>2]=5;c[f>>2]=3808;a[f+36>>0]=1;c[f+32>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;a[f+16>>0]=1;c[e>>2]=f;a[i>>0]=1}c[s+344>>2]=4302;a[s+348>>0]=1;a[s+349>>0]=0;a[s+350>>0]=0;c[s+384>>2]=d;c[s+388>>2]=b;h=s+408|0;yi(h);i=c[j>>2]|0;if((i|0)>0)e=0;else{r=s+428|0;g[r>>2]=.25;r=s+432|0;c[r>>2]=0;r=s+436|0;c[r>>2]=0;r=s+444|0;c[r>>2]=1;r=s+448|0;c[r>>2]=1;g[k>>2]=1.2000000476837158;g[l>>2]=0.0;g[m>>2]=0.0;r=s+392|0;c[r>>2]=0;c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[o>>2]=-1054867456;c[p>>2]=0;g[q>>2]=0.0;yi(h);return s|0}do{d=(c[r>>2]|0)+(e<<2)|0;f=c[d>>2]|0;c[d>>2]=0;if(f|0)do{d=f;f=c[f+280>>2]|0;Rc(d)}while((f|0)!=0);e=e+1|0}while((e|0)!=(i|0));r=s+428|0;g[r>>2]=.25;r=s+432|0;c[r>>2]=0;r=s+436|0;c[r>>2]=0;r=s+444|0;c[r>>2]=1;r=s+448|0;c[r>>2]=1;g[k>>2]=1.2000000476837158;g[l>>2]=0.0;g[m>>2]=0.0;r=s+392|0;c[r>>2]=0;c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[o>>2]=-1054867456;c[p>>2]=0;g[q>>2]=0.0;yi(h);return s|0}function af(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,i=0,j=0,k=0,l=0,m=0;h=c[d+8>>2]|0;if((h|0)>0){i=c[d+16>>2]|0;f=0;e=0;do{j=c[i+(f<<2)>>2]|0;if(!(c[j+204>>2]&3)){c[j+208>>2]=e;e=e+1|0}c[j+212>>2]=-1;g[j+264>>2]=1.0;f=f+1|0}while((f|0)!=(h|0));j=e}else j=0;i=c[b+8>>2]|0;if((i|0)<(j|0)){if((c[b+12>>2]|0)<(j|0)){if(!j){e=0;h=i}else{c[6324]=(c[6324]|0)+1;e=ic((j<<3|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}h=c[b+8>>2]|0}if((h|0)>0){f=0;do{m=(c[b+16>>2]|0)+(f<<3)|0;k=c[m+4>>2]|0;l=e+(f<<3)|0;c[l>>2]=c[m>>2];c[l+4>>2]=k;f=f+1|0}while((f|0)!=(h|0))}f=c[b+16>>2]|0;if(f|0){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=e;c[b+12>>2]=j;f=b+16|0}else f=b+16|0;e=i;do{m=(c[f>>2]|0)+(e<<3)|0;c[m>>2]=0;c[m+4>>2]=0;e=e+1|0}while((e|0)!=(j|0))}c[b+8>>2]=j;if((j|0)>0){f=c[b+16>>2]|0;e=0;do{c[f+(e<<3)>>2]=e;c[f+(e<<3)+4>>2]=1;e=e+1|0}while((e|0)!=(j|0))}e=c[d+68>>2]|0;e=ob[c[(c[e>>2]|0)+36>>2]&127](e)|0;l=ob[c[(c[e>>2]|0)+36>>2]&127](e)|0;if(!l)return;k=ob[c[(c[e>>2]|0)+20>>2]&127](e)|0;if((l|0)<=0)return;d=0;do{e=c[c[k+(d<<4)>>2]>>2]|0;f=c[c[k+(d<<4)+4>>2]>>2]|0;if((e|0?(f|0?(c[e+204>>2]&7|0)==0:0):0)?(c[f+204>>2]&7|0)==0:0){i=c[e+208>>2]|0;e=c[f+208>>2]|0;j=c[b+16>>2]|0;f=c[j+(i<<3)>>2]|0;if((f|0)!=(i|0)){h=j+(i<<3)|0;do{i=j+(f<<3)|0;c[h>>2]=c[i>>2];i=c[i>>2]|0;h=j+(i<<3)|0;f=c[h>>2]|0}while((i|0)!=(f|0))}f=c[j+(e<<3)>>2]|0;if((f|0)!=(e|0)){h=j+(e<<3)|0;do{e=j+(f<<3)|0;c[h>>2]=c[e>>2];e=c[e>>2]|0;h=j+(e<<3)|0;f=c[h>>2]|0}while((e|0)!=(f|0))}if((i|0)!=(e|0)){c[j+(i<<3)>>2]=e;m=j+(e<<3)+4|0;c[m>>2]=(c[m>>2]|0)+(c[j+(i<<3)+4>>2]|0)}}d=d+1|0}while((d|0)!=(l|0));return}function bf(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0;a:do if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)==(e|0)?(c[d+28>>2]|0)!=1:0)c[d+28>>2]=f}else{if((b|0)!=(c[d>>2]|0)){i=c[b+12>>2]|0;Kn(b+16|0,d,e,f,g);if((i|0)<=1)break;h=c[b+8>>2]|0;if((h&2|0)==0?(c[d+36>>2]|0)!=1:0){if(!(h&1)){h=b+24|0;while(1){if(a[d+54>>0]|0)break a;if((c[d+36>>2]|0)==1)break a;Kn(h,d,e,f,g);h=h+8|0;if(h>>>0>=(b+16+(i<<3)|0)>>>0)break a}}h=b+24|0;while(1){if(a[d+54>>0]|0)break a;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==1:0)break a;Kn(h,d,e,f,g);h=h+8|0;if(h>>>0>=(b+16+(i<<3)|0)>>>0)break a}}h=b+24|0;while(1){if(a[d+54>>0]|0)break a;Kn(h,d,e,f,g);h=h+8|0;if(h>>>0>=(b+16+(i<<3)|0)>>>0)break a}}if((c[d+16>>2]|0)!=(e|0)?(c[d+20>>2]|0)!=(e|0):0){c[d+32>>2]=f;if((c[d+44>>2]|0)==4)break;j=b+16+(c[b+12>>2]<<3)|0;h=0;i=b+16|0;k=0;b:while(1){if(i>>>0>=j>>>0){f=20;break}a[d+52>>0]=0;a[d+53>>0]=0;wn(i,d,e,e,1,g);if(a[d+54>>0]|0){f=20;break}do if(a[d+53>>0]|0){if(!(a[d+52>>0]|0))if(!(c[b+8>>2]&1)){h=1;f=20;break b}else{h=1;f=k;break}if((c[d+24>>2]|0)==1){f=25;break b}if(!(c[b+8>>2]&2)){f=25;break b}else{h=1;f=1}}else f=k;while(0);i=i+8|0;k=f}do if((f|0)==20){if((!k?(c[d+20>>2]=e,c[d+40>>2]=(c[d+40>>2]|0)+1,(c[d+36>>2]|0)==1):0)?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(h){f=25;break}else{h=4;break}}if(h)f=25;else h=4}while(0);if((f|0)==25)h=3;c[d+44>>2]=h;break}if((f|0)==1)c[d+32>>2]=1}while(0);return}function cf(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var i=0,j=0;c[6324]=(c[6324]|0)+1;i=ic(1147)|0;if(!i)i=0;else{c[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}c[i+4>>2]=7;c[i+8>>2]=-1;c[i+12>>2]=-1;g[i+16>>2]=34028234663852886.0e22;a[i+20>>0]=1;a[i+21>>0]=0;c[i+24>>2]=-1;j=i+28|0;c[j>>2]=b;b=i+32|0;c[b>>2]=d;g[i+36>>2]=0.0;g[i+40>>2]=.30000001192092896;c[i+44>>2]=0;c[i>>2]=4624;a[i+48>>0]=0;d=i+52|0;c[d>>2]=c[e>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];d=i+68|0;c[d>>2]=c[e+16>>2];c[d+4>>2]=c[e+16+4>>2];c[d+8>>2]=c[e+16+8>>2];c[d+12>>2]=c[e+16+12>>2];d=i+84|0;c[d>>2]=c[e+32>>2];c[d+4>>2]=c[e+32+4>>2];c[d+8>>2]=c[e+32+8>>2];c[d+12>>2]=c[e+32+12>>2];d=i+100|0;c[d>>2]=c[e+48>>2];c[d+4>>2]=c[e+48+4>>2];c[d+8>>2]=c[e+48+8>>2];c[d+12>>2]=c[e+48+12>>2];e=i+116|0;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];e=i+132|0;c[e>>2]=c[f+16>>2];c[e+4>>2]=c[f+16+4>>2];c[e+8>>2]=c[f+16+8>>2];c[e+12>>2]=c[f+16+12>>2];e=i+148|0;c[e>>2]=c[f+32>>2];c[e+4>>2]=c[f+32+4>>2];c[e+8>>2]=c[f+32+8>>2];c[e+12>>2]=c[f+32+12>>2];e=i+164|0;c[e>>2]=c[f+48>>2];c[e+4>>2]=c[f+48+4>>2];c[e+8>>2]=c[f+48+8>>2];c[e+12>>2]=c[f+48+12>>2];a[i+180>>0]=h&1;g[i+184>>2]=1.0;g[i+188>>2]=-1.0;g[i+192>>2]=0.0;g[i+196>>2]=0.0;g[i+200>>2]=1.0;g[i+204>>2]=.699999988079071;g[i+208>>2]=0.0;g[i+212>>2]=0.0;g[i+216>>2]=1.0;g[i+220>>2]=.699999988079071;g[i+224>>2]=0.0;g[i+228>>2]=0.0;g[i+264>>2]=1.0;g[i+268>>2]=.699999988079071;g[i+272>>2]=1.0;g[i+276>>2]=0.0;g[i+280>>2]=1.0;g[i+284>>2]=.699999988079071;g[i+288>>2]=1.0;g[i+292>>2]=0.0;g[i+232>>2]=1.0;g[i+236>>2]=.699999988079071;g[i+240>>2]=1.0;g[i+244>>2]=0.0;g[i+248>>2]=1.0;g[i+252>>2]=.699999988079071;g[i+256>>2]=1.0;g[i+260>>2]=0.0;a[i+1096>>0]=0;h=i+1100|0;g[i+1116>>2]=0.0;g[i+1120>>2]=0.0;g[i+1124>>2]=0.0;c[i+300>>2]=0;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;a[h+12>>0]=0;a[i+49>>0]=1;Tc(i,(c[j>>2]|0)+4|0,(c[b>>2]|0)+4|0);return i|0}function df(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;c[6040]=(c[6040]|0)+1;g=c[d+24>>2]|0;if(!g){g=c[e+4>>2]|0;if(!((b[f+6>>1]&(g&65535))<<16>>16)){d=0;return d|0}if(!((b[f+4>>1]&(g>>>16&65535))<<16>>16)){d=0;return d|0}}else if(!(yb[c[(c[g>>2]|0)+8>>2]&63](g,e,f)|0)){d=0;return d|0}l=(c[e+12>>2]|0)>(c[f+12>>2]|0);m=l?f:e;h=c[m+12>>2]|0;l=l?e:f;e=c[l+12>>2]|0;j=((e<<16|h)+~((e<<16|h)<<15)>>10^(e<<16|h)+~((e<<16|h)<<15))*9|0;j=(j>>6^j)+~((j>>6^j)<<11)>>16^(j>>6^j)+~((j>>6^j)<<11);k=c[d+12>>2]|0;g=c[(c[d+40>>2]|0)+((j&k+-1)<<2)>>2]|0;a:do if((g|0)!=-1){f=c[d+16>>2]|0;while(1){if((c[(c[f+(g<<4)>>2]|0)+12>>2]|0)==(h|0)?(c[(c[f+(g<<4)+4>>2]|0)+12>>2]|0)==(e|0):0)break;g=c[(c[d+60>>2]|0)+(g<<2)>>2]|0;if((g|0)==-1)break a}g=f+(g<<4)|0;if(g|0){d=g;return d|0}}while(0);i=c[d+8>>2]|0;if((i|0)==(k|0)){h=k|0?k<<1:1;if((k|0)<(h|0)){if(!h){g=0;e=k}else{c[6324]=(c[6324]|0)+1;g=ic((h<<4|3)+16|0)|0;if(!g)g=0;else{c[(g+4+15&-16)+-4>>2]=g;g=g+4+15&-16}e=c[d+8>>2]|0}if((e|0)>0){f=0;do{n=c[d+16>>2]|0;c[g+(f<<4)>>2]=c[n+(f<<4)>>2];c[g+(f<<4)+4>>2]=c[n+(f<<4)+4>>2];c[g+(f<<4)+8>>2]=c[n+(f<<4)+8>>2];c[g+(f<<4)+12>>2]=c[n+(f<<4)+12>>2];f=f+1|0}while((f|0)!=(e|0))}f=c[d+16>>2]|0;if(f){if(a[d+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);e=c[d+8>>2]|0}c[d+16>>2]=0}a[d+20>>0]=1;c[d+16>>2]=g;c[d+12>>2]=h;g=h}else{e=k;g=k}}else{e=i;g=k}c[d+8>>2]=e+1;f=c[d+16>>2]|0;e=c[d+68>>2]|0;if(e){yb[c[(c[e>>2]|0)+8>>2]&63](e,m,l)|0;g=c[d+12>>2]|0}if((k|0)<(g|0)){tf(d);g=(c[d+12>>2]|0)+-1&j}else g=j&k+-1;n=(c[m+12>>2]|0)<(c[l+12>>2]|0);c[f+(i<<4)>>2]=n?m:l;c[f+(i<<4)+4>>2]=n?l:m;c[f+(i<<4)+8>>2]=0;c[f+(i<<4)+8+4>>2]=0;n=(c[d+40>>2]|0)+(g<<2)|0;c[(c[d+60>>2]|0)+(i<<2)>>2]=c[n>>2];c[n>>2]=i;n=f+(i<<4)|0;return n|0}function ef(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0;u=+g[b>>2];t=+g[b+4>>2];s=+g[b+8>>2];r=1.0/+G(+(u*u+t*t+s*s));y=+g[d>>2];x=+g[d+4>>2];w=+g[d+8>>2];v=1.0/+G(+(y*y+x*x+w*w));B=s*r*x*v-t*r*w*v;A=u*r*w*v-s*r*y*v;z=t*r*y*v-u*r*x*v;d=c[a+28>>2]|0;e=+g[d+4>>2];h=+g[d+20>>2];j=+g[d+36>>2];f=+g[d+8>>2];i=+g[d+24>>2];k=+g[d+40>>2];l=+g[d+12>>2];n=+g[d+28>>2];p=+g[d+44>>2];m=-+g[d+52>>2];o=-+g[d+56>>2];q=-+g[d+60>>2];g[a+48>>2]=z*j+(e*B+h*A);g[a+52>>2]=e*y*v+x*v*h+w*v*j;g[a+56>>2]=u*r*e+t*r*h+s*r*j;g[a+60>>2]=0.0;g[a+64>>2]=B*f+A*i+z*k;g[a+68>>2]=y*v*f+x*v*i+w*v*k;g[a+72>>2]=u*r*f+t*r*i+s*r*k;g[a+76>>2]=0.0;g[a+80>>2]=B*l+A*n+z*p;g[a+84>>2]=y*v*l+x*v*n+w*v*p;g[a+88>>2]=u*r*l+t*r*n+s*r*p;g[a+92>>2]=0.0;g[a+96>>2]=e*0.0+h*0.0+j*0.0+(e*m+h*o+j*q);g[a+100>>2]=f*0.0+i*0.0+k*0.0+(f*m+i*o+k*q);g[a+104>>2]=l*0.0+n*0.0+p*0.0+(l*m+n*o+p*q);g[a+108>>2]=0.0;d=c[a+32>>2]|0;q=+g[d+4>>2];p=+g[d+20>>2];o=+g[d+36>>2];n=+g[d+8>>2];m=+g[d+24>>2];l=+g[d+40>>2];k=+g[d+12>>2];i=+g[d+28>>2];f=+g[d+44>>2];j=-+g[d+52>>2];h=-+g[d+56>>2];e=-+g[d+60>>2];g[a+112>>2]=B*q+A*p+z*o;g[a+116>>2]=y*v*q+x*v*p+w*v*o;g[a+120>>2]=u*r*q+t*r*p+s*r*o;g[a+124>>2]=0.0;g[a+128>>2]=B*n+A*m+z*l;g[a+132>>2]=y*v*n+x*v*m+w*v*l;g[a+136>>2]=u*r*n+t*r*m+s*r*l;g[a+140>>2]=0.0;g[a+144>>2]=B*k+A*i+z*f;g[a+148>>2]=y*v*k+x*v*i+w*v*f;g[a+152>>2]=u*r*k+t*r*i+s*r*f;g[a+156>>2]=0.0;g[a+160>>2]=q*0.0+p*0.0+o*0.0+(q*j+p*h+o*e);g[a+164>>2]=n*0.0+m*0.0+l*0.0+(n*j+m*h+l*e);g[a+168>>2]=k*0.0+i*0.0+f*0.0+(k*j+i*h+f*e);g[a+172>>2]=0.0;ed(a,(c[a+28>>2]|0)+4|0,(c[a+32>>2]|0)+4|0);return}function ff(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0.0,s=0,t=0.0,u=0.0,v=0.0,w=0,x=0;w=i;i=i+32|0;q=c[a+12>>2]|0;r=+g[q+(((e+d|0)/2|0)*24|0)>>2];t=+g[q+(((e+d|0)/2|0)*24|0)+4>>2];u=+g[q+(((e+d|0)/2|0)*24|0)+8>>2];v=+g[q+(((e+d|0)/2|0)*24|0)+16>>2];s=c[q+(((e+d|0)/2|0)*24|0)+20>>2]|0;f=e;h=d;while(1){m=+g[b>>2];n=+g[b+4>>2];o=+g[b+8>>2];p=(r-m)*(r-m)+(t-n)*(t-n)+(u-o)*(u-o);a:while(1){j=+g[q+(h*24|0)+16>>2];do if(j!=v){if(!(j<v))break a}else{j=+g[q+(h*24|0)>>2]-m;k=+g[q+(h*24|0)+4>>2]-n;l=+g[q+(h*24|0)+8>>2]-o;if(j*j+k*k+l*l!=p)if(j*j+k*k+l*l<p)break;else break a;else if((c[q+(h*24|0)+20>>2]|0)<(s|0))break;else break a}while(0);h=h+1|0}b:while(1){j=+g[q+(f*24|0)+16>>2];do if(v!=j){if(!(v<j))break b}else{j=+g[q+(f*24|0)>>2]-m;k=+g[q+(f*24|0)+4>>2]-n;l=+g[q+(f*24|0)+8>>2]-o;if(p!=j*j+k*k+l*l)if(p<j*j+k*k+l*l)break;else break b;else if((s|0)<(c[q+(f*24|0)+20>>2]|0))break;else break b}while(0);f=f+-1|0}if((h|0)<=(f|0)){x=q+(h*24|0)|0;c[w>>2]=c[x>>2];c[w+4>>2]=c[x+4>>2];c[w+8>>2]=c[x+8>>2];c[w+12>>2]=c[x+12>>2];c[w+16>>2]=c[x+16>>2];c[w+20>>2]=c[x+20>>2];q=q+(f*24|0)|0;c[x>>2]=c[q>>2];c[x+4>>2]=c[q+4>>2];c[x+8>>2]=c[q+8>>2];c[x+12>>2]=c[q+12>>2];c[x+16>>2]=c[q+16>>2];c[x+20>>2]=c[q+20>>2];q=(c[a+12>>2]|0)+(f*24|0)|0;c[q>>2]=c[w>>2];c[q+4>>2]=c[w+4>>2];c[q+8>>2]=c[w+8>>2];c[q+12>>2]=c[w+12>>2];c[q+16>>2]=c[w+16>>2];c[q+20>>2]=c[w+20>>2];f=f+-1|0;h=h+1|0}if((h|0)>(f|0))break;q=c[a+12>>2]|0}if((f|0)>(d|0))ff(a,b,d,f);if((h|0)>=(e|0)){i=w;return}ff(a,b,h,e);i=w;return}function gf(a,b,d){a=a|0;b=+b;d=+d;var e=0,f=0,h=0.0,i=0,j=0,k=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0,z=0;z=c[a+872>>2]|0;if((z|0)<=0)return;u=c[a+880>>2]|0;i=0;do{y=c[u+(i*56|0)>>2]|0;n=c[u+(i*56|0)+4>>2]|0;a=c[n+8>>2]|0;e=c[n+12>>2]|0;f=c[n+16>>2]|0;j=u+(i*56|0)+8|0;w=+g[j>>2];k=u+(i*56|0)+12|0;v=+g[k>>2];m=u+(i*56|0)+16|0;t=+g[m>>2];b=+g[a+8>>2]*w+ +g[e+8>>2]*v+ +g[f+8>>2]*t;d=+g[a+12>>2]*w+ +g[e+12>>2]*v+ +g[f+12>>2]*t;h=+g[a+16>>2]*w+ +g[e+16>>2]*v+ +g[f+16>>2]*t;o=+g[y+8>>2];p=+g[y+12>>2];q=+g[y+16>>2];r=o-+g[y+24>>2]-(b-(w*+g[a+24>>2]+v*+g[e+24>>2]+t*+g[f+24>>2]));s=p-+g[y+28>>2]-(d-(w*+g[a+28>>2]+v*+g[e+28>>2]+t*+g[f+28>>2]));t=q-+g[y+32>>2]-(h-(w*+g[a+32>>2]+v*+g[e+32>>2]+t*+g[f+32>>2]));v=+g[u+(i*56|0)+24>>2];w=+g[u+(i*56|0)+28>>2];x=+g[u+(i*56|0)+32>>2];if(r*v+s*w+t*x<0.0){h=+g[u+(i*56|0)+40>>2]-(o*v+p*w+q*x-(b*v+d*w+h*x));a=(g[l>>2]=v*h+0.0,c[l>>2]|0);e=(g[l>>2]=w*h+0.0,c[l>>2]|0);f=(g[l>>2]=x*h+0.0,c[l>>2]|0)}else{a=0;e=0;f=0}b=+g[u+(i*56|0)+44>>2];d=(c[l>>2]=a,+g[l>>2])-b*(r-v*(r*v+s*w+t*x));h=(c[l>>2]=e,+g[l>>2])-b*(s-w*(r*v+s*w+t*x));w=(c[l>>2]=f,+g[l>>2])-b*(t-x*(r*v+s*w+t*x));x=+g[u+(i*56|0)+48>>2];g[y+8>>2]=o+x*d;g[y+12>>2]=p+x*h;g[y+16>>2]=x*w+q;y=c[n+8>>2]|0;f=u+(i*56|0)+52|0;x=+g[f>>2]*+g[j>>2];g[y+8>>2]=+g[y+8>>2]-d*x;g[y+12>>2]=+g[y+12>>2]-h*x;g[y+16>>2]=+g[y+16>>2]-w*x;y=c[n+12>>2]|0;x=+g[f>>2]*+g[k>>2];g[y+8>>2]=+g[y+8>>2]-d*x;g[y+12>>2]=+g[y+12>>2]-h*x;g[y+16>>2]=+g[y+16>>2]-w*x;y=c[n+16>>2]|0;x=+g[f>>2]*+g[m>>2];g[y+8>>2]=+g[y+8>>2]-d*x;g[y+12>>2]=+g[y+12>>2]-h*x;g[y+16>>2]=+g[y+16>>2]-w*x;i=i+1|0}while((i|0)!=(z|0));return}
function Bc(b,e,f,h,j,k,m){b=b|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;m=m|0;var n=0.0,o=0.0,p=0.0,q=0,r=0,s=0.0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0,Q=0;w=i;i=i+19040|0;q=k;r=q+36|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(r|0));c[w+18896>>2]=b;c[w+18896+4>>2]=f;z=+g[h>>2];M=+g[e>>2];A=+g[h+16>>2];C=+g[e+16>>2];B=+g[h+32>>2];N=+g[e+32>>2];D=+g[e+4>>2];O=+g[e+20>>2];E=+g[e+36>>2];s=+g[e+8>>2];n=+g[e+24>>2];y=+g[e+40>>2];L=+g[h+4>>2];K=+g[h+20>>2];J=+g[h+36>>2];I=+g[h+8>>2];H=+g[h+24>>2];F=+g[h+40>>2];g[w+18896+8>>2]=z*M+A*C+B*N;g[w+18896+12>>2]=z*D+A*O+B*E;g[w+18896+16>>2]=z*s+A*n+B*y;g[w+18896+20>>2]=0.0;g[w+18896+24>>2]=M*L+C*K+N*J;g[w+18896+28>>2]=D*L+O*K+E*J;g[w+18896+32>>2]=s*L+n*K+y*J;g[w+18896+36>>2]=0.0;g[w+18896+40>>2]=M*I+C*H+N*F;g[w+18896+44>>2]=D*I+O*H+E*F;g[w+18896+48>>2]=s*I+n*H+y*F;g[w+18896+52>>2]=0.0;y=+g[h+48>>2]-+g[e+48>>2];n=+g[h+52>>2]-+g[e+52>>2];s=+g[h+56>>2]-+g[e+56>>2];E=+g[e>>2];O=+g[h>>2];D=+g[e+16>>2];N=+g[h+16>>2];C=+g[e+32>>2];M=+g[h+32>>2];B=+g[e+4>>2];A=+g[e+20>>2];z=+g[e+36>>2];x=+g[e+8>>2];o=+g[e+24>>2];p=+g[e+40>>2];g[w+18896+56>>2]=E*O+D*N+C*M;g[w+18896+60>>2]=E*L+D*K+C*J;g[w+18896+64>>2]=E*I+D*H+C*F;g[w+18896+68>>2]=0.0;g[w+18896+72>>2]=O*B+N*A+M*z;g[w+18896+76>>2]=L*B+K*A+J*z;g[w+18896+80>>2]=I*B+H*A+F*z;g[w+18896+84>>2]=0.0;g[w+18896+88>>2]=O*x+N*o+M*p;g[w+18896+92>>2]=L*x+K*o+J*p;g[w+18896+96>>2]=I*x+H*o+F*p;g[w+18896+100>>2]=0.0;g[w+18896+104>>2]=y*E+n*D+s*C;g[w+18896+108>>2]=y*B+n*A+s*z;g[w+18896+112>>2]=y*x+n*o+s*p;g[w+18896+116>>2]=0.0;c[w+18896+120>>2]=m?81:80;c[w+18896+124>>2]=0;c[w+18512+364>>2]=0;c[w+18512+128>>2]=0;c[w+18512+128+4>>2]=0;c[w+18512+128+8>>2]=0;c[w+18512+128+12>>2]=0;c[w+18512+376>>2]=2;c[w+18512+368>>2]=0;g[w+18512+144>>2]=0.0;p=-+g[j+4>>2];s=-+g[j+8>>2];g[w+19024>>2]=-+g[j>>2];g[w+19024+4>>2]=p;g[w+19024+8>>2]=s;g[w+19024+12>>2]=0.0;switch(Ec(w+18512|0,w+18896|0,w+19024|0)|0){case 1:{c[w+18496>>2]=0;c[w+18496+4>>2]=0;c[w+18496+8>>2]=0;c[w+18496+12>>2]=0;c[w>>2]=9;c[w+18492>>2]=0;c[w+40>>2]=0;c[w+40+4>>2]=0;c[w+40+8>>2]=0;c[w+40+12>>2]=0;c[w+40+16>>2]=0;b=0;do{f=256-b+-1|0;c[w+4156+(f*56|0)+44>>2]=0;h=c[w+18504>>2]|0;c[w+4156+(f*56|0)+48>>2]=h;if(h|0)c[h+44>>2]=w+4156+(f*56|0);c[w+18504>>2]=w+4156+(f*56|0);c[w+18508>>2]=(c[w+18508>>2]|0)+1;b=b+1|0}while((b|0)!=256);p=+g[j>>2];s=+g[j+4>>2];o=+g[j+8>>2];t=c[w+18512+372>>2]|0;do if((c[t+32>>2]|0)>>>0>1?id(w+18512|0)|0:0){b=c[w+18496>>2]|0;if(b|0){q=c[w+18500>>2]|0;r=c[w+18508>>2]|0;do{f=b+44|0;m=b+48|0;h=c[m>>2]|0;if(h|0)c[h+44>>2]=c[f>>2];f=c[f>>2]|0;if(f|0)c[f+48>>2]=c[m>>2];if((c[w+18496>>2]|0)==(b|0))c[w+18496>>2]=c[m>>2];q=q+-1|0;c[b+44>>2]=0;c[m>>2]=c[w+18504>>2];f=c[w+18504>>2]|0;if(f|0)c[f+44>>2]=b;c[w+18504>>2]=b;r=r+1|0;b=c[w+18496>>2]|0}while((b|0)!=0);c[w+18500>>2]=q;c[w+18508>>2]=r}c[w>>2]=0;c[w+18492>>2]=0;b=c[t>>2]|0;f=c[t+12>>2]|0;O=+g[f+16>>2];F=+g[b+16>>2]-O;I=+g[f+20>>2];J=+g[b+20>>2]-I;L=+g[f+24>>2];M=+g[b+24>>2]-L;f=c[t+4>>2]|0;K=+g[f+16>>2]-O;N=+g[f+20>>2]-I;H=+g[f+24>>2]-L;h=c[t+8>>2]|0;O=+g[h+16>>2]-O;I=+g[h+20>>2]-I;L=+g[h+24>>2]-L;if(F*N*L+(J*H*O+M*K*I-F*H*I-J*K*L)-M*N*O<0.0){c[t>>2]=f;c[t+4>>2]=b;m=c[t+16>>2]|0;c[t+16>>2]=c[t+20>>2];c[t+20>>2]=m;m=f}else{m=b;b=f}m=_e(w,m,b,h,1)|0;q=_e(w,c[t+4>>2]|0,c[t>>2]|0,c[t+12>>2]|0,1)|0;r=_e(w,c[t+8>>2]|0,c[t+4>>2]|0,c[t+12>>2]|0,1)|0;j=_e(w,c[t>>2]|0,c[t+8>>2]|0,c[t+12>>2]|0,1)|0;if((c[w+18500>>2]|0)==4){b=c[w+18496>>2]|0;n=+g[b+16>>2];f=c[b+48>>2]|0;if(f){o=n*n;while(1){n=+g[f+16>>2];h=n*n<o;b=h?f:b;f=c[f+48>>2]|0;if(!f)break;else o=h?n*n:o}}o=+g[b>>2];s=+g[b+4>>2];p=+g[b+8>>2];n=+g[b+12>>2];f=c[b+16>>2]|0;h=c[b+20>>2]|0;Q=c[b+24>>2]|0;P=c[b+28>>2]|0;a[m+52>>0]=0;c[m+32>>2]=q;a[q+52>>0]=0;c[q+32>>2]=m;a[m+53>>0]=0;c[m+36>>2]=r;a[r+52>>0]=1;c[r+32>>2]=m;a[m+54>>0]=0;c[m+40>>2]=j;a[j+52>>0]=2;c[j+32>>2]=m;a[q+53>>0]=2;c[q+36>>2]=j;a[j+54>>0]=1;c[j+40>>2]=q;a[q+54>>0]=1;c[q+40>>2]=r;a[r+53>>0]=2;c[r+36>>2]=q;a[r+54>>0]=1;c[r+40>>2]=j;a[j+53>>0]=2;c[j+36>>2]=r;c[w>>2]=0;t=b;u=0;r=Q;j=P;b=f;while(1){m=c[w+18492>>2]|0;if(m>>>0>=128){v=43;break}c[w+19024>>2]=0;c[w+19024+4>>2]=0;c[w+19024+8>>2]=0;c[w+18492>>2]=m+1;u=u+1|0;a[t+55>>0]=u;P=t+4|0;Q=t+8|0;Ch(w+18512|0,+g[t>>2],+g[P>>2],+g[Q>>2],w+60+(m<<5)|0);if(+g[t>>2]*+g[w+60+(m<<5)+16>>2]+ +g[P>>2]*+g[w+60+(m<<5)+20>>2]+ +g[Q>>2]*+g[w+60+(m<<5)+24>>2]-+g[t+16>>2]>9.999999747378752e-005)f=0;else{f=7;v=42;break}do{q=lh(w,u,w+60+(m<<5)|0,c[t+32+(f<<2)>>2]|0,d[t+52+f>>0]|0,w+19024|0)|0;f=f+1|0}while(q&f>>>0<3);if(!(q&(c[w+19024+8>>2]|0)>>>0>2)){f=4;v=42;break}h=c[w+19024>>2]|0;b=c[w+19024+4>>2]|0;a[h+53>>0]=2;c[h+36>>2]=b;a[b+54>>0]=1;c[b+40>>2]=h;b=t+44|0;h=t+48|0;f=c[h>>2]|0;if(f|0)c[f+44>>2]=c[b>>2];b=c[b>>2]|0;if(b|0)c[b+48>>2]=c[h>>2];if((c[w+18496>>2]|0)==(t|0))c[w+18496>>2]=c[h>>2];c[w+18500>>2]=(c[w+18500>>2]|0)+-1;c[t+44>>2]=0;c[h>>2]=c[w+18504>>2];b=c[w+18504>>2]|0;if(b|0)c[b+44>>2]=t;c[w+18504>>2]=t;c[w+18508>>2]=(c[w+18508>>2]|0)+1;f=c[w+18496>>2]|0;n=+g[f+16>>2];b=c[f+48>>2]|0;if(b){o=n*n;while(1){n=+g[b+16>>2];h=n*n<o;f=h?b:f;b=c[b+48>>2]|0;if(!b)break;else o=h?n*n:o}}o=+g[f>>2];s=+g[f+4>>2];p=+g[f+8>>2];n=+g[f+12>>2];b=c[f+16>>2]|0;h=c[f+20>>2]|0;m=c[f+24>>2]|0;q=c[f+28>>2]|0;if(u>>>0>=255){f=q;break}else{t=f;r=m;j=q}}if((v|0)==42){c[w>>2]=f;m=r;f=j}else if((v|0)==43){c[w>>2]=6;m=r;f=j}M=(c[l>>2]=b,+g[l>>2]);K=o*M;I=s*M;M=p*M;g[w+40>>2]=o;g[w+44>>2]=s;g[w+48>>2]=p;g[w+52>>2]=n;c[w+56>>2]=b;c[w+36>>2]=3;c[w+4>>2]=h;c[w+8>>2]=m;c[w+12>>2]=f;Q=m;N=+g[Q+16>>2]-K;F=+g[Q+20>>2]-I;E=+g[Q+24>>2]-M;P=f;L=+g[P+16>>2]-K;H=+g[P+20>>2]-I;J=+g[P+24>>2]-M;N=+G(+((N*H-F*L)*(N*H-F*L)+((F*J-E*H)*(F*J-E*H)+(E*L-N*J)*(E*L-N*J))));g[w+20>>2]=N;L=+g[P+16>>2]-K;E=+g[P+20>>2]-I;P=h;H=+g[P+16>>2]-K;F=+g[P+20>>2]-I;O=+g[P+24>>2]-M;O=+G(+((L*F-E*H)*(L*F-E*H)+((E*O-J*F)*(E*O-J*F)+(J*H-L*O)*(J*H-L*O))));g[w+24>>2]=O;L=+g[P+16>>2]-K;H=+g[P+20>>2]-I;J=+g[P+24>>2]-M;K=+g[Q+16>>2]-K;I=+g[Q+20>>2]-I;M=+g[Q+24>>2]-M;M=+G(+((L*I-H*K)*(L*I-H*K)+((H*M-J*I)*(H*M-J*I)+(J*K-L*M)*(J*K-L*M))));g[w+20>>2]=N/(M+(N+O));g[w+24>>2]=O/(M+(N+O));g[w+28>>2]=M/(M+(N+O));if((c[w>>2]|0)!=9)if(!(c[w+36>>2]|0)){p=0.0;o=0.0;n=0.0;break}else{m=w+36|0;v=51;break}c[k>>2]=3;Q=0;i=w;return Q|0}else v=45}else v=45;while(0);if((v|0)==45){c[w>>2]=8;g[w+40>>2]=p;g[w+44>>2]=s;g[w+48>>2]=o;g[w+52>>2]=0.0;n=+G(+(p*p+s*s+o*o));if(n>0.0){g[w+40>>2]=1.0/n*p;g[w+44>>2]=1.0/n*s;g[w+48>>2]=1.0/n*o}else{c[w+40>>2]=1065353216;c[w+44>>2]=0;c[w+48>>2]=0}g[w+52>>2]=0.0;g[w+56>>2]=0.0;c[w+36>>2]=1;c[w+4>>2]=c[t>>2];g[w+20>>2]=1.0;m=w+36|0;v=51}if((v|0)==51){h=0;p=0.0;o=0.0;n=0.0;do{b=c[w+18896+120>>2]|0;Q=c[w+18896+124>>2]|0;f=(c[w+18896>>2]|0)+(Q>>1)|0;if(Q&1)b=c[(c[f>>2]|0)+b>>2]|0;Ub[b&127](w+19024|0,f,c[w+4+(h<<2)>>2]|0);O=+g[w+20+(h<<2)>>2];p=p+ +g[w+19024>>2]*O;n=n+O*+g[w+19024+4>>2];o=o+O*+g[w+19024+8>>2];h=h+1|0}while(h>>>0<(c[m>>2]|0)>>>0)}c[k>>2]=1;O=p*+g[e+16>>2]+n*+g[e+20>>2]+o*+g[e+24>>2]+ +g[e+52>>2];L=p*+g[e+32>>2]+n*+g[e+36>>2]+o*+g[e+40>>2]+ +g[e+56>>2];g[k+4>>2]=p*+g[e>>2]+n*+g[e+4>>2]+o*+g[e+8>>2]+ +g[e+48>>2];g[k+8>>2]=O;g[k+12>>2]=L;g[k+16>>2]=0.0;L=+g[w+40>>2];O=+g[w+56>>2];M=+g[w+44>>2];N=+g[w+48>>2];F=p-L*O;H=n-O*M;I=o-O*N;J=F*+g[e+16>>2]+H*+g[e+20>>2]+I*+g[e+24>>2]+ +g[e+52>>2];K=F*+g[e+32>>2]+H*+g[e+36>>2]+I*+g[e+40>>2]+ +g[e+56>>2];g[k+20>>2]=F*+g[e>>2]+H*+g[e+4>>2]+I*+g[e+8>>2]+ +g[e+48>>2];g[k+24>>2]=J;g[k+28>>2]=K;g[k+32>>2]=0.0;g[k+36>>2]=-L;g[k+40>>2]=-M;g[k+44>>2]=-N;g[k+48>>2]=0.0;g[k+52>>2]=-O;Q=1;i=w;return Q|0}case 2:{c[k>>2]=2;Q=0;i=w;return Q|0}default:{Q=0;i=w;return Q|0}}return 0}function Cc(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0;w=i;i=i+208|0;u=(a[b+68>>0]|0)!=0;t=u?e:d;u=u?d:e;v=c[t+4>>2]|0;if((c[v+72>>2]|0)!=(c[b+80>>2]|0)){k=c[b+52>>2]|0;if((k|0)>0){j=0;do{l=c[(c[b+60>>2]|0)+(j<<2)>>2]|0;if(l|0){kb[c[c[l>>2]>>2]&255](l);m=c[b+4>>2]|0;mb[c[(c[m>>2]|0)+60>>2]&127](m,c[(c[b+60>>2]|0)+(j<<2)>>2]|0)}j=j+1|0}while((j|0)!=(k|0))}_g(b,d,e);c[b+80>>2]=c[v+72>>2]}d=c[b+52>>2]|0;if(!d){i=w;return}m=c[v+68>>2]|0;k=c[b+4>>2]|0;l=c[b+60>>2]|0;j=c[b+72>>2]|0;c[w+176>>2]=9072;c[w+176+4>>2]=t;c[w+176+8>>2]=u;c[w+176+12>>2]=k;c[w+176+16>>2]=f;c[w+176+20>>2]=h;c[w+176+24>>2]=l;c[w+176+28>>2]=j;j=c[b+32>>2]|0;if((j|0)<0){if((c[b+36>>2]|0)<0){d=c[b+40>>2]|0;if(d|0){if(a[b+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=0;c[b+36>>2]=0}do{c[(c[b+40>>2]|0)+(j<<2)>>2]=0;j=j+1|0}while((j|0)!=0);d=c[b+52>>2]|0}c[b+32>>2]=0;if((d|0)>0){f=0;do{j=c[(c[b+60>>2]|0)+(f<<2)>>2]|0;if(j){mb[c[(c[j>>2]|0)+16>>2]&127](j,b+28|0);j=c[b+32>>2]|0;if((j|0)>0){l=0;do{k=c[(c[b+40>>2]|0)+(l<<2)>>2]|0;if(c[k+780>>2]|0){c[h+4>>2]=k;j=c[k+772>>2]|0;d=c[(c[h+8>>2]|0)+8>>2]|0;e=c[(c[h+12>>2]|0)+8>>2]|0;if((j|0)==(d|0))Te(k,j+4|0,e+4|0);else Te(k,e+4|0,d+4|0);c[h+4>>2]=0;j=c[b+32>>2]|0}l=l+1|0}while((l|0)<(j|0))}if((j|0)<0){if((c[b+36>>2]|0)<0){d=c[b+40>>2]|0;if(d|0){if(a[b+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=0;c[b+36>>2]=0}do{c[(c[b+40>>2]|0)+(j<<2)>>2]=0;j=j+1|0}while((j|0)!=0)}c[b+32>>2]=0;d=c[b+52>>2]|0}f=f+1|0}while((f|0)<(d|0))}if(!m){if((d|0)>0){j=0;do{De(w+176|0,c[(c[v+28>>2]|0)+(j*80|0)+64>>2]|0,j);j=j+1|0}while((j|0)<(d|0))}}else{l=c[t+12>>2]|0;F=+g[l>>2];E=+g[l+16>>2];D=+g[l+32>>2];C=+g[l+4>>2];B=+g[l+20>>2];A=+g[l+36>>2];o=+g[l+8>>2];r=+g[l+24>>2];p=+g[l+40>>2];z=-+g[l+48>>2];y=-+g[l+52>>2];x=-+g[l+56>>2];l=c[u+12>>2]|0;O=+g[l>>2];N=+g[l+16>>2];M=+g[l+32>>2];L=+g[l+4>>2];K=+g[l+20>>2];J=+g[l+36>>2];I=+g[l+8>>2];H=+g[l+24>>2];G=+g[l+40>>2];s=+g[l+48>>2];q=+g[l+52>>2];n=+g[l+56>>2];g[w+32>>2]=F*O+E*N+D*M;g[w+32+4>>2]=F*L+E*K+D*J;g[w+32+8>>2]=F*I+E*H+D*G;g[w+32+12>>2]=0.0;g[w+32+16>>2]=C*O+B*N+A*M;g[w+32+20>>2]=C*L+B*K+A*J;g[w+32+24>>2]=C*I+B*H+A*G;g[w+32+28>>2]=0.0;g[w+32+32>>2]=o*O+r*N+p*M;g[w+32+36>>2]=o*L+r*K+p*J;g[w+32+40>>2]=o*I+r*H+p*G;g[w+32+44>>2]=0.0;g[w+32+48>>2]=F*z+E*y+D*x+(F*s+E*q+D*n);g[w+32+52>>2]=C*z+B*y+A*x+(C*s+B*q+A*n);g[w+32+56>>2]=o*z+r*y+p*x+(o*s+r*q+p*n);g[w+32+60>>2]=0.0;l=c[u+4>>2]|0;Yb[c[(c[l>>2]|0)+8>>2]&127](l,w+32|0,w+112|0,w+96|0);n=+g[w+112>>2];p=+g[w+112+4>>2];q=+g[w+112+8>>2];r=+g[w+96>>2];s=+g[w+96+4>>2];o=+g[w+96+8>>2];l=c[m>>2]|0;if(l|0){j=c[b+12>>2]|0;d=c[b+16>>2]|0;if((j|0)<0){if((d|0)<0){d=c[b+20>>2]|0;if(d|0){if(a[b+24>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=0;c[b+16>>2]=0;d=0}do{c[(c[b+20>>2]|0)+(j<<2)>>2]=0;j=j+1|0}while((j|0)!=0)}c[b+12>>2]=0;if((d|0)<64){c[6324]=(c[6324]|0)+1;j=ic(275)|0;if(!j)e=0;else{c[(j+4+15&-16)+-4>>2]=j;e=j+4+15&-16}j=c[b+12>>2]|0;if((j|0)>0){d=0;do{c[e+(d<<2)>>2]=c[(c[b+20>>2]|0)+(d<<2)>>2];d=d+1|0}while((d|0)!=(j|0))}d=c[b+20>>2]|0;if(d){if(a[b+24>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);j=c[b+12>>2]|0}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=e;c[b+16>>2]=64;d=64}else j=0;if((j|0)==(d|0)){k=d<<1;if((d|0)<(k|0)){c[6324]=(c[6324]|0)+1;j=ic((d<<3|3)+16|0)|0;if(!j)e=0;else{c[(j+4+15&-16)+-4>>2]=j;e=j+4+15&-16}j=c[b+12>>2]|0;if((j|0)>0){d=0;do{c[e+(d<<2)>>2]=c[(c[b+20>>2]|0)+(d<<2)>>2];d=d+1|0}while((d|0)!=(j|0))}d=c[b+20>>2]|0;if(d){if(a[b+24>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);j=c[b+12>>2]|0}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=e;c[b+16>>2]=k}else j=d}c[(c[b+20>>2]|0)+(j<<2)>>2]=l;d=j+1|0;c[b+12>>2]=d;while(1){j=d+-1|0;e=c[b+20>>2]|0;f=c[e+(j<<2)>>2]|0;c[b+12>>2]=j;do if(((((+g[f>>2]<=r?+g[f+16>>2]>=n:0)?+g[f+4>>2]<=s:0)?+g[f+20>>2]>=p:0)?+g[f+8>>2]<=o:0)?+g[f+24>>2]>=q:0){if(!(c[f+40>>2]|0)){mb[c[(c[w+176>>2]|0)+12>>2]&127](w+176|0,f);j=c[b+12>>2]|0;break}l=c[f+36>>2]|0;k=c[b+16>>2]|0;do if((j|0)==(k|0)){k=j|0?j<<1:1;if((d|0)>(k|0)){d=j;break}if(!k)e=0;else{c[6324]=(c[6324]|0)+1;j=ic((k<<2|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}e=j;j=c[b+12>>2]|0}if((j|0)>0){d=0;do{c[e+(d<<2)>>2]=c[(c[b+20>>2]|0)+(d<<2)>>2];d=d+1|0}while((d|0)!=(j|0))}d=c[b+20>>2]|0;if(d){if(a[b+24>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);j=c[b+12>>2]|0}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=e;c[b+16>>2]=k;d=j;j=k}else{d=j;j=k}while(0);c[e+(d<<2)>>2]=l;d=d+1|0;c[b+12>>2]=d;l=c[f+40>>2]|0;do if((d|0)==(j|0)){k=j|0?j<<1:1;if((j|0)>=(k|0))break;if(!k)e=0;else{c[6324]=(c[6324]|0)+1;j=ic((k<<2|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}e=j;j=c[b+12>>2]|0}if((j|0)>0){d=0;do{c[e+(d<<2)>>2]=c[(c[b+20>>2]|0)+(d<<2)>>2];d=d+1|0}while((d|0)!=(j|0))}d=c[b+20>>2]|0;if(d){if(a[b+24>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);j=c[b+12>>2]|0}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=e;c[b+16>>2]=k}else j=d;while(0);c[(c[b+20>>2]|0)+(j<<2)>>2]=l;j=j+1|0;c[b+12>>2]=j}while(0);if((j|0)>0)d=j;else break}}}e=c[b+52>>2]|0;j=c[b+32>>2]|0;if((j|0)<0){if((c[b+36>>2]|0)<0){d=c[b+40>>2]|0;if(d|0){if(a[b+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=0;c[b+36>>2]=0}do{c[(c[b+40>>2]|0)+(j<<2)>>2]=0;j=j+1|0}while((j|0)!=0)}c[b+32>>2]=0;if((e|0)>0){d=0;do{do if(c[(c[b+60>>2]|0)+(d<<2)>>2]|0){f=c[v+28>>2]|0;m=c[f+(d*80|0)+64>>2]|0;h=c[t+12>>2]|0;q=+g[h>>2];r=+g[h+4>>2];s=+g[h+8>>2];x=+g[h+16>>2];y=+g[h+20>>2];z=+g[h+24>>2];G=+g[h+32>>2];I=+g[h+36>>2];K=+g[h+40>>2];A=+g[f+(d*80|0)>>2];B=+g[f+(d*80|0)+16>>2];C=+g[f+(d*80|0)+32>>2];D=+g[f+(d*80|0)+4>>2];E=+g[f+(d*80|0)+20>>2];F=+g[f+(d*80|0)+36>>2];H=+g[f+(d*80|0)+8>>2];J=+g[f+(d*80|0)+24>>2];L=+g[f+(d*80|0)+40>>2];o=+g[f+(d*80|0)+48>>2];p=+g[f+(d*80|0)+52>>2];O=+g[f+(d*80|0)+56>>2];M=+g[h+48>>2]+(q*o+r*p+s*O);N=+g[h+52>>2]+(x*o+y*p+z*O);O=+g[h+56>>2]+(G*o+I*p+K*O);g[w+112>>2]=q*A+r*B+s*C;g[w+112+4>>2]=q*D+r*E+s*F;g[w+112+8>>2]=q*H+r*J+s*L;g[w+112+12>>2]=0.0;g[w+112+16>>2]=x*A+y*B+z*C;g[w+112+20>>2]=x*D+y*E+z*F;g[w+112+24>>2]=x*H+y*J+z*L;g[w+112+28>>2]=0.0;g[w+112+32>>2]=G*A+I*B+K*C;g[w+112+36>>2]=G*D+I*E+K*F;g[w+112+40>>2]=G*H+I*J+K*L;g[w+112+44>>2]=0.0;g[w+112+48>>2]=M;g[w+112+52>>2]=N;g[w+112+56>>2]=O;g[w+112+60>>2]=0.0;Yb[c[(c[m>>2]|0)+8>>2]&127](m,w+112|0,w+96|0,w+32|0);m=c[u+4>>2]|0;Yb[c[(c[m>>2]|0)+8>>2]&127](m,c[u+12>>2]|0,w+16|0,w);if(!(+g[w+96>>2]>+g[w>>2])?!(+g[w+32>>2]<+g[w+16>>2]):0)j=1;else j=0;if(!(!(+g[w+96+8>>2]>+g[w+8>>2])?!(+g[w+32+8>>2]<+g[w+16+8>>2]):0))j=0;if(!(+g[w+96+4>>2]>+g[w+4>>2])?!(+g[w+32+4>>2]<+g[w+16+4>>2]|j^1):0)break;m=c[(c[b+60>>2]|0)+(d<<2)>>2]|0;kb[c[c[m>>2]>>2]&255](m);m=c[b+4>>2]|0;mb[c[(c[m>>2]|0)+60>>2]&127](m,c[(c[b+60>>2]|0)+(d<<2)>>2]|0);c[(c[b+60>>2]|0)+(d<<2)>>2]=0}while(0);d=d+1|0}while((d|0)<(e|0))}i=w;return}function Dc(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,H=0,I=0;r=i;i=i+144|0;m=c[b+48>>2]|0;k=c[b+52>>2]|0;if((k|0?(l=c[k+20>>2]|0,l|0):0)?(ob[c[(c[l>>2]|0)+56>>2]&127](l)|0)&1|0:0){c[r+48>>2]=1065353216;c[r+48+4>>2]=1065353216;c[r+48+8>>2]=0;g[r+48+12>>2]=0.0;l=c[b+8>>2]|0;q=c[(c[b+52>>2]|0)+20>>2]|0;p=c[(c[q>>2]|0)+16>>2]|0;x=+g[d>>2];D=+g[d+4>>2];A=+g[d+8>>2];v=+g[l+20>>2];s=+g[l+24>>2];w=+g[l+28>>2];t=+g[l+36>>2];z=+g[l+40>>2];B=+g[l+44>>2];u=+g[l+52>>2];C=+g[l+56>>2];y=+g[l+60>>2];g[r+24>>2]=x*+g[l+4>>2]+D*+g[l+8>>2]+A*+g[l+12>>2]+u;g[r+24+4>>2]=x*v+D*s+A*w+C;g[r+24+8>>2]=x*t+D*z+A*B+y;g[r+24+12>>2]=0.0;A=+g[d+16>>2];D=+g[d+20>>2];x=+g[d+24>>2];g[r>>2]=A*+g[l+4>>2]+D*+g[l+8>>2]+x*+g[l+12>>2]+u;g[r+4>>2]=A*v+D*s+x*w+C;g[r+8>>2]=A*t+D*z+x*B+y;g[r+12>>2]=0.0;Yb[p&127](q,r+24|0,r,r+48|0);q=c[(c[b+52>>2]|0)+20>>2]|0;p=c[(c[q>>2]|0)+16>>2]|0;y=+g[d+16>>2];B=+g[d+20>>2];x=+g[d+24>>2];z=+g[l+20>>2];D=+g[l+24>>2];t=+g[l+28>>2];A=+g[l+36>>2];C=+g[l+40>>2];w=+g[l+44>>2];s=+g[l+52>>2];v=+g[l+56>>2];u=+g[l+60>>2];g[r+24>>2]=y*+g[l+4>>2]+B*+g[l+8>>2]+x*+g[l+12>>2]+s;g[r+24+4>>2]=y*z+B*D+x*t+v;g[r+24+8>>2]=y*A+B*C+x*w+u;g[r+24+12>>2]=0.0;x=+g[d+32>>2];B=+g[d+36>>2];y=+g[d+40>>2];g[r>>2]=x*+g[l+4>>2]+B*+g[l+8>>2]+y*+g[l+12>>2]+s;g[r+4>>2]=x*z+B*D+y*t+v;g[r+8>>2]=x*A+B*C+y*w+u;g[r+12>>2]=0.0;Yb[p&127](q,r+24|0,r,r+48|0);q=c[(c[b+52>>2]|0)+20>>2]|0;p=c[(c[q>>2]|0)+16>>2]|0;u=+g[d+32>>2];w=+g[d+36>>2];y=+g[d+40>>2];C=+g[l+20>>2];B=+g[l+24>>2];A=+g[l+28>>2];x=+g[l+36>>2];v=+g[l+40>>2];t=+g[l+44>>2];D=+g[l+52>>2];z=+g[l+56>>2];s=+g[l+60>>2];g[r+24>>2]=u*+g[l+4>>2]+w*+g[l+8>>2]+y*+g[l+12>>2]+D;g[r+24+4>>2]=u*C+w*B+y*A+z;g[r+24+8>>2]=u*x+w*v+y*t+s;g[r+24+12>>2]=0.0;y=+g[d>>2];w=+g[d+4>>2];u=+g[d+8>>2];g[r>>2]=y*+g[l+4>>2]+w*+g[l+8>>2]+u*+g[l+12>>2]+D;g[r+4>>2]=y*C+w*B+u*A+z;g[r+8>>2]=y*x+w*v+u*t+s;g[r+12>>2]=0.0;Yb[p&127](q,r+24|0,r,r+48|0)}k=((e<<21|f)+~(f<<15)>>10^(e<<21|f)+~(f<<15))*9|0;k=(c[b+108>>2]|0)+-1&((k>>6^k)+~((k>>6^k)<<11)>>16^(k>>6^k)+~((k>>6^k)<<11));a:do if(k>>>0<(c[b+64>>2]|0)>>>0?(h=c[(c[b+72>>2]|0)+(k<<2)>>2]|0,(h|0)!=-1):0){k=c[b+132>>2]|0;while(1){if((e<<21|f|0)==(c[k+(h<<2)>>2]|0))break;h=c[(c[b+92>>2]|0)+(h<<2)>>2]|0;if((h|0)==-1)break a}k=c[b+112>>2]|0;if(k+(h<<3)|0){p=c[k+(h<<3)+4>>2]|0;q=c[b+8>>2]|0;c[p+8>>2]=c[(c[q+192>>2]|0)+8>>2];o=c[b+4>>2]|0;n=c[o+192>>2]|0;c[r+48>>2]=0;c[r+48+4>>2]=n;c[r+48+8>>2]=o;c[r+48+12>>2]=o+4;c[r+48+16>>2]=-1;c[r+48+20>>2]=-1;c[r+24>>2]=0;c[r+24+4>>2]=p;c[r+24+8>>2]=q;c[r+24+12>>2]=q+4;c[r+24+16>>2]=e;c[r+24+20>>2]=f;q=sb[c[(c[m>>2]|0)+8>>2]&31](m,r+48|0,r+24|0,0)|0;ib[c[(c[q>>2]|0)+8>>2]&31](q,r+48|0,r+24|0,c[b+52>>2]|0,c[b+44>>2]|0);kb[c[c[q>>2]>>2]&255](q);mb[c[(c[m>>2]|0)+60>>2]&127](m,q);i=r;return}}while(0);u=+g[d+16>>2];E=+g[d>>2];v=+g[d+20>>2];s=+g[d+4>>2];w=+g[d+24>>2];t=+g[d+8>>2];x=+g[d+32>>2];z=+g[d+36>>2];B=+g[d+40>>2];y=(v-s)*(B-t)-(w-t)*(z-s);A=(w-t)*(x-E)-(u-E)*(B-t);D=(u-E)*(z-s)-(v-s)*(x-E);C=1.0/+G(+(D*D+(y*y+A*A)));g[r+48>>2]=E+C*y*.05999999865889549;g[r+48+4>>2]=s+C*A*.05999999865889549;g[r+48+8>>2]=C*D*.05999999865889549+t;g[r+48+12>>2]=0.0;g[r+48+16>>2]=C*y*.05999999865889549+u;g[r+48+20>>2]=C*A*.05999999865889549+v;g[r+48+24>>2]=C*D*.05999999865889549+w;g[r+48+28>>2]=0.0;g[r+48+32>>2]=C*y*.05999999865889549+x;g[r+48+36>>2]=C*A*.05999999865889549+z;g[r+48+40>>2]=C*D*.05999999865889549+B;g[r+48+44>>2]=0.0;g[r+48+48>>2]=E-C*y*.05999999865889549;g[r+48+52>>2]=s-C*A*.05999999865889549;g[r+48+56>>2]=t-C*D*.05999999865889549;g[r+48+60>>2]=0.0;g[r+48+64>>2]=u-C*y*.05999999865889549;g[r+48+68>>2]=v-C*A*.05999999865889549;g[r+48+72>>2]=w-C*D*.05999999865889549;g[r+48+76>>2]=0.0;g[r+48+80>>2]=x-C*y*.05999999865889549;g[r+48+84>>2]=z-C*A*.05999999865889549;g[r+48+88>>2]=B-C*D*.05999999865889549;g[r+48+92>>2]=0.0;c[6324]=(c[6324]|0)+1;h=ic(135)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}Zf(h,r+48|0,6,16);q=c[b+8>>2]|0;c[h+8>>2]=c[(c[q+192>>2]|0)+8>>2];p=c[b+4>>2]|0;d=c[p+192>>2]|0;c[r+24>>2]=0;c[r+24+4>>2]=d;c[r+24+8>>2]=p;c[r+24+12>>2]=p+4;c[r+24+16>>2]=-1;c[r+24+20>>2]=-1;c[r>>2]=0;c[r+4>>2]=h;c[r+8>>2]=q;c[r+12>>2]=q+4;c[r+16>>2]=e;c[r+20>>2]=f;q=sb[c[(c[m>>2]|0)+8>>2]&31](m,r+24|0,r,0)|0;ib[c[(c[q>>2]|0)+8>>2]&31](q,r+24|0,r,c[b+52>>2]|0,c[b+44>>2]|0);kb[c[c[q>>2]>>2]&255](q);mb[c[(c[m>>2]|0)+60>>2]&127](m,q);q=((e<<21|f)+~(f<<15)>>10^(e<<21|f)+~(f<<15))*9|0;q=(q>>6^q)+~((q>>6^q)<<11)>>16^(q>>6^q)+~((q>>6^q)<<11);m=c[b+108>>2]|0;b:do if((q&m+-1)>>>0<(c[b+64>>2]|0)>>>0?(j=c[(c[b+72>>2]|0)+((q&m+-1)<<2)>>2]|0,(j|0)!=-1):0){k=c[b+132>>2]|0;while(1){if((e<<21|f|0)==(c[k+(j<<2)>>2]|0))break;j=c[(c[b+92>>2]|0)+(j<<2)>>2]|0;if((j|0)==-1){n=20;break b}}b=c[b+112>>2]|0;c[b+(j<<3)>>2]=e<<21|f;c[b+(j<<3)+4>>2]=h}else n=20;while(0);if((n|0)==20){p=c[b+104>>2]|0;if((p|0)==(m|0)){d=m|0?m<<1:1;if((m|0)<(d|0)){if(!d){j=0;l=m}else{c[6324]=(c[6324]|0)+1;j=ic((d<<3|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}l=c[b+104>>2]|0}if((l|0)>0){k=0;do{I=(c[b+112>>2]|0)+(k<<3)|0;H=c[I+4>>2]|0;F=j+(k<<3)|0;c[F>>2]=c[I>>2];c[F+4>>2]=H;k=k+1|0}while((k|0)!=(l|0))}k=c[b+112>>2]|0;if(k|0){if(a[b+116>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[b+112>>2]=0}a[b+116>>0]=1;c[b+112>>2]=j;c[b+108>>2]=d;j=c[b+104>>2]|0}else j=m}else j=p;I=c[b+112>>2]|0;c[I+(j<<3)>>2]=e<<21|f;c[I+(j<<3)+4>>2]=h;c[b+104>>2]=(c[b+104>>2]|0)+1;h=c[b+124>>2]|0;if((h|0)==(c[b+128>>2]|0)?(o=h|0?h<<1:1,(h|0)<(o|0)):0){if(!o)l=0;else{c[6324]=(c[6324]|0)+1;h=ic((o<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}l=h;h=c[b+124>>2]|0}k=c[b+132>>2]|0;if((h|0)<=0)if(!k)h=b+136|0;else n=43;else{j=0;do{c[l+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0));n=43}if((n|0)==43){if(a[b+136>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[b+132>>2]=0;h=b+136|0}a[h>>0]=1;c[b+132>>2]=l;c[b+128>>2]=o;h=c[b+124>>2]|0}c[(c[b+132>>2]|0)+(h<<2)>>2]=e<<21|f;c[b+124>>2]=(c[b+124>>2]|0)+1;n=c[b+108>>2]|0;if((m|0)<(n|0)){o=c[b+64>>2]|0;if((o|0)<(n|0)){do if((c[b+68>>2]|0)<(n|0)){if(!n){h=0;k=o}else{c[6324]=(c[6324]|0)+1;h=ic((n<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}k=c[b+64>>2]|0}l=c[b+72>>2]|0;if((k|0)<=0){if(!l){a[b+76>>0]=1;c[b+72>>2]=h;c[b+68>>2]=n;m=b+72|0;break}}else{j=0;do{c[h+(j<<2)>>2]=c[l+(j<<2)>>2];j=j+1|0}while((j|0)!=(k|0))}if(a[b+76>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[l+-4>>2]|0)}a[b+76>>0]=1;c[b+72>>2]=h;c[b+68>>2]=n;m=b+72|0}else{m=b+72|0;h=c[b+72>>2]|0}while(0);yn(h+(o<<2)|0,0,(n<<2)-(o<<2)|0)|0;c[b+64>>2]=n;d=c[b+84>>2]|0;if((d|0)<(n|0)){do if((c[b+88>>2]|0)<(n|0)){if(!n){h=0;k=d}else{c[6324]=(c[6324]|0)+1;h=ic((n<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}k=c[b+84>>2]|0}l=c[b+92>>2]|0;if((k|0)<=0){if(!l){a[b+96>>0]=1;c[b+92>>2]=h;c[b+88>>2]=n;break}}else{j=0;do{c[h+(j<<2)>>2]=c[l+(j<<2)>>2];j=j+1|0}while((j|0)!=(k|0))}if(a[b+96>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[l+-4>>2]|0)}a[b+96>>0]=1;c[b+92>>2]=h;c[b+88>>2]=n}else h=c[b+92>>2]|0;while(0);yn(h+(d<<2)|0,0,(n<<2)-(d<<2)|0)|0}c[b+84>>2]=n;if((n|0)>0){yn(c[m>>2]|0,-1,n<<2|0)|0;yn(c[b+92>>2]|0,-1,n<<2|0)|0}if((o|0)>0){l=c[b+132>>2]|0;j=c[m>>2]|0;k=c[b+92>>2]|0;h=0;do{I=c[l+(h<<2)>>2]|0;I=(I+~(I<<15)>>10^I+~(I<<15))*9|0;I=j+((((I>>6^I)+~((I>>6^I)<<11)>>16^(I>>6^I)+~((I>>6^I)<<11))&(c[b+108>>2]|0)+-1)<<2)|0;c[k+(h<<2)>>2]=c[I>>2];c[I>>2]=h;h=h+1|0}while((h|0)!=(o|0))}}h=q&(c[b+108>>2]|0)+-1}else h=q&m+-1;I=(c[b+72>>2]|0)+(h<<2)|0;c[(c[b+92>>2]|0)+(p<<2)>>2]=c[I>>2];c[I>>2]=p}i=r;return}function Ec(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,k=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0,w=0,x=0,y=0.0,z=0.0,A=0,B=0,C=0.0,D=0.0,E=0.0,F=0;B=i;i=i+176|0;c[a+348>>2]=a+220;c[a+352>>2]=a+252;c[a+356>>2]=a+284;c[a+360>>2]=a+316;c[a+364>>2]=4;c[a+368>>2]=0;c[a+376>>2]=0;x=c[b+4>>2]|0;c[a>>2]=c[b>>2];c[a+4>>2]=x;c[a+8>>2]=c[b+8>>2];c[a+8+4>>2]=c[b+8+4>>2];c[a+8+8>>2]=c[b+8+8>>2];c[a+8+12>>2]=c[b+8+12>>2];c[a+24>>2]=c[b+24>>2];c[a+24+4>>2]=c[b+24+4>>2];c[a+24+8>>2]=c[b+24+8>>2];c[a+24+12>>2]=c[b+24+12>>2];c[a+40>>2]=c[b+40>>2];c[a+40+4>>2]=c[b+40+4>>2];c[a+40+8>>2]=c[b+40+8>>2];c[a+40+12>>2]=c[b+40+12>>2];c[a+56>>2]=c[b+56>>2];c[a+56+4>>2]=c[b+56+4>>2];c[a+56+8>>2]=c[b+56+8>>2];c[a+56+12>>2]=c[b+56+12>>2];c[a+72>>2]=c[b+72>>2];c[a+72+4>>2]=c[b+72+4>>2];c[a+72+8>>2]=c[b+72+8>>2];c[a+72+12>>2]=c[b+72+12>>2];c[a+88>>2]=c[b+88>>2];c[a+88+4>>2]=c[b+88+4>>2];c[a+88+8>>2]=c[b+88+8>>2];c[a+88+12>>2]=c[b+88+12>>2];c[a+104>>2]=c[b+104>>2];c[a+104+4>>2]=c[b+104+4>>2];c[a+104+8>>2]=c[b+104+8>>2];c[a+104+12>>2]=c[b+104+12>>2];x=c[b+124>>2]|0;c[a+120>>2]=c[b+120>>2];c[a+124>>2]=x;g[a+144>>2]=0.0;c[a+180>>2]=0;c[a+128>>2]=c[d>>2];c[a+128+4>>2]=c[d+4>>2];c[a+128+8>>2]=c[d+8>>2];c[a+128+12>>2]=c[d+12>>2];e=+g[a+128>>2];f=+g[a+132>>2];h=+g[a+136>>2];if(e*e+f*f+h*h>0.0){g[a+164>>2]=0.0;c[a+364>>2]=3;c[a+148>>2]=a+316;c[a+180>>2]=1;Ch(a,-e,-f,-h,a+316|0);b=a+148|0;d=a+164|0}else{g[a+164>>2]=0.0;c[a+364>>2]=3;c[a+148>>2]=a+316;c[a+180>>2]=1;Ch(a,1.0,0.0,0.0,a+316|0);b=a+148|0;d=a+164|0}g[d>>2]=1.0;x=(c[b>>2]|0)+16|0;c[a+128>>2]=c[x>>2];c[a+128+4>>2]=c[x+4>>2];c[a+128+8>>2]=c[x+8>>2];c[a+128+12>>2]=c[x+12>>2];c[B+24+48>>2]=c[x>>2];c[B+24+48+4>>2]=c[x+4>>2];c[B+24+48+8>>2]=c[x+8>>2];c[B+24+48+12>>2]=c[x+12>>2];c[B+24+32>>2]=c[x>>2];c[B+24+32+4>>2]=c[x+4>>2];c[B+24+32+8>>2]=c[x+8>>2];c[B+24+32+12>>2]=c[x+12>>2];c[B+24+16>>2]=c[x>>2];c[B+24+16+4>>2]=c[x+4>>2];c[B+24+16+8>>2]=c[x+8>>2];c[B+24+16+12>>2]=c[x+12>>2];c[B+24>>2]=c[x>>2];c[B+24+4>>2]=c[x+4>>2];c[B+24+8>>2]=c[x+8>>2];c[B+24+12>>2]=c[x+12>>2];x=0;y=0.0;e=e*e+f*f+h*h;v=0;a:do{w=c[a+368>>2]|0;f=+g[a+128>>2];h=+g[a+132>>2];j=+g[a+136>>2];o=+G(+(f*f+h*h+j*j));if(o<9.999999747378752e-005){A=6;break}g[a+148+(w*36|0)+16+(c[a+148+(w*36|0)+32>>2]<<2)>>2]=0.0;b=(c[a+364>>2]|0)+-1|0;c[a+364>>2]=b;c[a+148+(w*36|0)+(c[a+148+(w*36|0)+32>>2]<<2)>>2]=c[a+348+(b<<2)>>2];b=c[a+148+(w*36|0)+32>>2]|0;c[a+148+(w*36|0)+32>>2]=b+1;Ch(a,-f,-h,-j,c[a+148+(w*36|0)+(b<<2)>>2]|0);b=c[a+148+(w*36|0)+32>>2]|0;d=c[a+148+(w*36|0)+(b+-1<<2)>>2]|0;f=+g[d+16>>2];h=+g[d+20>>2];j=+g[d+24>>2];r=f-+g[B+24>>2];s=h-+g[B+24+4>>2];u=j-+g[B+24+8>>2];if(r*r+s*s+u*u<9.999999747378752e-005){A=9;break}r=f-+g[B+24+16>>2];s=h-+g[B+24+20>>2];u=j-+g[B+24+24>>2];if(r*r+s*s+u*u<9.999999747378752e-005){A=9;break}r=f-+g[B+24+32>>2];s=h-+g[B+24+36>>2];u=j-+g[B+24+40>>2];if(r*r+s*s+u*u<9.999999747378752e-005){A=9;break}r=f-+g[B+24+48>>2];s=h-+g[B+24+52>>2];u=j-+g[B+24+56>>2];if(r*r+s*s+u*u<9.999999747378752e-005){A=9;break}v=v+1&3;t=B+24+(v<<4)|0;c[t>>2]=c[d+16>>2];c[t+4>>2]=c[d+16+4>>2];c[t+8>>2]=c[d+16+8>>2];c[t+12>>2]=c[d+16+12>>2];u=(+g[a+128>>2]*f+ +g[a+132>>2]*h+ +g[a+136>>2]*j)/o;y=u>y?u:y;if(o-y-o*9.999999747378752e-005<=0.0){A=10;break}c[B>>2]=0;b:do switch(b|0){case 2:{t=c[a+148+(w*36|0)>>2]|0;n=c[a+148+(w*36|0)+4>>2]|0;e=+g[n+16>>2];f=+g[t+16>>2];h=+g[n+20>>2];j=+g[t+20>>2];o=+g[n+24>>2];p=+g[t+24>>2];if(!((e-f)*(e-f)+(h-j)*(h-j)+(o-p)*(o-p)>0.0)){A=40;break a}q=-(f*(e-f)+j*(h-j)+p*(o-p))/((e-f)*(e-f)+(h-j)*(h-j)+(o-p)*(o-p));if(q>=1.0){g[B+8>>2]=0.0;g[B+8+4>>2]=1.0;c[B>>2]=2;e=e*e+h*h+o*o;break b}if(!(q<=0.0)){g[B+8+4>>2]=q;g[B+8>>2]=1.0-q;c[B>>2]=3;e=((e-f)*q+f)*((e-f)*q+f)+((h-j)*q+j)*((h-j)*q+j)+((o-p)*q+p)*((o-p)*q+p);break b}else{g[B+8>>2]=1.0;g[B+8+4>>2]=0.0;c[B>>2]=1;e=f*f+j*j+p*p;break b}}case 3:{e=+we((c[a+148+(w*36|0)>>2]|0)+16|0,(c[a+148+(w*36|0)+4>>2]|0)+16|0,(c[a+148+(w*36|0)+8>>2]|0)+16|0,B+8|0,B);break}case 4:{k=c[a+148+(w*36|0)>>2]|0;m=c[a+148+(w*36|0)+4>>2]|0;n=c[a+148+(w*36|0)+8>>2]|0;t=c[a+148+(w*36|0)+12>>2]|0;c[B+152>>2]=k+16;c[B+152+4>>2]=m+16;c[B+152+8>>2]=n+16;c[B+152+12>>2]=t+16;j=+g[k+16>>2];o=+g[t+16>>2];f=+g[k+20>>2];p=+g[t+20>>2];h=+g[k+24>>2];q=+g[t+24>>2];g[B+104>>2]=j-o;g[B+104+4>>2]=f-p;g[B+104+8>>2]=h-q;g[B+104+12>>2]=0.0;e=+g[m+16>>2];D=+g[m+20>>2];s=+g[m+24>>2];g[B+104+16>>2]=e-o;g[B+104+20>>2]=D-p;g[B+104+24>>2]=s-q;g[B+104+28>>2]=0.0;r=+g[n+16>>2];E=+g[n+20>>2];C=+g[n+24>>2];g[B+104+32>>2]=r-o;g[B+104+36>>2]=E-p;g[B+104+40>>2]=C-q;g[B+104+44>>2]=0.0;u=(f-p)*(s-q)*(r-o)+(h-q)*(e-o)*(E-p)-(E-p)*(s-q)*(j-o)-(f-p)*(e-o)*(C-q)+(C-q)*(j-o)*(D-p)-(r-o)*(h-q)*(D-p);if(u!=u|0.0!=0.0|u==0.0|!(u*(h*((e-r)*(f-D)-(D-E)*(j-e))+(j*((D-E)*(h-s)-(s-C)*(f-D))+f*((s-C)*(j-e)-(e-r)*(h-s))))<=0.0))e=-1.0;else{c[B+92>>2]=0;c[B+92+4>>2]=0;c[B+92+8>>2]=0;c[B+88>>2]=0;e=-1.0;d=0;s=f-p;r=h-q;j=j-o;h=p;f=q;while(1){b=c[8796+(d<<2)>>2]|0;C=+g[B+104+(b<<4)+8>>2];D=+g[B+104+(b<<4)+4>>2];E=+g[B+104+(b<<4)>>2];if(u*((s*C-r*D)*o+h*(r*E-C*j)+(D*j-s*E)*f)>0.0?(z=+we(c[B+152+(d<<2)>>2]|0,c[B+152+(b<<2)>>2]|0,t+16|0,B+92|0,B+88|0),e<0.0|z<e):0){F=c[B+88>>2]|0;c[B>>2]=(F&2|0?1<<b:0)+(F<<1&8)+(F&1|0?1<<d:0);c[B+8+(d<<2)>>2]=c[B+92>>2];c[B+8+(b<<2)>>2]=c[B+92+4>>2];g[B+8+(c[8796+(b<<2)>>2]<<2)>>2]=0.0;c[B+8+12>>2]=c[B+92+8>>2];e=z}b=d+1|0;if((b|0)==3)break;d=b;s=+g[B+104+(b<<4)+4>>2];r=+g[B+104+(b<<4)+8>>2];j=+g[B+104+(b<<4)>>2];o=+g[t+16>>2];h=+g[t+20>>2];f=+g[t+24>>2]}if(e<0.0){c[B>>2]=15;j=+g[n+20>>2];E=+g[m+24>>2];D=+g[t+16>>2];f=+g[n+24>>2];C=+g[m+16>>2];o=+g[t+20>>2];h=+g[n+16>>2];s=+g[t+24>>2];q=+g[m+20>>2];g[B+8>>2]=(j*E*D+f*C*o-o*E*h-j*C*s+s*h*q-D*f*q)/u;e=+g[k+20>>2];p=+g[k+24>>2];r=+g[k+16>>2];g[B+8+4>>2]=(e*f*D+p*h*o-o*f*r-e*h*s+s*r*j-D*p*j)/u;g[B+8+8>>2]=(q*p*D+E*r*o-o*p*C-q*r*s+s*C*e-D*E*e)/u;g[B+8+12>>2]=1.0-((j*E*D+f*C*o-o*E*h-j*C*s+s*h*q-D*f*q)/u+(e*f*D+p*h*o-o*f*r-e*h*s+s*r*j-D*p*j)/u+(q*p*D+E*r*o-o*p*C-q*r*s+s*C*e-D*E*e)/u);e=0.0}}break}default:{}}while(0);if(!(e>=0.0)){A=40;break}c[a+148+((1-w|0)*36|0)+32>>2]=0;c[a+128>>2]=0;c[a+128+4>>2]=0;c[a+128+8>>2]=0;c[a+128+12>>2]=0;c[a+368>>2]=1-w;d=c[a+148+(w*36|0)+32>>2]|0;k=c[B>>2]|0;if(d|0){b=0;do{m=a+148+(w*36|0)+(b<<2)|0;n=c[m>>2]|0;if(!(k&1<<b)){F=c[a+364>>2]|0;c[a+364>>2]=F+1;c[a+348+(F<<2)>>2]=n}else{c[a+148+((1-w|0)*36|0)+(c[a+148+((1-w|0)*36|0)+32>>2]<<2)>>2]=n;t=c[B+8+(b<<2)>>2]|0;F=c[a+148+((1-w|0)*36|0)+32>>2]|0;c[a+148+((1-w|0)*36|0)+32>>2]=F+1;c[a+148+((1-w|0)*36|0)+16+(F<<2)>>2]=t;F=c[m>>2]|0;C=(c[l>>2]=t,+g[l>>2]);D=C*+g[F+20>>2];E=C*+g[F+24>>2];g[a+128>>2]=+g[F+16>>2]*C+ +g[a+128>>2];g[a+132>>2]=D+ +g[a+132>>2];g[a+136>>2]=E+ +g[a+136>>2]}b=b+1|0}while((b|0)!=(d|0))}if((k|0)==15)c[a+376>>2]=1;x=x+1|0;if(x>>>0>=128){A=39;break}}while(!(c[a+376>>2]|0));if((A|0)==6)c[a+376>>2]=1;else if((A|0)==9){F=c[a+368>>2]|0;A=(c[a+148+(F*36|0)+32>>2]|0)+-1|0;c[a+148+(F*36|0)+32>>2]=A;A=c[a+148+(F*36|0)+(A<<2)>>2]|0;F=c[a+364>>2]|0;c[a+364>>2]=F+1;c[a+348+(F<<2)>>2]=A}else if((A|0)==10){F=c[a+368>>2]|0;A=(c[a+148+(F*36|0)+32>>2]|0)+-1|0;c[a+148+(F*36|0)+32>>2]=A;A=c[a+148+(F*36|0)+(A<<2)>>2]|0;F=c[a+364>>2]|0;c[a+364>>2]=F+1;c[a+348+(F<<2)>>2]=A}else if((A|0)==39)c[a+376>>2]=2;else if((A|0)==40){F=c[a+368>>2]|0;A=(c[a+148+(F*36|0)+32>>2]|0)+-1|0;c[a+148+(F*36|0)+32>>2]=A;A=c[a+148+(F*36|0)+(A<<2)>>2]|0;F=c[a+364>>2]|0;c[a+364>>2]=F+1;c[a+348+(F<<2)>>2]=A}c[a+372>>2]=a+148+((c[a+368>>2]|0)*36|0);b=c[a+376>>2]|0;switch(b|0){case 0:{C=+g[a+128>>2];D=+g[a+132>>2];E=+g[a+136>>2];g[a+144>>2]=+G(+(C*C+D*D+E*E));i=B;return b|0}case 1:{g[a+144>>2]=0.0;i=B;return b|0}default:{i=B;return b|0}}return 0}function Fc(b,d,e,f,h,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=+j;k=+k;l=l|0;var m=0,n=0.0,o=0,p=0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0.0,G=0.0,H=0.0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0,ba=0;X=i;i=i+16|0;m=c[h+4>>2]|0;if((m|0)<0){if((c[h+8>>2]|0)<0){o=c[h+12>>2]|0;if(o|0){if(a[h+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}c[h+12>>2]=0}a[h+16>>0]=1;c[h+12>>2]=0;c[h+8>>2]=0}do{W=(c[h+12>>2]|0)+(m<<4)|0;c[W>>2]=c[X>>2];c[W+4>>2]=c[X+4>>2];c[W+8>>2]=c[X+8>>2];c[W+12>>2]=c[X+12>>2];m=m+1|0}while((m|0)!=0)}c[h+4>>2]=0;r=c[f+4>>2]|0;if((c[h+8>>2]|0)<(r|0)){if(r){c[6324]=(c[6324]|0)+1;m=ic((r<<4|3)+16|0)|0;if(!m)m=0;else{c[(m+4+15&-16)+-4>>2]=m;m=m+4+15&-16}p=c[h+4>>2]|0;if((p|0)>0){o=0;do{W=m+(o<<4)|0;V=(c[h+12>>2]|0)+(o<<4)|0;c[W>>2]=c[V>>2];c[W+4>>2]=c[V+4>>2];c[W+8>>2]=c[V+8>>2];c[W+12>>2]=c[V+12>>2];o=o+1|0}while((o|0)!=(p|0));p=h+12|0}else p=h+12|0}else{m=0;p=h+12|0}o=c[p>>2]|0;if(o|0){if(a[h+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}c[p>>2]=0}a[h+16>>0]=1;c[p>>2]=m;c[h+8>>2]=r}p=c[d+28>>2]|0;if((p|0)<=0){i=X;return}W=c[d+36>>2]|0;F=+g[e>>2];G=+g[e+4>>2];H=+g[e+8>>2];w=+g[e+16>>2];v=+g[e+20>>2];t=+g[e+24>>2];s=+g[e+32>>2];q=+g[e+36>>2];n=+g[e+40>>2];x=+g[b>>2];y=+g[b+4>>2];z=+g[b+8>>2];V=-1;u=34028234663852886.0e22;m=0;while(1){A=+g[W+(m*36|0)+20>>2];B=+g[W+(m*36|0)+24>>2];C=+g[W+(m*36|0)+28>>2];o=(A*F+B*G+C*H)*x+(A*w+B*v+C*t)*y+(A*s+B*q+C*n)*z<u;V=o?m:V;m=m+1|0;if((m|0)==(p|0))break;else u=o?(A*F+B*G+C*H)*x+(A*w+B*v+C*t)*y+(A*s+B*q+C*n)*z:u}if((V|0)<0){i=X;return}M=c[W+(V*36|0)+4>>2]|0;if((M|0)>0){N=W+(V*36|0)+12|0;O=W+(V*36|0)+20|0;P=W+(V*36|0)+24|0;Q=W+(V*36|0)+28|0;L=0;y=F;x=G;u=H;while(1){J=c[N>>2]|0;m=c[J+(L<<2)>>2]|0;I=c[d+16>>2]|0;L=L+1|0;K=(L|0)==(M|0);J=c[J+((K?0:L)<<2)>>2]|0;Z=+g[I+(m<<4)>>2];_=Z-+g[I+(J<<4)>>2];Y=+g[I+(m<<4)+4>>2];$=Y-+g[I+(J<<4)+4>>2];z=+g[I+(m<<4)+8>>2];C=z-+g[I+(J<<4)+8>>2];A=_*y+$*x+C*u;B=_*w+$*v+C*t;C=_*s+$*q+C*n;$=+g[O>>2];_=+g[P>>2];H=+g[Q>>2];F=y*$+x*_+u*H;G=w*$+v*_+t*H;H=s*$+q*_+n*H;z=(Z*y+Y*x+z*u+ +g[e+48>>2])*-(B*H-C*G)+(Z*w+Y*v+z*t+ +g[e+52>>2])*-(C*F-A*H)+(Z*s+Y*q+z*n+ +g[e+56>>2])*-(A*G-B*F);J=f;I=h;m=c[J+4>>2]|0;if((m|0)>=2){p=c[J+12>>2]|0;q=+g[p+(m+-1<<4)>>2];s=+g[p+(m+-1<<4)+4>>2];t=+g[p+(m+-1<<4)+8>>2];o=0;n=q*-(B*H-C*G)+s*-(C*F-A*H)+t*-(A*G-B*F)-z;while(1){w=+g[p+(o<<4)>>2];x=+g[p+(o<<4)+4>>2];y=+g[p+(o<<4)+8>>2];E=c[p+(o<<4)+12>>2]|0;v=w*-(B*H-C*G)+x*-(C*F-A*H)+y*-(A*G-B*F)-z;do if(n<0.0)if(v<0.0){r=c[I+4>>2]|0;if((r|0)==(c[I+8>>2]|0)?(R=r|0?r<<1:1,(r|0)<(R|0)):0){if(!R)p=0;else{c[6324]=(c[6324]|0)+1;p=ic((R<<4|3)+16|0)|0;if(!p)p=0;else{c[(p+4+15&-16)+-4>>2]=p;p=p+4+15&-16}r=c[I+4>>2]|0}if((r|0)>0){D=0;do{aa=p+(D<<4)|0;ba=(c[I+12>>2]|0)+(D<<4)|0;c[aa>>2]=c[ba>>2];c[aa+4>>2]=c[ba+4>>2];c[aa+8>>2]=c[ba+8>>2];c[aa+12>>2]=c[ba+12>>2];D=D+1|0}while((D|0)!=(r|0))}r=c[I+12>>2]|0;if(r|0){if(a[I+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[r+-4>>2]|0)}c[I+12>>2]=0}a[I+16>>0]=1;c[I+12>>2]=p;c[I+8>>2]=R;p=c[I+4>>2]|0}else p=r;ba=c[I+12>>2]|0;g[ba+(p<<4)>>2]=w;g[ba+(p<<4)+4>>2]=x;g[ba+(p<<4)+8>>2]=y;c[ba+(p<<4)+12>>2]=E;c[I+4>>2]=(c[I+4>>2]|0)+1;break}else{n=n/(n-v);u=q+(w-q)*n;q=s+(x-s)*n;n=t+(y-t)*n;r=c[I+4>>2]|0;if((r|0)==(c[I+8>>2]|0)?(S=r|0?r<<1:1,(r|0)<(S|0)):0){if(!S)p=0;else{c[6324]=(c[6324]|0)+1;p=ic((S<<4|3)+16|0)|0;if(!p)p=0;else{c[(p+4+15&-16)+-4>>2]=p;p=p+4+15&-16}r=c[I+4>>2]|0}if((r|0)>0){D=0;do{ba=p+(D<<4)|0;aa=(c[I+12>>2]|0)+(D<<4)|0;c[ba>>2]=c[aa>>2];c[ba+4>>2]=c[aa+4>>2];c[ba+8>>2]=c[aa+8>>2];c[ba+12>>2]=c[aa+12>>2];D=D+1|0}while((D|0)!=(r|0))}r=c[I+12>>2]|0;if(r|0){if(a[I+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[r+-4>>2]|0)}c[I+12>>2]=0}a[I+16>>0]=1;c[I+12>>2]=p;c[I+8>>2]=S;p=c[I+4>>2]|0}else p=r;ba=c[I+12>>2]|0;g[ba+(p<<4)>>2]=u;g[ba+(p<<4)+4>>2]=q;g[ba+(p<<4)+8>>2]=n;g[ba+(p<<4)+12>>2]=0.0;c[I+4>>2]=(c[I+4>>2]|0)+1;break}else if(v<0.0){n=n/(n-v);u=q+(w-q)*n;q=s+(x-s)*n;n=t+(y-t)*n;r=c[I+4>>2]|0;if((r|0)==(c[I+8>>2]|0)?(T=r|0?r<<1:1,(r|0)<(T|0)):0){if(!T)p=0;else{c[6324]=(c[6324]|0)+1;p=ic((T<<4|3)+16|0)|0;if(!p)p=0;else{c[(p+4+15&-16)+-4>>2]=p;p=p+4+15&-16}r=c[I+4>>2]|0}if((r|0)>0){D=0;do{ba=p+(D<<4)|0;aa=(c[I+12>>2]|0)+(D<<4)|0;c[ba>>2]=c[aa>>2];c[ba+4>>2]=c[aa+4>>2];c[ba+8>>2]=c[aa+8>>2];c[ba+12>>2]=c[aa+12>>2];D=D+1|0}while((D|0)!=(r|0))}r=c[I+12>>2]|0;if(r|0){if(a[I+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[r+-4>>2]|0)}c[I+12>>2]=0}a[I+16>>0]=1;c[I+12>>2]=p;c[I+8>>2]=T;p=c[I+4>>2]|0}else p=r;r=c[I+12>>2]|0;g[r+(p<<4)>>2]=u;g[r+(p<<4)+4>>2]=q;g[r+(p<<4)+8>>2]=n;g[r+(p<<4)+12>>2]=0.0;r=(c[I+4>>2]|0)+1|0;c[I+4>>2]=r;if((r|0)==(c[I+8>>2]|0)?(U=r|0?r<<1:1,(r|0)<(U|0)):0){if(!U)p=0;else{c[6324]=(c[6324]|0)+1;p=ic((U<<4|3)+16|0)|0;if(!p)p=0;else{c[(p+4+15&-16)+-4>>2]=p;p=p+4+15&-16}r=c[I+4>>2]|0}if((r|0)>0){D=0;do{ba=p+(D<<4)|0;aa=(c[I+12>>2]|0)+(D<<4)|0;c[ba>>2]=c[aa>>2];c[ba+4>>2]=c[aa+4>>2];c[ba+8>>2]=c[aa+8>>2];c[ba+12>>2]=c[aa+12>>2];D=D+1|0}while((D|0)!=(r|0))}r=c[I+12>>2]|0;if(r|0){if(a[I+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[r+-4>>2]|0)}c[I+12>>2]=0}a[I+16>>0]=1;c[I+12>>2]=p;c[I+8>>2]=U;p=c[I+4>>2]|0}else p=r;ba=c[I+12>>2]|0;g[ba+(p<<4)>>2]=w;g[ba+(p<<4)+4>>2]=x;g[ba+(p<<4)+8>>2]=y;c[ba+(p<<4)+12>>2]=E;c[I+4>>2]=(c[I+4>>2]|0)+1}while(0);o=o+1|0;if((o|0)==(m|0))break;n=v;q=w;t=y;s=x;p=c[J+12>>2]|0}m=c[J+4>>2]|0}if((m|0)<0){if((c[J+8>>2]|0)<0){o=c[J+12>>2]|0;if(o|0){if(a[J+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}c[J+12>>2]=0}a[J+16>>0]=1;c[J+12>>2]=0;c[J+8>>2]=0}do{ba=(c[J+12>>2]|0)+(m<<4)|0;c[ba>>2]=c[X>>2];c[ba+4>>2]=c[X+4>>2];c[ba+8>>2]=c[X+8>>2];c[ba+12>>2]=c[X+12>>2];m=m+1|0}while((m|0)!=0)}c[J+4>>2]=0;y=+g[e>>2];x=+g[e+4>>2];u=+g[e+8>>2];w=+g[e+16>>2];v=+g[e+20>>2];t=+g[e+24>>2];s=+g[e+32>>2];q=+g[e+36>>2];n=+g[e+40>>2];if(K){p=O;o=P;m=Q;D=e+48|0;E=e+52|0;r=e+56|0;break}else{ba=f;f=h;h=ba}}}else{p=W+(V*36|0)+20|0;o=W+(V*36|0)+24|0;m=W+(V*36|0)+28|0;D=e+48|0;E=e+52|0;r=e+56|0;h=f;y=F;x=G;u=H}Z=+g[p>>2];_=+g[o>>2];$=+g[m>>2];u=Z*y+_*x+$*u;t=Z*w+_*v+$*t;s=Z*s+_*q+$*n;q=+g[W+(V*36|0)+32>>2]-(u*+g[D>>2]+t*+g[E>>2]+s*+g[r>>2]);m=c[h+4>>2]|0;if((m|0)<=0){i=X;return}p=0;do{o=c[h+12>>2]|0;n=q+(u*+g[o+(p<<4)>>2]+t*+g[o+(p<<4)+4>>2]+s*+g[o+(p<<4)+8>>2]);n=n<=j?j:n;if(n<=k){m=o+(p<<4)|0;c[X>>2]=c[m>>2];c[X+4>>2]=c[m+4>>2];c[X+8>>2]=c[m+8>>2];c[X+12>>2]=c[m+12>>2];Tb[c[(c[l>>2]|0)+16>>2]&15](l,b,X,n);m=c[h+4>>2]|0}p=p+1|0}while((p|0)<(m|0));i=X;return}function Gc(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=i;i=i+16|0;k=c[b+212>>2]|0;j=c[b+180>>2]|0;if((j|0)<(k|0)){if((c[b+184>>2]|0)<(k|0)){if(!k){e=0;h=j}else{c[6324]=(c[6324]|0)+1;e=ic((k<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}h=c[b+180>>2]|0}if((h|0)>0){f=0;do{c[e+(f<<2)>>2]=c[(c[b+188>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(h|0))}f=c[b+188>>2]|0;if(f|0){if(a[b+192>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+188>>2]=0}a[b+192>>0]=1;c[b+188>>2]=e;c[b+184>>2]=k;f=b+188|0}else f=b+188|0;e=j;do{c[(c[f>>2]|0)+(e<<2)>>2]=0;e=e+1|0}while((e|0)!=(k|0))}c[b+180>>2]=k;if((ob[c[(c[b>>2]|0)+104>>2]&127](b)|0)>0){e=0;do{c[(c[b+188>>2]|0)+(e<<2)>>2]=c[(c[b+220>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)<(ob[c[(c[b>>2]|0)+104>>2]&127](b)|0))}e=c[b+180>>2]|0;if((e|0)>1)Rg(b+176|0,0,e+-1|0);if(!(ob[c[(c[b>>2]|0)+104>>2]&127](b)|0))e=0;else e=c[b+188>>2]|0;h=c[b+196>>2]|0;t=c[b+180>>2]|0;u=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;c[h+4>>2]=d;c[h+12>>2]=e;c[h+16>>2]=t;c[h+20>>2]=u;e=c[h+32>>2]|0;if((e|0)<0){if((c[h+36>>2]|0)<0){f=c[h+40>>2]|0;if(f|0){if(a[h+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[h+40>>2]=0}a[h+44>>0]=1;c[h+40>>2]=0;c[h+36>>2]=0}do{c[(c[h+40>>2]|0)+(e<<2)>>2]=0;e=e+1|0}while((e|0)!=0)}c[h+32>>2]=0;e=c[h+52>>2]|0;if((e|0)<0){if((c[h+56>>2]|0)<0){f=c[h+60>>2]|0;if(f|0){if(a[h+64>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[h+60>>2]=0}a[h+64>>0]=1;c[h+60>>2]=0;c[h+56>>2]=0}do{c[(c[h+60>>2]|0)+(e<<2)>>2]=0;e=e+1|0}while((e|0)!=0)}c[h+52>>2]=0;e=c[h+72>>2]|0;if((e|0)<0){if((c[h+76>>2]|0)<0){f=c[h+80>>2]|0;if(f|0){if(a[h+84>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[h+80>>2]=0}a[h+84>>0]=1;c[h+80>>2]=0;c[h+76>>2]=0}do{c[(c[h+80>>2]|0)+(e<<2)>>2]=0;e=e+1|0}while((e|0)!=0)}c[h+72>>2]=0;u=c[b+200>>2]|0;e=c[(c[u>>2]|0)+8>>2]|0;s=c[b+8>>2]|0;t=c[b+24>>2]|0;t=ob[c[(c[t>>2]|0)+36>>2]&127](t)|0;Ub[e&127](u,s,t);t=c[b+204>>2]|0;s=c[b+24>>2]|0;u=c[b+196>>2]|0;e=c[t+28>>2]|0;if((e|0)<0){if((c[t+32>>2]|0)<0){f=c[t+36>>2]|0;if(f|0){if(a[t+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[t+36>>2]=0}a[t+40>>0]=1;c[t+36>>2]=0;c[t+32>>2]=0}do{c[(c[t+36>>2]|0)+(e<<2)>>2]=0;e=e+1|0}while((e|0)!=0)}c[t+28>>2]=0;k=c[t+8>>2]|0;if((k|0)>0){l=c[t+16>>2]|0;j=0;do{m=l+(j<<3)|0;e=c[m>>2]|0;if((e|0)==(j|0))e=j;else{f=e;h=m;do{e=l+(f<<3)|0;c[h>>2]=c[e>>2];e=c[e>>2]|0;h=l+(e<<3)|0;f=c[h>>2]|0}while((e|0)!=(f|0))}c[m>>2]=e;j=j+1|0}while((j|0)!=(k|0));if((k|0)>1){qj(t+4|0,0,k+-1|0);k=c[t+8>>2]|0}if((k|0)>0){o=c[t+16>>2]|0;e=0;while(1){p=c[o+(e<<3)>>2]|0;m=e;while(1){l=m+1|0;if((l|0)>=(k|0)){n=0;break}if((c[o+(l<<3)>>2]|0)==(p|0))m=l;else{n=1;break}}a:do if((e|0)<=(m|0)){q=c[b+16>>2]|0;f=1;j=e;while(1){h=c[q+(c[o+(j<<3)+4>>2]<<2)>>2]|0;if((c[h+208>>2]|0)==(p|0)){r=c[h+216>>2]|0;f=(r|0)!=4&(f&(r|0)!=1)}if((j|0)<(m|0))j=j+1|0;else break}if(f)while(1){f=c[q+(c[o+(e<<3)+4>>2]<<2)>>2]|0;do if((c[f+208>>2]|0)==(p|0)){if((c[f+216>>2]&-2|0)==4)break;c[f+216>>2]=2}while(0);if((e|0)>=(m|0))break a;e=e+1|0}else while(1){f=c[q+(c[o+(e<<3)+4>>2]<<2)>>2]|0;do if((c[f+208>>2]|0)==(p|0)){if((c[f+216>>2]|0)!=2)break;c[f+216>>2]=3;g[f+220>>2]=0.0}while(0);if((e|0)>=(m|0))break a;e=e+1|0}}while(0);if(n)e=l;else break}}}l=ob[c[(c[s>>2]|0)+36>>2]&127](s)|0;if((l|0)>0){k=0;do{m=Jb[c[(c[s>>2]|0)+40>>2]&31](s,k)|0;f=c[m+772>>2]|0;h=c[m+776>>2]|0;if((f|0)!=0?(c[f+216>>2]|0)!=2:0)e=93;else e=91;if(((e|0)==91?(e=0,h|0):0)?(c[h+216>>2]|0)!=2:0)e=93;if((e|0)==93){e=c[f+204>>2]|0;if((e&2|0?((e&4|0)==0?(c[f+216>>2]|0)!=2:0):0)?(c[h+204>>2]&3|0)==0:0){if((c[h+216>>2]&-2|0)!=4)c[h+216>>2]=1;g[h+220>>2]=0.0}r=c[h+204>>2]|0;if(r&2|0?((r&4|e&3|0)==0?(c[h+216>>2]|0)!=2:0):0){if((c[f+216>>2]&-2|0)!=4)c[f+216>>2]=1;g[f+220>>2]=0.0}if(a[t+64>>0]|0?yb[c[(c[s>>2]|0)+28>>2]&63](s,f,h)|0:0){e=c[t+28>>2]|0;do if((e|0)==(c[t+32>>2]|0)){j=e|0?e<<1:1;if((e|0)>=(j|0))break;if(!j)h=0;else{c[6324]=(c[6324]|0)+1;e=ic((j<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}h=e;e=c[t+28>>2]|0}if((e|0)>0){f=0;do{c[h+(f<<2)>>2]=c[(c[t+36>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(e|0))}f=c[t+36>>2]|0;if(f){if(a[t+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);e=c[t+28>>2]|0}c[t+36>>2]=0}a[t+40>>0]=1;c[t+36>>2]=h;c[t+32>>2]=j}while(0);c[(c[t+36>>2]|0)+(e<<2)>>2]=m;c[t+28>>2]=e+1}}k=k+1|0}while((k|0)!=(l|0));e=t+64|0}else e=t+64|0;r=c[t+8>>2]|0;if(!(a[e>>0]|0)){r=ob[c[(c[s>>2]|0)+44>>2]&127](s)|0;t=ob[c[(c[s>>2]|0)+36>>2]&127](s)|0;Ab[c[(c[u>>2]|0)+8>>2]&7](u,c[b+16>>2]|0,c[b+8>>2]|0,r,t,-1);u=c[b+196>>2]|0;ah(u);u=c[b+200>>2]|0;t=c[u>>2]|0;t=t+16|0;t=c[t>>2]|0;b=b+72|0;b=c[b>>2]|0;Ub[t&127](u,d,b);i=v;return}q=c[t+28>>2]|0;if((q|0)>1)Pg(t+24|0,0,q+-1|0);if((r|0)<=0){u=c[b+196>>2]|0;ah(u);u=c[b+200>>2]|0;t=c[u>>2]|0;t=t+16|0;t=c[t>>2]|0;b=b+72|0;b=c[b>>2]|0;Ub[t&127](u,d,b);i=v;return}e=0;p=0;n=1;while(1){f=c[t+16>>2]|0;o=c[f+(e<<3)>>2]|0;b:do if((e|0)<(r|0)){j=1;k=c[t+48>>2]|0;h=c[t+52>>2]|0;while(1){m=c[(c[b+16>>2]|0)+(c[f+(e<<3)+4>>2]<<2)>>2]|0;if((k|0)==(h|0)){l=h|0?h<<1:1;if((h|0)<(l|0)){if(!l)f=0;else{c[6324]=(c[6324]|0)+1;f=ic((l<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[t+48>>2]|0}if((h|0)>0){k=0;do{c[f+(k<<2)>>2]=c[(c[t+56>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(h|0))}k=c[t+56>>2]|0;if(k){if(a[t+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);h=c[t+48>>2]|0}c[t+56>>2]=0}a[t+60>>0]=1;c[t+56>>2]=f;c[t+52>>2]=l;f=h;h=l}else f=h}else f=k;c[(c[t+56>>2]|0)+(f<<2)>>2]=m;k=f+1|0;c[t+48>>2]=k;s=c[m+216>>2]|0;j=j&((s|0)==2|(s|0)==5);e=e+1|0;if((e|0)>=(r|0)){m=e;break b}f=c[t+16>>2]|0;if((c[f+(e<<3)>>2]|0)!=(o|0)){m=e;break}}}else{m=e;j=1}while(0);if((p|0)<(q|0)){k=c[t+36>>2]|0;l=k+(p<<2)|0;f=c[l>>2]|0;e=c[(c[f+772>>2]|0)+208>>2]|0;if((e|0)<=-1)e=c[(c[f+776>>2]|0)+208>>2]|0;if((e|0)==(o|0)){h=p;do{h=h+1|0;if((h|0)>=(q|0))break;f=c[k+(h<<2)>>2]|0;e=c[(c[f+772>>2]|0)+208>>2]|0;if((e|0)<=-1)e=c[(c[f+776>>2]|0)+208>>2]|0}while((o|0)==(e|0));e=l;f=h-p|0}else{e=0;f=0;h=n}}else{e=0;f=0;h=n}if(!j)Ab[c[(c[u>>2]|0)+8>>2]&7](u,c[t+56>>2]|0,c[t+48>>2]|0,e,f,o);p=(f|0)==0?p:h;e=c[t+48>>2]|0;if((e|0)<0){if((c[t+52>>2]|0)<0){f=c[t+56>>2]|0;if(f|0){if(a[t+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[t+56>>2]=0}a[t+60>>0]=1;c[t+56>>2]=0;c[t+52>>2]=0}do{c[(c[t+56>>2]|0)+(e<<2)>>2]=0;e=e+1|0}while((e|0)!=0)}c[t+48>>2]=0;if((m|0)>=(r|0))break;else{e=m;n=h}}u=c[b+196>>2]|0;ah(u);u=c[b+200>>2]|0;t=c[u>>2]|0;t=t+16|0;t=c[t>>2]|0;b=b+72|0;b=c[b>>2]|0;Ub[t&127](u,d,b);i=v;return}function Hc(b){b=b|0;var d=0.0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0;G=i;i=i+64|0;if(!(a[b+356>>0]|0)){b=a[b+312>>0]|0;b=b<<24>>24!=0;i=G;return b|0}c[b+336>>2]=0;c[b+336+4>>2]=0;c[b+336+8>>2]=0;c[b+336+12>>2]=0;a[b+336+16>>0]=0;e=a[b+332>>0]|0;a[b+332>>0]=e&-16;a[b+356>>0]=0;switch(c[b>>2]|0){case 0:{a[b+312>>0]=0;b=0;b=b<<24>>24!=0;i=G;return b|0}case 1:{c[b+244>>2]=c[b+84>>2];c[b+244+4>>2]=c[b+84+4>>2];c[b+244+8>>2]=c[b+84+8>>2];c[b+244+12>>2]=c[b+84+12>>2];c[b+260>>2]=c[b+164>>2];c[b+260+4>>2]=c[b+164+4>>2];c[b+260+8>>2]=c[b+164+8>>2];c[b+260+12>>2]=c[b+164+12>>2];C=+g[b+248>>2]-+g[b+264>>2];D=+g[b+252>>2]-+g[b+268>>2];g[b+276>>2]=+g[b+244>>2]-+g[b+260>>2];g[b+280>>2]=C;g[b+284>>2]=D;g[b+288>>2]=0.0;a[b+352>>0]=0;a[b+332>>0]=e&-16;g[b+336>>2]=1.0;g[b+340>>2]=0.0;g[b+344>>2]=0.0;g[b+348>>2]=0.0;a[b+312>>0]=1;b=1;b=b<<24>>24!=0;i=G;return b|0}case 2:{d=+g[b+4>>2];f=+g[b+8>>2];h=+g[b+12>>2];j=+g[b+20>>2]-d;k=+g[b+24>>2]-f;l=+g[b+28>>2]-h;do if((0.0-d)*j+(0.0-f)*k+(0.0-h)*l>0.0)if((0.0-d)*j+(0.0-f)*k+(0.0-h)*l<j*j+k*k+l*l){a[b+332>>0]=e&-16|3;d=((0.0-d)*j+(0.0-f)*k+(0.0-h)*l)/(j*j+k*k+l*l);break}else{a[b+332>>0]=e&-16|2;d=1.0;break}else{a[b+332>>0]=e&-16|1;d=0.0}while(0);g[b+336>>2]=1.0-d;g[b+340>>2]=d;g[b+344>>2]=0.0;g[b+348>>2]=0.0;y=+g[b+84>>2];A=+g[b+88>>2];C=+g[b+92>>2];y=y+d*(+g[b+100>>2]-y);A=A+d*(+g[b+104>>2]-A);C=C+d*(+g[b+108>>2]-C);g[b+244>>2]=y;g[b+248>>2]=A;g[b+252>>2]=C;g[b+256>>2]=0.0;z=+g[b+164>>2];B=+g[b+168>>2];D=+g[b+172>>2];z=z+d*(+g[b+180>>2]-z);B=B+d*(+g[b+184>>2]-B);D=D+d*(+g[b+188>>2]-D);g[b+260>>2]=z;g[b+264>>2]=B;g[b+268>>2]=D;g[b+272>>2]=0.0;g[b+276>>2]=y-z;g[b+280>>2]=A-B;g[b+284>>2]=C-D;g[b+288>>2]=0.0;We(b,b+332|0);if((+g[b+336>>2]>=0.0?+g[b+340>>2]>=0.0:0)?+g[b+344>>2]>=0.0:0)e=+g[b+348>>2]>=0.0&1;else e=0;a[b+312>>0]=e;b=e;b=b<<24>>24!=0;i=G;return b|0}case 3:{c[G+16>>2]=0;c[G+16+4>>2]=0;c[G+16+8>>2]=0;c[G+16+12>>2]=0;Fe(G+16|0,b+4|0,b+20|0,b+36|0,b+316|0);w=+g[b+336>>2];x=+g[b+340>>2];D=+g[b+344>>2];y=+g[b+84>>2]*w+ +g[b+100>>2]*x+ +g[b+116>>2]*D;A=w*+g[b+88>>2]+x*+g[b+104>>2]+D*+g[b+120>>2];C=w*+g[b+92>>2]+x*+g[b+108>>2]+D*+g[b+124>>2];g[b+244>>2]=y;g[b+248>>2]=A;g[b+252>>2]=C;g[b+256>>2]=0.0;z=+g[b+164>>2]*w+ +g[b+180>>2]*x+ +g[b+196>>2]*D;B=w*+g[b+168>>2]+x*+g[b+184>>2]+D*+g[b+200>>2];D=w*+g[b+172>>2]+x*+g[b+188>>2]+D*+g[b+204>>2];g[b+260>>2]=z;g[b+264>>2]=B;g[b+268>>2]=D;g[b+272>>2]=0.0;g[b+276>>2]=y-z;g[b+280>>2]=A-B;g[b+284>>2]=C-D;g[b+288>>2]=0.0;We(b,b+332|0);if((+g[b+336>>2]>=0.0?+g[b+340>>2]>=0.0:0)?+g[b+344>>2]>=0.0:0)e=+g[b+348>>2]>=0.0&1;else e=0;a[b+312>>0]=e;b=e;b=b<<24>>24!=0;i=G;return b|0}case 4:{c[G>>2]=0;c[G+4>>2]=0;c[G+8>>2]=0;c[G+12>>2]=0;E=G+16+16|0;a[E>>0]=0;c[b+316>>2]=0;c[b+316+4>>2]=0;c[b+316+8>>2]=0;c[b+316+12>>2]=0;a[b+332>>0]=e|15;I=+g[b+20>>2];R=+g[b+4>>2];O=+g[b+24>>2];H=+g[b+8>>2];K=+g[b+28>>2];S=+g[b+12>>2];N=+g[b+36>>2];P=+g[b+40>>2];L=+g[b+44>>2];J=+g[b+52>>2];Q=+g[b+56>>2];M=+g[b+60>>2];T=((O-H)*(L-S)-(K-S)*(P-H))*(J-R)+((K-S)*(N-R)-(I-R)*(L-S))*(Q-H)+((I-R)*(P-H)-(O-H)*(N-R))*(M-S);e=T*T<9.99999905104687e-009?-1:((0.0-R)*((O-H)*(L-S)-(K-S)*(P-H))+(0.0-H)*((K-S)*(N-R)-(I-R)*(L-S))+((I-R)*(P-H)-(O-H)*(N-R))*(0.0-S))*T<0.0&1;T=(K-S)*((N-R)*(Q-H)-(P-H)*(J-R))+((I-R)*((P-H)*(M-S)-(L-S)*(Q-H))+(O-H)*((L-S)*(J-R)-(N-R)*(M-S)));m=T*T<9.99999905104687e-009?-1:((0.0-S)*((N-R)*(Q-H)-(P-H)*(J-R))+((0.0-R)*((P-H)*(M-S)-(L-S)*(Q-H))+(0.0-H)*((L-S)*(J-R)-(N-R)*(M-S))))*T<0.0&1;T=(L-S)*((O-H)*(J-R)-(I-R)*(Q-H))+((N-R)*((K-S)*(Q-H)-(O-H)*(M-S))+(P-H)*((I-R)*(M-S)-(K-S)*(J-R)));n=T*T<9.99999905104687e-009?-1:((0.0-S)*((O-H)*(J-R)-(I-R)*(Q-H))+((0.0-R)*((K-S)*(Q-H)-(O-H)*(M-S))+(0.0-H)*((I-R)*(M-S)-(K-S)*(J-R))))*T<0.0&1;H=(S-K)*((P-O)*(J-I)-(N-I)*(Q-O))+((R-I)*((L-K)*(Q-O)-(P-O)*(M-K))+(H-O)*((N-I)*(M-K)-(L-K)*(J-I)));u=H*H<9.99999905104687e-009?-1:((0.0-K)*((P-O)*(J-I)-(N-I)*(Q-O))+((0.0-I)*((L-K)*(Q-O)-(P-O)*(M-K))+(0.0-O)*((N-I)*(M-K)-(L-K)*(J-I))))*H<0.0&1;do if((m|e|n|u|0)<0){a[b+352>>0]=1;e=b+312|0;F=42}else{if(!(m|e|n|u)){if(a[b+352>>0]|0){e=b+312|0;F=42;break}a[b+312>>0]=1;c[b+276>>2]=0;c[b+276+4>>2]=0;c[b+276+8>>2]=0;c[b+276+12>>2]=0;e=1;break}if((e|0)!=0?(Fe(G,b+4|0,b+20|0,b+36|0,G+16|0),d=+g[G+16>>2],f=+g[G+16+4>>2],h=+g[G+16+8>>2],j=d-+g[G>>2],k=f-+g[G+4>>2],l=h-+g[G+8>>2],j*j+k*k+l*l<34028234663852886.0e22):0){U=c[G+16+12>>2]|0;g[b+316>>2]=d;g[b+320>>2]=f;g[b+324>>2]=h;c[b+328>>2]=U;U=a[E>>0]|0;a[b+332>>0]=U&1|a[b+332>>0]&-16|U&2|U&4;U=c[G+16+24>>2]|0;e=c[G+16+28>>2]|0;c[b+336>>2]=c[G+16+20>>2];c[b+340>>2]=U;c[b+344>>2]=e;g[b+348>>2]=0.0;d=j*j+k*k+l*l}else d=34028234663852886.0e22;if((m|0)!=0?(Fe(G,b+4|0,b+36|0,b+52|0,G+16|0),o=+g[G+16>>2],p=+g[G+16+4>>2],q=+g[G+16+8>>2],r=o-+g[G>>2],s=p-+g[G+4>>2],t=q-+g[G+8>>2],r*r+s*s+t*t<d):0){m=c[G+16+12>>2]|0;g[b+316>>2]=o;g[b+320>>2]=p;g[b+324>>2]=q;c[b+328>>2]=m;m=a[E>>0]|0;a[b+332>>0]=m<<1&8|(m&1|a[b+332>>0]&-16|m<<1&4);m=c[G+16+24>>2]|0;U=c[G+16+28>>2]|0;c[b+336>>2]=c[G+16+20>>2];g[b+340>>2]=0.0;c[b+344>>2]=m;c[b+348>>2]=U;d=r*r+s*s+t*t}if((n|0)!=0?(Fe(G,b+4|0,b+52|0,b+20|0,G+16|0),v=+g[G+16>>2],w=+g[G+16+4>>2],x=+g[G+16+8>>2],y=v-+g[G>>2],z=w-+g[G+4>>2],A=x-+g[G+8>>2],y*y+z*z+A*A<d):0){n=c[G+16+12>>2]|0;g[b+316>>2]=v;g[b+320>>2]=w;g[b+324>>2]=x;c[b+328>>2]=n;n=a[E>>0]|0;a[b+332>>0]=n<<2&8|(n&1|a[b+332>>0]&-16|(n&255)>>>1&2);n=c[G+16+28>>2]|0;U=c[G+16+24>>2]|0;c[b+336>>2]=c[G+16+20>>2];c[b+340>>2]=n;g[b+344>>2]=0.0;c[b+348>>2]=U;d=y*y+z*z+A*A}if(u|0?(Fe(G,b+20|0,b+52|0,b+36|0,G+16|0),B=+g[G+16>>2],C=+g[G+16+4>>2],D=+g[G+16+8>>2],R=B-+g[G>>2],S=C-+g[G+4>>2],T=D-+g[G+8>>2],R*R+S*S+T*T<d):0){u=c[G+16+12>>2]|0;g[b+316>>2]=B;g[b+320>>2]=C;g[b+324>>2]=D;c[b+328>>2]=u;u=a[E>>0]|0;a[b+332>>0]=u&4|a[b+332>>0]&-16|u<<1&2|u<<2&8;u=c[G+16+20>>2]|0;E=c[G+16+28>>2]|0;U=c[G+16+24>>2]|0;g[b+336>>2]=0.0;c[b+340>>2]=u;c[b+344>>2]=E;c[b+348>>2]=U}L=+g[b+336>>2];M=+g[b+340>>2];N=+g[b+344>>2];T=+g[b+348>>2];O=+g[b+84>>2]*L+ +g[b+100>>2]*M+ +g[b+116>>2]*N+ +g[b+132>>2]*T;Q=L*+g[b+88>>2]+M*+g[b+104>>2]+N*+g[b+120>>2]+T*+g[b+136>>2];S=L*+g[b+92>>2]+M*+g[b+108>>2]+N*+g[b+124>>2]+T*+g[b+140>>2];g[b+244>>2]=O;g[b+248>>2]=Q;g[b+252>>2]=S;g[b+256>>2]=0.0;P=+g[b+164>>2]*L+ +g[b+180>>2]*M+ +g[b+196>>2]*N+ +g[b+212>>2]*T;R=L*+g[b+168>>2]+M*+g[b+184>>2]+N*+g[b+200>>2]+T*+g[b+216>>2];T=L*+g[b+172>>2]+M*+g[b+188>>2]+N*+g[b+204>>2]+T*+g[b+220>>2];g[b+260>>2]=P;g[b+264>>2]=R;g[b+268>>2]=T;g[b+272>>2]=0.0;g[b+276>>2]=O-P;g[b+280>>2]=Q-R;g[b+284>>2]=S-T;g[b+288>>2]=0.0;We(b,b+332|0);if((+g[b+336>>2]>=0.0?+g[b+340>>2]>=0.0:0)?+g[b+344>>2]>=0.0:0)e=+g[b+348>>2]>=0.0&1;else e=0;a[b+312>>0]=e}while(0);if((F|0)==42){a[e>>0]=0;e=0}U=e;U=U<<24>>24!=0;i=G;return U|0}default:{a[b+312>>0]=0;U=0;U=U<<24>>24!=0;i=G;return U|0}}return 0}function Ic(b,d,e,f,h,j,k,m,n,o){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;m=m|0;n=n|0;o=o|0;var p=0.0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0;C=i;i=i+4224|0;if(((c[e+4>>2]|0)+-17|0)>>>0<2)B=((c[f+4>>2]|0)+-17|0)>>>0<2;else B=0;b=0;do{Ee();t=+g[24276+(b<<4)>>2];u=+g[24276+(b<<4)+4>>2];v=+g[24276+(b<<4)+8>>2];x=+g[h+4>>2]*-t+ +g[h+20>>2]*-u+ +g[h+36>>2]*-v;w=+g[h+8>>2]*-t+ +g[h+24>>2]*-u+ +g[h+40>>2]*-v;g[C+1248+(b<<4)>>2]=+g[h>>2]*-t+ +g[h+16>>2]*-u+ +g[h+32>>2]*-v;g[C+1248+(b<<4)+4>>2]=x;g[C+1248+(b<<4)+8>>2]=w;g[C+1248+(b<<4)+12>>2]=0.0;w=t*+g[j+4>>2]+u*+g[j+20>>2]+v*+g[j+36>>2];x=t*+g[j+8>>2]+u*+g[j+24>>2]+v*+g[j+40>>2];g[C+256+(b<<4)>>2]=t*+g[j>>2]+u*+g[j+16>>2]+v*+g[j+32>>2];g[C+256+(b<<4)+4>>2]=w;g[C+256+(b<<4)+8>>2]=x;g[C+256+(b<<4)+12>>2]=0.0;b=b+1|0}while((b|0)!=42);r=ob[c[(c[e>>2]|0)+84>>2]&127](e)|0;if((r|0)>0){b=0;q=42;while(1){Ub[c[(c[e>>2]|0)+88>>2]&127](e,b,C+176|0);w=+g[C+176>>2];x=+g[C+176+4>>2];v=+g[C+176+8>>2];u=w*+g[h+16>>2]+x*+g[h+20>>2]+v*+g[h+24>>2];t=w*+g[h+32>>2]+x*+g[h+36>>2]+v*+g[h+40>>2];g[C+176>>2]=+g[h>>2]*w+ +g[h+4>>2]*x+ +g[h+8>>2]*v;g[C+176+4>>2]=u;g[C+176+8>>2]=t;g[C+176+12>>2]=0.0;Ee();A=24276+(q<<4)|0;c[A>>2]=c[C+176>>2];c[A+4>>2]=c[C+176+4>>2];c[A+8>>2]=c[C+176+8>>2];c[A+12>>2]=c[C+176+12>>2];t=+g[C+176>>2];u=+g[C+176+4>>2];v=+g[C+176+8>>2];x=+g[h+4>>2]*-t+ +g[h+20>>2]*-u+ +g[h+36>>2]*-v;w=+g[h+8>>2]*-t+ +g[h+24>>2]*-u+ +g[h+40>>2]*-v;g[C+1248+(q<<4)>>2]=+g[h>>2]*-t+ +g[h+16>>2]*-u+ +g[h+32>>2]*-v;g[C+1248+(q<<4)+4>>2]=x;g[C+1248+(q<<4)+8>>2]=w;g[C+1248+(q<<4)+12>>2]=0.0;w=t*+g[j+4>>2]+u*+g[j+20>>2]+v*+g[j+36>>2];x=t*+g[j+8>>2]+u*+g[j+24>>2]+v*+g[j+40>>2];g[C+256+(q<<4)>>2]=+g[j>>2]*t+ +g[j+16>>2]*u+ +g[j+32>>2]*v;g[C+256+(q<<4)+4>>2]=w;g[C+256+(q<<4)+8>>2]=x;g[C+256+(q<<4)+12>>2]=0.0;b=b+1|0;if((b|0)==(r|0))break;else q=q+1|0}q=r+42|0}else q=42;s=ob[c[(c[f>>2]|0)+84>>2]&127](f)|0;if((s|0)>0){b=0;r=q;while(1){Ub[c[(c[f>>2]|0)+88>>2]&127](f,b,C+176|0);w=+g[C+176>>2];x=+g[C+176+4>>2];v=+g[C+176+8>>2];u=w*+g[j+16>>2]+x*+g[j+20>>2]+v*+g[j+24>>2];t=w*+g[j+32>>2]+x*+g[j+36>>2]+v*+g[j+40>>2];g[C+176>>2]=+g[j>>2]*w+ +g[j+4>>2]*x+ +g[j+8>>2]*v;g[C+176+4>>2]=u;g[C+176+8>>2]=t;g[C+176+12>>2]=0.0;Ee();A=24276+(r<<4)|0;c[A>>2]=c[C+176>>2];c[A+4>>2]=c[C+176+4>>2];c[A+8>>2]=c[C+176+8>>2];c[A+12>>2]=c[C+176+12>>2];t=+g[C+176>>2];u=+g[C+176+4>>2];v=+g[C+176+8>>2];x=+g[h+4>>2]*-t+ +g[h+20>>2]*-u+ +g[h+36>>2]*-v;w=+g[h+8>>2]*-t+ +g[h+24>>2]*-u+ +g[h+40>>2]*-v;g[C+1248+(r<<4)>>2]=+g[h>>2]*-t+ +g[h+16>>2]*-u+ +g[h+32>>2]*-v;g[C+1248+(r<<4)+4>>2]=x;g[C+1248+(r<<4)+8>>2]=w;g[C+1248+(r<<4)+12>>2]=0.0;w=t*+g[j+4>>2]+u*+g[j+20>>2]+v*+g[j+36>>2];x=t*+g[j+8>>2]+u*+g[j+24>>2]+v*+g[j+40>>2];g[C+256+(r<<4)>>2]=+g[j>>2]*t+ +g[j+16>>2]*u+ +g[j+32>>2]*v;g[C+256+(r<<4)+4>>2]=w;g[C+256+(r<<4)+8>>2]=x;g[C+256+(r<<4)+12>>2]=0.0;b=b+1|0;if((b|0)==(s|0))break;else r=r+1|0}q=s+q|0}Yb[c[(c[e>>2]|0)+76>>2]&127](e,C+1248|0,C+3232|0,q);Yb[c[(c[f>>2]|0)+76>>2]&127](f,C+256|0,C+2240|0,q);if((q|0)>0){w=999999984306749440.0;A=0;b=0;r=0;s=0;x=0.0;while(1){Ee();p=+g[24276+(A<<4)>>2];t=+g[24276+(A<<4)+4>>2];u=+g[24276+(A<<4)+12>>2];v=B?0.0:+g[24276+(A<<4)+8>>2];if(p*p+t*t+v*v>.01?(E=+g[C+3232+(A<<4)>>2],D=+g[C+3232+(A<<4)+4>>2],y=+g[C+3232+(A<<4)+8>>2],H=+g[C+2240+(A<<4)>>2],G=+g[C+2240+(A<<4)+4>>2],F=+g[C+2240+(A<<4)+8>>2],y=p*(H*+g[j>>2]+G*+g[j+4>>2]+F*+g[j+8>>2]+ +g[j+48>>2]-(E*+g[h>>2]+D*+g[h+4>>2]+y*+g[h+8>>2]+ +g[h+48>>2]))+t*(H*+g[j+16>>2]+G*+g[j+20>>2]+F*+g[j+24>>2]+ +g[j+52>>2]-(E*+g[h+16>>2]+D*+g[h+20>>2]+y*+g[h+24>>2]+ +g[h+52>>2]))+v*((B?0.0:H*+g[j+32>>2]+G*+g[j+36>>2]+F*+g[j+40>>2]+ +g[j+56>>2])-(B?0.0:E*+g[h+32>>2]+D*+g[h+36>>2]+y*+g[h+40>>2]+ +g[h+56>>2])),y<w):0){b=(g[l>>2]=p,c[l>>2]|0);r=(g[l>>2]=t,c[l>>2]|0);p=y;z=(g[l>>2]=v,c[l>>2]|0)}else{p=w;z=s;u=x}A=A+1|0;if((A|0)==(q|0)){y=p;s=b;q=z;break}else{w=p;s=z;x=u}}}else{y=999999984306749440.0;s=0;r=0;q=0;u=0.0}switch(c[e+4>>2]|0){case 4:case 5:case 10:case 11:case 13:case 1:case 0:case 8:break;default:+Cb[c[(c[e>>2]|0)+48>>2]&15](e)}v=(c[l>>2]=s,+g[l>>2]);w=(c[l>>2]=r,+g[l>>2]);x=(c[l>>2]=q,+g[l>>2]);switch(c[f+4>>2]|0){case 4:case 5:case 10:case 11:case 13:case 1:case 0:case 8:break;default:+Cb[c[(c[f>>2]|0)+48>>2]&15](f)}if(y<0.0){n=0;i=C;return n|0}switch(c[e+4>>2]|0){case 8:{p=+g[e+32>>2]*+g[e+16>>2];break}case 0:{p=+g[e+48>>2];break}case 1:{p=+g[e+48>>2];break}case 13:{p=+g[e+48>>2];break}case 11:{p=+g[e+48>>2];break}case 10:{p=+g[e+48>>2];break}case 4:case 5:{p=+g[e+48>>2];break}default:p=+Cb[c[(c[e>>2]|0)+48>>2]&15](e)}b=c[f+4>>2]|0;switch(b|0){case 8:{t=+g[f+32>>2]*+g[f+16>>2];b=8;break}case 0:{t=+g[f+48>>2];b=0;break}case 1:{t=+g[f+48>>2];b=1;break}case 13:{t=+g[f+48>>2];b=13;break}case 11:{t=+g[f+48>>2];b=11;break}case 10:{t=+g[f+48>>2];b=10;break}case 4:case 5:{t=+g[f+48>>2];break}default:{t=+Cb[c[(c[f>>2]|0)+48>>2]&15](f);b=c[f+4>>2]|0}}p=y+(p+t+.5);c[C+176>>2]=8848;c[C+176+4>>2]=0;c[C+176+8>>2]=1065353216;c[C+176+12>>2]=0;g[C+176+16>>2]=0.0;c[C+176+20>>2]=0;c[C+176+24>>2]=d;c[C+176+28>>2]=e;c[C+176+32>>2]=f;c[C+176+36>>2]=c[e+4>>2];c[C+176+40>>2]=b;g[C+176+44>>2]=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);g[C+176+48>>2]=+Cb[c[(c[f>>2]|0)+48>>2]&15](f);a[C+176+52>>0]=0;c[C+176+60>>2]=-1;c[C+176+72>>2]=1;c[C+176+76>>2]=1;F=v*p+ +g[h+48>>2];G=w*p+ +g[h+52>>2];H=x*p+ +g[h+56>>2];c[C+44>>2]=c[h>>2];c[C+44+4>>2]=c[h+4>>2];c[C+44+8>>2]=c[h+8>>2];c[C+44+12>>2]=c[h+12>>2];c[C+44+16>>2]=c[h+16>>2];c[C+44+16+4>>2]=c[h+16+4>>2];c[C+44+16+8>>2]=c[h+16+8>>2];c[C+44+16+12>>2]=c[h+16+12>>2];c[C+44+32>>2]=c[h+32>>2];c[C+44+32+4>>2]=c[h+32+4>>2];c[C+44+32+8>>2]=c[h+32+8>>2];c[C+44+32+12>>2]=c[h+32+12>>2];g[C+44+48>>2]=F;g[C+44+52>>2]=G;g[C+44+56>>2]=H;g[C+44+60>>2]=0.0;c[C+44+64>>2]=c[j>>2];c[C+44+64+4>>2]=c[j+4>>2];c[C+44+64+8>>2]=c[j+8>>2];c[C+44+64+12>>2]=c[j+12>>2];c[C+44+80>>2]=c[j+16>>2];c[C+44+80+4>>2]=c[j+16+4>>2];c[C+44+80+8>>2]=c[j+16+8>>2];c[C+44+80+12>>2]=c[j+16+12>>2];c[C+44+96>>2]=c[j+32>>2];c[C+44+96+4>>2]=c[j+32+4>>2];c[C+44+96+8>>2]=c[j+32+8>>2];c[C+44+96+12>>2]=c[j+32+12>>2];c[C+44+112>>2]=c[j+48>>2];c[C+44+112+4>>2]=c[j+48+4>>2];c[C+44+112+8>>2]=c[j+48+8>>2];c[C+44+112+12>>2]=c[j+48+12>>2];g[C+44+128>>2]=999999984306749440.0;c[C>>2]=8888;a[C+40>>0]=0;g[C+176+4>>2]=-v;g[C+176+8>>2]=-w;g[C+176+12>>2]=-x;g[C+176+16>>2]=0.0;uc(C+176|0,C+44|0,C,o,0);p=p-+g[C+36>>2];b=a[C+40>>0]|0;if(b<<24>>24){G=+g[C+24>>2]-w*p;H=+g[C+28>>2]-x*p;g[m>>2]=+g[C+20>>2]-v*p;g[m+4>>2]=G;g[m+8>>2]=H;g[m+12>>2]=0.0;c[n>>2]=c[C+20>>2];c[n+4>>2]=c[C+20+4>>2];c[n+8>>2]=c[C+20+8>>2];c[n+12>>2]=c[C+20+12>>2];c[k>>2]=s;c[k+4>>2]=r;c[k+8>>2]=q;g[k+12>>2]=u}n=b<<24>>24!=0;i=C;return n|0}function Jc(b){b=b|0;var d=0.0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0;u=i;i=i+176|0;if(!(a[b+738>>0]|0)){i=u;return}g[b+36>>2]=0.0;g[b+744>>2]=0.0;if(!(a[b+736>>0]|0)){e=c[b+28>>2]|0;k=+g[b+600>>2];l=+g[b+604>>2];q=+g[b+608>>2];s=k*+g[e+20>>2]+l*+g[e+24>>2]+q*+g[e+28>>2]+ +g[e+56>>2];f=c[b+32>>2]|0;m=+g[b+664>>2];n=+g[b+668>>2];r=+g[b+672>>2];t=m*+g[f+20>>2]+n*+g[f+24>>2]+r*+g[f+28>>2]+ +g[f+56>>2];o=m*+g[f+36>>2]+n*+g[f+40>>2]+r*+g[f+44>>2]+ +g[f+60>>2];p=k*+g[e+4>>2]+l*+g[e+8>>2]+q*+g[e+12>>2]+ +g[e+52>>2];q=k*+g[e+36>>2]+l*+g[e+40>>2]+q*+g[e+44>>2]+ +g[e+60>>2];r=m*+g[f+4>>2]+n*+g[f+8>>2]+r*+g[f+12>>2]+ +g[f+52>>2];if((r-p)*(r-p)+(t-s)*(t-s)+(o-q)*(o-q)>1.1920928955078125e-007){h=1.0/+G(+((r-p)*(r-p)+(t-s)*(t-s)+(o-q)*(o-q)));g[u+128>>2]=(r-p)*h;g[u+128+4>>2]=(t-s)*h;g[u+128+8>>2]=(o-q)*h;c[u+128+12>>2]=0;m=(o-q)*h;d=(t-s)*h;h=(r-p)*h}else{c[u+128>>2]=1065353216;c[u+128+4>>2]=0;c[u+128+8>>2]=0;g[u+128+12>>2]=0.0;m=0.0;d=0.0;h=1.0}if(+F(+m)>.7071067690849304){w=m*m+d*d;v=1.0/+G(+w);k=-(v*m);m=v*d;n=-(m*h);j=h*k;l=0.0;d=w*v;h=m}else{k=h*h+d*d;j=1.0/+G(+k);l=-(d*j);d=j*h;n=m*l;j=k*j;k=d;d=-(d*m);h=0.0}g[u+128+16>>2]=l;g[u+128+20>>2]=k;g[u+128+24>>2]=h;g[u+128+32>>2]=d;g[u+128+36>>2]=n;g[u+128+40>>2]=j;e=0;while(1){x=c[b+28>>2]|0;c[u+80>>2]=c[x+4>>2];c[u+80+4>>2]=c[x+20>>2];c[u+80+8>>2]=c[x+36>>2];g[u+80+12>>2]=0.0;c[u+80+16>>2]=c[x+8>>2];c[u+80+20>>2]=c[x+24>>2];c[u+80+24>>2]=c[x+40>>2];g[u+80+28>>2]=0.0;c[u+80+32>>2]=c[x+12>>2];c[u+80+36>>2]=c[x+28>>2];c[u+80+40>>2]=c[x+44>>2];g[u+80+44>>2]=0.0;c[u+32>>2]=c[f+4>>2];c[u+32+4>>2]=c[f+20>>2];c[u+32+8>>2]=c[f+36>>2];g[u+32+12>>2]=0.0;c[u+32+16>>2]=c[f+8>>2];c[u+32+20>>2]=c[f+24>>2];c[u+32+24>>2]=c[f+40>>2];g[u+32+28>>2]=0.0;c[u+32+32>>2]=c[f+12>>2];c[u+32+36>>2]=c[f+28>>2];c[u+32+40>>2]=c[f+44>>2];g[u+32+44>>2]=0.0;w=s-+g[x+56>>2];v=q-+g[x+60>>2];g[u+16>>2]=p-+g[x+52>>2];g[u+16+4>>2]=w;g[u+16+8>>2]=v;g[u+16+12>>2]=0.0;v=t-+g[f+56>>2];w=o-+g[f+60>>2];g[u>>2]=r-+g[f+52>>2];g[u+4>>2]=v;g[u+8>>2]=w;g[u+12>>2]=0.0;x=c[b+28>>2]|0;f=c[b+32>>2]|0;Eg(b+48+(e*84|0)|0,u+80|0,u+32|0,u+16|0,u,u+128+(e<<4)|0,x+436|0,+g[x+384>>2],f+436|0,+g[f+384>>2]);e=e+1|0;if((e|0)==3)break;f=c[b+32>>2]|0}}n=+g[b+560>>2];o=+g[b+576>>2];p=+g[b+592>>2];if(+F(+p)>.7071067690849304){m=1.0/+G(+(p*p+o*o));d=n*-(p*m);h=(p*p+o*o)*m;j=0.0;k=o*m;l=-(n*o*m);m=-(p*m)}else{m=1.0/+G(+(n*n+o*o));d=(n*n+o*o)*m;h=-(p*n*m);j=-(o*m);k=0.0;l=p*-(o*m);m=n*m}f=c[b+28>>2]|0;K=+g[f+4>>2];J=+g[f+8>>2];s=+g[f+12>>2];R=j*K+m*J+k*s;I=+g[f+20>>2];H=+g[f+24>>2];v=+g[f+28>>2];T=j*I+m*H+k*v;E=+g[f+36>>2];q=+g[f+40>>2];C=+g[f+44>>2];W=j*E+m*q+k*C;B=h*K+l*J+d*s;M=h*I+l*H+d*v;N=h*E+l*q+d*C;e=c[b+32>>2]|0;A=+g[e+4>>2];z=+g[e+20>>2];y=+g[e+36>>2];l=+g[e+8>>2];m=+g[e+24>>2];t=+g[e+40>>2];P=+g[e+12>>2];S=+g[e+28>>2];V=+g[e+44>>2];c[b+300>>2]=0;c[b+300+4>>2]=0;c[b+300+8>>2]=0;c[b+300+12>>2]=0;g[b+316>>2]=R*K+T*I+W*E;g[b+320>>2]=R*J+T*H+W*q;g[b+324>>2]=R*s+T*v+W*C;g[b+328>>2]=0.0;g[b+332>>2]=A*-R+z*-T+y*-W;g[b+336>>2]=l*-R+m*-T+t*-W;g[b+340>>2]=P*-R+S*-T+V*-W;g[b+344>>2]=0.0;D=(R*K+T*I+W*E)*+g[f+436>>2];L=(R*J+T*H+W*q)*+g[f+440>>2];d=(R*s+T*v+W*C)*+g[f+444>>2];g[b+348>>2]=D;g[b+352>>2]=L;g[b+356>>2]=d;g[b+360>>2]=0.0;k=(A*-R+z*-T+y*-W)*+g[e+436>>2];w=(l*-R+m*-T+t*-W)*+g[e+440>>2];X=(P*-R+S*-T+V*-W)*+g[e+444>>2];g[b+364>>2]=k;g[b+368>>2]=w;g[b+372>>2]=X;g[b+376>>2]=0.0;g[b+380>>2]=(R*K+T*I+W*E)*D+(R*J+T*H+W*q)*L+(R*s+T*v+W*C)*d+((A*-R+z*-T+y*-W)*k+(l*-R+m*-T+t*-W)*w+(P*-R+S*-T+V*-W)*X);e=c[b+28>>2]|0;X=+g[e+4>>2];W=+g[e+20>>2];V=+g[e+36>>2];T=+g[e+8>>2];S=+g[e+24>>2];R=+g[e+40>>2];P=+g[e+12>>2];w=+g[e+28>>2];t=+g[e+44>>2];f=c[b+32>>2]|0;m=+g[f+4>>2];l=+g[f+20>>2];k=+g[f+36>>2];y=+g[f+8>>2];z=+g[f+24>>2];A=+g[f+40>>2];d=+g[f+12>>2];L=+g[f+28>>2];D=+g[f+44>>2];c[b+384>>2]=0;c[b+384+4>>2]=0;c[b+384+8>>2]=0;c[b+384+12>>2]=0;g[b+400>>2]=B*X+M*W+N*V;g[b+404>>2]=B*T+M*S+N*R;g[b+408>>2]=B*P+M*w+N*t;g[b+412>>2]=0.0;g[b+416>>2]=m*-B+l*-M+k*-N;g[b+420>>2]=y*-B+z*-M+A*-N;g[b+424>>2]=d*-B+L*-M+D*-N;g[b+428>>2]=0.0;U=(B*X+M*W+N*V)*+g[e+436>>2];Q=(B*T+M*S+N*R)*+g[e+440>>2];r=(B*P+M*w+N*t)*+g[e+444>>2];g[b+432>>2]=U;g[b+436>>2]=Q;g[b+440>>2]=r;g[b+444>>2]=0.0;j=(m*-B+l*-M+k*-N)*+g[f+436>>2];h=(y*-B+z*-M+A*-N)*+g[f+440>>2];O=(d*-B+L*-M+D*-N)*+g[f+444>>2];g[b+448>>2]=j;g[b+452>>2]=h;g[b+456>>2]=O;g[b+460>>2]=0.0;g[b+464>>2]=(B*X+M*W+N*V)*U+(B*T+M*S+N*R)*Q+(B*P+M*w+N*t)*r+((m*-B+l*-M+k*-N)*j+(y*-B+z*-M+A*-N)*h+(d*-B+L*-M+D*-N)*O);f=c[b+28>>2]|0;O=+g[f+4>>2];N=+g[f+20>>2];D=+g[f+36>>2];M=+g[f+8>>2];L=+g[f+24>>2];B=+g[f+40>>2];d=+g[f+12>>2];h=+g[f+28>>2];A=+g[f+44>>2];e=c[b+32>>2]|0;z=+g[e+4>>2];y=+g[e+20>>2];j=+g[e+36>>2];k=+g[e+8>>2];l=+g[e+24>>2];m=+g[e+40>>2];r=+g[e+12>>2];t=+g[e+28>>2];w=+g[e+44>>2];c[b+468>>2]=0;c[b+468+4>>2]=0;c[b+468+8>>2]=0;c[b+468+12>>2]=0;D=(K*n+J*o+s*p)*O+(I*n+H*o+v*p)*N+(E*n+q*o+C*p)*D;B=(K*n+J*o+s*p)*M+(I*n+H*o+v*p)*L+(E*n+q*o+C*p)*B;A=(K*n+J*o+s*p)*d+(I*n+H*o+v*p)*h+(E*n+q*o+C*p)*A;g[b+484>>2]=D;g[b+488>>2]=B;g[b+492>>2]=A;g[b+496>>2]=0.0;s=-(K*n+J*o+s*p);v=-(I*n+H*o+v*p);h=-(E*n+q*o+C*p);g[b+500>>2]=z*s+y*v+j*h;g[b+504>>2]=k*s+l*v+m*h;g[b+508>>2]=r*s+t*v+w*h;g[b+512>>2]=0.0;C=D*+g[f+436>>2];n=B*+g[f+440>>2];o=A*+g[f+444>>2];g[b+516>>2]=C;g[b+520>>2]=n;g[b+524>>2]=o;g[b+528>>2]=0.0;p=(z*s+y*v+j*h)*+g[e+436>>2];q=(k*s+l*v+m*h)*+g[e+440>>2];d=(r*s+t*v+w*h)*+g[e+444>>2];g[b+532>>2]=p;g[b+536>>2]=q;g[b+540>>2]=d;g[b+544>>2]=0.0;g[b+548>>2]=D*C+B*n+A*o+((z*s+y*v+j*h)*p+(k*s+l*v+m*h)*q+(r*s+t*v+w*h)*d);g[b+724>>2]=0.0;e=c[b+28>>2]|0;f=c[b+32>>2]|0;d=+_i(b,e+4|0,f+4|0);g[b+728>>2]=d;g[b+708>>2]=0.0;g[b+712>>2]=0.0;a[b+716>>0]=0;h=+g[b+692>>2];do if(h>=0.0){d=+jh(d-+g[b+688>>2],6.2831854820251465);if(!(d<-3.1415927410125732)){if(d>3.1415927410125732)d=d+-6.2831854820251465}else d=d+6.2831854820251465;if(d<-h){a[b+716>>0]=1;g[b+708>>2]=-(d+h);g[b+712>>2]=1.0;break}if(d>h){a[b+716>>0]=1;g[b+708>>2]=h-d;g[b+712>>2]=-1.0}}while(0);T=+g[b+560>>2];U=+g[b+576>>2];X=+g[b+592>>2];V=T*+g[e+4>>2]+U*+g[e+8>>2]+X*+g[e+12>>2];W=T*+g[e+20>>2]+U*+g[e+24>>2]+X*+g[e+28>>2];X=T*+g[e+36>>2]+U*+g[e+40>>2]+X*+g[e+44>>2];g[b+720>>2]=1.0/(V*(V*+g[e+304>>2]+W*+g[e+320>>2]+X*+g[e+336>>2])+W*(V*+g[e+308>>2]+W*+g[e+324>>2]+X*+g[e+340>>2])+X*(V*+g[e+312>>2]+W*+g[e+328>>2]+X*+g[e+344>>2])+(V*(V*+g[f+304>>2]+W*+g[f+320>>2]+X*+g[f+336>>2])+W*(V*+g[f+308>>2]+W*+g[f+324>>2]+X*+g[f+340>>2])+X*(V*+g[f+312>>2]+W*+g[f+328>>2]+X*+g[f+344>>2])));i=u;return}function Kc(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,H=0.0,K=0.0,L=0.0,M=0,N=0,O=0,P=0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0;M=i;i=i+64|0;if(!(c[b+12>>2]|0)){i=M;return}f=(a[b+16>>0]|0)!=0;P=f?e:d;f=f?d:e;j=c[P+4>>2]|0;k=c[f+4>>2]|0;P=c[P+12>>2]|0;aa=+g[P>>2];$=+g[P+16>>2];_=+g[P+32>>2];Z=+g[P+4>>2];Y=+g[P+20>>2];o=+g[P+36>>2];l=+g[P+8>>2];r=+g[P+24>>2];y=+g[P+40>>2];T=+g[P+48>>2];S=+g[P+52>>2];R=+g[P+56>>2];O=c[f+12>>2]|0;X=+g[O>>2];W=+g[O+16>>2];p=+g[O+32>>2];V=+g[O+4>>2];U=+g[O+20>>2];q=+g[O+36>>2];x=+g[O+8>>2];v=+g[O+24>>2];t=+g[O+40>>2];Q=-+g[O+48>>2];E=-+g[O+52>>2];H=-+g[O+56>>2];K=+g[P>>2];L=+g[P+16>>2];D=+g[P+32>>2];B=+g[P+4>>2];A=+g[P+20>>2];z=+g[P+36>>2];w=+g[P+8>>2];u=+g[P+24>>2];s=+g[P+40>>2];P=c[(c[j>>2]|0)+64>>2]|0;n=-+g[k+52>>2];m=-+g[k+56>>2];C=-+g[k+60>>2];g[M+48>>2]=(aa*X+$*W+_*p)*n+(aa*V+$*U+_*q)*m+(aa*x+$*v+_*t)*C;g[M+48+4>>2]=(Z*X+Y*W+o*p)*n+(Z*V+Y*U+o*q)*m+(Z*x+Y*v+o*t)*C;g[M+48+8>>2]=(l*X+r*W+y*p)*n+(l*V+r*U+y*q)*m+(l*x+r*v+y*t)*C;g[M+48+12>>2]=0.0;Ub[P&127](M,j,M+48|0);C=+g[M>>2];y=+g[M+4>>2];r=+g[M+8>>2];l=+g[k+52>>2];m=+g[k+56>>2];n=+g[k+60>>2];o=n*(T*x+S*v+R*t+(x*Q+v*E+t*H)+((x*K+v*L+t*D)*C+(x*B+v*A+t*z)*y+(x*w+v*u+t*s)*r))+(l*(T*X+S*W+R*p+(X*Q+W*E+p*H)+((X*K+W*L+p*D)*C+(X*B+W*A+p*z)*y+(X*w+W*u+p*s)*r))+m*(T*V+S*U+R*q+(V*Q+U*E+q*H)+((V*K+U*L+q*D)*C+(V*B+U*A+q*z)*y+(V*w+U*u+q*s)*r)))-+g[k+68>>2];p=T*X+S*W+R*p+(X*Q+W*E+p*H)+((X*K+W*L+p*D)*C+(X*B+W*A+p*z)*y+(X*w+W*u+p*s)*r)-l*o;q=T*V+S*U+R*q+(V*Q+U*E+q*H)+((V*K+U*L+q*D)*C+(V*B+U*A+q*z)*y+(V*w+U*u+q*s)*r)-m*o;r=T*x+S*v+R*t+(x*Q+v*E+t*H)+((x*K+v*L+t*D)*C+(x*B+v*A+t*z)*y+(x*w+v*u+t*s)*r)-n*o;P=c[f+12>>2]|0;s=+g[P>>2];t=+g[P+4>>2];u=+g[P+8>>2];v=+g[P+16>>2];w=+g[P+20>>2];x=+g[P+24>>2];y=+g[P+32>>2];z=+g[P+36>>2];A=+g[P+40>>2];B=+g[P+48>>2];C=+g[P+52>>2];D=+g[P+56>>2];P=c[b+12>>2]|0;O=o<+g[P+784>>2];c[h+4>>2]=P;if(O){P=c[f+12>>2]|0;$=l*+g[P+16>>2]+m*+g[P+20>>2]+n*+g[P+24>>2];aa=l*+g[P+32>>2]+m*+g[P+36>>2]+n*+g[P+40>>2];g[M+48>>2]=+g[P>>2]*l+ +g[P+4>>2]*m+ +g[P+8>>2]*n;g[M+48+4>>2]=$;g[M+48+8>>2]=aa;g[M+48+12>>2]=0.0;g[M+32>>2]=u*r+(s*p+t*q)+B;g[M+32+4>>2]=p*v+q*w+r*x+C;g[M+32+8>>2]=p*y+q*z+r*A+D;g[M+32+12>>2]=0.0;Tb[c[(c[h>>2]|0)+16>>2]&15](h,M+48|0,M+32|0,o)}if((c[j+4>>2]|0)<7?(c[(c[h+4>>2]|0)+780>>2]|0)<(c[b+24>>2]|0):0){l=+g[k+60>>2];if(+F(+l)>.7071067690849304){n=+g[k+56>>2];aa=1.0/+G(+(l*l+n*n));m=0.0;n=n*aa;l=-(l*aa)}else{aa=+g[k+52>>2];m=+g[k+56>>2];l=1.0/+G(+(aa*aa+m*m));m=-(m*l);n=0.0;l=aa*l}H=.019999999552965164/+Cb[c[(c[j>>2]|0)+16>>2]&15](j);H=(H>.39269909262657166?.39269909262657166:H)*.5;E=+J(+H)/+G(+(m*m+l*l+n*n));L=m*E;K=l*E;E=n*E;H=+I(+H);f=c[b+20>>2]|0;if((f|0)>0){j=0;do{v=+g[k+52>>2];aa=+g[k+56>>2];B=+g[k+60>>2];z=+(j|0)*(6.2831854820251465/+(f|0))*.5;$=+J(+z)/+G(+(v*v+aa*aa+B*B));z=+I(+z);A=E*-(aa*$)+(L*z+H*-(v*$))-K*-(B*$);x=L*-(B*$)+(K*z+H*-(aa*$))-E*-(v*$);da=K*-(v*$)+(E*z+H*-(B*$))-L*-(aa*$);D=H*z-L*-(v*$)-K*-(aa*$)-E*-(B*$);ia=B*$*x+(v*$*D+z*A)-aa*$*da;ha=v*$*da+(z*x+aa*$*D)-B*$*A;la=aa*$*A+(B*$*D+z*da)-v*$*x;da=z*D-v*$*A-aa*$*x-B*$*da;f=(a[b+16>>0]|0)!=0;ba=f?e:d;f=f?d:e;P=c[ba+4>>2]|0;O=c[f+4>>2]|0;ba=c[ba+12>>2]|0;$=+g[ba>>2];B=+g[ba+4>>2];x=+g[ba+8>>2];aa=+g[ba+16>>2];A=+g[ba+20>>2];v=+g[ba+24>>2];D=+g[ba+32>>2];z=+g[ba+36>>2];t=+g[ba+40>>2];V=+g[ba+48>>2];W=+g[ba+52>>2];X=+g[ba+56>>2];ba=c[f+12>>2]|0;R=+g[ba>>2];S=+g[ba+16>>2];p=+g[ba+32>>2];T=+g[ba+4>>2];U=+g[ba+20>>2];q=+g[ba+36>>2];w=+g[ba+8>>2];u=+g[ba+24>>2];s=+g[ba+40>>2];Y=-+g[ba+48>>2];Z=-+g[ba+52>>2];_=-+g[ba+56>>2];ga=ia*(2.0/(ia*ia+ha*ha+la*la+da*da));n=ha*(2.0/(ia*ia+ha*ha+la*la+da*da));ca=la*(2.0/(ia*ia+ha*ha+la*la+da*da));na=x*(ia*ca-da*n)+(B*(ia*n+da*ca)+$*(1.0-(ha*n+la*ca)));ka=x*(ha*ca+da*ga)+($*(ia*n-da*ca)+B*(1.0-(ia*ga+la*ca)));l=$*(ia*ca+da*n)+B*(ha*ca-da*ga)+x*(1.0-(ia*ga+ha*n));ma=v*(ia*ca-da*n)+(A*(ia*n+da*ca)+aa*(1.0-(ha*n+la*ca)));ja=v*(ha*ca+da*ga)+(aa*(ia*n-da*ca)+A*(1.0-(ia*ga+la*ca)));y=aa*(ia*ca+da*n)+A*(ha*ca-da*ga)+v*(1.0-(ia*ga+ha*n));oa=t*(ia*ca-da*n)+(z*(ia*n+da*ca)+D*(1.0-(ha*n+la*ca)));la=t*(ha*ca+da*ga)+(D*(ia*n-da*ca)+z*(1.0-(ia*ga+la*ca)));n=D*(ia*ca+da*n)+z*(ha*ca-da*ga)+t*(1.0-(ia*ga+ha*n));ha=+g[ba>>2];ga=+g[ba+16>>2];ia=+g[ba+32>>2];da=+g[ba+4>>2];ca=+g[ba+20>>2];ea=+g[ba+36>>2];m=+g[ba+8>>2];r=+g[ba+24>>2];o=+g[ba+40>>2];ba=c[(c[P>>2]|0)+64>>2]|0;fa=-+g[O+52>>2];Q=-+g[O+56>>2];C=-+g[O+60>>2];g[M+32>>2]=(ia*oa+(ha*na+ga*ma))*fa+(ea*oa+(da*na+ca*ma))*Q+(o*oa+(m*na+r*ma))*C;g[M+32+4>>2]=(ia*la+(ha*ka+ga*ja))*fa+(ea*la+(da*ka+ca*ja))*Q+(o*la+(m*ka+r*ja))*C;g[M+32+8>>2]=(ia*n+(ha*l+ga*y))*fa+(ea*n+(da*l+ca*y))*Q+(o*n+(m*l+r*y))*C;g[M+32+12>>2]=0.0;Ub[ba&127](M+48|0,P,M+32|0);C=+g[M+48>>2];y=+g[M+48+4>>2];r=+g[M+48+8>>2];l=+g[O+52>>2];m=+g[O+56>>2];n=+g[O+60>>2];o=n*(V*w+W*u+X*s+(w*Y+u*Z+s*_)+(($*w+aa*u+D*s)*C+(B*w+A*u+z*s)*y+(x*w+v*u+t*s)*r))+(l*(V*R+W*S+X*p+(R*Y+S*Z+p*_)+(($*R+aa*S+D*p)*C+(B*R+A*S+z*p)*y+(x*R+v*S+t*p)*r))+m*(V*T+W*U+X*q+(T*Y+U*Z+q*_)+(($*T+aa*U+D*q)*C+(B*T+A*U+z*q)*y+(x*T+v*U+t*q)*r)))-+g[O+68>>2];p=V*R+W*S+X*p+(R*Y+S*Z+p*_)+(($*R+aa*S+D*p)*C+(B*R+A*S+z*p)*y+(x*R+v*S+t*p)*r)-l*o;q=V*T+W*U+X*q+(T*Y+U*Z+q*_)+(($*T+aa*U+D*q)*C+(B*T+A*U+z*q)*y+(x*T+v*U+t*q)*r)-m*o;r=V*w+W*u+X*s+(w*Y+u*Z+s*_)+(($*w+aa*u+D*s)*C+(B*w+A*u+z*s)*y+(x*w+v*u+t*s)*r)-n*o;O=c[f+12>>2]|0;s=+g[O>>2];t=+g[O+4>>2];u=+g[O+8>>2];v=+g[O+16>>2];w=+g[O+20>>2];x=+g[O+24>>2];y=+g[O+32>>2];z=+g[O+36>>2];A=+g[O+40>>2];B=+g[O+48>>2];C=+g[O+52>>2];D=+g[O+56>>2];O=c[b+12>>2]|0;P=o<+g[O+784>>2];c[h+4>>2]=O;if(P){ba=c[f+12>>2]|0;na=l*+g[ba+16>>2]+m*+g[ba+20>>2]+n*+g[ba+24>>2];oa=l*+g[ba+32>>2]+m*+g[ba+36>>2]+n*+g[ba+40>>2];g[M+32>>2]=+g[ba>>2]*l+ +g[ba+4>>2]*m+ +g[ba+8>>2]*n;g[M+32+4>>2]=na;g[M+32+8>>2]=oa;g[M+32+12>>2]=0.0;g[M+16>>2]=u*r+(s*p+t*q)+B;g[M+16+4>>2]=p*v+q*w+r*x+C;g[M+16+8>>2]=p*y+q*z+r*A+D;g[M+16+12>>2]=0.0;Tb[c[(c[h>>2]|0)+16>>2]&15](h,M+32|0,M+16|0,o)}j=j+1|0;f=c[b+20>>2]|0}while((j|0)<(f|0))}}do if((a[b+8>>0]|0?c[(c[b+12>>2]|0)+780>>2]|0:0)?(N=c[h+4>>2]|0,c[N+780>>2]|0):0){j=c[N+772>>2]|0;k=c[(c[h+8>>2]|0)+8>>2]|0;f=c[(c[h+12>>2]|0)+8>>2]|0;if((j|0)==(k|0)){Te(N,j+4|0,f+4|0);break}else{Te(N,f+4|0,k+4|0);break}}while(0);i=M;return}function Lc(d,e,f,h){d=d|0;e=e|0;f=f|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0;c[d+168>>2]=c[d+152>>2];c[e>>2]=8960;c[e+52>>2]=285;a[e+60>>0]=0;a[e+80>>0]=1;c[e+76>>2]=0;c[e+68>>2]=0;c[e+72>>2]=0;a[e+100>>0]=1;c[e+96>>2]=0;c[e+88>>2]=0;c[e+92>>2]=0;a[e+120>>0]=1;c[e+116>>2]=0;c[e+108>>2]=0;c[e+112>>2]=0;a[e+140>>0]=1;c[e+136>>2]=0;c[e+128>>2]=0;c[e+132>>2]=0;c[e+144>>2]=0;a[e+164>>0]=1;c[e+160>>2]=0;c[e+152>>2]=0;c[e+156>>2]=0;c[e+168>>2]=0;c[e+4>>2]=-8388609;c[e+8>>2]=-8388609;c[e+12>>2]=-8388609;g[e+16>>2]=0.0;c[e+20>>2]=2139095039;c[e+24>>2]=2139095039;c[e+28>>2]=2139095039;g[e+32>>2]=0.0;f=c[d+56>>2]|0;if(h){c[e+56>>2]=lw(f|0)|0;a[e+4>>0]=a[d+4+3>>0]|0;a[e+5>>0]=a[d+4+2>>0]|0;a[e+6>>0]=a[d+4+1>>0]|0;a[e+7>>0]=a[d+4>>0]|0;a[e+8>>0]=a[d+8+3>>0]|0;a[e+9>>0]=a[d+8+2>>0]|0;a[e+10>>0]=a[d+8+1>>0]|0;a[e+11>>0]=a[d+8>>0]|0;a[e+12>>0]=a[d+12+3>>0]|0;a[e+13>>0]=a[d+12+2>>0]|0;a[e+14>>0]=a[d+12+1>>0]|0;a[e+15>>0]=a[d+12>>0]|0;a[e+16>>0]=a[d+16+3>>0]|0;a[e+17>>0]=a[d+16+2>>0]|0;a[e+18>>0]=a[d+16+1>>0]|0;a[e+19>>0]=a[d+16>>0]|0;a[e+20>>0]=a[d+20+3>>0]|0;a[e+21>>0]=a[d+20+2>>0]|0;a[e+22>>0]=a[d+20+1>>0]|0;a[e+23>>0]=a[d+20>>0]|0;a[e+24>>0]=a[d+24+3>>0]|0;a[e+25>>0]=a[d+24+2>>0]|0;a[e+26>>0]=a[d+24+1>>0]|0;a[e+27>>0]=a[d+24>>0]|0;a[e+28>>0]=a[d+28+3>>0]|0;a[e+29>>0]=a[d+28+2>>0]|0;a[e+30>>0]=a[d+28+1>>0]|0;a[e+31>>0]=a[d+28>>0]|0;a[e+32>>0]=a[d+32+3>>0]|0;a[e+33>>0]=a[d+32+2>>0]|0;a[e+34>>0]=a[d+32+1>>0]|0;a[e+35>>0]=a[d+32>>0]|0;a[e+36>>0]=a[d+36+3>>0]|0;a[e+37>>0]=a[d+36+2>>0]|0;a[e+38>>0]=a[d+36+1>>0]|0;a[e+39>>0]=a[d+36>>0]|0;a[e+40>>0]=a[d+40+3>>0]|0;a[e+41>>0]=a[d+40+2>>0]|0;a[e+42>>0]=a[d+40+1>>0]|0;a[e+43>>0]=a[d+40>>0]|0;a[e+44>>0]=a[d+44+3>>0]|0;a[e+45>>0]=a[d+44+2>>0]|0;a[e+46>>0]=a[d+44+1>>0]|0;a[e+47>>0]=a[d+44>>0]|0;a[e+48>>0]=a[d+48+3>>0]|0;a[e+49>>0]=a[d+48+2>>0]|0;a[e+50>>0]=a[d+48+1>>0]|0;a[e+51>>0]=a[d+48>>0]|0;c[e+144>>2]=lw(c[d+144>>2]|0)|0;f=lw(c[d+168>>2]|0)|0}else{c[e+56>>2]=f;c[e+4>>2]=c[d+4>>2];c[e+4+4>>2]=c[d+4+4>>2];c[e+4+8>>2]=c[d+4+8>>2];c[e+4+12>>2]=c[d+4+12>>2];c[e+20>>2]=c[d+20>>2];c[e+20+4>>2]=c[d+20+4>>2];c[e+20+8>>2]=c[d+20+8>>2];c[e+20+12>>2]=c[d+20+12>>2];c[e+36>>2]=c[d+36>>2];c[e+36+4>>2]=c[d+36+4>>2];c[e+36+8>>2]=c[d+36+8>>2];c[e+36+12>>2]=c[d+36+12>>2];c[e+144>>2]=c[d+144>>2];f=c[d+168>>2]|0}c[e+168>>2]=f;a[e+60>>0]=a[d+60>>0]|0;k=c[d+56>>2]|0;if(!(a[d+60>>0]|0)){f=c[e+96>>2]|0;if(f|0){if(a[e+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[e+96>>2]=0}a[e+100>>0]=0;c[e+96>>2]=e+172;c[e+88>>2]=k;c[e+92>>2]=k;if(h)if((k|0)>0){i=0;j=c[d+96>>2]|0;f=e+172|0;do{l=j+(i<<6)|0;n=f+(i<<6)|0;a[n>>0]=a[l+3>>0]|0;a[n+1>>0]=a[l+2>>0]|0;a[n+2>>0]=a[l+1>>0]|0;a[n+3>>0]=a[l>>0]|0;n=j+(i<<6)+4|0;l=f+(i<<6)+4|0;a[l>>0]=a[n+3>>0]|0;a[l+1>>0]=a[n+2>>0]|0;a[l+2>>0]=a[n+1>>0]|0;a[l+3>>0]=a[n>>0]|0;l=j+(i<<6)+8|0;n=f+(i<<6)+8|0;a[n>>0]=a[l+3>>0]|0;a[n+1>>0]=a[l+2>>0]|0;a[n+2>>0]=a[l+1>>0]|0;a[n+3>>0]=a[l>>0]|0;n=j+(i<<6)+12|0;f=f+(i<<6)+12|0;a[f>>0]=a[n+3>>0]|0;a[f+1>>0]=a[n+2>>0]|0;a[f+2>>0]=a[n+1>>0]|0;a[f+3>>0]=a[n>>0]|0;f=c[d+96>>2]|0;n=f+(i<<6)+16|0;l=c[e+96>>2]|0;m=l+(i<<6)+16|0;a[m>>0]=a[n+3>>0]|0;a[m+1>>0]=a[n+2>>0]|0;a[m+2>>0]=a[n+1>>0]|0;a[m+3>>0]=a[n>>0]|0;m=f+(i<<6)+20|0;n=l+(i<<6)+20|0;a[n>>0]=a[m+3>>0]|0;a[n+1>>0]=a[m+2>>0]|0;a[n+2>>0]=a[m+1>>0]|0;a[n+3>>0]=a[m>>0]|0;n=f+(i<<6)+24|0;m=l+(i<<6)+24|0;a[m>>0]=a[n+3>>0]|0;a[m+1>>0]=a[n+2>>0]|0;a[m+2>>0]=a[n+1>>0]|0;a[m+3>>0]=a[n>>0]|0;f=f+(i<<6)+28|0;l=l+(i<<6)+28|0;a[l>>0]=a[f+3>>0]|0;a[l+1>>0]=a[f+2>>0]|0;a[l+2>>0]=a[f+1>>0]|0;a[l+3>>0]=a[f>>0]|0;j=c[d+96>>2]|0;l=lw(c[j+(i<<6)+32>>2]|0)|0;f=c[e+96>>2]|0;c[f+(i<<6)+32>>2]=l;c[f+(i<<6)+36>>2]=lw(c[j+(i<<6)+36>>2]|0)|0;c[f+(i<<6)+40>>2]=lw(c[j+(i<<6)+40>>2]|0)|0;i=i+1|0}while((i|0)!=(k|0))}else f=e+172|0;else if((k|0)>0){i=0;f=e+172|0;j=c[d+96>>2]|0;do{f=f+(i<<6)|0;n=j+(i<<6)|0;c[f>>2]=c[n>>2];c[f+4>>2]=c[n+4>>2];c[f+8>>2]=c[n+8>>2];c[f+12>>2]=c[n+12>>2];f=(c[e+96>>2]|0)+(i<<6)+16|0;n=(c[d+96>>2]|0)+(i<<6)+16|0;c[f>>2]=c[n>>2];c[f+4>>2]=c[n+4>>2];c[f+8>>2]=c[n+8>>2];c[f+12>>2]=c[n+12>>2];j=c[d+96>>2]|0;f=c[e+96>>2]|0;c[f+(i<<6)+32>>2]=c[j+(i<<6)+32>>2];c[f+(i<<6)+36>>2]=c[j+(i<<6)+36>>2];c[f+(i<<6)+40>>2]=c[j+(i<<6)+40>>2];i=i+1|0}while((i|0)!=(k|0))}else f=e+172|0;if(f|0){if(a[e+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[e+96>>2]=0}c[e+88>>2]=0;c[e+88+4>>2]=0;c[e+88+8>>2]=0;a[e+88+12>>0]=0;f=k<<6}else{f=c[e+136>>2]|0;if(f|0){if(a[e+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[e+136>>2]=0}a[e+140>>0]=0;c[e+136>>2]=e+172;c[e+128>>2]=k;c[e+132>>2]=k;if(h){if((k|0)>0){i=c[d+136>>2]|0;f=0;do{b[e+172+(f<<4)>>1]=sA(b[i+(f<<4)>>1]|0)|0;b[e+172+(f<<4)+2>>1]=sA(b[i+(f<<4)+2>>1]|0)|0;b[e+172+(f<<4)+4>>1]=sA(b[i+(f<<4)+4>>1]|0)|0;b[e+172+(f<<4)+6>>1]=sA(b[i+(f<<4)+6>>1]|0)|0;b[e+172+(f<<4)+8>>1]=sA(b[i+(f<<4)+8>>1]|0)|0;b[e+172+(f<<4)+10>>1]=sA(b[i+(f<<4)+10>>1]|0)|0;c[e+172+(f<<4)+12>>2]=lw(c[i+(f<<4)+12>>2]|0)|0;f=f+1|0}while((f|0)!=(k|0))}}else if((k|0)>0){i=c[d+136>>2]|0;f=0;do{b[e+172+(f<<4)>>1]=b[i+(f<<4)>>1]|0;b[e+172+(f<<4)+2>>1]=b[i+(f<<4)+2>>1]|0;b[e+172+(f<<4)+4>>1]=b[i+(f<<4)+4>>1]|0;b[e+172+(f<<4)+6>>1]=b[i+(f<<4)+6>>1]|0;b[e+172+(f<<4)+8>>1]=b[i+(f<<4)+8>>1]|0;b[e+172+(f<<4)+10>>1]=b[i+(f<<4)+10>>1]|0;c[e+172+(f<<4)+12>>2]=c[i+(f<<4)+12>>2];f=f+1|0}while((f|0)!=(k|0))}c[e+128>>2]=0;c[e+128+4>>2]=0;c[e+128+8>>2]=0;a[e+128+12>>0]=0;f=k<<4}k=e+172+f|0;f=c[d+168>>2]|0;i=c[e+160>>2]|0;if(i|0){if(a[e+164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[i+-4>>2]|0)}c[e+160>>2]=0}a[e+164>>0]=0;c[e+160>>2]=k;c[e+152>>2]=f;c[e+156>>2]=f;j=c[d+168>>2]|0;if(h){if((j|0)<=0){c[e>>2]=0;c[e+152>>2]=0;c[e+152+4>>2]=0;c[e+152+8>>2]=0;a[e+152+12>>0]=0;return 1}i=c[d+160>>2]|0;f=0;do{b[k+(f<<5)>>1]=sA(b[i+(f<<5)>>1]|0)|0;b[k+(f<<5)+2>>1]=sA(b[i+(f<<5)+2>>1]|0)|0;b[k+(f<<5)+4>>1]=sA(b[i+(f<<5)+4>>1]|0)|0;b[k+(f<<5)+6>>1]=sA(b[i+(f<<5)+6>>1]|0)|0;b[k+(f<<5)+8>>1]=sA(b[i+(f<<5)+8>>1]|0)|0;b[k+(f<<5)+10>>1]=sA(b[i+(f<<5)+10>>1]|0)|0;c[k+(f<<5)+12>>2]=lw(c[i+(f<<5)+12>>2]|0)|0;c[k+(f<<5)+16>>2]=lw(c[i+(f<<5)+16>>2]|0)|0;f=f+1|0}while((f|0)!=(j|0));c[e>>2]=0;c[e+152>>2]=0;c[e+152+4>>2]=0;c[e+152+8>>2]=0;a[e+152+12>>0]=0;return 1}else{if((j|0)<=0){c[e>>2]=0;c[e+152>>2]=0;c[e+152+4>>2]=0;c[e+152+8>>2]=0;a[e+152+12>>0]=0;return 1}i=c[d+160>>2]|0;f=0;do{b[k+(f<<5)>>1]=b[i+(f<<5)>>1]|0;b[k+(f<<5)+2>>1]=b[i+(f<<5)+2>>1]|0;b[k+(f<<5)+4>>1]=b[i+(f<<5)+4>>1]|0;b[k+(f<<5)+6>>1]=b[i+(f<<5)+6>>1]|0;b[k+(f<<5)+8>>1]=b[i+(f<<5)+8>>1]|0;b[k+(f<<5)+10>>1]=b[i+(f<<5)+10>>1]|0;c[k+(f<<5)+12>>2]=c[i+(f<<5)+12>>2];c[k+(f<<5)+16>>2]=c[i+(f<<5)+16>>2];c[k+(f<<5)+20>>2]=0;c[k+(f<<5)+24>>2]=0;c[k+(f<<5)+28>>2]=0;f=f+1|0}while((f|0)<(c[d+168>>2]|0));c[e>>2]=0;c[e+152>>2]=0;c[e+152+4>>2]=0;c[e+152+8>>2]=0;a[e+152+12>>0]=0;return 1}return 0}function Mc(b){b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0,H=0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0;H=i;i=i+192|0;d=c[b+1152>>2]|0;if((d|0)<=0){i=H;return}G=0;do{F=c[(c[b+1160>>2]|0)+(G<<2)>>2]|0;E=c[F+24>>2]|0;if(E){j=H+144+4|0;k=j+44|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(k|0));g[H+144>>2]=9.999999747378752e-005;g[H+144+20>>2]=1.9999999494757503e-004;g[H+144+40>>2]=2.9999998514540493e-004;if((E|0)>0){j=c[F+32>>2]|0;k=c[F+12>>2]|0;d=0;f=0.0;h=0.0;e=0.0;do{D=c[j+(d<<2)>>2]|0;C=+g[k+(d<<2)>>2];f=f+ +g[D+8>>2]*C;e=e+C*+g[D+12>>2];h=h+C*+g[D+16>>2];d=d+1|0}while((d|0)!=(E|0))}else{f=0.0;h=0.0;e=0.0}r=+g[F+128>>2];t=f*r;s=e*r;r=h*r;g[F+228>>2]=t;g[F+232>>2]=s;g[F+236>>2]=r;g[F+240>>2]=0.0;if((E|0)>0){j=c[F+32>>2]|0;k=c[F+52>>2]|0;d=0;e=9.999999747378752e-005;f=+g[H+144+4>>2];h=+g[H+144+8>>2];l=+g[H+144+16>>2];m=1.9999999494757503e-004;n=+g[H+144+24>>2];o=0.0;p=0.0;q=2.9999998514540493e-004;do{D=c[j+(d<<2)>>2]|0;x=+g[D+8>>2]-t;y=+g[D+12>>2]-s;B=+g[D+16>>2]-r;z=+g[k+(d<<4)>>2];A=+g[k+(d<<4)+4>>2];C=+g[k+(d<<4)+8>>2];e=x*z+e;f=x*A+f;h=x*C+h;l=y*z+l;m=y*A+m;n=y*C+n;o=B*z+o;p=B*A+p;q=B*C+q;d=d+1|0}while((d|0)!=(E|0));g[H+144>>2]=e;g[H+144+4>>2]=f;g[H+144+8>>2]=h;g[H+144+16>>2]=l;g[H+144+20>>2]=m;g[H+144+24>>2]=n;g[H+144+32>>2]=o;g[H+144+36>>2]=p;g[H+144+40>>2]=q}if(!(a[22064]|0)){a[22064]=1;g[5675]=9.999999747378752e-005;c[5676]=16}Xc(H+144|0,H+96|0,H+48|0);c[F+108>>2]=c[F+228>>2];c[F+108+4>>2]=c[F+228+4>>2];c[F+108+8>>2]=c[F+228+8>>2];c[F+108+12>>2]=c[F+228+12>>2];c[F+60>>2]=c[H+96>>2];c[F+60+4>>2]=c[H+96+4>>2];c[F+60+8>>2]=c[H+96+8>>2];c[F+60+12>>2]=c[H+96+12>>2];c[F+76>>2]=c[H+96+16>>2];c[F+76+4>>2]=c[H+96+16+4>>2];c[F+76+8>>2]=c[H+96+16+8>>2];c[F+76+12>>2]=c[H+96+16+12>>2];c[F+92>>2]=c[H+96+32>>2];c[F+92+4>>2]=c[H+96+32+4>>2];c[F+92+8>>2]=c[H+96+32+8>>2];c[F+92+12>>2]=c[H+96+32+12>>2];m=+g[F+132>>2];K=+g[F+60>>2];n=+g[F+148>>2];J=+g[F+64>>2];o=+g[F+164>>2];A=+g[F+68>>2];p=+g[F+136>>2];q=+g[F+152>>2];r=+g[F+168>>2];s=+g[F+140>>2];t=+g[F+156>>2];C=+g[F+172>>2];I=+g[F+76>>2];e=+g[F+80>>2];B=+g[F+84>>2];l=+g[F+92>>2];h=+g[F+96>>2];f=+g[F+100>>2];u=(m*K+n*J+o*A)*K+(K*p+J*q+A*r)*J+(K*s+J*t+A*C)*A;v=(m*K+n*J+o*A)*I+(K*p+J*q+A*r)*e+(K*s+J*t+A*C)*B;w=(m*K+n*J+o*A)*l+(K*p+J*q+A*r)*h+(K*s+J*t+A*C)*f;x=(m*I+n*e+o*B)*K+(p*I+q*e+r*B)*J+(s*I+t*e+C*B)*A;y=(m*I+n*e+o*B)*I+(p*I+q*e+r*B)*e+(s*I+t*e+C*B)*B;z=(m*I+n*e+o*B)*l+(p*I+q*e+r*B)*h+(s*I+t*e+C*B)*f;A=K*(m*l+n*h+o*f)+(p*l+q*h+r*f)*J+(s*l+t*h+C*f)*A;B=I*(m*l+n*h+o*f)+(p*l+q*h+r*f)*e+(s*l+t*h+C*f)*B;C=(m*l+n*h+o*f)*l+(p*l+q*h+r*f)*h+(s*l+t*h+C*f)*f;g[F+180>>2]=u;g[F+184>>2]=v;g[F+188>>2]=w;g[F+192>>2]=0.0;g[F+196>>2]=x;g[F+200>>2]=y;g[F+204>>2]=z;g[F+208>>2]=0.0;g[F+212>>2]=A;g[F+216>>2]=B;g[F+220>>2]=C;g[F+224>>2]=0.0;c[F+316>>2]=0;c[F+316+4>>2]=0;c[F+316+8>>2]=0;c[F+316+12>>2]=0;c[F+316+16>>2]=0;c[F+316+20>>2]=0;c[F+316+24>>2]=0;c[F+316+28>>2]=0;if((E|0)>0){j=c[F+32>>2]|0;k=c[F+12>>2]|0;r=+g[F+228>>2];s=+g[F+232>>2];t=+g[F+236>>2];d=0;q=0.0;p=0.0;o=0.0;n=0.0;m=0.0;e=0.0;do{D=c[j+(d<<2)>>2]|0;M=+g[k+(d<<2)>>2];J=+g[D+40>>2]*M;L=M*+g[D+44>>2];M=M*+g[D+48>>2];q=J+q;g[F+316>>2]=q;p=L+p;g[F+320>>2]=p;o=M+o;g[F+324>>2]=o;I=+g[D+8>>2]-r;K=+g[D+12>>2]-s;N=+g[D+16>>2]-t;n=n+(M*K-L*N);g[F+332>>2]=n;m=J*N-M*I+m;g[F+336>>2]=m;e=L*I-J*K+e;g[F+340>>2]=e;d=d+1|0}while((d|0)!=(E|0));D=F+316|0;d=F+332|0}else{D=F+316|0;d=F+332|0;q=0.0;p=0.0;o=0.0;n=0.0;m=0.0;e=0.0}M=+g[F+128>>2];N=1.0-+g[F+356>>2];g[F+316>>2]=q*M*N;g[F+320>>2]=M*p*N;g[F+324>>2]=M*o*N;g[F+328>>2]=0.0;N=1.0-+g[F+360>>2];g[d>>2]=(u*n+v*m+w*e)*N;g[F+336>>2]=(n*x+m*y+e*z)*N;g[F+340>>2]=N*(n*A+m*B+e*C);g[F+344>>2]=0.0;j=F+244|0;k=j+72|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(k|0));e=+g[F+364>>2];a:do if(e>0.0?(c[F+24>>2]|0)>0:0){d=0;while(1){k=c[(c[F+32>>2]|0)+(d<<2)>>2]|0;j=c[F+52>>2]|0;I=+g[j+(d<<4)>>2];J=+g[j+(d<<4)+4>>2];K=+g[j+(d<<4)+8>>2];L=+g[k+8>>2];M=+g[k+12>>2];N=+g[k+16>>2];M=M+e*(I*+g[F+76>>2]+J*+g[F+80>>2]+K*+g[F+84>>2]+ +g[F+112>>2]-M);N=N+e*(I*l+J*h+K*f+ +g[F+116>>2]-N);g[k+8>>2]=L+e*(I*+g[F+60>>2]+J*+g[F+64>>2]+K*+g[F+68>>2]+ +g[F+108>>2]-L);g[k+12>>2]=M;g[k+16>>2]=N;g[k+20>>2]=0.0;d=d+1|0;if((d|0)>=(c[F+24>>2]|0))break a;l=+g[F+92>>2];h=+g[F+96>>2];f=+g[F+100>>2];e=+g[F+364>>2]}}while(0);if(a[F+377>>0]|0){j=c[F+32>>2]|0;k=c[j>>2]|0;e=+g[k+8>>2];q=+g[k+12>>2];r=+g[k+16>>2];f=+g[k+20>>2];if((E|0)>1){d=1;m=e;p=e;n=f;o=r;l=f;h=q;f=q;e=r;do{k=c[j+(d<<2)>>2]|0;K=+g[k+8>>2];p=K<p?K:p;L=+g[k+12>>2];f=L<f?L:f;M=+g[k+16>>2];o=M<o?M:o;N=+g[k+20>>2];l=N<l?N:l;m=m<K?K:m;h=h<L?L:h;e=e<M?M:e;n=n<N?N:n;d=d+1|0}while((d|0)!=(E|0))}else{m=e;p=e;n=f;o=r;l=f;h=q;f=q;e=r}g[H+16>>2]=p;g[H+16+4>>2]=f;g[H+16+8>>2]=o;g[H+16+12>>2]=l;g[H+16+16>>2]=m;g[H+16+20>>2]=h;g[H+16+24>>2]=e;g[H+16+28>>2]=n;d=c[F+348>>2]|0;if(!d){d=c[b+1092>>2]|0;if(!d){c[6324]=(c[6324]|0)+1;d=ic(63)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}j=d;k=j+44|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(k|0))}else c[b+1092>>2]=0;c[d+32>>2]=0;c[d+36>>2]=F;c[d+40>>2]=0;c[d>>2]=c[H+16>>2];c[d+4>>2]=c[H+16+4>>2];c[d+8>>2]=c[H+16+8>>2];c[d+12>>2]=c[H+16+12>>2];c[d+16>>2]=c[H+16+16>>2];c[d+20>>2]=c[H+16+20>>2];c[d+24>>2]=c[H+16+24>>2];c[d+28>>2]=c[H+16+28>>2];Ze(b+1088|0,c[b+1088>>2]|0,d);c[b+1100>>2]=(c[b+1100>>2]|0)+1;c[F+348>>2]=d}else{L=+g[b+492>>2];M=L*+g[F+320>>2]*3.0;N=L*+g[F+324>>2]*3.0;g[H>>2]=+g[D>>2]*L*3.0;g[H+4>>2]=M;g[H+8>>2]=N;g[H+12>>2]=0.0;Yg(b+1088|0,d,H+16|0,H,+g[b+504>>2])|0}}d=c[b+1152>>2]|0}G=G+1|0}while((G|0)<(d|0));i=H;return}function Nc(b,d,e,f,h,i,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0.0;h=c[b+48>>2]|0;q=c[b+28>>2]|0;r=c[b+68>>2]|0;if(c[l+64>>2]&1|0){if((h|0)>0){i=c[b+136>>2]|0;f=0;p=c[b+200>>2]|0;do{m=i+(f<<2)|0;o=c[m>>2]|0;f=f+1|0;p=(S(p,1664525)|0)+1013904223|0;if(f>>>0<65537){e=p>>>16^p;if(f>>>0<257)if(f>>>0<17){e=(e>>>8^e)>>>4^(e>>>8^e);if(f>>>0<5)e=(f>>>0<3?(e>>>2^e)>>>1:0)^(e>>>2^e)}else e=e>>>8^e}else e=p;e=i+(((e>>>0)%(f>>>0)|0)<<2)|0;c[m>>2]=c[e>>2];c[e>>2]=o}while((f|0)!=(h|0));c[b+200>>2]=p}if((c[l+20>>2]|0)>(d|0)){if((q|0)>0){h=c[b+116>>2]|0;f=0;o=c[b+200>>2]|0;do{i=h+(f<<2)|0;m=c[i>>2]|0;f=f+1|0;o=(S(o,1664525)|0)+1013904223|0;if(f>>>0<65537){e=o>>>16^o;if(f>>>0<257)if(f>>>0<17){e=(e>>>8^e)>>>4^(e>>>8^e);if(f>>>0<5)e=(f>>>0<3?(e>>>2^e)>>>1:0)^(e>>>2^e)}else e=e>>>8^e}else e=o;p=h+(((e>>>0)%(f>>>0)|0)<<2)|0;c[i>>2]=c[p>>2];c[p>>2]=m}while((f|0)!=(q|0));c[b+200>>2]=o}if((r|0)>0){h=c[b+156>>2]|0;f=0;o=c[b+200>>2]|0;do{i=h+(f<<2)|0;m=c[i>>2]|0;f=f+1|0;o=(S(o,1664525)|0)+1013904223|0;if(f>>>0<65537){e=o>>>16^o;if(f>>>0<257)if(f>>>0<17){e=(e>>>8^e)>>>4^(e>>>8^e);if(f>>>0<5)e=(f>>>0<3?(e>>>2^e)>>>1:0)^(e>>>2^e)}else e=e>>>8^e}else e=o;q=h+(((e>>>0)%(f>>>0)|0)<<2)|0;c[i>>2]=c[q>>2];c[q>>2]=m}while((f|0)!=(r|0));c[b+200>>2]=o}}}e=c[b+48>>2]|0;if(!(c[l+64>>2]&256)){if((e|0)>0){i=0;do{f=c[(c[b+136>>2]|0)+(i<<2)>>2]|0;h=c[b+56>>2]|0;if((c[h+(f*152|0)+136>>2]|0)>(d|0)){e=c[b+16>>2]|0;+qg(e+((c[h+(f*152|0)+144>>2]|0)*244|0)|0,e+((c[h+(f*152|0)+148>>2]|0)*244|0)|0,h+(f*152|0)|0);e=c[b+48>>2]|0}i=i+1|0}while((i|0)<(e|0))}if((c[l+20>>2]|0)<=(d|0))return 0.0;if((k|0)>0){e=0;do{f=j+(e<<2)|0;h=c[f>>2]|0;if(a[h+20>>0]|0){d=Oj(b,c[h+28>>2]|0,+g[l+12>>2])|0;t=Oj(b,c[(c[f>>2]|0)+32>>2]|0,+g[l+12>>2])|0;s=c[b+16>>2]|0;r=c[f>>2]|0;Tb[c[(c[r>>2]|0)+24>>2]&15](r,s+(d*244|0)|0,s+(t*244|0)|0,+g[l+12>>2])}e=e+1|0}while((e|0)!=(k|0))}f=c[b+28>>2]|0;if((f|0)>0){e=0;do{l=c[(c[b+116>>2]|0)+(e<<2)>>2]|0;k=c[b+36>>2]|0;j=c[b+16>>2]|0;+Ag(j+((c[k+(l*152|0)+144>>2]|0)*244|0)|0,j+((c[k+(l*152|0)+148>>2]|0)*244|0)|0,k+(l*152|0)|0);e=e+1|0}while((e|0)!=(f|0))}f=c[b+68>>2]|0;if((f|0)>0){e=0;do{h=c[(c[b+156>>2]|0)+(e<<2)>>2]|0;i=c[b+76>>2]|0;n=+g[(c[b+36>>2]|0)+((c[i+(h*152|0)+140>>2]|0)*152|0)+100>>2];if(n>0.0){n=n*+g[i+(h*152|0)+104>>2];g[i+(h*152|0)+120>>2]=-n;g[i+(h*152|0)+124>>2]=n;l=c[b+16>>2]|0;+qg(l+((c[i+(h*152|0)+144>>2]|0)*244|0)|0,l+((c[i+(h*152|0)+148>>2]|0)*244|0)|0,i+(h*152|0)|0)}e=e+1|0}while((e|0)!=(f|0))}f=c[b+88>>2]|0;if((f|0)<=0)return 0.0;e=0;do{h=c[b+96>>2]|0;n=+g[(c[b+36>>2]|0)+((c[h+(e*152|0)+140>>2]|0)*152|0)+100>>2];if(n>0.0){u=+g[h+(e*152|0)+104>>2];n=n*u>u?u:n*u;g[h+(e*152|0)+120>>2]=-n;g[h+(e*152|0)+124>>2]=n;l=c[b+16>>2]|0;+qg(l+((c[h+(e*152|0)+144>>2]|0)*244|0)|0,l+((c[h+(e*152|0)+148>>2]|0)*244|0)|0,h+(e*152|0)|0)}e=e+1|0}while((e|0)!=(f|0));return 0.0}if((e|0)>0){i=0;do{f=c[(c[b+136>>2]|0)+(i<<2)>>2]|0;h=c[b+56>>2]|0;if((c[h+(f*152|0)+136>>2]|0)>(d|0)){e=c[b+16>>2]|0;+qg(e+((c[h+(f*152|0)+144>>2]|0)*244|0)|0,e+((c[h+(f*152|0)+148>>2]|0)*244|0)|0,h+(f*152|0)|0);e=c[b+48>>2]|0}i=i+1|0}while((i|0)<(e|0))}if((c[l+20>>2]|0)<=(d|0))return 0.0;if((k|0)>0){e=0;do{f=j+(e<<2)|0;h=c[f>>2]|0;if(a[h+20>>0]|0){q=Oj(b,c[h+28>>2]|0,+g[l+12>>2])|0;d=Oj(b,c[(c[f>>2]|0)+32>>2]|0,+g[l+12>>2])|0;r=c[b+16>>2]|0;p=c[f>>2]|0;Tb[c[(c[p>>2]|0)+24>>2]&15](p,r+(q*244|0)|0,r+(d*244|0)|0,+g[l+12>>2])}e=e+1|0}while((e|0)!=(k|0))}f=c[l+64>>2]|0;o=c[b+28>>2]|0;if(f&512|0){if((o|0)<=0)return 0.0;e=0;do{h=c[(c[b+116>>2]|0)+(e<<2)>>2]|0;i=c[b+36>>2]|0;m=c[b+16>>2]|0;+Ag(m+((c[i+(h*152|0)+144>>2]|0)*244|0)|0,m+((c[i+(h*152|0)+148>>2]|0)*244|0)|0,i+(h*152|0)|0);n=+g[i+(h*152|0)+100>>2];h=S(e,(f>>>4&1)+1|0)|0;i=c[(c[b+156>>2]|0)+(h<<2)>>2]|0;m=c[b+76>>2]|0;if(n>0.0){u=n*+g[m+(i*152|0)+104>>2];g[m+(i*152|0)+120>>2]=-u;g[m+(i*152|0)+124>>2]=u;k=c[b+16>>2]|0;+qg(k+((c[m+(i*152|0)+144>>2]|0)*244|0)|0,k+((c[m+(i*152|0)+148>>2]|0)*244|0)|0,m+(i*152|0)|0)}if(c[l+64>>2]&16|0?(s=c[(c[b+156>>2]|0)+(h+1<<2)>>2]|0,t=c[b+76>>2]|0,n>0.0):0){u=n*+g[t+(s*152|0)+104>>2];g[t+(s*152|0)+120>>2]=-u;g[t+(s*152|0)+124>>2]=u;k=c[b+16>>2]|0;+qg(k+((c[t+(s*152|0)+144>>2]|0)*244|0)|0,k+((c[t+(s*152|0)+148>>2]|0)*244|0)|0,t+(s*152|0)|0)}e=e+1|0}while((e|0)!=(o|0));return 0.0}if((o|0)>0){e=0;do{l=c[(c[b+116>>2]|0)+(e<<2)>>2]|0;k=c[b+36>>2]|0;j=c[b+16>>2]|0;+Ag(j+((c[k+(l*152|0)+144>>2]|0)*244|0)|0,j+((c[k+(l*152|0)+148>>2]|0)*244|0)|0,k+(l*152|0)|0);e=e+1|0}while((e|0)!=(o|0))}f=c[b+68>>2]|0;if((f|0)>0){e=0;do{h=c[(c[b+156>>2]|0)+(e<<2)>>2]|0;i=c[b+76>>2]|0;n=+g[(c[b+36>>2]|0)+((c[i+(h*152|0)+140>>2]|0)*152|0)+100>>2];if(n>0.0){u=n*+g[i+(h*152|0)+104>>2];g[i+(h*152|0)+120>>2]=-u;g[i+(h*152|0)+124>>2]=u;l=c[b+16>>2]|0;+qg(l+((c[i+(h*152|0)+144>>2]|0)*244|0)|0,l+((c[i+(h*152|0)+148>>2]|0)*244|0)|0,i+(h*152|0)|0)}e=e+1|0}while((e|0)!=(f|0))}f=c[b+88>>2]|0;if((f|0)<=0)return 0.0;e=0;do{h=c[b+96>>2]|0;n=+g[(c[b+36>>2]|0)+((c[h+(e*152|0)+140>>2]|0)*152|0)+100>>2];if(n>0.0){u=+g[h+(e*152|0)+104>>2];u=n*u>u?u:n*u;g[h+(e*152|0)+120>>2]=-u;g[h+(e*152|0)+124>>2]=u;l=c[b+16>>2]|0;+qg(l+((c[h+(e*152|0)+144>>2]|0)*244|0)|0,l+((c[h+(e*152|0)+148>>2]|0)*244|0)|0,h+(e*152|0)|0)}e=e+1|0}while((e|0)!=(f|0));return 0.0}function Oc(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,m=0,n=0.0,o=0.0,p=0.0,q=0,r=0.0,s=0,t=0.0;q=i;i=i+80|0;j=c[b+28>>2]|0;d=c[f+64>>2]|0;if((d&4|0)!=0&(j|0)>0){e=c[b+36>>2]|0;h=c[b+76>>2]|0;if(!(d&16)){d=0;do{m=c[e+(d*152|0)+132>>2]|0;c[m+124>>2]=c[e+(d*152|0)+100>>2];c[m+128>>2]=c[h+((c[e+(d*152|0)+140>>2]|0)*152|0)+100>>2];d=d+1|0}while((d|0)!=(j|0))}else{d=0;do{m=c[e+(d*152|0)+132>>2]|0;c[m+124>>2]=c[e+(d*152|0)+100>>2];k=c[e+(d*152|0)+140>>2]|0;c[m+128>>2]=c[h+(k*152|0)+100>>2];c[m+132>>2]=c[h+((k+1|0)*152|0)+100>>2];d=d+1|0}while((d|0)!=(j|0))}}h=c[b+48>>2]|0;if((h|0)>0){d=0;do{j=c[b+56>>2]|0;k=c[j+(d*152|0)+132>>2]|0;m=c[k+44>>2]|0;e=j+(d*152|0)+100|0;if(m|0){p=+g[e>>2];s=c[k+28>>2]|0;o=1.0/+g[f+12>>2];n=p*+g[j+(d*152|0)+20>>2]*+g[s+392>>2]*o;r=p*+g[j+(d*152|0)+24>>2]*+g[s+396>>2]*o;g[m>>2]=+g[m>>2]+ +g[j+(d*152|0)+16>>2]*p*+g[s+388>>2]*o;g[m+4>>2]=n+ +g[m+4>>2];g[m+8>>2]=r+ +g[m+8>>2];r=+g[e>>2];s=c[k+32>>2]|0;n=1.0/+g[f+12>>2];o=r*+g[j+(d*152|0)+52>>2]*+g[s+392>>2]*n;p=r*+g[j+(d*152|0)+56>>2]*+g[s+396>>2]*n;g[m+32>>2]=+g[m+32>>2]+ +g[j+(d*152|0)+48>>2]*r*+g[s+388>>2]*n;g[m+36>>2]=o+ +g[m+36>>2];g[m+40>>2]=p+ +g[m+40>>2];s=c[k+28>>2]|0;p=+g[e>>2];o=1.0/+g[f+12>>2];n=+g[j+(d*152|0)+4>>2]*+g[s+588>>2]*p*o;r=p*+g[j+(d*152|0)+8>>2]*+g[s+592>>2]*o;g[m+16>>2]=+g[m+16>>2]+ +g[j+(d*152|0)>>2]*+g[s+584>>2]*p*o;g[m+20>>2]=n+ +g[m+20>>2];g[m+24>>2]=r+ +g[m+24>>2];s=c[k+32>>2]|0;r=+g[e>>2];n=1.0/+g[f+12>>2];o=+g[j+(d*152|0)+36>>2]*+g[s+588>>2]*r*n;p=r*+g[j+(d*152|0)+40>>2]*+g[s+592>>2]*n;g[m+48>>2]=+g[m+48>>2]+ +g[j+(d*152|0)+32>>2]*+g[s+584>>2]*r*n;g[m+52>>2]=o+ +g[m+52>>2];g[m+56>>2]=p+ +g[m+56>>2]}s=c[e>>2]|0;c[k+36>>2]=s;r=+F(+(c[l>>2]=s,+g[l>>2]));if(r>=+g[k+16>>2])a[k+20>>0]=0;d=d+1|0}while((d|0)!=(h|0))}e=c[b+8>>2]|0;if((e|0)>0){k=0;d=c[b+16>>2]|0;do{h=d+(k*244|0)|0;j=c[d+(k*244|0)+240>>2]|0;if(j){if(!(c[f+44>>2]|0)){h=d+(k*244|0)+176|0;o=+g[d+(k*244|0)+64>>2]+ +g[h>>2];g[h>>2]=o;h=d+(k*244|0)+180|0;p=+g[d+(k*244|0)+68>>2]+ +g[h>>2];g[h>>2]=p;h=d+(k*244|0)+184|0;n=+g[d+(k*244|0)+72>>2]+ +g[h>>2];g[h>>2]=n;h=d+(k*244|0)+192|0;g[h>>2]=+g[d+(k*244|0)+80>>2]+ +g[h>>2];h=d+(k*244|0)+196|0;g[h>>2]=+g[d+(k*244|0)+84>>2]+ +g[h>>2];h=d+(k*244|0)+200|0;g[h>>2]=+g[d+(k*244|0)+88>>2]+ +g[h>>2];h=d;d=j}else{n=+g[f+12>>2];o=+g[f+52>>2];e=d+(k*244|0)+176|0;g[e>>2]=+g[d+(k*244|0)+64>>2]+ +g[e>>2];e=d+(k*244|0)+180|0;g[e>>2]=+g[d+(k*244|0)+68>>2]+ +g[e>>2];e=d+(k*244|0)+184|0;g[e>>2]=+g[d+(k*244|0)+72>>2]+ +g[e>>2];e=d+(k*244|0)+192|0;g[e>>2]=+g[d+(k*244|0)+80>>2]+ +g[e>>2];e=d+(k*244|0)+196|0;g[e>>2]=+g[d+(k*244|0)+84>>2]+ +g[e>>2];e=d+(k*244|0)+200|0;g[e>>2]=+g[d+(k*244|0)+88>>2]+ +g[e>>2];p=+g[d+(k*244|0)+144>>2];e=d+(k*244|0)+148|0;if(((((!(p!=0.0)?!(+g[e>>2]!=0.0):0)?!(+g[d+(k*244|0)+152>>2]!=0.0):0)?!(+g[d+(k*244|0)+160>>2]!=0.0):0)?!(+g[d+(k*244|0)+164>>2]!=0.0):0)?!(+g[d+(k*244|0)+168>>2]!=0.0):0)e=j;else{t=+g[d+(k*244|0)+164>>2]*o;r=+g[d+(k*244|0)+168>>2]*o;g[q>>2]=+g[d+(k*244|0)+160>>2]*o;g[q+4>>2]=t;g[q+8>>2]=r;g[q+12>>2]=0.0;Mg(h,p,+g[e>>2],+g[d+(k*244|0)+152>>2],q,n,q+16|0);c[h>>2]=c[q+16>>2];c[h+4>>2]=c[q+16+4>>2];c[h+8>>2]=c[q+16+8>>2];c[h+12>>2]=c[q+16+12>>2];e=d+(k*244|0)+16|0;c[e>>2]=c[q+16+16>>2];c[e+4>>2]=c[q+16+16+4>>2];c[e+8>>2]=c[q+16+16+8>>2];c[e+12>>2]=c[q+16+16+12>>2];e=d+(k*244|0)+32|0;c[e>>2]=c[q+16+32>>2];c[e+4>>2]=c[q+16+32+4>>2];c[e+8>>2]=c[q+16+32+8>>2];c[e+12>>2]=c[q+16+32+12>>2];e=d+(k*244|0)+48|0;c[e>>2]=c[q+16+48>>2];c[e+4>>2]=c[q+16+48+4>>2];c[e+8>>2]=c[q+16+48+8>>2];c[e+12>>2]=c[q+16+48+12>>2];e=c[b+16>>2]|0;d=e;e=c[e+(k*244|0)+240>>2]|0}h=d;o=+g[d+(k*244|0)+176>>2];p=+g[d+(k*244|0)+180>>2];n=+g[d+(k*244|0)+184>>2];d=e}t=o+ +g[h+(k*244|0)+208>>2];r=p+ +g[h+(k*244|0)+212>>2];p=n+ +g[h+(k*244|0)+216>>2];m=d+300|0;c[m>>2]=(c[m>>2]|0)+1;g[d+352>>2]=t;g[d+356>>2]=r;g[d+360>>2]=p;g[d+364>>2]=0.0;m=c[b+16>>2]|0;s=c[m+(k*244|0)+240>>2]|0;p=+g[m+(k*244|0)+192>>2]+ +g[m+(k*244|0)+224>>2];r=+g[m+(k*244|0)+196>>2]+ +g[m+(k*244|0)+228>>2];t=+g[m+(k*244|0)+200>>2]+ +g[m+(k*244|0)+232>>2];c[s+300>>2]=(c[s+300>>2]|0)+1;g[s+368>>2]=p;g[s+372>>2]=r;g[s+376>>2]=t;g[s+380>>2]=0.0;if(c[f+44>>2]|0){m=c[b+16>>2]|0;s=c[m+(k*244|0)+240>>2]|0;j=m+(k*244|0)|0;c[s+300>>2]=(c[s+300>>2]|0)+1;c[s+4>>2]=c[j>>2];c[s+4+4>>2]=c[j+4>>2];c[s+4+8>>2]=c[j+8>>2];c[s+4+12>>2]=c[j+12>>2];j=m+(k*244|0)+16|0;c[s+20>>2]=c[j>>2];c[s+20+4>>2]=c[j+4>>2];c[s+20+8>>2]=c[j+8>>2];c[s+20+12>>2]=c[j+12>>2];j=m+(k*244|0)+32|0;c[s+36>>2]=c[j>>2];c[s+36+4>>2]=c[j+4>>2];c[s+36+8>>2]=c[j+8>>2];c[s+36+12>>2]=c[j+12>>2];m=m+(k*244|0)+48|0;c[s+52>>2]=c[m>>2];c[s+52+4>>2]=c[m+4>>2];c[s+52+8>>2]=c[m+8>>2];c[s+52+12>>2]=c[m+12>>2]}d=c[b+16>>2]|0;c[(c[d+(k*244|0)+240>>2]|0)+212>>2]=-1;e=c[b+8>>2]|0}k=k+1|0}while((k|0)<(e|0))}if((c[b+28>>2]|0)<0?(c[b+32>>2]|0)<0:0){d=c[b+36>>2]|0;if(d|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+32>>2]=0}c[b+28>>2]=0;if((c[b+48>>2]|0)<0?(c[b+52>>2]|0)<0:0){d=c[b+56>>2]|0;if(d|0){if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+52>>2]=0}c[b+48>>2]=0;if((c[b+68>>2]|0)<0?(c[b+72>>2]|0)<0:0){d=c[b+76>>2]|0;if(d|0){if(a[b+80>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+76>>2]=0}a[b+80>>0]=1;c[b+76>>2]=0;c[b+72>>2]=0}c[b+68>>2]=0;if((c[b+88>>2]|0)<0?(c[b+92>>2]|0)<0:0){d=c[b+96>>2]|0;if(d|0){if(a[b+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+92>>2]=0}c[b+88>>2]=0;if((c[b+8>>2]|0)>=0){c[b+8>>2]=0;i=q;return 0.0}if((c[b+12>>2]|0)>=0){c[b+8>>2]=0;i=q;return 0.0}d=c[b+16>>2]|0;if(d|0){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=0;c[b+12>>2]=0;c[b+8>>2]=0;i=q;return 0.0}function Pc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0;u=i;i=i+672|0;c[u+448+8>>2]=0;c[u+448+12>>2]=-1;c[u+448+16>>2]=1065353216;c[u+448+20>>2]=1065353216;c[u+448+24>>2]=1065353216;g[u+448+28>>2]=0.0;c[u+448>>2]=8368;c[u+448+4>>2]=8;g[u+448+32>>2]=0.0;g[u+448+48>>2]=0.0;g[u+384>>2]=1.0;m=u+384+4|0;c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;g[u+384+20>>2]=1.0;n=u+384+24|0;c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;g[u+384+40>>2]=1.0;g[u+384+44>>2]=0.0;c[u+384+48>>2]=c[a>>2];c[u+384+48+4>>2]=c[a+4>>2];c[u+384+48+8>>2]=c[a+8>>2];c[u+384+48+12>>2]=c[a+12>>2];a=e;l=a+36|0;do{c[a>>2]=0;a=a+4|0}while((a|0)<(l|0));c[u+504>>2]=b;c[u+504+4>>2]=u+448;I=+g[d>>2];H=+g[d+16>>2];F=+g[d+32>>2];E=+g[d+4>>2];D=+g[d+20>>2];C=+g[d+36>>2];s=+g[d+8>>2];q=+g[d+24>>2];o=+g[d+40>>2];g[u+504+8>>2]=I+H*0.0+F*0.0;g[u+504+12>>2]=E+D*0.0+C*0.0;g[u+504+16>>2]=s+q*0.0+o*0.0;g[u+504+20>>2]=0.0;g[u+504+24>>2]=I*0.0+H+F*0.0;g[u+504+28>>2]=E*0.0+D+C*0.0;g[u+504+32>>2]=s*0.0+q+o*0.0;g[u+504+36>>2]=0.0;g[u+504+40>>2]=I*0.0+H*0.0+F;g[u+504+44>>2]=E*0.0+D*0.0+C;g[u+504+48>>2]=s*0.0+q*0.0+o;g[u+504+52>>2]=0.0;o=+g[u+384+48>>2]-+g[d+48>>2];q=+g[u+384+52>>2]-+g[d+52>>2];s=+g[u+384+56>>2]-+g[d+56>>2];B=+g[u+384>>2];A=+g[u+384+16>>2];z=+g[u+384+32>>2];y=+g[m>>2];x=+g[u+384+20>>2];w=+g[u+384+36>>2];v=+g[u+384+8>>2];f=+g[n>>2];h=+g[u+384+40>>2];p=+g[d+8>>2];r=+g[d+24>>2];t=+g[d+40>>2];j=o*+g[d>>2]+q*+g[d+16>>2]+s*+g[d+32>>2];k=o*+g[d+4>>2]+q*+g[d+20>>2]+s*+g[d+36>>2];g[u+504+56>>2]=I*B+H*A+F*z;g[u+504+60>>2]=I*y+H*x+F*w;g[u+504+64>>2]=I*v+H*f+F*h;g[u+504+68>>2]=0.0;g[u+504+72>>2]=B*E+A*D+z*C;g[u+504+76>>2]=y*E+x*D+w*C;g[u+504+80>>2]=v*E+f*D+h*C;g[u+504+84>>2]=0.0;g[u+504+88>>2]=B*p+A*r+z*t;g[u+504+92>>2]=y*p+x*r+w*t;g[u+504+96>>2]=v*p+f*r+h*t;g[u+504+100>>2]=0.0;g[u+504+104>>2]=j;g[u+504+108>>2]=k;g[u+504+112>>2]=o*p+q*r+s*t;g[u+504+116>>2]=0.0;c[u+504+120>>2]=80;c[u+504+124>>2]=0;c[u+364>>2]=0;c[u+128>>2]=0;c[u+128+4>>2]=0;c[u+128+8>>2]=0;c[u+128+12>>2]=0;c[u+376>>2]=2;c[u+368>>2]=0;g[u+144>>2]=0.0;c[u+648>>2]=1065353216;c[u+648+4>>2]=1065353216;c[u+648+8>>2]=1065353216;g[u+648+12>>2]=0.0;switch(Ec(u,u+504|0,u+648|0)|0){case 0:{a=c[u+372>>2]|0;if(!(c[a+32>>2]|0)){j=0.0;k=0.0;r=0.0;h=0.0;q=0.0;f=0.0}else{n=0;j=0.0;k=0.0;o=0.0;h=0.0;q=0.0;f=0.0;do{t=+g[a+16+(n<<2)>>2];l=c[u+504+120>>2]|0;J=c[u+504+124>>2]|0;m=(c[u+504>>2]|0)+(J>>1)|0;if(J&1)l=c[(c[m>>2]|0)+l>>2]|0;Ub[l&127](u+648|0,m,c[a+(n<<2)>>2]|0);k=k+t*+g[u+648>>2];f=f+t*+g[u+648+4>>2];h=h+t*+g[u+648+8>>2];a=c[(c[u+372>>2]|0)+(n<<2)>>2]|0;p=-+g[a>>2];r=-+g[a+4>>2];s=-+g[a+8>>2];a=c[u+504+120>>2]|0;J=c[u+504+124>>2]|0;l=(c[u+504+4>>2]|0)+(J>>1)|0;if(J&1)a=c[(c[l>>2]|0)+a>>2]|0;H=+g[u+504+24>>2]*p+ +g[u+504+28>>2]*r+ +g[u+504+32>>2]*s;F=+g[u+504+40>>2]*p+ +g[u+504+44>>2]*r+ +g[u+504+48>>2]*s;g[u+632>>2]=+g[u+504+8>>2]*p+ +g[u+504+12>>2]*r+ +g[u+504+16>>2]*s;g[u+632+4>>2]=H;g[u+632+8>>2]=F;g[u+632+12>>2]=0.0;Ub[a&127](u+648|0,l,u+632|0);F=+g[u+648>>2];H=+g[u+648+4>>2];I=+g[u+648+8>>2];j=j+t*(F*+g[u+504+56>>2]+H*+g[u+504+60>>2]+I*+g[u+504+64>>2]+ +g[u+504+104>>2]);q=q+t*(F*+g[u+504+72>>2]+H*+g[u+504+76>>2]+I*+g[u+504+80>>2]+ +g[u+504+108>>2]);o=o+t*(F*+g[u+504+88>>2]+H*+g[u+504+92>>2]+I*+g[u+504+96>>2]+ +g[u+504+112>>2]);n=n+1|0;a=c[u+372>>2]|0}while(n>>>0<(c[a+32>>2]|0)>>>0);r=o}s=k*+g[d>>2]+f*+g[d+4>>2]+h*+g[d+8>>2]+ +g[d+48>>2];t=k*+g[d+16>>2]+f*+g[d+20>>2]+h*+g[d+24>>2]+ +g[d+52>>2];k=k*+g[d+32>>2]+f*+g[d+36>>2]+h*+g[d+40>>2]+ +g[d+56>>2];g[e+4>>2]=s;g[e+8>>2]=t;g[e+12>>2]=k;g[e+16>>2]=0.0;o=j*+g[d>>2]+q*+g[d+4>>2]+r*+g[d+8>>2]+ +g[d+48>>2];p=j*+g[d+16>>2]+q*+g[d+20>>2]+r*+g[d+24>>2]+ +g[d+52>>2];j=j*+g[d+32>>2]+q*+g[d+36>>2]+r*+g[d+40>>2]+ +g[d+56>>2];g[e+20>>2]=o;g[e+24>>2]=p;g[e+28>>2]=j;g[e+32>>2]=0.0;switch(c[b+4>>2]|0){case 8:{f=+g[b+32>>2]*+g[b+16>>2];break}case 0:{f=+g[b+48>>2];break}case 1:{f=+g[b+48>>2];break}case 13:{f=+g[b+48>>2];break}case 11:{f=+g[b+48>>2];break}case 10:{f=+g[b+48>>2];break}case 4:case 5:{f=+g[b+48>>2];break}default:f=+Cb[c[(c[b>>2]|0)+48>>2]&15](b)}switch(c[u+448+4>>2]|0){case 8:{h=+g[u+448+32>>2]*+g[u+448+16>>2];break}case 0:{h=+g[u+448+48>>2];break}case 1:{h=+g[u+448+48>>2];break}case 13:{h=+g[u+448+48>>2];break}case 11:{h=+g[u+448+48>>2];break}case 10:{h=+g[u+448+48>>2];break}case 4:case 5:{h=+g[u+448+48>>2];break}default:h=+Cb[c[(c[u+448>>2]|0)+48>>2]&15](u+448|0)}I=f+h;H=+G(+((o-s)*(o-s)+(p-t)*(p-t)+(j-k)*(j-k)));g[e+36>>2]=(o-s)*(1.0/H);g[e+40>>2]=(p-t)*(1.0/H);g[e+44>>2]=(j-k)*(1.0/H);g[e+48>>2]=0.0;g[e+4>>2]=I*(o-s)*(1.0/H)+ +g[e+4>>2];g[e+8>>2]=I*(p-t)*(1.0/H)+ +g[e+8>>2];g[e+12>>2]=I*(j-k)*(1.0/H)+ +g[e+12>>2];I=H-I;i=u;return +I}case 1:{if(!(Bc(b,d,u+448|0,u+384|0,u+128|0,e,1)|0)){I=34028234663852886.0e22;i=u;return +I}f=+g[e+4>>2]-+g[e+20>>2];h=+g[e+8>>2]-+g[e+24>>2];j=+g[e+12>>2]-+g[e+28>>2];k=+G(+(f*f+h*h+j*j));if(k>=1.1920928955078125e-007){g[e+36>>2]=f*(1.0/k);g[e+40>>2]=h*(1.0/k);g[e+44>>2]=j*(1.0/k);g[e+48>>2]=0.0}I=-k;i=u;return +I}default:{I=34028234663852886.0e22;i=u;return +I}}return 0.0}function Qc(a,b){a=a|0;b=+b;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0;o=i;i=i+48|0;d=c[a+24>>2]|0;if((d|0)<=0){i=o;return}n=0;a:while(1){m=c[(c[a+32>>2]|0)+(n<<2)>>2]|0;switch(c[m+216>>2]|0){case 2:case 5:break;default:{$d(m,0);e=c[m+772>>2]|0;if((e|0)>0){d=0;do{l=c[m+780>>2]|0;j=c[l+(d*52|0)+12>>2]|0;k=c[l+(d*52|0)+8>>2]|0;y=+g[j+24>>2]-+g[k+24>>2];x=+g[j+28>>2]-+g[k+28>>2];b=+g[j+32>>2]-+g[k+32>>2];g[l+(d*52|0)+36>>2]=y;g[l+(d*52|0)+40>>2]=x;g[l+(d*52|0)+44>>2]=b;g[l+(d*52|0)+48>>2]=0.0;g[l+(d*52|0)+32>>2]=1.0/(+g[l+(d*52|0)+24>>2]*(y*y+x*x+b*b));d=d+1|0}while((d|0)!=(e|0))}f=c[m+832>>2]|0;if((f|0)>0){d=0;b=+g[m+492>>2];do{l=c[m+840>>2]|0;e=l+(d*96|0)+20|0;h=c[e>>2]|0;B=+g[l+(d*96|0)+4>>2];A=+g[l+(d*96|0)+8>>2];y=+g[l+(d*96|0)+12>>2];z=+g[h+4>>2]*B+ +g[h+8>>2]*A+ +g[h+12>>2]*y;x=B*+g[h+20>>2]+A*+g[h+24>>2]+y*+g[h+28>>2];y=B*+g[h+36>>2]+A*+g[h+40>>2]+y*+g[h+44>>2];j=l+(d*96|0)+28|0;k=l+(d*96|0)|0;Df(o,b,+g[(c[k>>2]|0)+88>>2],+g[h+384>>2],h+304|0,z,x,y);c[j>>2]=c[o>>2];c[j+4>>2]=c[o+4>>2];c[j+8>>2]=c[o+8>>2];c[j+12>>2]=c[o+12>>2];j=l+(d*96|0)+44|0;c[j>>2]=c[o+16>>2];c[j+4>>2]=c[o+16+4>>2];c[j+8>>2]=c[o+16+8>>2];c[j+12>>2]=c[o+16+12>>2];j=l+(d*96|0)+60|0;c[j>>2]=c[o+32>>2];c[j+4>>2]=c[o+32+4>>2];c[j+8>>2]=c[o+32+8>>2];c[j+12>>2]=c[o+32+12>>2];g[l+(d*96|0)+76>>2]=z;g[l+(d*96|0)+80>>2]=x;g[l+(d*96|0)+84>>2]=y;g[l+(d*96|0)+88>>2]=0.0;b=+g[m+492>>2];g[l+(d*96|0)+92>>2]=b*+g[(c[k>>2]|0)+88>>2];e=c[e>>2]|0;if(!(c[e+204>>2]&3)){if((c[e+216>>2]&-2|0)!=4)c[e+216>>2]=1;g[e+220>>2]=0.0}d=d+1|0}while((d|0)!=(f|0))}d=c[m+412>>2]|0;if((d|0)>0){f=0;e=c[m+436>>2]|0;do{if((e|0)>0){d=0;do{jb[((c[(c[m+444>>2]|0)+(d<<2)>>2]|0)==0?23:0)&31](m,1.0);d=d+1|0;e=c[m+436>>2]|0}while((d|0)<(e|0));d=c[m+412>>2]|0}f=f+1|0}while((f|0)<(d|0));e=c[m+752>>2]|0;if((e|0)>0){d=0;do{l=c[m+760>>2]|0;z=+g[m+492>>2];A=z*+g[l+(d*104|0)+44>>2]+ +g[l+(d*104|0)+28>>2];B=z*+g[l+(d*104|0)+48>>2]+ +g[l+(d*104|0)+32>>2];g[l+(d*104|0)+8>>2]=+g[l+(d*104|0)+40>>2]*z+ +g[l+(d*104|0)+24>>2];g[l+(d*104|0)+12>>2]=A;g[l+(d*104|0)+16>>2]=B;g[l+(d*104|0)+20>>2]=0.0;d=d+1|0}while((d|0)!=(e|0))}}d=c[m+416>>2]|0;if((d|0)>0){h=0;e=c[m+456>>2]|0;do{b=+(h|0)/+(d|0);if((e|0)>0){f=0;do{switch(c[(c[m+464>>2]|0)+(f<<2)>>2]|0){case 1:{d=2;break}case 0:{d=3;break}case 2:{d=4;break}case 3:{d=5;break}default:{w=35;break a}}xb[d&7](m,1.0,b);f=f+1|0;e=c[m+456>>2]|0}while((f|0)<(e|0));d=c[m+416>>2]|0}h=h+1|0}while((h|0)<(d|0));b=+g[m+496>>2]*(1.0-+g[m+336>>2]);e=c[m+752>>2]|0;if((e|0)>0){d=0;do{l=c[m+760>>2]|0;A=b*(+g[l+(d*104|0)+12>>2]-+g[l+(d*104|0)+28>>2]);B=b*(+g[l+(d*104|0)+16>>2]-+g[l+(d*104|0)+32>>2]);g[l+(d*104|0)+40>>2]=b*(+g[l+(d*104|0)+8>>2]-+g[l+(d*104|0)+24>>2]);g[l+(d*104|0)+44>>2]=A;g[l+(d*104|0)+48>>2]=B;l=l+(d*104|0)+52|0;d=d+1|0;c[l>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[l+16>>2]=0}while((d|0)!=(e|0))}}d=c[m+420>>2]|0;if((d|0)>0){b=+g[m+332>>2]*+g[m+496>>2];e=c[m+752>>2]|0;if((e|0)>0){d=0;do{k=c[m+760>>2]|0;l=k+(d*104|0)+24|0;k=k+(d*104|0)+8|0;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];c[l+8>>2]=c[k+8>>2];c[l+12>>2]=c[k+12>>2];d=d+1|0}while((d|0)!=(e|0));d=c[m+420>>2]|0;if((d|0)>0)w=42}else w=42;if((w|0)==42){w=0;h=0;e=c[m+476>>2]|0;do{if((e|0)>0){f=0;do{switch(c[(c[m+484>>2]|0)+(f<<2)>>2]|0){case 1:{d=2;break}case 0:{d=3;break}case 2:{d=4;break}case 3:{d=5;break}default:{w=53;break a}}xb[d&7](m,1.0,0.0);f=f+1|0;e=c[m+476>>2]|0}while((f|0)<(e|0));d=c[m+420>>2]|0}h=h+1|0}while((h|0)<(d|0))}e=c[m+752>>2]|0;if((e|0)>0){f=c[m+760>>2]|0;d=0;do{A=b*(+g[f+(d*104|0)+12>>2]-+g[f+(d*104|0)+28>>2]);B=b*(+g[f+(d*104|0)+16>>2]-+g[f+(d*104|0)+32>>2]);l=f+(d*104|0)+40|0;g[l>>2]=b*(+g[f+(d*104|0)+8>>2]-+g[f+(d*104|0)+24>>2])+ +g[l>>2];l=f+(d*104|0)+44|0;g[l>>2]=A+ +g[l>>2];l=f+(d*104|0)+48|0;g[l>>2]=B+ +g[l>>2];d=d+1|0}while((d|0)!=(e|0))}}f=c[m+1152>>2]|0;if((f|0)>0){h=c[m+1160>>2]|0;e=0;do{j=c[h+(e<<2)>>2]|0;if(+g[j+352>>2]>0.0?(p=c[j+24>>2]|0,(p|0)>0):0){k=c[j+32>>2]|0;d=0;do{l=c[k+(d<<2)>>2]|0;if(+g[l+88>>2]>0.0?(t=+g[l+24>>2]-+g[j+228>>2],v=+g[l+28>>2]-+g[j+232>>2],r=+g[l+32>>2]-+g[j+236>>2],s=+g[j+336>>2],B=+g[j+340>>2],u=+g[j+332>>2],q=+g[j+316>>2]+(s*r-v*B),r=+g[j+320>>2]+(t*B-r*u),s=v*u-t*s+ +g[j+324>>2],t=+g[l+40>>2],u=+g[l+44>>2],v=+g[l+48>>2],q*q+r*r+s*s<=t*t+u*u+v*v):0){B=+g[j+352>>2];g[l+40>>2]=t+(q-t)*B;g[l+44>>2]=(r-u)*B+u;g[l+48>>2]=(s-v)*B+v}d=d+1|0}while((d|0)!=(p|0))}e=e+1|0}while((e|0)!=(f|0))}$d(m,1);d=c[a+24>>2]|0}}n=n+1|0;if((n|0)>=(d|0)){w=3;break}}if((w|0)==3){i=o;return}}function Rc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;if(!a)return;h=c[6331]|0;if((a+-8|0)>>>0<h>>>0)Ua();b=c[a+-4>>2]|0;if((b&3|0)==1)Ua();n=a+-8+(b&-8)|0;do if(!(b&1)){e=c[a+-8>>2]|0;if(!(b&3))return;k=a+-8+(0-e)|0;j=e+(b&-8)|0;if(k>>>0<h>>>0)Ua();if((k|0)==(c[6332]|0)){a=c[n+4>>2]|0;if((a&3|0)!=3){q=k;f=j;break}c[6329]=j;c[n+4>>2]=a&-2;c[k+4>>2]=j|1;c[k+j>>2]=j;return}if(e>>>0<256){a=c[k+8>>2]|0;b=c[k+12>>2]|0;if((a|0)!=(25348+(e>>>3<<1<<2)|0)){if(a>>>0<h>>>0)Ua();if((c[a+12>>2]|0)!=(k|0))Ua()}if((b|0)==(a|0)){c[6327]=c[6327]&~(1<<(e>>>3));q=k;f=j;break}if((b|0)!=(25348+(e>>>3<<1<<2)|0)){if(b>>>0<h>>>0)Ua();if((c[b+8>>2]|0)!=(k|0))Ua();else d=b+8|0}else d=b+8|0;c[a+12>>2]=b;c[d>>2]=a;q=k;f=j;break}g=c[k+24>>2]|0;a=c[k+12>>2]|0;do if((a|0)==(k|0)){a=c[k+16+4>>2]|0;if(!a){a=c[k+16>>2]|0;if(!a){i=0;break}else e=k+16|0}else e=k+16+4|0;while(1){b=a+20|0;d=c[b>>2]|0;if(d|0){a=d;e=b;continue}b=a+16|0;d=c[b>>2]|0;if(!d)break;else{a=d;e=b}}if(e>>>0<h>>>0)Ua();else{c[e>>2]=0;i=a;break}}else{b=c[k+8>>2]|0;if(b>>>0<h>>>0)Ua();if((c[b+12>>2]|0)!=(k|0))Ua();if((c[a+8>>2]|0)==(k|0)){c[b+12>>2]=a;c[a+8>>2]=b;i=a;break}else Ua()}while(0);if(g){a=c[k+28>>2]|0;if((k|0)==(c[25612+(a<<2)>>2]|0)){c[25612+(a<<2)>>2]=i;if(!i){c[6328]=c[6328]&~(1<<a);q=k;f=j;break}}else{if(g>>>0<(c[6331]|0)>>>0)Ua();if((c[g+16>>2]|0)==(k|0))c[g+16>>2]=i;else c[g+20>>2]=i;if(!i){q=k;f=j;break}}b=c[6331]|0;if(i>>>0<b>>>0)Ua();c[i+24>>2]=g;a=c[k+16>>2]|0;do if(a|0)if(a>>>0<b>>>0)Ua();else{c[i+16>>2]=a;c[a+24>>2]=i;break}while(0);a=c[k+16+4>>2]|0;if(a)if(a>>>0<(c[6331]|0)>>>0)Ua();else{c[i+20>>2]=a;c[a+24>>2]=i;q=k;f=j;break}else{q=k;f=j}}else{q=k;f=j}}else{q=a+-8|0;f=b&-8}while(0);if(q>>>0>=n>>>0)Ua();d=c[n+4>>2]|0;if(!(d&1))Ua();if(!(d&2)){if((n|0)==(c[6333]|0)){p=(c[6330]|0)+f|0;c[6330]=p;c[6333]=q;c[q+4>>2]=p|1;if((q|0)!=(c[6332]|0))return;c[6332]=0;c[6329]=0;return}if((n|0)==(c[6332]|0)){p=(c[6329]|0)+f|0;c[6329]=p;c[6332]=q;c[q+4>>2]=p|1;c[q+p>>2]=p;return}f=(d&-8)+f|0;do if(d>>>0>=256){g=c[n+24>>2]|0;a=c[n+12>>2]|0;do if((a|0)==(n|0)){a=c[n+16+4>>2]|0;if(!a){a=c[n+16>>2]|0;if(!a){m=0;break}else e=n+16|0}else e=n+16+4|0;while(1){b=a+20|0;d=c[b>>2]|0;if(d|0){a=d;e=b;continue}b=a+16|0;d=c[b>>2]|0;if(!d)break;else{a=d;e=b}}if(e>>>0<(c[6331]|0)>>>0)Ua();else{c[e>>2]=0;m=a;break}}else{b=c[n+8>>2]|0;if(b>>>0<(c[6331]|0)>>>0)Ua();if((c[b+12>>2]|0)!=(n|0))Ua();if((c[a+8>>2]|0)==(n|0)){c[b+12>>2]=a;c[a+8>>2]=b;m=a;break}else Ua()}while(0);if(g|0){a=c[n+28>>2]|0;if((n|0)==(c[25612+(a<<2)>>2]|0)){c[25612+(a<<2)>>2]=m;if(!m){c[6328]=c[6328]&~(1<<a);break}}else{if(g>>>0<(c[6331]|0)>>>0)Ua();if((c[g+16>>2]|0)==(n|0))c[g+16>>2]=m;else c[g+20>>2]=m;if(!m)break}b=c[6331]|0;if(m>>>0<b>>>0)Ua();c[m+24>>2]=g;a=c[n+16>>2]|0;do if(a|0)if(a>>>0<b>>>0)Ua();else{c[m+16>>2]=a;c[a+24>>2]=m;break}while(0);a=c[n+16+4>>2]|0;if(a|0)if(a>>>0<(c[6331]|0)>>>0)Ua();else{c[m+20>>2]=a;c[a+24>>2]=m;break}}}else{a=c[n+8>>2]|0;b=c[n+12>>2]|0;if((a|0)!=(25348+(d>>>3<<1<<2)|0)){if(a>>>0<(c[6331]|0)>>>0)Ua();if((c[a+12>>2]|0)!=(n|0))Ua()}if((b|0)==(a|0)){c[6327]=c[6327]&~(1<<(d>>>3));break}if((b|0)!=(25348+(d>>>3<<1<<2)|0)){if(b>>>0<(c[6331]|0)>>>0)Ua();if((c[b+8>>2]|0)!=(n|0))Ua();else l=b+8|0}else l=b+8|0;c[a+12>>2]=b;c[l>>2]=a}while(0);c[q+4>>2]=f|1;c[q+f>>2]=f;if((q|0)==(c[6332]|0)){c[6329]=f;return}}else{c[n+4>>2]=d&-2;c[q+4>>2]=f|1;c[q+f>>2]=f}b=f>>>3;if(f>>>0<256){a=c[6327]|0;if(a&1<<b){a=c[25348+(b<<1<<2)+8>>2]|0;if(a>>>0<(c[6331]|0)>>>0)Ua();else{o=a;p=25348+(b<<1<<2)+8|0}}else{c[6327]=a|1<<b;o=25348+(b<<1<<2)|0;p=25348+(b<<1<<2)+8|0}c[p>>2]=q;c[o+12>>2]=q;c[q+8>>2]=o;c[q+12>>2]=25348+(b<<1<<2);return}a=f>>>8;if(a)if(f>>>0>16777215)a=31;else{p=a<<((a+1048320|0)>>>16&8)<<(((a<<((a+1048320|0)>>>16&8))+520192|0)>>>16&4);a=14-(((a<<((a+1048320|0)>>>16&8))+520192|0)>>>16&4|(a+1048320|0)>>>16&8|(p+245760|0)>>>16&2)+(p<<((p+245760|0)>>>16&2)>>>15)|0;a=f>>>(a+7|0)&1|a<<1}else a=0;e=25612+(a<<2)|0;c[q+28>>2]=a;c[q+20>>2]=0;c[q+16>>2]=0;b=c[6328]|0;d=1<<a;do if(b&d){b=f<<((a|0)==31?0:25-(a>>>1)|0);e=c[e>>2]|0;while(1){if((c[e+4>>2]&-8|0)==(f|0)){a=130;break}d=e+16+(b>>>31<<2)|0;a=c[d>>2]|0;if(!a){a=127;break}else{b=b<<1;e=a}}if((a|0)==127)if(d>>>0<(c[6331]|0)>>>0)Ua();else{c[d>>2]=q;c[q+24>>2]=e;c[q+12>>2]=q;c[q+8>>2]=q;break}else if((a|0)==130){a=e+8|0;b=c[a>>2]|0;p=c[6331]|0;if(b>>>0>=p>>>0&e>>>0>=p>>>0){c[b+12>>2]=q;c[a>>2]=q;c[q+8>>2]=b;c[q+12>>2]=e;c[q+24>>2]=0;break}else Ua()}}else{c[6328]=b|d;c[e>>2]=q;c[q+24>>2]=e;c[q+12>>2]=q;c[q+8>>2]=q}while(0);q=(c[6335]|0)+-1|0;c[6335]=q;if(!q)a=25764;else return;while(1){a=c[a>>2]|0;if(!a)break;else a=a+8|0}c[6335]=-1;return}function Sc(b,d,e){b=b|0;d=d|0;e=+e;var f=0,h=0,j=0,k=0,l=0,m=0.0,n=0.0,o=0,p=0,q=0.0,r=0,s=0;s=i;i=i+112|0;k=c[b+756>>2]|0;if((k|0)==(c[b+752>>2]|0)){a:do if(k){j=c[b+760>>2]|0;if((k|0)>0){f=0;h=j;while(1){h=c[h+(f*104|0)+96>>2]|0;if(h|0)c[h+36>>2]=f;f=f+1|0;if((f|0)==(k|0)){o=j;break a}h=c[b+760>>2]|0}}else o=j}else o=0;while(0);h=c[b+772>>2]|0;if((h|0)>0){f=0;do{p=(c[b+780>>2]|0)+(f*52|0)+8|0;c[p>>2]=((c[p>>2]|0)-o|0)/104|0;p=(c[b+780>>2]|0)+(f*52|0)+12|0;c[p>>2]=((c[p>>2]|0)-o|0)/104|0;f=f+1|0}while((f|0)!=(h|0))}h=c[b+792>>2]|0;if((h|0)>0){f=0;do{j=(c[b+800>>2]|0)+(f*44|0)+8|0;c[j>>2]=((c[j>>2]|0)-o|0)/104|0;j=(c[b+800>>2]|0)+(f*44|0)+12|0;c[j>>2]=((c[j>>2]|0)-o|0)/104|0;j=(c[b+800>>2]|0)+(f*44|0)+16|0;c[j>>2]=((c[j>>2]|0)-o|0)/104|0;j=c[(c[b+800>>2]|0)+(f*44|0)+40>>2]|0;if(j|0)c[j+36>>2]=f;f=f+1|0}while((f|0)!=(h|0))}h=c[b+832>>2]|0;if((h|0)>0){j=c[b+840>>2]|0;f=0;do{p=j+(f*96|0)|0;c[p>>2]=((c[p>>2]|0)-o|0)/104|0;f=f+1|0}while((f|0)!=(h|0))}l=c[b+732>>2]|0;if((l|0)>0){j=0;f=c[b+740>>2]|0;do{if((c[f+(j*60|0)+24>>2]|0)>0){h=0;do{f=f+(j*60|0)+28+(h<<2)|0;c[f>>2]=((c[f>>2]|0)-o|0)/104|0;h=h+1|0;f=c[b+740>>2]|0}while((h|0)<(c[f+(j*60|0)+24>>2]|0))}j=j+1|0}while((j|0)!=(l|0))}if((k|0)<(k<<1|1|0)){c[6324]=(c[6324]|0)+1;f=ic(((k<<1|1)*104|3)+16|0)|0;if(!f)j=0;else{c[(f+4+15&-16)+-4>>2]=f;j=f+4+15&-16}h=c[b+752>>2]|0;if((h|0)>0){f=0;do{o=j+(f*104|0)|0;l=(c[b+760>>2]|0)+(f*104|0)|0;p=o+104|0;do{c[o>>2]=c[l>>2];o=o+4|0;l=l+4|0}while((o|0)<(p|0));f=f+1|0}while((f|0)!=(h|0))}f=c[b+760>>2]|0;if(f|0){if(a[b+764>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+760>>2]=0}a[b+764>>0]=1;c[b+760>>2]=j;c[b+756>>2]=k<<1|1;k=c[b+752>>2]|0}b:do if(k){l=c[b+760>>2]|0;if((k|0)>0){f=0;h=l;while(1){j=c[h+(f*104|0)+96>>2]|0;if(j|0)c[j+36>>2]=h+(f*104|0);f=f+1|0;if((f|0)==(k|0))break b;h=c[b+760>>2]|0}}}else l=0;while(0);h=c[b+772>>2]|0;if((h|0)>0){f=0;do{p=(c[b+780>>2]|0)+(f*52|0)+8|0;c[p>>2]=l+((c[p>>2]|0)*104|0);p=(c[b+780>>2]|0)+(f*52|0)+12|0;c[p>>2]=l+((c[p>>2]|0)*104|0);f=f+1|0}while((f|0)!=(h|0))}h=c[b+792>>2]|0;if((h|0)>0){f=0;do{j=(c[b+800>>2]|0)+(f*44|0)+8|0;c[j>>2]=l+((c[j>>2]|0)*104|0);j=(c[b+800>>2]|0)+(f*44|0)+12|0;c[j>>2]=l+((c[j>>2]|0)*104|0);j=(c[b+800>>2]|0)+(f*44|0)+16|0;c[j>>2]=l+((c[j>>2]|0)*104|0);j=c[b+800>>2]|0;k=c[j+(f*44|0)+40>>2]|0;if(k|0)c[k+36>>2]=j+(f*44|0);f=f+1|0}while((f|0)!=(h|0))}h=c[b+832>>2]|0;if((h|0)>0){j=c[b+840>>2]|0;f=0;do{c[j+(f*96|0)>>2]=l+((c[j+(f*96|0)>>2]|0)*104|0);f=f+1|0}while((f|0)!=(h|0))}k=c[b+732>>2]|0;if((k|0)>0){j=0;f=c[b+740>>2]|0;do{if((c[f+(j*60|0)+24>>2]|0)>0){h=0;do{f=f+(j*60|0)+28+(h<<2)|0;c[f>>2]=l+((c[f>>2]|0)*104|0);h=h+1|0;f=c[b+740>>2]|0}while((h|0)<(c[f+(j*60|0)+24>>2]|0))}j=j+1|0}while((j|0)!=(k|0))}}o=c[b+192>>2]|0;q=+Cb[c[(c[o>>2]|0)+48>>2]&15](o);o=s;p=o+100|0;do{c[o>>2]=0;o=o+4|0}while((o|0)<(p|0));f=c[b+752>>2]|0;if((f|0)==(c[b+756>>2]|0)?(r=f|0?f<<1:1,(f|0)<(r|0)):0){if(!r)j=0;else{c[6324]=(c[6324]|0)+1;f=ic((r*104|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}j=f;f=c[b+752>>2]|0}if((f|0)>0){h=0;do{o=j+(h*104|0)|0;l=(c[b+760>>2]|0)+(h*104|0)|0;p=o+104|0;do{c[o>>2]=c[l>>2];o=o+4|0;l=l+4|0}while((o|0)<(p|0));h=h+1|0}while((h|0)!=(f|0))}f=c[b+760>>2]|0;if(f|0){if(a[b+764>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+760>>2]=0}a[b+764>>0]=1;c[b+760>>2]=j;c[b+756>>2]=r;f=c[b+752>>2]|0}o=c[b+760>>2]|0;c[o+(f*104|0)>>2]=0;o=o+(f*104|0)+4|0;l=s;p=o+100|0;do{c[o>>2]=c[l>>2];o=o+4|0;l=l+4|0}while((o|0)<(p|0));h=c[b+752>>2]|0;c[b+752>>2]=h+1;j=c[b+760>>2]|0;o=j+(h*104|0)|0;p=o+104|0;do{c[o>>2]=0;o=o+4|0}while((o|0)<(p|0));c[j+(h*104|0)+8>>2]=c[d>>2];c[j+(h*104|0)+8+4>>2]=c[d+4>>2];c[j+(h*104|0)+8+8>>2]=c[d+8>>2];c[j+(h*104|0)+8+12>>2]=c[d+12>>2];rp(j+(h*104|0)+24|0,d|0,16)|0;g[j+(h*104|0)+88>>2]=e>0.0?1.0/e:0.0;c[j+(h*104|0)+4>>2]=c[c[b+920>>2]>>2];e=+g[j+(h*104|0)+8>>2];m=+g[j+(h*104|0)+12>>2];n=+g[j+(h*104|0)+16>>2];f=c[b+972>>2]|0;if(f|0){c[b+972>>2]=0;d=f;r=d+32|0;c[r>>2]=0;r=d+36|0;c[r>>2]=j+(h*104|0);r=d+40|0;c[r>>2]=0;g[d>>2]=e-q;r=d+4|0;g[r>>2]=m-q;r=d+8|0;g[r>>2]=n-q;r=d+12|0;g[r>>2]=0.0;r=d+16|0;g[r>>2]=q+e;r=d+20|0;g[r>>2]=q+m;r=d+24|0;g[r>>2]=q+n;r=d+28|0;g[r>>2]=0.0;r=c[b+968>>2]|0;Ze(b+968|0,r,d);b=b+980|0;r=c[b>>2]|0;r=r+1|0;c[b>>2]=r;b=j+(h*104|0)+96|0;c[b>>2]=d;i=s;return}c[6324]=(c[6324]|0)+1;f=ic(63)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}o=f;p=o+44|0;do{c[o>>2]=0;o=o+4|0}while((o|0)<(p|0));d=f;r=d+32|0;c[r>>2]=0;r=d+36|0;c[r>>2]=j+(h*104|0);r=d+40|0;c[r>>2]=0;g[d>>2]=e-q;r=d+4|0;g[r>>2]=m-q;r=d+8|0;g[r>>2]=n-q;r=d+12|0;g[r>>2]=0.0;r=d+16|0;g[r>>2]=q+e;r=d+20|0;g[r>>2]=q+m;r=d+24|0;g[r>>2]=q+n;r=d+28|0;g[r>>2]=0.0;r=c[b+968>>2]|0;Ze(b+968|0,r,d);b=b+980|0;r=c[b>>2]|0;r=r+1|0;c[b>>2]=r;b=j+(h*104|0)+96|0;c[b>>2]=d;i=s;return}function Tc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0;if((a[b+180>>0]|0)==0?(a[b+48>>0]|0)!=0:0){w=+g[b+116>>2];i=+g[e>>2];x=+g[b+132>>2];C=+g[e+4>>2];y=+g[b+148>>2];D=+g[e+8>>2];k=+g[b+120>>2];n=+g[b+136>>2];p=+g[b+152>>2];q=+g[b+124>>2];s=+g[b+140>>2];t=+g[b+156>>2];j=+g[e+16>>2];m=+g[e+20>>2];o=+g[e+24>>2];r=+g[e+32>>2];z=+g[e+36>>2];A=+g[e+40>>2];h=+g[b+164>>2];f=+g[b+168>>2];v=+g[b+172>>2];u=+g[e+48>>2]+(i*h+C*f+D*v);B=j*h+m*f+o*v+ +g[e+52>>2];v=r*h+z*f+A*v+ +g[e+56>>2];g[b+824>>2]=w*i+x*C+y*D;g[b+828>>2]=i*k+C*n+D*p;g[b+832>>2]=i*q+C*s+D*t;g[b+836>>2]=0.0;g[b+840>>2]=w*j+x*m+y*o;g[b+844>>2]=k*j+n*m+p*o;g[b+848>>2]=q*j+s*m+t*o;g[b+852>>2]=0.0;g[b+856>>2]=w*r+x*z+y*A;g[b+860>>2]=k*r+n*z+p*A;g[b+864>>2]=q*r+s*z+t*A;g[b+868>>2]=0.0;g[b+872>>2]=u;g[b+876>>2]=B;g[b+880>>2]=v;g[b+884>>2]=0.0;v=+g[b+52>>2];B=+g[d>>2];u=+g[b+68>>2];A=+g[d+4>>2];t=+g[b+84>>2];z=+g[d+8>>2];s=+g[b+56>>2];r=+g[b+72>>2];q=+g[b+88>>2];p=+g[b+60>>2];n=+g[b+76>>2];k=+g[b+92>>2];y=+g[d+16>>2];x=+g[d+20>>2];w=+g[d+24>>2];o=+g[d+32>>2];m=+g[d+36>>2];j=+g[d+40>>2];D=+g[b+100>>2];C=+g[b+104>>2];i=+g[b+108>>2];f=+g[d+48>>2]+(B*D+A*C+z*i);h=y*D+x*C+w*i+ +g[d+52>>2];i=o*D+m*C+j*i+ +g[d+56>>2];g[b+888>>2]=v*B+u*A+t*z;g[b+892>>2]=B*s+A*r+z*q;g[b+896>>2]=B*p+A*n+z*k;g[b+900>>2]=0.0;g[b+904>>2]=v*y+u*x+t*w;g[b+908>>2]=s*y+r*x+q*w;g[b+912>>2]=p*y+n*x+k*w;g[b+916>>2]=0.0;g[b+920>>2]=v*o+u*m+t*j;g[b+924>>2]=s*o+r*m+q*j;g[b+928>>2]=p*o+n*m+k*j;g[b+932>>2]=0.0;g[b+936>>2]=f;g[b+940>>2]=h;g[b+944>>2]=i;g[b+948>>2]=0.0;d=b+856|0;e=b+840|0}else{o=+g[b+52>>2];D=+g[d>>2];n=+g[b+68>>2];h=+g[d+4>>2];m=+g[b+84>>2];f=+g[d+8>>2];z=+g[b+56>>2];x=+g[b+72>>2];v=+g[b+88>>2];u=+g[b+60>>2];s=+g[b+76>>2];r=+g[b+92>>2];A=+g[d+16>>2];y=+g[d+20>>2];w=+g[d+24>>2];t=+g[d+32>>2];k=+g[d+36>>2];j=+g[d+40>>2];C=+g[b+100>>2];B=+g[b+104>>2];p=+g[b+108>>2];q=+g[d+48>>2]+(D*C+h*B+f*p);i=A*C+y*B+w*p+ +g[d+52>>2];p=t*C+k*B+j*p+ +g[d+56>>2];g[b+824>>2]=o*D+n*h+m*f;g[b+828>>2]=D*z+h*x+f*v;g[b+832>>2]=D*u+h*s+f*r;g[b+836>>2]=0.0;g[b+840>>2]=o*A+n*y+m*w;g[b+844>>2]=z*A+x*y+v*w;g[b+848>>2]=u*A+s*y+r*w;g[b+852>>2]=0.0;g[b+856>>2]=o*t+n*k+m*j;g[b+860>>2]=z*t+x*k+v*j;g[b+864>>2]=u*t+s*k+r*j;g[b+868>>2]=0.0;g[b+872>>2]=q;g[b+876>>2]=i;g[b+880>>2]=p;g[b+884>>2]=0.0;p=+g[b+116>>2];i=+g[e>>2];q=+g[b+132>>2];j=+g[e+4>>2];r=+g[b+148>>2];k=+g[e+8>>2];s=+g[b+120>>2];t=+g[b+136>>2];u=+g[b+152>>2];v=+g[b+124>>2];x=+g[b+140>>2];z=+g[b+156>>2];m=+g[e+16>>2];n=+g[e+20>>2];o=+g[e+24>>2];w=+g[e+32>>2];y=+g[e+36>>2];A=+g[e+40>>2];f=+g[b+164>>2];h=+g[b+168>>2];D=+g[b+172>>2];B=+g[e+48>>2]+(i*f+j*h+k*D);C=m*f+n*h+o*D+ +g[e+52>>2];D=w*f+y*h+A*D+ +g[e+56>>2];g[b+888>>2]=p*i+q*j+r*k;g[b+892>>2]=i*s+j*t+k*u;g[b+896>>2]=i*v+j*x+k*z;g[b+900>>2]=0.0;g[b+904>>2]=p*m+q*n+r*o;g[b+908>>2]=s*m+t*n+u*o;g[b+912>>2]=v*m+x*n+z*o;g[b+916>>2]=0.0;g[b+920>>2]=p*w+q*y+r*A;g[b+924>>2]=s*w+t*y+u*A;g[b+928>>2]=v*w+x*y+z*A;g[b+932>>2]=0.0;g[b+936>>2]=B;g[b+940>>2]=C;g[b+944>>2]=D;g[b+948>>2]=0.0;d=b+856|0;e=b+840|0}c[b+968>>2]=c[b+872>>2];c[b+968+4>>2]=c[b+872+4>>2];c[b+968+8>>2]=c[b+872+8>>2];c[b+968+12>>2]=c[b+872+12>>2];c[b+984>>2]=c[b+936>>2];c[b+984+4>>2]=c[b+936+4>>2];c[b+984+8>>2]=c[b+936+8>>2];c[b+984+12>>2]=c[b+936+12>>2];F=c[b+824>>2]|0;E=c[e>>2]|0;e=c[d>>2]|0;c[b+952>>2]=F;c[b+956>>2]=E;c[b+960>>2]=e;g[b+964>>2]=0.0;f=(c[l>>2]=F,+g[l>>2]);h=(c[l>>2]=E,+g[l>>2]);i=(c[l>>2]=e,+g[l>>2]);if((a[b+180>>0]|0)==0?(a[b+48>>0]|0)==0:0){u=+g[b+968>>2];A=u-+g[b+984>>2];v=+g[b+972>>2];C=v-+g[b+988>>2];w=+g[b+976>>2];D=w-+g[b+992>>2];g[b+1016>>2]=A;g[b+1020>>2]=C;g[b+1024>>2]=D;g[b+1028>>2]=0.0;B=f*A;x=h*C;x=B+x;B=i*D;B=x+B;x=f*B;y=h*B;z=i*B;x=u+x;y=v+y;z=w+z;F=b+1e3|0;g[F>>2]=x;F=b+1004|0;g[F>>2]=y;F=b+1008|0;g[F>>2]=z;F=b+1012|0;g[F>>2]=0.0;F=b+1032|0;g[F>>2]=B;F=b+828|0;E=b+844|0;e=b+860|0;B=+g[F>>2];z=+g[E>>2];y=+g[e>>2];B=B*A;z=z*C;z=B+z;y=y*D;y=z+y;e=b+1036|0;g[e>>2]=y;e=b+832|0;E=b+848|0;F=b+864|0;y=+g[e>>2];z=+g[E>>2];B=+g[F>>2];A=y*A;C=z*C;C=A+C;D=B*D;D=C+D;F=b+1040|0;g[F>>2]=D;return}u=+g[b+968>>2];A=+g[b+984>>2]-u;v=+g[b+972>>2];C=+g[b+988>>2]-v;w=+g[b+976>>2];D=+g[b+992>>2]-w;g[b+1016>>2]=A;g[b+1020>>2]=C;g[b+1024>>2]=D;g[b+1028>>2]=0.0;B=f*A;x=h*C;x=B+x;B=i*D;B=x+B;x=f*B;y=h*B;z=i*B;x=u+x;y=v+y;z=w+z;F=b+1e3|0;g[F>>2]=x;F=b+1004|0;g[F>>2]=y;F=b+1008|0;g[F>>2]=z;F=b+1012|0;g[F>>2]=0.0;F=b+1032|0;g[F>>2]=B;F=b+828|0;E=b+844|0;e=b+860|0;B=+g[F>>2];z=+g[E>>2];y=+g[e>>2];B=B*A;z=z*C;z=B+z;y=y*D;y=z+y;e=b+1036|0;g[e>>2]=y;e=b+832|0;E=b+848|0;F=b+864|0;y=+g[e>>2];z=+g[E>>2];B=+g[F>>2];A=y*A;C=z*C;C=A+C;D=B*D;D=C+D;F=b+1040|0;g[F>>2]=D;return}function Uc(b,d,e,f,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0;H=i;i=i+32|0;c[H+16>>2]=j;c[H+16+4>>2]=k;c[H+16+8>>2]=l;c[H>>2]=e;c[H+4>>2]=f;c[H+8>>2]=h;if(!(+g[d+52>>2]<+g[b+12>>2])){m=0;i=H;return m|0}w=+g[d+36>>2];y=+g[d+40>>2];x=+g[d+44>>2];l=c[d+48>>2]|0;z=1.0/+G(+(w*w+y*y+x*x));h=zi(H)|0;A=+g[d+4>>2]-+g[h+48>>2];B=+g[d+8>>2]-+g[h+52>>2];C=+g[d+12>>2]-+g[h+56>>2];h=zi(H+16|0)|0;D=+g[d+20>>2]-+g[h+48>>2];E=+g[d+24>>2]-+g[h+52>>2];F=+g[d+28>>2]-+g[h+56>>2];if(!f)if(!e){n=0.0;o=0.0;r=0.0;s=0.0;p=0.0;q=0.0}else{q=+g[e+336>>2];r=+g[e+340>>2];v=+g[e+332>>2];n=C*q-B*r;o=+g[e+316>>2];r=A*r-C*v;s=+g[e+320>>2];p=+g[e+324>>2];q=B*v-A*q}else{q=+g[f+372>>2];r=+g[f+376>>2];v=+g[f+368>>2];n=C*q-B*r;o=+g[f+352>>2];r=A*r-C*v;s=+g[f+356>>2];p=+g[f+360>>2];q=B*v-A*q}v=o+n;u=s+r;t=p+q;if(!k)if(!j){p=0.0;q=0.0;r=0.0;s=0.0;n=0.0;o=0.0}else{o=+g[j+336>>2];r=+g[j+340>>2];I=+g[j+332>>2];p=F*o-E*r;q=+g[j+316>>2];r=D*r-F*I;s=+g[j+320>>2];n=+g[j+324>>2];o=E*I-D*o}else{o=+g[k+372>>2];r=+g[k+376>>2];I=+g[k+368>>2];p=F*o-E*r;q=+g[k+352>>2];r=D*r-F*I;s=+g[k+356>>2];n=+g[k+360>>2];o=E*I-D*o}q=v-(q+p);u=u-(s+r);t=t-(n+o);v=x*z*t+(y*z*u+w*z*q);I=+g[d+52>>2]-+g[b+12>>2];c[m+4>>2]=c[H>>2];c[m+4+4>>2]=c[H+4>>2];c[m+4+8>>2]=c[H+8>>2];c[m+16>>2]=c[H+16>>2];c[m+16+4>>2]=c[H+16+4>>2];c[m+16+8>>2]=c[H+16+8>>2];d=zi(H)|0;s=A*+g[d+4>>2]+B*+g[d+20>>2]+C*+g[d+36>>2];r=A*+g[d+8>>2]+B*+g[d+24>>2]+C*+g[d+40>>2];g[m+28>>2]=A*+g[d>>2]+B*+g[d+16>>2]+C*+g[d+32>>2];g[m+32>>2]=s;g[m+36>>2]=r;g[m+40>>2]=0.0;d=zi(H+16|0)|0;r=D*+g[d+4>>2]+E*+g[d+20>>2]+F*+g[d+36>>2];s=D*+g[d+8>>2]+E*+g[d+24>>2]+F*+g[d+40>>2];g[m+44>>2]=D*+g[d>>2]+E*+g[d+16>>2]+F*+g[d+32>>2];g[m+48>>2]=r;g[m+52>>2]=s;g[m+56>>2]=0.0;g[m+164>>2]=A;g[m+168>>2]=B;g[m+172>>2]=C;g[m+176>>2]=0.0;g[m+180>>2]=D;g[m+184>>2]=E;g[m+188>>2]=F;g[m+192>>2]=0.0;g[m+60>>2]=1.0;g[m+64>>2]=1.0;c[m+156>>2]=0;c[m+160>>2]=0;g[m+68>>2]=1.0;g[m+72>>2]=w*z*I;g[m+76>>2]=y*z*I;g[m+80>>2]=x*z*I;g[m+84>>2]=0.0;g[m+196>>2]=w*z;g[m+200>>2]=y*z;g[m+204>>2]=x*z;c[m+208>>2]=l;a[m+152>>0]=0;I=+g[b+16>>2];g[m+212>>2]=(t-x*z*v)*(t-x*z*v)+((q-w*z*v)*(q-w*z*v)+(u-y*z*v)*(u-y*z*v))<I*v*v*I?1.0:I;l=c[H+4>>2]|0;if(!l){l=c[H>>2]|0;if(!l)o=0.0;else o=+g[l+128>>2]}else o=+g[l+384>>2];if(!(a[22040]|0)){a[22040]=1;l=22572;h=l+48|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(h|0))}l=c[H+4>>2]|0;if(!l){e=c[H>>2]|0;e=(e|0)==0?22572:e+180|0}else e=l+304|0;l=c[H+16+4>>2]|0;if(!l){l=c[H+16>>2]|0;if(!l)n=0.0;else n=+g[l+128>>2]}else n=+g[l+384>>2];if(!(a[22040]|0)){a[22040]=1;l=22572;h=l+48|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(h|0))}l=c[H+16+4>>2]|0;if(!l){l=c[H+16>>2]|0;l=(l|0)==0?22572:l+180|0}else l=l+304|0;V=+g[m+172>>2];N=+g[m+168>>2];M=+g[m+164>>2];U=+g[e>>2];T=+g[e+16>>2];S=+g[e+32>>2];R=+g[e+4>>2];Q=+g[e+20>>2];P=+g[e+36>>2];O=+g[e+8>>2];L=+g[e+24>>2];K=+g[e+40>>2];B=+g[m+188>>2];v=+g[m+184>>2];w=+g[m+180>>2];J=+g[l>>2];p=+g[l+16>>2];q=+g[l+32>>2];r=+g[l+4>>2];s=+g[l+20>>2];t=+g[l+36>>2];u=+g[l+8>>2];I=+g[l+24>>2];x=+g[l+40>>2];D=o-((U*0.0+T*-V+N*S)*0.0+V*(R*0.0+Q*-V+N*P)+(O*0.0+L*-V+N*K)*-N)+(n-((J*0.0+p*-B+v*q)*0.0+B*(r*0.0+s*-B+v*t)+(u*0.0+I*-B+v*x)*-v));F=0.0-((U*0.0+T*-V+N*S)*-V+(R*0.0+Q*-V+N*P)*0.0+M*(O*0.0+L*-V+N*K))+(0.0-((J*0.0+p*-B+v*q)*-B+(r*0.0+s*-B+v*t)*0.0+w*(u*0.0+I*-B+v*x)));y=0.0-(N*(U*0.0+T*-V+N*S)+(R*0.0+Q*-V+N*P)*-M+(O*0.0+L*-V+N*K)*0.0)+(0.0-(v*(J*0.0+p*-B+v*q)+(r*0.0+s*-B+v*t)*-w+(u*0.0+I*-B+v*x)*0.0));E=0.0-((V*U+T*0.0+S*-M)*0.0+V*(V*R+Q*0.0+P*-M)+(V*O+L*0.0+K*-M)*-N)+(0.0-((B*J+p*0.0+q*-w)*0.0+B*(B*r+s*0.0+t*-w)+(B*u+I*0.0+x*-w)*-v));C=o-((V*U+T*0.0+S*-M)*-V+(V*R+Q*0.0+P*-M)*0.0+M*(V*O+L*0.0+K*-M))+(n-((B*J+p*0.0+q*-w)*-B+(B*r+s*0.0+t*-w)*0.0+w*(B*u+I*0.0+x*-w)));z=0.0-(N*(V*U+T*0.0+S*-M)+(V*R+Q*0.0+P*-M)*-M+(V*O+L*0.0+K*-M)*0.0)+(0.0-(v*(B*J+p*0.0+q*-w)+(B*r+s*0.0+t*-w)*-w+(B*u+I*0.0+x*-w)*0.0));A=0.0-((U*-N+M*T+S*0.0)*0.0+V*(R*-N+M*Q+P*0.0)+(O*-N+M*L+K*0.0)*-N)+(0.0-((J*-v+w*p+q*0.0)*0.0+B*(r*-v+w*s+t*0.0)+(u*-v+w*I+x*0.0)*-v));B=0.0-((U*-N+M*T+S*0.0)*-V+(R*-N+M*Q+P*0.0)*0.0+M*(O*-N+M*L+K*0.0))+(0.0-((J*-v+w*p+q*0.0)*-B+(r*-v+w*s+t*0.0)*0.0+w*(u*-v+w*I+x*0.0)));x=o-(N*(U*-N+M*T+S*0.0)+(R*-N+M*Q+P*0.0)*-M+(O*-N+M*L+K*0.0)*0.0)+(n-(v*(J*-v+w*p+q*0.0)+(r*-v+w*s+t*0.0)*-w+(u*-v+w*I+x*0.0)*0.0));I=1.0/(y*(B*E-C*A)+(D*(C*x-z*B)+F*(z*A-x*E)));g[m+104>>2]=(C*x-z*B)*I;g[m+108>>2]=(B*y-x*F)*I;g[m+112>>2]=(z*F-C*y)*I;g[m+116>>2]=0.0;g[m+120>>2]=(z*A-x*E)*I;g[m+124>>2]=(x*D-A*y)*I;g[m+128>>2]=(E*y-z*D)*I;g[m+132>>2]=0.0;g[m+136>>2]=(B*E-C*A)*I;g[m+140>>2]=(A*F-B*D)*I;g[m+144>>2]=(C*D-E*F)*I;g[m+148>>2]=0.0;m=1;i=H;return m|0}function Vc(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0;s=i;i=i+752|0;c[s+136+8>>2]=0;c[s+136+12>>2]=-1;c[s+136+16>>2]=1065353216;c[s+136+20>>2]=1065353216;c[s+136+24>>2]=1065353216;g[s+136+28>>2]=0.0;c[s+136>>2]=8368;c[s+136+4>>2]=8;g[s+136+32>>2]=0.0;g[s+136+48>>2]=0.0;q=c[e+4>>2]|0;r=c[e+12>>2]|0;h=c[q+4>>2]|0;if((h|0)<20){c[s+568>>2]=3928;c[s+568+168>>2]=0;g[s+568+172>>2]=0.0;c[s+568+164>>2]=c[f+4>>2];g[s+208+308>>2]=9.999999747378752e-005;a[s+208+332>>0]=0;c[s+192>>2]=8940;c[s+192+4>>2]=s+208;c[s+192+8>>2]=s+136;c[s+192+12>>2]=q;c[s+120>>2]=8784;c[s+120+4>>2]=s+208;c[s+120+8>>2]=s+136;c[s+120+12>>2]=q;q=(c[f+16>>2]&8|0)==0?s+192|0:s+120|0;if((Db[c[(c[q>>2]|0)+8>>2]&3](q,b,d,r,r,s+568|0)|0?(j=s+568+132|0,k=+g[j>>2],l=+g[s+568+136>>2],m=+g[s+568+140>>2],k*k+l*l+m*m>9.999999747378752e-005):0)?(n=+g[s+568+164>>2],n<+g[f+4>>2]):0){p=1.0/+G(+(k*k+l*l+m*m));g[j>>2]=k*p;g[s+568+136>>2]=l*p;g[s+568+140>>2]=m*p;c[s>>2]=c[e+8>>2];c[s+4>>2]=0;c[s+8>>2]=c[j>>2];c[s+8+4>>2]=c[j+4>>2];c[s+8+8>>2]=c[j+8>>2];c[s+8+12>>2]=c[j+12>>2];g[s+24>>2]=n;+Kb[c[(c[f>>2]|0)+12>>2]&15](f,s,1)}i=s;return}if((h+-21|0)>>>0>=9){if((h|0)!=31){i=s;return}h=c[q+68>>2]|0;e=c[e+8>>2]|0;c[s+568>>2]=5756;c[s+568+4>>2]=e;c[s+568+8>>2]=q;c[s+568+12>>2]=r;c[s+568+16>>2]=b;c[s+568+20>>2]=d;c[s+568+24>>2]=f;if(!h){j=c[q+20>>2]|0;if((j|0)>0){h=0;do{Hf(s+568|0,h);h=h+1|0}while((h|0)<(j|0))}}else{k=+g[r+48>>2];B=+g[b+48>>2]-k;m=+g[r+52>>2];A=+g[b+52>>2]-m;o=+g[r+56>>2];z=+g[b+56>>2]-o;y=+g[r>>2];x=+g[r+16>>2];w=+g[r+32>>2];v=+g[r+4>>2];u=+g[r+20>>2];t=+g[r+36>>2];l=+g[r+8>>2];n=+g[r+24>>2];p=+g[r+40>>2];g[s+208>>2]=B*y+A*x+z*w;g[s+208+4>>2]=B*v+A*u+z*t;g[s+208+8>>2]=B*l+A*n+z*p;g[s+208+12>>2]=0.0;k=+g[d+48>>2]-k;m=+g[d+52>>2]-m;o=+g[d+56>>2]-o;g[s+192>>2]=k*y+m*x+o*w;g[s+192+4>>2]=k*v+m*u+o*t;g[s+192+8>>2]=k*l+m*n+o*p;g[s+192+12>>2]=0.0;Me(c[h>>2]|0,s+208|0,s+192|0,s+568|0)}i=s;return}E=+g[r>>2];D=+g[r+16>>2];n=+g[r+32>>2];C=+g[r+4>>2];t=+g[r+20>>2];o=+g[r+36>>2];x=+g[r+8>>2];z=+g[r+24>>2];B=+g[r+40>>2];u=-+g[r+48>>2];v=-+g[r+52>>2];w=-+g[r+56>>2];A=+g[b+48>>2];y=+g[b+52>>2];m=+g[b+56>>2];k=E*u+D*v+n*w+(E*A+D*y+n*m);l=C*u+t*v+o*w+(C*A+t*y+o*m);m=x*u+z*v+B*w+(x*A+z*y+B*m);g[s+120>>2]=k;g[s+120+4>>2]=l;g[s+120+8>>2]=m;g[s+120+12>>2]=0.0;y=+g[d+48>>2];A=+g[d+52>>2];p=+g[d+56>>2];n=E*u+D*v+n*w+(E*y+D*A+n*p);o=C*u+t*v+o*w+(C*y+t*A+o*p);p=x*u+z*v+B*w+(x*y+z*A+B*p);if((c[q+4>>2]|0)==21){h=c[e+8>>2]|0;e=c[f+16>>2]|0;c[s+4>>2]=c[s+120>>2];c[s+4+4>>2]=c[s+120+4>>2];c[s+4+8>>2]=c[s+120+8>>2];c[s+4+12>>2]=c[s+120+12>>2];g[s+20>>2]=n;g[s+24>>2]=o;g[s+28>>2]=p;g[s+32>>2]=0.0;c[s+36>>2]=e;g[s+40>>2]=1.0;c[s>>2]=5708;c[s+44>>2]=f;c[s+48>>2]=h;c[s+52>>2]=q;c[s+56>>2]=c[r>>2];c[s+56+4>>2]=c[r+4>>2];c[s+56+8>>2]=c[r+8>>2];c[s+56+12>>2]=c[r+12>>2];c[s+72>>2]=c[r+16>>2];c[s+72+4>>2]=c[r+16+4>>2];c[s+72+8>>2]=c[r+16+8>>2];c[s+72+12>>2]=c[r+16+12>>2];c[s+88>>2]=c[r+32>>2];c[s+88+4>>2]=c[r+32+4>>2];c[s+88+8>>2]=c[r+32+8>>2];c[s+88+12>>2]=c[r+32+12>>2];c[s+104>>2]=c[r+48>>2];c[s+104+4>>2]=c[r+48+4>>2];c[s+104+8>>2]=c[r+48+8>>2];c[s+104+12>>2]=c[r+48+12>>2];c[s+40>>2]=c[f+4>>2];h=c[q+52>>2]|0;c[s+192>>2]=6760;c[s+192+4>>2]=h;c[s+192+8>>2]=s;h=c[q+56>>2]|0;c[s+568>>2]=0;c[s+568+4>>2]=0;c[s+568+8>>2]=0;c[s+568+12>>2]=0;c[s+208>>2]=0;c[s+208+4>>2]=0;c[s+208+8>>2]=0;c[s+208+12>>2]=0;if(!(a[h+60>>0]|0))Ae(h,s+192|0,s+120|0,n,o,p,s+568|0,s+208|0);else ke(h,s+192|0,s+120|0,n,o,p,s+568|0,s+208|0,c[h+56>>2]|0)}else{e=c[e+8>>2]|0;d=c[f+16>>2]|0;g[s+568+4>>2]=k;g[s+568+8>>2]=l;g[s+568+12>>2]=m;g[s+568+16>>2]=0.0;g[s+568+20>>2]=n;g[s+568+24>>2]=o;g[s+568+28>>2]=p;g[s+568+32>>2]=0.0;c[s+568+36>>2]=d;g[s+568+40>>2]=1.0;c[s+568>>2]=5732;c[s+568+44>>2]=f;c[s+568+48>>2]=e;c[s+568+52>>2]=q;c[s+568+56>>2]=c[r>>2];c[s+568+56+4>>2]=c[r+4>>2];c[s+568+56+8>>2]=c[r+8>>2];c[s+568+56+12>>2]=c[r+12>>2];c[s+568+72>>2]=c[r+16>>2];c[s+568+72+4>>2]=c[r+16+4>>2];c[s+568+72+8>>2]=c[r+16+8>>2];c[s+568+72+12>>2]=c[r+16+12>>2];c[s+568+88>>2]=c[r+32>>2];c[s+568+88+4>>2]=c[r+32+4>>2];c[s+568+88+8>>2]=c[r+32+8>>2];c[s+568+88+12>>2]=c[r+32+12>>2];c[s+568+104>>2]=c[r+48>>2];c[s+568+104+4>>2]=c[r+48+4>>2];c[s+568+104+8>>2]=c[r+48+8>>2];c[s+568+104+12>>2]=c[r+48+12>>2];c[s+568+40>>2]=c[f+4>>2];g[s+208>>2]=k;g[s+208+4>>2]=l;g[s+208+8>>2]=m;g[s+208+12>>2]=0.0;if(n<k)g[s+208>>2]=n;if(o<l)g[s+208+4>>2]=o;if(p<m)g[s+208+8>>2]=p;g[s+192>>2]=k;g[s+192+4>>2]=l;g[s+192+8>>2]=m;g[s+192+12>>2]=0.0;if(k<n)g[s+192>>2]=n;if(l<o)g[s+192+4>>2]=o;if(m<p)g[s+192+8>>2]=p;Yb[c[(c[q>>2]|0)+64>>2]&127](q,s+568|0,s+208|0,s+192|0)}i=s;return}function Wc(d,e){d=d|0;e=+e;var f=0,h=0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0,s=0,t=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0,B=0.0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0;C=i;i=i+480|0;f=c[d+84>>2]|0;if(f|0)jb[f&31](d,e);jb[c[(c[d>>2]|0)+140>>2]&31](d,e);g[d+28>>2]=e;c[d+32>>2]=0;c[d+48>>2]=ob[c[(c[d>>2]|0)+20>>2]&127](d)|0;f=c[d+316>>2]|0;if((c[d+308>>2]|0)>0){h=0;do{t=c[d+24>>2]|0;mb[c[(c[t>>2]|0)+16>>2]&127](t,c[f+(h<<2)>>2]|0);h=h+1|0;f=c[d+316>>2]|0}while((h|0)<(c[d+308>>2]|0))}if(f|0){if(a[d+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[d+316>>2]=0}a[d+320>>0]=1;c[d+316>>2]=0;c[d+308>>2]=0;c[d+312>>2]=0;a:do if((c[d+232>>2]|0)>0){r=C+408+48|0;s=C+312+44|0;p=0;while(1){t=c[(c[d+240>>2]|0)+(p<<2)>>2]|0;g[t+264>>2]=1.0;switch(c[t+216>>2]|0){case 2:case 5:break;default:if(((((c[t+204>>2]&3|0)==0?(Mg(t+4|0,+g[t+352>>2],+g[t+356>>2],+g[t+360>>2],t+368|0,e,C+408|0),B=+g[r>>2],u=B-+g[t+52>>2],v=+g[C+408+52>>2],w=v-+g[t+56>>2],x=+g[C+408+56>>2],y=x-+g[t+60>>2],a[d+44>>0]|0):0)?(o=+g[t+272>>2],o*o!=0.0?o*o<u*u+w*w+y*y:0):0)?(c[(c[t+192>>2]|0)+4>>2]|0)<20:0)?(c[5872]=(c[5872]|0)+1,k=c[d+68>>2]|0,k=ob[c[(c[k>>2]|0)+36>>2]&127](k)|0,q=c[d+24>>2]|0,g[C+312+4>>2]=1.0,b[C+312+8>>1]=1,b[C+312+10>>1]=-1,c[C+312+12>>2]=c[t+52>>2],c[C+312+12+4>>2]=c[t+52+4>>2],c[C+312+12+8>>2]=c[t+52+8>>2],c[C+312+12+12>>2]=c[t+52+12>>2],c[C+312+28>>2]=c[r>>2],c[C+312+28+4>>2]=c[r+4>>2],c[C+312+28+8>>2]=c[r+8>>2],c[C+312+28+12>>2]=c[r+12>>2],c[C+312+76>>2]=0,c[C+312>>2]=4872,c[C+312+80>>2]=t,c[C+312+88>>2]=k,c[C+312+92>>2]=q,q=c[t+268>>2]|0,c[C+256+8>>2]=0,c[C+256+12>>2]=-1,c[C+256+16>>2]=1065353216,c[C+256+20>>2]=1065353216,c[C+256+24>>2]=1065353216,g[C+256+28>>2]=0.0,c[C+256>>2]=8368,c[C+256+4>>2]=8,c[C+256+32>>2]=q,c[C+256+48>>2]=q,c[C+312+84>>2]=c[d+56>>2],q=c[(c[t+188>>2]|0)+4>>2]|0,b[C+312+8>>1]=q,b[C+312+10>>1]=q>>>16,c[C+192+48>>2]=c[r>>2],c[C+192+48+4>>2]=c[r+4>>2],c[C+192+48+8>>2]=c[r+8>>2],c[C+192+48+12>>2]=c[r+12>>2],c[C+192>>2]=c[t+4>>2],c[C+192+4>>2]=c[t+4+4>>2],c[C+192+8>>2]=c[t+4+8>>2],c[C+192+12>>2]=c[t+4+12>>2],c[C+192+16>>2]=c[t+20>>2],c[C+192+16+4>>2]=c[t+20+4>>2],c[C+192+16+8>>2]=c[t+20+8>>2],c[C+192+16+12>>2]=c[t+20+12>>2],c[C+192+32>>2]=c[t+36>>2],c[C+192+32+4>>2]=c[t+36+4>>2],c[C+192+32+8>>2]=c[t+36+8>>2],c[C+192+32+12>>2]=c[t+36+12>>2],Hd(d,C+256|0,t+4|0,C+192|0,C+312|0,0.0),z=+g[C+312+4>>2],z<1.0):0){j=z*(B-+g[t+52>>2]);l=z*(v-+g[t+56>>2]);n=z*(x-+g[t+60>>2]);o=-(l*+g[C+312+48>>2])-j*+g[s>>2]-n*+g[C+312+52>>2];q=c[d+24>>2]|0;q=yb[c[(c[q>>2]|0)+12>>2]&63](q,t,c[C+312+76>>2]|0)|0;h=c[d+308>>2]|0;if((h|0)==(c[d+312>>2]|0)?(A=h|0?h<<1:1,(h|0)<(A|0)):0){if(!A)f=0;else{c[6324]=(c[6324]|0)+1;f=ic((A<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[d+308>>2]|0}if((h|0)>0){k=0;do{c[f+(k<<2)>>2]=c[(c[d+316>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(h|0))}k=c[d+316>>2]|0;if(k){if(a[d+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);h=c[d+308>>2]|0}c[d+316>>2]=0}a[d+320>>0]=1;c[d+316>>2]=f;c[d+312>>2]=A;f=h}else f=h;c[(c[d+316>>2]|0)+(f<<2)>>2]=q;c[d+308>>2]=f+1;m=j+ +g[t+52>>2];l=l+ +g[t+56>>2];j=n+ +g[t+60>>2];f=c[C+312+76>>2]|0;N=+g[f+4>>2];M=+g[f+20>>2];L=+g[f+36>>2];K=+g[f+8>>2];J=+g[f+24>>2];I=+g[f+40>>2];H=+g[f+12>>2];F=+g[f+28>>2];D=+g[f+44>>2];G=-+g[f+52>>2];E=-+g[f+56>>2];n=-+g[f+60>>2];c[C>>2]=0;c[C+4>>2]=0;c[C+8>>2]=0;c[C+12>>2]=0;g[C+16>>2]=m*N+l*M+j*L+(N*G+M*E+L*n);g[C+20>>2]=m*K+l*J+j*I+(K*G+J*E+I*n);g[C+24>>2]=m*H+l*F+j*D+(H*G+F*E+D*n);g[C+28>>2]=0.0;c[C+64>>2]=c[s>>2];c[C+64+4>>2]=c[s+4>>2];c[C+64+8>>2]=c[s+8>>2];c[C+64+12>>2]=c[s+12>>2];g[C+80>>2]=o;c[C+84>>2]=0;c[C+84+4>>2]=0;c[C+84+8>>2]=0;c[C+84+12>>2]=0;f=C+116|0;h=f+44|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(h|0));k=Le(q,C)|0;g[q+4+(k*192|0)+96>>2]=0.0;N=+g[t+224>>2]*+g[(c[C+312+76>>2]|0)+224>>2];N=N<-10.0?-10.0:N;g[q+4+(k*192|0)+84>>2]=N>10.0?10.0:N;c[q+4+(k*192|0)+48>>2]=c[t+52>>2];c[q+4+(k*192|0)+48+4>>2]=c[t+52+4>>2];c[q+4+(k*192|0)+48+8>>2]=c[t+52+8>>2];c[q+4+(k*192|0)+48+12>>2]=c[t+52+12>>2];g[q+4+(k*192|0)+32>>2]=m;g[q+4+(k*192|0)+36>>2]=l;g[q+4+(k*192|0)+40>>2]=j;g[q+4+(k*192|0)+44>>2]=0.0}}p=p+1|0;if((p|0)>=(c[d+232>>2]|0))break a}}while(0);kb[c[(c[d>>2]|0)+44>>2]&255](d);kb[c[(c[d>>2]|0)+148>>2]&255](d);g[d+104>>2]=e;mb[c[(c[d>>2]|0)+152>>2]&127](d,d+92|0);jb[c[(c[d>>2]|0)+144>>2]&31](d,e);if((c[d+280>>2]|0)>0){f=0;do{A=c[(c[d+288>>2]|0)+(f<<2)>>2]|0;Wb[c[(c[A>>2]|0)+8>>2]&7](A,d,e);f=f+1|0}while((f|0)<(c[d+280>>2]|0))}jb[c[(c[d>>2]|0)+156>>2]&31](d,e);f=c[d+80>>2]|0;if(!f){i=C;return}jb[f&31](d,e);i=C;return}function Xc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,i=0,j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,G=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0;c[b>>2]=c[a>>2];c[b+4>>2]=c[a+4>>2];c[b+8>>2]=c[a+8>>2];c[b+12>>2]=c[a+12>>2];c[b+16>>2]=c[a+16>>2];c[b+16+4>>2]=c[a+16+4>>2];c[b+16+8>>2]=c[a+16+8>>2];c[b+16+12>>2]=c[a+16+12>>2];c[b+32>>2]=c[a+32>>2];c[b+32+4>>2]=c[a+32+4>>2];c[b+32+8>>2]=c[a+32+8>>2];c[b+32+12>>2]=c[a+32+12>>2];q=+g[a+20>>2];m=+g[a+40>>2];r=+g[a+24>>2];n=+g[a+36>>2];o=+g[a+32>>2];s=+g[a+16>>2];t=+g[a>>2];p=+g[a+4>>2];u=+g[a+8>>2];v=1.0/((q*m-r*n)*t+p*(r*o-m*s)+(n*s-q*o)*u);g[d>>2]=(q*m-r*n)*v;g[d+4>>2]=(n*u-m*p)*v;g[d+8>>2]=(r*p-q*u)*v;g[d+12>>2]=0.0;g[d+16>>2]=(r*o-m*s)*v;g[d+20>>2]=(m*t-o*u)*v;g[d+24>>2]=(s*u-r*t)*v;g[d+28>>2]=0.0;g[d+32>>2]=(n*s-q*o)*v;g[d+36>>2]=(o*p-n*t)*v;g[d+40>>2]=(q*t-s*p)*v;g[d+44>>2]=0.0;a:do if(!(c[5676]|0)){e=b+20|0;f=b+36|0;h=b+8|0;i=b+24|0;j=b+40|0;k=b;l=b+4|0}else{e=0;C=(q*t-s*p)*v;D=(q*m-r*n)*v;E=(r*o-m*s)*v;G=(n*s-q*o)*v;I=(n*u-m*p)*v;B=(m*t-o*u)*v;A=(o*p-n*t)*v;z=(r*p-q*u)*v;y=(s*u-r*t)*v;while(1){o=+F(+D);n=+F(+E);N=+F(+G);W=+F(+I);O=+F(+B);M=+F(+A);Q=+F(+z);P=+F(+y);w=+F(+C);R=o+n+N>W+O+M?o+n+N:W+O+M;O=o+W+Q>n+O+P?o+W+Q:n+O+P;n=+g[b>>2];W=+F(+n);o=+g[b+16>>2];T=+F(+o);p=+g[b+32>>2];K=+F(+p);q=+g[b+4>>2];V=+F(+q);r=+g[b+20>>2];S=+F(+r);s=+g[b+36>>2];J=+F(+s);t=+g[b+8>>2];U=+F(+t);u=+g[b+24>>2];L=+F(+u);v=+g[b+40>>2];x=+F(+v);m=W+T+K>V+S+J?W+T+K:V+S+J;m=m>U+L+x?m:U+L+x;L=W+V+U>T+S+L?W+V+U:T+S+L;w=(R>Q+P+w?R:Q+P+w)*(O>N+M+w?O:N+M+w);x=m*(L>K+J+x?L:K+J+x);if(+F(+w)<1.1920928955078125e-007){e=b+20|0;f=b+36|0;h=b+8|0;i=b+24|0;j=b+40|0;k=b;l=b+4|0;break a}if(+F(+x)<1.1920928955078125e-007){e=b+20|0;f=b+36|0;h=b+8|0;i=b+24|0;j=b+40|0;k=b;l=b+4|0;break a}W=+H(+(w/x),.25);O=(n*(W+-2.0)+D*(1.0/W))*.5;Q=(q*(W+-2.0)+1.0/W*E)*.5;S=(t*(W+-2.0)+1.0/W*G)*.5;P=(o*(W+-2.0)+1.0/W*I)*.5;R=(r*(W+-2.0)+1.0/W*B)*.5;T=(u*(W+-2.0)+1.0/W*A)*.5;U=(p*(W+-2.0)+1.0/W*z)*.5;V=(s*(W+-2.0)+1.0/W*y)*.5;W=(v*(W+-2.0)+1.0/W*C)*.5;g[b>>2]=n+O;g[b+4>>2]=q+Q;g[b+8>>2]=t+S;g[b+12>>2]=0.0;g[b+16>>2]=o+P;g[b+20>>2]=r+R;g[b+24>>2]=u+T;g[b+28>>2]=0.0;g[b+32>>2]=p+U;g[b+36>>2]=s+V;g[b+40>>2]=v+W;g[b+44>>2]=0.0;N=1.0/(((v+W)*(r+R)-(u+T)*(s+V))*(n+O)+(q+Q)*((u+T)*(p+U)-(v+W)*(o+P))+((s+V)*(o+P)-(r+R)*(p+U))*(t+S));D=((v+W)*(r+R)-(u+T)*(s+V))*N;I=((s+V)*(t+S)-(v+W)*(q+Q))*N;z=((u+T)*(q+Q)-(r+R)*(t+S))*N;E=((u+T)*(p+U)-(v+W)*(o+P))*N;B=((v+W)*(n+O)-(p+U)*(t+S))*N;y=((o+P)*(t+S)-(u+T)*(n+O))*N;G=((s+V)*(o+P)-(r+R)*(p+U))*N;A=((p+U)*(q+Q)-(s+V)*(n+O))*N;C=((r+R)*(n+O)-(o+P)*(q+Q))*N;g[d>>2]=D;g[d+4>>2]=I;g[d+8>>2]=z;g[d+12>>2]=0.0;g[d+16>>2]=E;g[d+20>>2]=B;g[d+24>>2]=y;g[d+28>>2]=0.0;g[d+32>>2]=G;g[d+36>>2]=A;g[d+40>>2]=C;g[d+44>>2]=0.0;U=+F(+O)+ +F(+P)+ +F(+U);V=+F(+Q)+ +F(+R)+ +F(+V);W=+F(+S)+ +F(+T)+ +F(+W);V=U>V?U:V;if((V>W?V:W)<=m*+g[5675])break;e=e+1|0;if(e>>>0>=(c[5676]|0)>>>0){e=b+20|0;f=b+36|0;h=b+8|0;i=b+24|0;j=b+40|0;k=b;l=b+4|0;break a}}M=+g[b>>2];O=+g[b+16>>2];Q=+g[b+32>>2];G=+g[b+4>>2];J=+g[b+20>>2];L=+g[b+36>>2];A=+g[b+8>>2];C=+g[b+24>>2];E=+g[b+40>>2];N=+g[a>>2];P=+g[a+16>>2];R=+g[a+32>>2];I=+g[a+4>>2];K=+g[a+20>>2];T=+g[a+36>>2];B=+g[a+8>>2];D=+g[a+24>>2];W=+g[a+40>>2];V=A*I+C*K+E*T+(G*B+J*D+L*W);S=G*N+J*P+L*R+(M*I+O*K+Q*T);U=A*N+C*P+E*R+(M*B+O*D+Q*W);W=A*B+C*D+E*W+(A*B+C*D+E*W);T=G*I+J*K+L*T+(G*I+J*K+L*T);R=M*N+O*P+Q*R+(M*N+O*P+Q*R);S=S*.5;U=U*.5;V=V*.5;R=R*.5;g[d>>2]=R;g[d+4>>2]=S;g[d+8>>2]=U;g[d+12>>2]=0.0;g[d+16>>2]=S;T=T*.5;g[d+20>>2]=T;g[d+24>>2]=V;g[d+28>>2]=0.0;g[d+32>>2]=U;g[d+36>>2]=V;W=W*.5;g[d+40>>2]=W;g[d+44>>2]=0.0;return}while(0);M=+g[k>>2];O=+g[b+16>>2];Q=+g[b+32>>2];G=+g[l>>2];J=+g[e>>2];L=+g[f>>2];A=+g[h>>2];C=+g[i>>2];E=+g[j>>2];N=+g[a>>2];P=+g[a+16>>2];R=+g[a+32>>2];I=+g[a+4>>2];K=+g[a+20>>2];T=+g[a+36>>2];B=+g[a+8>>2];D=+g[a+24>>2];W=+g[a+40>>2];V=A*I+C*K+E*T+(G*B+J*D+L*W);S=G*N+J*P+L*R+(M*I+O*K+Q*T);U=A*N+C*P+E*R+(M*B+O*D+Q*W);W=A*B+C*D+E*W+(A*B+C*D+E*W);T=G*I+J*K+L*T+(G*I+J*K+L*T);R=M*N+O*P+Q*R+(M*N+O*P+Q*R);S=S*.5;U=U*.5;V=V*.5;R=R*.5;g[d>>2]=R;g[d+4>>2]=S;g[d+8>>2]=U;g[d+12>>2]=0.0;g[d+16>>2]=S;T=T*.5;g[d+20>>2]=T;g[d+24>>2]=V;g[d+28>>2]=0.0;g[d+32>>2]=U;g[d+36>>2]=V;W=W*.5;g[d+40>>2]=W;g[d+44>>2]=0.0;return}function Yc(a,b,f,j){a=a|0;b=b|0;f=f|0;j=j|0;var k=0.0,l=0.0,m=0.0,n=0,o=0,p=0.0,q=0.0,r=0,s=0,t=0,u=0;o=i;i=i+80|0;n=ob[c[(c[a>>2]|0)+28>>2]&127](a)|0;k=+g[a+4>>2];l=+g[a+8>>2];m=+g[a+12>>2];if((n|0)<=0){i=o;return}j=0;do{Ib[c[(c[a>>2]|0)+16>>2]&3](a,o+76|0,o+52|0,o+64|0,o+56|0,o+72|0,o+68|0,o+48|0,o+60|0,j);a:do switch(c[o+64>>2]|0){case 0:{switch(c[o+60>>2]|0){case 2:{if((c[o+48>>2]|0)>0)f=0;else break a;do{r=(c[o+72>>2]|0)+(S(c[o+68>>2]|0,f)|0)|0;t=c[o+76>>2]|0;s=c[o+56>>2]|0;u=t+(S(s,c[r>>2]|0)|0)|0;q=l*+g[u+4>>2];p=m*+g[u+8>>2];g[o>>2]=k*+g[u>>2];g[o+4>>2]=q;g[o+8>>2]=p;g[o+12>>2]=0.0;u=t+(S(s,c[r+4>>2]|0)|0)|0;p=l*+g[u+4>>2];q=m*+g[u+8>>2];g[o+16>>2]=k*+g[u>>2];g[o+20>>2]=p;g[o+24>>2]=q;g[o+28>>2]=0.0;r=t+(S(s,c[r+8>>2]|0)|0)|0;q=l*+g[r+4>>2];p=m*+g[r+8>>2];g[o+32>>2]=k*+g[r>>2];g[o+36>>2]=q;g[o+40>>2]=p;g[o+44>>2]=0.0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,o,j,f);f=f+1|0}while((f|0)<(c[o+48>>2]|0));break}case 3:{if((c[o+48>>2]|0)>0)f=0;else break a;do{t=(c[o+72>>2]|0)+(S(c[o+68>>2]|0,f)|0)|0;s=c[o+76>>2]|0;u=c[o+56>>2]|0;r=s+(S(e[t>>1]|0,u)|0)|0;p=l*+g[r+4>>2];q=m*+g[r+8>>2];g[o>>2]=k*+g[r>>2];g[o+4>>2]=p;g[o+8>>2]=q;g[o+12>>2]=0.0;r=s+(S(e[t+2>>1]|0,u)|0)|0;q=l*+g[r+4>>2];p=m*+g[r+8>>2];g[o+16>>2]=k*+g[r>>2];g[o+20>>2]=q;g[o+24>>2]=p;g[o+28>>2]=0.0;u=s+(S(e[t+4>>1]|0,u)|0)|0;p=l*+g[u+4>>2];q=m*+g[u+8>>2];g[o+32>>2]=k*+g[u>>2];g[o+36>>2]=p;g[o+40>>2]=q;g[o+44>>2]=0.0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,o,j,f);f=f+1|0}while((f|0)<(c[o+48>>2]|0));break}case 5:{if((c[o+48>>2]|0)>0)f=0;else break a;do{t=(c[o+72>>2]|0)+(S(c[o+68>>2]|0,f)|0)|0;s=c[o+76>>2]|0;u=c[o+56>>2]|0;r=s+(S(d[t>>0]|0,u)|0)|0;p=l*+g[r+4>>2];q=m*+g[r+8>>2];g[o>>2]=k*+g[r>>2];g[o+4>>2]=p;g[o+8>>2]=q;g[o+12>>2]=0.0;r=s+(S(d[t+1>>0]|0,u)|0)|0;q=l*+g[r+4>>2];p=m*+g[r+8>>2];g[o+16>>2]=k*+g[r>>2];g[o+20>>2]=q;g[o+24>>2]=p;g[o+28>>2]=0.0;u=s+(S(d[t+2>>0]|0,u)|0)|0;p=l*+g[u+4>>2];q=m*+g[u+8>>2];g[o+32>>2]=k*+g[u>>2];g[o+36>>2]=p;g[o+40>>2]=q;g[o+44>>2]=0.0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,o,j,f);f=f+1|0}while((f|0)<(c[o+48>>2]|0));break}default:break a}break}case 1:{switch(c[o+60>>2]|0){case 2:{if((c[o+48>>2]|0)>0)f=0;else break a;do{u=(c[o+72>>2]|0)+(S(c[o+68>>2]|0,f)|0)|0;s=c[o+76>>2]|0;t=c[o+56>>2]|0;r=s+(S(t,c[u>>2]|0)|0)|0;p=l*+h[r+8>>3];q=m*+h[r+16>>3];g[o>>2]=k*+h[r>>3];g[o+4>>2]=p;g[o+8>>2]=q;g[o+12>>2]=0.0;r=s+(S(t,c[u+4>>2]|0)|0)|0;q=l*+h[r+8>>3];p=m*+h[r+16>>3];g[o+16>>2]=k*+h[r>>3];g[o+20>>2]=q;g[o+24>>2]=p;g[o+28>>2]=0.0;u=s+(S(t,c[u+8>>2]|0)|0)|0;p=l*+h[u+8>>3];q=m*+h[u+16>>3];g[o+32>>2]=k*+h[u>>3];g[o+36>>2]=p;g[o+40>>2]=q;g[o+44>>2]=0.0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,o,j,f);f=f+1|0}while((f|0)<(c[o+48>>2]|0));break}case 3:{if((c[o+48>>2]|0)>0)f=0;else break a;do{t=(c[o+72>>2]|0)+(S(c[o+68>>2]|0,f)|0)|0;s=c[o+76>>2]|0;u=c[o+56>>2]|0;r=s+(S(e[t>>1]|0,u)|0)|0;p=l*+h[r+8>>3];q=m*+h[r+16>>3];g[o>>2]=k*+h[r>>3];g[o+4>>2]=p;g[o+8>>2]=q;g[o+12>>2]=0.0;r=s+(S(e[t+2>>1]|0,u)|0)|0;q=l*+h[r+8>>3];p=m*+h[r+16>>3];g[o+16>>2]=k*+h[r>>3];g[o+20>>2]=q;g[o+24>>2]=p;g[o+28>>2]=0.0;u=s+(S(e[t+4>>1]|0,u)|0)|0;p=l*+h[u+8>>3];q=m*+h[u+16>>3];g[o+32>>2]=k*+h[u>>3];g[o+36>>2]=p;g[o+40>>2]=q;g[o+44>>2]=0.0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,o,j,f);f=f+1|0}while((f|0)<(c[o+48>>2]|0));break}case 5:{if((c[o+48>>2]|0)>0)f=0;else break a;do{t=(c[o+72>>2]|0)+(S(c[o+68>>2]|0,f)|0)|0;s=c[o+76>>2]|0;u=c[o+56>>2]|0;r=s+(S(d[t>>0]|0,u)|0)|0;p=l*+h[r+8>>3];q=m*+h[r+16>>3];g[o>>2]=k*+h[r>>3];g[o+4>>2]=p;g[o+8>>2]=q;g[o+12>>2]=0.0;r=s+(S(d[t+1>>0]|0,u)|0)|0;q=l*+h[r+8>>3];p=m*+h[r+16>>3];g[o+16>>2]=k*+h[r>>3];g[o+20>>2]=q;g[o+24>>2]=p;g[o+28>>2]=0.0;u=s+(S(d[t+2>>0]|0,u)|0)|0;p=l*+h[u+8>>3];q=m*+h[u+16>>3];g[o+32>>2]=k*+h[u>>3];g[o+36>>2]=p;g[o+40>>2]=q;g[o+44>>2]=0.0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,o,j,f);f=f+1|0}while((f|0)<(c[o+48>>2]|0));break}default:break a}break}default:{}}while(0);mb[c[(c[a>>2]|0)+24>>2]&127](a,j);j=j+1|0}while((j|0)!=(n|0));i=o;return}function Zc(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0,z=0.0,A=0.0,B=0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0,da=0.0,ea=0.0,fa=0.0,ga=0,ha=0.0;ga=i;i=i+32|0;L=c[b+4>>2]|0;a[L+312>>0]=0;c[L>>2]=0;a[L+356>>0]=1;c[L+292>>2]=1566444395;c[L+296>>2]=1566444395;c[L+300>>2]=1566444395;g[L+304>>2]=0.0;c[L+336>>2]=0;c[L+336+4>>2]=0;c[L+336+8>>2]=0;c[L+336+12>>2]=0;a[L+336+16>>0]=0;a[L+332>>0]=a[L+332>>0]&-16;t=+g[d+48>>2];v=+g[d+52>>2];z=+g[d+56>>2];p=+g[f+48>>2];u=+g[f+52>>2];x=+g[f+56>>2];N=+g[d>>2];Z=+g[d+4>>2];$=+g[d+8>>2];ba=+g[d+16>>2];P=+g[d+20>>2];R=+g[d+24>>2];T=+g[d+32>>2];V=+g[d+36>>2];X=+g[d+40>>2];M=+g[f>>2];Y=+g[f+4>>2];_=+g[f+8>>2];aa=+g[f+16>>2];O=+g[f+20>>2];Q=+g[f+24>>2];S=+g[f+32>>2];U=+g[f+36>>2];W=+g[f+40>>2];da=+g[e+48>>2]-t-(+g[h+48>>2]-p);ea=+g[e+52>>2]-v-(+g[h+52>>2]-u);fa=+g[e+56>>2]-z-(+g[h+56>>2]-x);L=c[b+8>>2]|0;K=c[(c[L>>2]|0)+64>>2]|0;g[ga>>2]=N*-da+ba*-ea+T*-fa;g[ga+4>>2]=Z*-da+P*-ea+V*-fa;g[ga+8>>2]=$*-da+R*-ea+X*-fa;g[ga+12>>2]=0.0;Ub[K&127](ga+16|0,L,ga);I=+g[ga+16>>2];J=+g[ga+16+4>>2];H=+g[ga+16+8>>2];n=I*+g[d>>2]+J*+g[d+4>>2]+H*+g[d+8>>2]+ +g[d+48>>2];A=I*+g[d+16>>2]+J*+g[d+20>>2]+H*+g[d+24>>2]+ +g[d+52>>2];H=I*+g[d+32>>2]+J*+g[d+36>>2]+H*+g[d+40>>2]+ +g[d+56>>2];L=c[b+12>>2]|0;K=c[(c[L>>2]|0)+64>>2]|0;J=da*+g[f+4>>2]+ea*+g[f+20>>2]+fa*+g[f+36>>2];I=da*+g[f+8>>2]+ea*+g[f+24>>2]+fa*+g[f+40>>2];g[ga>>2]=da*+g[f>>2]+ea*+g[f+16>>2]+fa*+g[f+32>>2];g[ga+4>>2]=J;g[ga+8>>2]=I;g[ga+12>>2]=0.0;Ub[K&127](ga+16|0,L,ga);I=+g[ga+16>>2];J=+g[ga+16+4>>2];o=+g[ga+16+8>>2];n=n-(I*+g[f>>2]+J*+g[f+4>>2]+o*+g[f+8>>2]+ +g[f+48>>2]);A=A-(I*+g[f+16>>2]+J*+g[f+20>>2]+o*+g[f+24>>2]+ +g[f+52>>2]);o=H-(I*+g[f+32>>2]+J*+g[f+36>>2]+o*+g[f+40>>2]+ +g[f+56>>2]);a:do if(n*n+A*A+o*o>9.999999747378752e-005){m=0.0;L=32;r=0;s=0;K=0;q=0;k=0;while(1){if(!L)break a;L=L+-1|0;w=c[b+8>>2]|0;y=c[(c[w>>2]|0)+64>>2]|0;F=-n;ha=-A;C=-o;g[ga>>2]=N*F+ba*ha+T*C;g[ga+4>>2]=Z*F+P*ha+V*C;g[ga+8>>2]=$*F+R*ha+X*C;g[ga+12>>2]=0.0;Ub[y&127](ga+16|0,w,ga);C=+g[ga+16>>2];ha=+g[ga+16+4>>2];F=+g[ga+16+8>>2];D=t+(N*C+Z*ha+$*F);E=v+(ba*C+P*ha+R*F);F=z+(T*C+V*ha+X*F);w=c[b+12>>2]|0;y=c[(c[w>>2]|0)+64>>2]|0;g[ga>>2]=M*n+aa*A+S*o;g[ga+4>>2]=Y*n+O*A+U*o;g[ga+8>>2]=_*n+Q*A+W*o;g[ga+12>>2]=0.0;Ub[y&127](ga+16|0,w,ga);ha=+g[ga+16>>2];C=+g[ga+16+4>>2];J=+g[ga+16+8>>2];H=p+(M*ha+Y*C+_*J);I=u+(aa*ha+O*C+Q*J);J=x+(S*ha+U*C+W*J);C=n*(D-H)+A*(E-I)+o*(F-J);w=(g[l>>2]=n,c[l>>2]|0);y=(g[l>>2]=A,c[l>>2]|0);B=(g[l>>2]=o,c[l>>2]|0);if(m>1.0){k=0;ca=25;break}if(C>0.0){n=da*n+ea*A+fa*o;if(n>=-1.4210854715202004e-014){k=0;ca=25;break}z=m-C/n;m=z;r=w;s=K;p=(1.0-z)*+g[f+48>>2]+z*+g[h+48>>2];t=(1.0-z)*+g[d+48>>2]+z*+g[e+48>>2];u=(1.0-z)*+g[f+52>>2]+z*+g[h+52>>2];v=(1.0-z)*+g[d+52>>2]+z*+g[e+52>>2];x=(1.0-z)*+g[f+56>>2]+z*+g[h+56>>2];z=(1.0-z)*+g[d+56>>2]+z*+g[e+56>>2];q=y;k=B}w=c[b+4>>2]|0;B=c[w>>2]|0;b:do if((B|0)>0){n=+g[w+308>>2];y=0;while(1){A=D-H-+g[w+4+(y<<4)>>2];C=E-I-+g[w+4+(y<<4)+4>>2];ha=F-J-+g[w+4+(y<<4)+8>>2];y=y+1|0;if(A*A+C*C+ha*ha<=n){y=1;break b}if((y|0)>=(B|0)){y=0;break}}}else y=0;while(0);if((+g[w+304>>2]==0.0?F-J==+g[w+300>>2]:0)?E-I==+g[w+296>>2]:0){if(!(D-H==+g[w+292>>2]|y))ca=17}else if(!y)ca=17;if((ca|0)==17){ca=0;g[w+292>>2]=D-H;g[w+296>>2]=E-I;g[w+300>>2]=F-J;g[w+304>>2]=0.0;a[w+356>>0]=1;g[w+4+(B<<4)>>2]=D-H;g[w+4+(B<<4)+4>>2]=E-I;g[w+4+(B<<4)+8>>2]=F-J;g[w+4+(B<<4)+12>>2]=0.0;K=c[w>>2]|0;g[w+84+(K<<4)>>2]=D;g[w+84+(K<<4)+4>>2]=E;g[w+84+(K<<4)+8>>2]=F;g[w+84+(K<<4)+12>>2]=0.0;K=c[w>>2]|0;g[w+164+(K<<4)>>2]=H;g[w+164+(K<<4)+4>>2]=I;g[w+164+(K<<4)+8>>2]=J;g[w+164+(K<<4)+12>>2]=0.0;c[w>>2]=(c[w>>2]|0)+1;w=c[b+4>>2]|0}K=Hc(w)|0;n=+g[w+276>>2];A=+g[w+280>>2];o=+g[w+284>>2];if(!K)break a;if(!(n*n+A*A+o*o>9.999999747378752e-005))break a;else K=c[w+288>>2]|0}if((ca|0)==25){i=ga;return k|0}}else{m=0.0;r=0;s=0;q=0;k=0}while(0);g[j+164>>2]=m;m=(c[l>>2]=r,+g[l>>2]);n=(c[l>>2]=q,+g[l>>2]);p=(c[l>>2]=k,+g[l>>2]);if(!(m*m+n*n+p*p>=1.4210854715202004e-014)){c[j+132>>2]=0;c[j+132+4>>2]=0;c[j+132+8>>2]=0;c[j+132+12>>2]=0;o=0.0;n=0.0;m=0.0}else{ha=1.0/+G(+(m*m+n*n+p*p));g[j+132>>2]=m*ha;g[j+136>>2]=n*ha;g[j+140>>2]=p*ha;c[j+144>>2]=s;o=m*ha;n=n*ha;m=p*ha}if(da*o+ea*n+fa*m>=-+g[j+172>>2]){j=0;i=ga;return j|0}b=c[b+4>>2]|0;Hc(b)|0;rp(j+148|0,b+260|0,16)|0;j=1;i=ga;return j|0}function _c(d,e,f,h,j){d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0.0,l=0.0,m=0,n=0.0,o=0,p=0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0;y=i;i=i+128|0;a[d+60>>0]=f&1;if(f){q=+g[h>>2]+-1.0;t=+g[h+4>>2]+-1.0;u=+g[h+8>>2]+-1.0;g[d+4>>2]=q;g[d+8>>2]=t;g[d+12>>2]=u;g[d+16>>2]=0.0;v=+g[j>>2]+1.0;l=+g[j+4>>2]+1.0;x=+g[j+8>>2]+1.0;g[d+20>>2]=v;g[d+24>>2]=l;g[d+28>>2]=x;g[d+32>>2]=0.0;g[d+36>>2]=65533.0/(v-q);g[d+40>>2]=65533.0/(l-t);g[d+44>>2]=65533.0/(x-u);g[d+48>>2]=0.0;a[d+60>>0]=1;k=q+ +(~~((q-q)*(65533.0/(v-q)))&65534)/(65533.0/(v-q))+-1.0;n=t+ +(~~((t-t)*(65533.0/(l-t)))&65534)/(65533.0/(l-t))+-1.0;s=u+ +(~~((u-u)*(65533.0/(x-u)))&65534)/(65533.0/(x-u))+-1.0;if(k<q){g[d+4>>2]=k;w=k}else w=q;if(n<t){g[d+8>>2]=n;t=n}if(s<u)g[d+12>>2]=s;else s=u;n=v-w;q=l-t;k=x-s;g[d+36>>2]=65533.0/n;g[d+40>>2]=65533.0/q;g[d+44>>2]=65533.0/k;g[d+48>>2]=0.0;n=w+ +((~~(n*(65533.0/n)+1.0)&65535|1)&65535)/(65533.0/n)+1.0;q=t+ +((~~(q*(65533.0/q)+1.0)&65535|1)&65535)/(65533.0/q)+1.0;k=s+ +((~~(k*(65533.0/k)+1.0)&65535|1)&65535)/(65533.0/k)+1.0;if(v<n)g[d+20>>2]=n;else n=v;if(l<q){g[d+24>>2]=q;l=q}if(x<k)g[d+28>>2]=k;else k=x;g[d+36>>2]=65533.0/(n-w);g[d+40>>2]=65533.0/(l-t);g[d+44>>2]=65533.0/(k-s);g[d+48>>2]=0.0;c[y+96>>2]=8196;c[y+96+4>>2]=d+104;c[y+96+8>>2]=d;Yb[c[(c[e>>2]|0)+8>>2]&127](e,y+96|0,d+4|0,d+20|0);f=c[d+108>>2]|0;c[y+80>>2]=0;c[y+80+4>>2]=0;c[y+80+8>>2]=0;c[y+80+12>>2]=0;m=c[d+128>>2]|0;if((m|0)<(f<<1|0)){if((c[d+132>>2]|0)<(f<<1|0)){if(!f){h=0;e=m}else{c[6324]=(c[6324]|0)+1;h=ic(f<<5|19)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}e=c[d+128>>2]|0}if((e|0)>0){j=0;do{r=h+(j<<4)|0;p=(c[d+136>>2]|0)+(j<<4)|0;c[r>>2]=c[p>>2];c[r+4>>2]=c[p+4>>2];c[r+8>>2]=c[p+8>>2];c[r+12>>2]=c[p+12>>2];j=j+1|0}while((j|0)!=(e|0))}j=c[d+136>>2]|0;if(j|0){if(a[d+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[d+136>>2]=0}a[d+140>>0]=1;c[d+136>>2]=h;c[d+132>>2]=f<<1;j=d+136|0}else j=d+136|0;h=m;do{r=(c[j>>2]|0)+(h<<4)|0;c[r>>2]=c[y+80>>2];c[r+4>>2]=c[y+80+4>>2];c[r+8>>2]=c[y+80+8>>2];c[r+12>>2]=c[y+80+12>>2];h=h+1|0}while((h|0)!=(f<<1|0))}c[d+128>>2]=f<<1}else{c[y+96>>2]=8216;c[y+96+4>>2]=d+64;c[y+80>>2]=-581039253;c[y+80+4>>2]=-581039253;c[y+80+8>>2]=-581039253;g[y+80+12>>2]=0.0;c[y+64>>2]=1566444395;c[y+64+4>>2]=1566444395;c[y+64+8>>2]=1566444395;g[y+64+12>>2]=0.0;Yb[c[(c[e>>2]|0)+8>>2]&127](e,y+96|0,y+80|0,y+64|0);f=c[d+68>>2]|0;m=y;p=m+64|0;do{c[m>>2]=0;m=m+4|0}while((m|0)<(p|0));r=c[d+88>>2]|0;if((r|0)<(f<<1|0)){if((c[d+92>>2]|0)<(f<<1|0)){if(!f){h=0;e=r}else{c[6324]=(c[6324]|0)+1;h=ic(f<<7|19)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}e=c[d+88>>2]|0}if((e|0)>0){j=0;do{m=h+(j<<6)|0;o=(c[d+96>>2]|0)+(j<<6)|0;p=m+64|0;do{c[m>>2]=c[o>>2];m=m+4|0;o=o+4|0}while((m|0)<(p|0));j=j+1|0}while((j|0)!=(e|0))}j=c[d+96>>2]|0;if(j|0){if(a[d+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[d+96>>2]=0}a[d+100>>0]=1;c[d+96>>2]=h;c[d+92>>2]=f<<1;j=d+96|0}else j=d+96|0;h=r;do{m=(c[j>>2]|0)+(h<<6)|0;o=y;p=m+64|0;do{c[m>>2]=c[o>>2];m=m+4|0;o=o+4|0}while((m|0)<(p|0));h=h+1|0}while((h|0)!=(f<<1|0))}c[d+88>>2]=f<<1}c[d+56>>2]=0;wc(d,0,f);if(a[d+60>>0]|0?(c[d+152>>2]|0)==0:0){if(!(c[d+156>>2]|0)){c[6324]=(c[6324]|0)+1;f=ic(51)|0;if(!f)e=0;else{c[(f+4+15&-16)+-4>>2]=f;e=f+4+15&-16}h=c[d+152>>2]|0;if((h|0)>0){f=0;do{r=e+(f<<5)|0;p=(c[d+160>>2]|0)+(f<<5)|0;c[r>>2]=c[p>>2];c[r+4>>2]=c[p+4>>2];c[r+8>>2]=c[p+8>>2];c[r+12>>2]=c[p+12>>2];c[r+16>>2]=c[p+16>>2];c[r+20>>2]=c[p+20>>2];c[r+24>>2]=c[p+24>>2];c[r+28>>2]=c[p+28>>2];f=f+1|0}while((f|0)!=(h|0))}f=c[d+160>>2]|0;if(f|0){if(a[d+164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=e;c[d+156>>2]=1;h=d+160|0;j=(c[d+152>>2]|0)+1|0;f=e}else{h=d+160|0;j=1;f=c[d+160>>2]|0}c[d+152>>2]=j;c[f>>2]=c[y+96>>2];c[f+4>>2]=c[y+96+4>>2];c[f+8>>2]=c[y+96+8>>2];c[f+12>>2]=c[y+96+12>>2];c[f+16>>2]=c[y+96+16>>2];c[f+20>>2]=c[y+96+20>>2];c[f+24>>2]=c[y+96+24>>2];c[f+28>>2]=c[y+96+28>>2];r=c[h>>2]|0;p=c[d+136>>2]|0;b[r>>1]=b[p>>1]|0;b[r+2>>1]=b[p+2>>1]|0;b[r+4>>1]=b[p+4>>1]|0;b[r+6>>1]=b[p+6>>1]|0;b[r+8>>1]=b[p+8>>1]|0;b[r+10>>1]=b[p+10>>1]|0;c[r+12>>2]=0;p=c[p+12>>2]|0;c[r+16>>2]=(p|0)>-1?1:0-p|0}c[d+168>>2]=c[d+152>>2];f=c[d+116>>2]|0;if(f|0){if(a[d+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[d+116>>2]=0}a[d+120>>0]=1;c[d+116>>2]=0;c[d+108>>2]=0;c[d+112>>2]=0;f=c[d+76>>2]|0;if(!f){a[d+80>>0]=1;c[d+76>>2]=0;c[d+68>>2]=0;d=d+72|0;c[d>>2]=0;i=y;return}if(a[d+80>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[d+76>>2]=0;a[d+80>>0]=1;c[d+76>>2]=0;c[d+68>>2]=0;d=d+72|0;c[d>>2]=0;i=y;return}function $c(b,d,e,f,h,i,j,k,m,n,o){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;j=j|0;k=k|0;m=+m;n=+n;o=+o;var p=0,q=0,r=0,s=0.0,t=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0,N=0,O=0.0,P=0.0,Q=0.0,R=0.0;N=c[b+68>>2]|0;if((N|0)==(c[b+72>>2]|0)?(t=N|0?N<<1:1,(N|0)<(t|0)):0){if(!t){p=0;r=N}else{c[6324]=(c[6324]|0)+1;p=ic((t*152|3)+16|0)|0;if(!p)p=0;else{c[(p+4+15&-16)+-4>>2]=p;p=p+4+15&-16}r=c[b+68>>2]|0}if((r|0)>0){q=0;do{Lm(p+(q*152|0)|0,(c[b+76>>2]|0)+(q*152|0)|0,152)|0;q=q+1|0}while((q|0)!=(r|0))}q=c[b+76>>2]|0;if(q|0){if(a[b+80>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[q+-4>>2]|0)}c[b+76>>2]=0}a[b+80>>0]=1;c[b+76>>2]=p;c[b+72>>2]=t;p=c[b+68>>2]|0}else p=N;c[b+68>>2]=p+1;M=c[b+76>>2]|0;c[M+(N*152|0)+140>>2]=h;r=c[b+16>>2]|0;p=c[r+(e*244|0)+240>>2]|0;t=c[r+(f*244|0)+240>>2]|0;c[M+(N*152|0)+144>>2]=e;c[M+(N*152|0)+148>>2]=f;q=c[i+84>>2]|0;c[M+(N*152|0)+104>>2]=q;c[M+(N*152|0)+132>>2]=0;g[M+(N*152|0)+100>>2]=0.0;g[M+(N*152|0)+96>>2]=0.0;L=(c[l>>2]=q,+g[l>>2]);if(p|0){c[M+(N*152|0)+16>>2]=c[d>>2];c[M+(N*152|0)+16+4>>2]=c[d+4>>2];c[M+(N*152|0)+16+8>>2]=c[d+8>>2];c[M+(N*152|0)+16+12>>2]=c[d+12>>2];K=+g[j+4>>2];D=+g[M+(N*152|0)+24>>2];H=+g[j+8>>2];I=+g[M+(N*152|0)+20>>2];E=+g[M+(N*152|0)+16>>2];J=+g[j>>2];g[M+(N*152|0)>>2]=K*D-H*I;g[M+(N*152|0)+4>>2]=H*E-D*J;g[M+(N*152|0)+8>>2]=I*J-K*E;g[M+(N*152|0)+12>>2]=0.0;v=((K*D-H*I)*+g[p+304>>2]+(H*E-D*J)*+g[p+308>>2]+(I*J-K*E)*+g[p+312>>2])*+g[p+584>>2];s=((K*D-H*I)*+g[p+320>>2]+(H*E-D*J)*+g[p+324>>2]+(I*J-K*E)*+g[p+328>>2])*+g[p+588>>2];u=((K*D-H*I)*+g[p+336>>2]+(H*E-D*J)*+g[p+340>>2]+(I*J-K*E)*+g[p+344>>2])*+g[p+592>>2];g[M+(N*152|0)+64>>2]=v;g[M+(N*152|0)+68>>2]=s;g[M+(N*152|0)+72>>2]=u;g[M+(N*152|0)+76>>2]=0.0;z=E;A=I;B=D;C=K*D-H*I;D=H*E-D*J;E=I*J-K*E}else{c[M+(N*152|0)+64>>2]=0;c[M+(N*152|0)+64+4>>2]=0;c[M+(N*152|0)+64+8>>2]=0;c[M+(N*152|0)+64+12>>2]=0;c[M+(N*152|0)>>2]=0;c[M+(N*152|0)+4>>2]=0;c[M+(N*152|0)+8>>2]=0;c[M+(N*152|0)+12>>2]=0;c[M+(N*152|0)+16>>2]=0;c[M+(N*152|0)+20>>2]=0;c[M+(N*152|0)+24>>2]=0;c[M+(N*152|0)+28>>2]=0;s=0.0;u=0.0;v=0.0;z=0.0;A=0.0;B=0.0;C=0.0;D=0.0;E=0.0}if(t|0){K=-+g[d>>2];P=-+g[d+4>>2];J=-+g[d+8>>2];g[M+(N*152|0)+48>>2]=K;g[M+(N*152|0)+52>>2]=P;g[M+(N*152|0)+56>>2]=J;g[M+(N*152|0)+60>>2]=0.0;O=+g[k+4>>2];R=+g[k+8>>2];Q=+g[k>>2];g[M+(N*152|0)+32>>2]=O*J-R*P;g[M+(N*152|0)+36>>2]=R*K-Q*J;g[M+(N*152|0)+40>>2]=Q*P-O*K;g[M+(N*152|0)+44>>2]=0.0;w=((O*J-R*P)*+g[t+304>>2]+(R*K-Q*J)*+g[t+308>>2]+(Q*P-O*K)*+g[t+312>>2])*+g[t+584>>2];x=((O*J-R*P)*+g[t+320>>2]+(R*K-Q*J)*+g[t+324>>2]+(Q*P-O*K)*+g[t+328>>2])*+g[t+588>>2];y=((O*J-R*P)*+g[t+336>>2]+(R*K-Q*J)*+g[t+340>>2]+(Q*P-O*K)*+g[t+344>>2])*+g[t+592>>2];g[M+(N*152|0)+80>>2]=w;g[M+(N*152|0)+84>>2]=x;g[M+(N*152|0)+88>>2]=y;g[M+(N*152|0)+92>>2]=0.0;F=K;G=P;H=J;I=O*J-R*P;J=R*K-Q*J;K=Q*P-O*K}else{c[M+(N*152|0)+80>>2]=0;c[M+(N*152|0)+80+4>>2]=0;c[M+(N*152|0)+80+8>>2]=0;c[M+(N*152|0)+80+12>>2]=0;c[M+(N*152|0)+32>>2]=0;c[M+(N*152|0)+32+4>>2]=0;c[M+(N*152|0)+32+8>>2]=0;c[M+(N*152|0)+32+12>>2]=0;c[M+(N*152|0)+32+16>>2]=0;c[M+(N*152|0)+32+20>>2]=0;c[M+(N*152|0)+32+24>>2]=0;c[M+(N*152|0)+32+28>>2]=0;w=0.0;x=0.0;y=0.0;F=0.0;G=0.0;H=0.0;I=0.0;J=0.0;K=0.0}if(p|0){P=+g[j+8>>2];Q=+g[j+4>>2];R=+g[j>>2];u=+g[p+384>>2]+((s*P-u*Q)*+g[d>>2]+(u*R-P*v)*+g[d+4>>2]+(Q*v-s*R)*+g[d+8>>2])}else u=0.0;if(t|0){Q=-w;s=-x;y=-y;O=+g[k+8>>2];P=+g[k+4>>2];R=+g[k>>2];s=+g[t+384>>2]+((O*s-P*y)*+g[d>>2]+(R*y-O*Q)*+g[d+4>>2]+(P*Q-R*s)*+g[d+8>>2])}else s=0.0;x=m/(u+s);g[M+(N*152|0)+108>>2]=x;if(p|0){u=+g[r+(e*244|0)+192>>2];v=+g[r+(e*244|0)+196>>2];w=+g[r+(e*244|0)+200>>2];s=(+g[r+(e*244|0)+176>>2]+ +g[r+(e*244|0)+208>>2])*z+(+g[r+(e*244|0)+180>>2]+ +g[r+(e*244|0)+212>>2])*A+(+g[r+(e*244|0)+184>>2]+ +g[r+(e*244|0)+216>>2])*B}else{u=0.0;v=0.0;w=0.0;s=z*0.0+A*0.0+B*0.0}s=s+(u*C+v*D+w*E);if(t|0){O=+g[r+(f*244|0)+192>>2];P=+g[r+(f*244|0)+196>>2];R=+g[r+(f*244|0)+200>>2];Q=(+g[r+(f*244|0)+176>>2]+ +g[r+(f*244|0)+208>>2])*F+(+g[r+(f*244|0)+180>>2]+ +g[r+(f*244|0)+212>>2])*G+(+g[r+(f*244|0)+184>>2]+ +g[r+(f*244|0)+216>>2])*H;O=O*I;P=P*J;P=O+P;R=R*K;R=P+R;R=Q+R;R=s+R;R=n-R;R=x*R;f=M+(N*152|0)+112|0;g[f>>2]=R;f=M+(N*152|0)+128|0;g[f>>2]=0.0;f=M+(N*152|0)+116|0;g[f>>2]=o;R=-L;f=M+(N*152|0)+120|0;g[f>>2]=R;f=M+(N*152|0)+124|0;c[f>>2]=q;return}else{O=0.0;P=0.0;R=0.0;Q=F*0.0+G*0.0+H*0.0;O=O*I;P=P*J;P=O+P;R=R*K;R=P+R;R=Q+R;R=s+R;R=n-R;R=x*R;f=M+(N*152|0)+112|0;g[f>>2]=R;f=M+(N*152|0)+128|0;g[f>>2]=0.0;f=M+(N*152|0)+116|0;g[f>>2]=o;R=-L;f=M+(N*152|0)+120|0;g[f>>2]=R;f=M+(N*152|0)+124|0;c[f>>2]=q;return}}function ad(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=+h;var j=0.0,k=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0,B=0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0;C=i;i=i+272|0;c[C+128>>2]=c[d>>2];c[C+128+4>>2]=c[d+4>>2];c[C+128+8>>2]=c[d+8>>2];c[C+128+12>>2]=c[d+12>>2];c[C+128+16>>2]=c[d+16>>2];c[C+128+16+4>>2]=c[d+16+4>>2];c[C+128+16+8>>2]=c[d+16+8>>2];c[C+128+16+12>>2]=c[d+16+12>>2];c[C+128+32>>2]=c[d+32>>2];c[C+128+32+4>>2]=c[d+32+4>>2];c[C+128+32+8>>2]=c[d+32+8>>2];c[C+128+32+12>>2]=c[d+32+12>>2];c[C+128+48>>2]=c[d+48>>2];c[C+128+48+4>>2]=c[d+48+4>>2];c[C+128+48+8>>2]=c[d+48+8>>2];c[C+128+48+12>>2]=c[d+48+12>>2];c[C+64>>2]=c[e>>2];c[C+64+4>>2]=c[e+4>>2];c[C+64+8>>2]=c[e+8>>2];c[C+64+12>>2]=c[e+12>>2];c[C+64+16>>2]=c[e+16>>2];c[C+64+16+4>>2]=c[e+16+4>>2];c[C+64+16+8>>2]=c[e+16+8>>2];c[C+64+16+12>>2]=c[e+16+12>>2];c[C+64+32>>2]=c[e+32>>2];c[C+64+32+4>>2]=c[e+32+4>>2];c[C+64+32+8>>2]=c[e+32+8>>2];c[C+64+32+12>>2]=c[e+32+12>>2];c[C+64+48>>2]=c[e+48>>2];c[C+64+48+4>>2]=c[e+48+4>>2];c[C+64+48+8>>2]=c[e+48+8>>2];c[C+64+48+12>>2]=c[e+48+12>>2];D=+g[C+64+52>>2]-+g[C+128+52>>2];I=+g[C+64+56>>2]-+g[C+128+56>>2];g[C+16>>2]=+g[C+64+48>>2]-+g[C+128+48>>2];g[C+16+4>>2]=D;g[C+16+8>>2]=I;g[C+16+12>>2]=0.0;rf(C+128|0,C+64|0,C+208|0,C+192|0);I=+g[C+192>>2];D=I*+g[C+208+4>>2];F=I*+g[C+208+8>>2];g[C>>2]=+g[C+208>>2]*I;g[C+4>>2]=D;g[C+8>>2]=F;g[C+12>>2]=0.0;c[C+208+48>>2]=0;c[C+208+48+4>>2]=0;c[C+208+48+8>>2]=0;c[C+208+48+12>>2]=0;Jg(C+128|0,C+192|0);F=+g[C+192>>2];D=+g[C+192+4>>2];I=+g[C+192+8>>2];G=+g[C+192+12>>2];E=F*(2.0/(F*F+D*D+I*I+G*G));j=D*(2.0/(F*F+D*D+I*I+G*G));H=I*(2.0/(F*F+D*D+I*I+G*G));g[C+208>>2]=1.0-(D*j+I*H);g[C+208+4>>2]=F*j-G*H;g[C+208+8>>2]=F*H+G*j;g[C+208+12>>2]=0.0;g[C+208+16>>2]=F*j+G*H;g[C+208+20>>2]=1.0-(F*E+I*H);g[C+208+24>>2]=D*H-G*E;g[C+208+28>>2]=0.0;g[C+208+32>>2]=F*H-G*j;g[C+208+36>>2]=D*H+G*E;g[C+208+40>>2]=1.0-(F*E+D*j);g[C+208+44>>2]=0.0;eh(b,C+208|0,C+16|0,C,C+48|0,C+32|0);if((c[a+308>>2]|0)<=0){i=C;return}m=0;do{n=c[(c[a+316>>2]|0)+(m<<2)>>2]|0;if(Jb[c[(c[f>>2]|0)+8>>2]&31](f,c[n+188>>2]|0)|0?(A=c[n+192>>2]|0,Yb[c[(c[A>>2]|0)+8>>2]&127](A,n+4|0,C+192|0,C+16|0),o=+g[C+192>>2]+ +g[C+48>>2],p=+g[C+192+4>>2]+ +g[C+48+4>>2],q=+g[C+192+8>>2]+ +g[C+48+8>>2],g[C+192>>2]=o,g[C+192+4>>2]=p,g[C+192+8>>2]=q,g[C+192+12>>2]=0.0,r=+g[C+16>>2]+ +g[C+32>>2],s=+g[C+16+4>>2]+ +g[C+32+4>>2],t=+g[C+16+8>>2]+ +g[C+32+8>>2],g[C+16>>2]=r,g[C+16+4>>2]=s,g[C+16+8>>2]=t,g[C+16+12>>2]=0.0,u=+g[d+48>>2]-(r+o)*.5,v=+g[d+52>>2]-(s+p)*.5,w=+g[d+56>>2]-(t+q)*.5,x=+g[e+48>>2]-(r+o)*.5,y=+g[e+52>>2]-(s+p)*.5,z=+g[e+56>>2]-(t+q)*.5,A=u<-((r-o)*.5)|(u>(r-o)*.5?8:0)|(v<-((s-p)*.5)?2:0)|(v>(s-p)*.5?16:0)|(w<-((t-q)*.5)?4:0)|(w>(t-q)*.5?32:0),B=x<-((r-o)*.5)|(x>(r-o)*.5?8:0)|(y<-((s-p)*.5)?2:0)|(y>(s-p)*.5?16:0)|(z<-((t-q)*.5)?4:0)|(z>(t-q)*.5?32:0),(A&B|0)==0):0){if(u<-((r-o)*.5))if(!((-u-(r-o)*.5)/(x-u)>=0.0)){j=0.0;k=1065353216}else{j=(-u-(r-o)*.5)/(x-u);k=1065353216}else if(x<-((r-o)*.5)?(-u-(r-o)*.5)/(x-u)<1.0:0){j=0.0;k=(g[l>>2]=(-u-(r-o)*.5)/(x-u),c[l>>2]|0)}else{j=0.0;k=1065353216}if(v<-((s-p)*.5)){if(j<=(-v-(s-p)*.5)/(y-v))j=(-v-(s-p)*.5)/(y-v)}else if(y<-((s-p)*.5)?(-v-(s-p)*.5)/(y-v)<(c[l>>2]=k,+g[l>>2]):0)k=(g[l>>2]=(-v-(s-p)*.5)/(y-v),c[l>>2]|0);if(w<-((t-q)*.5)){if(j<=(-w-(t-q)*.5)/(z-w))j=(-w-(t-q)*.5)/(z-w)}else if(z<-((t-q)*.5)?(-w-(t-q)*.5)/(z-w)<(c[l>>2]=k,+g[l>>2]):0)k=(g[l>>2]=(-w-(t-q)*.5)/(z-w),c[l>>2]|0);if(u>(r-o)*.5){if(j<=((r-o)*.5-u)/(x-u))j=((r-o)*.5-u)/(x-u)}else if(x>(r-o)*.5?((r-o)*.5-u)/(x-u)<(c[l>>2]=k,+g[l>>2]):0)k=(g[l>>2]=((r-o)*.5-u)/(x-u),c[l>>2]|0);if(v>(s-p)*.5){if(j<=((s-p)*.5-v)/(y-v))j=((s-p)*.5-v)/(y-v)}else if(y>(s-p)*.5?((s-p)*.5-v)/(y-v)<(c[l>>2]=k,+g[l>>2]):0)k=(g[l>>2]=((s-p)*.5-v)/(y-v),c[l>>2]|0);if(!(A&32)){if((B&32|0)!=0?((t-q)*.5-w)/(z-w)<(c[l>>2]=k,+g[l>>2]):0)k=(g[l>>2]=((t-q)*.5-w)/(z-w),c[l>>2]|0)}else if(j<=((t-q)*.5-w)/(z-w))j=((t-q)*.5-w)/(z-w);if(j<=(c[l>>2]=k,+g[l>>2])){k=c[n+192>>2]|0;c[C+208>>2]=0;c[C+208+4>>2]=k;c[C+208+8>>2]=n;c[C+208+12>>2]=n+4;c[C+208+16>>2]=-1;c[C+208+20>>2]=-1;pc(b,C+128|0,C+64|0,C+208|0,f,h)}}m=m+1|0}while((m|0)<(c[a+308>>2]|0));i=C;return}function bd(d,e,f,h,j){d=d|0;e=e|0;f=+f;h=+h;j=+j;var k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0;y=i;i=i+240|0;n=+g[d+136>>2]+h;o=+g[d+140>>2]+j;g[d+152>>2]=+g[d+132>>2]+f;g[d+156>>2]=n;g[d+160>>2]=o;g[d+164>>2]=0.0;c[y+168>>2]=1065353216;q=y+168+4|0;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[y+168+20>>2]=1065353216;r=y+168+24|0;c[r>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[y+168+40>>2]=1065353216;s=y+168+44|0;c[s>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;c[s+12>>2]=0;c[s+16>>2]=0;c[y+104>>2]=1065353216;t=y+104+4|0;c[t>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;c[y+104+20>>2]=1065353216;u=y+104+24|0;c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;c[y+104+40>>2]=1065353216;v=y+104+44|0;c[v>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;c[v+12>>2]=0;c[v+16>>2]=0;o=1.0;p=10;while(1){if((p|0)<=0){x=29;break}p=p+-1|0;c[y+168+48>>2]=c[d+132>>2];c[y+168+48+4>>2]=c[d+132+4>>2];c[y+168+48+8>>2]=c[d+132+8>>2];c[y+168+48+12>>2]=c[d+132+12>>2];c[y+104+48>>2]=c[d+152>>2];c[y+104+48+4>>2]=c[d+152+4>>2];c[y+104+48+8>>2]=c[d+152+8>>2];c[y+104+48+12>>2]=c[d+152+12>>2];m=+g[d+132>>2]-+g[d+152>>2];n=+g[d+136>>2]-+g[d+156>>2];f=+g[d+140>>2]-+g[d+160>>2];A=+g[d+168>>2];k=+g[d+172>>2];B=+g[d+176>>2];j=+g[d+180>>2];C=A*(2.0/(A*A+k*k+B*B+j*j));h=k*(2.0/(A*A+k*k+B*B+j*j));l=B*(2.0/(A*A+k*k+B*B+j*j));g[y+168>>2]=1.0-(k*h+B*l);g[q>>2]=A*h-j*l;g[y+168+8>>2]=A*l+j*h;g[y+168+12>>2]=0.0;g[y+168+16>>2]=A*h+j*l;g[y+168+20>>2]=1.0-(A*C+B*l);g[r>>2]=k*l-j*C;g[y+168+28>>2]=0.0;g[y+168+32>>2]=A*l-j*h;g[y+168+36>>2]=k*l+j*C;g[y+168+40>>2]=1.0-(A*C+k*h);g[s>>2]=0.0;h=+g[d+184>>2];k=+g[d+188>>2];C=+g[d+192>>2];A=+g[d+196>>2];j=h*(2.0/(h*h+k*k+C*C+A*A));l=k*(2.0/(h*h+k*k+C*C+A*A));B=C*(2.0/(h*h+k*k+C*C+A*A));g[y+104>>2]=1.0-(k*l+C*B);g[t>>2]=h*l-A*B;g[y+104+8>>2]=h*B+A*l;g[y+104+12>>2]=0.0;g[y+104+16>>2]=h*l+A*B;g[y+104+20>>2]=1.0-(h*j+C*B);g[u>>2]=k*B-A*j;g[y+104+28>>2]=0.0;g[y+104+32>>2]=h*B-A*l;g[y+104+36>>2]=k*B+A*j;g[y+104+40>>2]=1.0-(h*j+k*l);g[v>>2]=0.0;z=c[d+8>>2]|0;g[y+4>>2]=1.0;b[y+8>>1]=1;b[y+10>>1]=-1;c[y+76>>2]=0;c[y+12>>2]=0;c[y+12+4>>2]=0;c[y+12+8>>2]=0;c[y+12+12>>2]=0;c[y+12+16>>2]=0;c[y+12+20>>2]=0;c[y+12+24>>2]=0;c[y+12+28>>2]=0;c[y>>2]=4196;c[y+80>>2]=z;g[y+84>>2]=m;g[y+88>>2]=n;g[y+92>>2]=f;g[y+96>>2]=0.0;g[y+100>>2]=0.0;z=c[(c[z+188>>2]|0)+4>>2]|0;b[y+8>>1]=z;b[y+10>>1]=z>>>16;z=c[d+12>>2]|0;f=+Cb[c[(c[z>>2]|0)+48>>2]&15](z);z=c[d+12>>2]|0;jb[c[(c[z>>2]|0)+44>>2]&31](z,f+ +g[d+64>>2]);if(!((((((((((((+g[y+168>>2]==+g[y+104>>2]?+g[y+168+16>>2]==+g[y+104+16>>2]:0)?+g[y+168+32>>2]==+g[y+104+32>>2]:0)?+g[q>>2]==+g[t>>2]:0)?+g[y+168+20>>2]==+g[y+104+20>>2]:0)?+g[y+168+36>>2]==+g[y+104+36>>2]:0)?+g[y+168+8>>2]==+g[y+104+8>>2]:0)?+g[r>>2]==+g[u>>2]:0)?+g[y+168+40>>2]==+g[y+104+40>>2]:0)?+g[y+168+60>>2]==+g[y+104+60>>2]:0)?+g[y+168+56>>2]==+g[y+104+56>>2]:0)?+g[y+168+52>>2]==+g[y+104+52>>2]:0)?+g[y+168+48>>2]==+g[y+104+48>>2]:0))x=16;do if((x|0)==16){x=0;if(!(a[d+250>>0]|0)){Hd(e,c[d+12>>2]|0,y+168|0,y+104|0,y,+g[e+56>>2]);break}else{ad(c[d+8>>2]|0,c[d+12>>2]|0,y+168|0,y+104|0,y,+g[e+56>>2]);break}}while(0);z=c[d+12>>2]|0;jb[c[(c[z>>2]|0)+44>>2]&31](z,f);C=+g[y+4>>2];o=o-C;if((C<1.0?(w=c[d+8>>2]|0,(c[w+204>>2]&4|0)==0):0)?yb[c[(c[d>>2]|0)+56>>2]&63](d,w,c[y+76>>2]|0)|0:0){f=+g[d+152>>2];l=+g[d+132>>2];j=+g[d+156>>2];m=+g[d+136>>2];k=+g[d+160>>2];n=+g[d+140>>2];h=+G(+((f-l)*(f-l)+(j-m)*(j-m)+(k-n)*(k-n)));if(h>1.1920928955078125e-007){E=+g[y+44>>2];A=+g[y+48>>2];F=+g[y+52>>2];C=((f-l)*(1.0/h)*E+(j-m)*(1.0/h)*A+(k-n)*(1.0/h)*F)*2.0;D=(f-l)*(1.0/h)-E*C;B=(j-m)*(1.0/h)-A*C;j=(k-n)*(1.0/h)-F*C;k=1.0/+G(+(j*j+(D*D+B*B)));c[d+152>>2]=c[d+132>>2];c[d+152+4>>2]=c[d+132+4>>2];c[d+152+8>>2]=c[d+132+8>>2];c[d+152+12>>2]=c[d+132+12>>2];f=h*(k*D-E*(F*k*j+(E*k*D+A*k*B)))+ +g[d+152>>2];g[d+152>>2]=f;C=h*(k*B-A*(F*k*j+(E*k*D+A*k*B)))+ +g[d+156>>2];g[d+156>>2]=C;k=h*(k*j-F*(F*k*j+(E*k*D+A*k*B)))+ +g[d+160>>2];g[d+160>>2]=k;h=C}else h=j;j=f-l;h=h-m;f=k-n;if(!(j*j+h*h+f*f>1.1920928955078125e-007)){x=26;break}F=1.0/+G(+(j*j+h*h+f*f));if(+g[d+84>>2]*j*F+h*F*+g[d+88>>2]+f*F*+g[d+92>>2]<=0.0){x=26;break}}else{c[d+132>>2]=c[d+152>>2];c[d+132+4>>2]=c[d+152+4>>2];c[d+132+8>>2]=c[d+152+8>>2];c[d+132+12>>2]=c[d+152+12>>2]}if(!(o>.009999999776482582)){x=29;break}}if((x|0)==26){i=y;return}else if((x|0)==29){i=y;return}}function cd(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=i;i=i+80|0;a[x+16>>0]=1;c[x+12>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;a[x+36>>0]=1;c[x+32>>2]=0;c[x+24>>2]=0;c[x+28>>2]=0;a[x+56>>0]=1;c[x+52>>2]=0;c[x+44>>2]=0;c[x+48>>2]=0;a[x+76>>0]=1;c[x+72>>2]=0;c[x+64>>2]=0;c[x+68>>2]=0;e=c[b+8>>2]|0;if((e|0)<=0){dj(x);i=x;return}f=0;p=0;j=0;h=0;n=0;while(1){r=c[(c[(c[b+16>>2]|0)+(f<<2)>>2]|0)+192>>2]|0;q=(r+~(r<<15)>>10^r+~(r<<15))*9|0;q=(q>>6^q)+~((q>>6^q)<<11)>>16^(q>>6^q)+~((q>>6^q)<<11);g=q&p+-1;l=g>>>0<j>>>0;a:do if(l){j=c[h+(g<<2)>>2]|0;if((j|0)!=-1){m=c[x+72>>2]|0;while(1){if((r|0)==(c[m+(j<<3)>>2]|0)){o=9;break}k=c[n+(j<<2)>>2]|0;if((k|0)==-1)break;else j=k}if((o|0)==9?(o=0,(c[x+52>>2]|0)+(j<<2)|0):0){j=p;g=n;break}if(!l){o=16;break}}e=c[h+(g<<2)>>2]|0;if((e|0)!=-1){j=c[x+72>>2]|0;while(1){if((r|0)==(c[j+(e<<3)>>2]|0))break;e=c[n+(e<<2)>>2]|0;if((e|0)==-1){o=16;break a}}c[(c[x+52>>2]|0)+(e<<2)>>2]=r;e=p;g=n;o=76}else o=16}else o=16;while(0);if((o|0)==16){n=c[x+44>>2]|0;if((n|0)==(p|0)){e=p|0?p<<1:1;if((p|0)<(e|0)){if((e|0)!=0?(c[6324]=(c[6324]|0)+1,w=ic((e<<2|3)+16|0)|0,(w|0)!=0):0){c[(w+4+15&-16)+-4>>2]=w;j=w+4+15&-16}else j=0;if((p|0)>0){h=0;do{c[j+(h<<2)>>2]=c[(c[x+52>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(p|0))}h=c[x+52>>2]|0;if(h|0){if(a[x+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[x+52>>2]=0}a[x+56>>0]=1;c[x+52>>2]=j;c[x+48>>2]=e;h=p}else{h=p;e=p}}else{h=n;e=p}c[(c[x+52>>2]|0)+(h<<2)>>2]=r;c[x+44>>2]=h+1;h=c[x+64>>2]|0;if((h|0)==(c[x+68>>2]|0)?(s=h|0?h<<1:1,(h|0)<(s|0)):0){if((s|0)!=0?(c[6324]=(c[6324]|0)+1,t=ic((s<<3|3)+16|0)|0,(t|0)!=0):0){c[(t+4+15&-16)+-4>>2]=t;j=t+4+15&-16}else j=0;if((h|0)>0){e=0;do{l=(c[x+72>>2]|0)+(e<<3)|0;m=c[l+4>>2]|0;o=j+(e<<3)|0;c[o>>2]=c[l>>2];c[o+4>>2]=m;e=e+1|0}while((e|0)!=(h|0))}e=c[x+72>>2]|0;if(e|0){if(a[x+76>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[x+72>>2]=0}a[x+76>>0]=1;c[x+72>>2]=j;c[x+68>>2]=s;h=c[x+64>>2]|0;e=c[x+48>>2]|0}o=(c[x+72>>2]|0)+(h<<3)|0;c[o>>2]=r;c[o+4>>2]=0;c[x+64>>2]=h+1;if((p|0)<(e|0)){m=c[x+4>>2]|0;do if((m|0)<(e|0)){do if((c[x+8>>2]|0)<(e|0)){if((e|0)!=0?(c[6324]=(c[6324]|0)+1,u=ic((e<<2|3)+16|0)|0,(u|0)!=0):0){c[(u+4+15&-16)+-4>>2]=u;g=u+4+15&-16}else g=0;j=c[x+12>>2]|0;if((m|0)<=0){if(!j){a[x+16>>0]=1;c[x+12>>2]=g;c[x+8>>2]=e;break}}else{h=0;do{c[g+(h<<2)>>2]=c[j+(h<<2)>>2];h=h+1|0}while((h|0)!=(m|0))}if(a[x+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}a[x+16>>0]=1;c[x+12>>2]=g;c[x+8>>2]=e}else g=c[x+12>>2]|0;while(0);l=e<<2;yn(g+(m<<2)|0,0,l-(m<<2)|0)|0;c[x+4>>2]=e;k=c[x+24>>2]|0;if((k|0)<(e|0)){do if((c[x+28>>2]|0)<(e|0)){if((e|0)!=0?(c[6324]=(c[6324]|0)+1,v=ic((l|3)+16|0)|0,(v|0)!=0):0){c[(v+4+15&-16)+-4>>2]=v;g=v+4+15&-16}else g=0;j=c[x+32>>2]|0;if((k|0)<=0){if(!j){a[x+36>>0]=1;c[x+32>>2]=g;c[x+28>>2]=e;break}}else{h=0;do{c[g+(h<<2)>>2]=c[j+(h<<2)>>2];h=h+1|0}while((h|0)!=(k|0))}if(a[x+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}a[x+36>>0]=1;c[x+32>>2]=g;c[x+28>>2]=e}else g=c[x+32>>2]|0;while(0);yn(g+(k<<2)|0,0,l-(k<<2)|0)|0}c[x+24>>2]=e;if((e|0)>0){yn(c[x+12>>2]|0,-1,l|0)|0;yn(c[x+32>>2]|0,-1,l|0)|0}if((m|0)<=0){e=c[x+48>>2]|0;break}h=c[x+72>>2]|0;j=c[x+12>>2]|0;k=c[x+32>>2]|0;e=c[x+48>>2]|0;g=0;do{p=c[h+(g<<3)>>2]|0;p=(p+~(p<<15)>>10^p+~(p<<15))*9|0;p=j+((((p>>6^p)+~((p>>6^p)<<11)>>16^(p>>6^p)+~((p>>6^p)<<11))&e+-1)<<2)|0;c[k+(g<<2)>>2]=c[p>>2];c[p>>2]=g;g=g+1|0}while((g|0)!=(m|0))}while(0);g=q&e+-1}h=c[x+12>>2]|0;o=h+(g<<2)|0;g=c[x+32>>2]|0;c[g+(n<<2)>>2]=c[o>>2];c[o>>2]=n;o=76}if((o|0)==76){o=0;mb[c[(c[r>>2]|0)+60>>2]&127](r,d);j=e;e=c[b+8>>2]|0}f=f+1|0;if((f|0)>=(e|0))break;p=j;j=c[x+4>>2]|0;n=g}if((e|0)>0)g=0;else{dj(x);i=x;return}do{f=c[(c[b+16>>2]|0)+(g<<2)>>2]|0;switch(c[f+248>>2]|0){case 64:case 1:{mb[c[(c[f>>2]|0)+24>>2]&127](f,d);e=c[b+8>>2]|0;break}default:{}}g=g+1|0}while((g|0)<(e|0));dj(x);i=x;return}function dd(b,d){b=b|0;d=+d;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0.0,F=0.0;C=i;i=i+64|0;e=c[b+128>>2]|0;if((e|0)>0){f=0;do{me(c[b+108>>2]|0,c[b+136>>2]|0,f,0);f=f+1|0;e=c[b+128>>2]|0}while((f|0)<(e|0))}f=c[b+108>>2]|0;t=+g[f+352>>2];u=+g[f+356>>2];h=+g[f+360>>2];h=+G(+(t*t+u*u+h*h))*3.5999999046325684;g[b+104>>2]=h;B=c[b+120>>2]|0;if(+g[f+4+(B<<2)>>2]*+g[f+352>>2]+ +g[f+20+(B<<2)>>2]*+g[f+356>>2]+ +g[f+36+(B<<2)>>2]*+g[f+360>>2]<0.0)g[b+104>>2]=-h;if((e|0)>0){B=0;do{A=c[b+136>>2]|0;p=A+(B*284|0)|0;Gg(f,p,0);o=A+(B*284|0)+204|0;e=A+(B*284|0)+212|0;h=+g[o>>2]+ +g[e>>2];q=A+(B*284|0)+52|0;v=A+(B*284|0)+56|0;w=A+(B*284|0)+60|0;D=A+(B*284|0)+36|0;x=A+(B*284|0)+16|0;t=h*+g[v>>2]+ +g[A+(B*284|0)+40>>2];u=h*+g[w>>2]+ +g[A+(B*284|0)+44>>2];g[A+(B*284|0)+16>>2]=+g[q>>2]*h+ +g[D>>2];y=A+(B*284|0)+20|0;g[y>>2]=t;z=A+(B*284|0)+24|0;g[z>>2]=u;g[A+(B*284|0)+28>>2]=0.0;g[C+32>>2]=-1.0;f=c[b+92>>2]|0;D=sb[c[(c[f>>2]|0)+8>>2]&31](f,D,x,C)|0;f=A+(B*284|0)+88|0;c[f>>2]=0;do if(D){h=h*+g[C+32>>2];c[p>>2]=c[C+16>>2];c[p+4>>2]=c[C+16+4>>2];c[p+8>>2]=c[C+16+8>>2];c[p+12>>2]=c[C+16+12>>2];a[A+(B*284|0)+84>>0]=1;if(!(a[22096]|0)){a[22096]=1;c[C+40>>2]=0;c[C+40+4>>2]=0;c[C+40+8>>2]=0;c[C+40+12>>2]=0;If(23496,0.0,0,0,C+40|0)}c[5925]=c[5925]|1;g[5970]=0.0;j=+g[5980]*0.0;k=+g[5981]*0.0;g[5975]=+g[5979]*0.0;g[5976]=j;g[5977]=k;g[5978]=0.0;c[5983]=0;c[5984]=0;c[5985]=0;c[5986]=0;k=+g[5972]*0.0;j=+g[5973]*0.0;g[6024]=+g[5971]*0.0;g[6025]=k;g[6026]=j;g[6027]=0.0;c[f>>2]=23496;h=h-+g[e>>2];e=A+(B*284|0)+32|0;g[e>>2]=h;j=+g[o>>2];k=+g[A+(B*284|0)+208>>2]*.009999999776482582;if(h<j-k){g[e>>2]=j-k;h=j-k}if(h>j+k)g[e>>2]=j+k;c[x>>2]=c[C>>2];c[x+4>>2]=c[C+4>>2];c[x+8>>2]=c[C+8>>2];c[x+12>>2]=c[C+12>>2];s=+g[p>>2];t=+g[A+(B*284|0)+4>>2];u=+g[A+(B*284|0)+8>>2];r=s*+g[q>>2]+t*+g[v>>2]+u*+g[w>>2];e=c[b+108>>2]|0;n=+g[x>>2]-+g[e+52>>2];m=+g[y>>2]-+g[e+56>>2];h=+g[z>>2]-+g[e+60>>2];j=+g[e+372>>2];k=+g[e+376>>2];l=+g[e+368>>2];if(!(r>=-.10000000149011612)){g[A+(B*284|0)+272>>2]=-1.0/r*(s*(j*h-m*k+ +g[e+352>>2])+t*(n*k-h*l+ +g[e+356>>2])+u*(m*l-n*j+ +g[e+360>>2]));g[A+(B*284|0)+268>>2]=-1.0/r;break}else{g[A+(B*284|0)+272>>2]=0.0;g[A+(B*284|0)+268>>2]=10.0;break}}else{c[A+(B*284|0)+32>>2]=c[o>>2];g[A+(B*284|0)+272>>2]=0.0;t=-+g[v>>2];u=-+g[w>>2];g[p>>2]=-+g[q>>2];g[A+(B*284|0)+4>>2]=t;g[A+(B*284|0)+8>>2]=u;g[A+(B*284|0)+12>>2]=0.0;g[A+(B*284|0)+268>>2]=1.0}while(0);B=B+1|0;e=c[b+128>>2]|0;f=c[b+108>>2]|0}while((B|0)<(e|0));j=1.0/+g[f+384>>2];if((e|0)>0){f=0;do{e=c[b+136>>2]|0;if(!(a[e+(f*284|0)+84>>0]|0))h=0.0;else{h=+g[e+(f*284|0)+272>>2];h=j*(+g[e+(f*284|0)+216>>2]*(+g[e+(f*284|0)+204>>2]-+g[e+(f*284|0)+32>>2])*+g[e+(f*284|0)+268>>2]-h*+g[(h<0.0?e+(f*284|0)+220|0:e+(f*284|0)+224|0)>>2]);h=h<0.0?0.0:h}g[e+(f*284|0)+276>>2]=h;f=f+1|0;e=c[b+128>>2]|0}while((f|0)<(e|0));if((e|0)>0){e=0;do{B=c[b+136>>2]|0;s=+g[B+(e*284|0)+276>>2];u=+g[B+(e*284|0)+248>>2];s=s>u?u:s;u=s*+g[B+(e*284|0)+4>>2]*d;t=s*+g[B+(e*284|0)+8>>2]*d;g[C+40>>2]=+g[B+(e*284|0)>>2]*s*d;g[C+40+4>>2]=u;g[C+40+8>>2]=t;g[C+40+12>>2]=0.0;D=c[b+108>>2]|0;t=+g[B+(e*284|0)+20>>2]-+g[D+56>>2];u=+g[B+(e*284|0)+24>>2]-+g[D+60>>2];g[C>>2]=+g[B+(e*284|0)+16>>2]-+g[D+52>>2];g[C+4>>2]=t;g[C+8>>2]=u;g[C+12>>2]=0.0;Xi(D,C+40|0,C);e=e+1|0}while((e|0)<(c[b+128>>2]|0))}}}jb[c[(c[b>>2]|0)+20>>2]&31](b,d);o=c[b+128>>2]|0;if((o|0)<=0){i=C;return}p=c[b+136>>2]|0;q=c[b+108>>2]|0;f=0;do{h=+g[p+(f*284|0)+36>>2]-+g[q+52>>2];j=+g[p+(f*284|0)+40>>2]-+g[q+56>>2];k=+g[p+(f*284|0)+44>>2]-+g[q+60>>2];l=+g[q+372>>2];m=+g[q+376>>2];n=+g[q+368>>2];if(!(a[p+(f*284|0)+84>>0]|0)){e=p+(f*284|0)+240|0;h=+g[e>>2];D=p+(f*284|0)+236|0;g[D>>2]=h+ +g[D>>2]}else{e=c[b+120>>2]|0;F=+g[q+4+(e<<2)>>2];r=+g[q+20+(e<<2)>>2];t=+g[q+36+(e<<2)>>2];E=+g[p+(f*284|0)>>2];s=+g[p+(f*284|0)+4>>2];u=+g[p+(f*284|0)+8>>2];h=((j*n-h*l+ +g[q+360>>2])*(t-u*(F*E+r*s+t*u))+((l*k-j*m+ +g[q+352>>2])*(F-E*(F*E+r*s+t*u))+(h*m-k*n+ +g[q+356>>2])*(r-s*(F*E+r*s+t*u))))*d/+g[p+(f*284|0)+212>>2];e=p+(f*284|0)+240|0;g[e>>2]=h;D=p+(f*284|0)+236|0;g[D>>2]=+g[D>>2]+h}g[e>>2]=h*.9900000095367432;f=f+1|0}while((f|0)!=(o|0));i=C;return}function ed(b,d,e){b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0;C=+g[b+48>>2];i=+g[d>>2];D=+g[b+64>>2];j=+g[d+4>>2];E=+g[b+80>>2];p=+g[d+8>>2];s=+g[b+52>>2];r=+g[b+68>>2];q=+g[b+84>>2];w=+g[b+56>>2];y=+g[b+72>>2];z=+g[b+88>>2];v=+g[d+16>>2];u=+g[d+20>>2];t=+g[d+24>>2];x=+g[d+32>>2];F=+g[d+36>>2];H=+g[d+40>>2];k=+g[b+96>>2];h=+g[b+100>>2];B=+g[b+104>>2];A=+g[d+48>>2]+(i*k+j*h+p*B);f=v*k+u*h+t*B+ +g[d+52>>2];B=x*k+F*h+H*B+ +g[d+56>>2];g[b+1064>>2]=C*i+D*j+E*p;g[b+1068>>2]=i*s+j*r+p*q;g[b+1072>>2]=i*w+j*y+p*z;g[b+1076>>2]=0.0;g[b+1080>>2]=C*v+D*u+E*t;g[b+1084>>2]=s*v+r*u+q*t;g[b+1088>>2]=w*v+y*u+z*t;g[b+1092>>2]=0.0;g[b+1096>>2]=C*x+D*F+E*H;g[b+1100>>2]=s*x+r*F+q*H;g[b+1104>>2]=w*x+y*F+z*H;g[b+1108>>2]=0.0;g[b+1112>>2]=A;g[b+1116>>2]=f;g[b+1120>>2]=B;g[b+1124>>2]=0.0;B=+g[b+112>>2];f=+g[e>>2];A=+g[b+128>>2];H=+g[e+4>>2];z=+g[b+144>>2];F=+g[e+8>>2];y=+g[b+116>>2];x=+g[b+132>>2];w=+g[b+148>>2];q=+g[b+120>>2];r=+g[b+136>>2];s=+g[b+152>>2];E=+g[e+16>>2];D=+g[e+20>>2];C=+g[e+24>>2];t=+g[e+32>>2];u=+g[e+36>>2];v=+g[e+40>>2];p=+g[b+160>>2];j=+g[b+164>>2];i=+g[b+168>>2];h=+g[e+48>>2]+(f*p+H*j+F*i);k=E*p+D*j+C*i+ +g[e+52>>2];i=t*p+u*j+v*i+ +g[e+56>>2];g[b+1128>>2]=B*f+A*H+z*F;g[b+1132>>2]=f*y+H*x+F*w;g[b+1136>>2]=f*q+H*r+F*s;g[b+1140>>2]=0.0;g[b+1144>>2]=B*E+A*D+z*C;g[b+1148>>2]=y*E+x*D+w*C;g[b+1152>>2]=q*E+r*D+s*C;g[b+1156>>2]=0.0;g[b+1160>>2]=B*t+A*u+z*v;g[b+1164>>2]=y*t+x*u+w*v;g[b+1168>>2]=q*t+r*u+s*v;g[b+1172>>2]=0.0;g[b+1176>>2]=h;g[b+1180>>2]=k;g[b+1184>>2]=i;g[b+1188>>2]=0.0;h=h-+g[b+1112>>2];k=k-+g[b+1116>>2];i=i-+g[b+1120>>2];w=+g[b+1084>>2];x=+g[b+1104>>2];y=+g[b+1088>>2];z=+g[b+1100>>2];A=+g[b+1096>>2];B=+g[b+1080>>2];C=+g[b+1064>>2];D=+g[b+1068>>2];E=+g[b+1072>>2];F=1.0/((w*x-y*z)*C+D*(y*A-x*B)+(z*B-w*A)*E);H=(z*B-w*A)*F;f=i*(y*D-w*E)*F+(h*(w*x-y*z)*F+k*(z*E-x*D)*F);j=i*(B*E-y*C)*F+(h*(y*A-x*B)*F+k*(x*C-A*E)*F);k=i*(w*C-B*D)*F+(h*H+k*(A*D-z*C)*F);g[b+1256>>2]=f;g[b+1260>>2]=j;g[b+1264>>2]=k;g[b+1268>>2]=0.0;g[b+840>>2]=f;h=+g[b+680>>2];i=+g[b+696>>2];do if(!(h>i)){if(h>f){c[b+856>>2]=2;g[b+824>>2]=f-h;break}if(i<f){c[b+856>>2]=1;g[b+824>>2]=f-i;break}else{c[b+856>>2]=0;g[b+824>>2]=0.0;break}}else{c[b+856>>2]=0;g[b+824>>2]=0.0}while(0);g[b+844>>2]=j;f=+g[b+684>>2];h=+g[b+700>>2];do if(!(f>h)){if(f>j){c[b+860>>2]=2;g[b+828>>2]=j-f;break}if(h<j){c[b+860>>2]=1;g[b+828>>2]=j-h;break}else{c[b+860>>2]=0;g[b+828>>2]=0.0;break}}else{c[b+860>>2]=0;g[b+828>>2]=0.0}while(0);g[b+848>>2]=k;f=+g[b+688>>2];h=+g[b+704>>2];do if(!(f>h)){if(f>k){c[b+864>>2]=2;g[b+832>>2]=k-f;break}if(h<k){c[b+864>>2]=1;g[b+832>>2]=k-h;break}else{c[b+864>>2]=0;g[b+832>>2]=0.0;break}}else{c[b+864>>2]=0;g[b+832>>2]=0.0}while(0);h=+g[b+1128>>2];i=+g[b+1144>>2];j=+g[b+1160>>2];k=+g[b+1132>>2];l=+g[b+1148>>2];m=+g[b+1164>>2];n=(w*x-y*z)*F*k+(z*E-x*D)*F*l+(y*D-w*E)*F*m;o=k*(y*A-x*B)*F+(x*C-A*E)*F*l+(B*E-y*C)*F*m;p=j*(w*C-B*D)*F+(h*H+i*(A*D-z*C)*F);f=H*+g[b+1136>>2]+(A*D-z*C)*F*+g[b+1152>>2]+(w*C-B*D)*F*(q*t+r*u+s*v);do if(p<1.0)if(p>-1.0){g[b+1192>>2]=+O(+-(k*H+(A*D-z*C)*F*l+(w*C-B*D)*F*m),+f);H=p<-1.0?-1.0:p;g[b+1196>>2]=+M(+(H>1.0?1.0:H));g[b+1200>>2]=+O(+-(j*(B*E-y*C)*F+(h*(y*A-x*B)*F+i*(x*C-A*E)*F)),+(j*(y*D-w*E)*F+(h*(w*x-y*z)*F+i*(z*E-x*D)*F)));break}else{g[b+1192>>2]=-+O(+n,+o);g[b+1196>>2]=-1.5707963705062866;g[b+1200>>2]=0.0;break}else{g[b+1192>>2]=+O(+n,+o);g[b+1196>>2]=1.5707963705062866;g[b+1200>>2]=0.0}while(0);g[b+1236>>2]=0.0;z=x*(h*x-j*E)-y*(i*E-h*y);A=E*(i*E-h*y)-x*(j*y-i*x);B=y*(j*y-i*x)-E*(h*x-j*E);g[b+1220>>2]=0.0;C=i*(i*E-h*y)-j*(h*x-j*E);D=j*(j*y-i*x)-h*(i*E-h*y);F=h*(h*x-j*E)-i*(j*y-i*x);g[b+1252>>2]=0.0;H=1.0/+G(+(z*z+A*A+B*B));g[b+1208>>2]=z*H;g[b+1212>>2]=A*H;g[b+1216>>2]=B*H;H=1.0/+G(+((j*y-i*x)*(j*y-i*x)+(h*x-j*E)*(h*x-j*E)+(i*E-h*y)*(i*E-h*y)));g[b+1224>>2]=(j*y-i*x)*H;g[b+1228>>2]=(h*x-j*E)*H;g[b+1232>>2]=(i*E-h*y)*H;H=1.0/+G(+(C*C+D*D+F*F));g[b+1240>>2]=C*H;g[b+1244>>2]=D*H;g[b+1248>>2]=F*H;if(!(a[b+1301>>0]|0))return;F=+g[(c[b+28>>2]|0)+384>>2];H=+g[(c[b+32>>2]|0)+384>>2];a[b+1280>>0]=(F<1.1920928955078125e-007|H<1.1920928955078125e-007)&1;H=F+H>0.0?H/(F+H):.5;g[b+1272>>2]=H;g[b+1276>>2]=1.0-H;return}function fd(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,i=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0;r=c[b+28>>2]|0;j=c[b+32>>2]|0;qc(b,r+4|0,j+4|0,r+304|0,j+304|0);s=c[d+8>>2]|0;g[s>>2]=1.0;p=c[d+24>>2]|0;g[s+(p+1<<2)>>2]=1.0;g[s+((p<<1)+2<<2)>>2]=1.0;m=+g[b+348>>2];v=+g[b+352>>2];o=+g[b+356>>2];t=+g[r+4>>2]*m+ +g[r+8>>2]*v+ +g[r+12>>2]*o;n=m*+g[r+20>>2]+v*+g[r+24>>2]+o*+g[r+28>>2];o=m*+g[r+36>>2]+v*+g[r+40>>2]+o*+g[r+44>>2];s=c[d+12>>2]|0;c[s>>2]=0;g[s+4>>2]=o;g[s+8>>2]=-n;g[s+12>>2]=0.0;g[s+(p<<2)>>2]=-o;c[s+(p<<2)+4>>2]=0;g[s+(p<<2)+8>>2]=t;g[s+(p<<2)+12>>2]=0.0;g[s+(p<<1<<2)>>2]=n;g[s+(p<<1<<2)+4>>2]=-t;c[s+(p<<1<<2)+8>>2]=0;g[s+(p<<1<<2)+12>>2]=0.0;s=c[d+16>>2]|0;g[s>>2]=-1.0;g[s+(p+1<<2)>>2]=-1.0;g[s+((p<<1)+2<<2)>>2]=-1.0;v=+g[b+412>>2];m=+g[b+416>>2];l=+g[b+420>>2];u=+g[j+4>>2]*v+ +g[j+8>>2]*m+ +g[j+12>>2]*l;k=v*+g[j+20>>2]+m*+g[j+24>>2]+l*+g[j+28>>2];l=v*+g[j+36>>2]+m*+g[j+40>>2]+l*+g[j+44>>2];p=c[d+20>>2]|0;s=c[d+24>>2]|0;c[p>>2]=0;g[p+4>>2]=-l;g[p+8>>2]=k;g[p+12>>2]=0.0;g[p+(s<<2)>>2]=l;c[p+(s<<2)+4>>2]=0;g[p+(s<<2)+8>>2]=-u;g[p+(s<<2)+12>>2]=0.0;g[p+(s<<1<<2)>>2]=-k;g[p+(s<<1<<2)+4>>2]=u;c[p+(s<<1<<2)+8>>2]=0;g[p+(s<<1<<2)+12>>2]=0.0;q=c[b+592>>2]|0;m=+g[((q&2|0)==0?d+4|0:b+600|0)>>2]*+g[d>>2];i=c[d+28>>2]|0;f=c[d+36>>2]|0;e=c[d+40>>2]|0;g[i>>2]=m*(u+ +g[j+52>>2]-t-+g[r+52>>2]);g[f>>2]=-34028234663852886.0e22;g[e>>2]=34028234663852886.0e22;if(!(q&1)){g[i+(s<<2)>>2]=m*(k+ +g[j+56>>2]-n-+g[r+56>>2]);g[f+(s<<2)>>2]=-34028234663852886.0e22;g[e+(s<<2)>>2]=34028234663852886.0e22;g[i+(s<<1<<2)>>2]=m*(l+ +g[j+60>>2]-o-+g[r+60>>2]);g[f+(s<<1<<2)>>2]=-34028234663852886.0e22;g[e+(s<<1<<2)>>2]=34028234663852886.0e22}else{w=c[d+32>>2]|0;c[w>>2]=c[b+596>>2];g[i+(s<<2)>>2]=m*(k+ +g[j+56>>2]-n-+g[r+56>>2]);g[f+(s<<2)>>2]=-34028234663852886.0e22;g[e+(s<<2)>>2]=34028234663852886.0e22;c[w+(s<<2)>>2]=c[b+596>>2];g[i+(s<<1<<2)>>2]=m*(l+ +g[j+60>>2]-o-+g[r+60>>2]);g[f+(s<<1<<2)>>2]=-34028234663852886.0e22;g[e+(s<<1<<2)>>2]=34028234663852886.0e22;c[w+(s<<1<<2)>>2]=c[b+596>>2]}do if(!(a[b+526>>0]|0))j=s*3|0;else{j=c[d+12>>2]|0;v=+g[b+456>>2];if(+g[b+444>>2]<v?+g[b+448>>2]<v:0){z=+g[r+4>>2];y=+g[r+8>>2];x=+g[r+12>>2];D=+g[b+304>>2];C=+g[b+320>>2];B=+g[b+336>>2];m=+g[b+308>>2];o=+g[b+324>>2];u=+g[b+340>>2];h=+g[r+20>>2];k=+g[r+24>>2];l=+g[r+28>>2];n=+g[r+36>>2];t=+g[r+40>>2];v=+g[r+44>>2];g[j+(s*3<<2)>>2]=z*D+y*C+x*B;g[j+((s*3|0)+1<<2)>>2]=D*h+C*k+B*l;g[j+((s*3|0)+2<<2)>>2]=D*n+C*t+B*v;g[j+(s<<2<<2)>>2]=z*m+y*o+x*u;g[j+((s<<2|1)<<2)>>2]=m*h+o*k+u*l;g[j+((s<<2|2)<<2)>>2]=m*n+o*t+u*v;g[p+(s*3<<2)>>2]=-(z*D+y*C+x*B);g[p+((s*3|0)+1<<2)>>2]=-(D*h+C*k+B*l);g[p+((s*3|0)+2<<2)>>2]=-(D*n+C*t+B*v);g[p+(s<<2<<2)>>2]=-(z*m+y*o+x*u);g[p+((s<<2|1)<<2)>>2]=-(m*h+o*k+u*l);g[p+((s<<2|2)<<2)>>2]=-(m*n+o*t+u*v);A=+g[d>>2]*+g[b+436>>2];i=c[d+28>>2]|0;g[i+(s*3<<2)>>2]=A*((z*D+y*C+x*B)*+g[b+460>>2]+(D*h+C*k+B*l)*+g[b+464>>2]+(D*n+C*t+B*v)*+g[b+468>>2]);g[i+(s<<2<<2)>>2]=A*((z*m+y*o+x*u)*+g[b+460>>2]+(m*h+o*k+u*l)*+g[b+464>>2]+(m*n+o*t+u*v)*+g[b+468>>2]);f=c[d+36>>2]|0;g[f+(s*3<<2)>>2]=-34028234663852886.0e22;e=c[d+40>>2]|0;g[e+(s*3<<2)>>2]=34028234663852886.0e22;g[f+(s<<2<<2)>>2]=-34028234663852886.0e22;g[e+(s<<2<<2)>>2]=34028234663852886.0e22;j=(c[d+24>>2]|0)+(s<<2)|0;break}D=+g[b+436>>2];B=D*+g[b+460>>2]*D;C=D*D*+g[b+464>>2];D=D*D*+g[b+468>>2];g[j+(s*3<<2)>>2]=B;g[j+((s*3|0)+1<<2)>>2]=C;g[j+((s*3|0)+2<<2)>>2]=D;g[p+(s*3<<2)>>2]=-B;g[p+((s*3|0)+1<<2)>>2]=-C;g[p+((s*3|0)+2<<2)>>2]=-D;g[i+(s*3<<2)>>2]=+g[d>>2]*+g[b+432>>2]*+g[b+504>>2];if(q&4|0)c[(c[d+32>>2]|0)+(s*3<<2)>>2]=c[b+604>>2];g[f+(s*3<<2)>>2]=0.0;if(!((a[b+552>>0]|0)!=0?(h=+g[b+572>>2],h>=0.0):0))h=34028234663852886.0e22;g[e+(s*3<<2)>>2]=h;j=s<<2}while(0);if(!(a[b+525>>0]|0))return;D=+g[b+436>>2];B=D*+g[b+476>>2]*D;C=D*D*+g[b+480>>2];D=D*D*+g[b+484>>2];q=c[d+12>>2]|0;s=c[d+20>>2]|0;g[q+(j<<2)>>2]=B;r=j+1|0;g[q+(r<<2)>>2]=C;w=j+2|0;g[q+(w<<2)>>2]=D;g[s+(j<<2)>>2]=-B;g[s+(r<<2)>>2]=-C;g[s+(w<<2)>>2]=-D;g[i+(j<<2)>>2]=+g[d>>2]*+g[b+432>>2]*+g[b+508>>2];if(c[b+592>>2]&4|0)c[(c[d+32>>2]|0)+(j<<2)>>2]=c[b+604>>2];if(!(+g[b+452>>2]>0.0)){g[f+(j<<2)>>2]=-34028234663852886.0e22;g[e+(j<<2)>>2]=34028234663852886.0e22;return}f=f+(j<<2)|0;e=c[d+40>>2]|0;if(+g[b+508>>2]>0.0){g[f>>2]=0.0;g[e+(j<<2)>>2]=34028234663852886.0e22;return}else{g[f>>2]=-34028234663852886.0e22;g[e+(j<<2)>>2]=0.0;return}}function gd(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;r=i;i=i+32|0;Yf(b+4|0,((S(c[b+152>>2]|0,c[b+16>>2]|0)|0)/100|0)+1|0);if(c[b+164>>2]|0){p=((S(c[b+148>>2]|0,c[b+76>>2]|0)|0)/100|0)+1|0;Yf(b+64|0,p);p=(c[b+164>>2]|0)-p|0;c[b+164>>2]=(p|0)<0?0:p}f=((c[b+144>>2]|0)+1|0)%2|0;c[b+144>>2]=f;f=c[b+124+(f<<2)>>2]|0;if(f|0){do{l=f+56|0;m=f;f=c[l>>2]|0;k=c[m+52>>2]|0;h=f;if(!k)c[b+124+(c[m+60>>2]<<2)>>2]=h;else c[k+56>>2]=h;h=c[l>>2]|0;if(h|0)c[h+52>>2]=c[m+52>>2];c[m+52>>2]=0;c[l>>2]=c[b+132>>2];h=c[b+132>>2]|0;if(h|0)c[h+52>>2]=m;c[b+132>>2]=m;h=c[m+48>>2]|0;Wg(b+4|0,h)|0;k=c[b+8>>2]|0;if(k|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[b+8>>2]=h;c[b+16>>2]=(c[b+16>>2]|0)+-1;c[r>>2]=c[m+16>>2];c[r+4>>2]=c[m+16+4>>2];c[r+8>>2]=c[m+16+8>>2];c[r+12>>2]=c[m+16+12>>2];c[r+16>>2]=c[m+32>>2];c[r+16+4>>2]=c[m+32+4>>2];c[r+16+8>>2]=c[m+32+8>>2];c[r+16+12>>2]=c[m+32+12>>2];h=c[b+68>>2]|0;if(!h){c[6324]=(c[6324]|0)+1;h=ic(63)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}k=h;l=k+44|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0))}else c[b+68>>2]=0;c[h+32>>2]=0;c[h+36>>2]=m;c[h+40>>2]=0;c[h>>2]=c[r>>2];c[h+4>>2]=c[r+4>>2];c[h+8>>2]=c[r+8>>2];c[h+12>>2]=c[r+12>>2];c[h+16>>2]=c[r+16>>2];c[h+20>>2]=c[r+20>>2];c[h+24>>2]=c[r+24>>2];c[h+28>>2]=c[r+28>>2];Ze(b+64|0,c[b+64>>2]|0,h);k=(c[b+76>>2]|0)+1|0;c[b+76>>2]=k;c[m+48>>2]=h;c[m+60>>2]=2}while((f|0)!=0);c[b+164>>2]=k;a[b+194>>0]=1}c[r>>2]=5276;c[r+4>>2]=b;if(a[b+193>>0]|0?(ge(b+4|0,c[b+4>>2]|0,c[b+64>>2]|0,r),a[b+193>>0]|0):0){p=c[b+4>>2]|0;ge(b+4|0,p,p,r)}if(a[b+194>>0]|0?(n=c[b+136>>2]|0,n=ob[c[(c[n>>2]|0)+28>>2]&127](n)|0,e=c[n+4>>2]|0,(e|0)>0):0){f=(S(c[b+156>>2]|0,e)|0)/100|0;p=c[b+160>>2]|0;f=(p|0)>(f|0)?p:f;f=(e|0)<(f|0)?e:f;if((f|0)>0){h=0;do{l=((c[b+184>>2]|0)+h|0)%(e|0)|0;o=c[n+12>>2]|0;k=c[o+(l<<4)>>2]|0;l=c[o+(l<<4)+4>>2]|0;o=c[k+48>>2]|0;p=c[l+48>>2]|0;if(!(((((+g[o>>2]<=+g[p+16>>2]?+g[o+16>>2]>=+g[p>>2]:0)?+g[o+4>>2]<=+g[p+20>>2]:0)?+g[o+20>>2]>=+g[p+4>>2]:0)?+g[o+8>>2]<=+g[p+24>>2]:0)?+g[o+24>>2]>=+g[p+8>>2]:0)){e=c[b+136>>2]|0;sb[c[(c[e>>2]|0)+12>>2]&31](e,k,l,d)|0;h=h+-1|0;f=f+-1|0;e=c[n+4>>2]|0}h=h+1|0}while((h|0)<(f|0));if((e|0)>0)q=37;else e=0}else q=37;if((q|0)==37)e=((c[b+184>>2]|0)+f|0)%(e|0)|0;c[b+184>>2]=e}c[b+180>>2]=(c[b+180>>2]|0)+1;c[b+160>>2]=1;a[b+194>>0]=0;f=c[b+168>>2]|0;e=c[b+172>>2]|0;if(!f)j=0.0;else j=+(e>>>0)/+(f>>>0);g[b+176>>2]=j;c[b+172>>2]=e>>>1;c[b+168>>2]=f>>>1;p=c[b+136>>2]|0;if(!(ob[c[(c[p>>2]|0)+56>>2]&127](p)|0)){i=r;return}p=c[b+136>>2]|0;p=ob[c[(c[p>>2]|0)+28>>2]&127](p)|0;e=c[p+4>>2]|0;if((e|0)>1){Gd(p,0,e+-1|0);e=c[p+4>>2]|0}if((e|0)>0){n=0;m=0;o=0;f=0;while(1){k=c[p+12>>2]|0;h=k+(n<<4)|0;s=o;o=c[h>>2]|0;k=k+(n<<4)+4|0;l=c[k>>2]|0;if(!((o|0)==(s|0)&(l|0)==(f|0))){f=c[o+48>>2]|0;s=c[l+48>>2]|0;if(((((+g[f>>2]<=+g[s+16>>2]?+g[f+16>>2]>=+g[s>>2]:0)?+g[f+4>>2]<=+g[s+20>>2]:0)?+g[f+20>>2]>=+g[s+4>>2]:0)?+g[f+8>>2]<=+g[s+24>>2]:0)?+g[f+24>>2]>=+g[s+8>>2]:0){h=m;f=l}else{f=l;q=53}}else q=53;if((q|0)==53){q=0;e=c[b+136>>2]|0;Ub[c[(c[e>>2]|0)+32>>2]&127](e,h,d);c[h>>2]=0;c[k>>2]=0;h=m+1|0;e=c[p+4>>2]|0}n=n+1|0;if((n|0)>=(e|0))break;else m=h}if((e|0)>1){Gd(p,0,e+-1|0);e=c[p+4>>2]|0}l=e-h|0;if((h|0)<0){if((c[p+8>>2]|0)<(l|0)){if(!l){f=0;k=e}else{c[6324]=(c[6324]|0)+1;f=ic((l<<4|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}k=c[p+4>>2]|0}if((k|0)>0){h=0;do{s=c[p+12>>2]|0;c[f+(h<<4)>>2]=c[s+(h<<4)>>2];c[f+(h<<4)+4>>2]=c[s+(h<<4)+4>>2];c[f+(h<<4)+8>>2]=c[s+(h<<4)+8>>2];c[f+(h<<4)+12>>2]=c[s+(h<<4)+12>>2];h=h+1|0}while((h|0)!=(k|0))}h=c[p+12>>2]|0;if(h|0){if(a[p+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[p+12>>2]=0}a[p+16>>0]=1;c[p+12>>2]=f;c[p+8>>2]=l}do{s=(c[p+12>>2]|0)+(e<<4)|0;e=e+1|0;c[s>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;c[s+12>>2]=0}while((e|0)!=(l|0));e=l}else e=l}c[p+4>>2]=e;i=r;return}function hd(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;c[b>>2]=2996;d=c[b+192>>2]|0;if(d|0)kb[c[(c[d>>2]|0)+4>>2]&255](d);a:do if((c[b+1152>>2]|0)>0)do{h=c[c[b+1160>>2]>>2]|0;d=c[h+348>>2]|0;if(d|0){Wg(b+1088|0,d)|0;e=c[b+1092>>2]|0;if(e|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[b+1092>>2]=d;c[b+1100>>2]=(c[b+1100>>2]|0)+-1}qk(h);if(h|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}d=c[b+1152>>2]|0;if((d|0)<=0)break a;g=c[b+1160>>2]|0;e=0;do{f=g+(e<<2)|0;if((c[f>>2]|0)==(h|0)){i=18;break}e=e+1|0}while((e|0)<(d|0));if((i|0)==18){i=0;if((e|0)<(d|0)){c[f>>2]=c[g+(d+-1<<2)>>2];c[(c[b+1160>>2]|0)+(d+-1<<2)>>2]=h;c[b+1152>>2]=d+-1;d=d+-1|0}}}while((d|0)>0);while(0);d=c[b+912>>2]|0;if((d|0)>0){f=0;do{e=c[(c[b+920>>2]|0)+(f<<2)>>2]|0;if(e){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);d=c[b+912>>2]|0}f=f+1|0}while((f|0)<(d|0))}d=c[b+892>>2]|0;if((d|0)>0){f=0;do{e=c[(c[b+900>>2]|0)+(f<<2)>>2]|0;if(e){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0);d=c[b+892>>2]|0}f=f+1|0}while((f|0)<(d|0))}d=c[b+1284>>2]|0;if(d|0){if(a[b+1288>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+1284>>2]=0}a[b+1288>>0]=1;c[b+1284>>2]=0;c[b+1276>>2]=0;c[b+1280>>2]=0;d=c[b+1180>>2]|0;if(d|0){if(a[b+1184>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+1180>>2]=0}a[b+1184>>0]=1;c[b+1180>>2]=0;c[b+1172>>2]=0;c[b+1176>>2]=0;d=c[b+1160>>2]|0;if(d|0){if(a[b+1164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+1160>>2]=0}a[b+1164>>0]=1;c[b+1160>>2]=0;c[b+1152>>2]=0;c[b+1156>>2]=0;gi(b+1088|0);gi(b+1028|0);gi(b+968|0);d=c[b+920>>2]|0;if(d|0){if(a[b+924>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+920>>2]=0}a[b+924>>0]=1;c[b+920>>2]=0;c[b+912>>2]=0;c[b+916>>2]=0;d=c[b+900>>2]|0;if(d|0){if(a[b+904>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+900>>2]=0}a[b+904>>0]=1;c[b+900>>2]=0;c[b+892>>2]=0;c[b+896>>2]=0;d=c[b+880>>2]|0;if(d|0){if(a[b+884>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+880>>2]=0}a[b+884>>0]=1;c[b+880>>2]=0;c[b+872>>2]=0;c[b+876>>2]=0;d=c[b+860>>2]|0;if(d|0){if(a[b+864>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+860>>2]=0}a[b+864>>0]=1;c[b+860>>2]=0;c[b+852>>2]=0;c[b+856>>2]=0;d=c[b+840>>2]|0;if(d|0){if(a[b+844>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+840>>2]=0}a[b+844>>0]=1;c[b+840>>2]=0;c[b+832>>2]=0;c[b+836>>2]=0;d=c[b+820>>2]|0;if(d|0){if(a[b+824>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+820>>2]=0}a[b+824>>0]=1;c[b+820>>2]=0;c[b+812>>2]=0;c[b+816>>2]=0;d=c[b+800>>2]|0;if(d|0){if(a[b+804>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+800>>2]=0}a[b+804>>0]=1;c[b+800>>2]=0;c[b+792>>2]=0;c[b+796>>2]=0;d=c[b+780>>2]|0;if(d|0){if(a[b+784>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+780>>2]=0}a[b+784>>0]=1;c[b+780>>2]=0;c[b+772>>2]=0;c[b+776>>2]=0;d=c[b+760>>2]|0;if(d|0){if(a[b+764>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+760>>2]=0}a[b+764>>0]=1;c[b+760>>2]=0;c[b+752>>2]=0;c[b+756>>2]=0;d=c[b+740>>2]|0;if(d|0){if(a[b+744>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+740>>2]=0}a[b+744>>0]=1;c[b+740>>2]=0;c[b+732>>2]=0;c[b+736>>2]=0;d=c[b+552>>2]|0;if(d|0){if(a[b+556>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+552>>2]=0}a[b+556>>0]=1;c[b+552>>2]=0;c[b+544>>2]=0;c[b+548>>2]=0;d=c[b+532>>2]|0;if(d|0){if(a[b+536>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+532>>2]=0}a[b+536>>0]=1;c[b+532>>2]=0;c[b+524>>2]=0;c[b+528>>2]=0;d=c[b+484>>2]|0;if(d|0){if(!((a[b+488>>0]&1)==0|(d|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+484>>2]=0}a[b+488>>0]=1;c[b+484>>2]=0;c[b+476>>2]=0;c[b+480>>2]=0;d=c[b+464>>2]|0;if(d|0){if(!((a[b+468>>0]&1)==0|(d|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+464>>2]=0}a[b+468>>0]=1;c[b+464>>2]=0;c[b+456>>2]=0;c[b+460>>2]=0;d=c[b+444>>2]|0;if(d|0){if(!((a[b+448>>0]&1)==0|(d|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+444>>2]=0}a[b+448>>0]=1;c[b+444>>2]=0;c[b+436>>2]=0;c[b+440>>2]=0;d=c[b+316>>2]|0;if(d|0){if(a[b+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+316>>2]=0}a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;c[b>>2]=5592;d=c[b+292>>2]|0;if(!d){a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;b=b+288|0;c[b>>2]=0;return}if(a[b+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+292>>2]=0;a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;b=b+288|0;c[b>>2]=0;return}function id(a){a=a|0;var b=0,d=0,e=0.0,f=0.0,h=0.0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0.0,q=0.0,r=0.0;n=i;i=i+16|0;j=c[a+372>>2]|0;a:do switch(c[j+32>>2]|0){case 1:{b=0;d=1;while(1){c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;g[n+(b<<2)>>2]=1.0;o=j+32|0;g[j+16+(d<<2)>>2]=0.0;d=(c[a+364>>2]|0)+-1|0;c[a+364>>2]=d;c[j+(c[o>>2]<<2)>>2]=c[a+348+(d<<2)>>2];d=c[o>>2]|0;c[o>>2]=d+1;e=+g[n>>2];f=+g[n+4>>2];h=+g[n+8>>2];Ch(a,e,f,h,c[j+(d<<2)>>2]|0);if(id(a)|0)break;j=c[a+372>>2]|0;o=(c[j+32>>2]|0)+-1|0;c[j+32>>2]=o;o=c[j+(o<<2)>>2]|0;j=c[a+364>>2]|0;c[a+364>>2]=j+1;c[a+348+(j<<2)>>2]=o;j=c[a+372>>2]|0;g[j+16+(c[j+32>>2]<<2)>>2]=0.0;o=(c[a+364>>2]|0)+-1|0;c[a+364>>2]=o;c[j+(c[j+32>>2]<<2)>>2]=c[a+348+(o<<2)>>2];o=c[j+32>>2]|0;c[j+32>>2]=o+1;Ch(a,-e,-f,-h,c[j+(o<<2)>>2]|0);if(id(a)|0)break;o=c[a+372>>2]|0;j=(c[o+32>>2]|0)+-1|0;c[o+32>>2]=j;j=c[o+(j<<2)>>2]|0;o=c[a+364>>2]|0;c[a+364>>2]=o+1;c[a+348+(o<<2)>>2]=j;b=b+1|0;if(b>>>0>=3)break a;d=c[a+372>>2]|0;j=d;d=c[d+32>>2]|0}o=1;i=n;return o|0}case 2:{o=c[j+4>>2]|0;b=c[j>>2]|0;e=+g[o+16>>2]-+g[b+16>>2];f=+g[o+20>>2]-+g[b+20>>2];h=+g[o+24>>2]-+g[b+24>>2];b=0;while(1){c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;g[n+(b<<2)>>2]=1.0;k=+g[n+8>>2];l=+g[n+4>>2];m=+g[n>>2];if((f*k-h*l)*(f*k-h*l)+(h*m-e*k)*(h*m-e*k)+(e*l-f*m)*(e*l-f*m)>0.0){j=c[a+372>>2]|0;g[j+16+(c[j+32>>2]<<2)>>2]=0.0;o=(c[a+364>>2]|0)+-1|0;c[a+364>>2]=o;c[j+(c[j+32>>2]<<2)>>2]=c[a+348+(o<<2)>>2];o=c[j+32>>2]|0;c[j+32>>2]=o+1;Ch(a,f*k-h*l,h*m-e*k,e*l-f*m,c[j+(o<<2)>>2]|0);if(id(a)|0)break;j=c[a+372>>2]|0;o=(c[j+32>>2]|0)+-1|0;c[j+32>>2]=o;o=c[j+(o<<2)>>2]|0;j=c[a+364>>2]|0;c[a+364>>2]=j+1;c[a+348+(j<<2)>>2]=o;j=c[a+372>>2]|0;g[j+16+(c[j+32>>2]<<2)>>2]=0.0;o=(c[a+364>>2]|0)+-1|0;c[a+364>>2]=o;c[j+(c[j+32>>2]<<2)>>2]=c[a+348+(o<<2)>>2];o=c[j+32>>2]|0;c[j+32>>2]=o+1;Ch(a,-(f*k-h*l),-(h*m-e*k),-(e*l-f*m),c[j+(o<<2)>>2]|0);if(id(a)|0)break;o=c[a+372>>2]|0;j=(c[o+32>>2]|0)+-1|0;c[o+32>>2]=j;j=c[o+(j<<2)>>2]|0;o=c[a+364>>2]|0;c[a+364>>2]=o+1;c[a+348+(o<<2)>>2]=j}b=b+1|0;if(b>>>0>=3)break a}o=1;i=n;return o|0}case 3:{o=c[j+4>>2]|0;d=c[j>>2]|0;k=+g[d+16>>2];e=+g[o+16>>2]-k;l=+g[d+20>>2];f=+g[o+20>>2]-l;m=+g[d+24>>2];h=+g[o+24>>2]-m;o=c[j+8>>2]|0;k=+g[o+16>>2]-k;l=+g[o+20>>2]-l;m=+g[o+24>>2]-m;if((f*m-h*l)*(f*m-h*l)+(h*k-e*m)*(h*k-e*m)+(e*l-f*k)*(e*l-f*k)>0.0){g[j+28>>2]=0.0;o=(c[a+364>>2]|0)+-1|0;c[a+364>>2]=o;c[j+12>>2]=c[a+348+(o<<2)>>2];o=c[j+32>>2]|0;c[j+32>>2]=o+1;Ch(a,f*m-h*l,h*k-e*m,e*l-f*k,c[j+(o<<2)>>2]|0);if(id(a)|0){o=1;i=n;return o|0}j=c[a+372>>2]|0;o=(c[j+32>>2]|0)+-1|0;c[j+32>>2]=o;o=c[j+(o<<2)>>2]|0;j=c[a+364>>2]|0;c[a+364>>2]=j+1;c[a+348+(j<<2)>>2]=o;j=c[a+372>>2]|0;g[j+16+(c[j+32>>2]<<2)>>2]=0.0;o=(c[a+364>>2]|0)+-1|0;c[a+364>>2]=o;c[j+(c[j+32>>2]<<2)>>2]=c[a+348+(o<<2)>>2];o=c[j+32>>2]|0;c[j+32>>2]=o+1;Ch(a,-(f*m-h*l),-(h*k-e*m),-(e*l-f*k),c[j+(o<<2)>>2]|0);if(id(a)|0){o=1;i=n;return o|0}else{o=c[a+372>>2]|0;j=(c[o+32>>2]|0)+-1|0;c[o+32>>2]=j;j=c[o+(j<<2)>>2]|0;o=c[a+364>>2]|0;c[a+364>>2]=o+1;c[a+348+(o<<2)>>2]=j;break a}}break}case 4:{o=c[j>>2]|0;a=c[j+12>>2]|0;m=+g[a+16>>2];r=+g[o+16>>2]-m;p=+g[a+20>>2];e=+g[o+20>>2]-p;h=+g[a+24>>2];k=+g[o+24>>2]-h;o=c[j+4>>2]|0;f=+g[o+16>>2]-m;l=+g[o+20>>2]-p;q=+g[o+24>>2]-h;o=c[j+8>>2]|0;m=+g[o+16>>2]-m;p=+g[o+20>>2]-p;h=+g[o+24>>2]-h;if(!(( false?1:r*l*h+(e*q*m+k*f*p-r*q*p-e*f*h)-k*l*m!=r*l*h+(e*q*m+k*f*p-r*q*p-e*f*h)-k*l*m)|r*l*h+(e*q*m+k*f*p-r*q*p-e*f*h)-k*l*m==0.0)){o=1;i=n;return o|0}break}default:{}}while(0);o=0;i=n;return o|0}function jd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0.0,h=0,i=0,j=0,k=0.0,l=0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0,Y=0,Z=0;Z=c[d+36>>2]|0;X=c[e+36>>2]|0;L=+g[Z+8>>2];N=+g[Z+12>>2];M=+g[Z+16>>2];h=c[X+8>>2]|0;R=+g[h+8>>2];S=+g[h+12>>2];T=+g[h+16>>2];d=c[X+12>>2]|0;O=+g[d+8>>2];P=+g[d+12>>2];Q=+g[d+16>>2];e=c[X+16>>2]|0;U=+g[e+8>>2];V=+g[e+12>>2];W=+g[e+16>>2];t=O-L-(R-L);A=P-N-(S-N);v=Q-M-(T-M);u=A*(W-M-(T-M))-v*(V-N-(S-N));B=v*(U-L-(R-L))-t*(W-M-(T-M));w=t*(V-N-(S-N))-A*(U-L-(R-L));do if(w*w+(u*u+B*B)>1.1920928955078125e-007?(D=1.0/+G(+(w*w+(u*u+B*B))),E=(T-M)*w*D+((R-L)*u*D+(S-N)*B*D),E*E<34028234663852886.0e22):0){f=R-L-u*D*E;k=S-N-B*D*E;n=T-M-w*D*E;p=O-L-u*D*E;r=P-N-B*D*E;s=Q-M-w*D*E;if((w*(r*f-k*p)+(u*(k*s-n*r)+B*(n*p-s*f))>0.0?(x=U-L-u*D*E,y=V-N-B*D*E,z=W-M-w*D*E,w*(y*p-r*x)+(u*(r*z-s*y)+B*(s*x-z*p))>0.0):0)?w*(k*x-y*f)+(u*(y*n-z*k)+B*(z*f-n*x))>0.0:0){q=E*E;p=u*D*E;n=w*D*E;m=B*D*E;break}if(t*t+A*A+v*v>1.1920928955078125e-007?(C=-((R-L)*t+(S-N)*A+(T-M)*v)/(t*t+A*A+v*v),C=C<0.0?0.0:C>1.0?1.0:C,q=(T-M+v*C)*(T-M+v*C)+((R-L+t*C)*(R-L+t*C)+(S-N+A*C)*(S-N+A*C)),q<34028234663852886.0e22):0){p=R-L+t*C;n=T-M+v*C;k=S-N+A*C}else{q=34028234663852886.0e22;p=0.0;n=0.0;k=0.0}f=(U-L-(O-L))*(U-L-(O-L))+(V-N-(P-N))*(V-N-(P-N))+(W-M-(Q-M))*(W-M-(Q-M));if(f>1.1920928955078125e-007?(H=-((O-L)*(U-L-(O-L))+(P-N)*(V-N-(P-N))+(Q-M)*(W-M-(Q-M)))/f,H=H<0.0?0.0:H>1.0?1.0:H,F=O-L+(U-L-(O-L))*H,I=P-N+(V-N-(P-N))*H,H=Q-M+(W-M-(Q-M))*H,H*H+(F*F+I*I)<q):0){q=H*H+(F*F+I*I);p=F;n=H;k=I}f=(R-L-(U-L))*(R-L-(U-L))+(S-N-(V-N))*(S-N-(V-N))+(T-M-(W-M))*(T-M-(W-M));if(f>1.1920928955078125e-007?(K=-((U-L)*(R-L-(U-L))+(V-N)*(S-N-(V-N))+(W-M)*(T-M-(W-M)))/f,K=K<0.0?0.0:K>1.0?1.0:K,J=U-L+(R-L-(U-L))*K,m=V-N+(S-N-(V-N))*K,K=W-M+(T-M-(W-M))*K,K*K+(J*J+m*m)<q):0){q=K*K+(J*J+m*m);p=J;n=K}else m=k}else{q=34028234663852886.0e22;p=0.0;n=0.0;m=0.0}while(0);J=L-+g[Z+24>>2];K=N-+g[Z+28>>2];u=M-+g[Z+32>>2];u=+g[b+12>>2]+ +G(+(J*J+K*K+u*u))*2.0;if(!(q<u*u))return;r=L+p;f=N+m;k=M+n;t=+G(+(((R-r)*(P-f)-(S-f)*(O-r))*((R-r)*(P-f)-(S-f)*(O-r))+(((S-f)*(Q-k)-(T-k)*(P-f))*((S-f)*(Q-k)-(T-k)*(P-f))+((T-k)*(O-r)-(R-r)*(Q-k))*((T-k)*(O-r)-(R-r)*(Q-k)))));s=+G(+(((O-r)*(V-f)-(P-f)*(U-r))*((O-r)*(V-f)-(P-f)*(U-r))+(((P-f)*(W-k)-(Q-k)*(V-f))*((P-f)*(W-k)-(Q-k)*(V-f))+((Q-k)*(U-r)-(O-r)*(W-k))*((Q-k)*(U-r)-(O-r)*(W-k)))));r=+G(+(((S-f)*(U-r)-(R-r)*(V-f))*((S-f)*(U-r)-(R-r)*(V-f))+(((T-k)*(V-f)-(S-f)*(W-k))*((T-k)*(V-f)-(S-f)*(W-k))+((R-r)*(W-k)-(T-k)*(U-r))*((R-r)*(W-k)-(T-k)*(U-r)))));k=+g[Z+88>>2];V=+g[h+88>>2];W=+g[d+88>>2];f=+g[e+88>>2];f=!(V<=0.0)&!(W<=0.0)&!(f<=0.0)?V*s*(1.0/(t+s+r))+W*r*(1.0/(t+s+r))+t*(1.0/(t+s+r))*f:0.0;if(!(k+f>0.0))return;W=1.0/-+G(+q);q=p*W;p=m*W;n=n*W;o=c[b+4>>2]|0;d=c[b+8>>2]|0;l=c[(+g[o+356>>2]>+g[d+356>>2]?o+356|0:d+356|0)>>2]|0;m=k/(k+f)*+g[o+372>>2];f=f/(k+f)*+g[d+372>>2];d=c[o+872>>2]|0;if((d|0)==(c[o+876>>2]|0)?(Y=d|0?d<<1:1,(d|0)<(Y|0)):0){if(!Y)j=0;else{c[6324]=(c[6324]|0)+1;d=ic((Y*56|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}j=d;d=c[o+872>>2]|0}if((d|0)>0){e=0;do{h=j+(e*56|0)|0;b=(c[o+880>>2]|0)+(e*56|0)|0;i=h+56|0;do{c[h>>2]=c[b>>2];h=h+4|0;b=b+4|0}while((h|0)<(i|0));e=e+1|0}while((e|0)!=(d|0))}d=c[o+880>>2]|0;if(d|0){if(a[o+884>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[o+880>>2]=0}a[o+884>>0]=1;c[o+880>>2]=j;c[o+876>>2]=Y;d=c[o+872>>2]|0}Y=c[o+880>>2]|0;c[Y+(d*56|0)>>2]=Z;c[Y+(d*56|0)+4>>2]=X;g[Y+(d*56|0)+8>>2]=s*(1.0/(t+s+r));g[Y+(d*56|0)+12>>2]=r*(1.0/(t+s+r));g[Y+(d*56|0)+16>>2]=t*(1.0/(t+s+r));g[Y+(d*56|0)+20>>2]=0.0;g[Y+(d*56|0)+24>>2]=q;g[Y+(d*56|0)+28>>2]=p;g[Y+(d*56|0)+32>>2]=n;g[Y+(d*56|0)+36>>2]=0.0;g[Y+(d*56|0)+40>>2]=u;c[Y+(d*56|0)+44>>2]=l;g[Y+(d*56|0)+48>>2]=m;g[Y+(d*56|0)+52>>2]=f;c[o+872>>2]=(c[o+872>>2]|0)+1;return}function kd(d,e){d=d|0;e=e|0;var f=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=i;i=i+64|0;g[d+20>>2]=+h[e+32>>3];g[d+24>>2]=+h[e+40>>3];g[d+28>>2]=+h[e+48>>3];g[d+32>>2]=+h[e+56>>3];g[d+4>>2]=+h[e>>3];g[d+8>>2]=+h[e+8>>3];g[d+12>>2]=+h[e+16>>3];g[d+16>>2]=+h[e+24>>3];g[d+36>>2]=+h[e+64>>3];g[d+40>>2]=+h[e+72>>3];g[d+44>>2]=+h[e+80>>3];g[d+48>>2]=+h[e+88>>3];c[d+56>>2]=c[e+96>>2];a[d+60>>0]=(c[e+100>>2]|0)!=0&1;p=c[e+104>>2]|0;l=q;n=l+64|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(n|0));o=c[d+88>>2]|0;if((o|0)<(p|0)){if((c[d+92>>2]|0)<(p|0)){if(!p){f=0;k=o}else{c[6324]=(c[6324]|0)+1;f=ic(p<<6|19)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}k=c[d+88>>2]|0}if((k|0)>0){j=0;do{l=f+(j<<6)|0;m=(c[d+96>>2]|0)+(j<<6)|0;n=l+64|0;do{c[l>>2]=c[m>>2];l=l+4|0;m=m+4|0}while((l|0)<(n|0));j=j+1|0}while((j|0)!=(k|0))}j=c[d+96>>2]|0;if(j|0){if(a[d+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[d+96>>2]=0}a[d+100>>0]=1;c[d+96>>2]=f;c[d+92>>2]=p;j=d+96|0}else j=d+96|0;f=o;do{l=(c[j>>2]|0)+(f<<6)|0;m=q;n=l+64|0;do{c[l>>2]=c[m>>2];l=l+4|0;m=m+4|0}while((l|0)<(n|0));f=f+1|0}while((f|0)!=(p|0))}c[d+88>>2]=p;if((p|0)>0){k=c[d+96>>2]|0;f=c[e+112>>2]|0;j=0;while(1){g[k+(j<<6)+16>>2]=+h[f+32>>3];g[k+(j<<6)+20>>2]=+h[f+40>>3];g[k+(j<<6)+24>>2]=+h[f+48>>3];g[k+(j<<6)+28>>2]=+h[f+56>>3];g[k+(j<<6)>>2]=+h[f>>3];g[k+(j<<6)+4>>2]=+h[f+8>>3];g[k+(j<<6)+8>>2]=+h[f+16>>3];g[k+(j<<6)+12>>2]=+h[f+24>>3];c[k+(j<<6)+32>>2]=c[f+64>>2];c[k+(j<<6)+36>>2]=c[f+68>>2];c[k+(j<<6)+40>>2]=c[f+72>>2];j=j+1|0;if((j|0)==(p|0))break;else f=f+80|0}}m=c[e+108>>2]|0;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;l=c[d+128>>2]|0;if((l|0)<(m|0)){if((c[d+132>>2]|0)<(m|0)){if(!m){f=0;k=l}else{c[6324]=(c[6324]|0)+1;f=ic((m<<4|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}k=c[d+128>>2]|0}if((k|0)>0){j=0;do{p=f+(j<<4)|0;o=(c[d+136>>2]|0)+(j<<4)|0;c[p>>2]=c[o>>2];c[p+4>>2]=c[o+4>>2];c[p+8>>2]=c[o+8>>2];c[p+12>>2]=c[o+12>>2];j=j+1|0}while((j|0)!=(k|0))}j=c[d+136>>2]|0;if(j|0){if(a[d+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[d+136>>2]=0}a[d+140>>0]=1;c[d+136>>2]=f;c[d+132>>2]=m;j=d+136|0}else j=d+136|0;f=l;do{p=(c[j>>2]|0)+(f<<4)|0;c[p>>2]=c[q>>2];c[p+4>>2]=c[q+4>>2];c[p+8>>2]=c[q+8>>2];c[p+12>>2]=c[q+12>>2];f=f+1|0}while((f|0)!=(m|0))}c[d+128>>2]=m;if((m|0)>0){k=c[d+136>>2]|0;f=0;j=c[e+116>>2]|0;while(1){c[k+(f<<4)+12>>2]=c[j+12>>2];b[k+(f<<4)+6>>1]=b[j+6>>1]|0;b[k+(f<<4)+8>>1]=b[j+8>>1]|0;b[k+(f<<4)+10>>1]=b[j+10>>1]|0;b[k+(f<<4)>>1]=b[j>>1]|0;b[k+(f<<4)+2>>1]=b[j+2>>1]|0;b[k+(f<<4)+4>>1]=b[j+4>>1]|0;f=f+1|0;if((f|0)==(m|0))break;else j=j+16|0}}c[d+144>>2]=c[e+120>>2];m=c[e+124>>2]|0;l=c[d+152>>2]|0;if((l|0)<(m|0)){if((c[d+156>>2]|0)<(m|0)){if(!m){f=0;k=l}else{c[6324]=(c[6324]|0)+1;f=ic(m<<5|19)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}k=c[d+152>>2]|0}if((k|0)>0){j=0;do{p=f+(j<<5)|0;o=(c[d+160>>2]|0)+(j<<5)|0;c[p>>2]=c[o>>2];c[p+4>>2]=c[o+4>>2];c[p+8>>2]=c[o+8>>2];c[p+12>>2]=c[o+12>>2];c[p+16>>2]=c[o+16>>2];c[p+20>>2]=c[o+20>>2];c[p+24>>2]=c[o+24>>2];c[p+28>>2]=c[o+28>>2];j=j+1|0}while((j|0)!=(k|0))}j=c[d+160>>2]|0;if(j|0){if(a[d+164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=f;c[d+156>>2]=m;j=d+160|0}else j=d+160|0;f=l;do{p=(c[j>>2]|0)+(f<<5)|0;c[p>>2]=c[q>>2];c[p+4>>2]=c[q+4>>2];c[p+8>>2]=c[q+8>>2];c[p+12>>2]=c[q+12>>2];c[p+16>>2]=c[q+16>>2];c[p+20>>2]=c[q+20>>2];c[p+24>>2]=c[q+24>>2];c[p+28>>2]=c[q+28>>2];f=f+1|0}while((f|0)!=(m|0))}c[d+152>>2]=m;if((m|0)<=0){i=q;return}k=c[d+160>>2]|0;j=0;f=c[e+128>>2]|0;while(1){b[k+(j<<5)+6>>1]=b[f+14>>1]|0;b[k+(j<<5)+8>>1]=b[f+16>>1]|0;b[k+(j<<5)+10>>1]=b[f+18>>1]|0;b[k+(j<<5)>>1]=b[f+8>>1]|0;b[k+(j<<5)+2>>1]=b[f+10>>1]|0;b[k+(j<<5)+4>>1]=b[f+12>>1]|0;c[k+(j<<5)+12>>2]=c[f>>2];c[k+(j<<5)+16>>2]=c[f+4>>2];j=j+1|0;if((j|0)==(m|0))break;else f=f+20|0}i=q;return}function ld(d,e){d=d|0;e=+e;var f=0.0,h=0,j=0.0,k=0.0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0,t=0.0;s=i;i=i+304|0;a:do if((c[d+232>>2]|0)>0){l=s+232+48|0;h=0;while(1){m=c[(c[d+240>>2]|0)+(h<<2)>>2]|0;g[m+264>>2]=1.0;b:do switch(c[m+216>>2]|0){case 2:case 5:break;default:if(!(c[m+204>>2]&3)){Mg(m+4|0,+g[m+352>>2],+g[m+356>>2],+g[m+360>>2],m+368|0,e,s+232|0);f=+g[l>>2]-+g[m+52>>2];j=+g[s+232+52>>2]-+g[m+56>>2];k=+g[s+232+56>>2]-+g[m+60>>2];do if((a[d+44>>0]|0?(t=+g[m+272>>2],t*t!=0.0?t*t<f*f+j*j+k*k:0):0)?(c[(c[m+192>>2]|0)+4>>2]|0)<20:0){c[5872]=(c[5872]|0)+1;o=c[d+68>>2]|0;o=ob[c[(c[o>>2]|0)+36>>2]&127](o)|0;p=c[d+24>>2]|0;g[s+136+4>>2]=1.0;b[s+136+8>>1]=1;b[s+136+10>>1]=-1;c[s+136+12>>2]=c[m+52>>2];c[s+136+12+4>>2]=c[m+52+4>>2];c[s+136+12+8>>2]=c[m+52+8>>2];c[s+136+12+12>>2]=c[m+52+12>>2];c[s+136+28>>2]=c[l>>2];c[s+136+28+4>>2]=c[l+4>>2];c[s+136+28+8>>2]=c[l+8>>2];c[s+136+28+12>>2]=c[l+12>>2];c[s+136+76>>2]=0;c[s+136>>2]=4872;c[s+136+80>>2]=m;c[s+136+88>>2]=o;c[s+136+92>>2]=p;p=c[m+268>>2]|0;c[s+80+8>>2]=0;c[s+80+12>>2]=-1;c[s+80+16>>2]=1065353216;c[s+80+20>>2]=1065353216;c[s+80+24>>2]=1065353216;g[s+80+28>>2]=0.0;c[s+80>>2]=8368;c[s+80+4>>2]=8;c[s+80+32>>2]=p;c[s+80+48>>2]=p;c[s+136+84>>2]=c[d+56>>2];p=c[(c[m+188>>2]|0)+4>>2]|0;b[s+136+8>>1]=p;b[s+136+10>>1]=p>>>16;c[s+16+48>>2]=c[l>>2];c[s+16+48+4>>2]=c[l+4>>2];c[s+16+48+8>>2]=c[l+8>>2];c[s+16+48+12>>2]=c[l+12>>2];c[s+16>>2]=c[m+4>>2];c[s+16+4>>2]=c[m+4+4>>2];c[s+16+8>>2]=c[m+4+8>>2];c[s+16+12>>2]=c[m+4+12>>2];c[s+16+16>>2]=c[m+20>>2];c[s+16+16+4>>2]=c[m+20+4>>2];c[s+16+16+8>>2]=c[m+20+8>>2];c[s+16+16+12>>2]=c[m+20+12>>2];c[s+16+32>>2]=c[m+36>>2];c[s+16+32+4>>2]=c[m+36+4>>2];c[s+16+32+8>>2]=c[m+36+8>>2];c[s+16+32+12>>2]=c[m+36+12>>2];Hd(d,s+80|0,m+4|0,s+16|0,s+136|0,0.0);f=+g[s+136+4>>2];if(f<1.0){g[m+264>>2]=f;Mg(m+4|0,+g[m+352>>2],+g[m+356>>2],+g[m+360>>2],m+368|0,f*e,s+232|0);g[m+264>>2]=0.0;Be(m,s+232|0);break b}else break}while(0);Be(m,s+232|0)}}while(0);h=h+1|0;if((h|0)>=(c[d+232>>2]|0))break a}}while(0);if(!(a[d+275>>0]|0)){i=s;return}if((c[d+308>>2]|0)<=0){i=s;return}o=0;do{p=c[(c[d+316>>2]|0)+(o<<2)>>2]|0;l=c[p+772>>2]|0;l=(c[l+248>>2]&2|0)==0?0:l;n=c[p+776>>2]|0;n=(c[n+248>>2]&2|0)==0?0:n;h=c[p+780>>2]|0;if((h|0)>0)if(!l){l=0;do{f=+g[57]*+g[n+228>>2];if(f>0.0?(q=+g[p+4+(l*192|0)+124>>2],q!=0.0):0){k=f*+g[p+4+(l*192|0)+64>>2]*q;e=f*+g[p+4+(l*192|0)+68>>2]*q;t=f*+g[p+4+(l*192|0)+72>>2]*q;f=+g[p+4+(l*192|0)+36>>2]-+g[n+56>>2];j=+g[p+4+(l*192|0)+40>>2]-+g[n+60>>2];g[s+16>>2]=+g[p+4+(l*192|0)+32>>2]-+g[n+52>>2];g[s+16+4>>2]=f;g[s+16+8>>2]=j;g[s+16+12>>2]=0.0;g[s>>2]=k;g[s+4>>2]=e;g[s+8>>2]=t;g[s+12>>2]=0.0;Xi(n,s,s+16|0);h=c[p+780>>2]|0}l=l+1|0}while((l|0)<(h|0))}else{m=0;do{f=+g[l+228>>2]*+g[n+228>>2];if(f>0.0?(r=+g[p+4+(m*192|0)+124>>2],r!=0.0):0){k=f*+g[p+4+(m*192|0)+64>>2]*r;e=f*+g[p+4+(m*192|0)+68>>2]*r;t=f*+g[p+4+(m*192|0)+72>>2]*r;g[s+136>>2]=-k;g[s+136+4>>2]=-e;g[s+136+8>>2]=-t;g[s+136+12>>2]=0.0;j=+g[p+4+(m*192|0)+52>>2]-+g[l+56>>2];f=+g[p+4+(m*192|0)+56>>2]-+g[l+60>>2];g[s+80>>2]=+g[p+4+(m*192|0)+48>>2]-+g[l+52>>2];g[s+80+4>>2]=j;g[s+80+8>>2]=f;g[s+80+12>>2]=0.0;f=+g[p+4+(m*192|0)+36>>2]-+g[n+56>>2];j=+g[p+4+(m*192|0)+40>>2]-+g[n+60>>2];g[s+16>>2]=+g[p+4+(m*192|0)+32>>2]-+g[n+52>>2];g[s+16+4>>2]=f;g[s+16+8>>2]=j;g[s+16+12>>2]=0.0;Xi(l,s+136|0,s+80|0);g[s>>2]=k;g[s+4>>2]=e;g[s+8>>2]=t;g[s+12>>2]=0.0;Xi(n,s,s+16|0);h=c[p+780>>2]|0}m=m+1|0}while((m|0)<(h|0))}o=o+1|0}while((o|0)<(c[d+308>>2]|0));i=s;return}function md(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;o=i;i=i+64|0;c[d+20>>2]=c[e+16>>2];c[d+24>>2]=c[e+20>>2];c[d+28>>2]=c[e+24>>2];c[d+32>>2]=c[e+28>>2];c[d+4>>2]=c[e>>2];c[d+8>>2]=c[e+4>>2];c[d+12>>2]=c[e+8>>2];c[d+16>>2]=c[e+12>>2];c[d+36>>2]=c[e+32>>2];c[d+40>>2]=c[e+36>>2];c[d+44>>2]=c[e+40>>2];c[d+48>>2]=c[e+44>>2];c[d+56>>2]=c[e+48>>2];a[d+60>>0]=(c[e+52>>2]|0)!=0&1;n=c[e+56>>2]|0;j=o;l=j+64|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(l|0));m=c[d+88>>2]|0;if((m|0)<(n|0)){if((c[d+92>>2]|0)<(n|0)){if(!n){f=0;h=m}else{c[6324]=(c[6324]|0)+1;f=ic(n<<6|19)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[d+88>>2]|0}if((h|0)>0){g=0;do{j=f+(g<<6)|0;k=(c[d+96>>2]|0)+(g<<6)|0;l=j+64|0;do{c[j>>2]=c[k>>2];j=j+4|0;k=k+4|0}while((j|0)<(l|0));g=g+1|0}while((g|0)!=(h|0))}g=c[d+96>>2]|0;if(g|0){if(a[d+100>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}c[d+96>>2]=0}a[d+100>>0]=1;c[d+96>>2]=f;c[d+92>>2]=n;g=d+96|0}else g=d+96|0;f=m;do{j=(c[g>>2]|0)+(f<<6)|0;k=o;l=j+64|0;do{c[j>>2]=c[k>>2];j=j+4|0;k=k+4|0}while((j|0)<(l|0));f=f+1|0}while((f|0)!=(n|0))}c[d+88>>2]=n;if((n|0)>0){h=c[d+96>>2]|0;f=c[e+64>>2]|0;g=0;while(1){c[h+(g<<6)+16>>2]=c[f+16>>2];c[h+(g<<6)+20>>2]=c[f+20>>2];c[h+(g<<6)+24>>2]=c[f+24>>2];c[h+(g<<6)+28>>2]=c[f+28>>2];c[h+(g<<6)>>2]=c[f>>2];c[h+(g<<6)+4>>2]=c[f+4>>2];c[h+(g<<6)+8>>2]=c[f+8>>2];c[h+(g<<6)+12>>2]=c[f+12>>2];c[h+(g<<6)+32>>2]=c[f+32>>2];c[h+(g<<6)+36>>2]=c[f+36>>2];c[h+(g<<6)+40>>2]=c[f+40>>2];g=g+1|0;if((g|0)==(n|0))break;else f=f+48|0}}k=c[e+60>>2]|0;c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;j=c[d+128>>2]|0;if((j|0)<(k|0)){if((c[d+132>>2]|0)<(k|0)){if(!k){f=0;h=j}else{c[6324]=(c[6324]|0)+1;f=ic((k<<4|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[d+128>>2]|0}if((h|0)>0){g=0;do{n=f+(g<<4)|0;m=(c[d+136>>2]|0)+(g<<4)|0;c[n>>2]=c[m>>2];c[n+4>>2]=c[m+4>>2];c[n+8>>2]=c[m+8>>2];c[n+12>>2]=c[m+12>>2];g=g+1|0}while((g|0)!=(h|0))}g=c[d+136>>2]|0;if(g|0){if(a[d+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}c[d+136>>2]=0}a[d+140>>0]=1;c[d+136>>2]=f;c[d+132>>2]=k;g=d+136|0}else g=d+136|0;f=j;do{n=(c[g>>2]|0)+(f<<4)|0;c[n>>2]=c[o>>2];c[n+4>>2]=c[o+4>>2];c[n+8>>2]=c[o+8>>2];c[n+12>>2]=c[o+12>>2];f=f+1|0}while((f|0)!=(k|0))}c[d+128>>2]=k;if((k|0)>0){h=c[d+136>>2]|0;f=0;g=c[e+68>>2]|0;while(1){c[h+(f<<4)+12>>2]=c[g+12>>2];b[h+(f<<4)+6>>1]=b[g+6>>1]|0;b[h+(f<<4)+8>>1]=b[g+8>>1]|0;b[h+(f<<4)+10>>1]=b[g+10>>1]|0;b[h+(f<<4)>>1]=b[g>>1]|0;b[h+(f<<4)+2>>1]=b[g+2>>1]|0;b[h+(f<<4)+4>>1]=b[g+4>>1]|0;f=f+1|0;if((f|0)==(k|0))break;else g=g+16|0}}c[d+144>>2]=c[e+76>>2];k=c[e+80>>2]|0;j=c[d+152>>2]|0;if((j|0)<(k|0)){if((c[d+156>>2]|0)<(k|0)){if(!k){f=0;h=j}else{c[6324]=(c[6324]|0)+1;f=ic(k<<5|19)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[d+152>>2]|0}if((h|0)>0){g=0;do{n=f+(g<<5)|0;m=(c[d+160>>2]|0)+(g<<5)|0;c[n>>2]=c[m>>2];c[n+4>>2]=c[m+4>>2];c[n+8>>2]=c[m+8>>2];c[n+12>>2]=c[m+12>>2];c[n+16>>2]=c[m+16>>2];c[n+20>>2]=c[m+20>>2];c[n+24>>2]=c[m+24>>2];c[n+28>>2]=c[m+28>>2];g=g+1|0}while((g|0)!=(h|0))}g=c[d+160>>2]|0;if(g|0){if(a[d+164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=f;c[d+156>>2]=k;g=d+160|0}else g=d+160|0;f=j;do{n=(c[g>>2]|0)+(f<<5)|0;c[n>>2]=c[o>>2];c[n+4>>2]=c[o+4>>2];c[n+8>>2]=c[o+8>>2];c[n+12>>2]=c[o+12>>2];c[n+16>>2]=c[o+16>>2];c[n+20>>2]=c[o+20>>2];c[n+24>>2]=c[o+24>>2];c[n+28>>2]=c[o+28>>2];f=f+1|0}while((f|0)!=(k|0))}c[d+152>>2]=k;if((k|0)<=0){i=o;return}h=c[d+160>>2]|0;g=0;f=c[e+72>>2]|0;while(1){b[h+(g<<5)+6>>1]=b[f+14>>1]|0;b[h+(g<<5)+8>>1]=b[f+16>>1]|0;b[h+(g<<5)+10>>1]=b[f+18>>1]|0;b[h+(g<<5)>>1]=b[f+8>>1]|0;b[h+(g<<5)+2>>1]=b[f+10>>1]|0;b[h+(g<<5)+4>>1]=b[f+12>>1]|0;c[h+(g<<5)+12>>2]=c[f>>2];c[h+(g<<5)+16>>2]=c[f+4>>2];g=g+1|0;if((g|0)==(k|0))break;else f=f+20|0}i=o;return}function nd(b,d,e,f,h,i,j,k,l,m,n,o,p){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;var q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0;A=S(c[l+24>>2]|0,m)|0;m=a[d+44>>0]|0;z=c[d+56>>2]|0;if(!(m<<24>>24!=0|(z|0)!=0)){A=0;return A|0}C=c[(o|0?l+12|0:l+8|0)>>2]|0;B=c[(o|0?l+20|0:l+16|0)>>2]|0;c[C+(A<<2)>>2]=c[n>>2];c[C+(A+1<<2)>>2]=c[n+4>>2];c[C+(A+2<<2)>>2]=c[n+8>>2];g[B+(A<<2)>>2]=-+g[n>>2];g[B+(A+1<<2)>>2]=-+g[n+4>>2];g[B+(A+2<<2)>>2]=-+g[n+8>>2];do if(!o){q=+g[b+1176>>2];if(!(a[b+1301>>0]|0)){t=q-+g[e+48>>2];w=+g[b+1180>>2]-+g[e+52>>2];x=+g[b+1184>>2]-+g[e+56>>2];v=+g[n+8>>2];s=+g[n+4>>2];u=+g[n>>2];C=c[l+12>>2]|0;g[C+(A<<2)>>2]=w*v-x*s;g[C+(A+1<<2)>>2]=x*u-t*v;g[C+(A+2<<2)>>2]=t*s-w*u;u=+g[b+1176>>2]-+g[f+48>>2];w=+g[b+1180>>2]-+g[f+52>>2];s=+g[b+1184>>2]-+g[f+56>>2];t=+g[n+8>>2];v=+g[n+4>>2];x=+g[n>>2];C=c[l+20>>2]|0;g[C+(A<<2)>>2]=-(w*t-s*v);g[C+(A+1<<2)>>2]=-(s*x-u*t);g[C+(A+2<<2)>>2]=-(u*v-w*x);break}I=q-+g[f+48>>2];H=+g[b+1180>>2]-+g[f+52>>2];F=+g[b+1184>>2]-+g[f+56>>2];q=+g[n>>2];G=+g[n+4>>2];E=+g[n+8>>2];K=+g[b+1112>>2]-+g[e+48>>2];s=+g[b+1116>>2]-+g[e+52>>2];t=+g[b+1120>>2]-+g[e+56>>2];r=+g[d+52>>2]-+g[d+48>>2];J=q*(q*K+G*s+E*t)+q*r-q*(I*q+H*G+F*E);D=G*(q*K+G*s+E*t)+G*r-G*(I*q+H*G+F*E);r=E*(q*K+G*s+E*t)+E*r-E*(I*q+H*G+F*E);w=+g[b+1272>>2];x=+g[b+1276>>2];u=E*(s-G*(q*K+G*s+E*t)+w*D)-G*(t-E*(q*K+G*s+E*t)+w*r);v=q*(t-E*(q*K+G*s+E*t)+w*r)-E*(K-q*(q*K+G*s+E*t)+w*J);t=G*(K-q*(q*K+G*s+E*t)+w*J)-q*(s-G*(q*K+G*s+E*t)+w*D);s=(H-G*(I*q+H*G+F*E)-x*D)*E-(F-E*(I*q+H*G+F*E)-x*r)*G;r=(F-E*(I*q+H*G+F*E)-x*r)*q-(I-q*(I*q+H*G+F*E)-x*J)*E;q=(I-q*(I*q+H*G+F*E)-x*J)*G-(H-G*(I*q+H*G+F*E)-x*D)*q;if(!((p|0)!=0|(a[b+1280>>0]|0)==0)){u=w*u;v=w*v;t=w*t;s=x*s;r=x*r;q=x*q}C=(c[l+12>>2]|0)+(A<<2)|0;g[C>>2]=u;g[C+4>>2]=v;g[C+8>>2]=t;C=c[l+20>>2]|0;g[C+(A<<2)>>2]=-s;g[C+(A+1<<2)>>2]=-r;g[C+(A+2<<2)>>2]=-q}while(0);if(z|0?+g[d>>2]==+g[d+4>>2]:0){m=c[l+28>>2]|0;g[m+(A<<2)>>2]=0.0;q=0.0;e=l+28|0}else y=11;do if((y|0)==11){e=c[l+28>>2]|0;g[e+(A<<2)>>2]=0.0;if(!(m<<24>>24)){if(z|0){m=e;q=0.0;e=l+28|0;break}else m=1;return m|0}c[(c[l+32>>2]|0)+(A<<2)>>2]=c[d+28>>2];if(z|0){m=e;q=+g[e+(A<<2)>>2];e=l+28|0;break}v=+g[d+8>>2];q=o|0?v:-v;r=+g[d+52>>2];s=+g[d>>2];t=+g[d+4>>2];u=+g[l>>2]*+g[d+32>>2];do if(!(s>t))if(!(s==t)){if(q/u<0.0)if(r>=s?s-q/u>r:0){q=(s-r)/(q/u);break}else{q=r<s?0.0:1.0;break}if(q/u>0.0)if(r<=t?t-q/u<r:0){q=(t-r)/(q/u);break}else{q=r>t?0.0:1.0;break}else q=0.0}else q=0.0;else q=1.0;while(0);g[e+(A<<2)>>2]=q*v+ +g[e+(A<<2)>>2];g[(c[l+36>>2]|0)+(A<<2)>>2]=-+g[d+12>>2];c[(c[l+40>>2]|0)+(A<<2)>>2]=c[d+12>>2];C=1;return C|0}while(0);K=+g[l>>2]*+g[d+32>>2]*+g[d+48>>2];g[m+(A<<2)>>2]=q+(o|0?-K:K);c[(c[l+32>>2]|0)+(A<<2)>>2]=c[d+36>>2];if(+g[d>>2]==+g[d+4>>2]){g[(c[l+36>>2]|0)+(A<<2)>>2]=-34028234663852886.0e22;g[(c[l+40>>2]|0)+(A<<2)>>2]=34028234663852886.0e22;C=1;return C|0}C=c[l+40>>2]|0;g[(c[l+36>>2]|0)+(A<<2)>>2]=(z|0)==1?0.0:-34028234663852886.0e22;g[C+(A<<2)>>2]=(z|0)==1?34028234663852886.0e22:0.0;r=+g[d+40>>2];if(!(r>0.0)){C=1;return C|0}if(o|0){J=+g[n>>2];K=+g[n+4>>2];q=+g[n+8>>2];q=+g[j>>2]*J+ +g[j+4>>2]*K+ +g[j+8>>2]*q-(J*+g[k>>2]+K*+g[k+4>>2]+q*+g[k+8>>2])}else{J=+g[n>>2];K=+g[n+4>>2];q=+g[n+8>>2];q=+g[h>>2]*J+ +g[h+4>>2]*K+ +g[h+8>>2]*q-(J*+g[i>>2]+K*+g[i+4>>2]+q*+g[i+8>>2])}if((z|0)==1){if(!(q<0.0)){C=1;return C|0}q=-(q*r);m=(c[e>>2]|0)+(A<<2)|0;if(!(+g[m>>2]<q)){C=1;return C|0}g[m>>2]=q;C=1;return C|0}else{if(!(q>0.0)){C=1;return C|0}q=-(q*r);m=(c[e>>2]|0)+(A<<2)|0;if(!(+g[m>>2]>q)){C=1;return C|0}g[m>>2]=q;C=1;return C|0}return 0}function od(a,d,f,h,j,k,l,m,n){a=a|0;d=d|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=i;i=i+16|0;lj(a,v+6|0,+g[d>>2],+g[d+4>>2],+g[d+8>>2],0);lj(a,v,+g[f>>2],+g[f+4>>2],+g[f+8>>2],1);u=b[a+64>>1]|0;t=c[a+60>>2]|0;b[a+64>>1]=b[t+((u&65535)<<6)+48>>1]|0;o=(b[a+56>>1]|0)+1<<16>>16;b[a+56>>1]=o;c[t+((u&65535)<<6)+12>>2]=u&65535;c[t+((u&65535)<<6)>>2]=j;b[t+((u&65535)<<6)+4>>1]=k;b[t+((u&65535)<<6)+6>>1]=l;c[t+((u&65535)<<6)+8>>2]=n;p=(o&65535)<<1&65534;b[t+54>>1]=(e[t+54>>1]|0)+2;q=c[a+68>>2]|0;r=e[q+(p+-1<<2)>>1]|e[q+(p+-1<<2)+2>>1]<<16;b[q+((p|1)<<2)>>1]=r;b[q+((p|1)<<2)+2>>1]=r>>>16;q=c[a+68>>2]|0;b[q+(p+-1<<2)>>1]=b[v+6>>1]|0;b[q+(p+-1<<2)+2>>1]=u;b[q+(p<<2)>>1]=b[v>>1]|0;b[q+(p<<2)+2>>1]=u;b[t+((u&65535)<<6)+48>>1]=p+-1;b[t+((u&65535)<<6)+54>>1]=(o&65535)<<1;q=(c[a+60>>2]|0)+56|0;b[q>>1]=(e[q>>1]|0)+2;q=c[a+72>>2]|0;r=e[q+(p+-1<<2)>>1]|e[q+(p+-1<<2)+2>>1]<<16;b[q+((p|1)<<2)>>1]=r;b[q+((p|1)<<2)+2>>1]=r>>>16;q=c[a+72>>2]|0;b[q+(p+-1<<2)>>1]=b[v+6+2>>1]|0;b[q+(p+-1<<2)+2>>1]=u;b[q+(p<<2)>>1]=b[v+2>>1]|0;b[q+(p<<2)+2>>1]=u;b[t+((u&65535)<<6)+50>>1]=p+-1;b[t+((u&65535)<<6)+56>>1]=(o&65535)<<1;q=(c[a+60>>2]|0)+58|0;b[q>>1]=(e[q>>1]|0)+2;q=c[a+76>>2]|0;r=e[q+(p+-1<<2)>>1]|e[q+(p+-1<<2)+2>>1]<<16;b[q+((p|1)<<2)>>1]=r;b[q+((p|1)<<2)+2>>1]=r>>>16;q=c[a+76>>2]|0;b[q+(p+-1<<2)>>1]=b[v+6+4>>1]|0;b[q+(p+-1<<2)+2>>1]=u;b[q+(p<<2)>>1]=b[v+4>>1]|0;b[q+(p<<2)+2>>1]=u;b[t+((u&65535)<<6)+52>>1]=p+-1;b[t+((u&65535)<<6)+58>>1]=(o&65535)<<1;o=c[a+68>>2]|0;p=e[t+((u&65535)<<6)+48>>1]|0;q=c[a+60>>2]|0;r=b[o+(p<<2)+-4>>1]|0;if((e[o+(p<<2)>>1]|0)<(r&65535)){s=q+((e[o+(p<<2)+2>>1]|0)<<6)+48|0;n=o+(p<<2)+-4|0;o=o+(p<<2)|0;while(1){p=e[o+-2>>1]|0;if(!(r&1)){r=q+(p<<6)+48|0;b[r>>1]=(b[r>>1]|0)+1<<16>>16}else{r=q+(p<<6)+54|0;b[r>>1]=(b[r>>1]|0)+1<<16>>16}b[s>>1]=(b[s>>1]|0)+-1<<16>>16;p=e[o>>1]|e[o+2>>1]<<16;r=e[n>>1]|e[n+2>>1]<<16;b[o>>1]=r;b[o+2>>1]=r>>>16;b[n>>1]=p;b[n+2>>1]=p>>>16;o=o+-4|0;n=n+-4|0;p=b[n>>1]|0;if((e[o>>1]|0)>=(p&65535))break;r=p;q=c[a+60>>2]|0}o=c[a+68>>2]|0}n=e[t+((u&65535)<<6)+54>>1]|0;p=o+(n<<2)|0;q=b[p+-4>>1]|0;a:do if((e[p>>1]|0)<(q&65535)){r=c[a+60>>2]|0;s=r+((e[o+(n<<2)+2>>1]|0)<<6)+54|0;n=p+-4|0;o=p;while(1){p=e[o+-2>>1]|0;if(!(q&1)){r=r+(p<<6)+48|0;b[r>>1]=(b[r>>1]|0)+1<<16>>16}else{r=r+(p<<6)+54|0;b[r>>1]=(b[r>>1]|0)+1<<16>>16}b[s>>1]=(b[s>>1]|0)+-1<<16>>16;q=e[o>>1]|e[o+2>>1]<<16;r=e[n>>1]|e[n+2>>1]<<16;b[o>>1]=r;b[o+2>>1]=r>>>16;b[n>>1]=q;b[n+2>>1]=q>>>16;o=o+-4|0;n=n+-4|0;q=b[n>>1]|0;if((e[o>>1]|0)>=(q&65535))break a;r=c[a+60>>2]|0}}while(0);o=c[a+72>>2]|0;p=e[t+((u&65535)<<6)+50>>1]|0;q=c[a+60>>2]|0;r=b[o+(p<<2)+-4>>1]|0;if((e[o+(p<<2)>>1]|0)<(r&65535)){s=q+((e[o+(p<<2)+2>>1]|0)<<6)+50|0;n=o+(p<<2)+-4|0;o=o+(p<<2)|0;while(1){p=e[o+-2>>1]|0;if(!(r&1)){r=q+(p<<6)+50|0;b[r>>1]=(b[r>>1]|0)+1<<16>>16}else{r=q+(p<<6)+56|0;b[r>>1]=(b[r>>1]|0)+1<<16>>16}b[s>>1]=(b[s>>1]|0)+-1<<16>>16;p=e[o>>1]|e[o+2>>1]<<16;r=e[n>>1]|e[n+2>>1]<<16;b[o>>1]=r;b[o+2>>1]=r>>>16;b[n>>1]=p;b[n+2>>1]=p>>>16;o=o+-4|0;n=n+-4|0;p=b[n>>1]|0;if((e[o>>1]|0)>=(p&65535))break;r=p;q=c[a+60>>2]|0}o=c[a+72>>2]|0}n=e[t+((u&65535)<<6)+56>>1]|0;p=o+(n<<2)|0;q=b[p+-4>>1]|0;b:do if((e[p>>1]|0)<(q&65535)){r=c[a+60>>2]|0;s=r+((e[o+(n<<2)+2>>1]|0)<<6)+56|0;n=p+-4|0;o=p;while(1){p=e[o+-2>>1]|0;if(!(q&1)){r=r+(p<<6)+50|0;b[r>>1]=(b[r>>1]|0)+1<<16>>16}else{r=r+(p<<6)+56|0;b[r>>1]=(b[r>>1]|0)+1<<16>>16}b[s>>1]=(b[s>>1]|0)+-1<<16>>16;q=e[o>>1]|e[o+2>>1]<<16;r=e[n>>1]|e[n+2>>1]<<16;b[o>>1]=r;b[o+2>>1]=r>>>16;b[n>>1]=q;b[n+2>>1]=q>>>16;o=o+-4|0;n=n+-4|0;q=b[n>>1]|0;if((e[o>>1]|0)>=(q&65535))break b;r=c[a+60>>2]|0}}while(0);ph(a,2,b[t+((u&65535)<<6)+52>>1]|0);ih(a,2,b[t+((u&65535)<<6)+58>>1]|0,m);o=c[a+60>>2]|0;n=c[a+108>>2]|0;if(!n){m=o+((u&65535)<<6)|0;i=v;return m|0}c[o+((u&65535)<<6)+60>>2]=Sb[c[(c[n>>2]|0)+8>>2]&3](n,d,f,h,j,k,l,m,0)|0;m=o+((u&65535)<<6)|0;i=v;return m|0}function pd(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0.0,m=0,n=0.0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0;u=i;i=i+288|0;q=c[b+4>>2]|0;a[q+312>>0]=0;c[q>>2]=0;a[q+356>>0]=1;c[q+292>>2]=1566444395;c[q+296>>2]=1566444395;c[q+300>>2]=1566444395;g[q+304>>2]=0.0;c[q+336>>2]=0;c[q+336+4>>2]=0;c[q+336+8>>2]=0;c[q+336+12>>2]=0;a[q+336+16>>0]=0;a[q+332>>0]=a[q+332>>0]&-16;r=+g[e+48>>2]-+g[d+48>>2]-(+g[h+48>>2]-+g[f+48>>2]);s=+g[e+52>>2]-+g[d+52>>2]-(+g[h+52>>2]-+g[f+52>>2]);t=+g[e+56>>2]-+g[d+56>>2]-(+g[h+56>>2]-+g[f+56>>2]);c[u+216>>2]=8756;g[u+216+36>>2]=999999984306749440.0;a[u+216+40>>0]=0;q=c[b+8>>2]|0;p=c[b+12>>2]|0;o=c[b+4>>2]|0;c[u+136>>2]=8848;c[u+136+4>>2]=0;c[u+136+8>>2]=1065353216;c[u+136+12>>2]=0;g[u+136+16>>2]=0.0;c[u+136+20>>2]=0;c[u+136+24>>2]=o;c[u+136+28>>2]=q;c[u+136+32>>2]=p;c[u+136+36>>2]=c[q+4>>2];c[u+136+40>>2]=c[p+4>>2];g[u+136+44>>2]=+Cb[c[(c[q>>2]|0)+48>>2]&15](q);g[u+136+48>>2]=+Cb[c[(c[p>>2]|0)+48>>2]&15](p);a[u+136+52>>0]=0;c[u+136+60>>2]=-1;c[u+136+72>>2]=1;c[u+136+76>>2]=1;g[u+128>>2]=999999984306749440.0;c[u>>2]=c[d>>2];c[u+4>>2]=c[d+4>>2];c[u+8>>2]=c[d+8>>2];c[u+12>>2]=c[d+12>>2];c[u+16>>2]=c[d+16>>2];c[u+16+4>>2]=c[d+16+4>>2];c[u+16+8>>2]=c[d+16+8>>2];c[u+16+12>>2]=c[d+16+12>>2];c[u+32>>2]=c[d+32>>2];c[u+32+4>>2]=c[d+32+4>>2];c[u+32+8>>2]=c[d+32+8>>2];c[u+32+12>>2]=c[d+32+12>>2];c[u+48>>2]=c[d+48>>2];c[u+48+4>>2]=c[d+48+4>>2];c[u+48+8>>2]=c[d+48+8>>2];c[u+48+12>>2]=c[d+48+12>>2];c[u+64>>2]=c[f>>2];c[u+64+4>>2]=c[f+4>>2];c[u+64+8>>2]=c[f+8>>2];c[u+64+12>>2]=c[f+12>>2];c[u+80>>2]=c[f+16>>2];c[u+80+4>>2]=c[f+16+4>>2];c[u+80+8>>2]=c[f+16+8>>2];c[u+80+12>>2]=c[f+16+12>>2];c[u+96>>2]=c[f+32>>2];c[u+96+4>>2]=c[f+32+4>>2];c[u+96+8>>2]=c[f+32+8>>2];c[u+96+12>>2]=c[f+32+12>>2];c[u+112>>2]=c[f+48>>2];c[u+112+4>>2]=c[f+48+4>>2];c[u+112+8>>2]=c[f+48+8>>2];c[u+112+12>>2]=c[f+48+12>>2];uc(u+136|0,u,u+216|0,0,0);p=(a[u+216+40>>0]|0)==0;q=u+216+20|0;c[u+264>>2]=c[q>>2];c[u+264+4>>2]=c[q+4>>2];c[u+264+8>>2]=c[q+8>>2];c[u+264+12>>2]=c[q+12>>2];if(p){j=0;i=u;return j|0}n=+g[u+216+36>>2];k=+g[u+216+16>>2];b=c[u+216+12>>2]|0;m=c[u+216+8>>2]|0;o=c[u+216+4>>2]|0;do if(n>1.0000000474974513e-003){p=0;k=0.0;while(1){if((p|0)>31){b=0;p=13;break}w=r*(c[l>>2]=o,+g[l>>2]);w=s*(c[l>>2]=m,+g[l>>2])+w;v=k;k=k-n/(t*(c[l>>2]=b,+g[l>>2])+w);if(!(!(k<=v)&(!(k<0.0)&!(k>1.0)))){b=0;p=13;break}jb[c[c[j>>2]>>2]&31](j,k);w=1.0-k;g[u+48>>2]=w*+g[d+48>>2]+k*+g[e+48>>2];g[u+52>>2]=w*+g[d+52>>2]+k*+g[e+52>>2];g[u+56>>2]=w*+g[d+56>>2]+k*+g[e+56>>2];g[u+112>>2]=w*+g[f+48>>2]+k*+g[h+48>>2];g[u+116>>2]=w*+g[f+52>>2]+k*+g[h+52>>2];g[u+120>>2]=w*+g[f+56>>2]+k*+g[h+56>>2];uc(u+136|0,u,u+216|0,0,0);if(!(a[u+216+40>>0]|0)){b=0;p=13;break}n=+g[u+216+36>>2];if(n<0.0){p=8;break}c[u+264>>2]=c[q>>2];c[u+264+4>>2]=c[q+4>>2];c[u+264+8>>2]=c[q+8>>2];c[u+264+12>>2]=c[q+12>>2];b=c[u+216+12>>2]|0;m=c[u+216+8>>2]|0;o=c[u+216+4>>2]|0;if(!(n>1.0000000474974513e-003)){p=10;break}else p=p+1|0}if((p|0)==8){g[j+164>>2]=k;e=c[u+216+8>>2]|0;f=c[u+216+12>>2]|0;h=c[u+216+16>>2]|0;c[j+132>>2]=c[u+216+4>>2];c[j+136>>2]=e;c[j+140>>2]=f;c[j+144>>2]=h;c[j+148>>2]=c[q>>2];c[j+148+4>>2]=c[q+4>>2];c[j+148+8>>2]=c[q+8>>2];c[j+148+12>>2]=c[q+12>>2];j=1;i=u;return j|0}else if((p|0)==10){n=k;k=+g[u+216+16>>2];break}else if((p|0)==13){i=u;return b|0}}else n=0.0;while(0);w=r*(c[l>>2]=o,+g[l>>2]);w=s*(c[l>>2]=m,+g[l>>2])+w;if(t*(c[l>>2]=b,+g[l>>2])+w>=-+g[j+172>>2]){j=0;i=u;return j|0}g[j+164>>2]=n;c[j+132>>2]=o;c[j+136>>2]=m;c[j+140>>2]=b;g[j+144>>2]=k;c[j+148>>2]=c[u+264>>2];c[j+148+4>>2]=c[u+264+4>>2];c[j+148+8>>2]=c[u+264+8>>2];c[j+148+12>>2]=c[u+264+12>>2];j=1;i=u;return j|0}function qd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0;m=i;i=i+240|0;c[a+4>>2]=(c[a+4>>2]|0)+1;k=c[b+36>>2]|0;j=c[d+36>>2]|0;f=c[a+8>>2]|0;K=c[(c[f+4>>2]|0)+28>>2]|0;d=c[K+(k*80|0)+64>>2]|0;b=(c[(c[a+12>>2]|0)+4>>2]|0)+28|0;e=c[(c[b>>2]|0)+(j*80|0)+64>>2]|0;f=c[f+12>>2]|0;n=+g[f>>2];I=+g[f+4>>2];J=+g[f+8>>2];q=+g[f+16>>2];s=+g[f+20>>2];u=+g[f+24>>2];r=+g[f+32>>2];v=+g[f+36>>2];D=+g[f+40>>2];w=+g[K+(k*80|0)>>2];x=+g[K+(k*80|0)+16>>2];y=+g[K+(k*80|0)+32>>2];z=+g[K+(k*80|0)+4>>2];A=+g[K+(k*80|0)+20>>2];B=+g[K+(k*80|0)+36>>2];t=+g[K+(k*80|0)+8>>2];C=+g[K+(k*80|0)+24>>2];E=+g[K+(k*80|0)+40>>2];o=+g[K+(k*80|0)+48>>2];p=+g[K+(k*80|0)+52>>2];H=+g[K+(k*80|0)+56>>2];F=+g[f+48>>2]+(n*o+I*p+J*H);G=+g[f+52>>2]+(q*o+s*p+u*H);H=+g[f+56>>2]+(r*o+v*p+D*H);g[m+176>>2]=n*w+I*x+J*y;g[m+176+4>>2]=n*z+I*A+J*B;g[m+176+8>>2]=n*t+I*C+J*E;g[m+176+12>>2]=0.0;g[m+176+16>>2]=q*w+s*x+u*y;g[m+176+20>>2]=q*z+s*A+u*B;g[m+176+24>>2]=q*t+s*C+u*E;g[m+176+28>>2]=0.0;g[m+176+32>>2]=r*w+v*x+D*y;g[m+176+36>>2]=r*z+v*A+D*B;g[m+176+40>>2]=r*t+v*C+D*E;g[m+176+44>>2]=0.0;g[m+176+48>>2]=F;g[m+176+52>>2]=G;g[m+176+56>>2]=H;g[m+176+60>>2]=0.0;f=c[(c[a+12>>2]|0)+12>>2]|0;H=+g[f>>2];G=+g[f+4>>2];F=+g[f+8>>2];E=+g[f+16>>2];D=+g[f+20>>2];C=+g[f+24>>2];v=+g[f+32>>2];t=+g[f+36>>2];r=+g[f+40>>2];b=c[b>>2]|0;B=+g[b+(j*80|0)>>2];A=+g[b+(j*80|0)+16>>2];z=+g[b+(j*80|0)+32>>2];y=+g[b+(j*80|0)+4>>2];x=+g[b+(j*80|0)+20>>2];w=+g[b+(j*80|0)+36>>2];u=+g[b+(j*80|0)+8>>2];s=+g[b+(j*80|0)+24>>2];q=+g[b+(j*80|0)+40>>2];J=+g[b+(j*80|0)+48>>2];I=+g[b+(j*80|0)+52>>2];n=+g[b+(j*80|0)+56>>2];p=+g[f+48>>2]+(H*J+G*I+F*n);o=+g[f+52>>2]+(E*J+D*I+C*n);n=+g[f+56>>2]+(v*J+t*I+r*n);g[m+112>>2]=H*B+G*A+F*z;g[m+112+4>>2]=H*y+G*x+F*w;g[m+112+8>>2]=H*u+G*s+F*q;g[m+112+12>>2]=0.0;g[m+112+16>>2]=E*B+D*A+C*z;g[m+112+20>>2]=E*y+D*x+C*w;g[m+112+24>>2]=E*u+D*s+C*q;g[m+112+28>>2]=0.0;g[m+112+32>>2]=v*B+t*A+r*z;g[m+112+36>>2]=v*y+t*x+r*w;g[m+112+40>>2]=v*u+t*s+r*q;g[m+112+44>>2]=0.0;g[m+112+48>>2]=p;g[m+112+52>>2]=o;g[m+112+56>>2]=n;g[m+112+60>>2]=0.0;Yb[c[(c[d>>2]|0)+8>>2]&127](d,m+176|0,m+96|0,m+80|0);Yb[c[(c[e>>2]|0)+8>>2]&127](e,m+112|0,m+64|0,m+48|0);if(!(+g[m+96>>2]>+g[m+48>>2])?!(+g[m+80>>2]<+g[m+64>>2]):0)b=1;else b=0;if(!(!(+g[m+96+8>>2]>+g[m+48+8>>2])?!(+g[m+80+8>>2]<+g[m+64+8>>2]):0))b=0;if(+g[m+96+4>>2]>+g[m+48+4>>2]){i=m;return}if(+g[m+80+4>>2]<+g[m+64+4>>2]|b^1){i=m;return}f=c[a+8>>2]|0;b=c[f+8>>2]|0;c[m+24>>2]=f;c[m+24+4>>2]=d;c[m+24+8>>2]=b;c[m+24+12>>2]=m+176;c[m+24+16>>2]=-1;c[m+24+20>>2]=k;b=c[a+12>>2]|0;f=c[b+8>>2]|0;c[m>>2]=b;c[m+4>>2]=e;c[m+8>>2]=f;c[m+12>>2]=m+112;c[m+16>>2]=-1;c[m+20>>2]=j;f=c[a+28>>2]|0;c[6320]=(c[6320]|0)+1;b=((j<<16|k)+~((j<<16|k)<<15)>>10^(j<<16|k)+~((j<<16|k)<<15))*9|0;b=(c[f+12>>2]|0)+-1&((b>>6^b)+~((b>>6^b)<<11)>>16^(b>>6^b)+~((b>>6^b)<<11));a:do if((b|0)<(c[f+28>>2]|0)?(h=c[(c[f+36>>2]|0)+(b<<2)>>2]|0,(h|0)!=-1):0){e=c[f+16>>2]|0;b=h;while(1){d=e+(b*12|0)|0;if((c[d>>2]|0)==(k|0)?(c[e+(b*12|0)+4>>2]|0)==(j|0):0)break;b=c[(c[f+56>>2]|0)+(b<<2)>>2]|0;if((b|0)==-1){l=16;break a}}if(d)b=c[e+(b*12|0)+8>>2]|0;else l=16}else l=16;while(0);if((l|0)==16){b=c[a+16>>2]|0;b=sb[c[(c[b>>2]|0)+8>>2]&31](b,m+24|0,m,c[a+32>>2]|0)|0;K=c[a+28>>2]|0;c[(yb[c[(c[K>>2]|0)+12>>2]&63](K,k,j)|0)+8>>2]=b}K=c[a+24>>2]|0;h=c[K+8>>2]|0;l=c[K+12>>2]|0;c[K+8>>2]=m+24;c[K+12>>2]=m;Ub[c[(c[K>>2]|0)+8>>2]&127](K,-1,k);K=c[a+24>>2]|0;Ub[c[(c[K>>2]|0)+12>>2]&127](K,-1,j);ib[c[(c[b>>2]|0)+8>>2]&31](b,m+24|0,m,c[a+20>>2]|0,c[a+24>>2]|0);K=c[a+24>>2]|0;c[K+8>>2]=h;c[K+12>>2]=l;i=m;return}function rd(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,E=0,F=0,G=0,H=0;j=c[d+8>>2]|0;if(!j){h=0;return h|0}i=0;C=j;do{if((c[C+20>>2]|0)>(c[a+100>>2]|0)){A=c[C+12>>2]|0;w=c[A+88>>2]|0;x=w-(c[d+88>>2]|0)|0;y=c[A+92>>2]|0;z=y-(c[d+92>>2]|0)|0;A=c[A+96>>2]|0;B=A-(c[d+96>>2]|0)|0;k=rr(x|0,((x|0)<0)<<31>>31|0,c[g>>2]|0,c[g+4>>2]|0)|0;o=D;j=rr(z|0,((z|0)<0)<<31>>31|0,c[g+8>>2]|0,c[g+8+4>>2]|0)|0;o=Ct(j|0,D|0,k|0,o|0)|0;k=D;j=rr(B|0,((B|0)<0)<<31>>31|0,c[g+16>>2]|0,c[g+16+4>>2]|0)|0;j=Ct(o|0,k|0,j|0,D|0)|0;k=D;o=rr(c[f>>2]|0,c[f+4>>2]|0,x|0,((x|0)<0)<<31>>31|0)|0;v=D;n=rr(c[f+8>>2]|0,c[f+8+4>>2]|0,z|0,((z|0)<0)<<31>>31|0)|0;v=Ct(n|0,D|0,o|0,v|0)|0;o=D;n=rr(c[f+16>>2]|0,c[f+16+4>>2]|0,B|0,((B|0)<0)<<31>>31|0)|0;n=Ct(v|0,o|0,n|0,D|0)|0;o=D;if((k|0)>0|(k|0)==0&j>>>0>0){l=1;v=j}else{v=Ds(0,0,j|0,k|0)|0;l=((j|0)!=0|(k|0)!=0)<<31>>31;v=(j|0)!=0|(k|0)!=0?v:0;k=(j|0)!=0|(k|0)!=0?D:0}if(!((o|0)>0|(o|0)==0&n>>>0>0)){m=Ds(0,0,n|0,o|0)|0;l=(n|0)!=0|(o|0)!=0?0-l|0:l;m=(n|0)!=0|(o|0)!=0?m:0;j=(n|0)!=0|(o|0)!=0?D:0;if(!((l|0)==0&((m|0)==0&(j|0)==0))){o=j;p=8}}else{m=n;p=8}a:do if((p|0)==8){p=0;if(!i){c[h>>2]=v;c[h+4>>2]=k;c[h+8>>2]=m;c[h+8+4>>2]=o;c[h+16>>2]=l;i=C;break}j=c[h+16>>2]|0;if((l|0)==(j|0)){if(l|0){p=c[h+8>>2]|0;s=c[h+8+4>>2]|0;n=rr(p|0,0,v|0,0)|0;j=D;t=rr(s|0,0,v|0,0)|0;r=D;p=rr(p|0,0,k|0,0)|0;q=D;s=rr(s|0,0,k|0,0)|0;G=D;p=Ct(t|0,0,p|0,0)|0;t=D;G=Ct(r|0,0,s|0,G|0)|0;q=Ct(G|0,D|0,q|0,0)|0;t=Ct(q|0,D|0,t|0,0)|0;q=D;j=Ct(0,p|0,n|0,j|0)|0;n=D;p=Ct(t|0,q|0,(n>>>0<p>>>0|(n|0)==(p|0)&j>>>0<0)&1|0,0)|0;q=D;t=c[h>>2]|0;G=c[h+4>>2]|0;s=rr(t|0,0,m|0,0)|0;r=D;E=rr(G|0,0,m|0,0)|0;H=D;t=rr(t|0,0,o|0,0)|0;u=D;G=rr(G|0,0,o|0,0)|0;F=D;t=Ct(E|0,0,t|0,0)|0;E=D;F=Ct(H|0,0,G|0,F|0)|0;u=Ct(F|0,D|0,u|0,0)|0;E=Ct(u|0,D|0,E|0,0)|0;u=D;r=Ct(0,t|0,s|0,r|0)|0;s=D;t=Ct(E|0,u|0,(s>>>0<t>>>0|(s|0)==(t|0)&r>>>0<0)&1|0,0)|0;u=D;if(!(q>>>0<u>>>0|(q|0)==(u|0)&p>>>0<t>>>0))if(!(q>>>0>u>>>0|(q|0)==(u|0)&p>>>0>t>>>0))if(n>>>0<s>>>0|(n|0)==(s|0)&j>>>0<r>>>0)j=-1;else j=(n>>>0>s>>>0|(n|0)==(s|0)&j>>>0>r>>>0)&1;else j=1;else j=-1;j=S(j,l)|0;p=18}}else{j=l-j|0;p=18}do if((p|0)==18){p=0;if((j|0)>=0)if(!j)break;else break a;else{c[h>>2]=v;c[h+4>>2]=k;c[h+8>>2]=m;c[h+8+4>>2]=o;c[h+16>>2]=l;i=C;break a}}while(0);j=(c[i+4>>2]|0)==(C|0);if((c[i>>2]|0)==(C|0))if(j){H=c[e+8>>2]|0;E=S(H,z)|0;u=c[e+4>>2]|0;E=E-(S(u,B)|0)|0;G=c[e>>2]|0;H=(S(G,B)|0)-(S(x,H)|0)|0;G=(S(x,u)|0)-(S(G,z)|0)|0;u=c[i+12>>2]|0;j=c[(c[C+8>>2]|0)+12>>2]|0;z=c[j+88>>2]|0;x=(c[u+88>>2]|0)-z|0;v=c[j+92>>2]|0;B=(c[u+92>>2]|0)-v|0;j=c[j+96>>2]|0;u=(c[u+96>>2]|0)-j|0;F=(S(A-j|0,B)|0)-(S(y-v|0,u)|0)|0;j=(S(w-z|0,u)|0)-(S(A-j|0,x)|0)|0;B=(S(y-v|0,x)|0)-(S(w-z|0,B)|0)|0;E=rr(F|0,((F|0)<0)<<31>>31|0,E|0,((E|0)<0)<<31>>31|0)|0;F=D;H=rr(j|0,((j|0)<0)<<31>>31|0,H|0,((H|0)<0)<<31>>31|0)|0;j=D;G=rr(B|0,((B|0)<0)<<31>>31|0,G|0,((G|0)<0)<<31>>31|0)|0;G=Ct(E|0,F|0,G|0,D|0)|0;j=Ct(G|0,D|0,H|0,j|0)|0;H=D;j=(H|0)>0|(H|0)==0&j>>>0>0?2:1}else j=2;else j=j&1;i=(j|0)==2^b?i:C}while(0);j=c[d+8>>2]|0}C=c[C>>2]|0}while((C|0)!=(j|0));return i|0}function sd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,m=0.0,n=0.0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0;z=i;i=i+48|0;switch(c[b+4>>2]|0){case 8:{c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=z;return}case 0:{w=+g[b+32>>2];x=+g[b+36>>2];x=+g[d+4>>2]>=0.0?x:-x;y=+g[b+40>>2];y=+g[d+8>>2]>=0.0?y:-y;g[a>>2]=+g[d>>2]>=0.0?w:-w;g[a+4>>2]=x;g[a+8>>2]=y;g[a+12>>2]=0.0;i=z;return}case 1:{u=+g[d>>2];v=+g[d+4>>2];y=+g[d+8>>2];x=u*+g[b+60>>2]+v*+g[b+60+4>>2]+y*+g[b+60+8>>2];w=u*+g[b+60+16>>2]+v*+g[b+60+20>>2]+y*+g[b+60+24>>2];y=u*+g[b+60+32>>2]+v*+g[b+60+36>>2]+y*+g[b+60+40>>2];d=x<w?(w<y?2:1):x<y?2:0;o=c[b+60+(d<<4)+4>>2]|0;p=c[b+60+(d<<4)+8>>2]|0;c[a>>2]=c[b+60+(d<<4)>>2];c[a+4>>2]=o;c[a+8>>2]=p;g[a+12>>2]=0.0;i=z;return}case 13:{c[z+32>>2]=c[b+32>>2];c[z+32+4>>2]=c[b+32+4>>2];c[z+32+8>>2]=c[b+32+8>>2];c[z+32+12>>2]=c[b+32+12>>2];c[z+16>>2]=c[d>>2];e=c[d+4>>2]|0;c[z+16+4>>2]=e;p=c[d+8>>2]|0;c[z+16+8>>2]=p;g[z+16+12>>2]=0.0;d=c[b+56>>2]|0;f=(c[l>>2]=p,+g[l>>2]);switch(d|0){case 2:{b=0;o=2;p=1;f=(c[l>>2]=e,+g[l>>2]);break}case 1:{b=0;o=1;p=2;break}default:{b=1;o=0;p=2}}n=+g[z+32+(b<<2)>>2];k=+g[z+32+(d<<2)>>2];m=+g[z+16+(b<<2)>>2];h=+G(+(m*m+f*f));j=+g[z+16+(o<<2)>>2];if(h!=0.0){g[z+(b<<2)>>2]=m*(n/h);g[z+(o<<2)>>2]=j<0.0?-k:k;g[z+(p<<2)>>2]=n/h*f;c[a>>2]=c[z>>2];c[a+4>>2]=c[z+4>>2];c[a+8>>2]=c[z+8>>2]}else{g[z+(b<<2)>>2]=n;g[z+(o<<2)>>2]=j<0.0?-k:k;g[z+(p<<2)>>2]=0.0;c[a>>2]=c[z>>2];c[a+4>>2]=c[z+4>>2];c[a+8>>2]=c[z+8>>2]}g[a+12>>2]=0.0;i=z;return}case 10:{f=+g[d>>2];h=+g[d+4>>2];j=+g[d+8>>2];o=c[b+56>>2]|0;w=+g[b+32+(o<<2)>>2];k=+g[b+32+(((o+2|0)%3|0)<<2)>>2];if(f*f+h*h+j*j<9.999999747378752e-005){y=1.0;x=0.0;v=0.0}else{v=1.0/+G(+(f*f+h*h+j*j));y=f*v;x=h*v;v=j*v}c[z+32>>2]=0;c[z+32+4>>2]=0;c[z+32+8>>2]=0;c[z+32+12>>2]=0;g[z+32+(o<<2)>>2]=w;r=k*y;t=k*x;u=k*v;s=+g[b+48>>2];n=y*s;q=x*s;s=v*s;f=r+ +g[z+32>>2]-n;h=t+ +g[z+32+4>>2]-q;k=u+ +g[z+32+8>>2]-s;j=v*k+(y*f+x*h);if(j>-999999984306749440.0){b=(g[l>>2]=f,c[l>>2]|0);e=(g[l>>2]=h,c[l>>2]|0);m=j;d=(g[l>>2]=k,c[l>>2]|0)}else{m=-999999984306749440.0;b=0;d=0;e=0}c[z+32>>2]=0;c[z+32+4>>2]=0;c[z+32+8>>2]=0;c[z+32+12>>2]=0;g[z+32+(o<<2)>>2]=-w;j=r+ +g[z+32>>2]-n;h=t+ +g[z+32+4>>2]-q;f=u+ +g[z+32+8>>2]-s;if(v*f+(y*j+x*h)>m){b=(g[l>>2]=j,c[l>>2]|0);e=(g[l>>2]=h,c[l>>2]|0);d=(g[l>>2]=f,c[l>>2]|0)}c[a>>2]=b;c[a+4>>2]=e;c[a+8>>2]=d;g[a+12>>2]=0.0;i=z;return}case 5:{p=c[b+96>>2]|0;o=c[b+100>>2]|0;q=+g[b+16>>2];r=+g[b+20>>2];n=+g[b+24>>2];k=+g[d>>2]*q;m=+g[d+4>>2]*r;h=+g[d+8>>2]*n;if((o|0)>0){e=-1;d=0;f=-34028234663852886.0e22;while(1){j=k*+g[p+(d<<4)>>2]+m*+g[p+(d<<4)+4>>2]+h*+g[p+(d<<4)+8>>2];b=j>f;e=b?d:e;d=d+1|0;if((d|0)==(o|0))break;else f=b?j:f}}else e=-1;x=r*+g[p+(e<<4)+4>>2];y=n*+g[p+(e<<4)+8>>2];g[a>>2]=q*+g[p+(e<<4)>>2];g[a+4>>2]=x;g[a+8>>2]=y;g[a+12>>2]=0.0;i=z;return}case 4:{p=c[b+108>>2]|0;o=c[b+100>>2]|0;q=+g[b+16>>2];r=+g[b+20>>2];n=+g[b+24>>2];k=+g[d>>2]*q;m=+g[d+4>>2]*r;h=+g[d+8>>2]*n;if((o|0)>0){e=-1;d=0;f=-34028234663852886.0e22;while(1){j=k*+g[p+(d<<4)>>2]+m*+g[p+(d<<4)+4>>2]+h*+g[p+(d<<4)+8>>2];b=j>f;e=b?d:e;d=d+1|0;if((d|0)==(o|0))break;else f=b?j:f}}else e=-1;x=r*+g[p+(e<<4)+4>>2];y=n*+g[p+(e<<4)+8>>2];g[a>>2]=q*+g[p+(e<<4)>>2];g[a+4>>2]=x;g[a+8>>2]=y;g[a+12>>2]=0.0;i=z;return}default:{Ub[c[(c[b>>2]|0)+68>>2]&127](a,b,d);i=z;return}}}
function hc(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0,m=0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,P=0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0,X=0.0,Y=0,Z=0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0,ea=0,fa=0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0,ta=0.0,ua=0.0,va=0.0,wa=0.0,xa=0.0,ya=0.0,za=0.0,Aa=0,Ba=0,Ca=0,Da=0.0,Ea=0.0,Fa=0;Fa=i;i=i+512|0;c[Fa+48>>2]=c[b>>2];c[Fa>>2]=c[b+64>>2];D=Fa+48+4|0;c[D>>2]=c[b+4>>2];c[Fa+4>>2]=c[b+68>>2];c[Fa+48+8>>2]=c[b+8>>2];c[Fa+8>>2]=c[b+72>>2];c[Fa+48+16>>2]=c[b+16>>2];c[Fa+16>>2]=c[b+80>>2];c[Fa+48+20>>2]=c[b+20>>2];c[Fa+20>>2]=c[b+84>>2];c[Fa+48+24>>2]=c[b+24>>2];c[Fa+24>>2]=c[b+88>>2];c[Fa+48+32>>2]=c[b+32>>2];c[Fa+32>>2]=c[b+96>>2];c[Fa+48+36>>2]=c[b+36>>2];c[Fa+36>>2]=c[b+100>>2];c[Fa+48+40>>2]=c[b+40>>2];c[Fa+40>>2]=c[b+104>>2];Ca=c[a+4>>2]|0;ia=+g[Ca+32>>2];ja=+g[Ca+36>>2];ma=+g[Ca+40>>2];ka=+Cb[c[(c[Ca>>2]|0)+48>>2]&15](Ca);la=+Cb[c[(c[Ca>>2]|0)+48>>2]&15](Ca);ma=(ma+ +Cb[c[(c[Ca>>2]|0)+48>>2]&15](Ca))*2.0;Ca=c[a+8>>2]|0;qa=+g[Ca+32>>2];ra=+g[Ca+36>>2];wa=+g[Ca+40>>2];ta=+Cb[c[(c[Ca>>2]|0)+48>>2]&15](Ca);sa=+Cb[c[(c[Ca>>2]|0)+48>>2]&15](Ca);wa=(wa+ +Cb[c[(c[Ca>>2]|0)+48>>2]&15](Ca))*2.0;E=+g[b+112>>2]-+g[b+48>>2];Q=+g[b+116>>2]-+g[b+52>>2];R=+g[b+120>>2]-+g[b+56>>2];ca=+g[Fa+48>>2];$=+g[Fa+48+16>>2];aa=+g[Fa+48+32>>2];ba=+g[D>>2];X=+g[Fa+48+20>>2];_=+g[Fa+48+36>>2];ga=+g[Fa+48+8>>2];ha=+g[Fa+48+24>>2];na=+g[Fa+48+40>>2];g[Fa+404>>2]=(ia+ka)*2.0*.5;g[Fa+404+4>>2]=(ja+la)*2.0*.5;g[Fa+404+8>>2]=ma*.5;g[Fa+392>>2]=(qa+ta)*2.0*.5;g[Fa+392+4>>2]=(ra+sa)*2.0*.5;g[Fa+392+8>>2]=wa*.5;za=+g[Fa>>2];pa=+g[Fa+16>>2];va=+g[Fa+32>>2];ya=+g[Fa+4>>2];oa=+g[Fa+20>>2];ua=+g[Fa+36>>2];xa=+g[Fa+8>>2];Da=+g[Fa+24>>2];Ea=+g[Fa+40>>2];y=+F(+(ca*za+$*pa+aa*va));A=+F(+(ca*ya+$*oa+aa*ua));S=+F(+(ca*xa+$*Da+aa*Ea));z=+F(+(za*ba+pa*X+va*_));B=+F(+(ya*ba+oa*X+ua*_));T=+F(+(xa*ba+Da*X+Ea*_));U=+F(+(za*ga+pa*ha+va*na));V=+F(+(ya*ga+oa*ha+ua*na));C=+F(+(xa*ga+Da*ha+Ea*na));h=+F(+(E*ca+Q*$+R*aa))-(wa*.5*S+((ia+ka)*2.0*.5+y*(qa+ta)*2.0*.5+A*(ra+sa)*2.0*.5));if(h>0.0){i=Fa;return}if(h>-34028234663852886.0e22){e=Fa+48|0;m=1;k=E*ca+Q*$+R*aa<0.0&1}else{e=0;m=0;k=0;h=-34028234663852886.0e22}j=+F(+(E*ba+Q*X+R*_))-((ja+la)*2.0*.5+z*(qa+ta)*2.0*.5+B*(ra+sa)*2.0*.5+T*wa*.5);if(j>0.0){i=Fa;return}if(j>h){e=D;m=2;k=E*ba+Q*X+R*_<0.0&1;h=j}j=+F(+(E*ga+Q*ha+R*na))-(ma*.5+U*(qa+ta)*2.0*.5+V*(ra+sa)*2.0*.5+C*wa*.5);if(j>0.0){i=Fa;return}if(j>h){e=Fa+48+8|0;m=3;k=E*ga+Q*ha+R*na<0.0&1;h=j}j=+F(+(E*za+Q*pa+R*va))-((qa+ta)*2.0*.5+(y*(ia+ka)*2.0*.5+z*(ja+la)*2.0*.5+U*ma*.5));if(j>0.0){i=Fa;return}if(j>h){e=Fa;m=4;k=E*za+Q*pa+R*va<0.0&1;h=j}j=+F(+(E*ya+Q*oa+R*ua))-((ra+sa)*2.0*.5+(A*(ia+ka)*2.0*.5+B*(ja+la)*2.0*.5+V*ma*.5));if(j>0.0){i=Fa;return}if(j>h){e=Fa+4|0;m=5;k=E*ya+Q*oa+R*ua<0.0&1;h=j}j=+F(+(E*xa+Q*Da+R*Ea))-(wa*.5+(S*(ia+ka)*2.0*.5+T*(ja+la)*2.0*.5+C*ma*.5));if(j>0.0){i=Fa;return}if(j>h){e=Fa+8|0;m=6;k=E*xa+Q*Da+R*Ea<0.0&1;h=j}j=(E*ga+Q*ha+R*na)*(za*ba+pa*X+va*_)-(E*ba+Q*X+R*_)*(za*ga+pa*ha+va*na);n=+F(+j)-((U+9.999999747378752e-006)*(ja+la)*2.0*.5+(z+9.999999747378752e-006)*ma*.5+(S+9.999999747378752e-006)*(ra+sa)*2.0*.5+(A+9.999999747378752e-006)*wa*.5);if(n>1.1920928955078125e-007){i=Fa;return}q=(za*ga+pa*ha+va*na)*(za*ga+pa*ha+va*na)+0.0;v=(za*ba+pa*X+va*_)*(za*ba+pa*X+va*_);p=+G(+(v+q));if(p>1.1920928955078125e-007?n/p*1.0499999523162842>h:0){a=(g[l>>2]=0.0/p,c[l>>2]|0);f=(g[l>>2]=-(za*ga+pa*ha+va*na)/p,c[l>>2]|0);o=0;m=7;k=j<0.0&1;h=n/p;e=(g[l>>2]=(za*ba+pa*X+va*_)/p,c[l>>2]|0)}else{o=e;a=0;f=0;e=0}j=(E*ga+Q*ha+R*na)*(ya*ba+oa*X+ua*_)-(E*ba+Q*X+R*_)*(ya*ga+oa*ha+ua*na);n=+F(+j)-((V+9.999999747378752e-006)*(ja+la)*2.0*.5+(B+9.999999747378752e-006)*ma*.5+(S+9.999999747378752e-006)*(qa+ta)*2.0*.5+(y+9.999999747378752e-006)*wa*.5);if(n>1.1920928955078125e-007){i=Fa;return}r=(ya*ga+oa*ha+ua*na)*(ya*ga+oa*ha+ua*na)+0.0;w=(ya*ba+oa*X+ua*_)*(ya*ba+oa*X+ua*_);p=+G(+(w+r));if(p>1.1920928955078125e-007?n/p*1.0499999523162842>h:0){a=(g[l>>2]=0.0/p,c[l>>2]|0);f=(g[l>>2]=-(ya*ga+oa*ha+ua*na)/p,c[l>>2]|0);o=0;m=8;k=j<0.0&1;h=n/p;e=(g[l>>2]=(ya*ba+oa*X+ua*_)/p,c[l>>2]|0)}j=(E*ga+Q*ha+R*na)*(xa*ba+Da*X+Ea*_)-(E*ba+Q*X+R*_)*(xa*ga+Da*ha+Ea*na);n=+F(+j)-((C+9.999999747378752e-006)*(ja+la)*2.0*.5+(T+9.999999747378752e-006)*ma*.5+(A+9.999999747378752e-006)*(qa+ta)*2.0*.5+(y+9.999999747378752e-006)*(ra+sa)*2.0*.5);if(n>1.1920928955078125e-007){i=Fa;return}t=(xa*ga+Da*ha+Ea*na)*(xa*ga+Da*ha+Ea*na)+0.0;x=(xa*ba+Da*X+Ea*_)*(xa*ba+Da*X+Ea*_);p=+G(+(x+t));if(p>1.1920928955078125e-007?n/p*1.0499999523162842>h:0){a=(g[l>>2]=0.0/p,c[l>>2]|0);f=(g[l>>2]=-(xa*ga+Da*ha+Ea*na)/p,c[l>>2]|0);o=0;m=9;k=j<0.0&1;h=n/p;e=(g[l>>2]=(xa*ba+Da*X+Ea*_)/p,c[l>>2]|0)}j=(E*ca+Q*$+R*aa)*(za*ga+pa*ha+va*na)-(E*ga+Q*ha+R*na)*(ca*za+$*pa+aa*va);n=+F(+j)-((U+9.999999747378752e-006)*(ia+ka)*2.0*.5+(y+9.999999747378752e-006)*ma*.5+(T+9.999999747378752e-006)*(ra+sa)*2.0*.5+(B+9.999999747378752e-006)*wa*.5);if(n>1.1920928955078125e-007){i=Fa;return}u=(ca*za+$*pa+aa*va)*(ca*za+$*pa+aa*va);p=+G(+(u+q));do if(p>1.1920928955078125e-007){if(!(n/p*1.0499999523162842>h))break;a=(g[l>>2]=(za*ga+pa*ha+va*na)/p,c[l>>2]|0);f=(g[l>>2]=0.0/p,c[l>>2]|0);o=0;m=10;k=j<0.0&1;h=n/p;e=(g[l>>2]=-(ca*za+$*pa+aa*va)/p,c[l>>2]|0)}while(0);j=(E*ca+Q*$+R*aa)*(ya*ga+oa*ha+ua*na)-(E*ga+Q*ha+R*na)*(ca*ya+$*oa+aa*ua);n=+F(+j)-((V+9.999999747378752e-006)*(ia+ka)*2.0*.5+(A+9.999999747378752e-006)*ma*.5+(T+9.999999747378752e-006)*(qa+ta)*2.0*.5+(z+9.999999747378752e-006)*wa*.5);if(n>1.1920928955078125e-007){i=Fa;return}s=(ca*ya+$*oa+aa*ua)*(ca*ya+$*oa+aa*ua);p=+G(+(s+r));do if(p>1.1920928955078125e-007){if(!(n/p*1.0499999523162842>h))break;a=(g[l>>2]=(ya*ga+oa*ha+ua*na)/p,c[l>>2]|0);f=(g[l>>2]=0.0/p,c[l>>2]|0);o=0;m=11;k=j<0.0&1;h=n/p;e=(g[l>>2]=-(ca*ya+$*oa+aa*ua)/p,c[l>>2]|0)}while(0);j=(E*ca+Q*$+R*aa)*(xa*ga+Da*ha+Ea*na)-(E*ga+Q*ha+R*na)*(ca*xa+$*Da+aa*Ea);n=+F(+j)-((C+9.999999747378752e-006)*(ia+ka)*2.0*.5+(S+9.999999747378752e-006)*ma*.5+(B+9.999999747378752e-006)*(qa+ta)*2.0*.5+(z+9.999999747378752e-006)*(ra+sa)*2.0*.5);if(n>1.1920928955078125e-007){i=Fa;return}q=(ca*xa+$*Da+aa*Ea)*(ca*xa+$*Da+aa*Ea);p=+G(+(q+t));do if(p>1.1920928955078125e-007){if(!(n/p*1.0499999523162842>h))break;a=(g[l>>2]=(xa*ga+Da*ha+Ea*na)/p,c[l>>2]|0);f=(g[l>>2]=0.0/p,c[l>>2]|0);o=0;m=12;k=j<0.0&1;h=n/p;e=(g[l>>2]=-(ca*xa+$*Da+aa*Ea)/p,c[l>>2]|0)}while(0);n=(E*ba+Q*X+R*_)*(ca*za+$*pa+aa*va)-(E*ca+Q*$+R*aa)*(za*ba+pa*X+va*_);j=+F(+n)-((z+9.999999747378752e-006)*(ia+ka)*2.0*.5+(y+9.999999747378752e-006)*(ja+la)*2.0*.5+(C+9.999999747378752e-006)*(ra+sa)*2.0*.5+(V+9.999999747378752e-006)*wa*.5);if(j>1.1920928955078125e-007){i=Fa;return}p=+G(+(u+v+0.0));do if(p>1.1920928955078125e-007){if(!(j/p*1.0499999523162842>h))break;a=(g[l>>2]=-(za*ba+pa*X+va*_)/p,c[l>>2]|0);f=(g[l>>2]=(ca*za+$*pa+aa*va)/p,c[l>>2]|0);o=0;m=13;k=n<0.0&1;h=j/p;e=(g[l>>2]=0.0/p,c[l>>2]|0)}while(0);p=(E*ba+Q*X+R*_)*(ca*ya+$*oa+aa*ua)-(E*ca+Q*$+R*aa)*(ya*ba+oa*X+ua*_);j=+F(+p)-((B+9.999999747378752e-006)*(ia+ka)*2.0*.5+(A+9.999999747378752e-006)*(ja+la)*2.0*.5+(C+9.999999747378752e-006)*(qa+ta)*2.0*.5+(U+9.999999747378752e-006)*wa*.5);if(j>1.1920928955078125e-007){i=Fa;return}n=+G(+(s+w+0.0));do if(n>1.1920928955078125e-007){if(!(j/n*1.0499999523162842>h))break;a=(g[l>>2]=-(ya*ba+oa*X+ua*_)/n,c[l>>2]|0);f=(g[l>>2]=(ca*ya+$*oa+aa*ua)/n,c[l>>2]|0);o=0;m=14;k=p<0.0&1;h=j/n;e=(g[l>>2]=0.0/n,c[l>>2]|0)}while(0);p=(E*ba+Q*X+R*_)*(ca*xa+$*Da+aa*Ea)-(E*ca+Q*$+R*aa)*(xa*ba+Da*X+Ea*_);j=+F(+p)-((T+9.999999747378752e-006)*(ia+ka)*2.0*.5+(S+9.999999747378752e-006)*(ja+la)*2.0*.5+(V+9.999999747378752e-006)*(qa+ta)*2.0*.5+(U+9.999999747378752e-006)*(ra+sa)*2.0*.5);if(j>1.1920928955078125e-007){i=Fa;return}n=+G(+(q+x+0.0));do if(n>1.1920928955078125e-007){if(!(j/n*1.0499999523162842>h)){Aa=55;break}a=(g[l>>2]=-(xa*ba+Da*X+Ea*_)/n,c[l>>2]|0);f=(g[l>>2]=(ca*xa+$*Da+aa*Ea)/n,c[l>>2]|0);m=15;k=p<0.0&1;h=j/n;e=(g[l>>2]=0.0/n,c[l>>2]|0);Aa=58}else Aa=55;while(0);do if((Aa|0)==55){if(!m){i=Fa;return}if(!o){Aa=58;break}e=c[o>>2]|0;f=c[o+16>>2]|0;Ca=c[o+32>>2]|0;n=(c[l>>2]=e,+g[l>>2]);j=(c[l>>2]=f,+g[l>>2]);a=k;E=h;k=Ca;h=n;n=(c[l>>2]=Ca,+g[l>>2])}while(0);if((Aa|0)==58){ba=(c[l>>2]=a,+g[l>>2]);E=(c[l>>2]=f,+g[l>>2]);n=(c[l>>2]=e,+g[l>>2]);ca=ba*+g[Fa+48>>2]+E*+g[D>>2]+n*ga;e=(g[l>>2]=ca,c[l>>2]|0);j=ba*+g[Fa+48+16>>2]+E*+g[Fa+48+20>>2]+n*ha;f=(g[l>>2]=j,c[l>>2]|0);n=ba*+g[Fa+48+32>>2]+E*+g[Fa+48+36>>2]+n*na;a=k;E=h;k=(g[l>>2]=n,c[l>>2]|0);h=ca}if(!a){Ba=f;Ca=k}else{e=(g[l>>2]=-h,c[l>>2]|0);Ba=(g[l>>2]=-j,c[l>>2]|0);Ca=(g[l>>2]=-n,c[l>>2]|0)}if((m|0)>6){C=(c[l>>2]=e,+g[l>>2]);B=(c[l>>2]=Ba,+g[l>>2]);A=(c[l>>2]=Ca,+g[l>>2]);j=+g[Fa+48>>2];u=+g[Fa+48+16>>2];w=+g[Fa+48+32>>2];v=(C*j+B*u+A*w>0.0?1.0:-1.0)*(ia+ka)*2.0*.5;z=+g[D>>2];y=+g[Fa+48+20>>2];h=+g[Fa+48+36>>2];t=(C*z+B*y+A*h>0.0?1.0:-1.0)*(ja+la)*2.0*.5;x=(C*ga+B*ha+A*na>0.0?1.0:-1.0)*ma*.5;z=+g[b+48>>2]+v*j+t*z+x*ga;y=+g[b+52>>2]+v*u+t*y+x*ha;x=+g[b+56>>2]+v*w+t*h+x*na;c[Fa+448>>2]=c[b+112>>2];c[Fa+448+4>>2]=c[b+112+4>>2];c[Fa+448+8>>2]=c[b+112+8>>2];h=(C*za+B*pa+A*va>0.0?-1.0:1.0)*(qa+ta)*2.0*.5;t=(C*ya+B*oa+A*ua>0.0?-1.0:1.0)*(ra+sa)*2.0*.5;w=+g[Fa+448+4>>2]+h*pa+t*oa;v=+g[Fa+448+8>>2]+h*va+t*ua;u=(C*xa+B*Da+A*Ea>0.0?-1.0:1.0)*wa*.5;t=+g[Fa+448>>2]+h*za+t*ya+u*xa;g[Fa+448>>2]=t;g[Fa+448+4>>2]=w+u*Da;g[Fa+448+8>>2]=v+u*Ea;Ca=m+-7|0;h=+g[Fa+48+(((Ca|0)/3|0)<<2)>>2];j=+g[Fa+48+(((Ca|0)/3|0)+4<<2)>>2];n=+g[Fa+48+(((Ca|0)/3|0)+8<<2)>>2];q=+g[Fa+(((Ca|0)%3|0)<<2)>>2];r=+g[Fa+(((Ca|0)%3|0)+4<<2)>>2];s=+g[Fa+(((Ca|0)%3|0)+8<<2)>>2];p=1.0-(h*q+j*r+n*s)*(h*q+j*r+n*s);if(!(p<=9.999999747378752e-005))h=(((t-z)*h+(w+u*Da-y)*j+(v+u*Ea-x)*n)*(h*q+j*r+n*s)-((t-z)*q+(w+u*Da-y)*r+(v+u*Ea-x)*s))*(1.0/p);else h=0.0;g[Fa+448>>2]=t+h*q;g[Fa+448+4>>2]=w+u*Da+h*r;g[Fa+448+8>>2]=v+u*Ea+h*s;Ca=c[(c[d>>2]|0)+16>>2]|0;g[Fa+416>>2]=-C;g[Fa+416+4>>2]=-B;g[Fa+416+8>>2]=-A;g[Fa+416+12>>2]=0.0;Tb[Ca&15](d,Fa+416|0,Fa+448|0,E);i=Fa;return}da=(m|0)<4;ga=(c[l>>2]=e,+g[l>>2]);if(da){o=Fa+392|0;P=Fa+404|0;a=b+112|0;fa=b+48|0;Z=Fa;k=Fa+48|0;ca=ga;f=Ca;e=Ba}else{e=(g[l>>2]=-(c[l>>2]=Ba,+g[l>>2]),c[l>>2]|0);o=Fa+404|0;P=Fa+392|0;a=b+48|0;fa=b+112|0;Z=Fa+48|0;k=Fa;ca=-ga;f=(g[l>>2]=-(c[l>>2]=Ca,+g[l>>2]),c[l>>2]|0)}ba=(c[l>>2]=e,+g[l>>2]);aa=(c[l>>2]=f,+g[l>>2]);h=ca*+g[Z>>2]+ba*+g[Z+16>>2]+aa*+g[Z+32>>2];g[Fa+376>>2]=h;j=ca*+g[Z+4>>2]+ba*+g[Z+20>>2]+aa*+g[Z+36>>2];g[Fa+376+4>>2]=j;q=ca*+g[Z+8>>2]+ba*+g[Z+24>>2]+aa*+g[Z+40>>2];g[Fa+376+8>>2]=q;h=+F(+h);j=+F(+j);q=+F(+q);e=j>h?(j>q?1:2):h>q?0:2;W=j>h?0:h>q&1;Y=(j>h?j>q:h>q)?2:1;q=+g[o+(e<<2)>>2];h=+g[a>>2]-+g[fa>>2];j=q*+g[Z+(e<<2)>>2];n=+g[a+4>>2];ea=fa+4|0;p=+g[ea>>2];if(+g[Fa+376+(e<<2)>>2]<0.0){$=h+j;_=n-p+q*+g[Z+((e|4)<<2)>>2];X=+g[a+8>>2]-+g[fa+8>>2]+q*+g[Z+((e|8)<<2)>>2]}else{$=h-j;_=n-p-q*+g[Z+((e|4)<<2)>>2];X=+g[a+8>>2]-+g[fa+8>>2]-q*+g[Z+((e|8)<<2)>>2]}L=(da?-1:-4)+m|0;switch(L|0){case 0:{e=2;f=1;break}case 1:{e=2;f=0;break}default:{e=1;f=0}}M=k+(f<<2)|0;U=+g[M>>2];S=+g[M+16>>2];T=+g[M+32>>2];V=$*U+_*S+X*T;M=k+(e<<2)|0;C=+g[M>>2];w=+g[M+16>>2];x=+g[M+32>>2];R=$*C+_*w+X*x;M=Z+(W<<2)|0;Q=+g[M>>2];A=+g[M+16>>2];B=+g[M+32>>2];N=Z+(Y<<2)|0;E=+g[N>>2];y=+g[N+16>>2];z=+g[N+32>>2];Da=+g[o+(W<<2)>>2];Ea=+g[o+(Y<<2)>>2];za=(U*E+S*y+T*z)*Ea;Ea=(C*E+w*y+x*z)*Ea;g[Fa+344>>2]=V-(U*Q+S*A+T*B)*Da-za;g[Fa+344+4>>2]=R-(C*Q+w*A+x*B)*Da-Ea;g[Fa+344+8>>2]=V-(U*Q+S*A+T*B)*Da+za;g[Fa+344+12>>2]=R-(C*Q+w*A+x*B)*Da+Ea;g[Fa+344+16>>2]=V+(U*Q+S*A+T*B)*Da+za;g[Fa+344+20>>2]=R+(C*Q+w*A+x*B)*Da+Ea;g[Fa+344+24>>2]=V+(U*Q+S*A+T*B)*Da-za;g[Fa+344+28>>2]=R+(C*Q+w*A+x*B)*Da-Ea;c[Fa+336>>2]=c[P+(f<<2)>>2];c[Fa+336+4>>2]=c[P+(e<<2)>>2];J=0;K=Fa+272|0;e=Fa+344|0;f=4;a:while(1){H=Fa+336+(J<<2)|0;I=1-J|0;do if((f|0)>0){a=K;b=e;k=0;while(1){m=b+(J<<2)|0;h=+g[m>>2];j=+g[H>>2];if(j>-h){c[a>>2]=c[b>>2];c[a+4>>2]=c[b+4>>2];k=k+1|0;if(k&8|0){e=K;f=k;break a}a=a+8|0;h=+g[m>>2];j=+g[H>>2]}D=(f|0)>1;m=b;b=b+8|0;o=D?b:e;n=+g[o+(J<<2)>>2];if(j>-h^j>-n){Ea=+g[m+(I<<2)>>2];g[a+(I<<2)>>2]=Ea+(-j-h)*((+g[o+(I<<2)>>2]-Ea)/(n-h));g[a+(J<<2)>>2]=-+g[H>>2];k=k+1|0;if(!(k&8))a=a+8|0;else{e=K;f=k;break a}}if(!D)break;else f=f+-1|0}e=(K|0)==(Fa+272|0)?Fa+448|0:Fa+272|0;if((k|0)<=0){f=0;break}a=e;b=K;f=0;while(1){m=b+(J<<2)|0;j=+g[m>>2];h=+g[H>>2];if(j<h){c[a>>2]=c[b>>2];c[a+4>>2]=c[b+4>>2];f=f+1|0;if(f&8|0)break a;a=a+8|0;h=+g[H>>2];j=+g[m>>2]}D=(k|0)>1;m=b;b=b+8|0;o=D?b:K;n=+g[o+(J<<2)>>2];if(j<h^n<h){Ea=+g[m+(I<<2)>>2];g[a+(I<<2)>>2]=Ea+(h-j)*((+g[o+(I<<2)>>2]-Ea)/(n-j));c[a+(J<<2)>>2]=c[H>>2];f=f+1|0;if(!(f&8))a=a+8|0;else break a}if(!D)break;else k=k+-1|0}}else{f=0;e=(K|0)==(Fa+272|0)?Fa+448|0:Fa+272|0}while(0);J=J+1|0;if((J|0)>=2)break;else K=(e|0)==(Fa+272|0)?Fa+448|0:Fa+272|0}if((e|0)!=(Fa+272|0))Lm(Fa+272|0,e|0,f<<3|0)|0;if((f|0)>=1){v=1.0/((U*Q+S*A+T*B)*(C*E+w*y+x*z)-(C*Q+w*A+x*B)*(U*E+S*y+T*z));u=+g[P+(L<<2)>>2];t=+g[M>>2];q=+g[N>>2];r=+g[Z+((W|4)<<2)>>2];s=+g[Z+((Y|4)<<2)>>2];p=+g[Z+((W|8)<<2)>>2];n=+g[Z+((Y|8)<<2)>>2];o=0;e=0;do{Z=e<<1;h=+g[Fa+272+(Z<<2)>>2];j=+g[Fa+272+((Z|1)<<2)>>2];ya=(C*E+w*y+x*z)*v*(h-V)-(U*E+S*y+T*z)*v*(j-R);Ea=(U*Q+S*A+T*B)*v*(j-R)-(C*Q+w*A+x*B)*v*(h-V);Z=o*3|0;za=$+ya*t+Ea*q;g[Fa+176+(Z<<2)>>2]=za;Da=_+ya*r+Ea*s;g[Fa+176+(Z+1<<2)>>2]=Da;Ea=X+ya*p+Ea*n;g[Fa+176+(Z+2<<2)>>2]=Ea;Ea=u-(ca*za+ba*Da+aa*Ea);g[Fa+144+(o<<2)>>2]=Ea;if(Ea>=0.0){Z=o<<1;g[Fa+272+(Z<<2)>>2]=h;g[Fa+272+((Z|1)<<2)>>2]=j;o=o+1|0}e=e+1|0}while((e|0)!=(f|0));b:do if((o|0)>=1){D=(o|0)<4?o:4;D=(D|0)<1?1:D;if((o|0)<=(D|0))if(da){f=fa+8|0;j=-(c[l>>2]=Ba,+g[l>>2]);h=-(c[l>>2]=Ca,+g[l>>2]);e=0;while(1){Ca=e*3|0;g[Fa+448>>2]=+g[Fa+176+(Ca<<2)>>2]+ +g[fa>>2];g[Fa+448+4>>2]=+g[Fa+176+(Ca+1<<2)>>2]+ +g[ea>>2];g[Fa+448+8>>2]=+g[Fa+176+(Ca+2<<2)>>2]+ +g[f>>2];Ca=c[(c[d>>2]|0)+16>>2]|0;g[Fa+416>>2]=-ga;g[Fa+416+4>>2]=j;g[Fa+416+8>>2]=h;g[Fa+416+12>>2]=0.0;Tb[Ca&15](d,Fa+416|0,Fa+448|0,-+g[Fa+144+(e<<2)>>2]);e=e+1|0;if((e|0)==(o|0))break b}}else{f=fa+8|0;j=(c[l>>2]=Ba,+g[l>>2]);h=(c[l>>2]=Ca,+g[l>>2]);e=0;while(1){Ca=e*3|0;Ea=+g[Fa+144+(e<<2)>>2];g[Fa+448>>2]=+g[Fa+176+(Ca<<2)>>2]+ +g[fa>>2]-ga*Ea;g[Fa+448+4>>2]=+g[Fa+176+(Ca+1<<2)>>2]+ +g[ea>>2]-j*Ea;g[Fa+448+8>>2]=+g[Fa+176+(Ca+2<<2)>>2]+ +g[f>>2]-h*Ea;Ca=c[(c[d>>2]|0)+16>>2]|0;g[Fa+416>>2]=-ga;g[Fa+416+4>>2]=-j;g[Fa+416+8>>2]=-h;g[Fa+416+12>>2]=0.0;Tb[Ca&15](d,Fa+416|0,Fa+448|0,-Ea);e=e+1|0;if((e|0)==(o|0))break b}}c:do if((o|0)>1){h=+g[Fa+144>>2];e=0;f=1;while(1){j=+g[Fa+144+(f<<2)>>2];a=j>h;e=a?f:e;f=f+1|0;if((f|0)==(o|0))break;else h=a?j:h}switch(o|0){case 1:{f=1;a=Fa+112|0;k=Fa+112|0;Aa=111;break c}case 2:{h=(+g[Fa+272+4>>2]+ +g[Fa+272+12>>2])*.5;j=(+g[Fa+272>>2]+ +g[Fa+272+8>>2])*.5;f=2;a=Fa+112|0;k=Fa+112|0;Aa=116;break c}default:{}}a=o+-1|0;s=0.0;t=0.0;h=0.0;f=0;do{Z=f<<1;ya=+g[Fa+272+(Z<<2)>>2];za=+g[Fa+272+(Z+3<<2)>>2];Da=+g[Fa+272+(Z+2<<2)>>2];Ea=+g[Fa+272+((Z|1)<<2)>>2];h=h+(ya*za-Da*Ea);t=t+(ya+Da)*(ya*za-Da*Ea);s=s+(za+Ea)*(ya*za-Da*Ea);f=f+1|0}while((f|0)!=(a|0));Z=o<<1;n=+g[Fa+272+(Z+-2<<2)>>2];p=+g[Fa+272+4>>2];q=+g[Fa+272>>2];r=+g[Fa+272+(Z+-1<<2)>>2];h=h+(n*p-q*r);if(+F(+h)>1.1920928955078125e-007)j=1.0/(h*3.0);else j=999999984306749440.0;if((o|0)>0){h=j*(s+(n*p-q*r)*(r+p));j=j*(t+(n*p-q*r)*(n+q));a=Fa+112|0;k=Fa+112|0;m=Fa+448|0;Aa=119;break}m=e;e=Fa+112|0;f=0}else{e=0;f=o;a=Fa+112|0;k=Fa+112|0;Aa=111}while(0);if((Aa|0)==111){h=+g[Fa+272+4>>2];j=+g[Fa+272>>2];Aa=116}if((Aa|0)==116){o=f;m=Fa+448|0;Aa=119}if((Aa|0)==119){f=0;do{Aa=f<<1;g[Fa+448+(f<<2)>>2]=+O(+(+g[Fa+272+((Aa|1)<<2)>>2]-h),+(+g[Fa+272+(Aa<<2)>>2]-j));f=f+1|0}while((f|0)!=(o|0));f=0;do{c[Fa+416+(f<<2)>>2]=1;f=f+1|0}while((f|0)!=(o|0));m=e;e=a;f=1}a=Fa+416+(m<<2)|0;c[a>>2]=0;c[e>>2]=m;d:do if((D|0)>1){p=+g[Fa+448+(m<<2)>>2];if(f){f=1;a=Fa+112+4|0}else{e=1;f=Fa+112+4|0;while(1){c[f>>2]=m;c[a>>2]=0;e=e+1|0;if((e|0)==(D|0))break d;else f=f+4|0}}while(1){n=6.2831854820251465/+(D|0)*+(f|0)+p;n=n>3.1415927410125732?n+-6.2831854820251465:n;c[a>>2]=m;j=1.0e9;k=0;e=m;while(1){do if(!(c[Fa+416+(k<<2)>>2]|0))h=j;else{h=+F(+(+g[Fa+448+(k<<2)>>2]-n));h=h>3.1415927410125732?6.2831854820251465-h:h;if(!(h<j)){h=j;break}c[a>>2]=k;e=k}while(0);k=k+1|0;if((k|0)==(o|0))break;else j=h}c[Fa+416+(e<<2)>>2]=0;f=f+1|0;if((f|0)==(D|0))break;else a=a+4|0}}while(0);if((D|0)>0){f=fa+8|0;j=(c[l>>2]=Ba,+g[l>>2]);h=(c[l>>2]=Ca,+g[l>>2]);if(da){e=0;do{Ca=c[Fa+112+(e<<2)>>2]|0;g[Fa+448>>2]=+g[Fa+176+(Ca*3<<2)>>2]+ +g[fa>>2];g[Fa+448+4>>2]=+g[Fa+176+((Ca*3|0)+1<<2)>>2]+ +g[ea>>2];g[Fa+448+8>>2]=+g[Fa+176+((Ca*3|0)+2<<2)>>2]+ +g[f>>2];Ba=c[(c[d>>2]|0)+16>>2]|0;g[Fa+416>>2]=-ga;g[Fa+416+4>>2]=-j;g[Fa+416+8>>2]=-h;g[Fa+416+12>>2]=0.0;Tb[Ba&15](d,Fa+416|0,Fa+448|0,-+g[Fa+144+(Ca<<2)>>2]);e=e+1|0}while((e|0)<(D|0))}else{e=0;do{Ba=c[Fa+112+(e<<2)>>2]|0;ya=+g[Fa+176+(Ba*3<<2)>>2]+ +g[fa>>2];g[Fa+448>>2]=ya;za=+g[Fa+176+((Ba*3|0)+1<<2)>>2]+ +g[ea>>2];g[Fa+448+4>>2]=za;Da=+g[Fa+176+((Ba*3|0)+2<<2)>>2]+ +g[f>>2];g[Fa+448+8>>2]=Da;Ca=c[(c[d>>2]|0)+16>>2]|0;g[Fa+416>>2]=-ga;g[Fa+416+4>>2]=-j;g[Fa+416+8>>2]=-h;g[Fa+416+12>>2]=0.0;Ea=+g[Fa+144+(Ba<<2)>>2];g[Fa+96>>2]=ya-ga*Ea;g[Fa+96+4>>2]=za-Ea*j;g[Fa+96+8>>2]=Da-Ea*h;g[Fa+96+12>>2]=0.0;Tb[Ca&15](d,Fa+416|0,Fa+96|0,-Ea);e=e+1|0}while((e|0)<(D|0))}}}while(0)}i=Fa;return}function ic(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;H=i;i=i+16|0;do if(a>>>0<245){r=a>>>0<11?16:a+11&-8;q=c[6327]|0;if(q>>>(r>>>3)&3|0){b=25348+((q>>>(r>>>3)&1^1)+(r>>>3)<<1<<2)|0;a=c[b+8>>2]|0;d=c[a+8>>2]|0;do if((b|0)!=(d|0)){if(d>>>0<(c[6331]|0)>>>0)Ua();if((c[d+12>>2]|0)==(a|0)){c[d+12>>2]=b;c[b+8>>2]=d;break}else Ua()}else c[6327]=q&~(1<<(q>>>(r>>>3)&1^1)+(r>>>3));while(0);G=(q>>>(r>>>3)&1^1)+(r>>>3)<<3;c[a+4>>2]=G|3;c[a+G+4>>2]=c[a+G+4>>2]|1;G=a+8|0;i=H;return G|0}p=c[6329]|0;if(r>>>0>p>>>0){if(q>>>(r>>>3)|0){b=q>>>(r>>>3)<<(r>>>3)&(2<<(r>>>3)|0-(2<<(r>>>3)));e=((b&0-b)+-1|0)>>>(((b&0-b)+-1|0)>>>12&16);d=e>>>(e>>>5&8)>>>(e>>>(e>>>5&8)>>>2&4);d=(e>>>5&8|((b&0-b)+-1|0)>>>12&16|e>>>(e>>>5&8)>>>2&4|d>>>1&2|d>>>(d>>>1&2)>>>1&1)+(d>>>(d>>>1&2)>>>(d>>>(d>>>1&2)>>>1&1))|0;e=c[25348+(d<<1<<2)+8>>2]|0;b=c[e+8>>2]|0;do if((25348+(d<<1<<2)|0)!=(b|0)){if(b>>>0<(c[6331]|0)>>>0)Ua();if((c[b+12>>2]|0)==(e|0)){c[b+12>>2]=25348+(d<<1<<2);c[25348+(d<<1<<2)+8>>2]=b;f=q;break}else Ua()}else{c[6327]=q&~(1<<d);f=q&~(1<<d)}while(0);c[e+4>>2]=r|3;c[e+r+4>>2]=(d<<3)-r|1;c[e+r+((d<<3)-r)>>2]=(d<<3)-r;if(p|0){a=c[6332]|0;if(f&1<<(p>>>3)){b=c[25348+(p>>>3<<1<<2)+8>>2]|0;if(b>>>0<(c[6331]|0)>>>0)Ua();else{h=b;j=25348+(p>>>3<<1<<2)+8|0}}else{c[6327]=f|1<<(p>>>3);h=25348+(p>>>3<<1<<2)|0;j=25348+(p>>>3<<1<<2)+8|0}c[j>>2]=a;c[h+12>>2]=a;c[a+8>>2]=h;c[a+12>>2]=25348+(p>>>3<<1<<2)}c[6329]=(d<<3)-r;c[6332]=e+r;G=e+8|0;i=H;return G|0}l=c[6328]|0;if(l){a=((l&0-l)+-1|0)>>>(((l&0-l)+-1|0)>>>12&16);k=a>>>(a>>>5&8)>>>(a>>>(a>>>5&8)>>>2&4);k=c[25612+((a>>>5&8|((l&0-l)+-1|0)>>>12&16|a>>>(a>>>5&8)>>>2&4|k>>>1&2|k>>>(k>>>1&2)>>>1&1)+(k>>>(k>>>1&2)>>>(k>>>(k>>>1&2)>>>1&1))<<2)>>2]|0;a=k;j=k;k=(c[k+4>>2]&-8)-r|0;while(1){b=c[a+16>>2]|0;if(!b){b=c[a+20>>2]|0;if(!b)break}G=(c[b+4>>2]&-8)-r|0;F=G>>>0<k>>>0;a=b;j=F?b:j;k=F?G:k}f=c[6331]|0;if(j>>>0<f>>>0)Ua();h=j+r|0;if(j>>>0>=h>>>0)Ua();g=c[j+24>>2]|0;b=c[j+12>>2]|0;do if((b|0)==(j|0)){a=j+20|0;b=c[a>>2]|0;if(!b){a=j+16|0;b=c[a>>2]|0;if(!b){m=0;break}}while(1){d=b+20|0;e=c[d>>2]|0;if(e|0){b=e;a=d;continue}d=b+16|0;e=c[d>>2]|0;if(!e)break;else{b=e;a=d}}if(a>>>0<f>>>0)Ua();else{c[a>>2]=0;m=b;break}}else{a=c[j+8>>2]|0;if(a>>>0<f>>>0)Ua();if((c[a+12>>2]|0)!=(j|0))Ua();if((c[b+8>>2]|0)==(j|0)){c[a+12>>2]=b;c[b+8>>2]=a;m=b;break}else Ua()}while(0);do if(g|0){b=c[j+28>>2]|0;if((j|0)==(c[25612+(b<<2)>>2]|0)){c[25612+(b<<2)>>2]=m;if(!m){c[6328]=l&~(1<<b);break}}else{if(g>>>0<(c[6331]|0)>>>0)Ua();if((c[g+16>>2]|0)==(j|0))c[g+16>>2]=m;else c[g+20>>2]=m;if(!m)break}a=c[6331]|0;if(m>>>0<a>>>0)Ua();c[m+24>>2]=g;b=c[j+16>>2]|0;do if(b|0)if(b>>>0<a>>>0)Ua();else{c[m+16>>2]=b;c[b+24>>2]=m;break}while(0);b=c[j+20>>2]|0;if(b|0)if(b>>>0<(c[6331]|0)>>>0)Ua();else{c[m+20>>2]=b;c[b+24>>2]=m;break}}while(0);if(k>>>0<16){G=k+r|0;c[j+4>>2]=G|3;G=j+G+4|0;c[G>>2]=c[G>>2]|1}else{c[j+4>>2]=r|3;c[h+4>>2]=k|1;c[h+k>>2]=k;if(p|0){a=c[6332]|0;if(q&1<<(p>>>3)){b=c[25348+(p>>>3<<1<<2)+8>>2]|0;if(b>>>0<(c[6331]|0)>>>0)Ua();else{n=b;o=25348+(p>>>3<<1<<2)+8|0}}else{c[6327]=q|1<<(p>>>3);n=25348+(p>>>3<<1<<2)|0;o=25348+(p>>>3<<1<<2)+8|0}c[o>>2]=a;c[n+12>>2]=a;c[a+8>>2]=n;c[a+12>>2]=25348+(p>>>3<<1<<2)}c[6329]=k;c[6332]=h}G=j+8|0;i=H;return G|0}}}else if(a>>>0<=4294967231){r=a+11&-8;l=c[6328]|0;if(l){if((a+11|0)>>>8)if(r>>>0>16777215)k=31;else{k=(a+11|0)>>>8<<((((a+11|0)>>>8)+1048320|0)>>>16&8);k=14-((k+520192|0)>>>16&4|(((a+11|0)>>>8)+1048320|0)>>>16&8|((k<<((k+520192|0)>>>16&4))+245760|0)>>>16&2)+(k<<((k+520192|0)>>>16&4)<<(((k<<((k+520192|0)>>>16&4))+245760|0)>>>16&2)>>>15)|0;k=r>>>(k+7|0)&1|k<<1}else k=0;a=c[25612+(k<<2)>>2]|0;a:do if(!a){a=0;e=0;d=0-r|0;z=86}else{e=0;d=0-r|0;j=r<<((k|0)==31?0:25-(k>>>1)|0);h=0;while(1){f=(c[a+4>>2]&-8)-r|0;if(f>>>0<d>>>0)if(!f){h=a;d=0;e=a;z=90;break a}else{e=a;d=f}f=c[a+20>>2]|0;a=c[a+16+(j>>>31<<2)>>2]|0;h=(f|0)==0|(f|0)==(a|0)?h:f;f=(a|0)==0;if(f){a=h;z=86;break}else j=j<<(f&1^1)}}while(0);if((z|0)==86){if((a|0)==0&(e|0)==0){a=2<<k;if(!(l&(a|0-a)))break;n=(l&(a|0-a)&0-(l&(a|0-a)))+-1|0;o=n>>>(n>>>12&16)>>>(n>>>(n>>>12&16)>>>5&8);a=o>>>(o>>>2&4)>>>(o>>>(o>>>2&4)>>>1&2);a=c[25612+((n>>>(n>>>12&16)>>>5&8|n>>>12&16|o>>>2&4|o>>>(o>>>2&4)>>>1&2|a>>>1&1)+(a>>>(a>>>1&1))<<2)>>2]|0}if(!a){k=e;j=d}else{h=e;e=a;z=90}}if((z|0)==90)while(1){z=0;f=(c[e+4>>2]&-8)-r|0;a=f>>>0<d>>>0;d=a?f:d;a=a?e:h;f=c[e+16>>2]|0;if(f|0){h=a;e=f;z=90;continue}e=c[e+20>>2]|0;if(!e){k=a;j=d;break}else{h=a;z=90}}if((k|0)!=0?j>>>0<((c[6329]|0)-r|0)>>>0:0){f=c[6331]|0;if(k>>>0<f>>>0)Ua();h=k+r|0;if(k>>>0>=h>>>0)Ua();g=c[k+24>>2]|0;b=c[k+12>>2]|0;do if((b|0)==(k|0)){a=k+20|0;b=c[a>>2]|0;if(!b){a=k+16|0;b=c[a>>2]|0;if(!b){p=0;break}}while(1){d=b+20|0;e=c[d>>2]|0;if(e|0){b=e;a=d;continue}d=b+16|0;e=c[d>>2]|0;if(!e)break;else{b=e;a=d}}if(a>>>0<f>>>0)Ua();else{c[a>>2]=0;p=b;break}}else{a=c[k+8>>2]|0;if(a>>>0<f>>>0)Ua();if((c[a+12>>2]|0)!=(k|0))Ua();if((c[b+8>>2]|0)==(k|0)){c[a+12>>2]=b;c[b+8>>2]=a;p=b;break}else Ua()}while(0);do if(g){b=c[k+28>>2]|0;if((k|0)==(c[25612+(b<<2)>>2]|0)){c[25612+(b<<2)>>2]=p;if(!p){c[6328]=l&~(1<<b);x=l&~(1<<b);break}}else{if(g>>>0<(c[6331]|0)>>>0)Ua();if((c[g+16>>2]|0)==(k|0))c[g+16>>2]=p;else c[g+20>>2]=p;if(!p){x=l;break}}a=c[6331]|0;if(p>>>0<a>>>0)Ua();c[p+24>>2]=g;b=c[k+16>>2]|0;do if(b|0)if(b>>>0<a>>>0)Ua();else{c[p+16>>2]=b;c[b+24>>2]=p;break}while(0);b=c[k+20>>2]|0;if(b)if(b>>>0<(c[6331]|0)>>>0)Ua();else{c[p+20>>2]=b;c[b+24>>2]=p;x=l;break}else x=l}else x=l;while(0);do if(j>>>0>=16){c[k+4>>2]=r|3;c[h+4>>2]=j|1;c[h+j>>2]=j;a=j>>>3;if(j>>>0<256){b=c[6327]|0;if(b&1<<a){b=c[25348+(a<<1<<2)+8>>2]|0;if(b>>>0<(c[6331]|0)>>>0)Ua();else{q=b;u=25348+(a<<1<<2)+8|0}}else{c[6327]=b|1<<a;q=25348+(a<<1<<2)|0;u=25348+(a<<1<<2)+8|0}c[u>>2]=h;c[q+12>>2]=h;c[h+8>>2]=q;c[h+12>>2]=25348+(a<<1<<2);break}b=j>>>8;if(b)if(j>>>0>16777215)b=31;else{G=b<<((b+1048320|0)>>>16&8)<<(((b<<((b+1048320|0)>>>16&8))+520192|0)>>>16&4);b=14-(((b<<((b+1048320|0)>>>16&8))+520192|0)>>>16&4|(b+1048320|0)>>>16&8|(G+245760|0)>>>16&2)+(G<<((G+245760|0)>>>16&2)>>>15)|0;b=j>>>(b+7|0)&1|b<<1}else b=0;d=25612+(b<<2)|0;c[h+28>>2]=b;c[h+16+4>>2]=0;c[h+16>>2]=0;a=1<<b;if(!(x&a)){c[6328]=x|a;c[d>>2]=h;c[h+24>>2]=d;c[h+12>>2]=h;c[h+8>>2]=h;break}a=j<<((b|0)==31?0:25-(b>>>1)|0);e=c[d>>2]|0;while(1){if((c[e+4>>2]&-8|0)==(j|0)){z=148;break}d=e+16+(a>>>31<<2)|0;b=c[d>>2]|0;if(!b){z=145;break}else{a=a<<1;e=b}}if((z|0)==145)if(d>>>0<(c[6331]|0)>>>0)Ua();else{c[d>>2]=h;c[h+24>>2]=e;c[h+12>>2]=h;c[h+8>>2]=h;break}else if((z|0)==148){b=e+8|0;a=c[b>>2]|0;G=c[6331]|0;if(a>>>0>=G>>>0&e>>>0>=G>>>0){c[a+12>>2]=h;c[b>>2]=h;c[h+8>>2]=a;c[h+12>>2]=e;c[h+24>>2]=0;break}else Ua()}}else{G=j+r|0;c[k+4>>2]=G|3;G=k+G+4|0;c[G>>2]=c[G>>2]|1}while(0);G=k+8|0;i=H;return G|0}}}else r=-1;while(0);d=c[6329]|0;if(d>>>0>=r>>>0){b=d-r|0;a=c[6332]|0;if(b>>>0>15){G=a+r|0;c[6332]=G;c[6329]=b;c[G+4>>2]=b|1;c[G+b>>2]=b;c[a+4>>2]=r|3}else{c[6329]=0;c[6332]=0;c[a+4>>2]=d|3;c[a+d+4>>2]=c[a+d+4>>2]|1}G=a+8|0;i=H;return G|0}f=c[6330]|0;if(f>>>0>r>>>0){E=f-r|0;c[6330]=E;G=c[6333]|0;F=G+r|0;c[6333]=F;c[F+4>>2]=E|1;c[G+4>>2]=r|3;G=G+8|0;i=H;return G|0}if(!(c[6445]|0)){c[6447]=4096;c[6446]=4096;c[6448]=-1;c[6449]=-1;c[6450]=0;c[6438]=0;c[H>>2]=H&-16^1431655768;c[6445]=H&-16^1431655768;a=4096}else a=c[6447]|0;h=r+48|0;j=r+47|0;l=a+j|0;k=0-a|0;if((l&k)>>>0<=r>>>0){G=0;i=H;return G|0}a=c[6437]|0;if(a|0?(x=c[6435]|0,(x+(l&k)|0)>>>0<=x>>>0?1:(x+(l&k)|0)>>>0>a>>>0):0){G=0;i=H;return G|0}b:do if(!(c[6438]&4)){e=c[6333]|0;c:do if(e){d=25756;while(1){a=c[d>>2]|0;if(a>>>0<=e>>>0?(s=d+4|0,(a+(c[s>>2]|0)|0)>>>0>e>>>0):0)break;a=c[d+8>>2]|0;if(!a){z=172;break c}else d=a}if((l-f&k)>>>0<2147483647){a=mo(l-f&k|0)|0;if((a|0)==((c[d>>2]|0)+(c[s>>2]|0)|0)){if((a|0)!=(-1|0)){h=l-f&k;g=a;z=190;break b}}else{b=l-f&k;z=180}}}else z=172;while(0);do if(((z|0)==172?(g=mo(0)|0,(g|0)!=(-1|0)):0)?(b=c[6446]|0,b=((b+-1&g|0)==0?0:(b+-1+g&0-b)-g|0)+(l&k)|0,t=c[6435]|0,b>>>0>r>>>0&b>>>0<2147483647):0){x=c[6437]|0;if(x|0?(b+t|0)>>>0<=t>>>0|(b+t|0)>>>0>x>>>0:0)break;a=mo(b|0)|0;if((a|0)==(g|0)){h=b;z=190;break b}else z=180}while(0);d:do if((z|0)==180){d=0-b|0;do if(h>>>0>b>>>0&(b>>>0<2147483647&(a|0)!=(-1|0))?(v=c[6447]|0,v=j-b+v&0-v,v>>>0<2147483647):0)if((mo(v|0)|0)==(-1|0)){mo(d|0)|0;break d}else{b=v+b|0;break}while(0);if((a|0)!=(-1|0)){h=b;g=a;z=190;break b}}while(0);c[6438]=c[6438]|4;z=187}else z=187;while(0);if((((z|0)==187?(l&k)>>>0<2147483647:0)?(y=mo(l&k|0)|0,w=mo(0)|0,y>>>0<w>>>0&((y|0)!=(-1|0)&(w|0)!=(-1|0))):0)?(w-y|0)>>>0>(r+40|0)>>>0:0){h=w-y|0;g=y;z=190}if((z|0)==190){b=(c[6435]|0)+h|0;c[6435]=b;if(b>>>0>(c[6436]|0)>>>0)c[6436]=b;j=c[6333]|0;do if(j){b=25756;while(1){a=c[b>>2]|0;d=b+4|0;e=c[d>>2]|0;if((g|0)==(a+e|0)){z=200;break}f=c[b+8>>2]|0;if(!f)break;else b=f}if(((z|0)==200?(c[b+12>>2]&8|0)==0:0)?j>>>0<g>>>0&j>>>0>=a>>>0:0){c[d>>2]=e+h;F=(j+8&7|0)==0?0:0-(j+8)&7;G=h-F+(c[6330]|0)|0;c[6333]=j+F;c[6330]=G;c[j+F+4>>2]=G|1;c[j+F+G+4>>2]=40;c[6334]=c[6449];break}b=c[6331]|0;if(g>>>0<b>>>0){c[6331]=g;k=g}else k=b;a=g+h|0;b=25756;while(1){if((c[b>>2]|0)==(a|0)){z=208;break}b=c[b+8>>2]|0;if(!b){a=25756;break}}if((z|0)==208)if(!(c[b+12>>2]&8)){c[b>>2]=g;m=b+4|0;c[m>>2]=(c[m>>2]|0)+h;m=g+8|0;m=g+((m&7|0)==0?0:0-m&7)|0;b=a+((a+8&7|0)==0?0:0-(a+8)&7)|0;l=m+r|0;f=b-m-r|0;c[m+4>>2]=r|3;do if((b|0)!=(j|0)){if((b|0)==(c[6332]|0)){G=(c[6329]|0)+f|0;c[6329]=G;c[6332]=l;c[l+4>>2]=G|1;c[l+G>>2]=G;break}j=c[b+4>>2]|0;if((j&3|0)==1){e:do if(j>>>0>=256){h=c[b+24>>2]|0;a=c[b+12>>2]|0;do if((a|0)==(b|0)){a=c[b+16+4>>2]|0;if(!a){a=c[b+16>>2]|0;if(!a){E=0;break}else g=b+16|0}else g=b+16+4|0;while(1){d=a+20|0;e=c[d>>2]|0;if(e|0){a=e;g=d;continue}d=a+16|0;e=c[d>>2]|0;if(!e)break;else{a=e;g=d}}if(g>>>0<k>>>0)Ua();else{c[g>>2]=0;E=a;break}}else{d=c[b+8>>2]|0;if(d>>>0<k>>>0)Ua();if((c[d+12>>2]|0)!=(b|0))Ua();if((c[a+8>>2]|0)==(b|0)){c[d+12>>2]=a;c[a+8>>2]=d;E=a;break}else Ua()}while(0);if(!h)break;a=c[b+28>>2]|0;do if((b|0)!=(c[25612+(a<<2)>>2]|0)){if(h>>>0<(c[6331]|0)>>>0)Ua();if((c[h+16>>2]|0)==(b|0))c[h+16>>2]=E;else c[h+20>>2]=E;if(!E)break e}else{c[25612+(a<<2)>>2]=E;if(E|0)break;c[6328]=c[6328]&~(1<<a);break e}while(0);d=c[6331]|0;if(E>>>0<d>>>0)Ua();c[E+24>>2]=h;a=c[b+16>>2]|0;do if(a|0)if(a>>>0<d>>>0)Ua();else{c[E+16>>2]=a;c[a+24>>2]=E;break}while(0);a=c[b+16+4>>2]|0;if(!a)break;if(a>>>0<(c[6331]|0)>>>0)Ua();else{c[E+20>>2]=a;c[a+24>>2]=E;break}}else{a=c[b+8>>2]|0;d=c[b+12>>2]|0;do if((a|0)!=(25348+(j>>>3<<1<<2)|0)){if(a>>>0<k>>>0)Ua();if((c[a+12>>2]|0)==(b|0))break;Ua()}while(0);if((d|0)==(a|0)){c[6327]=c[6327]&~(1<<(j>>>3));break}do if((d|0)==(25348+(j>>>3<<1<<2)|0))D=d+8|0;else{if(d>>>0<k>>>0)Ua();if((c[d+8>>2]|0)==(b|0)){D=d+8|0;break}Ua()}while(0);c[a+12>>2]=d;c[D>>2]=a}while(0);b=b+(j&-8)|0;f=(j&-8)+f|0}a=b+4|0;c[a>>2]=c[a>>2]&-2;c[l+4>>2]=f|1;c[l+f>>2]=f;a=f>>>3;if(f>>>0<256){b=c[6327]|0;do if(!(b&1<<a)){c[6327]=b|1<<a;F=25348+(a<<1<<2)|0;G=25348+(a<<1<<2)+8|0}else{b=c[25348+(a<<1<<2)+8>>2]|0;if(b>>>0>=(c[6331]|0)>>>0){F=b;G=25348+(a<<1<<2)+8|0;break}Ua()}while(0);c[G>>2]=l;c[F+12>>2]=l;c[l+8>>2]=F;c[l+12>>2]=25348+(a<<1<<2);break}b=f>>>8;do if(!b)b=0;else{if(f>>>0>16777215){b=31;break}G=b<<((b+1048320|0)>>>16&8)<<(((b<<((b+1048320|0)>>>16&8))+520192|0)>>>16&4);b=14-(((b<<((b+1048320|0)>>>16&8))+520192|0)>>>16&4|(b+1048320|0)>>>16&8|(G+245760|0)>>>16&2)+(G<<((G+245760|0)>>>16&2)>>>15)|0;b=f>>>(b+7|0)&1|b<<1}while(0);e=25612+(b<<2)|0;c[l+28>>2]=b;c[l+16+4>>2]=0;c[l+16>>2]=0;a=c[6328]|0;d=1<<b;if(!(a&d)){c[6328]=a|d;c[e>>2]=l;c[l+24>>2]=e;c[l+12>>2]=l;c[l+8>>2]=l;break}a=f<<((b|0)==31?0:25-(b>>>1)|0);e=c[e>>2]|0;while(1){if((c[e+4>>2]&-8|0)==(f|0)){z=278;break}d=e+16+(a>>>31<<2)|0;b=c[d>>2]|0;if(!b){z=275;break}else{a=a<<1;e=b}}if((z|0)==275)if(d>>>0<(c[6331]|0)>>>0)Ua();else{c[d>>2]=l;c[l+24>>2]=e;c[l+12>>2]=l;c[l+8>>2]=l;break}else if((z|0)==278){b=e+8|0;a=c[b>>2]|0;G=c[6331]|0;if(a>>>0>=G>>>0&e>>>0>=G>>>0){c[a+12>>2]=l;c[b>>2]=l;c[l+8>>2]=a;c[l+12>>2]=e;c[l+24>>2]=0;break}else Ua()}}else{G=(c[6330]|0)+f|0;c[6330]=G;c[6333]=l;c[l+4>>2]=G|1}while(0);G=m+8|0;i=H;return G|0}else a=25756;while(1){b=c[a>>2]|0;if(b>>>0<=j>>>0?(A=b+(c[a+4>>2]|0)|0,A>>>0>j>>>0):0)break;a=c[a+8>>2]|0}f=A+-47+((A+-47+8&7|0)==0?0:0-(A+-47+8)&7)|0;f=f>>>0<(j+16|0)>>>0?j:f;b=g+8|0;b=(b&7|0)==0?0:0-b&7;G=g+b|0;b=h+-40-b|0;c[6333]=G;c[6330]=b;c[G+4>>2]=b|1;c[G+b+4>>2]=40;c[6334]=c[6449];c[f+4>>2]=27;c[f+8>>2]=c[6439];c[f+8+4>>2]=c[6440];c[f+8+8>>2]=c[6441];c[f+8+12>>2]=c[6442];c[6439]=g;c[6440]=h;c[6442]=0;c[6441]=f+8;b=f+24|0;do{b=b+4|0;c[b>>2]=7}while((b+4|0)>>>0<A>>>0);if((f|0)!=(j|0)){c[f+4>>2]=c[f+4>>2]&-2;c[j+4>>2]=f-j|1;c[f>>2]=f-j;if((f-j|0)>>>0<256){a=25348+((f-j|0)>>>3<<1<<2)|0;b=c[6327]|0;if(b&1<<((f-j|0)>>>3)){b=c[a+8>>2]|0;if(b>>>0<(c[6331]|0)>>>0)Ua();else{B=b;C=a+8|0}}else{c[6327]=b|1<<((f-j|0)>>>3);B=a;C=a+8|0}c[C>>2]=j;c[B+12>>2]=j;c[j+8>>2]=B;c[j+12>>2]=a;break}if((f-j|0)>>>8)if((f-j|0)>>>0>16777215)b=31;else{b=(f-j|0)>>>8<<((((f-j|0)>>>8)+1048320|0)>>>16&8);b=14-((b+520192|0)>>>16&4|(((f-j|0)>>>8)+1048320|0)>>>16&8|((b<<((b+520192|0)>>>16&4))+245760|0)>>>16&2)+(b<<((b+520192|0)>>>16&4)<<(((b<<((b+520192|0)>>>16&4))+245760|0)>>>16&2)>>>15)|0;b=(f-j|0)>>>(b+7|0)&1|b<<1}else b=0;e=25612+(b<<2)|0;c[j+28>>2]=b;c[j+20>>2]=0;c[j+16>>2]=0;a=c[6328]|0;d=1<<b;if(!(a&d)){c[6328]=a|d;c[e>>2]=j;c[j+24>>2]=e;c[j+12>>2]=j;c[j+8>>2]=j;break}a=f-j<<((b|0)==31?0:25-(b>>>1)|0);e=c[e>>2]|0;while(1){if((c[e+4>>2]&-8|0)==(f-j|0)){z=304;break}d=e+16+(a>>>31<<2)|0;b=c[d>>2]|0;if(!b){z=301;break}else{a=a<<1;e=b}}if((z|0)==301)if(d>>>0<(c[6331]|0)>>>0)Ua();else{c[d>>2]=j;c[j+24>>2]=e;c[j+12>>2]=j;c[j+8>>2]=j;break}else if((z|0)==304){b=e+8|0;a=c[b>>2]|0;G=c[6331]|0;if(a>>>0>=G>>>0&e>>>0>=G>>>0){c[a+12>>2]=j;c[b>>2]=j;c[j+8>>2]=a;c[j+12>>2]=e;c[j+24>>2]=0;break}else Ua()}}}else{G=c[6331]|0;if((G|0)==0|g>>>0<G>>>0)c[6331]=g;c[6439]=g;c[6440]=h;c[6442]=0;c[6336]=c[6445];c[6335]=-1;b=0;do{G=25348+(b<<1<<2)|0;c[G+12>>2]=G;c[G+8>>2]=G;b=b+1|0}while((b|0)!=32);G=g+8|0;G=(G&7|0)==0?0:0-G&7;F=g+G|0;G=h+-40-G|0;c[6333]=F;c[6330]=G;c[F+4>>2]=G|1;c[F+G+4>>2]=40;c[6334]=c[6449]}while(0);b=c[6330]|0;if(b>>>0>r>>>0){E=b-r|0;c[6330]=E;G=c[6333]|0;F=G+r|0;c[6333]=F;c[F+4>>2]=E|1;c[G+4>>2]=r|3;G=G+8|0;i=H;return G|0}}c[6326]=12;G=0;i=H;return G|0}function jc(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0,j=0.0,k=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0,w=0.0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0;Q=i;i=i+448|0;if(!(a[b+527>>0]|0)){i=Q;return}P=c[b+28>>2]|0;C=+g[b+348>>2];B=+g[b+352>>2];J=+g[b+356>>2];D=+g[P+52>>2];E=C*+g[P+4>>2]+B*+g[P+8>>2]+J*+g[P+12>>2]+D;F=+g[P+56>>2];H=C*+g[P+20>>2]+B*+g[P+24>>2]+J*+g[P+28>>2]+F;I=+g[P+60>>2];J=C*+g[P+36>>2]+B*+g[P+40>>2]+J*+g[P+44>>2]+I;P=c[b+32>>2]|0;B=+g[b+412>>2];C=+g[b+416>>2];r=+g[b+420>>2];k=+g[P+52>>2];m=B*+g[P+4>>2]+C*+g[P+8>>2]+r*+g[P+12>>2]+k;n=+g[P+56>>2];o=B*+g[P+20>>2]+C*+g[P+24>>2]+r*+g[P+28>>2]+n;q=+g[P+60>>2];r=B*+g[P+36>>2]+C*+g[P+40>>2]+r*+g[P+44>>2]+q;if(!(a[b+524>>0]|0)){A=+g[d+192>>2]+ +g[d+80>>2];B=+g[d+196>>2]+ +g[d+84>>2];z=+g[d+200>>2]+ +g[d+88>>2];C=+g[e+192>>2]+ +g[e+80>>2];y=+g[e+196>>2]+ +g[e+84>>2];w=+g[e+200>>2]+ +g[e+88>>2];s=+g[d+176>>2]+ +g[d+64>>2]+((J-I)*B-(H-F)*z)-(+g[e+176>>2]+ +g[e+64>>2]+((r-q)*y-(o-n)*w));w=+g[d+180>>2]+ +g[d+68>>2]+((E-D)*z-(J-I)*A)-(+g[e+180>>2]+ +g[e+68>>2]+((m-k)*w-(r-q)*C));y=+g[d+184>>2]+ +g[d+72>>2]+((H-F)*A-(E-D)*B)-(+g[e+184>>2]+ +g[e+72>>2]+((o-n)*C-(m-k)*y));t=(c[d+240>>2]|0)==0;p=0;do{C=1.0/+g[b+48+(p*84|0)+80>>2];u=b+48+(p*84|0)|0;B=+g[u>>2];v=b+48+(p*84|0)+4|0;A=+g[v>>2];x=b+48+(p*84|0)+8|0;z=+g[x>>2];z=C*(((E-m)*B+(H-o)*A+(J-r)*z)*-.30000001192092896/f)-C*(s*B+w*A+y*z);g[b+36>>2]=+g[b+36>>2]+z;A=+g[x>>2];B=+g[v>>2];C=+g[u>>2];h=c[b+28>>2]|0;j=+g[h+384>>2];if(!t){T=((H-F)*A-(J-I)*B)*+g[h+336>>2]+((J-I)*C-(E-D)*A)*+g[h+340>>2]+((E-D)*B-(H-F)*C)*+g[h+344>>2];R=((H-F)*A-(J-I)*B)*+g[h+320>>2]+((J-I)*C-(E-D)*A)*+g[h+324>>2]+((E-D)*B-(H-F)*C)*+g[h+328>>2];S=((H-F)*A-(J-I)*B)*+g[h+304>>2]+((J-I)*C-(E-D)*A)*+g[h+308>>2]+((E-D)*B-(H-F)*C)*+g[h+312>>2];V=z*B*j*+g[d+116>>2];U=z*A*j*+g[d+120>>2];g[d+64>>2]=z*C*j*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=V+ +g[d+68>>2];g[d+72>>2]=U+ +g[d+72>>2];R=R*z*+g[d+100>>2];j=T*z*+g[d+104>>2];g[d+80>>2]=S*z*+g[d+96>>2]+ +g[d+80>>2];g[d+84>>2]=R+ +g[d+84>>2];g[d+88>>2]=j+ +g[d+88>>2]}h=c[b+32>>2]|0;j=+g[h+384>>2];if(c[e+240>>2]|0){V=((o-n)*A-(r-q)*B)*+g[h+336>>2]+((r-q)*C-(m-k)*A)*+g[h+340>>2]+((m-k)*B-(o-n)*C)*+g[h+344>>2];U=((o-n)*A-(r-q)*B)*+g[h+320>>2]+((r-q)*C-(m-k)*A)*+g[h+324>>2]+((m-k)*B-(o-n)*C)*+g[h+328>>2];T=((o-n)*A-(r-q)*B)*+g[h+304>>2]+((r-q)*C-(m-k)*A)*+g[h+308>>2]+((m-k)*B-(o-n)*C)*+g[h+312>>2];R=j*+g[v>>2]*-z*+g[e+116>>2];S=j*+g[x>>2]*-z*+g[e+120>>2];g[e+64>>2]=+g[e+112>>2]*j*+g[u>>2]*-z+ +g[e+64>>2];g[e+68>>2]=R+ +g[e+68>>2];g[e+72>>2]=S+ +g[e+72>>2];U=U*+g[e+100>>2]*-z;V=V*+g[e+104>>2]*-z;g[e+80>>2]=T*+g[e+96>>2]*-z+ +g[e+80>>2];g[e+84>>2]=U+ +g[e+84>>2];g[e+88>>2]=V+ +g[e+88>>2]}p=p+1|0}while((p|0)!=3)}do if(!(a[b+552>>0]|0)){j=+g[b+440>>2];if(!(j>1.1920928955078125e-007)){K=d+80|0;p=d+196|0;L=d+84|0;t=d+200|0;M=d+88|0;u=e+192|0;N=e+80|0;v=e+196|0;O=e+84|0;x=e+200|0;P=e+88|0;h=d+192|0;break}k=+g[e+192>>2]+ +g[e+80>>2]-(+g[d+192>>2]+ +g[d+80>>2]);m=+g[e+196>>2]+ +g[e+84>>2]-(+g[d+196>>2]+ +g[d+84>>2]);n=+g[e+200>>2]+ +g[e+88>>2]-(+g[d+200>>2]+ +g[d+88>>2]);if(k*k+m*m+n*n>1.1920928955078125e-007){D=1.0/+G(+(k*k+m*m+n*n));h=c[b+28>>2]|0;q=+g[h+304>>2];r=+g[h+320>>2];s=+g[h+336>>2];w=+g[h+308>>2];y=+g[h+324>>2];z=+g[h+340>>2];A=+g[h+312>>2];B=+g[h+328>>2];C=+g[h+344>>2];h=c[b+32>>2]|0;j=j*(1.0/(k*D*(q*k*D+m*D*r+n*D*s)+m*D*(k*D*w+m*D*y+n*D*z)+n*D*(k*D*A+m*D*B+n*D*C)+(k*D*(k*D*+g[h+304>>2]+m*D*+g[h+320>>2]+n*D*+g[h+336>>2])+m*D*(k*D*+g[h+308>>2]+m*D*+g[h+324>>2]+n*D*+g[h+340>>2])+n*D*(k*D*+g[h+312>>2]+m*D*+g[h+328>>2]+n*D*+g[h+344>>2]))));D=+G(+(n*j*n*j+(k*j*k*j+m*j*m*j)));o=1.0/D*k*j;k=1.0/D*m*j;j=1.0/D*n*j;if(c[d+240>>2]|0){V=D*0.0*+g[d+116>>2];U=D*0.0*+g[d+120>>2];g[d+64>>2]=D*0.0*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=V+ +g[d+68>>2];g[d+72>>2]=U+ +g[d+72>>2];U=(o*r+k*y+j*B)*D*+g[d+100>>2];V=(o*s+k*z+j*C)*D*+g[d+104>>2];g[d+80>>2]=(o*q+k*w+j*A)*D*+g[d+96>>2]+ +g[d+80>>2];g[d+84>>2]=U+ +g[d+84>>2];g[d+88>>2]=V+ +g[d+88>>2];h=c[b+32>>2]|0}if(c[e+240>>2]|0){V=o*+g[h+336>>2]+k*+g[h+340>>2]+j*+g[h+344>>2];U=o*+g[h+320>>2]+k*+g[h+324>>2]+j*+g[h+328>>2];T=o*+g[h+304>>2]+k*+g[h+308>>2]+j*+g[h+312>>2];R=D*-0.0*+g[e+116>>2];S=D*-0.0*+g[e+120>>2];g[e+64>>2]=D*-0.0*+g[e+112>>2]+ +g[e+64>>2];g[e+68>>2]=R+ +g[e+68>>2];g[e+72>>2]=S+ +g[e+72>>2];U=U*+g[e+100>>2]*-D;V=V*+g[e+104>>2]*-D;g[e+80>>2]=T*+g[e+96>>2]*-D+ +g[e+80>>2];g[e+84>>2]=U+ +g[e+84>>2];g[e+88>>2]=V+ +g[e+88>>2];K=d+80|0;p=d+196|0;L=d+84|0;t=d+200|0;M=d+88|0;u=e+192|0;N=e+80|0;v=e+196|0;O=e+84|0;x=e+200|0;P=e+88|0;h=d+192|0}else{K=d+80|0;p=d+196|0;L=d+84|0;t=d+200|0;M=d+88|0;u=e+192|0;N=e+80|0;v=e+196|0;O=e+84|0;x=e+200|0;P=e+88|0;h=d+192|0}}else{K=d+80|0;p=d+196|0;L=d+84|0;t=d+200|0;M=d+88|0;u=e+192|0;N=e+80|0;v=e+196|0;O=e+84|0;x=e+200|0;P=e+88|0;h=d+192|0}}else{O=c[b+28>>2]|0;c[Q+352>>2]=c[O+4>>2];c[Q+352+4>>2]=c[O+4+4>>2];c[Q+352+8>>2]=c[O+4+8>>2];c[Q+352+12>>2]=c[O+4+12>>2];c[Q+352+16>>2]=c[O+20>>2];c[Q+352+16+4>>2]=c[O+20+4>>2];c[Q+352+16+8>>2]=c[O+20+8>>2];c[Q+352+16+12>>2]=c[O+20+12>>2];c[Q+352+32>>2]=c[O+36>>2];c[Q+352+32+4>>2]=c[O+36+4>>2];c[Q+352+32+8>>2]=c[O+36+8>>2];c[Q+352+32+12>>2]=c[O+36+12>>2];c[Q+352+48>>2]=c[O+52>>2];c[Q+352+48+4>>2]=c[O+52+4>>2];c[Q+352+48+8>>2]=c[O+52+8>>2];c[Q+352+48+12>>2]=c[O+52+12>>2];O=c[b+32>>2]|0;c[Q+288>>2]=c[O+4>>2];c[Q+288+4>>2]=c[O+4+4>>2];c[Q+288+8>>2]=c[O+4+8>>2];c[Q+288+12>>2]=c[O+4+12>>2];c[Q+288+16>>2]=c[O+20>>2];c[Q+288+16+4>>2]=c[O+20+4>>2];c[Q+288+16+8>>2]=c[O+20+8>>2];c[Q+288+16+12>>2]=c[O+20+12>>2];c[Q+288+32>>2]=c[O+36>>2];c[Q+288+32+4>>2]=c[O+36+4>>2];c[Q+288+32+8>>2]=c[O+36+8>>2];c[Q+288+32+12>>2]=c[O+36+12>>2];c[Q+288+48>>2]=c[O+52>>2];c[Q+288+48+4>>2]=c[O+52+4>>2];c[Q+288+48+8>>2]=c[O+52+8>>2];c[Q+288+48+12>>2]=c[O+52+12>>2];T=+g[d+196>>2]+ +g[d+84>>2];s=+g[d+200>>2]+ +g[d+88>>2];g[Q+272>>2]=+g[d+192>>2]+ +g[d+80>>2];g[Q+272+4>>2]=T;g[Q+272+8>>2]=s;g[Q+272+12>>2]=0.0;s=+g[e+196>>2]+ +g[e+84>>2];T=+g[e+200>>2]+ +g[e+88>>2];g[Q+256>>2]=+g[e+192>>2]+ +g[e+80>>2];g[Q+256+4>>2]=s;g[Q+256+8>>2]=T;g[Q+256+12>>2]=0.0;c[Q+192>>2]=1065353216;O=Q+192+4|0;c[O>>2]=0;c[O+4>>2]=0;c[O+8>>2]=0;c[O+12>>2]=0;c[Q+192+20>>2]=1065353216;P=Q+192+24|0;c[P>>2]=0;c[P+4>>2]=0;c[P+8>>2]=0;c[P+12>>2]=0;c[Q+192+40>>2]=1065353216;M=Q+192+44|0;c[M>>2]=0;c[M+4>>2]=0;c[M+8>>2]=0;c[M+12>>2]=0;c[M+16>>2]=0;Mg(Q+352|0,0.0,0.0,0.0,Q+272|0,f,Q+192|0);c[Q+128>>2]=1065353216;M=Q+128+4|0;c[M>>2]=0;c[M+4>>2]=0;c[M+8>>2]=0;c[M+12>>2]=0;c[Q+128+20>>2]=1065353216;N=Q+128+24|0;c[N>>2]=0;c[N+4>>2]=0;c[N+8>>2]=0;c[N+12>>2]=0;c[Q+128+40>>2]=1065353216;L=Q+128+44|0;c[L>>2]=0;c[L+4>>2]=0;c[L+8>>2]=0;c[L+12>>2]=0;c[L+16>>2]=0;Mg(Q+288|0,0.0,0.0,0.0,Q+256|0,f,Q+128|0);T=+g[b+556>>2];s=+g[b+560>>2];U=+g[b+564>>2];w=+g[b+568>>2];H=T*(2.0/(T*T+s*s+U*U+w*w));B=s*(2.0/(T*T+s*s+U*U+w*w));I=U*(2.0/(T*T+s*s+U*U+w*w));X=+g[b+364>>2];W=+g[b+368>>2];_=+g[b+372>>2];k=_*(T*I-w*B)+(W*(T*B+w*I)+X*(1.0-(s*B+U*I)));m=_*(s*I+w*H)+(X*(T*B-w*I)+W*(1.0-(T*H+U*I)));n=X*(T*I+w*B)+W*(s*I-w*H)+_*(1.0-(T*H+s*B));j=+g[b+380>>2];F=+g[b+384>>2];C=+g[b+388>>2];o=(T*I-w*B)*C+(F*(T*B+w*I)+j*(1.0-(s*B+U*I)));q=(s*I+w*H)*C+(j*(T*B-w*I)+F*(1.0-(T*H+U*I)));r=j*(T*I+w*B)+F*(s*I-w*H)+C*(1.0-(T*H+s*B));R=+g[b+396>>2];D=+g[b+400>>2];A=+g[b+404>>2];S=(1.0-(s*B+U*I))*R+(T*B+w*I)*D+(T*I-w*B)*A;U=(T*B-w*I)*R+(1.0-(T*H+U*I))*D+(s*I+w*H)*A;B=(T*I+w*B)*R+(s*I-w*H)*D+(1.0-(T*H+s*B))*A;s=+g[b+300>>2];H=+g[b+316>>2];T=+g[b+332>>2];w=+g[b+304>>2];I=+g[b+320>>2];V=+g[b+336>>2];E=+g[b+308>>2];J=+g[b+324>>2];z=+g[b+340>>2];y=-+g[b+348>>2];ba=-+g[b+352>>2];Z=-+g[b+356>>2];_=X*0.0+W*0.0+_*0.0+ +g[b+412>>2]+(n*(E*y+J*ba+z*Z)+(k*(s*y+H*ba+T*Z)+m*(w*y+I*ba+V*Z)));C=j*0.0+F*0.0+C*0.0+ +g[b+416>>2]+(r*(E*y+J*ba+z*Z)+(o*(s*y+H*ba+T*Z)+q*(w*y+I*ba+V*Z)));Z=R*0.0+D*0.0+A*0.0+ +g[b+420>>2]+(B*(E*y+J*ba+z*Z)+(S*(s*y+H*ba+T*Z)+U*(w*y+I*ba+V*Z)));ba=+g[Q+128>>2];y=+g[M>>2];A=+g[Q+128+8>>2];D=+g[Q+128+16>>2];R=+g[Q+128+20>>2];F=+g[N>>2];j=+g[Q+128+32>>2];W=+g[Q+128+36>>2];X=+g[Q+128+40>>2];Y=A*Z+(ba*_+y*C)+ +g[Q+128+48>>2];$=D*_+C*R+Z*F+ +g[Q+128+52>>2];aa=_*j+C*W+Z*X+ +g[Q+128+56>>2];g[Q+64>>2]=(k*s+m*w+n*E)*ba+(o*s+q*w+r*E)*y+(S*s+U*w+B*E)*A;g[Q+64+4>>2]=(k*H+m*I+n*J)*ba+(o*H+q*I+r*J)*y+(S*H+U*I+B*J)*A;g[Q+64+8>>2]=(k*T+m*V+n*z)*ba+(o*T+q*V+r*z)*y+(S*T+U*V+B*z)*A;g[Q+64+12>>2]=0.0;g[Q+64+16>>2]=(k*s+m*w+n*E)*D+(o*s+q*w+r*E)*R+(S*s+U*w+B*E)*F;g[Q+64+20>>2]=(k*H+m*I+n*J)*D+(o*H+q*I+r*J)*R+(S*H+U*I+B*J)*F;g[Q+64+24>>2]=(k*T+m*V+n*z)*D+(o*T+q*V+r*z)*R+(S*T+U*V+B*z)*F;g[Q+64+28>>2]=0.0;g[Q+64+32>>2]=(k*s+m*w+n*E)*j+(o*s+q*w+r*E)*W+(S*s+U*w+B*E)*X;g[Q+64+36>>2]=(k*H+m*I+n*J)*j+(o*H+q*I+r*J)*W+(S*H+U*I+B*J)*X;g[Q+64+40>>2]=(k*T+m*V+n*z)*j+(o*T+q*V+r*z)*W+(S*T+U*V+B*z)*X;g[Q+64+44>>2]=0.0;g[Q+64+48>>2]=Y;g[Q+64+52>>2]=$;g[Q+64+56>>2]=aa;g[Q+64+60>>2]=0.0;aa=(S*s+U*w+B*E)*-Z+((k*s+m*w+n*E)*-_+(o*s+q*w+r*E)*-C);$=(S*H+U*I+B*J)*-Z+((k*H+m*I+n*J)*-_+(o*H+q*I+r*J)*-C);C=(S*T+U*V+B*z)*-Z+((k*T+m*V+n*z)*-_+(o*T+q*V+r*z)*-C);_=+g[Q+192>>2];Z=+g[O>>2];Y=+g[Q+192+8>>2];X=+g[Q+192+16>>2];W=+g[Q+192+20>>2];j=+g[P>>2];F=+g[Q+192+32>>2];R=+g[Q+192+36>>2];D=+g[Q+192+40>>2];A=aa*_+$*Z+C*Y+ +g[Q+192+48>>2];y=aa*X+$*W+C*j+ +g[Q+192+52>>2];C=aa*F+$*R+C*D+ +g[Q+192+56>>2];g[Q>>2]=(k*s+m*w+n*E)*_+(k*H+m*I+n*J)*Z+(k*T+m*V+n*z)*Y;g[Q+4>>2]=(o*s+q*w+r*E)*_+(o*H+q*I+r*J)*Z+(o*T+q*V+r*z)*Y;g[Q+8>>2]=(S*s+U*w+B*E)*_+(S*H+U*I+B*J)*Z+(S*T+U*V+B*z)*Y;g[Q+12>>2]=0.0;g[Q+16>>2]=(k*s+m*w+n*E)*X+(k*H+m*I+n*J)*W+(k*T+m*V+n*z)*j;g[Q+20>>2]=(o*s+q*w+r*E)*X+(o*H+q*I+r*J)*W+(o*T+q*V+r*z)*j;g[Q+24>>2]=(S*s+U*w+B*E)*X+(S*H+U*I+B*J)*W+(S*T+U*V+B*z)*j;g[Q+28>>2]=0.0;g[Q+32>>2]=(k*s+m*w+n*E)*F+(k*H+m*I+n*J)*R+(k*T+m*V+n*z)*D;g[Q+36>>2]=(o*s+q*w+r*E)*F+(o*H+q*I+r*J)*R+(o*T+q*V+r*z)*D;g[Q+40>>2]=(S*s+U*w+B*E)*F+(S*H+U*I+B*J)*R+(S*T+U*V+B*z)*D;g[Q+44>>2]=0.0;g[Q+48>>2]=A;g[Q+52>>2]=y;g[Q+56>>2]=C;g[Q+60>>2]=0.0;rf(Q+352|0,Q+64|0,Q+424|0,Q+416|0);C=+g[Q+416>>2];y=1.0/f*+g[Q+424>>2]*C;A=1.0/f*C*+g[Q+424+4>>2];C=1.0/f*C*+g[Q+424+8>>2];rf(Q+288|0,Q,Q+424|0,Q+416|0);D=+g[Q+416>>2];y=y-+g[Q+272>>2];A=A-+g[Q+272+4>>2];C=C-+g[Q+272+8>>2];z=1.0/f*+g[Q+424>>2]*D-+g[Q+256>>2];B=1.0/f*D*+g[Q+424+4>>2]-+g[Q+256+4>>2];D=1.0/f*D*+g[Q+424+8>>2]-+g[Q+256+8>>2];if(y*y+A*A+C*C>1.1920928955078125e-007){s=1.0/+G(+(y*y+A*A+C*C));P=c[b+28>>2]|0;o=y*s*(+g[P+304>>2]*y*s+A*s*+g[P+320>>2]+C*s*+g[P+336>>2])+A*s*(y*s*+g[P+308>>2]+A*s*+g[P+324>>2]+C*s*+g[P+340>>2])+C*s*(y*s*+g[P+312>>2]+A*s*+g[P+328>>2]+C*s*+g[P+344>>2]);k=y*s;n=A*s;s=C*s}else{o=0.0;k=0.0;n=0.0;s=0.0}if(z*z+B*B+D*D>1.1920928955078125e-007){r=1.0/+G(+(z*z+B*B+D*D));P=c[b+32>>2]|0;q=z*r*(+g[P+304>>2]*z*r+B*r*+g[P+320>>2]+D*r*+g[P+336>>2])+B*r*(z*r*+g[P+308>>2]+B*r*+g[P+324>>2]+D*r*+g[P+340>>2])+D*r*(z*r*+g[P+312>>2]+B*r*+g[P+328>>2]+D*r*+g[P+344>>2]);j=z*r;m=B*r;r=D*r}else{q=0.0;j=0.0;m=0.0;r=0.0}w=o*k+q*j;k=o*n+q*m;j=o*s+q*r;if(w*w+k*k+j*j>1.1920928955078125e-007){n=1.0/+G(+(w*w+k*k+j*j));p=c[b+28>>2]|0;m=w*n*(+g[p+304>>2]*w*n+k*n*+g[p+320>>2]+j*n*+g[p+336>>2])+k*n*(w*n*+g[p+308>>2]+k*n*+g[p+324>>2]+j*n*+g[p+340>>2])+j*n*(w*n*+g[p+312>>2]+k*n*+g[p+328>>2]+j*n*+g[p+344>>2]);h=c[b+32>>2]|0;n=w*n*(w*n*+g[h+304>>2]+k*n*+g[h+320>>2]+j*n*+g[h+336>>2])+k*n*(w*n*+g[h+308>>2]+k*n*+g[h+324>>2]+j*n*+g[h+340>>2])+j*n*(w*n*+g[h+312>>2]+k*n*+g[h+328>>2]+j*n*+g[h+344>>2]);w=(y*m-z*n)*(1.0/((m+n)*(m+n)));j=(A*m-B*n)*(1.0/((m+n)*(m+n)));n=(C*m-D*n)*(1.0/((m+n)*(m+n)));k=+g[b+572>>2];if(!(k>=0.0))k=w;else{m=(a[b+553>>0]|0)==0?k:k/m;q=+g[b+576>>2];r=+g[b+580>>2];s=+g[b+584>>2];o=+G(+((w+q)*(w+q)+(j+r)*(j+r)+(n+s)*(n+s)));if(o>m){k=m*(w+q)*(1.0/o)-q;n=m*(n+s)*(1.0/o)-s;j=m*(j+r)*(1.0/o)-r}else k=w;g[b+576>>2]=k+q;g[b+580>>2]=j+r;g[b+584>>2]=n+s}o=+G(+(k*k+j*j+n*n));m=k*(1.0/o);k=j*(1.0/o);j=n*(1.0/o);if(c[d+240>>2]|0){ba=m*+g[p+336>>2]+k*+g[p+340>>2]+j*+g[p+344>>2];aa=m*+g[p+320>>2]+k*+g[p+324>>2]+j*+g[p+328>>2];$=m*+g[p+304>>2]+k*+g[p+308>>2]+j*+g[p+312>>2];Z=o*0.0*+g[d+116>>2];_=o*0.0*+g[d+120>>2];g[d+64>>2]=o*0.0*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=Z+ +g[d+68>>2];g[d+72>>2]=_+ +g[d+72>>2];aa=aa*o*+g[d+100>>2];ba=ba*o*+g[d+104>>2];g[d+80>>2]=$*o*+g[d+96>>2]+ +g[d+80>>2];g[d+84>>2]=aa+ +g[d+84>>2];g[d+88>>2]=ba+ +g[d+88>>2];h=c[b+32>>2]|0}if(c[e+240>>2]|0){ba=m*+g[h+336>>2]+k*+g[h+340>>2]+j*+g[h+344>>2];aa=m*+g[h+320>>2]+k*+g[h+324>>2]+j*+g[h+328>>2];$=m*+g[h+304>>2]+k*+g[h+308>>2]+j*+g[h+312>>2];Z=o*-0.0*+g[e+116>>2];_=o*-0.0*+g[e+120>>2];g[e+64>>2]=o*-0.0*+g[e+112>>2]+ +g[e+64>>2];g[e+68>>2]=Z+ +g[e+68>>2];g[e+72>>2]=_+ +g[e+72>>2];aa=aa*+g[e+100>>2]*-o;ba=ba*+g[e+104>>2]*-o;g[e+80>>2]=$*+g[e+96>>2]*-o+ +g[e+80>>2];g[e+84>>2]=aa+ +g[e+84>>2];g[e+88>>2]=ba+ +g[e+88>>2]}}K=d+80|0;p=d+196|0;L=d+84|0;t=d+200|0;M=d+88|0;u=e+192|0;N=e+80|0;v=e+196|0;O=e+84|0;x=e+200|0;P=e+88|0;h=d+192|0}while(0);z=+g[h>>2]+ +g[K>>2];y=+g[p>>2]+ +g[L>>2];w=+g[t>>2]+ +g[M>>2];s=+g[u>>2]+ +g[N>>2];r=+g[v>>2]+ +g[O>>2];q=+g[x>>2]+ +g[P>>2];if(a[b+526>>0]|0){k=+g[b+528>>2];j=k*+g[b+504>>2]*+g[b+432>>2]/f;m=+g[b+460>>2];n=+g[b+464>>2];o=+g[b+468>>2];if((s-z)*m+(r-y)*n+(q-w)*o>0.0)j=j+k*((s-z)*m+(r-y)*n+(q-w)*o)*+g[b+436>>2];aa=+g[b+516>>2];_=aa+j*+g[b+492>>2];g[Q+424>>2]=_;g[Q+416>>2]=0.0;h=c[(_>0.0?Q+424|0:Q+416|0)>>2]|0;c[b+516>>2]=h;aa=(c[l>>2]=h,+g[l>>2])-aa;_=+g[b+536>>2];$=+g[b+540>>2];j=+g[b+544>>2];k=aa*m-_*(aa*m*_+aa*n*$+aa*o*j);ba=aa*n-$*(aa*m*_+aa*n*$+aa*o*j);n=aa*o-j*(aa*m*_+aa*n*$+aa*o*j);j=+G(+(n*n+(k*k+ba*ba)));k=1.0/j*k;m=1.0/j*ba;n=1.0/j*n;h=c[b+28>>2]|0;if(c[d+240>>2]|0){ba=k*+g[h+336>>2]+m*+g[h+340>>2]+n*+g[h+344>>2];aa=k*+g[h+320>>2]+m*+g[h+324>>2]+n*+g[h+328>>2];$=k*+g[h+304>>2]+m*+g[h+308>>2]+n*+g[h+312>>2];Z=j*0.0*+g[d+116>>2];_=j*0.0*+g[d+120>>2];g[d+64>>2]=j*0.0*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=Z+ +g[d+68>>2];g[d+72>>2]=_+ +g[d+72>>2];aa=aa*j*+g[d+100>>2];ba=ba*j*+g[d+104>>2];g[K>>2]=$*j*+g[d+96>>2]+ +g[K>>2];g[L>>2]=aa+ +g[L>>2];g[M>>2]=ba+ +g[M>>2]}h=c[b+32>>2]|0;if(c[e+240>>2]|0){ba=k*+g[h+336>>2]+m*+g[h+340>>2]+n*+g[h+344>>2];aa=k*+g[h+320>>2]+m*+g[h+324>>2]+n*+g[h+328>>2];$=k*+g[h+304>>2]+m*+g[h+308>>2]+n*+g[h+312>>2];Z=j*-0.0*+g[e+116>>2];_=j*-0.0*+g[e+120>>2];g[e+64>>2]=j*-0.0*+g[e+112>>2]+ +g[e+64>>2];g[e+68>>2]=Z+ +g[e+68>>2];g[e+72>>2]=_+ +g[e+72>>2];aa=aa*+g[e+100>>2]*-j;ba=ba*+g[e+104>>2]*-j;g[N>>2]=$*+g[e+96>>2]*-j+ +g[N>>2];g[O>>2]=aa+ +g[O>>2];g[P>>2]=ba+ +g[P>>2]}}if(!(a[b+525>>0]|0)){i=Q;return}o=+g[b+532>>2];n=o*+g[b+508>>2]*+g[b+432>>2]/f;m=+g[b+476>>2];k=+g[b+480>>2];j=+g[b+484>>2];if((s-z)*m+(r-y)*k+(q-w)*j>0.0)n=n+o*((s-z)*m+(r-y)*k+(q-w)*j)*+g[b+436>>2];ba=+g[b+520>>2];n=ba+n*+g[b+496>>2];g[Q+424>>2]=n;g[Q+416>>2]=0.0;h=c[(n>0.0?Q+424|0:Q+416|0)>>2]|0;c[b+520>>2]=h;n=(c[l>>2]=h,+g[l>>2])-ba;h=c[b+28>>2]|0;if(c[d+240>>2]|0){ba=m*+g[h+336>>2]+k*+g[h+340>>2]+j*+g[h+344>>2];aa=m*+g[h+320>>2]+k*+g[h+324>>2]+j*+g[h+328>>2];j=m*+g[h+304>>2]+k*+g[h+308>>2]+j*+g[h+312>>2];m=n*0.0*+g[d+116>>2];k=n*0.0*+g[d+120>>2];g[d+64>>2]=n*0.0*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=m+ +g[d+68>>2];g[d+72>>2]=k+ +g[d+72>>2];k=aa*n*+g[d+100>>2];m=ba*n*+g[d+104>>2];g[K>>2]=j*n*+g[d+96>>2]+ +g[K>>2];g[L>>2]=k+ +g[L>>2];g[M>>2]=m+ +g[M>>2];m=+g[b+476>>2];k=+g[b+480>>2];j=+g[b+484>>2]}h=c[b+32>>2]|0;if(!(c[e+240>>2]|0)){i=Q;return}ba=m*+g[h+336>>2]+k*+g[h+340>>2]+j*+g[h+344>>2];aa=m*+g[h+320>>2]+k*+g[h+324>>2]+j*+g[h+328>>2];$=m*+g[h+304>>2]+k*+g[h+308>>2]+j*+g[h+312>>2];Z=n*-0.0*+g[e+116>>2];_=n*-0.0*+g[e+120>>2];g[e+64>>2]=n*-0.0*+g[e+112>>2]+ +g[e+64>>2];g[e+68>>2]=Z+ +g[e+68>>2];g[e+72>>2]=_+ +g[e+72>>2];aa=aa*+g[e+100>>2]*-n;ba=ba*+g[e+104>>2]*-n;g[N>>2]=$*+g[e+96>>2]*-n+ +g[N>>2];g[O>>2]=aa+ +g[O>>2];g[P>>2]=ba+ +g[P>>2];i=Q;return}function kc(b,d,e,f,h,j,k,m,n){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0.0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0,C=0,D=0,E=0,H=0,I=0,J=0,K=0.0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0;Y=i;i=i+256|0;c[b+188>>2]=-1;c[b+184>>2]=0;if((e|0)>0){n=0;do{c[(c[d+(n<<2)>>2]|0)+212>>2]=-1;n=n+1|0}while((n|0)!=(e|0))}n=c[b+12>>2]|0;if((n|0)>(e|0)){p=b+8|0;o=n}else{if((e+1|0)!=0?(c[6324]=(c[6324]|0)+1,o=ic(((e+1|0)*244|3)+16|0)|0,(o|0)!=0):0){c[(o+4+15&-16)+-4>>2]=o;p=o+4+15&-16}else p=0;o=c[b+8>>2]|0;if((o|0)>0){n=0;do{V=p+(n*244|0)|0;W=c[b+16>>2]|0;U=W+(n*244|0)|0;c[V>>2]=c[U>>2];c[V+4>>2]=c[U+4>>2];c[V+8>>2]=c[U+8>>2];c[V+12>>2]=c[U+12>>2];V=p+(n*244|0)+16|0;U=W+(n*244|0)+16|0;c[V>>2]=c[U>>2];c[V+4>>2]=c[U+4>>2];c[V+8>>2]=c[U+8>>2];c[V+12>>2]=c[U+12>>2];V=p+(n*244|0)+32|0;U=W+(n*244|0)+32|0;c[V>>2]=c[U>>2];c[V+4>>2]=c[U+4>>2];c[V+8>>2]=c[U+8>>2];c[V+12>>2]=c[U+12>>2];V=p+(n*244|0)+48|0;U=W+(n*244|0)+48|0;c[V>>2]=c[U>>2];c[V+4>>2]=c[U+4>>2];c[V+8>>2]=c[U+8>>2];c[V+12>>2]=c[U+12>>2];Lm(p+(n*244|0)+64|0,W+(n*244|0)+64|0,180)|0;n=n+1|0}while((n|0)!=(o|0))}n=c[b+16>>2]|0;if(n|0){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=p;c[b+12>>2]=e+1;p=b+8|0;o=e+1|0}yn(Y|0,0,244)|0;n=c[p>>2]|0;if((n|0)<0){if((o|0)<0){o=c[b+16>>2]|0;if(o|0){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=0;c[b+12>>2]=0}do{W=c[b+16>>2]|0;V=W+(n*244|0)|0;c[V>>2]=c[Y>>2];c[V+4>>2]=c[Y+4>>2];c[V+8>>2]=c[Y+8>>2];c[V+12>>2]=c[Y+12>>2];V=W+(n*244|0)+16|0;c[V>>2]=c[Y+16>>2];c[V+4>>2]=c[Y+16+4>>2];c[V+8>>2]=c[Y+16+8>>2];c[V+12>>2]=c[Y+16+12>>2];V=W+(n*244|0)+32|0;c[V>>2]=c[Y+32>>2];c[V+4>>2]=c[Y+32+4>>2];c[V+8>>2]=c[Y+32+8>>2];c[V+12>>2]=c[Y+32+12>>2];V=W+(n*244|0)+48|0;c[V>>2]=c[Y+48>>2];c[V+4>>2]=c[Y+48+4>>2];c[V+8>>2]=c[Y+48+8>>2];c[V+12>>2]=c[Y+48+12>>2];Lm(W+(n*244|0)+64|0,Y+64|0,180)|0;n=n+1|0}while((n|0)!=0)}c[p>>2]=0;if((e|0)>0){o=0;do{s=d+(o<<2)|0;q=Oj(b,c[s>>2]|0,+g[m+12>>2])|0;s=c[s>>2]|0;if(!((s|0)==0?1:(c[s+248>>2]&2|0)==0)?+g[s+384>>2]!=0.0:0){p=c[b+16>>2]|0;n=c[s+544>>2]|0;if(n&2){r=+g[m+76>>2];_=+g[s+436>>2];u=+g[s+440>>2];t=+g[s+444>>2];ea=+g[s+4>>2];_=_!=0.0?1.0/_:0.0;da=+g[s+8>>2];u=u!=0.0?1.0/u:0.0;ca=+g[s+12>>2];t=t!=0.0?1.0/t:0.0;ba=+g[s+20>>2];aa=+g[s+24>>2];$=+g[s+28>>2];Z=+g[s+36>>2];K=+g[s+40>>2];w=+g[s+44>>2];x=+g[s+368>>2];y=+g[s+372>>2];v=+g[s+376>>2];z=(_*ea*ea+u*da*da+t*ca*ca)*x+(_*ea*ba+u*da*aa+t*ca*$)*y+(_*ea*Z+u*da*K+t*ca*w)*v;A=(_*ba*ea+u*aa*da+t*$*ca)*x+(_*ba*ba+u*aa*aa+t*$*$)*y+(_*ba*Z+u*aa*K+t*$*w)*v;w=(_*Z*ea+u*K*da+t*w*ca)*x+(_*Z*ba+u*K*aa+t*w*$)*y+(_*Z*Z+u*K*K+t*w*w)*v;t=(y*w-v*A)*(y*w-v*A)+(v*z-x*w)*(v*z-x*w)+(x*A-y*z)*(x*A-y*z);if(t>r*r){r=1.0/+G(+t)*r;u=(y*w-v*A)*r;t=r*(v*z-x*w);r=r*(x*A-y*z)}else{u=y*w-v*A;t=v*z-x*w;r=x*A-y*z}ca=+g[m+12>>2];da=(u*+g[s+308>>2]+t*+g[s+324>>2]+r*+g[s+340>>2])*ca;ea=ca*(u*+g[s+312>>2]+t*+g[s+328>>2]+r*+g[s+344>>2]);g[p+(q*244|0)+224>>2]=+g[p+(q*244|0)+224>>2]-(u*+g[s+304>>2]+t*+g[s+320>>2]+r*+g[s+336>>2])*ca;g[p+(q*244|0)+228>>2]=+g[p+(q*244|0)+228>>2]-da;g[p+(q*244|0)+232>>2]=+g[p+(q*244|0)+232>>2]-ea;n=c[s+544>>2]|0}if(n&4){K=+g[m+12>>2];ia=+g[s+436>>2];ca=+g[s+440>>2];aa=+g[s+444>>2];y=+g[s+368>>2];t=+g[s+372>>2];ea=+g[s+376>>2];$=+g[s+4>>2];ia=ia!=0.0?1.0/ia:0.0;r=+g[s+8>>2];ca=ca!=0.0?1.0/ca:0.0;u=+g[s+12>>2];aa=aa!=0.0?1.0/aa:0.0;ja=+g[s+20>>2];_=+g[s+24>>2];x=+g[s+28>>2];ba=+g[s+36>>2];Z=+g[s+40>>2];ha=+g[s+44>>2];v=ia*$*$+ca*r*r+aa*u*u;A=ia*$*ja+ca*r*_+aa*u*x;ga=ia*$*ba+ca*r*Z+aa*u*ha;w=ia*ja*$+ca*_*r+aa*x*u;z=ia*ja*ja+ca*_*_+aa*x*x;fa=ia*ja*ba+ca*_*Z+aa*x*ha;u=ia*ba*$+ca*Z*r+aa*ha*u;x=ia*ba*ja+ca*Z*_+aa*ha*x;ha=ia*ba*ba+ca*Z*Z+aa*ha*ha;aa=y*v+t*A+ea*ga+(t*(y*u+t*x+ea*ha)-ea*(y*w+t*z+ea*fa))*K-(K*0.0+(y*v+t*A+ea*ga));Z=y*w+t*z+ea*fa+(ea*(y*v+t*A+ea*ga)-y*(y*u+t*x+ea*ha))*K-(K*0.0+(y*w+t*z+ea*fa));ca=y*u+t*x+ea*ha+(y*(y*w+t*z+ea*fa)-t*(y*v+t*A+ea*ga))*K-(K*0.0+(y*u+t*x+ea*ha));ba=A+(y*u+t*x+ea*ha+(t*x+(A*0.0+z*-ea)))*K;ia=ga+(t*ha+(ga*0.0+fa*-ea)-(y*w+t*z+ea*fa))*K;_=w+(u*-y+(w*0.0+ea*v)-(y*u+t*x+ea*ha))*K;ja=fa+(y*v+t*A+ea*ga+(ha*-y+(fa*0.0+ea*ga)))*K;r=u+(u*0.0+(v*-t+y*w)+(y*w+t*z+ea*fa))*K;$=x+(x*0.0+(A*-t+y*z)-(y*v+t*A+ea*ga))*K;la=(z+(x*-y+(z*0.0+ea*A))*K)*(ha+(ha*0.0+(ga*-t+y*fa))*K)-$*ja;ka=$*ia-ba*(ha+(ha*0.0+(ga*-t+y*fa))*K);ma=ba*ja-(z+(x*-y+(z*0.0+ea*A))*K)*ia;da=r*ma+((v+(t*u+(v*0.0+w*-ea))*K)*la+_*ka);n=+F(+da)>1.1920928955078125e-007;da=n?1.0/da:da;g[p+(q*244|0)+224>>2]=y-(ca*ma+(aa*la+Z*ka))*da-y+ +g[p+(q*244|0)+224>>2];g[p+(q*244|0)+228>>2]=t-(r*(ja*aa-ia*Z)+((v+(t*u+(v*0.0+w*-ea))*K)*((ha+(ha*0.0+(ga*-t+y*fa))*K)*Z-ja*ca)+_*(ia*ca-(ha+(ha*0.0+(ga*-t+y*fa))*K)*aa)))*da-t+ +g[p+(q*244|0)+228>>2];g[p+(q*244|0)+232>>2]=ea-(r*(ba*Z-(z+(x*-y+(z*0.0+ea*A))*K)*aa)+((v+(t*u+(v*0.0+w*-ea))*K)*((z+(x*-y+(z*0.0+ea*A))*K)*ca-$*Z)+_*($*aa-ba*ca)))*da-ea+ +g[p+(q*244|0)+232>>2];n=c[s+544>>2]|0}if(n&8|0){ia=+g[m+12>>2];A=+g[s+436>>2];K=+g[s+440>>2];x=+g[s+444>>2];da=+g[s+368>>2];ea=+g[s+372>>2];ma=+g[s+376>>2];Jg(s+4|0,Y);la=+g[Y>>2];fa=+g[Y+4>>2];ga=+g[Y+8>>2];Z=+g[Y+12>>2];$=ga*(da*-ga+ea*Z-ma*-la)+(la*(-(da*-la)-ea*-fa-ma*-ga)+Z*(ma*-fa+da*Z-ea*-ga))-fa*(ea*-la+ma*Z-da*-fa);ba=la*(ea*-la+ma*Z-da*-fa)+(fa*(-(da*-la)-ea*-fa-ma*-ga)+Z*(da*-ga+ea*Z-ma*-la))-ga*(ma*-fa+da*Z-ea*-ga);Z=fa*(ma*-fa+da*Z-ea*-ga)+(ga*(-(da*-la)-ea*-fa-ma*-ga)+Z*(ea*-la+ma*Z-da*-fa))-la*(da*-ga+ea*Z-ma*-la);A=A!=0.0?1.0/A:0.0;ca=Z*0.0+(A*$+ba*0.0);K=K!=0.0?1.0/K:0.0;aa=Z*0.0+($*0.0+K*ba);x=x!=0.0?1.0/x:0.0;_=x*Z+($*0.0+ba*0.0);y=A+(ba*0.0+(A*0.0+Z*-0.0))*ia;z=K+($*-0.0+(K*0.0+Z*0.0))*ia;ja=x+(x*0.0+(ba*-0.0+$*0.0))*ia;w=z*ja-((ba*-0.0+K*$+0.0-ca)*ia+0.0)*((Z*0.0+0.0-x*$+ca)*ia+0.0);ha=((ba*-0.0+K*$+0.0-ca)*ia+0.0)*((x*ba+(Z*-0.0+0.0)-aa)*ia+0.0)-ja*((ba*0.0+(0.0-K*Z)+_)*ia+0.0);v=((ba*0.0+(0.0-K*Z)+_)*ia+0.0)*((Z*0.0+0.0-x*$+ca)*ia+0.0)-z*((x*ba+(Z*-0.0+0.0)-aa)*ia+0.0);ka=(($*0.0-A*ba+0.0+aa)*ia+0.0)*v+(y*w+(($*-0.0+(A*Z+0.0)-_)*ia+0.0)*ha);W=+F(+ka)>1.1920928955078125e-007;ka=W?1.0/ka:ka;ha=$-(($*aa-ba*ca)*ia*v+((ba*_-Z*aa)*ia*w+(Z*ca-$*_)*ia*ha))*ka;ja=ba-((($*0.0-A*ba+0.0+aa)*ia+0.0)*(((Z*0.0+0.0-x*$+ca)*ia+0.0)*(ba*_-Z*aa)*ia-((x*ba+(Z*-0.0+0.0)-aa)*ia+0.0)*(Z*ca-$*_)*ia)+(y*(ja*(Z*ca-$*_)*ia-((Z*0.0+0.0-x*$+ca)*ia+0.0)*($*aa-ba*ca)*ia)+(($*-0.0+(A*Z+0.0)-_)*ia+0.0)*(((x*ba+(Z*-0.0+0.0)-aa)*ia+0.0)*($*aa-ba*ca)*ia-ja*(ba*_-Z*aa)*ia)))*ka;ka=Z-((($*0.0-A*ba+0.0+aa)*ia+0.0)*(((ba*0.0+(0.0-K*Z)+_)*ia+0.0)*(Z*ca-$*_)*ia-z*(ba*_-Z*aa)*ia)+(y*(z*($*aa-ba*ca)*ia-((ba*-0.0+K*$+0.0-ca)*ia+0.0)*(Z*ca-$*_)*ia)+(($*-0.0+(A*Z+0.0)-_)*ia+0.0)*(((ba*-0.0+K*$+0.0-ca)*ia+0.0)*(ba*_-Z*aa)*ia-((ba*0.0+(0.0-K*Z)+_)*ia+0.0)*($*aa-ba*ca)*ia)))*ka;ia=+g[Y+12>>2];g[p+(q*244|0)+224>>2]=(ga*ha+ia*ja-la*ka)*-ga+(ia*(ia*ha+fa*ka-ga*ja)+(-(la*ha)-fa*ja-ga*ka)*-la)-(ia*ka+la*ja-fa*ha)*-fa-da+ +g[p+(q*244|0)+224>>2];g[p+(q*244|0)+228>>2]=(ia*ka+la*ja-fa*ha)*-la+(ia*(ga*ha+ia*ja-la*ka)+(-(la*ha)-fa*ja-ga*ka)*-fa)-(ia*ha+fa*ka-ga*ja)*-ga-ea+ +g[p+(q*244|0)+228>>2];g[p+(q*244|0)+232>>2]=(ia*ha+fa*ka-ga*ja)*-fa+((-(la*ha)-fa*ja-ga*ka)*-ga+ia*(ia*ka+la*ja-fa*ha))-(ga*ha+ia*ja-la*ka)*-la-ma+ +g[p+(q*244|0)+232>>2]}}o=o+1|0}while((o|0)!=(e|0))}if((k|0)>0){n=0;do{W=c[j+(n<<2)>>2]|0;kb[c[(c[W>>2]|0)+8>>2]&255](W);g[W+36>>2]=0.0;n=n+1|0}while((n|0)!=(k|0))}o=c[b+168>>2]|0;if((o|0)<(k|0)?(c[b+172>>2]|0)<(k|0):0){if(!k)n=0;else{c[6324]=(c[6324]|0)+1;n=ic((k<<3|3)+16|0)|0;if(!n)n=0;else{c[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}o=c[b+168>>2]|0}if((o|0)>0){p=0;do{U=(c[b+176>>2]|0)+(p<<3)|0;V=c[U+4>>2]|0;W=n+(p<<3)|0;c[W>>2]=c[U>>2];c[W+4>>2]=V;p=p+1|0}while((p|0)!=(o|0))}o=c[b+176>>2]|0;if(o|0){if(a[b+180>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}c[b+176>>2]=0}a[b+180>>0]=1;c[b+176>>2]=n;c[b+172>>2]=k}c[b+168>>2]=k;if((k|0)>0){n=0;e=0;do{s=c[b+176>>2]|0;d=s+(e<<3)|0;q=j+(e<<2)|0;o=c[q>>2]|0;p=c[o+44>>2]|0;if(p){o=p+64|0;do{c[p>>2]=0;p=p+4|0}while((p|0)<(o|0));o=c[q>>2]|0}if(!(a[o+20>>0]|0)){c[d>>2]=0;c[s+(e<<3)+4>>2]=0;o=0}else{mb[c[(c[o>>2]|0)+16>>2]&127](o,d);o=c[d>>2]|0}n=o+n|0;e=e+1|0}while((e|0)!=(k|0));q=n}else q=0;o=c[b+48>>2]|0;if((o|0)<(q|0)?(c[b+52>>2]|0)<(q|0):0){if(!q)n=0;else{c[6324]=(c[6324]|0)+1;n=ic((q*152|3)+16|0)|0;if(!n)n=0;else{c[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}o=c[b+48>>2]|0}if((o|0)>0){p=0;do{Lm(n+(p*152|0)|0,(c[b+56>>2]|0)+(p*152|0)|0,152)|0;p=p+1|0}while((p|0)!=(o|0))}o=c[b+56>>2]|0;if(o|0){if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=n;c[b+52>>2]=q}c[b+48>>2]=q;if((k|0)>0){V=0;W=0;n=c[b+176>>2]|0;while(1){U=n+(W<<3)|0;if(!(c[U>>2]|0))o=0;else{o=c[b+56>>2]|0;M=o+(V*152|0)|0;N=j+(W<<2)|0;O=c[N>>2]|0;P=c[O+28>>2]|0;Q=c[O+32>>2]|0;R=Oj(b,P,+g[m+12>>2])|0;S=Oj(b,Q,+g[m+12>>2])|0;T=c[b+16>>2]|0;p=c[O+24>>2]|0;p=(p|0)>0?p:c[m+20>>2]|0;if((p|0)>(c[b+184>>2]|0))c[b+184>>2]=p;if((c[U>>2]|0)>0){n=0;do{yn(M+(n*152|0)|0,0,152)|0;g[M+(n*152|0)+120>>2]=-34028234663852886.0e22;g[M+(n*152|0)+124>>2]=34028234663852886.0e22;g[M+(n*152|0)+100>>2]=0.0;g[M+(n*152|0)+96>>2]=0.0;c[M+(n*152|0)+144>>2]=R;c[M+(n*152|0)+148>>2]=S;c[M+(n*152|0)+136>>2]=p;n=n+1|0}while((n|0)<(c[U>>2]|0))}c[T+(R*244|0)+64>>2]=0;c[T+(R*244|0)+64+4>>2]=0;c[T+(R*244|0)+64+8>>2]=0;c[T+(R*244|0)+64+12>>2]=0;c[T+(R*244|0)+64+16>>2]=0;c[T+(R*244|0)+64+20>>2]=0;c[T+(R*244|0)+64+24>>2]=0;c[T+(R*244|0)+64+28>>2]=0;c[T+(R*244|0)+144>>2]=0;c[T+(R*244|0)+144+4>>2]=0;c[T+(R*244|0)+144+8>>2]=0;c[T+(R*244|0)+144+12>>2]=0;c[T+(R*244|0)+144+16>>2]=0;c[T+(R*244|0)+144+20>>2]=0;c[T+(R*244|0)+144+24>>2]=0;c[T+(R*244|0)+144+28>>2]=0;c[T+(S*244|0)+64>>2]=0;c[T+(S*244|0)+64+4>>2]=0;c[T+(S*244|0)+64+8>>2]=0;c[T+(S*244|0)+64+12>>2]=0;c[T+(S*244|0)+64+16>>2]=0;c[T+(S*244|0)+64+20>>2]=0;c[T+(S*244|0)+64+24>>2]=0;c[T+(S*244|0)+64+28>>2]=0;c[T+(S*244|0)+144>>2]=0;c[T+(S*244|0)+144+4>>2]=0;c[T+(S*244|0)+144+8>>2]=0;c[T+(S*244|0)+144+12>>2]=0;c[T+(S*244|0)+144+16>>2]=0;c[T+(S*244|0)+144+20>>2]=0;c[T+(S*244|0)+144+24>>2]=0;c[T+(S*244|0)+144+28>>2]=0;g[Y>>2]=1.0/+g[m+12>>2];c[Y+4>>2]=c[m+32>>2];c[Y+8>>2]=o+(V*152|0)+16;c[Y+12>>2]=M;c[Y+16>>2]=o+(V*152|0)+48;c[Y+20>>2]=o+(V*152|0)+32;c[Y+24>>2]=38;c[Y+28>>2]=o+(V*152|0)+112;L=o+(V*152|0)+116|0;c[L>>2]=c[m+40>>2];c[Y+48>>2]=c[m+4>>2];c[Y+32>>2]=L;c[Y+36>>2]=o+(V*152|0)+120;c[Y+40>>2]=o+(V*152|0)+124;c[Y+44>>2]=c[m+20>>2];L=c[N>>2]|0;mb[c[(c[L>>2]|0)+20>>2]&127](L,Y);if((c[U>>2]|0)>0){L=0;do{n=M+(L*152|0)+124|0;r=+g[(c[N>>2]|0)+16>>2];if(+g[n>>2]>=r)g[n>>2]=r;n=M+(L*152|0)+120|0;if(+g[n>>2]<=-r)g[n>>2]=-r;c[M+(L*152|0)+132>>2]=O;H=M+(L*152|0)|0;I=M+(L*152|0)+64|0;J=c[O+28>>2]|0;la=+g[H>>2];ja=+g[H+4>>2];K=+g[H+8>>2];ka=(la*+g[J+320>>2]+ja*+g[J+324>>2]+K*+g[J+328>>2])*+g[J+588>>2];r=(la*+g[J+336>>2]+ja*+g[J+340>>2]+K*+g[J+344>>2])*+g[J+592>>2];g[I>>2]=(+g[J+304>>2]*la+ +g[J+308>>2]*ja+ +g[J+312>>2]*K)*+g[J+584>>2];g[I+4>>2]=ka;g[I+8>>2]=r;g[I+12>>2]=0.0;I=M+(L*152|0)+32|0;J=M+(L*152|0)+80|0;E=c[O+32>>2]|0;r=+g[I>>2];ka=+g[I+4>>2];K=+g[I+8>>2];ja=(r*+g[E+320>>2]+ka*+g[E+324>>2]+K*+g[E+328>>2])*+g[E+588>>2];la=(r*+g[E+336>>2]+ka*+g[E+340>>2]+K*+g[E+344>>2])*+g[E+592>>2];g[J>>2]=(+g[E+304>>2]*r+ +g[E+308>>2]*ka+ +g[E+312>>2]*K)*+g[E+584>>2];g[J+4>>2]=ja;g[J+8>>2]=la;g[J+12>>2]=0.0;J=M+(L*152|0)+16|0;la=+g[P+384>>2];ja=+g[J>>2];ka=+g[J+4>>2];r=+g[J+8>>2];t=+g[H>>2];u=+g[H+4>>2];v=+g[H+8>>2];H=M+(L*152|0)+48|0;ma=+g[Q+384>>2];w=+g[H>>2];x=+g[H+4>>2];y=+g[H+8>>2];z=+g[I>>2];A=+g[I+4>>2];K=ja*la*ja+ka*la*ka+r*la*r+(t*(+g[P+304>>2]*t+ +g[P+308>>2]*u+ +g[P+312>>2]*v)+u*(t*+g[P+320>>2]+u*+g[P+324>>2]+v*+g[P+328>>2])+v*(t*+g[P+336>>2]+u*+g[P+340>>2]+v*+g[P+344>>2]))+(w*ma*w+x*ma*x+y*ma*y)+(z*(+g[Q+304>>2]*z+ +g[Q+308>>2]*A+ +g[Q+312>>2]*K)+A*(z*+g[Q+320>>2]+A*+g[Q+324>>2]+K*+g[Q+328>>2])+K*(z*+g[Q+336>>2]+A*+g[Q+340>>2]+K*+g[Q+344>>2]));H=+F(+K)>1.1920928955078125e-007;K=H?1.0/K:0.0;g[M+(L*152|0)+108>>2]=K;if(!(c[T+(R*244|0)+240>>2]|0)){p=0;q=0;e=0;B=0;E=0;H=0}else{p=c[T+(R*244|0)+224>>2]|0;q=c[T+(R*244|0)+208>>2]|0;e=c[T+(R*244|0)+228>>2]|0;B=c[T+(R*244|0)+212>>2]|0;E=c[T+(R*244|0)+232>>2]|0;H=c[T+(R*244|0)+216>>2]|0}if(!(c[T+(S*244|0)+240>>2]|0)){n=0;o=0;s=0;d=0;C=0;D=0}else{n=c[T+(S*244|0)+224>>2]|0;o=c[T+(S*244|0)+208>>2]|0;s=c[T+(S*244|0)+228>>2]|0;d=c[T+(S*244|0)+212>>2]|0;C=c[T+(S*244|0)+232>>2]|0;D=c[T+(S*244|0)+216>>2]|0}la=(c[l>>2]=q,+g[l>>2])+ +g[P+352>>2];ka=(c[l>>2]=B,+g[l>>2])+ +g[P+356>>2];ka=la*+g[J>>2]+ka*+g[J+4>>2]+((c[l>>2]=H,+g[l>>2])+ +g[P+360>>2])*r;la=(c[l>>2]=p,+g[l>>2])+ +g[P+368>>2];ja=(c[l>>2]=e,+g[l>>2])+ +g[P+372>>2];ja=ka+(la*t+ja*u+((c[l>>2]=E,+g[l>>2])+ +g[P+376>>2])*v);la=(c[l>>2]=o,+g[l>>2])+ +g[Q+352>>2];ka=(c[l>>2]=d,+g[l>>2])+ +g[Q+356>>2];ka=la*w+ka*x+((c[l>>2]=D,+g[l>>2])+ +g[Q+360>>2])*y;la=(c[l>>2]=n,+g[l>>2])+ +g[Q+368>>2];ma=(c[l>>2]=s,+g[l>>2])+ +g[Q+372>>2];J=M+(L*152|0)+112|0;g[J>>2]=+g[J>>2]*K+K*(0.0-+g[Y+48>>2]*(ja+(ka+(la*z+ma*A+((c[l>>2]=C,+g[l>>2])+ +g[Q+376>>2])*+g[I+8>>2]))));g[M+(L*152|0)+100>>2]=0.0;L=L+1|0}while((L|0)<(c[U>>2]|0))}n=c[b+176>>2]|0;o=c[n+(W<<3)>>2]|0}W=W+1|0;if((W|0)==(k|0))break;else V=o+V|0}}Yb[c[(c[b>>2]|0)+28>>2]&127](b,f,h,m);s=c[b+48>>2]|0;d=c[b+28>>2]|0;e=c[b+68>>2]|0;o=c[b+128>>2]|0;if((o|0)<(s|0)?(c[b+132>>2]|0)<(s|0):0){if(!s)n=0;else{c[6324]=(c[6324]|0)+1;n=ic((s<<2|3)+16|0)|0;if(!n)n=0;else{c[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}o=c[b+128>>2]|0}q=c[b+136>>2]|0;if((o|0)<=0)if(!q)o=b+140|0;else X=103;else{p=0;do{c[n+(p<<2)>>2]=c[q+(p<<2)>>2];p=p+1|0}while((p|0)!=(o|0));X=103}if((X|0)==103){if(a[b+140>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[q+-4>>2]|0)}c[b+136>>2]=0;o=b+140|0}a[o>>0]=1;c[b+136>>2]=n;c[b+132>>2]=s}c[b+128>>2]=s;if(!(c[m+64>>2]&16)){o=c[b+108>>2]|0;if((o|0)<(d|0)?(c[b+112>>2]|0)<(d|0):0){if(!d)n=0;else{c[6324]=(c[6324]|0)+1;n=ic((d<<2|3)+16|0)|0;if(!n)n=0;else{c[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}o=c[b+108>>2]|0}q=c[b+116>>2]|0;if((o|0)<=0)if(!q)o=b+120|0;else X=133;else{p=0;do{c[n+(p<<2)>>2]=c[q+(p<<2)>>2];p=p+1|0}while((p|0)!=(o|0));X=133}if((X|0)==133){if(a[b+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[q+-4>>2]|0)}c[b+116>>2]=0;o=b+120|0}a[o>>0]=1;c[b+116>>2]=n;c[b+112>>2]=d}c[b+108>>2]=d}else{o=c[b+108>>2]|0;if((o|0)<(d<<1|0)?(c[b+112>>2]|0)<(d<<1|0):0){if(!d)n=0;else{c[6324]=(c[6324]|0)+1;n=ic((d<<3|3)+16|0)|0;if(!n)n=0;else{c[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}o=c[b+108>>2]|0}q=c[b+116>>2]|0;if((o|0)<=0)if(!q)o=b+120|0;else X=118;else{p=0;do{c[n+(p<<2)>>2]=c[q+(p<<2)>>2];p=p+1|0}while((p|0)!=(o|0));X=118}if((X|0)==118){if(a[b+120>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[q+-4>>2]|0)}c[b+116>>2]=0;o=b+120|0}a[o>>0]=1;c[b+116>>2]=n;c[b+112>>2]=d<<1}c[b+108>>2]=d<<1}o=c[b+148>>2]|0;if((o|0)<(e|0)?(c[b+152>>2]|0)<(e|0):0){if(!e)n=0;else{c[6324]=(c[6324]|0)+1;n=ic((e<<2|3)+16|0)|0;if(!n)n=0;else{c[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}o=c[b+148>>2]|0}q=c[b+156>>2]|0;if((o|0)<=0)if(!q)o=b+160|0;else X=148;else{p=0;do{c[n+(p<<2)>>2]=c[q+(p<<2)>>2];p=p+1|0}while((p|0)!=(o|0));X=148}if((X|0)==148){if(a[b+160>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[q+-4>>2]|0)}c[b+156>>2]=0;o=b+160|0}a[o>>0]=1;c[b+156>>2]=n;c[b+152>>2]=e}c[b+148>>2]=e;if((s|0)>0){o=c[b+136>>2]|0;n=0;do{c[o+(n<<2)>>2]=n;n=n+1|0}while((n|0)!=(s|0))}if((d|0)>0){o=c[b+116>>2]|0;n=0;do{c[o+(n<<2)>>2]=n;n=n+1|0}while((n|0)!=(d|0))}if((e|0)<=0){i=Y;return 0.0}o=c[b+156>>2]|0;n=0;do{c[o+(n<<2)>>2]=n;n=n+1|0}while((n|0)!=(e|0));i=Y;return 0.0}function lc(e,f,g,j,k){e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;var m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;N=i;i=i+624|0;J=N+536+40|0;K=N+588|0;L=N+576+12|0;M=N+588+9|0;n=0;m=0;r=0;a:while(1){do if((m|0)>-1)if((n|0)>(2147483647-m|0)){c[6326]=75;m=-1;break}else{m=n+m|0;break}while(0);n=a[f>>0]|0;if(!(n<<24>>24)){I=261;break}else o=f;b:while(1){switch(n<<24>>24){case 37:{n=o;I=9;break b}case 0:{n=o;break b}default:{}}n=o+1|0;o=n;n=a[n>>0]|0}c:do if((I|0)==9)while(1){I=0;if((a[o+1>>0]|0)!=37)break c;n=n+1|0;o=o+2|0;if((a[o>>0]|0)==37)I=9;else break}while(0);n=n-f|0;if(e|0?(c[e>>2]&32|0)==0:0)pk(f,n,e);if(n|0){f=o;continue}p=o+1|0;n=a[p>>0]|0;if(((n<<24>>24)+-48|0)>>>0<10){u=(a[o+2>>0]|0)==36;p=u?o+3|0:p;x=u?(n<<24>>24)+-48|0:-1;u=u?1:r;n=a[p>>0]|0}else{x=-1;u=r}o=(n<<24>>24)+-32|0;d:do if(o>>>0<32){r=0;do{if(!(1<<o&75913))break d;r=1<<(n<<24>>24)+-32|r;p=p+1|0;n=a[p>>0]|0;o=(n<<24>>24)+-32|0}while(o>>>0<32)}else r=0;while(0);do if(n<<24>>24!=42){o=(n<<24>>24)+-48|0;if(o>>>0<10){s=0;do{s=(s*10|0)+o|0;p=p+1|0;n=a[p>>0]|0;o=(n<<24>>24)+-48|0}while(o>>>0<10);if((s|0)<0){m=-1;break a}else H=u}else{s=0;H=u}}else{t=p+1|0;n=a[t>>0]|0;if(((n<<24>>24)+-48|0)>>>0<10?(a[p+2>>0]|0)==36:0){c[k+((n<<24>>24)+-48<<2)>>2]=10;n=c[j+((a[t>>0]|0)+-48<<3)>>2]|0;o=1;t=p+3|0}else{if(u|0){m=-1;break a}if(!e){s=0;H=0;p=t;break}o=(c[g>>2]|0)+(4-1)&~(4-1);n=c[o>>2]|0;c[g>>2]=o+4;o=0}H=(n|0)<0;s=H?0-n|0:n;r=H?r|8192:r;H=o;p=t;n=a[t>>0]|0}while(0);e:do if(n<<24>>24==46){n=p+1|0;t=a[n>>0]|0;if(t<<24>>24!=42){if(((t<<24>>24)+-48|0)>>>0<10){o=0;p=(t<<24>>24)+-48|0}else{t=0;break}while(1){o=(o*10|0)+p|0;n=n+1|0;p=(a[n>>0]|0)+-48|0;if(p>>>0>=10){t=o;break e}}}n=p+2|0;o=(a[n>>0]|0)+-48|0;if(o>>>0<10?(a[p+3>>0]|0)==36:0){c[k+(o<<2)>>2]=10;t=c[j+((a[n>>0]|0)+-48<<3)>>2]|0;n=p+4|0;break}if(H|0){m=-1;break a}if(e|0){G=(c[g>>2]|0)+(4-1)&~(4-1);t=c[G>>2]|0;c[g>>2]=G+4}else t=0}else{t=-1;n=p}while(0);w=0;while(1){o=(a[n>>0]|0)+-65|0;if(o>>>0>57){m=-1;break a}G=n+1|0;o=a[18953+(w*58|0)+o>>0]|0;if(((o&255)+-1|0)>>>0<8){w=o&255;n=G}else break}if(!(o<<24>>24)){m=-1;break}p=(x|0)>-1;do if(o<<24>>24==19)if(p){m=-1;break a}else I=51;else{if(p){c[k+(x<<2)>>2]=o&255;F=j+(x<<3)|0;I=c[F+4>>2]|0;c[N>>2]=c[F>>2];c[N+4>>2]=I;I=51;break}if(!e){m=0;break a}Hg(N,o&255,g)}while(0);if((I|0)==51?(I=0,(e|0)==0):0){n=0;r=H;f=G;continue}A=a[n>>0]|0;A=(w|0)!=0&(A&15|0)==3?A&-33:A;y=r&-65537;u=(r&8192|0)==0?r:y;f:do switch(A|0){case 110:switch((w&255)<<24>>24){case 0:{c[c[N>>2]>>2]=m;n=0;r=H;f=G;continue a}case 1:{c[c[N>>2]>>2]=m;n=0;r=H;f=G;continue a}case 2:{n=c[N>>2]|0;c[n>>2]=m;c[n+4>>2]=((m|0)<0)<<31>>31;n=0;r=H;f=G;continue a}case 3:{b[c[N>>2]>>1]=m;n=0;r=H;f=G;continue a}case 4:{a[c[N>>2]>>0]=m;n=0;r=H;f=G;continue a}case 6:{c[c[N>>2]>>2]=m;n=0;r=H;f=G;continue a}case 7:{n=c[N>>2]|0;c[n>>2]=m;c[n+4>>2]=((m|0)<0)<<31>>31;n=0;r=H;f=G;continue a}default:{n=0;r=H;f=G;continue a}}case 112:{w=120;t=t>>>0>8?t:8;n=u|8;I=63;break}case 88:case 120:{w=A;n=u;I=63;break}case 111:{n=c[N>>2]|0;o=c[N+4>>2]|0;if((n|0)==0&(o|0)==0)f=J;else{f=J;do{f=f+-1|0;a[f>>0]=n&7|48;n=ps(n|0,o|0,3)|0;o=D}while(!((n|0)==0&(o|0)==0))}if(!(u&8)){o=0;p=19433;n=u;I=76}else{n=J-f|0;o=0;p=19433;t=(t|0)>(n|0)?t:n+1|0;n=u;I=76}break}case 105:case 100:{n=c[N>>2]|0;f=c[N+4>>2]|0;if((f|0)<0){n=Ds(0,0,n|0,f|0)|0;f=D;c[N>>2]=n;c[N+4>>2]=f;o=1;p=19433;I=75;break f}if(!(u&2048)){o=u&1;p=(u&1|0)==0?19433:19435;I=75}else{o=1;p=19434;I=75}break}case 117:{o=0;p=19433;n=c[N>>2]|0;f=c[N+4>>2]|0;I=75;break}case 99:{a[N+536+39>>0]=c[N>>2];f=N+536+39|0;x=0;w=19433;n=J;t=1;u=y;break}case 109:{o=c[6326]|0;f=0;while(1){if((d[19487+f>>0]|0)==(o|0)){I=80;break}n=f+1|0;if((n|0)==87){n=19575;f=87;break}else f=n}if((I|0)==80)if(!f){n=19575;I=87;break f}else n=19575;do{do{I=n;n=n+1|0}while((a[I>>0]|0)!=0);f=f+-1|0}while((f|0)!=0);I=87;break}case 115:{n=c[N>>2]|0;n=n|0?n:19443;I=87;break}case 67:{c[N+8>>2]=c[N>>2];c[N+8+4>>2]=0;c[N>>2]=N+8;t=-1;o=N+8|0;I=103;break}case 83:{n=c[N>>2]|0;if(!t){$k(e,32,s,0,u);n=0;I=114}else{o=n;I=103}break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{q=+h[N>>3];c[N+16>>2]=0;h[l>>3]=q;if((c[l+4>>2]|0)>=0)if(!(u&2048)){C=u&1;F=(u&1|0)==0?19451:19456}else{C=1;F=19453}else{q=-q;C=1;F=19450}h[l>>3]=q;E=c[l+4>>2]&2146435072;do if(E>>>0<2146435072|(E|0)==2146435072&0<0){v=+vm(q,N+16|0)*2.0;if(v!=0.0)c[N+16>>2]=(c[N+16>>2]|0)+-1;if((A|32|0)==97){w=(A&32|0)==0?F:F+9|0;r=C|2;n=12-t|0;do if(!(t>>>0>11|(n|0)==0)){q=8.0;do{n=n+-1|0;q=q*16.0}while((n|0)!=0);if((a[w>>0]|0)==45){q=-(q+(-v-q));break}else{q=v+q-q;break}}else q=v;while(0);f=c[N+16>>2]|0;n=(f|0)<0?0-f|0:f;n=zm(n,((n|0)<0)<<31>>31,N+576+12|0)|0;if((n|0)==(N+576+12|0)){a[N+576+11>>0]=48;n=N+576+11|0}a[n+-1>>0]=(f>>31&2)+43;p=n+-2|0;a[p>>0]=A+15;o=(t|0)<1;f=N+588|0;do{F=~~q;n=f+1|0;a[f>>0]=d[19417+F>>0]|A&32;q=(q-+(F|0))*16.0;do if((n-K|0)==1){if((u&8|0)==0&(o&q==0.0)){f=n;break}a[n>>0]=46;f=f+2|0}else f=n;while(0)}while(q!=0.0);n=(t|0)!=0&(-2-K+f|0)<(t|0)?L+2+t-p|0:L-K-p+f|0;$k(e,32,s,n+r|0,u);if(!(c[e>>2]&32))pk(w,r,e);$k(e,48,s,n+r|0,u^65536);if(!(c[e>>2]&32))pk(N+588|0,f-K|0,e);$k(e,48,n-(f-K+(L-p))|0,0,0);if(!(c[e>>2]&32))pk(p,L-p|0,e);$k(e,32,s,n+r|0,u^8192);n=(n+r|0)<(s|0)?s:n+r|0;break}n=(t|0)<0?6:t;if(v!=0.0){o=(c[N+16>>2]|0)+-28|0;c[N+16>>2]=o;q=v*268435456.0}else{q=v;o=c[N+16>>2]|0}E=(o|0)<0?N+24|0:N+24+288|0;f=E;do{B=~~q>>>0;c[f>>2]=B;f=f+4|0;q=(q-+(B>>>0))*1.0e9}while(q!=0.0);if((o|0)>0){t=E;while(1){r=(o|0)>29?29:o;o=f+-4|0;do if(o>>>0<t>>>0)p=t;else{p=0;do{z=cs(c[o>>2]|0,0,r|0)|0;z=Ct(z|0,D|0,p|0,0)|0;B=D;y=er(z|0,B|0,1e9,0)|0;c[o>>2]=y;p=Sv(z|0,B|0,1e9,0)|0;o=o+-4|0}while(o>>>0>=t>>>0);if(!p){p=t;break}B=t+-4|0;c[B>>2]=p;p=B}while(0);while(1){if(f>>>0<=p>>>0)break;o=f+-4|0;if(!(c[o>>2]|0))f=o;else break}o=(c[N+16>>2]|0)-r|0;c[N+16>>2]=o;if((o|0)>0)t=p;else break}}else p=E;if((o|0)<0){do{t=0-o|0;t=(t|0)>9?9:t;do if(p>>>0<f>>>0){r=0;o=p;do{B=c[o>>2]|0;c[o>>2]=(B>>>t)+r;r=S(B&(1<<t)+-1,1e9>>>t)|0;o=o+4|0}while(o>>>0<f>>>0);o=(c[p>>2]|0)==0?p+4|0:p;if(!r){p=o;break}c[f>>2]=r;p=o;f=f+4|0}else p=(c[p>>2]|0)==0?p+4|0:p;while(0);o=(A|32|0)==102?E:p;f=(f-o>>2|0)>(((n+25|0)/9|0)+1|0)?o+(((n+25|0)/9|0)+1<<2)|0:f;o=(c[N+16>>2]|0)+t|0;c[N+16>>2]=o}while((o|0)<0);o=p}else o=p;do if(o>>>0<f>>>0){p=(E-o>>2)*9|0;t=c[o>>2]|0;if(t>>>0<10)break;else r=10;do{r=r*10|0;p=p+1|0}while(t>>>0>=r>>>0)}else p=0;while(0);r=n-((A|32|0)!=102?p:0)+(((n|0)!=0&(A|32|0)==103)<<31>>31)|0;if((r|0)<(((f-E>>2)*9|0)+-9|0)){w=E+4+(((r+9216|0)/9|0)+-1024<<2)|0;if((((r+9216|0)%9|0)+1|0)<9){t=((r+9216|0)%9|0)+1|0;r=10;do{r=r*10|0;t=t+1|0}while((t|0)!=9)}else r=10;y=c[w>>2]|0;z=(y>>>0)%(r>>>0)|0;t=(w+4|0)==(f|0);do if(t&(z|0)==0)r=w;else{v=(((y>>>0)/(r>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;x=(r|0)/2|0;if(z>>>0<x>>>0)q=.5;else q=t&(z|0)==(x|0)?1.0:1.5;do if(C){if((a[F>>0]|0)!=45)break;q=-q;v=-v}while(0);c[w>>2]=y-z;if(!(v+q!=v)){r=w;break}B=y-z+r|0;c[w>>2]=B;if(B>>>0>999999999){r=w;while(1){p=r+-4|0;c[r>>2]=0;if(p>>>0<o>>>0){o=o+-4|0;c[o>>2]=0}B=(c[p>>2]|0)+1|0;c[p>>2]=B;if(B>>>0>999999999)r=p;else{w=p;break}}}p=(E-o>>2)*9|0;t=c[o>>2]|0;if(t>>>0<10){r=w;break}else r=10;do{r=r*10|0;p=p+1|0}while(t>>>0>=r>>>0);r=w}while(0);B=r+4|0;f=f>>>0>B>>>0?B:f}x=0-p|0;B=f;while(1){if(B>>>0<=o>>>0){z=0;break}f=B+-4|0;if(!(c[f>>2]|0))B=f;else{z=1;break}}do if((A|32|0)==103){if((((n|0)!=0^1)+n|0)>(p|0)&(p|0)>-5){w=A+-1|0;n=((n|0)!=0^1)+n+-1-p|0}else{w=A+-2|0;n=((n|0)!=0^1)+n+-1|0}if(u&8|0){t=u&8;break}do if(z){t=c[B+-4>>2]|0;if(!t){f=9;break}if(!((t>>>0)%10|0)){f=0;r=10}else{f=0;break}do{r=r*10|0;f=f+1|0}while(!((t>>>0)%(r>>>0)|0|0))}else f=9;while(0);r=((B-E>>2)*9|0)+-9|0;if((w|32|0)==102){t=r-f|0;t=(t|0)<0?0:t;n=(n|0)<(t|0)?n:t;t=0;break}else{t=r+p-f|0;t=(t|0)<0?0:t;n=(n|0)<(t|0)?n:t;t=0;break}}else{w=A;t=u&8}while(0);y=n|t;r=(w|32|0)==102;if(r){x=0;f=(p|0)>0?p:0}else{f=(p|0)<0?x:p;f=zm(f,((f|0)<0)<<31>>31,N+576+12|0)|0;if((L-f|0)<2)do{f=f+-1|0;a[f>>0]=48}while((L-f|0)<2);a[f+-1>>0]=(p>>31&2)+43;f=f+-2|0;a[f>>0]=w;x=f;f=L-f|0}A=C+1+n+((y|0)!=0&1)+f|0;$k(e,32,s,A,u);if(!(c[e>>2]&32))pk(F,C,e);$k(e,48,s,A,u^65536);do if(r){p=o>>>0>E>>>0?E:o;o=p;do{f=zm(c[o>>2]|0,0,M)|0;do if((o|0)==(p|0)){if((f|0)!=(M|0))break;a[N+588+8>>0]=48;f=N+588+8|0}else{if(f>>>0<=(N+588|0)>>>0)break;yn(N+588|0,48,f-K|0)|0;do f=f+-1|0;while(f>>>0>(N+588|0)>>>0)}while(0);if(!(c[e>>2]&32))pk(f,M-f|0,e);o=o+4|0}while(o>>>0<=E>>>0);do if(y|0){if(c[e>>2]&32|0)break;pk(19485,1,e)}while(0);if((n|0)>0&o>>>0<B>>>0)while(1){f=zm(c[o>>2]|0,0,M)|0;if(f>>>0>(N+588|0)>>>0){yn(N+588|0,48,f-K|0)|0;do f=f+-1|0;while(f>>>0>(N+588|0)>>>0)}if(!(c[e>>2]&32))pk(f,(n|0)>9?9:n,e);o=o+4|0;f=n+-9|0;if(!((n|0)>9&o>>>0<B>>>0)){n=f;break}else n=f}$k(e,48,n+9|0,9,0)}else{w=z?B:o+4|0;if((n|0)>-1){t=(t|0)==0;r=o;do{f=zm(c[r>>2]|0,0,M)|0;if((f|0)==(M|0)){a[N+588+8>>0]=48;f=N+588+8|0}do if((r|0)==(o|0)){p=f+1|0;if(!(c[e>>2]&32))pk(f,1,e);if(t&(n|0)<1){f=p;break}if(c[e>>2]&32|0){f=p;break}pk(19485,1,e);f=p}else{if(f>>>0<=(N+588|0)>>>0)break;yn(N+588|0,48,f+(0-K)|0)|0;do f=f+-1|0;while(f>>>0>(N+588|0)>>>0)}while(0);p=M-f|0;if(!(c[e>>2]&32))pk(f,(n|0)>(p|0)?p:n,e);n=n-p|0;r=r+4|0}while(r>>>0<w>>>0&(n|0)>-1)}$k(e,48,n+18|0,18,0);if(c[e>>2]&32|0)break;pk(x,L-x|0,e)}while(0);$k(e,32,s,A,u^8192);n=(A|0)<(s|0)?s:A}else{o=q!=q|0.0!=0.0;f=o?0:C;$k(e,32,s,f+3|0,y);n=c[e>>2]|0;if(!(n&32)){pk(F,f,e);n=c[e>>2]|0}if(!(n&32))pk(o?(A&32|0?19477:19481):A&32|0?19469:19473,3,e);$k(e,32,s,f+3|0,u^8192);n=(f+3|0)<(s|0)?s:f+3|0}while(0);r=H;f=G;continue a}default:{x=0;w=19433;n=J}}while(0);g:do if((I|0)==63){o=c[N>>2]|0;p=c[N+4>>2]|0;r=w&32;if((o|0)==0&(p|0)==0){f=J;o=0;p=0}else{f=J;do{f=f+-1|0;a[f>>0]=d[19417+(o&15)>>0]|r;o=ps(o|0,p|0,4)|0;p=D}while(!((o|0)==0&(p|0)==0));o=c[N>>2]|0;p=c[N+4>>2]|0}p=(n&8|0)==0|(o|0)==0&(p|0)==0;o=p?0:2;p=p?19433:19433+(w>>4)|0;I=76}else if((I|0)==75){f=zm(n,f,J)|0;n=u;I=76}else if((I|0)==87){I=0;r=n;p=(t|0)!=0;h:do if(p&(r&3|0)!=0){o=n;f=t;while(1){if(!(a[o>>0]|0))break h;o=o+1|0;p=f+-1|0;if((p|0)!=0&(o&3|0)!=0)f=p;else{f=p;p=(p|0)!=0;I=90;break}}}else{o=n;f=t;I=90}while(0);i:do if((I|0)==90){I=0;if(p){if(a[o>>0]|0){j:do if(f>>>0>3)while(1){F=c[o>>2]|0;if((F&-2139062144^-2139062144)&F+-16843009|0)break;o=o+4|0;f=f+-4|0;if(f>>>0<=3){I=96;break j}}else I=96;while(0);if((I|0)==96){I=0;if(!f){f=0;break}}while(1){if(!(a[o>>0]|0))break i;o=o+1|0;f=f+-1|0;if(!f){f=0;break}}}}else f=0}while(0);u=f|0?o:0;f=n;x=0;w=19433;n=(u|0)==0?n+t|0:u;t=(u|0)==0?t:u-r|0;u=y}else if((I|0)==103){I=0;r=o;n=0;f=0;while(1){p=c[r>>2]|0;if(!p)break;f=Ml(N+528|0,p)|0;if((f|0)<0|f>>>0>(t-n|0)>>>0)break;n=f+n|0;if(t>>>0>n>>>0)r=r+4|0;else break}if((f|0)<0){m=-1;break a}$k(e,32,s,n,u);if(!n){n=0;I=114}else{p=0;while(1){f=c[o>>2]|0;if(!f){I=114;break g}f=Ml(N+528|0,f)|0;p=f+p|0;if((p|0)>(n|0)){I=114;break g}if(!(c[e>>2]&32))pk(N+528|0,f,e);if(p>>>0>=n>>>0){I=114;break}else o=o+4|0}}}while(0);if((I|0)==114){I=0;$k(e,32,s,n,u^8192);n=(s|0)>(n|0)?s:n;r=H;f=G;continue}if((I|0)==76){I=0;u=(t|0)>-1?n&-65537:n;n=(c[N>>2]|0)!=0|(c[N+4>>2]|0)!=0;if((t|0)!=0|n){F=(n&1^1)+(J-f)|0;x=o;w=p;n=J;t=(t|0)>(F|0)?t:F}else{f=J;x=o;w=p;n=J;t=0}}r=n-f|0;o=(t|0)<(r|0)?r:t;p=o+x|0;n=(s|0)<(p|0)?p:s;$k(e,32,n,p,u);if(!(c[e>>2]&32))pk(w,x,e);$k(e,48,n,p,u^65536);$k(e,48,o,r,0);if(!(c[e>>2]&32))pk(f,r,e);$k(e,32,n,p,u^8192);r=H;f=G}k:do if((I|0)==261)if(!e)if(!r)m=0;else{m=1;while(1){n=c[k+(m<<2)>>2]|0;if(!n){f=0;break}Hg(j+(m<<3)|0,n,g);m=m+1|0;if((m|0)>=10){m=1;break k}}while(1){n=m+1|0;if(f|0){m=-1;break k}if((n|0)>=10){m=1;break k}m=n;f=c[k+(n<<2)>>2]|0}}while(0);i=N;return m|0}function mc(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0;V=c[e>>2]|0;fa=c[f>>2]|0;if(V|0)g=c[V+12>>2]|0;else g=b;h=c[g+88>>2]|0;i=c[g+92>>2]|0;j=c[g+96>>2]|0;if(!fa)g=d;else g=c[fa+12>>2]|0;r=c[g+88>>2]|0;p=c[g+92>>2]|0;q=c[g+96>>2]|0;Z=c[b+88>>2]|0;da=(c[d+88>>2]|0)-Z|0;u=c[b+92>>2]|0;ea=(c[d+92>>2]|0)-u|0;l=c[b+96>>2]|0;W=(c[d+96>>2]|0)-l|0;Y=c[(V|0?V:fa)+12>>2]|0;_=(c[Y+88>>2]|0)-Z|0;U=(c[Y+92>>2]|0)-u|0;Y=(c[Y+96>>2]|0)-l|0;X=(S(U,W)|0)-(S(Y,ea)|0)|0;Y=(S(Y,da)|0)-(S(_,W)|0)|0;U=(S(_,ea)|0)-(S(U,da)|0)|0;Z=rr(X|0,((X|0)<0)<<31>>31|0,Z|0,((Z|0)<0)<<31>>31|0)|0;_=D;u=rr(Y|0,((Y|0)<0)<<31>>31|0,u|0,((u|0)<0)<<31>>31|0)|0;t=D;l=rr(U|0,((U|0)<0)<<31>>31|0,l|0,((l|0)<0)<<31>>31|0)|0;l=Ct(Z|0,_|0,l|0,D|0)|0;t=Ct(l|0,D|0,u|0,t|0)|0;u=D;l=rr(U|0,((U|0)<0)<<31>>31|0,ea|0,((ea|0)<0)<<31>>31|0)|0;_=D;Z=rr(Y|0,((Y|0)<0)<<31>>31|0,W|0,((W|0)<0)<<31>>31|0)|0;Z=Ds(l|0,_|0,Z|0,D|0)|0;_=D;l=rr(X|0,((X|0)<0)<<31>>31|0,W|0,((W|0)<0)<<31>>31|0)|0;aa=D;$=rr(U|0,((U|0)<0)<<31>>31|0,da|0,((da|0)<0)<<31>>31|0)|0;$=Ds(l|0,aa|0,$|0,D|0)|0;aa=D;l=rr(Y|0,((Y|0)<0)<<31>>31|0,da|0,((da|0)<0)<<31>>31|0)|0;ca=D;ba=rr(X|0,((X|0)<0)<<31>>31|0,ea|0,((ea|0)<0)<<31>>31|0)|0;ba=Ds(l|0,ca|0,ba|0,D|0)|0;ca=D;l=rr(Z|0,_|0,h|0,((h|0)<0)<<31>>31|0)|0;T=D;k=rr($|0,aa|0,i|0,((i|0)<0)<<31>>31|0)|0;T=Ct(k|0,D|0,l|0,T|0)|0;l=D;k=rr(ba|0,ca|0,j|0,((j|0)<0)<<31>>31|0)|0;k=Ct(T|0,l|0,k|0,D|0)|0;l=D;if((V|0)!=0?(c[V+12>>2]|0)!=0:0){g=h;b=i;d=j;n=V;o=l;m=k;while(1){n=c[(c[n+8>>2]|0)+4>>2]|0;l=n+12|0;j=c[l>>2]|0;h=c[j+88>>2]|0;R=rr(h|0,((h|0)<0)<<31>>31|0,X|0,((X|0)<0)<<31>>31|0)|0;Q=D;i=c[j+92>>2]|0;T=rr(i|0,((i|0)<0)<<31>>31|0,Y|0,((Y|0)<0)<<31>>31|0)|0;Q=Ct(T|0,D|0,R|0,Q|0)|0;R=D;j=c[j+96>>2]|0;T=rr(j|0,((j|0)<0)<<31>>31|0,U|0,((U|0)<0)<<31>>31|0)|0;T=Ct(Q|0,R|0,T|0,D|0)|0;R=D;if((R|0)<(u|0)|(R|0)==(u|0)&T>>>0<t>>>0){k=m;j=o;break}if((c[n+20>>2]|0)==(c[a+100>>2]|0)){k=m;j=o;break}T=rr(h|0,((h|0)<0)<<31>>31|0,Z|0,_|0)|0;R=D;k=rr(i|0,((i|0)<0)<<31>>31|0,$|0,aa|0)|0;R=Ct(k|0,D|0,T|0,R|0)|0;T=D;k=rr(j|0,((j|0)<0)<<31>>31|0,ba|0,ca|0)|0;k=Ct(R|0,T|0,k|0,D|0)|0;j=D;if(!((j|0)>(o|0)|(j|0)==(o|0)&k>>>0>m>>>0)){k=m;j=o;break}c[e>>2]=n;T=c[l>>2]|0;g=c[T+88>>2]|0;b=c[T+92>>2]|0;d=c[T+96>>2]|0;if(!T)break;else{o=j;m=k}}h=g;i=c[f>>2]|0;s=j}else{b=i;d=j;i=fa;s=l}g=rr(Z|0,_|0,r|0,((r|0)<0)<<31>>31|0)|0;T=D;j=rr($|0,aa|0,p|0,((p|0)<0)<<31>>31|0)|0;T=Ct(j|0,D|0,g|0,T|0)|0;g=D;j=rr(ba|0,ca|0,q|0,((q|0)<0)<<31>>31|0)|0;j=Ct(T|0,g|0,j|0,D|0)|0;g=D;a:do if(i)if(!(c[i+12>>2]|0))o=q;else{o=q;while(1){q=c[c[i+8>>2]>>2]|0;n=c[q+12>>2]|0;l=c[n+88>>2]|0;R=rr(l|0,((l|0)<0)<<31>>31|0,X|0,((X|0)<0)<<31>>31|0)|0;Q=D;m=c[n+92>>2]|0;T=rr(m|0,((m|0)<0)<<31>>31|0,Y|0,((Y|0)<0)<<31>>31|0)|0;Q=Ct(T|0,D|0,R|0,Q|0)|0;R=D;n=c[n+96>>2]|0;T=rr(n|0,((n|0)<0)<<31>>31|0,U|0,((U|0)<0)<<31>>31|0)|0;T=Ct(Q|0,R|0,T|0,D|0)|0;R=D;if((R|0)<(u|0)|(R|0)==(u|0)&T>>>0<t>>>0)break a;if((c[q+20>>2]|0)==(c[a+100>>2]|0))break a;l=rr(l|0,((l|0)<0)<<31>>31|0,Z|0,_|0)|0;T=D;m=rr(m|0,((m|0)<0)<<31>>31|0,$|0,aa|0)|0;T=Ct(m|0,D|0,l|0,T|0)|0;m=D;l=rr(n|0,((n|0)<0)<<31>>31|0,ba|0,ca|0)|0;l=Ct(T|0,m|0,l|0,D|0)|0;m=D;if(!((m|0)>(g|0)|(m|0)==(g|0)&l>>>0>j>>>0))break a;c[f>>2]=q;T=c[q+12>>2]|0;g=c[T+88>>2]|0;i=c[T+92>>2]|0;j=c[T+96>>2]|0;if(!T){r=g;p=i;o=j;i=q;j=l;g=m;break}else{r=g;p=i;o=j;i=q;g=m;j=l}}}else{o=q;i=0}while(0);j=Ds(j|0,g|0,k|0,s|0)|0;T=D;if((T|0)>0|(T|0)==0&j>>>0>0){Q=Ds(0,0,U|0,((U|0)<0)<<31>>31|0)|0;R=D;N=r;k=h;O=p;m=b;P=o;n=d;l=i;u=j;q=T;while(1){t=(S(O-m|0,ea)|0)+(S(N-k|0,da)|0)+(S(P-n|0,W)|0)|0;g=c[e>>2]|0;if(!g){C=t;H=k;G=m;z=t;g=((t|0)<0)<<31>>31;A=q}else{s=k;K=t;M=t;L=((t|0)<0)<<31>>31;b:while(1){if(!(c[g+12>>2]|0)){t=K;k=M;g=L;break}G=c[(c[g>>2]|0)+8>>2]|0;if((c[G+20>>2]|0)<=(c[a+100>>2]|0)){t=K;k=M;g=L;break}J=c[G+12>>2]|0;H=c[J+88>>2]|0;F=H-s|0;I=c[J+92>>2]|0;E=I-m|0;J=c[J+96>>2]|0;k=J-n|0;t=rr(F|0,((F|0)<0)<<31>>31|0,Z|0,_|0)|0;C=D;l=rr(E|0,((E|0)<0)<<31>>31|0,$|0,aa|0)|0;C=Ct(l|0,D|0,t|0,C|0)|0;t=D;l=rr(k|0,((k|0)<0)<<31>>31|0,ba|0,ca|0)|0;l=Ct(C|0,t|0,l|0,D|0)|0;t=D;k=(S(E,ea)|0)+(S(F,da)|0)+(S(k,W)|0)|0;do if((l|0)==0&(t|0)==0){if((k|0)>=0){t=K;k=M;g=L;break b}}else{if((t|0)>=0){t=K;k=M;g=L;break b}if((k|0)>0){w=1;x=k;v=((k|0)<0)<<31>>31}else{x=Ds(0,0,k|0,((k|0)<0)<<31>>31|0)|0;w=((k|0)!=0)<<31>>31;x=k|0?x:0;v=k|0?D:0}F=0-w|0;A=Ds(0,0,l|0,t|0)|0;B=D;if((K|0)>0){k=1;C=M;E=L}else{E=(K|0)!=0;C=Ds(0,0,M|0,L|0)|0;k=E<<31>>31;C=E?C:0;E=E?D:0}if((q|0)>0|(q|0)==0&u>>>0>0){l=u;t=q}else{t=(u|0)!=0|(q|0)!=0;l=Ds(0,0,u|0,q|0)|0;k=t?0-k|0:k;l=t?l:0;t=t?D:0}if((k|0)==(F|0)){if(!w)break;k=rr(l|0,0,x|0,0)|0;w=D;ja=rr(t|0,0,x|0,0)|0;ia=D;y=rr(l|0,0,v|0,0)|0;z=D;ha=rr(t|0,0,v|0,0)|0;x=D;y=Ct(ja|0,0,y|0,0)|0;l=D;x=Ct(ia|0,0,ha|0,x|0)|0;z=Ct(x|0,D|0,z|0,0)|0;l=Ct(z|0,D|0,l|0,0)|0;z=D;w=Ct(0,y|0,k|0,w|0)|0;x=D;y=Ct(l|0,z|0,(x>>>0<y>>>0|(x|0)==(y|0)&w>>>0<0)&1|0,0)|0;z=D;l=rr(C|0,0,A|0,0)|0;k=D;ha=rr(E|0,0,A|0,0)|0;A=D;t=rr(C|0,0,B|0,0)|0;v=D;B=rr(E|0,0,B|0,0)|0;C=D;t=Ct(ha|0,0,t|0,0)|0;E=D;C=Ct(A|0,0,B|0,C|0)|0;v=Ct(C|0,D|0,v|0,0)|0;E=Ct(v|0,D|0,E|0,0)|0;v=D;k=Ct(0,t|0,l|0,k|0)|0;l=D;t=Ct(E|0,v|0,(l>>>0<t>>>0|(l|0)==(t|0)&k>>>0<0)&1|0,0)|0;v=D;do if(z>>>0<v>>>0|(z|0)==(v|0)&y>>>0<t>>>0)k=-1;else{if(z>>>0>v>>>0|(z|0)==(v|0)&y>>>0>t>>>0){k=1;break}if(x>>>0<l>>>0|(x|0)==(l|0)&w>>>0<k>>>0){k=-1;break}k=(x>>>0>l>>>0|(x|0)==(l|0)&w>>>0>k>>>0)&1}while(0);k=S(k,F)|0}else k=F-k|0;if((k|0)<=-1){t=K;k=M;g=L;break b}}while(0);ja=N-H|0;ia=O-I|0;l=P-J|0;q=rr(ja|0,((ja|0)<0)<<31>>31|0,Z|0,_|0)|0;ha=D;k=rr(ia|0,((ia|0)<0)<<31>>31|0,$|0,aa|0)|0;ha=Ct(k|0,D|0,q|0,ha|0)|0;q=D;k=rr(l|0,((l|0)<0)<<31>>31|0,ba|0,ca|0)|0;k=Ct(ha|0,q|0,k|0,D|0)|0;q=D;g=(g|0)==(V|0)?0:G;c[e>>2]=g;l=(S(ia,ea)|0)+(S(ja,da)|0)+(S(l,W)|0)|0;if(!g){t=l;s=H;m=I;n=J;u=k;k=l;g=((l|0)<0)<<31>>31;break}else{s=H;m=I;n=J;K=l;M=l;L=((l|0)<0)<<31>>31;u=k}}C=t;H=s;G=m;l=c[f>>2]|0;z=k;A=q}if(!l){g=118;break}if(!(c[l+12>>2]|0)){g=118;break}F=c[c[l+8>>2]>>2]|0;if((c[F+20>>2]|0)<=(c[a+100>>2]|0)){g=118;break}q=c[F+12>>2]|0;t=c[q+88>>2]|0;m=t-N|0;s=c[q+92>>2]|0;l=s-O|0;q=c[q+96>>2]|0;k=q-P|0;ja=rr(m|0,((m|0)<0)<<31>>31|0,X|0,((X|0)<0)<<31>>31|0)|0;ha=D;ia=rr(l|0,((l|0)<0)<<31>>31|0,Y|0,((Y|0)<0)<<31>>31|0)|0;ha=Ct(ia|0,D|0,ja|0,ha|0)|0;ja=D;ia=rr(k|0,((k|0)<0)<<31>>31|0,Q|0,R|0)|0;if(!((ha|0)==(ia|0)&(ja|0)==(D|0))){g=118;break}w=rr(m|0,((m|0)<0)<<31>>31|0,Z|0,_|0)|0;E=D;v=rr(l|0,((l|0)<0)<<31>>31|0,$|0,aa|0)|0;E=Ct(v|0,D|0,w|0,E|0)|0;w=D;v=rr(k|0,((k|0)<0)<<31>>31|0,ba|0,ca|0)|0;v=Ct(E|0,w|0,v|0,D|0)|0;w=D;k=(S(l,ea)|0)+(S(m,da)|0)+(S(k,W)|0)|0;E=t-H|0;ia=s-G|0;B=q-n|0;E=rr(E|0,((E|0)<0)<<31>>31|0,Z|0,_|0)|0;ja=D;ia=rr(ia|0,((ia|0)<0)<<31>>31|0,$|0,aa|0)|0;ja=Ct(ia|0,D|0,E|0,ja|0)|0;E=D;B=rr(B|0,((B|0)<0)<<31>>31|0,ba|0,ca|0)|0;B=Ct(ja|0,E|0,B|0,D|0)|0;E=D;if(!((E|0)>0|(E|0)==0&B>>>0>0)){g=118;break}if((v|0)==0&(w|0)==0){if((k|0)>=0){g=118;break}}else{if((w|0)>=0){g=118;break}if((k|0)>0){s=1;t=k;q=((k|0)<0)<<31>>31}else{t=Ds(0,0,k|0,((k|0)<0)<<31>>31|0)|0;s=((k|0)!=0)<<31>>31;t=k|0?t:0;q=k|0?D:0}y=0-s|0;w=Ds(0,0,v|0,w|0)|0;x=D;if((C|0)>0){k=1;v=z}else{ja=(C|0)!=0;v=Ds(0,0,z|0,g|0)|0;k=ja<<31>>31;v=ja?v:0;g=ja?D:0}if((A|0)>0|(A|0)==0&u>>>0>0){m=k;l=u;k=A}else{ja=(u|0)!=0|(A|0)!=0;l=Ds(0,0,u|0,A|0)|0;m=ja?0-k|0:k;l=ja?l:0;k=ja?D:0}if((m|0)==(y|0)){if(!s){g=118;break}ja=rr(l|0,0,t|0,0)|0;s=D;ia=rr(k|0,0,t|0,0)|0;P=D;t=rr(l|0,0,q|0,0)|0;u=D;k=rr(k|0,0,q|0,0)|0;q=D;t=Ct(ia|0,0,t|0,0)|0;ia=D;q=Ct(P|0,0,k|0,q|0)|0;u=Ct(q|0,D|0,u|0,0)|0;ia=Ct(u|0,D|0,ia|0,0)|0;u=D;q=Ct(0,t|0,ja|0,s|0)|0;s=D;t=Ct(ia|0,u|0,(s>>>0<t>>>0|(s|0)==(t|0)&q>>>0<0)&1|0,0)|0;u=D;ia=rr(v|0,0,w|0,0)|0;k=D;ja=rr(g|0,0,w|0,0)|0;P=D;l=rr(v|0,0,x|0,0)|0;m=D;ha=rr(g|0,0,x|0,0)|0;g=D;l=Ct(ja|0,0,l|0,0)|0;ja=D;g=Ct(P|0,0,ha|0,g|0)|0;m=Ct(g|0,D|0,m|0,0)|0;ja=Ct(m|0,D|0,ja|0,0)|0;m=D;g=Ct(0,l|0,ia|0,k|0)|0;k=D;l=Ct(ja|0,m|0,(k>>>0<l>>>0|(k|0)==(l|0)&g>>>0<0)&1|0,0)|0;m=D;do if(u>>>0<m>>>0|(u|0)==(m|0)&t>>>0<l>>>0)g=-1;else{if(u>>>0>m>>>0|(u|0)==(m|0)&t>>>0>l>>>0){g=1;break}if(s>>>0<k>>>0|(s|0)==(k|0)&q>>>0<g>>>0){g=-1;break}g=(s>>>0>k>>>0|(s|0)==(k|0)&q>>>0>g>>>0)&1}while(0);g=S(g,y)|0}else g=y-m|0;if((g|0)<=0){g=118;break}}c[f>>2]=F;P=c[F+12>>2]|0;N=c[P+88>>2]|0;k=H;O=c[P+92>>2]|0;m=G;P=c[P+96>>2]|0;l=F;u=B;q=E}if((g|0)==118)return}if((T|0)>=0)return;F=Ds(0,0,U|0,((U|0)<0)<<31>>31|0)|0;G=D;g=T;c:while(1){E=g;d:while(1){C=(S(p-b|0,ea)|0)+(S(r-h|0,da)|0)+(S(o-d|0,W)|0)|0;do if((i|0?c[i+12>>2]|0:0)?(ga=c[(c[i+4>>2]|0)+8>>2]|0,(c[ga+20>>2]|0)>(c[a+100>>2]|0)):0){B=c[ga+12>>2]|0;z=c[B+88>>2]|0;ja=z-r|0;A=c[B+92>>2]|0;ia=A-p|0;B=c[B+96>>2]|0;g=B-o|0;l=rr(ja|0,((ja|0)<0)<<31>>31|0,Z|0,_|0)|0;ha=D;k=rr(ia|0,((ia|0)<0)<<31>>31|0,$|0,aa|0)|0;ha=Ct(k|0,D|0,l|0,ha|0)|0;l=D;k=rr(g|0,((g|0)<0)<<31>>31|0,ba|0,ca|0)|0;k=Ct(ha|0,l|0,k|0,D|0)|0;l=D;g=(S(ia,ea)|0)+(S(ja,da)|0)+(S(g,W)|0)|0;if((k|0)==0&(l|0)==0)if((g|0)>0)break d;else break;if((l|0)<0){if((g|0)>0){n=1;q=g;m=((g|0)<0)<<31>>31}else{q=Ds(0,0,g|0,((g|0)<0)<<31>>31|0)|0;n=((g|0)!=0)<<31>>31;q=g|0?q:0;m=g|0?D:0}y=0-n|0;u=Ds(0,0,k|0,l|0)|0;v=D;if((C|0)>0){g=1;w=C;x=((C|0)<0)<<31>>31}else{w=Ds(0,0,C|0,((C|0)<0)<<31>>31|0)|0;g=((C|0)!=0)<<31>>31;w=C|0?w:0;x=C|0?D:0}if((E|0)>0|(E|0)==0&j>>>0>0){k=j;l=E}else{l=(j|0)!=0|(E|0)!=0;k=Ds(0,0,j|0,E|0)|0;g=l?0-g|0:g;k=l?k:0;l=l?D:0}if((g|0)==(y|0)){if(!n)break d;g=rr(k|0,0,q|0,0)|0;n=D;ha=rr(l|0,0,q|0,0)|0;V=D;s=rr(k|0,0,m|0,0)|0;t=D;ja=rr(l|0,0,m|0,0)|0;q=D;s=Ct(ha|0,0,s|0,0)|0;k=D;q=Ct(V|0,0,ja|0,q|0)|0;t=Ct(q|0,D|0,t|0,0)|0;k=Ct(t|0,D|0,k|0,0)|0;t=D;n=Ct(0,s|0,g|0,n|0)|0;q=D;s=Ct(k|0,t|0,(q>>>0<s>>>0|(q|0)==(s|0)&n>>>0<0)&1|0,0)|0;t=D;k=rr(w|0,0,u|0,0)|0;g=D;ja=rr(x|0,0,u|0,0)|0;V=D;l=rr(w|0,0,v|0,0)|0;m=D;ha=rr(x|0,0,v|0,0)|0;ia=D;l=Ct(ja|0,0,l|0,0)|0;ja=D;ia=Ct(V|0,0,ha|0,ia|0)|0;m=Ct(ia|0,D|0,m|0,0)|0;ja=Ct(m|0,D|0,ja|0,0)|0;m=D;g=Ct(0,l|0,k|0,g|0)|0;k=D;l=Ct(ja|0,m|0,(k>>>0<l>>>0|(k|0)==(l|0)&g>>>0<0)&1|0,0)|0;m=D;do if(t>>>0<m>>>0|(t|0)==(m|0)&s>>>0<l>>>0)g=-1;else{if(t>>>0>m>>>0|(t|0)==(m|0)&s>>>0>l>>>0){g=1;break}if(q>>>0<k>>>0|(q|0)==(k|0)&n>>>0<g>>>0){g=-1;break}g=(q>>>0>k>>>0|(q|0)==(k|0)&n>>>0>g>>>0)&1}while(0);g=S(g,y)|0}else g=y-g|0;if((g|0)<1)break d}}while(0);g=c[e>>2]|0;if(!g){g=118;break c}if(!(c[g+12>>2]|0)){g=118;break c}v=c[(c[g+8>>2]|0)+4>>2]|0;if((c[v+20>>2]|0)<=(c[a+100>>2]|0)){g=118;break c}i=c[v+12>>2]|0;l=c[i+88>>2]|0;h=l-h|0;k=c[i+92>>2]|0;b=k-b|0;i=c[i+96>>2]|0;g=i-d|0;ja=rr(h|0,((h|0)<0)<<31>>31|0,X|0,((X|0)<0)<<31>>31|0)|0;ha=D;ia=rr(b|0,((b|0)<0)<<31>>31|0,Y|0,((Y|0)<0)<<31>>31|0)|0;ha=Ct(ia|0,D|0,ja|0,ha|0)|0;ja=D;ia=rr(g|0,((g|0)<0)<<31>>31|0,F|0,G|0)|0;if(!((ha|0)==(ia|0)&(ja|0)==(D|0))){g=118;break c}m=rr(h|0,((h|0)<0)<<31>>31|0,Z|0,_|0)|0;u=D;d=rr(b|0,((b|0)<0)<<31>>31|0,$|0,aa|0)|0;u=Ct(d|0,D|0,m|0,u|0)|0;m=D;d=rr(g|0,((g|0)<0)<<31>>31|0,ba|0,ca|0)|0;d=Ct(u|0,m|0,d|0,D|0)|0;m=D;g=(S(b,ea)|0)+(S(h,da)|0)+(S(g,W)|0)|0;u=r-l|0;ia=p-k|0;t=o-i|0;u=rr(u|0,((u|0)<0)<<31>>31|0,Z|0,_|0)|0;ja=D;ia=rr(ia|0,((ia|0)<0)<<31>>31|0,$|0,aa|0)|0;ja=Ct(ia|0,D|0,u|0,ja|0)|0;u=D;t=rr(t|0,((t|0)<0)<<31>>31|0,ba|0,ca|0)|0;t=Ct(ja|0,u|0,t|0,D|0)|0;u=D;if((u|0)>=0){g=118;break c}if((d|0)==0&(m|0)==0){if((g|0)<=0){g=118;break c}}else{if((m|0)>=0){g=118;break c}if((g|0)>0){i=1;k=g;h=((g|0)<0)<<31>>31}else{k=Ds(0,0,g|0,((g|0)<0)<<31>>31|0)|0;i=((g|0)!=0)<<31>>31;k=g|0?k:0;h=g|0?D:0}s=0-i|0;n=Ds(0,0,d|0,m|0)|0;q=D;if((C|0)>0){g=1;m=C;d=((C|0)<0)<<31>>31}else{m=Ds(0,0,C|0,((C|0)<0)<<31>>31|0)|0;g=((C|0)!=0)<<31>>31;m=C|0?m:0;d=C|0?D:0}if((E|0)>0|(E|0)==0&j>>>0>0){b=g;g=E}else{ja=(j|0)!=0|(E|0)!=0;j=Ds(0,0,j|0,E|0)|0;b=ja?0-g|0:g;j=ja?j:0;g=ja?D:0}if((b|0)==(s|0)){if(!i){g=118;break c}U=rr(j|0,0,k|0,0)|0;i=D;b=rr(g|0,0,k|0,0)|0;V=D;k=rr(j|0,0,h|0,0)|0;l=D;g=rr(g|0,0,h|0,0)|0;j=D;k=Ct(b|0,0,k|0,0)|0;b=D;j=Ct(V|0,0,g|0,j|0)|0;l=Ct(j|0,D|0,l|0,0)|0;b=Ct(l|0,D|0,b|0,0)|0;l=D;i=Ct(0,k|0,U|0,i|0)|0;j=D;k=Ct(b|0,l|0,(j>>>0<k>>>0|(j|0)==(k|0)&i>>>0<0)&1|0,0)|0;l=D;b=rr(m|0,0,n|0,0)|0;g=D;U=rr(d|0,0,n|0,0)|0;V=D;ja=rr(m|0,0,q|0,0)|0;h=D;ha=rr(d|0,0,q|0,0)|0;ia=D;d=Ct(U|0,0,ja|0,0)|0;ja=D;ia=Ct(V|0,0,ha|0,ia|0)|0;h=Ct(ia|0,D|0,h|0,0)|0;ja=Ct(h|0,D|0,ja|0,0)|0;h=D;g=Ct(0,d|0,b|0,g|0)|0;b=D;d=Ct(ja|0,h|0,(b>>>0<d>>>0|(b|0)==(d|0)&g>>>0<0)&1|0,0)|0;h=D;do if(l>>>0<h>>>0|(l|0)==(h|0)&k>>>0<d>>>0)g=-1;else{if(l>>>0>h>>>0|(l|0)==(h|0)&k>>>0>d>>>0){g=1;break}if(j>>>0<b>>>0|(j|0)==(b|0)&i>>>0<g>>>0){g=-1;break}g=(j>>>0>b>>>0|(j|0)==(b|0)&i>>>0>g>>>0)&1}while(0);g=S(g,s)|0}else g=s-b|0;if((g|0)>=0){g=118;break c}}c[e>>2]=v;d=c[v+12>>2]|0;h=c[d+88>>2]|0;b=c[d+92>>2]|0;d=c[d+96>>2]|0;i=c[f>>2]|0;E=u;j=t}r=z-h|0;o=A-b|0;j=B-d|0;r=rr(r|0,((r|0)<0)<<31>>31|0,Z|0,_|0)|0;p=D;o=rr(o|0,((o|0)<0)<<31>>31|0,$|0,aa|0)|0;p=Ct(o|0,D|0,r|0,p|0)|0;r=D;j=rr(j|0,((j|0)<0)<<31>>31|0,ba|0,ca|0)|0;j=Ct(p|0,r|0,j|0,D|0)|0;i=(i|0)==(fa|0)?0:ga;c[f>>2]=i;r=z;p=A;o=B;g=D}if((g|0)==118)return}function nc(d,e,f){d=d|0;e=e|0;f=+f;var h=0,j=0.0,k=0.0,m=0,n=0.0,o=0.0,p=0,q=0,r=0.0,s=0,t=0.0,u=0.0,v=0,w=0,x=0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,K=0.0,L=0.0,M=0.0,N=0;z=i;i=i+528|0;j=+g[d+100>>2];n=+g[d+104>>2];k=+g[d+108>>2];if(j*j+n*n+k*k>0.0){o=+H(+(1.0-+g[d+244>>2]),+f);g[d+100>>2]=j*o;g[d+104>>2]=o*n;g[d+108>>2]=o*k;j=j*o;n=o*n;k=o*k}o=j*j+n*n+k*k;if(o>0.0){s=c[d+8>>2]|0;c[z+456>>2]=c[s+4>>2];c[z+456+4>>2]=c[s+4+4>>2];c[z+456+8>>2]=c[s+4+8>>2];c[z+456+12>>2]=c[s+4+12>>2];h=z+456+16|0;c[h>>2]=c[s+20>>2];c[h+4>>2]=c[s+20+4>>2];c[h+8>>2]=c[s+20+8>>2];c[h+12>>2]=c[s+20+12>>2];m=z+456+32|0;c[m>>2]=c[s+36>>2];c[m+4>>2]=c[s+36+4>>2];c[m+8>>2]=c[s+36+8>>2];c[m+12>>2]=c[s+36+12>>2];q=z+456+48|0;c[q>>2]=c[s+52>>2];c[q+4>>2]=c[s+52+4>>2];c[q+8>>2]=c[s+52+8>>2];c[q+12>>2]=c[s+52+12>>2];M=+G(+o);K=j*(1.0/M);D=n*(1.0/M);o=k*(1.0/M);k=+J(+(M*f*.5))/+G(+(o*o+(K*K+D*D)));M=+I(+(M*f*.5));Jg(z+456|0,z+392|0);E=+g[z+392>>2];L=+g[z+392+12>>2];A=+g[z+392+8>>2];B=+g[z+392+4>>2];j=M*E+K*k*L+D*k*A-o*k*B;n=o*k*E+(D*k*L+M*B)-K*k*A;C=o*k*L+M*A+K*k*B-D*k*E;A=M*L-K*k*E-D*k*B-o*k*A;k=j*(2.0/(A*A+(C*C+(j*j+n*n))));o=n*(2.0/(A*A+(C*C+(j*j+n*n))));B=C*(2.0/(A*A+(C*C+(j*j+n*n))));g[z+456>>2]=1.0-(n*o+C*B);g[z+456+4>>2]=j*o-A*B;g[z+456+8>>2]=j*B+A*o;g[z+456+12>>2]=0.0;g[z+456+16>>2]=j*o+A*B;g[z+456+20>>2]=1.0-(j*k+C*B);g[z+456+24>>2]=n*B-A*k;g[z+456+28>>2]=0.0;g[z+456+32>>2]=j*B-A*o;g[z+456+36>>2]=n*B+A*k;g[z+456+40>>2]=1.0-(j*k+n*o);g[z+456+44>>2]=0.0;s=c[d+8>>2]|0;c[s+300>>2]=(c[s+300>>2]|0)+1;c[s+4>>2]=c[z+456>>2];c[s+4+4>>2]=c[z+456+4>>2];c[s+4+8>>2]=c[z+456+8>>2];c[s+4+12>>2]=c[z+456+12>>2];c[s+20>>2]=c[h>>2];c[s+20+4>>2]=c[h+4>>2];c[s+20+8>>2]=c[h+8>>2];c[s+20+12>>2]=c[h+12>>2];c[s+36>>2]=c[m>>2];c[s+36+4>>2]=c[m+4>>2];c[s+36+8>>2]=c[m+8>>2];c[s+36+12>>2]=c[m+12>>2];c[s+52>>2]=c[q>>2];c[s+52+4>>2]=c[q+4>>2];c[s+52+8>>2]=c[q+8>>2];c[s+52+12>>2]=c[q+12>>2];s=c[d+8>>2]|0;c[d+132>>2]=c[s+52>>2];c[d+132+4>>2]=c[s+52+4>>2];c[d+132+8>>2]=c[s+52+8>>2];c[d+132+12>>2]=c[s+52+12>>2];rp(d+152|0,s+52|0,16)|0;Jg(s+4|0,z+392|0);c[d+168>>2]=c[z+392>>2];c[d+168+4>>2]=c[z+392+4>>2];c[d+168+8>>2]=c[z+392+8>>2];c[d+168+12>>2]=c[z+392+12>>2];c[d+184>>2]=c[d+168>>2];c[d+184+4>>2]=c[d+168+4>>2];c[d+184+8>>2]=c[d+168+8>>2];c[d+184+12>>2]=c[d+168+12>>2]}if((a[d+251>>0]|0)==0?+g[d+252>>2]<=0.0:0){i=z;return}a[d+248>>0]=(ob[c[(c[d>>2]|0)+48>>2]&127](d)|0)&1;j=+g[d+68>>2];k=+g[d+72>>2];n=+g[d+76>>2];o=+H(+(1.0-+g[d+240>>2]),+f);if(j*j+k*k+n*n>0.0){g[d+68>>2]=j*o;g[d+72>>2]=o*k;g[d+76>>2]=o*n}j=o*+g[d+20>>2]-+g[d+52>>2]*f;g[d+20>>2]=j;if(j>0.0?(r=+g[d+32>>2],j>r):0){g[d+20>>2]=r;j=r}if(j<0.0?(M=+F(+j),t=+F(+(+g[d+28>>2])),M>t):0){g[d+20>>2]=-t;j=-t}k=j*f;g[d+24>>2]=k;s=c[d+8>>2]|0;c[z>>2]=c[s+4>>2];c[z+4>>2]=c[s+4+4>>2];c[z+8>>2]=c[s+4+8>>2];c[z+12>>2]=c[s+4+12>>2];c[z+16>>2]=c[s+20>>2];c[z+16+4>>2]=c[s+20+4>>2];c[z+16+8>>2]=c[s+20+8>>2];c[z+16+12>>2]=c[s+20+12>>2];c[z+32>>2]=c[s+36>>2];c[z+32+4>>2]=c[s+36+4>>2];c[z+32+8>>2]=c[s+36+8>>2];c[z+32+12>>2]=c[s+36+12>>2];c[z+48>>2]=c[s+52>>2];c[z+48+4>>2]=c[s+52+4>>2];c[z+48+8>>2]=c[s+52+8>>2];c[z+48+12>>2]=c[s+52+12>>2];if(j<0.0)m=c[d+60>>2]|0;else m=0;c[z+456>>2]=1065353216;N=z+456+4|0;c[N>>2]=0;c[N+4>>2]=0;c[N+8>>2]=0;c[N+12>>2]=0;c[z+456+20>>2]=1065353216;q=z+456+24|0;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[z+456+40>>2]=1065353216;c[z+456+44>>2]=0;c[z+392>>2]=1065353216;s=z+392+4|0;c[s>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;c[s+12>>2]=0;c[z+392+20>>2]=1065353216;h=z+392+24|0;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[z+392+40>>2]=1065353216;c[z+392+44>>2]=0;c[z+456+48>>2]=c[d+132>>2];c[z+456+48+4>>2]=c[d+132+4>>2];c[z+456+48+8>>2]=c[d+132+8>>2];c[z+456+48+12>>2]=c[d+132+12>>2];n=(c[l>>2]=m,+g[l>>2]);C=k>0.0?k:0.0;L=n*+g[d+260>>2]+ +g[d+136>>2]+C*+g[d+276>>2];D=n*+g[d+264>>2]+ +g[d+140>>2]+C*+g[d+280>>2];g[d+152>>2]=n*+g[d+256>>2]+ +g[d+132>>2]+ +g[d+272>>2]*C;g[d+156>>2]=L;g[d+160>>2]=D;g[d+164>>2]=0.0;c[d+132>>2]=c[d+152>>2];c[d+132+4>>2]=c[d+152+4>>2];c[d+132+8>>2]=c[d+152+8>>2];c[d+132+12>>2]=c[d+152+12>>2];c[z+392+48>>2]=c[d+152>>2];c[z+392+48+4>>2]=c[d+152+4>>2];c[z+392+48+8>>2]=c[d+152+8>>2];c[z+392+48+12>>2]=c[d+152+12>>2];D=+g[d+168>>2];L=+g[d+172>>2];C=+g[d+176>>2];M=+g[d+180>>2];B=D*(2.0/(D*D+L*L+C*C+M*M));E=L*(2.0/(D*D+L*L+C*C+M*M));K=C*(2.0/(D*D+L*L+C*C+M*M));g[z+456>>2]=1.0-(L*E+C*K);g[N>>2]=D*E-M*K;g[z+456+8>>2]=D*K+M*E;g[z+456+12>>2]=0.0;g[z+456+16>>2]=D*E+M*K;g[z+456+20>>2]=1.0-(D*B+C*K);g[q>>2]=L*K-M*B;g[z+456+28>>2]=0.0;g[z+456+32>>2]=D*K-M*E;g[z+456+36>>2]=L*K+M*B;g[z+456+40>>2]=1.0-(D*B+L*E);g[z+456+44>>2]=0.0;E=+g[d+184>>2];L=+g[d+188>>2];B=+g[d+192>>2];D=+g[d+196>>2];M=E*(2.0/(E*E+L*L+B*B+D*D));K=L*(2.0/(E*E+L*L+B*B+D*D));C=B*(2.0/(E*E+L*L+B*B+D*D));g[z+392>>2]=1.0-(L*K+B*C);g[s>>2]=E*K-D*C;g[z+392+8>>2]=E*C+D*K;g[z+392+12>>2]=0.0;g[z+392+16>>2]=E*K+D*C;g[z+392+20>>2]=1.0-(E*M+B*C);g[h>>2]=L*C-D*M;g[z+392+28>>2]=0.0;g[z+392+32>>2]=E*C-D*K;g[z+392+36>>2]=L*C+D*M;g[z+392+40>>2]=1.0-(E*M+L*K);g[z+392+44>>2]=0.0;h=c[d+8>>2]|0;K=-+g[d+256>>2];L=-+g[d+260>>2];M=-+g[d+264>>2];s=c[d+48>>2]|0;g[z+288+4>>2]=1.0;b[z+288+8>>1]=1;b[z+288+10>>1]=-1;q=z+288+12|0;c[z+288+76>>2]=0;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[q+16>>2]=0;c[q+20>>2]=0;c[q+24>>2]=0;c[q+28>>2]=0;c[z+288>>2]=4196;c[z+288+80>>2]=h;g[z+288+84>>2]=K;g[z+288+88>>2]=L;g[z+288+92>>2]=M;g[z+288+96>>2]=0.0;c[z+288+100>>2]=s;s=c[(c[h+188>>2]|0)+4>>2]|0;b[z+288+8>>1]=s;b[z+288+10>>1]=s>>>16;if(!(a[d+250>>0]|0))Hd(e,c[d+12>>2]|0,z+456|0,z+392|0,z+288|0,+g[e+56>>2]);else ad(h,c[d+12>>2]|0,z+456|0,z+392|0,z+288|0,+g[e+56>>2]);if((+g[z+288+4>>2]<1.0?(p=c[d+8>>2]|0,(c[p+204>>2]&4|0)==0):0)?yb[c[(c[d>>2]|0)+56>>2]&63](d,p,c[z+288+76>>2]|0)|0:0){do if(+g[z+288+44>>2]*+g[d+256>>2]+ +g[z+288+48>>2]*+g[d+260>>2]+ +g[z+288+52>>2]*+g[d+264>>2]>0.0){j=+g[z+288+4>>2];g[d+148>>2]=n*j;if(!(a[d+288>>0]|0)){c[d+132>>2]=c[d+152>>2];c[d+132+4>>2]=c[d+152+4>>2];c[d+132+8>>2]=c[d+152+8>>2];c[d+132+12>>2]=c[d+152+12>>2];break}else{g[d+132>>2]=(1.0-j)*+g[d+132>>2]+j*+g[d+152>>2];g[d+136>>2]=(1.0-j)*+g[d+136>>2]+j*+g[d+156>>2];g[d+140>>2]=(1.0-j)*+g[d+140>>2]+j*+g[d+160>>2];break}}while(0);s=c[d+8>>2]|0;c[s+52>>2]=c[d+132>>2];c[s+52+4>>2]=c[d+132+4>>2];c[s+52+8>>2]=c[d+132+8>>2];c[s+52+12>>2]=c[d+132+12>>2];N=c[d+8>>2]|0;c[N+300>>2]=(c[N+300>>2]|0)+1;c[N+4>>2]=c[s+4>>2];c[N+4+4>>2]=c[s+4+4>>2];c[N+4+8>>2]=c[s+4+8>>2];c[N+4+12>>2]=c[s+4+12>>2];c[N+20>>2]=c[s+20>>2];c[N+20+4>>2]=c[s+20+4>>2];c[N+20+8>>2]=c[s+20+8>>2];c[N+20+12>>2]=c[s+20+12>>2];c[N+36>>2]=c[s+36>>2];c[N+36+4>>2]=c[s+36+4>>2];c[N+36+8>>2]=c[s+36+8>>2];c[N+36+12>>2]=c[s+36+12>>2];c[N+52>>2]=c[s+52>>2];c[N+52+4>>2]=c[s+52+4>>2];c[N+52+8>>2]=c[s+52+8>>2];c[N+52+12>>2]=c[s+52+12>>2];a[d+220>>0]=0;if((((Zd(d,e)|0?(a[d+220>>0]=1,Zd(d,e)|0):0)?(a[d+220>>0]=1,Zd(d,e)|0):0)?(a[d+220>>0]=1,Zd(d,e)|0):0)?(a[d+220>>0]=1,Zd(d,e)|0):0)a[d+220>>0]=1;N=(c[d+8>>2]|0)+52|0;c[d+152>>2]=c[N>>2];c[d+152+4>>2]=c[N+4>>2];c[d+152+8>>2]=c[N+8>>2];c[d+152+12>>2]=c[N+12>>2];rp(d+132|0,N|0,16)|0;if(+g[d+24>>2]>0.0){g[d+24>>2]=0.0;g[d+20>>2]=0.0;c[d+148>>2]=c[d+60>>2]}}else{c[d+148>>2]=m;c[d+132>>2]=c[d+152>>2];c[d+132+4>>2]=c[d+152+4>>2];c[d+132+8>>2]=c[d+152+8>>2];c[d+132+12>>2]=c[d+152+12>>2]}if(!(a[d+251>>0]|0)){L=+g[d+252>>2];M=L>f?f:L;g[d+252>>2]=L-f;bd(d,e,M*+g[d+68>>2],M*+g[d+72>>2],M*+g[d+76>>2])}else bd(d,e,+g[d+68>>2],+g[d+72>>2],+g[d+76>>2]);c[z+272>>2]=c[d+152>>2];c[z+272+4>>2]=c[d+152+4>>2];c[z+272+8>>2]=c[d+152+8>>2];c[z+272+12>>2]=c[d+152+12>>2];M=+g[d+20>>2];j=(M<0.0?-M:0.0)*f;if(!(M>0.0)){if(j>0.0?(u=+g[d+28>>2],j>u):0){N=b[d+248>>1]|0;j=(N&255)<<24>>24!=0|(N&65535)<256?u:j}r=j+ +g[d+148>>2];n=+g[d+256>>2]*r;o=r*+g[d+260>>2];r=r*+g[d+264>>2];g[d+152>>2]=+g[d+152>>2]-n;g[d+156>>2]=+g[d+156>>2]-o;g[d+160>>2]=+g[d+160>>2]-r;h=c[d+8>>2]|0;q=c[d+48>>2]|0;s=z+168+4|0;g[s>>2]=1.0;b[z+168+8>>1]=1;b[z+168+10>>1]=-1;p=z+168+12|0;c[z+168+76>>2]=0;c[p>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;c[p+16>>2]=0;c[p+20>>2]=0;c[p+24>>2]=0;c[p+28>>2]=0;c[z+168>>2]=4196;c[z+168+80>>2]=h;c[z+168+84>>2]=c[d+256>>2];c[z+168+84+4>>2]=c[d+256+4>>2];c[z+168+84+8>>2]=c[d+256+8>>2];c[z+168+84+12>>2]=c[d+256+12>>2];c[z+168+100>>2]=q;p=(c[h+188>>2]|0)+4|0;N=c[p>>2]|0;b[z+168+8>>1]=N;b[z+168+10>>1]=N>>>16;g[z+64+4>>2]=1.0;b[z+64+8>>1]=1;b[z+64+10>>1]=-1;N=z+64+12|0;c[z+64+76>>2]=0;c[N>>2]=0;c[N+4>>2]=0;c[N+8>>2]=0;c[N+12>>2]=0;c[N+16>>2]=0;c[N+20>>2]=0;c[N+24>>2]=0;c[N+28>>2]=0;c[z+64>>2]=4196;c[z+64+80>>2]=h;c[z+64+84>>2]=c[d+256>>2];c[z+64+84+4>>2]=c[d+256+4>>2];c[z+64+84+8>>2]=c[d+256+8>>2];c[z+64+84+12>>2]=c[d+256+12>>2];c[z+64+100>>2]=q;p=c[p>>2]|0;b[z+64+8>>1]=p;b[z+64+10>>1]=p>>>16;p=z+392+24|0;q=z+288+44|0;h=0;while(1){c[z+392+12>>2]=0;c[z+392+12+4>>2]=0;c[z+392+20>>2]=1065353216;c[p>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;c[z+392+40>>2]=1065353216;c[z+392+44>>2]=0;c[z+288>>2]=1065353216;c[z+288+4>>2]=0;c[z+288+4+4>>2]=0;c[z+288+4+8>>2]=0;c[z+288+4+12>>2]=0;c[z+288+20>>2]=1065353216;c[z+288+24>>2]=0;c[z+288+24+4>>2]=0;c[z+288+24+8>>2]=0;c[z+288+24+12>>2]=0;c[z+288+40>>2]=1065353216;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[q+16>>2]=0;c[z+456+48>>2]=c[d+132>>2];c[z+456+48+4>>2]=c[d+132+4>>2];c[z+456+48+8>>2]=c[d+132+8>>2];c[z+456+48+12>>2]=c[d+132+12>>2];c[z+392+48>>2]=c[d+152>>2];c[z+392+48+4>>2]=c[d+152+4>>2];c[z+392+48+8>>2]=c[d+152+8>>2];c[z+392+48+12>>2]=c[d+152+12>>2];D=+g[d+168>>2];M=+g[d+172>>2];C=+g[d+176>>2];K=+g[d+180>>2];B=D*(2.0/(D*D+M*M+C*C+K*K));E=M*(2.0/(D*D+M*M+C*C+K*K));L=C*(2.0/(D*D+M*M+C*C+K*K));g[z+456>>2]=1.0-(M*E+C*L);g[z+456+4>>2]=D*E-K*L;g[z+456+8>>2]=D*L+K*E;g[z+456+12>>2]=0.0;g[z+456+16>>2]=D*E+K*L;g[z+456+20>>2]=1.0-(D*B+C*L);g[z+456+24>>2]=M*L-K*B;g[z+456+28>>2]=0.0;g[z+456+32>>2]=D*L-K*E;g[z+456+36>>2]=M*L+K*B;g[z+456+40>>2]=1.0-(D*B+M*E);g[z+456+44>>2]=0.0;E=+g[d+184>>2];M=+g[d+188>>2];B=+g[d+192>>2];D=+g[d+196>>2];K=E*(2.0/(E*E+M*M+B*B+D*D));L=M*(2.0/(E*E+M*M+B*B+D*D));C=B*(2.0/(E*E+M*M+B*B+D*D));g[z+392>>2]=1.0-(M*L+B*C);g[z+392+4>>2]=E*L-D*C;g[z+392+8>>2]=E*C+D*L;g[z+392+12>>2]=0.0;g[z+392+16>>2]=E*L+D*C;g[z+392+20>>2]=1.0-(E*K+B*C);g[p>>2]=M*C-D*K;g[z+392+28>>2]=0.0;g[z+392+32>>2]=E*C-D*L;g[z+392+36>>2]=M*C+D*K;g[z+392+40>>2]=1.0-(E*K+M*L);g[z+392+44>>2]=0.0;L=+g[d+156>>2]-o;M=+g[d+160>>2]-r;g[z+288+48>>2]=+g[d+152>>2]-n;g[z+288+52>>2]=L;g[z+288+56>>2]=M;g[z+288+60>>2]=0.0;if(!(a[d+250>>0]|0)){Hd(e,c[d+12>>2]|0,z+456|0,z+392|0,z+168|0,+g[e+56>>2]);if(!(+g[s>>2]<1.0)?(c[(c[d+8>>2]|0)+204>>2]&4|0)==0:0)Hd(e,c[d+12>>2]|0,z+456|0,z+288|0,z+64|0,+g[e+56>>2])}else{ad(c[d+8>>2]|0,c[d+12>>2]|0,z+456|0,z+392|0,z+168|0,+g[e+56>>2]);if(!(+g[s>>2]<1.0)?(v=c[d+8>>2]|0,(c[v+204>>2]&4|0)==0):0)ad(v,c[d+12>>2]|0,z+456|0,z+288|0,z+64|0,+g[e+56>>2])}k=+g[d+20>>2];k=(k<0.0?-k:0.0)*f;if(!(a[d+290>>0]|0))if(+g[z+64+4>>2]<1.0?(x=c[d+8>>2]|0,(c[x+204>>2]&4|0)==0):0)m=yb[c[(c[d>>2]|0)+56>>2]&63](d,x,c[z+64+76>>2]|0)|0;else m=0;else if((+g[s>>2]<1.0?1:+g[z+64+4>>2]<1.0)?(w=c[d+8>>2]|0,(c[w+204>>2]&4|0)==0):0)m=yb[c[(c[d>>2]|0)+56>>2]&63](d,w,c[z+168+76>>2]|0)|0;else m=0;if(+g[d+20>>2]<0.0)j=+g[d+60>>2];else j=0.0;if(h|(!(k>0.0)|!(k<j)|m^1))break;N=b[d+248>>1]|0;if(!((N&255)<<24>>24!=0|(N&65535)<256)){h=0;break}c[d+152>>2]=c[z+272>>2];c[d+152+4>>2]=c[z+272+4>>2];c[d+152+8>>2]=c[z+272+8>>2];c[d+152+12>>2]=c[z+272+12>>2];r=j+ +g[d+148>>2];n=+g[d+256>>2]*r;o=r*+g[d+260>>2];r=r*+g[d+264>>2];g[d+152>>2]=+g[d+152>>2]-n;g[d+156>>2]=+g[d+156>>2]-o;g[d+160>>2]=+g[d+160>>2]-r;h=1}m=c[d+8>>2]|0;if(+g[s>>2]<1.0?(c[m+204>>2]&4|0)==0:0)if(h|(yb[c[(c[d>>2]|0)+56>>2]&63](d,m,c[z+168+76>>2]|0)|0))h=66;else h=72;else if(h)h=66;else h=72;if((h|0)==66){j=+g[d+136>>2];k=(j-+g[z+168+64>>2])*.5;do if(a[d+290>>0]|0)if(!(a[d+289>>0]|0)){g[d+132>>2]=(1.0-k)*+g[d+132>>2]+k*+g[d+152>>2];g[d+136>>2]=(1.0-k)*j+k*+g[d+156>>2];g[d+140>>2]=(1.0-k)*+g[d+140>>2]+k*+g[d+160>>2];h=d+289|0;break}else{M=+g[s>>2];g[d+132>>2]=(1.0-M)*+g[d+132>>2]+M*+g[d+152>>2];g[d+136>>2]=(1.0-M)*j+M*+g[d+156>>2];g[d+140>>2]=(1.0-M)*+g[d+140>>2]+M*+g[d+160>>2];h=d+289|0;break}else{M=+g[s>>2];g[d+132>>2]=(1.0-M)*+g[d+132>>2]+M*+g[d+152>>2];g[d+136>>2]=(1.0-M)*j+M*+g[d+156>>2];g[d+140>>2]=(1.0-M)*+g[d+140>>2]+M*+g[d+160>>2];h=d+289|0}while(0);a[h>>0]=0;g[d+20>>2]=0.0;g[d+24>>2]=0.0;a[d+249>>0]=0}else if((h|0)==72){a[d+289>>0]=1;if((a[d+290>>0]|0?(M=+g[d+20>>2],y=+g[d+28>>2],(M<0.0?-M:0.0)*f>y):0)?(N=b[d+248>>1]|0,(N&255)<<24>>24!=0|(N&65535)<256):0){E=o+ +g[d+156>>2];L=r+ +g[d+160>>2];D=y+ +g[d+148>>2];K=D*+g[d+260>>2];M=D*+g[d+264>>2];g[d+152>>2]=n+ +g[d+152>>2]-+g[d+256>>2]*D;g[d+156>>2]=E-K;g[d+160>>2]=L-M}c[d+132>>2]=c[d+152>>2];c[d+132+4>>2]=c[d+152+4>>2];c[d+132+8>>2]=c[d+152+8>>2];c[d+132+12>>2]=c[d+152+12>>2]}}c[z+48>>2]=c[d+132>>2];c[z+48+4>>2]=c[d+132+4>>2];c[z+48+8>>2]=c[d+132+8>>2];c[z+48+12>>2]=c[d+132+12>>2];N=c[d+8>>2]|0;c[N+300>>2]=(c[N+300>>2]|0)+1;c[N+4>>2]=c[z>>2];c[N+4+4>>2]=c[z+4>>2];c[N+4+8>>2]=c[z+8>>2];c[N+4+12>>2]=c[z+12>>2];c[N+20>>2]=c[z+16>>2];c[N+20+4>>2]=c[z+16+4>>2];c[N+20+8>>2]=c[z+16+8>>2];c[N+20+12>>2]=c[z+16+12>>2];c[N+36>>2]=c[z+32>>2];c[N+36+4>>2]=c[z+32+4>>2];c[N+36+8>>2]=c[z+32+8>>2];c[N+36+12>>2]=c[z+32+12>>2];c[N+52>>2]=c[z+48>>2];c[N+52+4>>2]=c[z+48+4>>2];c[N+52+8>>2]=c[z+48+8>>2];c[N+52+12>>2]=c[z+48+12>>2];a[d+220>>0]=0;if((((Zd(d,e)|0?(a[d+220>>0]=1,Zd(d,e)|0):0)?(a[d+220>>0]=1,Zd(d,e)|0):0)?(a[d+220>>0]=1,Zd(d,e)|0):0)?(a[d+220>>0]=1,Zd(d,e)|0):0)a[d+220>>0]=1;i=z;return}function oc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0.0,m=0,n=0,o=0.0,p=0.0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0,H=0,I=0,J=0,K=0;J=i;i=i+176|0;if((e|0)<1){f=c[b+12>>2]|0;if(f|0){if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;f=c[b+32>>2]|0;if(f|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;f=c[b+52>>2]|0;if(f|0){if(a[b+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;i=J;return}c[J+32>>2]=0;c[J+36>>2]=0;c[J+40>>2]=0;c[J+44>>2]=256;c[J+48>>2]=0;c[J+52>>2]=0;c[J+56>>2]=0;c[J+60>>2]=256;c[J+64>>2]=0;c[J+68>>2]=0;c[J+72>>2]=0;c[J+76>>2]=256;a[J+96>>0]=1;c[J+92>>2]=0;c[J+84>>2]=0;c[J+88>>2]=0;f=0;h=d;j=-246811958;r=1900671690;s=-246811958;u=1900671690;v=-246811958;y=1900671690;while(1){E=+g[h>>2];k=+g[h+4>>2];o=+g[h+8>>2];G=E<(c[l>>2]=r,+g[l>>2]);m=(g[l>>2]=E,c[l>>2]|0);r=G?m:r;G=k<(c[l>>2]=u,+g[l>>2]);n=(g[l>>2]=k,c[l>>2]|0);u=G?n:u;G=o<(c[l>>2]=y,+g[l>>2]);q=(g[l>>2]=o,c[l>>2]|0);y=G?q:y;j=(c[l>>2]=j,+g[l>>2])<E?m:j;s=(c[l>>2]=s,+g[l>>2])<k?n:s;v=(c[l>>2]=v,+g[l>>2])<o?q:v;f=f+1|0;if((f|0)==(e|0))break;else h=h+16|0}B=(c[l>>2]=j,+g[l>>2]);A=(c[l>>2]=r,+g[l>>2]);z=(c[l>>2]=s,+g[l>>2]);x=(c[l>>2]=u,+g[l>>2]);w=(c[l>>2]=v,+g[l>>2]);t=(c[l>>2]=y,+g[l>>2]);h=B-A<z-x?(z-x<w-t?2:1):B-A<w-t?2:0;c[J+112>>2]=h;f=B-A<z-x?(B-A<w-t?0:2):z-x<w-t?1:2;if((f|0)==(h|0))f=((h+1|0)>>>0)%3|0;c[J+104>>2]=f;G=(h^3)-f|0;c[J+108>>2]=G;if(((G+1|0)%3|0|0)==(h|0)){k=(B-A)*9.788566967472434e-005;o=(z-x)*9.788566967472434e-005;p=(w-t)*9.788566967472434e-005}else{k=-((B-A)*9.788566967472434e-005);o=-((z-x)*9.788566967472434e-005);p=-((w-t)*9.788566967472434e-005)}g[J>>2]=k;g[J+4>>2]=o;g[J+8>>2]=p;g[J+12>>2]=0.0;E=k!=0.0?1.0/k:k;D=o!=0.0?1.0/o:o;C=p!=0.0?1.0/p:p;g[J+16>>2]=(B+A)*.5;g[J+20>>2]=(z+x)*.5;g[J+24>>2]=(w+t)*.5;g[J+28>>2]=0.0;r=J+144+16|0;a[r>>0]=1;s=J+144+12|0;c[s>>2]=0;c[J+144+4>>2]=0;c[J+144+8>>2]=0;c[6324]=(c[6324]|0)+1;f=ic((e<<4|3)+16|0)|0;if(!f)h=0;else{c[(f+4+15&-16)+-4>>2]=f;h=f+4+15&-16}j=c[J+144+4>>2]|0;m=c[s>>2]|0;if((j|0)<=0){if(m|0)I=26}else{f=0;do{I=h+(f<<4)|0;G=m+(f<<4)|0;c[I>>2]=c[G>>2];c[I+4>>2]=c[G+4>>2];c[I+8>>2]=c[G+8>>2];c[I+12>>2]=c[G+12>>2];f=f+1|0}while((f|0)!=(j|0));I=26}if((I|0)==26){if(a[r>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0)}c[s>>2]=0}a[r>>0]=1;c[s>>2]=h;c[J+144+8>>2]=e;c[h>>2]=c[J+128>>2];c[h+4>>2]=c[J+128+4>>2];c[h+8>>2]=c[J+128+8>>2];c[h+12>>2]=c[J+128+12>>2];if((e|0)!=1){f=1;do{G=(c[s>>2]|0)+(f<<4)|0;c[G>>2]=c[J+128>>2];c[G+4>>2]=c[J+128+4>>2];c[G+8>>2]=c[J+128+8>>2];c[G+12>>2]=c[J+128+12>>2];f=f+1|0}while((f|0)!=(e|0))}c[J+144+4>>2]=e;j=J+128+(c[J+108>>2]<<2)|0;m=c[s>>2]|0;n=J+128+(c[J+112>>2]<<2)|0;q=J+128+(c[J+104>>2]<<2)|0;k=+g[J+16>>2];o=+g[J+20>>2];p=+g[J+24>>2];h=0;f=d;while(1){A=D*(+g[f+4>>2]-o);B=C*(+g[f+8>>2]-p);g[J+128>>2]=E*(+g[f>>2]-k);g[J+128+4>>2]=A;g[J+128+8>>2]=B;g[J+128+12>>2]=0.0;c[m+(h<<4)>>2]=~~+g[j>>2];c[m+(h<<4)+4>>2]=~~+g[n>>2];c[m+(h<<4)+8>>2]=~~+g[q>>2];c[m+(h<<4)+12>>2]=h;h=h+1|0;if((h|0)==(e|0))break;else f=f+16|0}if((e|0)>1)Tg(J+144|0,0,e+-1|0);c[J+36>>2]=c[J+32>>2];c[J+40>>2]=0;c[J+44>>2]=e;f=c[J+84>>2]|0;if((f|0)<(e|0)){if((c[J+88>>2]|0)<(e|0)){if(!e){h=0;m=f}else{c[6324]=(c[6324]|0)+1;h=ic((e<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}m=c[J+84>>2]|0}if((m|0)>0){j=0;do{c[h+(j<<2)>>2]=c[(c[J+92>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(m|0))}j=c[J+92>>2]|0;if(j|0){if(a[J+96>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[J+92>>2]=0}a[J+96>>0]=1;c[J+92>>2]=h;c[J+88>>2]=e}do{c[(c[J+92>>2]|0)+(f<<2)>>2]=0;f=f+1|0}while((f|0)!=(e|0))}c[J+84>>2]=e;n=0;do{f=c[J+40>>2]|0;if(!f){f=c[J+36>>2]|0;if(!f){c[6324]=(c[6324]|0)+1;f=ic(31)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[J+44>>2]|0;c[f+4>>2]=h;j=f+8|0;c[j>>2]=0;c[6324]=(c[6324]|0)+1;h=ic((h*112|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}c[f>>2]=h;c[j>>2]=c[J+32>>2];c[J+32>>2]=f}else c[J+36>>2]=c[f+8>>2];m=c[f+4>>2]|0;f=c[f>>2]|0;if((m|0)>0){h=0;j=f;do{h=h+1|0;G=j;j=j+112|0;c[G>>2]=(h|0)<(m|0)?j:0}while((h|0)!=(m|0))}}c[J+40>>2]=c[f>>2];G=f+104|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[G>>2]=-1;c[f+8>>2]=0;F=f+88|0;d=(c[s>>2]|0)+(n<<4)|0;c[F>>2]=c[d>>2];c[F+4>>2]=c[d+4>>2];c[F+8>>2]=c[d+8>>2];c[F+12>>2]=c[d+12>>2];c[G>>2]=-1;c[(c[J+92>>2]|0)+(n<<2)>>2]=f;n=n+1|0}while((n|0)<(e|0));f=c[s>>2]|0;if(f|0){if(a[r>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[s>>2]=0}a[r>>0]=1;c[s>>2]=0;c[J+144+4>>2]=0;c[J+144+8>>2]=0;c[J+52>>2]=c[J+48>>2];c[J+56>>2]=0;c[J+60>>2]=e*6;c[J+116>>2]=0;c[J+120>>2]=0;c[J+100>>2]=-3;c[J+128>>2]=0;c[J+128+4>>2]=0;c[J+128+8>>2]=0;c[J+128+12>>2]=0;ec(J,0,e,J+128|0);c[J+124>>2]=c[J+128>>2];f=c[s>>2]|0;if(f|0){if(a[r>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[s>>2]=0}f=c[b+4>>2]|0;if((f|0)<0){if((c[b+8>>2]|0)<0){h=c[b+12>>2]|0;if(h|0){if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=0;c[b+8>>2]=0}do{G=(c[b+12>>2]|0)+(f<<4)|0;c[G>>2]=c[J+144>>2];c[G+4>>2]=c[J+144+4>>2];c[G+8>>2]=c[J+144+8>>2];c[G+12>>2]=c[J+144+12>>2];f=f+1|0}while((f|0)!=0)}c[b+4>>2]=0;c[J+144>>2]=0;c[J+144+4>>2]=0;c[J+144+8>>2]=0;f=c[b+24>>2]|0;if((f|0)<0){if((c[b+28>>2]|0)<0){h=c[b+32>>2]|0;if(h|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+28>>2]=0}do{G=(c[b+32>>2]|0)+(f*12|0)|0;c[G>>2]=c[J+144>>2];c[G+4>>2]=c[J+144+4>>2];c[G+8>>2]=c[J+144+8>>2];f=f+1|0}while((f|0)!=0)}c[b+24>>2]=0;h=c[b+44>>2]|0;if((h|0)<0){f=c[b+52>>2]|0;do if((c[b+48>>2]|0)<0){if(!f){a[b+56>>0]=1;c[b+52>>2]=0;c[b+48>>2]=0;f=0;break}if(a[b+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}a[b+56>>0]=1;c[b+52>>2]=0;c[b+48>>2]=0;f=0}while(0);yn(f+(h<<2)|0,0,S(h,-4)|0)|0}c[b+44>>2]=0;f=c[J+124>>2]|0;if((c[f+104>>2]|0)<0){c[f+104>>2]=0;c[6324]=(c[6324]|0)+1;q=ic(23)|0;c[(q+4+15&-16)+-4>>2]=q;c[(q+4+15&-16)>>2]=f;G=0;j=1;q=q+4+15&-16;r=1;while(1){if((c[f+100>>2]|0)>-1){g[J+144+(c[J+108>>2]<<2)>>2]=+(c[f+88>>2]|0);g[J+144+(c[J+112>>2]<<2)>>2]=+(c[f+92>>2]|0);k=+(c[f+96>>2]|0)}else{F=f+24|0;d=f+32|0;k=+Wm(c[F>>2]|0,c[F+4>>2]|0,c[d>>2]|0,c[d+4>>2]|0);d=f+72|0;F=f+80|0;e=c[F>>2]|0;F=c[F+4>>2]|0;k=k/+Wm(c[d>>2]|0,c[d+4>>2]|0,e,F);g[J+144+(c[J+108>>2]<<2)>>2]=k;y=f+40|0;v=f+48|0;k=+Wm(c[y>>2]|0,c[y+4>>2]|0,c[v>>2]|0,c[v+4>>2]|0);k=k/+Wm(c[d>>2]|0,c[d+4>>2]|0,e,F);g[J+144+(c[J+112>>2]<<2)>>2]=k;v=f+56|0;y=f+64|0;k=+Wm(c[v>>2]|0,c[v+4>>2]|0,c[y>>2]|0,c[y+4>>2]|0);k=k/+Wm(c[d>>2]|0,c[d+4>>2]|0,e,F)}g[J+144+(c[J+104>>2]<<2)>>2]=k;k=+g[J+144>>2]*+g[J>>2]+ +g[J+16>>2];o=+g[J+144+4>>2]*+g[J+4>>2]+ +g[J+20>>2];p=+g[J+144+8>>2]*+g[J+8>>2]+ +g[J+24>>2];m=c[b+4>>2]|0;if((m|0)==(c[b+8>>2]|0)?(H=m|0?m<<1:1,(m|0)<(H|0)):0){if(!H)h=0;else{c[6324]=(c[6324]|0)+1;h=ic((H<<4|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}m=c[b+4>>2]|0}if((m|0)>0){n=0;do{F=h+(n<<4)|0;e=(c[b+12>>2]|0)+(n<<4)|0;c[F>>2]=c[e>>2];c[F+4>>2]=c[e+4>>2];c[F+8>>2]=c[e+8>>2];c[F+12>>2]=c[e+12>>2];n=n+1|0}while((n|0)!=(m|0))}m=c[b+12>>2]|0;if(m|0){if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=h;c[b+8>>2]=H;h=c[b+4>>2]|0}else h=m;F=c[b+12>>2]|0;g[F+(h<<4)>>2]=k;g[F+(h<<4)+4>>2]=o;g[F+(h<<4)+8>>2]=p;g[F+(h<<4)+12>>2]=0.0;c[b+4>>2]=(c[b+4>>2]|0)+1;F=c[f+8>>2]|0;if(!F){n=q;f=r}else{d=F;e=-1;h=-1;v=q;f=r;while(1){y=d+20|0;m=c[y>>2]|0;if((m|0)<0){u=c[b+24>>2]|0;c[J+144>>2]=0;c[J+144+4>>2]=0;c[J+144+8>>2]=0;do if((u|0)==(c[b+28>>2]|0)){r=u|0?u<<1:1;if((u|0)>=(r|0)){m=u;break}if(!r){m=0;q=u}else{c[6324]=(c[6324]|0)+1;m=ic((r*12|3)+16|0)|0;if(!m)m=0;else{c[(m+4+15&-16)+-4>>2]=m;m=m+4+15&-16}q=c[b+24>>2]|0}if((q|0)>0){n=0;do{s=m+(n*12|0)|0;K=(c[b+32>>2]|0)+(n*12|0)|0;c[s>>2]=c[K>>2];c[s+4>>2]=c[K+4>>2];c[s+8>>2]=c[K+8>>2];n=n+1|0}while((n|0)!=(q|0))}n=c[b+32>>2]|0;if(n|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=m;c[b+28>>2]=r;m=c[b+24>>2]|0}else m=u;while(0);m=(c[b+32>>2]|0)+(m*12|0)|0;c[m>>2]=c[J+144>>2];c[m+4>>2]=c[J+144+4>>2];c[m+8>>2]=c[J+144+8>>2];m=(c[b+24>>2]|0)+1|0;c[b+24>>2]=m;c[J+144>>2]=0;c[J+144+4>>2]=0;c[J+144+8>>2]=0;do if((m|0)==(c[b+28>>2]|0)){r=m|0?m<<1:1;if((m|0)>=(r|0))break;if(!r)q=0;else{c[6324]=(c[6324]|0)+1;m=ic((r*12|3)+16|0)|0;if(!m)m=0;else{c[(m+4+15&-16)+-4>>2]=m;m=m+4+15&-16}q=m;m=c[b+24>>2]|0}if((m|0)>0){n=0;do{K=q+(n*12|0)|0;s=(c[b+32>>2]|0)+(n*12|0)|0;c[K>>2]=c[s>>2];c[K+4>>2]=c[s+4>>2];c[K+8>>2]=c[s+8>>2];n=n+1|0}while((n|0)!=(m|0))}m=c[b+32>>2]|0;if(m|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=q;c[b+28>>2]=r;m=c[b+24>>2]|0}while(0);s=(c[b+32>>2]|0)+(m*12|0)|0;c[s>>2]=c[J+144>>2];c[s+4>>2]=c[J+144+4>>2];c[s+8>>2]=c[J+144+8>>2];c[b+24>>2]=(c[b+24>>2]|0)+1;s=c[b+32>>2]|0;c[y>>2]=u;c[(c[d+8>>2]|0)+20>>2]=u+1;c[s+(u*12|0)+4>>2]=1;c[s+((u+1|0)*12|0)+4>>2]=-1;r=c[d+12>>2]|0;m=c[r+104>>2]|0;if((m|0)<0){c[r+104>>2]=f;do if((f|0)==(j|0)){q=j|0?j<<1:1;if((j|0)>=(q|0)){n=v;break}do if(!q)n=0;else{c[6324]=(c[6324]|0)+1;m=ic((q<<2|3)+16|0)|0;if(!m){n=0;break}c[(m+4+15&-16)+-4>>2]=m;n=m+4+15&-16}while(0);if((j|0)<=0){if(!v){j=q;break}}else{m=0;do{c[n+(m<<2)>>2]=c[v+(m<<2)>>2];m=m+1|0}while((m|0)!=(j|0))}c[6325]=(c[6325]|0)+1;Rc(c[v+-4>>2]|0);j=q}else n=v;while(0);c[n+(f<<2)>>2]=r;m=f;f=f+1|0}else n=v;c[s+(u*12|0)+8>>2]=m;c[s+((u+1|0)*12|0)+8>>2]=G;m=c[y>>2]|0}else n=v;if((e|0)>-1)c[(c[b+32>>2]|0)+(m*12|0)>>2]=e-m;else h=m;d=c[d>>2]|0;if((d|0)==(F|0))break;else{e=m;v=n}}c[(c[b+32>>2]|0)+(h*12|0)>>2]=m-h}h=G+1|0;if((h|0)>=(f|0))break;G=h;q=n;r=f;f=c[n+(h<<2)>>2]|0}if((G|0)>-1){u=0;while(1){v=c[(c[n+(u<<2)>>2]|0)+8>>2]|0;if(v|0){s=v;do{r=s+20|0;f=c[r>>2]|0;if((f|0)>-1){h=c[b+44>>2]|0;do if((h|0)==(c[b+48>>2]|0)){q=h|0?h<<1:1;if((h|0)>=(q|0))break;if(!q)f=0;else{c[6324]=(c[6324]|0)+1;f=ic((q<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[b+44>>2]|0}m=c[b+52>>2]|0;if((h|0)<=0){if(m)I=172}else{j=0;do{c[f+(j<<2)>>2]=c[m+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0));I=172}if((I|0)==172){I=0;if(a[b+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0)}c[b+52>>2]=0;h=c[b+44>>2]|0}a[b+56>>0]=1;c[b+52>>2]=f;c[b+48>>2]=q;f=c[r>>2]|0}while(0);c[(c[b+52>>2]|0)+(h<<2)>>2]=f;c[b+44>>2]=(c[b+44>>2]|0)+1;f=s;do{c[f+20>>2]=-1;f=c[(c[f+8>>2]|0)+4>>2]|0}while((f|0)!=(s|0))}s=c[s>>2]|0}while((s|0)!=(v|0))}if((u|0)==(G|0))break;else u=u+1|0}}if(n|0){c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0)}}Oi(J);i=J;return}function pc(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=+j;var k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0,E=0,F=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0;E=i;i=i+960|0;D=c[f+4>>2]|0;C=c[f+12>>2]|0;k=c[D+4>>2]|0;if((k|0)<20){c[E+776>>2]=3928;c[E+776+168>>2]=0;g[E+776+172>>2]=j;c[E+776+164>>2]=c[h+4>>2];g[E+416+308>>2]=9.999999747378752e-005;a[E+416+332>>0]=0;c[E+352>>2]=8828;c[E+128>>2]=8736;c[E+128+4>>2]=E+416;c[E+128+8>>2]=E+352;c[E+128+12>>2]=b;c[E+128+16>>2]=D;c[E+128+20>>2]=0;if((Jd(E+128|0,d,e,C,C,E+776|0)|0?(u=E+776+132|0,p=+g[u>>2],q=+g[E+776+136>>2],r=+g[E+776+140>>2],p*p+q*q+r*r>9.999999747378752e-005):0)?(s=+g[E+776+164>>2],s<+g[h+4>>2]):0){j=1.0/+G(+(p*p+q*q+r*r));g[u>>2]=p*j;g[E+776+136>>2]=q*j;g[E+776+140>>2]=r*j;c[E+64>>2]=c[f+8>>2];c[E+64+4>>2]=0;c[E+64+8>>2]=c[u>>2];c[E+64+8+4>>2]=c[u+4>>2];c[E+64+8+8>>2]=c[u+8>>2];c[E+64+8+12>>2]=c[u+12>>2];c[E+64+24>>2]=c[E+776+148>>2];c[E+64+24+4>>2]=c[E+776+148+4>>2];c[E+64+24+8>>2]=c[E+776+148+8>>2];c[E+64+24+12>>2]=c[E+776+148+12>>2];g[E+64+40>>2]=s;+Kb[c[(c[h>>2]|0)+12>>2]&15](h,E+64|0,1)}i=E;return}if((k+-21|0)>>>0>=9){if((k|0)!=31){i=E;return}u=c[(c[b>>2]|0)+8>>2]|0;M=+g[C>>2];N=+g[C+16>>2];O=+g[C+32>>2];w=+g[C+4>>2];v=+g[C+20>>2];s=+g[C+36>>2];r=+g[C+8>>2];p=+g[C+24>>2];n=+g[C+40>>2];B=-+g[C+48>>2];z=-+g[C+52>>2];x=-+g[C+56>>2];l=+g[d>>2];A=+g[d+16>>2];y=+g[d+32>>2];F=+g[d+4>>2];H=+g[d+20>>2];I=+g[d+36>>2];J=+g[d+8>>2];K=+g[d+24>>2];L=+g[d+40>>2];q=+g[d+48>>2];o=+g[d+52>>2];m=+g[d+56>>2];g[E+64>>2]=M*l+N*A+O*y;g[E+64+4>>2]=M*F+N*H+O*I;g[E+64+8>>2]=M*J+N*K+O*L;g[E+64+12>>2]=0.0;g[E+64+16>>2]=w*l+v*A+s*y;g[E+64+20>>2]=w*F+v*H+s*I;g[E+64+24>>2]=w*J+v*K+s*L;g[E+64+28>>2]=0.0;g[E+64+32>>2]=r*l+p*A+n*y;g[E+64+36>>2]=r*F+p*H+n*I;g[E+64+40>>2]=r*J+p*K+n*L;g[E+64+44>>2]=0.0;g[E+64+48>>2]=M*B+N*z+O*x+(M*q+N*o+O*m);g[E+64+52>>2]=w*B+v*z+s*x+(w*q+v*o+s*m);g[E+64+56>>2]=r*B+p*z+n*x+(r*q+p*o+n*m);g[E+64+60>>2]=0.0;Yb[u&127](b,E+64|0,E+776|0,E+416|0);u=c[(c[b>>2]|0)+8>>2]|0;m=+g[C>>2];n=+g[C+16>>2];o=+g[C+32>>2];p=+g[C+4>>2];q=+g[C+20>>2];r=+g[C+36>>2];x=+g[C+8>>2];z=+g[C+24>>2];B=+g[C+40>>2];s=-+g[C+48>>2];v=-+g[C+52>>2];w=-+g[C+56>>2];O=+g[e>>2];N=+g[e+16>>2];M=+g[e+32>>2];L=+g[e+4>>2];K=+g[e+20>>2];J=+g[e+36>>2];I=+g[e+8>>2];H=+g[e+24>>2];F=+g[e+40>>2];y=+g[e+48>>2];A=+g[e+52>>2];l=+g[e+56>>2];g[E+64>>2]=m*O+n*N+o*M;g[E+64+4>>2]=m*L+n*K+o*J;g[E+64+8>>2]=m*I+n*H+o*F;g[E+64+12>>2]=0.0;g[E+64+16>>2]=p*O+q*N+r*M;g[E+64+20>>2]=p*L+q*K+r*J;g[E+64+24>>2]=p*I+q*H+r*F;g[E+64+28>>2]=0.0;g[E+64+32>>2]=x*O+z*N+B*M;g[E+64+36>>2]=x*L+z*K+B*J;g[E+64+40>>2]=x*I+z*H+B*F;g[E+64+44>>2]=0.0;g[E+64+48>>2]=m*s+n*v+o*w+(m*y+n*A+o*l);g[E+64+52>>2]=p*s+q*v+r*w+(p*y+q*A+r*l);g[E+64+56>>2]=x*s+z*v+B*w+(x*y+z*A+B*l);g[E+64+60>>2]=0.0;Yb[u&127](b,E+64|0,E+352|0,E+128|0);l=+g[E+352>>2];if(l<+g[E+776>>2])g[E+776>>2]=l;l=+g[E+352+4>>2];if(l<+g[E+776+4>>2])g[E+776+4>>2]=l;l=+g[E+352+8>>2];if(l<+g[E+776+8>>2])g[E+776+8>>2]=l;l=+g[E+352+12>>2];if(l<+g[E+776+12>>2])g[E+776+12>>2]=l;l=+g[E+128>>2];if(+g[E+416>>2]<l)g[E+416>>2]=l;l=+g[E+128+4>>2];if(+g[E+416+4>>2]<l)g[E+416+4>>2]=l;l=+g[E+128+8>>2];if(+g[E+416+8>>2]<l)g[E+416+8>>2]=l;l=+g[E+128+12>>2];if(+g[E+416+12>>2]<l)g[E+416+12>>2]=l;c[E+64>>2]=5908;c[E+64+4>>2]=f;c[E+64+8>>2]=b;c[E+64+12>>2]=d;c[E+64+16>>2]=e;g[E+64+20>>2]=j;c[E+64+24>>2]=D;c[E+64+28>>2]=C;c[E+64+32>>2]=h;k=c[D+68>>2]|0;if(!k){if((c[D+20>>2]|0)>0){k=0;do{f=c[D+28>>2]|0;h=c[f+(k*80|0)+64>>2]|0;e=f+(k*80|0)|0;c[E>>2]=c[e>>2];c[E+4>>2]=c[e+4>>2];c[E+8>>2]=c[e+8>>2];c[E+12>>2]=c[e+12>>2];e=f+(k*80|0)+16|0;c[E+16>>2]=c[e>>2];c[E+16+4>>2]=c[e+4>>2];c[E+16+8>>2]=c[e+8>>2];c[E+16+12>>2]=c[e+12>>2];e=f+(k*80|0)+32|0;c[E+32>>2]=c[e>>2];c[E+32+4>>2]=c[e+4>>2];c[E+32+8>>2]=c[e+8>>2];c[E+32+12>>2]=c[e+12>>2];f=f+(k*80|0)+48|0;c[E+48>>2]=c[f>>2];c[E+48+4>>2]=c[f+4>>2];c[E+48+8>>2]=c[f+8>>2];c[E+48+12>>2]=c[f+12>>2];Xf(E+64|0,k,E,h);k=k+1|0}while((k|0)<(c[D+20>>2]|0))}}else{c[E>>2]=c[E+776>>2];c[E+4>>2]=c[E+776+4>>2];c[E+8>>2]=c[E+776+8>>2];c[E+12>>2]=c[E+776+12>>2];c[E+16>>2]=c[E+416>>2];c[E+16+4>>2]=c[E+416+4>>2];c[E+16+8>>2]=c[E+416+8>>2];c[E+16+12>>2]=c[E+416+12>>2];Mf(c[k>>2]|0,E,E+64|0)}i=E;return}switch(k|0){case 21:{o=+g[C>>2];p=+g[C+16>>2];q=+g[C+32>>2];r=+g[C+4>>2];s=+g[C+20>>2];v=+g[C+36>>2];w=+g[C+8>>2];x=+g[C+24>>2];y=+g[C+40>>2];z=-+g[C+48>>2];A=-+g[C+52>>2];B=-+g[C+56>>2];n=+g[d+48>>2];m=+g[d+52>>2];l=+g[d+56>>2];g[E+416>>2]=o*z+p*A+q*B+(o*n+p*m+q*l);g[E+416+4>>2]=r*z+s*A+v*B+(r*n+s*m+v*l);g[E+416+8>>2]=w*z+x*A+y*B+(w*n+x*m+y*l);g[E+416+12>>2]=0.0;l=+g[e+48>>2];m=+g[e+52>>2];n=+g[e+56>>2];F=+g[e>>2];H=+g[e+16>>2];I=+g[e+32>>2];J=+g[e+4>>2];K=+g[e+20>>2];L=+g[e+36>>2];M=+g[e+8>>2];N=+g[e+24>>2];O=+g[e+40>>2];g[E+352>>2]=o*F+p*H+q*I;g[E+352+4>>2]=o*J+p*K+q*L;g[E+352+8>>2]=o*M+p*N+q*O;g[E+352+12>>2]=0.0;g[E+352+16>>2]=r*F+s*H+v*I;g[E+352+20>>2]=r*J+s*K+v*L;g[E+352+24>>2]=r*M+s*N+v*O;g[E+352+28>>2]=0.0;g[E+352+32>>2]=w*F+x*H+y*I;g[E+352+36>>2]=w*J+x*K+y*L;g[E+352+40>>2]=w*M+x*N+y*O;k=E+352+44|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;k=c[f+8>>2]|0;O=+Cb[c[(c[D>>2]|0)+48>>2]&15](D);c[E+128>>2]=8916;c[E+128+4>>2]=b;c[E+128+8>>2]=c[d>>2];c[E+128+8+4>>2]=c[d+4>>2];c[E+128+8+8>>2]=c[d+8>>2];c[E+128+8+12>>2]=c[d+12>>2];c[E+128+24>>2]=c[d+16>>2];c[E+128+24+4>>2]=c[d+16+4>>2];c[E+128+24+8>>2]=c[d+16+8>>2];c[E+128+24+12>>2]=c[d+16+12>>2];c[E+128+40>>2]=c[d+32>>2];c[E+128+40+4>>2]=c[d+32+4>>2];c[E+128+40+8>>2]=c[d+32+8>>2];c[E+128+40+12>>2]=c[d+32+12>>2];c[E+128+56>>2]=c[d+48>>2];c[E+128+56+4>>2]=c[d+48+4>>2];c[E+128+56+8>>2]=c[d+48+8>>2];c[E+128+56+12>>2]=c[d+48+12>>2];c[E+128+72>>2]=c[e>>2];c[E+128+72+4>>2]=c[e+4>>2];c[E+128+72+8>>2]=c[e+8>>2];c[E+128+72+12>>2]=c[e+12>>2];c[E+128+88>>2]=c[e+16>>2];c[E+128+88+4>>2]=c[e+16+4>>2];c[E+128+88+8>>2]=c[e+16+8>>2];c[E+128+88+12>>2]=c[e+16+12>>2];c[E+128+104>>2]=c[e+32>>2];c[E+128+104+4>>2]=c[e+32+4>>2];c[E+128+104+8>>2]=c[e+32+8>>2];c[E+128+104+12>>2]=c[e+32+12>>2];c[E+128+120>>2]=c[e+48>>2];c[E+128+120+4>>2]=c[e+48+4>>2];c[E+128+120+8>>2]=c[e+48+8>>2];c[E+128+120+12>>2]=c[e+48+12>>2];c[E+128+136>>2]=c[C>>2];c[E+128+136+4>>2]=c[C+4>>2];c[E+128+136+8>>2]=c[C+8>>2];c[E+128+136+12>>2]=c[C+12>>2];c[E+128+152>>2]=c[C+16>>2];c[E+128+152+4>>2]=c[C+16+4>>2];c[E+128+152+8>>2]=c[C+16+8>>2];c[E+128+152+12>>2]=c[C+16+12>>2];c[E+128+168>>2]=c[C+32>>2];c[E+128+168+4>>2]=c[C+32+4>>2];c[E+128+168+8>>2]=c[C+32+8>>2];c[E+128+168+12>>2]=c[C+32+12>>2];c[E+128+184>>2]=c[C+48>>2];c[E+128+184+4>>2]=c[C+48+4>>2];c[E+128+184+8>>2]=c[C+48+8>>2];c[E+128+184+12>>2]=c[C+48+12>>2];g[E+128+204>>2]=O;c[E+128>>2]=5860;c[E+128+212>>2]=h;c[E+128+216>>2]=k;c[E+128+220>>2]=D;c[E+128+200>>2]=c[h+4>>2];g[E+128+208>>2]=j;Yb[c[(c[b>>2]|0)+8>>2]&127](b,E+352|0,E+64|0,E);k=c[D+52>>2]|0;c[E+776>>2]=6780;c[E+776+4>>2]=k;c[E+776+8>>2]=E+128;k=c[D+56>>2]|0;if(!(a[k+60>>0]|0))Ae(k,E+776|0,E+416|0,o*z+p*A+q*B+(o*l+p*m+q*n),r*z+s*A+v*B+(r*l+s*m+v*n),w*z+x*A+y*B+(w*l+x*m+y*n),E+64|0,E);else ke(k,E+776|0,E+416|0,o*z+p*A+q*B+(o*l+p*m+q*n),r*z+s*A+v*B+(r*l+s*m+v*n),w*z+x*A+y*B+(w*l+x*m+y*n),E+64|0,E,c[k+56>>2]|0);i=E;return}case 28:{c[E+776>>2]=3928;c[E+776+168>>2]=0;g[E+776+172>>2]=j;c[E+776+164>>2]=c[h+4>>2];c[E+416>>2]=8736;c[E+416+4>>2]=0;c[E+416+8>>2]=0;c[E+416+12>>2]=b;c[E+416+16>>2]=0;c[E+416+20>>2]=D;if((Jd(E+416|0,d,e,C,C,E+776|0)|0?(t=E+776+132|0,l=+g[t>>2],m=+g[E+776+136>>2],n=+g[E+776+140>>2],l*l+m*m+n*n>9.999999747378752e-005):0)?(o=+g[E+776+164>>2],o<+g[h+4>>2]):0){O=1.0/+G(+(l*l+m*m+n*n));g[t>>2]=l*O;g[E+776+136>>2]=m*O;g[E+776+140>>2]=n*O;c[E+352>>2]=c[f+8>>2];c[E+352+4>>2]=0;c[E+352+8>>2]=c[t>>2];c[E+352+8+4>>2]=c[t+4>>2];c[E+352+8+8>>2]=c[t+8>>2];c[E+352+8+12>>2]=c[t+12>>2];c[E+352+24>>2]=c[E+776+148>>2];c[E+352+24+4>>2]=c[E+776+148+4>>2];c[E+352+24+8>>2]=c[E+776+148+8>>2];c[E+352+24+12>>2]=c[E+776+148+12>>2];g[E+352+40>>2]=o;+Kb[c[(c[h>>2]|0)+12>>2]&15](h,E+352|0,1)}i=E;return}default:{o=+g[C>>2];p=+g[C+16>>2];q=+g[C+32>>2];w=+g[C+4>>2];x=+g[C+20>>2];y=+g[C+36>>2];J=+g[C+8>>2];L=+g[C+24>>2];N=+g[C+40>>2];H=-+g[C+48>>2];F=-+g[C+52>>2];B=-+g[C+56>>2];z=+g[d+48>>2];A=+g[d+52>>2];l=+g[d+56>>2];n=o*H+p*F+q*B+(o*z+p*A+q*l);m=w*H+x*F+y*B+(w*z+x*A+y*l);l=J*H+L*F+N*B+(J*z+L*A+N*l);A=+g[e+48>>2];z=+g[e+52>>2];v=+g[e+56>>2];r=o*H+p*F+q*B+(o*A+p*z+q*v);s=w*H+x*F+y*B+(w*A+x*z+y*v);v=J*H+L*F+N*B+(J*A+L*z+N*v);z=+g[e>>2];A=+g[e+16>>2];B=+g[e+32>>2];F=+g[e+4>>2];H=+g[e+20>>2];I=+g[e+36>>2];K=+g[e+8>>2];M=+g[e+24>>2];O=+g[e+40>>2];g[E+776>>2]=o*z+p*A+q*B;g[E+776+4>>2]=o*F+p*H+q*I;g[E+776+8>>2]=o*K+p*M+q*O;g[E+776+12>>2]=0.0;g[E+776+16>>2]=w*z+x*A+y*B;g[E+776+20>>2]=w*F+x*H+y*I;g[E+776+24>>2]=w*K+x*M+y*O;g[E+776+28>>2]=0.0;g[E+776+32>>2]=J*z+L*A+N*B;g[E+776+36>>2]=J*F+L*H+N*I;g[E+776+40>>2]=J*K+L*M+N*O;u=E+776+44|0;c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;c[u+16>>2]=0;f=c[f+8>>2]|0;O=+Cb[c[(c[D>>2]|0)+48>>2]&15](D);c[E+416>>2]=8916;c[E+416+4>>2]=b;c[E+416+8>>2]=c[d>>2];c[E+416+8+4>>2]=c[d+4>>2];c[E+416+8+8>>2]=c[d+8>>2];c[E+416+8+12>>2]=c[d+12>>2];c[E+416+24>>2]=c[d+16>>2];c[E+416+24+4>>2]=c[d+16+4>>2];c[E+416+24+8>>2]=c[d+16+8>>2];c[E+416+24+12>>2]=c[d+16+12>>2];c[E+416+40>>2]=c[d+32>>2];c[E+416+40+4>>2]=c[d+32+4>>2];c[E+416+40+8>>2]=c[d+32+8>>2];c[E+416+40+12>>2]=c[d+32+12>>2];c[E+416+56>>2]=c[d+48>>2];c[E+416+56+4>>2]=c[d+48+4>>2];c[E+416+56+8>>2]=c[d+48+8>>2];c[E+416+56+12>>2]=c[d+48+12>>2];c[E+416+72>>2]=c[e>>2];c[E+416+72+4>>2]=c[e+4>>2];c[E+416+72+8>>2]=c[e+8>>2];c[E+416+72+12>>2]=c[e+12>>2];c[E+416+88>>2]=c[e+16>>2];c[E+416+88+4>>2]=c[e+16+4>>2];c[E+416+88+8>>2]=c[e+16+8>>2];c[E+416+88+12>>2]=c[e+16+12>>2];c[E+416+104>>2]=c[e+32>>2];c[E+416+104+4>>2]=c[e+32+4>>2];c[E+416+104+8>>2]=c[e+32+8>>2];c[E+416+104+12>>2]=c[e+32+12>>2];c[E+416+120>>2]=c[e+48>>2];c[E+416+120+4>>2]=c[e+48+4>>2];c[E+416+120+8>>2]=c[e+48+8>>2];c[E+416+120+12>>2]=c[e+48+12>>2];c[E+416+136>>2]=c[C>>2];c[E+416+136+4>>2]=c[C+4>>2];c[E+416+136+8>>2]=c[C+8>>2];c[E+416+136+12>>2]=c[C+12>>2];c[E+416+152>>2]=c[C+16>>2];c[E+416+152+4>>2]=c[C+16+4>>2];c[E+416+152+8>>2]=c[C+16+8>>2];c[E+416+152+12>>2]=c[C+16+12>>2];c[E+416+168>>2]=c[C+32>>2];c[E+416+168+4>>2]=c[C+32+4>>2];c[E+416+168+8>>2]=c[C+32+8>>2];c[E+416+168+12>>2]=c[C+32+12>>2];c[E+416+184>>2]=c[C+48>>2];c[E+416+184+4>>2]=c[C+48+4>>2];c[E+416+184+8>>2]=c[C+48+8>>2];c[E+416+184+12>>2]=c[C+48+12>>2];g[E+416+204>>2]=O;c[E+416>>2]=5884;c[E+416+212>>2]=h;c[E+416+216>>2]=f;c[E+416+220>>2]=D;c[E+416+200>>2]=c[h+4>>2];g[E+416+208>>2]=j;Yb[c[(c[b>>2]|0)+8>>2]&127](b,E+776|0,E+352|0,E+128|0);g[E+64>>2]=n;g[E+64+4>>2]=m;g[E+64+8>>2]=l;g[E+64+12>>2]=0.0;if(r<n){g[E+64>>2]=r;o=r}else o=n;if(s<m){g[E+64+4>>2]=s;p=s}else p=m;if(v<l){g[E+64+8>>2]=v;q=v}else q=l;g[E>>2]=n;g[E+4>>2]=m;g[E+8>>2]=l;g[E+12>>2]=0.0;if(n<r){g[E>>2]=r;n=r}if(m<s){g[E+4>>2]=s;m=s}if(l<v){g[E+8>>2]=v;l=v}g[E+64>>2]=+g[E+352>>2]+o;g[E+64+4>>2]=+g[E+352+4>>2]+p;g[E+64+8>>2]=+g[E+352+8>>2]+q;g[E>>2]=+g[E+128>>2]+n;g[E+4>>2]=+g[E+128+4>>2]+m;g[E+8>>2]=+g[E+128+8>>2]+l;Yb[c[(c[D>>2]|0)+64>>2]&127](D,E+416|0,E+64|0,E);i=E;return}}}function qc(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0,t=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,H=0.0,K=0.0,M=0.0,N=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0,ra=0.0,sa=0.0,ta=0.0,ua=0.0,va=0.0,wa=0.0;qa=i;i=i+80|0;g[b+504>>2]=0.0;g[b+500>>2]=0.0;a[b+525>>0]=0;a[b+526>>0]=0;if(a[b+552>>0]|0?(a[b+527>>0]|0)==0:0){wa=+g[b+556>>2];ua=+g[b+560>>2];pa=+g[b+564>>2];ta=+g[b+568>>2];ea=wa*(2.0/(wa*wa+ua*ua+pa*pa+ta*ta));va=ua*(2.0/(wa*wa+ua*ua+pa*pa+ta*ta));sa=pa*(2.0/(wa*wa+ua*ua+pa*pa+ta*ta));fa=+g[b+300>>2];X=+g[d>>2];ga=+g[b+316>>2];Y=+g[d+4>>2];ha=+g[b+332>>2];Z=+g[d+8>>2];ja=+g[b+304>>2];la=+g[b+320>>2];na=+g[b+336>>2];ba=+g[b+308>>2];ca=+g[b+324>>2];da=+g[b+340>>2];_=+g[d+16>>2];$=+g[d+20>>2];aa=+g[d+24>>2];ka=+g[d+32>>2];ma=+g[d+36>>2];oa=+g[d+40>>2];v=+g[b+348>>2];u=+g[b+352>>2];q=+g[b+356>>2];z=+g[b+364>>2];ra=+g[e>>2];A=+g[b+380>>2];n=+g[e+4>>2];B=+g[b+396>>2];m=+g[e+8>>2];C=+g[b+368>>2];D=+g[b+384>>2];E=+g[b+400>>2];w=+g[b+372>>2];x=+g[b+388>>2];y=+g[b+404>>2];o=+g[e+16>>2];p=+g[e+20>>2];k=+g[e+24>>2];H=+g[e+32>>2];M=+g[e+36>>2];P=+g[e+40>>2];K=+g[b+412>>2];N=+g[b+416>>2];j=+g[b+420>>2];R=(1.0-(ua*va+pa*sa))*(z*ra+A*n+B*m)+(wa*va+ta*sa)*(ra*C+n*D+m*E)+(wa*sa-ta*va)*(ra*w+n*x+m*y);S=(wa*va-ta*sa)*(z*ra+A*n+B*m)+(1.0-(wa*ea+pa*sa))*(ra*C+n*D+m*E)+(ua*sa+ta*ea)*(ra*w+n*x+m*y);Q=(wa*sa+ta*va)*(z*ra+A*n+B*m)+(ua*sa-ta*ea)*(ra*C+n*D+m*E)+(1.0-(wa*ea+ua*va))*(ra*w+n*x+m*y);V=(wa*sa-ta*va)*(w*o+x*p+y*k)+((1.0-(ua*va+pa*sa))*(z*o+A*p+B*k)+(wa*va+ta*sa)*(C*o+D*p+E*k));W=(ua*sa+ta*ea)*(w*o+x*p+y*k)+((wa*va-ta*sa)*(z*o+A*p+B*k)+(1.0-(wa*ea+pa*sa))*(C*o+D*p+E*k));U=(1.0-(wa*ea+ua*va))*(w*o+x*p+y*k)+((wa*sa+ta*va)*(z*o+A*p+B*k)+(ua*sa-ta*ea)*(C*o+D*p+E*k));ia=(wa*sa-ta*va)*(w*H+x*M+y*P)+((1.0-(ua*va+pa*sa))*(z*H+A*M+B*P)+(wa*va+ta*sa)*(C*H+D*M+E*P));pa=(ua*sa+ta*ea)*(w*H+x*M+y*P)+((wa*va-ta*sa)*(z*H+A*M+B*P)+(1.0-(wa*ea+pa*sa))*(C*H+D*M+E*P));ea=(1.0-(wa*ea+ua*va))*(w*H+x*M+y*P)+((wa*sa+ta*va)*(z*H+A*M+B*P)+(ua*sa-ta*ea)*(C*H+D*M+E*P));ta=-(+g[d+48>>2]+(X*v+Y*u+Z*q));sa=-(_*v+$*u+aa*q+ +g[d+52>>2]);q=-(ka*v+ma*u+oa*q+ +g[d+56>>2]);u=(fa*X+ga*Y+ha*Z)*ta+(fa*_+ga*$+ha*aa)*sa+(fa*ka+ga*ma+ha*oa)*q;v=(X*ja+Y*la+Z*na)*ta+(ja*_+la*$+na*aa)*sa+(ja*ka+la*ma+na*oa)*q;q=(X*ba+Y*ca+Z*da)*ta+(ba*_+ca*$+da*aa)*sa+(ba*ka+ca*ma+da*oa)*q;m=q*Q+(u*R+v*S)+((z*ra+A*n+B*m)*0.0+(ra*C+n*D+m*E)*0.0+(ra*w+n*x+m*y)*0.0+(+g[e+48>>2]+(ra*K+n*N+m*j)));k=q*U+(u*V+v*W)+((w*o+x*p+y*k)*0.0+((z*o+A*p+B*k)*0.0+(C*o+D*p+E*k)*0.0)+(o*K+p*N+k*j+ +g[e+52>>2]));j=q*ea+(u*ia+v*pa)+((w*H+x*M+y*P)*0.0+((z*H+A*M+B*P)*0.0+(C*H+D*M+E*P)*0.0)+(H*K+M*N+P*j+ +g[e+56>>2]));g[qa+16>>2]=(X*ba+Y*ca+Z*da)*Q+((fa*X+ga*Y+ha*Z)*R+(X*ja+Y*la+Z*na)*S);g[qa+16+4>>2]=(ba*_+ca*$+da*aa)*Q+((fa*_+ga*$+ha*aa)*R+(ja*_+la*$+na*aa)*S);g[qa+16+8>>2]=(ba*ka+ca*ma+da*oa)*Q+((fa*ka+ga*ma+ha*oa)*R+(ja*ka+la*ma+na*oa)*S);g[qa+16+12>>2]=0.0;g[qa+16+16>>2]=(X*ba+Y*ca+Z*da)*U+((fa*X+ga*Y+ha*Z)*V+(X*ja+Y*la+Z*na)*W);g[qa+16+20>>2]=(ba*_+ca*$+da*aa)*U+((fa*_+ga*$+ha*aa)*V+(ja*_+la*$+na*aa)*W);g[qa+16+24>>2]=(ba*ka+ca*ma+da*oa)*U+((fa*ka+ga*ma+ha*oa)*V+(ja*ka+la*ma+na*oa)*W);g[qa+16+28>>2]=0.0;g[qa+16+32>>2]=(X*ba+Y*ca+Z*da)*ea+((fa*X+ga*Y+ha*Z)*ia+(X*ja+Y*la+Z*na)*pa);g[qa+16+36>>2]=(ba*_+ca*$+da*aa)*ea+((fa*_+ga*$+ha*aa)*ia+(ja*_+la*$+na*aa)*pa);g[qa+16+40>>2]=(ba*ka+ca*ma+da*oa)*ea+((fa*ka+ga*ma+ha*oa)*ia+(ja*ka+la*ma+na*oa)*pa);g[qa+16+44>>2]=0.0;g[qa+16+48>>2]=m;g[qa+16+52>>2]=k;g[qa+16+56>>2]=j;g[qa+16+60>>2]=0.0;Jg(qa+16|0,qa);j=+g[qa>>2];k=+g[qa+4>>2];m=+g[qa+8>>2];if(!(+F(+(j*j+k*k+m*m))<1.1920928955078125e-007)?(g[b+472>>2]=0.0,wa=1.0/+G(+(j*j+k*k+m*m)),g[b+460>>2]=j*wa,g[b+464>>2]=k*wa,g[b+468>>2]=m*wa,wa=+g[qa+12>>2],wa=wa<-1.0?-1.0:wa,wa=+L(+(wa>1.0?1.0:wa))*2.0,g[b+504>>2]=wa,!(+F(+wa)<1.1920928955078125e-007)):0)a[b+526>>0]=1;i=qa;return}Jg(d,qa+16|0);Jg(b+300|0,qa);Z=+g[qa+16+12>>2];_=+g[qa>>2];$=+g[qa+16>>2];aa=+g[qa+12>>2];ba=+g[qa+16+4>>2];ca=+g[qa+8>>2];da=+g[qa+16+8>>2];ea=+g[qa+4>>2];Jg(e,qa+16|0);Jg(b+364|0,qa);fa=+g[qa+16+12>>2];ga=+g[qa>>2];ha=+g[qa+16>>2];ia=+g[qa+12>>2];ja=+g[qa+16+4>>2];ka=+g[qa+8>>2];la=+g[qa+16+8>>2];ma=+g[qa+4>>2];na=-(fa*ga+ha*ia+ja*ka-la*ma);oa=-(ga*la+(ia*ja+fa*ma)-ha*ka);pa=-(fa*ka+ia*la+ha*ma-ga*ja);u=(Z*aa-_*$-ba*ea-ca*da)*na+(Z*_+$*aa+ba*ca-da*ea)*(fa*ia-ga*ha-ja*ma-ka*la)+(Z*ca+aa*da+$*ea-_*ba)*oa-(_*da+(aa*ba+Z*ea)-$*ca)*pa;v=(Z*_+$*aa+ba*ca-da*ea)*pa+((_*da+(aa*ba+Z*ea)-$*ca)*(fa*ia-ga*ha-ja*ma-ka*la)+(Z*aa-_*$-ba*ea-ca*da)*oa)-(Z*ca+aa*da+$*ea-_*ba)*na;w=(_*da+(aa*ba+Z*ea)-$*ca)*na+((Z*ca+aa*da+$*ea-_*ba)*(fa*ia-ga*ha-ja*ma-ka*la)+(Z*aa-_*$-ba*ea-ca*da)*pa)-(Z*_+$*aa+ba*ca-da*ea)*oa;x=(Z*aa-_*$-ba*ea-ca*da)*(fa*ia-ga*ha-ja*ma-ka*la)-(Z*_+$*aa+ba*ca-da*ea)*na-(_*da+(aa*ba+Z*ea)-$*ca)*oa-(Z*ca+aa*da+$*ea-_*ba)*pa;m=+g[5703];n=+g[5705];k=+g[5704];o=(m*w+k*x-n*u)*-w+(x*(m*x+n*v-k*w)+(-(m*u)-k*v-n*w)*-u)-(n*x+k*u-m*v)*-v;j=(n*x+k*u-m*v)*-u+(x*(m*w+k*x-n*u)+(-(m*u)-k*v-n*w)*-v)-(m*x+n*v-k*w)*-w;p=(m*x+n*v-k*w)*-v+(x*(n*x+k*u-m*v)+(-(m*u)-k*v-n*w)*-w)-(m*w+k*x-n*u)*-u;q=1.0/+G(+(p*p+(o*o+j*j)));do if(n*q*p+(k*q*j+m*q*o)<-.9999998807907105)if(+F(+n)>.7071067690849304){j=1.0/+G(+(n*n+k*k));r=0;s=(g[l>>2]=k*j,c[l>>2]|0);t=0;j=-(n*j);break}else{j=1.0/+G(+(m*m+k*k));r=(g[l>>2]=-(k*j),c[l>>2]|0);s=0;t=0;j=m*j;break}else{wa=+G(+((n*q*p+(k*q*j+m*q*o)+1.0)*2.0));r=(g[l>>2]=(k*q*p-n*q*j)*(1.0/wa),c[l>>2]|0);s=(g[l>>2]=(m*q*j-k*q*o)*(1.0/wa),c[l>>2]|0);t=(g[l>>2]=wa*.5,c[l>>2]|0);j=(n*q*o-m*q*p)*(1.0/wa)}while(0);m=(c[l>>2]=r,+g[l>>2]);p=(c[l>>2]=s,+g[l>>2]);k=(c[l>>2]=t,+g[l>>2]);n=1.0/+G(+(m*m+j*j+p*p+k*k));o=j*n;W=w*-o+(u*k*n+x*-(m*n))-v*-(p*n);X=u*-(p*n)+(x*-o+v*k*n)-w*-(m*n);Y=v*-(m*n)+(w*k*n+x*-(p*n))-u*-o;U=x*k*n-u*-(m*n)-v*-o-w*-(p*n);V=1.0/+G(+(U*U+(Y*Y+(W*W+X*X))));u=+g[b+444>>2];j=+g[b+456>>2];r=(g[l>>2]=u,c[l>>2]|0);if(u>=j?(y=+g[b+448>>2],y>=j):0){q=k*n<-1.0?-1.0:k*n;q=+L(+(q>1.0?1.0:q))*2.0;if(q>1.1920928955078125e-007){j=1.0/+G(+(p*n*p*n+(m*n*m*n+o*o)));if(+F(+(o*j))>1.1920928955078125e-007){k=+G(+((p*n*j*p*n*j/(o*j*o*j)+1.0)/(1.0/(y*y)+p*n*j*p*n*j/(o*j*o*j)/(u*u))));m=m*n*j;r=(g[l>>2]=k,c[l>>2]|0);k=p*n*j;j=o*j}else{m=m*n*j;k=p*n*j;j=o*j}}else{m=0.0;r=0;k=0.0;j=0.0}n=(c[l>>2]=r,+g[l>>2]);o=+g[b+428>>2];if(q>n*o){a[b+526>>0]=1;if(q<n&o<.9999998807907105)p=(q-n*o)/(n-n*o);else p=1.0;g[b+528>>2]=p;g[b+504>>2]=q-n*o;if(+F(+j)>1.1920928955078125e-007){wa=+F(+(j*-k/j*(y/u)));k=k<-0.0?wa:-wa;wa=1.0/+G(+(m*m+j*j+k*k));m=m*wa;k=-(k*wa);j=j*wa}va=-m;ua=-j;sa=-k;ra=(fa*ia-ga*ha-ja*ma-ka*la)*va+(ga*la+(ia*ja+fa*ma)-ha*ka)*sa-(fa*ka+ia*la+ha*ma-ga*ja)*ua;wa=(fa*ka+ia*la+ha*ma-ga*ja)*va+(fa*ia-ga*ha-ja*ma-ka*la)*ua-(fa*ga+ha*ia+ja*ka-la*ma)*sa;ta=(fa*ga+ha*ia+ja*ka-la*ma)*ua+(fa*ia-ga*ha-ja*ma-ka*la)*sa-(ga*la+(ia*ja+fa*ma)-ha*ka)*va;sa=-((fa*ga+ha*ia+ja*ka-la*ma)*va)-(ga*la+(ia*ja+fa*ma)-ha*ka)*ua-(fa*ka+ia*la+ha*ma-ga*ja)*sa;ua=wa*pa+(sa*na+(fa*ia-ga*ha-ja*ma-ka*la)*ra)-ta*oa;va=ta*na+((fa*ia-ga*ha-ja*ma-ka*la)*wa+sa*oa)-ra*pa;wa=ra*oa+(sa*pa+(fa*ia-ga*ha-ja*ma-ka*la)*ta)-wa*na;g[b+460>>2]=ua;g[b+464>>2]=va;g[b+468>>2]=wa;g[b+472>>2]=0.0;c[b+536>>2]=0;c[b+536+4>>2]=0;c[b+536+8>>2]=0;c[b+536+12>>2]=0;g[b+492>>2]=1.0/(ua*(+g[f>>2]*ua+ +g[f+16>>2]*va+ +g[f+32>>2]*wa)+va*(ua*+g[f+4>>2]+va*+g[f+20>>2]+wa*+g[f+36>>2])+wa*(ua*+g[f+8>>2]+va*+g[f+24>>2]+wa*+g[f+40>>2])+(ua*(ua*+g[h>>2]+va*+g[h+16>>2]+wa*+g[h+32>>2])+va*(ua*+g[h+4>>2]+va*+g[h+20>>2]+wa*+g[h+36>>2])+wa*(ua*+g[h+8>>2]+va*+g[h+24>>2]+wa*+g[h+40>>2])))}}else T=23;a:do if((T|0)==23){H=+g[b+300>>2];K=+g[b+316>>2];M=+g[b+332>>2];p=+g[d>>2];q=+g[d+4>>2];u=+g[d+8>>2];v=+g[d+16>>2];w=+g[d+20>>2];x=+g[d+24>>2];N=+g[d+32>>2];P=+g[d+36>>2];y=+g[d+40>>2];z=+g[b+304>>2];A=+g[b+320>>2];B=+g[b+336>>2];C=+g[b+308>>2];D=+g[b+324>>2];E=+g[b+340>>2];m=+g[b+364>>2];o=+g[b+380>>2];Q=+g[b+396>>2];R=m*+g[e>>2]+o*+g[e+4>>2]+Q*+g[e+8>>2];S=m*+g[e+16>>2]+o*+g[e+20>>2]+Q*+g[e+24>>2];Q=m*+g[e+32>>2]+o*+g[e+36>>2]+Q*+g[e+40>>2];o=(H*p+K*q+M*u)*R+(H*v+K*w+M*x)*S+(H*N+K*P+M*y)*Q;m=(p*z+q*A+u*B)*R+(v*z+w*A+x*B)*S+(N*z+P*A+y*B)*Q;k=(p*C+q*D+u*E)*R+(v*C+w*D+x*E)*S+(N*C+P*D+y*E)*Q;n=+g[b+444>>2];j=+g[b+456>>2];do if(n<j){n=+g[b+448>>2];if(n<j){if(+F(+m)<1.1920928955078125e-007?+F(+k)<1.1920928955078125e-007:0)break a;a[b+526>>0]=1;g[b+460>>2]=-((H*N+K*P+M*y)*S-(H*v+K*w+M*x)*Q);g[b+464>>2]=-((H*p+K*q+M*u)*Q-(H*N+K*P+M*y)*R);g[b+468>>2]=-((H*v+K*w+M*x)*R-(H*p+K*q+M*u)*S);g[b+472>>2]=0.0;break a}if(+F(+o)<1.1920928955078125e-007?+F(+k)<1.1920928955078125e-007:0){j=o;break}a[b+526>>0]=1;if(n>=j){j=+O(+k,+o);if(j>n){k=+J(+n);m=0.0;j=+I(+n);break}if(j<-n){k=-+J(+n);m=0.0;j=+I(+n)}else{m=0.0;j=o}}else j=o}else{if(+F(+o)<1.1920928955078125e-007?+F(+m)<1.1920928955078125e-007:0){j=o;break}a[b+526>>0]=1;if(n>=j){j=+O(+m,+o);if(j>n){k=0.0;m=+J(+n);j=+I(+n);break}if(j<-n){k=0.0;m=-+J(+n);j=+I(+n)}else{k=0.0;j=o}}else j=o}while(0);o=(p*C+q*D+u*E)*k+((p*z+q*A+u*B)*m+(H*p+K*q+M*u)*j);n=(v*C+w*D+x*E)*k+((v*z+w*A+x*B)*m+(H*v+K*w+M*x)*j);j=(N*C+P*D+y*E)*k+((N*z+P*A+y*B)*m+(H*N+K*P+M*y)*j);k=1.0/+G(+(j*j+(o*o+n*n)));g[b+460>>2]=-(S*k*j-Q*k*n);g[b+464>>2]=-(Q*k*o-R*k*j);g[b+468>>2]=-(R*k*n-S*k*o);g[b+472>>2]=0.0;m=+G(+((S*k*j-Q*k*n)*(S*k*j-Q*k*n)+(Q*k*o-R*k*j)*(Q*k*o-R*k*j)+(R*k*n-S*k*o)*(R*k*n-S*k*o)));g[b+504>>2]=m;if(!(+F(+m)<1.1920928955078125e-007)){g[b+460>>2]=1.0/m*-(S*k*j-Q*k*n);g[b+464>>2]=1.0/m*-(Q*k*o-R*k*j);g[b+468>>2]=1.0/m*-(R*k*n-S*k*o)}}while(0);q=+g[b+452>>2];if(!(q>=0.0)){g[b+512>>2]=0.0;i=qa;return}n=V*U<-1.0?-1.0:V*U;n=+L(+(n>1.0?1.0:n))*2.0;if(n>3.1415927410125732){p=-(V*U)<-1.0?-1.0:-(V*U);m=-(V*W);k=-(V*X);j=-(V*Y);p=+L(+(p>1.0?1.0:p))*2.0}else{m=V*W;k=V*X;j=V*Y;p=n}g[b+512>>2]=p;if(p>1.1920928955078125e-007){wa=1.0/+G(+(m*m+k*k+j*j));o=m*wa;n=j*wa;k=k*wa}else{o=m;n=j}j=+g[b+428>>2];if(p>q*j){a[b+525>>0]=1;m=p-q*j;if(p<q&j<.9999998807907105)j=m/(q-q*j);else j=1.0;g[b+532>>2]=j;g[b+508>>2]=m;va=-o;ua=-k;sa=-n;ra=(fa*ia-ga*ha-ja*ma-ka*la)*va+(ga*la+(ia*ja+fa*ma)-ha*ka)*sa-(fa*ka+ia*la+ha*ma-ga*ja)*ua;wa=(fa*ka+ia*la+ha*ma-ga*ja)*va+(fa*ia-ga*ha-ja*ma-ka*la)*ua-(fa*ga+ha*ia+ja*ka-la*ma)*sa;ta=(fa*ga+ha*ia+ja*ka-la*ma)*ua+(fa*ia-ga*ha-ja*ma-ka*la)*sa-(ga*la+(ia*ja+fa*ma)-ha*ka)*va;sa=-((fa*ga+ha*ia+ja*ka-la*ma)*va)-(ga*la+(ia*ja+fa*ma)-ha*ka)*ua-(fa*ka+ia*la+ha*ma-ga*ja)*sa;ua=wa*pa+(sa*na+(fa*ia-ga*ha-ja*ma-ka*la)*ra)-ta*oa;va=ta*na+((fa*ia-ga*ha-ja*ma-ka*la)*wa+sa*oa)-ra*pa;wa=ra*oa+(sa*pa+(fa*ia-ga*ha-ja*ma-ka*la)*ta)-wa*na;g[b+476>>2]=ua;g[b+480>>2]=va;g[b+484>>2]=wa;g[b+488>>2]=0.0;g[b+496>>2]=1.0/(ua*(+g[f>>2]*ua+ +g[f+16>>2]*va+ +g[f+32>>2]*wa)+va*(ua*+g[f+4>>2]+va*+g[f+20>>2]+wa*+g[f+36>>2])+wa*(ua*+g[f+8>>2]+va*+g[f+24>>2]+wa*+g[f+40>>2])+(ua*(ua*+g[h>>2]+va*+g[h+16>>2]+wa*+g[h+32>>2])+va*(ua*+g[h+4>>2]+va*+g[h+20>>2]+wa*+g[h+36>>2])+wa*(ua*+g[h+8>>2]+va*+g[h+24>>2]+wa*+g[h+40>>2])))}if(!(a[b+526>>0]|0)){i=qa;return}ra=-o;wa=-k;sa=-n;pa=(Z*aa-_*$-ba*ea-ca*da)*ra+(_*da+(aa*ba+Z*ea)-$*ca)*sa-(Z*ca+aa*da+$*ea-_*ba)*wa;va=(Z*ca+aa*da+$*ea-_*ba)*ra+(Z*aa-_*$-ba*ea-ca*da)*wa-(Z*_+$*aa+ba*ca-da*ea)*sa;ua=(Z*_+$*aa+ba*ca-da*ea)*wa+(Z*aa-_*$-ba*ea-ca*da)*sa-(_*da+(aa*ba+Z*ea)-$*ca)*ra;sa=-((Z*_+$*aa+ba*ca-da*ea)*ra)-(_*da+(aa*ba+Z*ea)-$*ca)*wa-(Z*ca+aa*da+$*ea-_*ba)*sa;wa=-(Z*_+$*aa+ba*ca-da*ea);ra=-(_*da+(aa*ba+Z*ea)-$*ca);ta=-(Z*ca+aa*da+$*ea-_*ba);g[b+536>>2]=va*ta+(sa*wa+(Z*aa-_*$-ba*ea-ca*da)*pa)-ua*ra;g[b+540>>2]=ua*wa+((Z*aa-_*$-ba*ea-ca*da)*va+sa*ra)-pa*ta;g[b+544>>2]=pa*ra+(sa*ta+(Z*aa-_*$-ba*ea-ca*da)*ua)-va*wa;g[b+548>>2]=0.0;i=qa;return}function rc(d,e){d=d|0;e=e|0;var f=0.0,h=0,j=0.0,k=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0.0,D=0.0,E=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0.0,P=0.0,Q=0.0,R=0,T=0,U=0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0,aa=0,ba=0,ca=0.0,da=0,ea=0,fa=0,ga=0.0,ha=0.0;fa=i;i=i+16|0;da=c[d+28>>2]|0;ea=c[d+32>>2]|0;Y=+g[da+384>>2];Z=+g[ea+384>>2];U=c[e+24>>2]|0;ca=a[d+180>>0]|0?1.0:-1.0;V=+g[d+936>>2]-+g[d+872>>2];W=+g[d+940>>2]-+g[d+876>>2];X=+g[d+944>>2]-+g[d+880>>2];_=Y+Z>0.0?Z/(Y+Z):.5;E=c[d+824>>2]|0;H=c[d+840>>2]|0;I=c[d+856>>2]|0;J=c[d+888>>2]|0;K=c[d+904>>2]|0;L=c[d+920>>2]|0;M=(a[d+49>>0]|0)==0;if(M){h=c[d+828>>2]|0;z=c[d+844>>2]|0;B=c[d+860>>2]|0;c[fa+4>>2]=z;y=c[d+832>>2]|0;x=c[d+848>>2]|0;T=c[d+864>>2]|0;c[fa>>2]=y;t=(c[l>>2]=B,+g[l>>2]);s=(c[l>>2]=y,+g[l>>2]);q=(c[l>>2]=x,+g[l>>2]);$=E;A=T;aa=H;ba=I;r=(c[l>>2]=T,+g[l>>2])}else{f=_*(c[l>>2]=E,+g[l>>2]);n=_*(c[l>>2]=H,+g[l>>2]);m=_*(c[l>>2]=I,+g[l>>2]);j=(1.0-_)*(c[l>>2]=J,+g[l>>2]);o=(1.0-_)*(c[l>>2]=K,+g[l>>2]);m=m+(1.0-_)*(c[l>>2]=L,+g[l>>2]);p=1.0/+G(+((f+j)*(f+j)+(n+o)*(n+o)+m*m));k=(g[l>>2]=(f+j)*p,c[l>>2]|0);u=(g[l>>2]=(n+o)*p,c[l>>2]|0);x=(g[l>>2]=m*p,c[l>>2]|0);if(+F(+(m*p))>.7071067690849304){Q=1.0/+G(+(m*p*m*p+(n+o)*p*(n+o)*p));g[fa+4>>2]=-(m*p*Q);q=-((f+j)*p*(n+o)*p*Q);r=(f+j)*p*-(m*p*Q);j=(m*p*m*p+(n+o)*p*(n+o)*p)*Q;f=(n+o)*p*Q;h=0}else{r=(f+j)*p*(f+j)*p+(n+o)*p*(n+o)*p;Q=1.0/+G(+r);h=(g[l>>2]=-((n+o)*p*Q),c[l>>2]|0);g[fa+4>>2]=(f+j)*p*Q;q=m*p*-((n+o)*p*Q);r=r*Q;j=-(m*p*(f+j)*p*Q);f=0.0}B=(g[l>>2]=f,c[l>>2]|0);y=(g[l>>2]=j,c[l>>2]|0);g[fa>>2]=j;z=(g[l>>2]=q,c[l>>2]|0);$=k;A=(g[l>>2]=r,c[l>>2]|0);aa=u;ba=x;x=z;z=c[fa+4>>2]|0;t=f;s=j}N=c[e+12>>2]|0;c[N>>2]=h;c[N+4>>2]=z;c[N+8>>2]=B;c[N+(U<<2)>>2]=y;c[N+(U+1<<2)>>2]=x;c[N+(U+2<<2)>>2]=A;v=(c[l>>2]=h,+g[l>>2]);u=c[e+20>>2]|0;g[u>>2]=-v;j=+g[fa+4>>2];g[u+4>>2]=-j;g[u+8>>2]=-t;g[u+(U<<2)>>2]=-s;g[u+(U+1<<2)>>2]=-q;g[u+(U+2<<2)>>2]=-r;k=c[d+300>>2]|0;f=+g[d+280>>2];if(!(k&128))f=f*+g[e+4>>2];p=f*+g[e>>2];P=(c[l>>2]=H,+g[l>>2]);C=(c[l>>2]=L,+g[l>>2]);w=(c[l>>2]=I,+g[l>>2]);O=(c[l>>2]=K,+g[l>>2]);Q=(c[l>>2]=J,+g[l>>2]);D=(c[l>>2]=E,+g[l>>2]);T=c[e+28>>2]|0;g[T>>2]=p*((P*C-w*O)*v+(w*Q-D*C)*j+(D*O-P*Q)*t);g[T+(U<<2)>>2]=p*((P*C-w*O)*s+(w*Q-D*C)*q+(D*O-P*Q)*r);if(k&64|0){T=c[e+32>>2]|0;c[T>>2]=c[d+292>>2];c[T+(U<<2)>>2]=c[d+292>>2]}o=+g[da+52>>2];p=+g[da+56>>2];n=+g[da+60>>2];j=+g[ea+52>>2];m=+g[ea+56>>2];f=+g[ea+60>>2];if(M){H=(g[l>>2]=m-p,c[l>>2]|0);Q=+g[fa+4>>2];O=(m-p)*t-(f-n)*Q;P=(f-n)*v-(j-o)*t;g[N+(U<<1<<2)>>2]=_*O;g[N+((U<<1|1)<<2)>>2]=_*P;g[N+((U<<1)+2<<2)>>2]=_*((j-o)*Q-(m-p)*v);M=(g[l>>2]=j-o,c[l>>2]|0);K=(g[l>>2]=f-n,c[l>>2]|0);g[u+(U<<1<<2)>>2]=(1.0-_)*O;g[u+((U<<1|1)<<2)>>2]=(1.0-_)*P;g[u+((U<<1)+2<<2)>>2]=(1.0-_)*((j-o)*Q-(m-p)*v);Q=(m-p)*r-(f-n)*q;n=(f-n)*s-(j-o)*r;q=(j-o)*q-(m-p)*s;g[N+(U*3<<2)>>2]=_*Q;g[N+((U*3|0)+1<<2)>>2]=_*n;g[N+((U*3|0)+2<<2)>>2]=_*q;g[u+(U*3<<2)>>2]=(1.0-_)*Q;g[u+((U*3|0)+1<<2)>>2]=(1.0-_)*n;g[u+((U*3|0)+2<<2)>>2]=(1.0-_)*q;T=c[e+8>>2]|0;c[T+(U<<1<<2)>>2]=h;c[T+((U<<1|1)<<2)>>2]=z;c[T+((U<<1)+2<<2)>>2]=B;N=c[fa>>2]|0;c[T+(U*3<<2)>>2]=N;c[T+((U*3|0)+1<<2)>>2]=x;c[T+((U*3|0)+2<<2)>>2]=A;k=c[e+16>>2]|0;g[k+(U<<1<<2)>>2]=-v;q=(c[l>>2]=z,+g[l>>2]);g[k+((U<<1|1)<<2)>>2]=-q;o=(c[l>>2]=B,+g[l>>2]);g[k+((U<<1)+2<<2)>>2]=-o;n=(c[l>>2]=N,+g[l>>2]);g[k+(U*3<<2)>>2]=-n;m=(c[l>>2]=x,+g[l>>2]);g[k+((U*3|0)+1<<2)>>2]=-m;j=(c[l>>2]=A,+g[l>>2]);g[k+((U*3|0)+2<<2)>>2]=-j;N=M;u=0;M=0;L=0;J=0;I=0;E=0;p=v;h=T}else{ha=+g[d+936>>2]-j;ga=+g[d+940>>2]-m;O=+g[d+944>>2]-f;r=(c[l>>2]=$,+g[l>>2]);s=(c[l>>2]=aa,+g[l>>2]);q=(c[l>>2]=ba,+g[l>>2]);P=+g[d+872>>2]-o;Q=+g[d+876>>2]-p;f=+g[d+880>>2]-n;w=+g[d+1080>>2]-+g[d+1032>>2];C=r*(r*P+s*Q+q*f)+r*w-r*(r*ha+s*ga+q*O);D=s*(r*P+s*Q+q*f)+s*w-s*(r*ha+s*ga+q*O);w=q*(r*P+s*Q+q*f)+q*w-q*(r*ha+s*ga+q*O);t=P-r*(r*P+s*Q+q*f)+_*C;n=Q-s*(r*P+s*Q+q*f)+_*D;v=f-q*(r*P+s*Q+q*f)+_*w;x=(g[l>>2]=t,c[l>>2]|0);J=(g[l>>2]=n,c[l>>2]|0);E=(g[l>>2]=v,c[l>>2]|0);C=ha-r*(r*ha+s*ga+q*O)-(1.0-_)*C;D=ga-s*(r*ha+s*ga+q*O)-(1.0-_)*D;w=O-q*(r*ha+s*ga+q*O)-(1.0-_)*w;u=(g[l>>2]=C,c[l>>2]|0);y=(g[l>>2]=D,c[l>>2]|0);I=(g[l>>2]=w,c[l>>2]|0);m=_*(ha-r*(r*ha+s*ga+q*O))+(1.0-_)*(P-r*(r*P+s*Q+q*f));j=_*(ga-s*(r*ha+s*ga+q*O))+(1.0-_)*(Q-s*(r*P+s*Q+q*f));f=_*(O-q*(r*ha+s*ga+q*O))+(1.0-_)*(f-q*(r*P+s*Q+q*f));g[fa+4>>2]=j;if(f*f+(m*m+j*j)>1.1920928955078125e-007){ha=1.0/+G(+(f*f+(m*m+j*j)));h=(g[l>>2]=m*ha,c[l>>2]|0);g[fa+4>>2]=ha*j;k=(g[l>>2]=ha*f,c[l>>2]|0);Q=ha*f;j=ha*j;f=m*ha}else{T=c[d+828>>2]|0;h=c[d+844>>2]|0;k=c[d+860>>2]|0;c[fa+4>>2]=h;Q=(c[l>>2]=k,+g[l>>2]);j=(c[l>>2]=h,+g[l>>2]);h=T;f=(c[l>>2]=T,+g[l>>2])}O=s*Q-q*j;P=q*f-r*Q;r=r*j-s*f;g[fa>>2]=O;g[N+(U<<1<<2)>>2]=n*Q-v*j;g[N+(U<<1<<2)+4>>2]=v*f-t*Q;g[N+(U<<1<<2)+8>>2]=t*j-n*f;T=c[e+20>>2]|0;g[T+(U<<1<<2)>>2]=-(D*Q-w*j);g[T+((U<<1|1)<<2)>>2]=-(w*f-C*Q);g[T+((U<<1)+2<<2)>>2]=-(C*j-D*f);if(Y<1.1920928955078125e-007|Z<1.1920928955078125e-007?(a[d+297>>0]|0)!=0:0){p=_*(n*r-v*P);o=_*(t*P-n*O);m=_*(v*O-t*r);n=(1.0-_)*(D*r-w*P);j=(1.0-_)*(w*O-C*r);f=(1.0-_)*(C*P-D*O)}else{p=n*r-v*P;o=t*P-n*O;m=v*O-t*r;n=D*r-w*P;j=w*O-C*r;f=C*P-D*O}T=(c[e+12>>2]|0)+(U*3<<2)|0;g[T>>2]=p;g[T+4>>2]=m;g[T+8>>2]=o;T=c[e+20>>2]|0;g[T+(U*3<<2)>>2]=-n;g[T+((U*3|0)+1<<2)>>2]=-j;g[T+((U*3|0)+2<<2)>>2]=-f;T=c[e+8>>2]|0;c[T+(U<<1<<2)>>2]=h;c[T+((U<<1|1)<<2)>>2]=c[fa+4>>2];c[T+((U<<1)+2<<2)>>2]=k;g[T+(U*3<<2)>>2]=O;g[T+((U*3|0)+1<<2)>>2]=P;g[T+((U*3|0)+2<<2)>>2]=r;k=c[e+16>>2]|0;p=(c[l>>2]=h,+g[l>>2]);g[k+(U<<1<<2)>>2]=-p;q=+g[fa+4>>2];g[k+((U<<1|1)<<2)>>2]=-q;g[k+((U<<1)+2<<2)>>2]=-Q;g[k+(U*3<<2)>>2]=-O;g[k+((U*3|0)+1<<2)>>2]=-P;g[k+((U*3|0)+2<<2)>>2]=-r;N=0;M=x;L=y;K=0;H=0;o=Q;n=O;m=P;j=r;h=T}R=c[d+300>>2]|0;f=+g[d+264>>2];if(!(R&32))f=f*+g[e+4>>2];ha=f*+g[e>>2];T=c[e+28>>2]|0;g[T+(U<<1<<2)>>2]=ha*(V*p+W*q+X*o);g[T+(U*3<<2)>>2]=ha*(V*n+W*m+X*j);if(R&16|0){B=c[e+32>>2]|0;c[B+(U<<1<<2)>>2]=c[d+276>>2];c[B+(U*3<<2)>>2]=c[d+276>>2]}B=b[d+296>>1]|0;if(!((B&255)<<24>>24)){q=0.0;z=0}else{ha=ca*+g[d+1032>>2];q=ha;z=ha>0.0?2:1}x=a[d+1096>>0]|0;y=(z|0)!=0;if(x&255|z){A=c[e+24>>2]<<2;c[h+(A<<2)>>2]=$;c[h+((A|1)<<2)>>2]=aa;c[h+((A|2)<<2)>>2]=ba;r=(c[l>>2]=$,+g[l>>2]);g[k+(A<<2)>>2]=-r;s=(c[l>>2]=aa,+g[l>>2]);g[k+((A|1)<<2)>>2]=-s;t=(c[l>>2]=ba,+g[l>>2]);g[k+((A|2)<<2)>>2]=-t;if(a[d+49>>0]|0){if(!(Y<1.1920928955078125e-007|Z<1.1920928955078125e-007)){Z=(c[l>>2]=J,+g[l>>2]);X=(c[l>>2]=E,+g[l>>2]);Y=(c[l>>2]=M,+g[l>>2]);ha=(c[l>>2]=L,+g[l>>2]);_=(c[l>>2]=I,+g[l>>2]);ga=(c[l>>2]=u,+g[l>>2]);U=c[e+12>>2]|0;g[U+(A<<2)>>2]=t*Z-s*X;g[U+((A|1)<<2)>>2]=r*X-t*Y;g[U+((A|2)<<2)>>2]=s*Y-r*Z;U=c[e+20>>2]|0;g[U+(A<<2)>>2]=-(t*ha-s*_);g[U+((A|1)<<2)>>2]=-(r*_-t*ga);g[U+((A|2)<<2)>>2]=-(s*ga-r*ha)}}else{ha=(c[l>>2]=H,+g[l>>2]);Z=(c[l>>2]=K,+g[l>>2]);ga=(c[l>>2]=N,+g[l>>2]);U=c[e+12>>2]|0;g[U+(A<<2)>>2]=_*(t*ha-s*Z);g[U+((A|1)<<2)>>2]=_*(r*Z-t*ga);g[U+((A|2)<<2)>>2]=_*(s*ga-r*ha);U=c[e+20>>2]|0;g[U+(A<<2)>>2]=(1.0-_)*(t*ha-s*Z);g[U+((A|1)<<2)>>2]=(1.0-_)*(r*Z-t*ga);g[U+((A|2)<<2)>>2]=(1.0-_)*(s*ga-r*ha)}h=+g[d+184>>2]==+g[d+188>>2];g[T+(A<<2)>>2]=0.0;k=(c[e+36>>2]|0)+(A<<2)|0;g[k>>2]=0.0;u=(c[e+40>>2]|0)+(A<<2)|0;g[u>>2]=0.0;p=+g[((R&512|0)==0?e+4|0:d+232|0)>>2];if(!(x<<24>>24==0|y&h)){if(R&1|0)c[(c[e+32>>2]|0)+(A<<2)>>2]=c[d+212>>2];o=+g[d+1100>>2];f=+g[d+1080>>2];j=+g[d+184>>2];m=+g[d+188>>2];n=p*+g[e>>2];do if(!(j>m))if(!(j==m)){if(o/n<0.0)if(f>=j?j-o/n>f:0){f=(j-f)/(o/n);break}else{f=f<j?0.0:1.0;break}if(o/n>0.0)if(f<=m?m-o/n<f:0){f=(m-f)/(o/n);break}else{f=f>m?0.0:1.0;break}else f=0.0}else f=0.0;else f=1.0;while(0);g[T+(A<<2)>>2]=+g[T+(A<<2)>>2]-ca*f*o;g[k>>2]=-+g[d+1104>>2]/+g[e>>2]+ +g[k>>2];g[u>>2]=+g[d+1104>>2]/+g[e>>2]+ +g[u>>2]}if(y){g[T+(A<<2)>>2]=+g[T+(A<<2)>>2]+q*p*+g[e>>2];if(R&256|0)c[(c[e+32>>2]|0)+(A<<2)>>2]=c[d+244>>2];do if(!h)if((z|0)==1){g[k>>2]=-34028234663852886.0e22;g[u>>2]=0.0;break}else{g[k>>2]=0.0;g[u>>2]=34028234663852886.0e22;break}else{g[k>>2]=-34028234663852886.0e22;g[u>>2]=34028234663852886.0e22}while(0);ha=1.0-+g[d+240>>2];j=+F(+ha);do if(!(ha!=ha|0.0!=0.0|ha==0.0)){f=ca*(r*+g[da+352>>2]+s*+g[da+356>>2]+t*+g[da+360>>2]-(r*+g[ea+352>>2]+s*+g[ea+356>>2]+t*+g[ea+360>>2]));if((z|0)==1){if(!(f<0.0))break;if(!(+g[T+(A<<2)>>2]<-(j*f)))break;g[T+(A<<2)>>2]=-(j*f);break}else{if(!(f>0.0))break;if(!(+g[T+(A<<2)>>2]>-(j*f)))break;g[T+(A<<2)>>2]=-(j*f);break}}while(0);g[T+(A<<2)>>2]=+g[d+232>>2]*+g[T+(A<<2)>>2];h=5}else h=5}else h=4;if((B&65535)<256){t=0.0;y=0}else{ha=+g[d+1088>>2];t=ha;y=ha>0.0?1:2}k=a[d+1112>>0]|0;u=(y|0)!=0;if(!(k&255|y)){i=fa;return}x=S(c[e+24>>2]|0,h)|0;ea=c[e+12>>2]|0;c[ea+(x<<2)>>2]=$;c[ea+(x+1<<2)>>2]=aa;c[ea+(x+2<<2)>>2]=ba;w=(c[l>>2]=$,+g[l>>2]);ea=c[e+20>>2]|0;g[ea+(x<<2)>>2]=-w;v=(c[l>>2]=aa,+g[l>>2]);g[ea+(x+1<<2)>>2]=-v;s=(c[l>>2]=ba,+g[l>>2]);g[ea+(x+2<<2)>>2]=-s;p=+g[d+192>>2];q=+g[d+196>>2];r=+g[((R&2048|0)==0?e+4|0:d+248|0)>>2];if(!(k<<24>>24==0|u&p==q)){if(!(R&4)){m=q;n=p}else{c[(c[e+32>>2]|0)+(x<<2)>>2]=c[d+228>>2];m=+g[d+196>>2];n=+g[d+192>>2]}f=+g[d+1084>>2];o=+g[d+1116>>2];j=r*+g[e>>2];do if(!(n>m))if(!(n==m)){if(o/j<0.0)if(f>=n?n-o/j>f:0){f=(n-f)/(o/j);break}else{f=f<n?0.0:1.0;break}if(o/j>0.0)if(f<=m?m-o/j<f:0){f=(m-f)/(o/j);break}else{f=f>m?0.0:1.0;break}else f=0.0}else f=0.0;else f=1.0;while(0);g[T+(x<<2)>>2]=f*o;g[(c[e+36>>2]|0)+(x<<2)>>2]=-+g[d+1120>>2]/+g[e>>2];g[(c[e+40>>2]|0)+(x<<2)>>2]=+g[d+1120>>2]/+g[e>>2]}if(!u){i=fa;return}g[T+(x<<2)>>2]=+g[T+(x<<2)>>2]+t*r*+g[e>>2];if(R&1024|0)c[(c[e+32>>2]|0)+(x<<2)>>2]=c[d+260>>2];do if(!(p==q)){k=(c[e+36>>2]|0)+(x<<2)|0;h=c[e+40>>2]|0;if((y|0)==1){g[k>>2]=0.0;g[h+(x<<2)>>2]=34028234663852886.0e22;break}else{g[k>>2]=-34028234663852886.0e22;g[h+(x<<2)>>2]=0.0;break}}else{g[(c[e+36>>2]|0)+(x<<2)>>2]=-34028234663852886.0e22;g[(c[e+40>>2]|0)+(x<<2)>>2]=34028234663852886.0e22}while(0);ha=1.0-+g[d+256>>2];j=+F(+ha);do if(!(ha!=ha|0.0!=0.0|ha==0.0)){ea=c[d+28>>2]|0;e=c[d+32>>2]|0;f=w*+g[ea+368>>2]+v*+g[ea+372>>2]+s*+g[ea+376>>2]-(w*+g[e+368>>2]+v*+g[e+372>>2]+s*+g[e+376>>2]);if((y|0)==1){if(!(f<0.0))break;if(!(+g[T+(x<<2)>>2]<-(j*f)))break;g[T+(x<<2)>>2]=-(j*f);break}else{if(!(f>0.0))break;if(!(+g[T+(x<<2)>>2]>-(j*f)))break;g[T+(x<<2)>>2]=-(j*f);break}}while(0);g[T+(x<<2)>>2]=+g[d+248>>2]*+g[T+(x<<2)>>2];i=fa;return}function sc(d,e){d=d|0;e=e|0;var f=0.0,h=0.0,i=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0,q=0.0,r=0,s=0,t=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0,U=0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0,sa=0;ra=c[d+28>>2]|0;sa=c[d+32>>2]|0;s=c[e+24>>2]|0;if(!(a[d+739>>0]|0)){A=+g[d+552>>2];V=+g[ra+4>>2];B=+g[d+568>>2];W=+g[ra+8>>2];C=+g[d+584>>2];X=+g[ra+12>>2];D=+g[d+556>>2];E=+g[d+572>>2];F=+g[d+588>>2];Y=+g[d+560>>2];Z=+g[d+576>>2];_=+g[d+592>>2];$=+g[ra+20>>2];aa=+g[ra+24>>2];ba=+g[ra+28>>2];ca=+g[ra+36>>2];da=+g[ra+40>>2];ea=+g[ra+44>>2];m=+g[d+600>>2];o=+g[d+604>>2];q=+g[d+608>>2];u=+g[ra+52>>2];v=+g[ra+56>>2];w=+g[ra+60>>2];H=+g[sa+4>>2];I=+g[sa+8>>2];J=+g[sa+12>>2];K=+g[d+624>>2];L=+g[d+640>>2];M=+g[d+656>>2];N=+g[sa+20>>2];O=+g[sa+24>>2];P=+g[sa+28>>2];Q=+g[sa+36>>2];R=+g[sa+40>>2];S=+g[sa+44>>2];pa=+g[d+664>>2];qa=+g[d+668>>2];z=+g[d+672>>2];x=+g[sa+52>>2]+(H*pa+I*qa+J*z);y=N*pa+O*qa+P*z+ +g[sa+56>>2];z=Q*pa+R*qa+S*z+ +g[sa+60>>2];T=b[d+736>>1]|0;if(!((T&255)<<24>>24)){i=c[e+8>>2]|0;g[i>>2]=1.0;g[i+(s+1<<2)>>2]=1.0;g[i+((s<<1)+2<<2)>>2]=1.0;i=c[e+16>>2]|0;g[i>>2]=-1.0;g[i+(s+1<<2)>>2]=-1.0;g[i+((s<<1)+2<<2)>>2]=-1.0;i=s<<1;f=+g[ra+52>>2];h=+g[ra+56>>2];k=+g[ra+60>>2]}else{i=s<<1;f=u;h=v;k=w}l=u+(V*m+W*o+X*q)-f;f=$*m+aa*o+ba*q+v-h;qa=ca*m+da*o+ea*q+w-k;n=c[e+12>>2]|0;r=n+(i<<2)|0;c[n>>2]=0;g[n+4>>2]=qa;g[n+8>>2]=-f;g[n+12>>2]=0.0;g[n+(s<<2)>>2]=-qa;c[n+(s<<2)+4>>2]=0;g[n+(s<<2)+8>>2]=l;g[n+(s<<2)+12>>2]=0.0;g[r>>2]=f;g[r+4>>2]=-l;c[r+8>>2]=0;g[r+12>>2]=0.0;l=x-+g[sa+52>>2];f=y-+g[sa+56>>2];qa=z-+g[sa+60>>2];r=c[e+20>>2]|0;U=r+(i<<2)|0;c[r>>2]=0;g[r+4>>2]=-qa;g[r+8>>2]=f;g[r+12>>2]=0.0;g[r+(s<<2)>>2]=qa;c[r+(s<<2)+4>>2]=0;g[r+(s<<2)+8>>2]=-l;g[r+(s<<2)+12>>2]=0.0;g[U>>2]=-f;g[U+4>>2]=l;c[U+8>>2]=0;g[U+12>>2]=0.0;U=c[d+748>>2]|0;l=+g[((U&8|0)==0?e+4|0:d+756|0)>>2];f=l*+g[e>>2];t=c[e+28>>2]|0;if(!((T&255)<<24>>24)){g[t>>2]=f*(x-(u+(V*m+W*o+X*q)));g[t+(s<<2)>>2]=f*(y-($*m+aa*o+ba*q+v));g[t+(s<<1<<2)>>2]=f*(z-(ca*m+da*o+ea*q+w))}s=c[e+24>>2]|0;g[n+(s*3<<2)>>2]=A*V+B*W+C*X;g[n+((s*3|0)+1<<2)>>2]=A*$+B*aa+C*ba;g[n+((s*3|0)+2<<2)>>2]=A*ca+B*da+C*ea;g[n+(s<<2<<2)>>2]=V*D+W*E+X*F;g[n+((s<<2|1)<<2)>>2]=D*$+E*aa+F*ba;g[n+((s<<2|2)<<2)>>2]=D*ca+E*da+F*ea;g[r+(s*3<<2)>>2]=-(A*V+B*W+C*X);g[r+((s*3|0)+1<<2)>>2]=-(A*$+B*aa+C*ba);g[r+((s*3|0)+2<<2)>>2]=-(A*ca+B*da+C*ea);g[r+(s<<2<<2)>>2]=-(V*D+W*E+X*F);g[r+((s<<2|1)<<2)>>2]=-(D*$+E*aa+F*ba);g[r+((s<<2|2)<<2)>>2]=-(D*ca+E*da+F*ea);pa=(Y*$+Z*aa+_*ba)*(K*Q+L*R+M*S)-(Y*ca+Z*da+_*ea)*(K*N+L*O+M*P);qa=(Y*ca+Z*da+_*ea)*(H*K+I*L+J*M)-(V*Y+W*Z+X*_)*(K*Q+L*R+M*S);oa=(V*Y+W*Z+X*_)*(K*N+L*O+M*P)-(Y*$+Z*aa+_*ba)*(H*K+I*L+J*M);g[t+(s*3<<2)>>2]=((A*ca+B*da+C*ea)*oa+((A*V+B*W+C*X)*pa+(A*$+B*aa+C*ba)*qa))*f;g[t+(s<<2<<2)>>2]=((D*ca+E*da+F*ea)*oa+((V*D+W*E+X*F)*pa+(D*$+E*aa+F*ba)*qa))*f;if(!(a[d+716>>0]|0)){q=0.0;p=0}else{qa=+g[d+708>>2]*+g[d+732>>2];q=qa;p=qa>0.0?1:2}j=(p|0)!=0;if(!((T&65535)>>>8&65535|p))return;g[n+(s*5<<2)>>2]=V*Y+W*Z+X*_;g[n+((s*5|0)+1<<2)>>2]=Y*$+Z*aa+_*ba;g[n+((s*5|0)+2<<2)>>2]=Y*ca+Z*da+_*ea;g[r+(s*5<<2)>>2]=-(V*Y+W*Z+X*_);g[r+((s*5|0)+1<<2)>>2]=-(Y*$+Z*aa+_*ba);g[r+((s*5|0)+2<<2)>>2]=-(Y*ca+Z*da+_*ea);h=+g[d+688>>2];k=+g[d+692>>2];f=+jh(h-k,6.2831854820251465);if(!(f<-3.1415927410125732))if(f>3.1415927410125732)o=f+-6.2831854820251465;else o=f;else o=f+6.2831854820251465;f=+jh(h+k,6.2831854820251465);if(!(f<-3.1415927410125732))if(f>3.1415927410125732)m=f+-6.2831854820251465;else m=f;else m=f+6.2831854820251465;i=o==m;n=t+(s*5<<2)|0;g[n>>2]=0.0;if(U&2)l=+g[d+764>>2];if(!((T&65535)>>>8<<16>>16==0|j&i)){if(U&4|0)c[(c[e+32>>2]|0)+(s*5<<2)>>2]=c[d+752>>2];h=+g[d+728>>2];k=+g[d+680>>2];f=o>m?1.0:0.0;do if(!(o>=m)){f=k/(l*+g[e>>2]);if(f<0.0)if(h>=o&o-f>h){f=(o-h)/f;break}else{f=h<o?0.0:1.0;break}if(f>0.0)if(h<=m&m-f<h){f=(m-h)/f;break}else{f=h>m?0.0:1.0;break}else f=0.0}while(0);g[n>>2]=f*k*+g[d+732>>2]+ +g[n>>2];g[(c[e+36>>2]|0)+(s*5<<2)>>2]=-+g[d+684>>2];c[(c[e+40>>2]|0)+(s*5<<2)>>2]=c[d+684>>2]}if(!j)return;g[n>>2]=+g[n>>2]+q*l*+g[e>>2];if(U&1|0)c[(c[e+32>>2]|0)+(s*5<<2)>>2]=c[d+760>>2];do if(!i){j=(c[e+36>>2]|0)+(s*5<<2)|0;i=c[e+40>>2]|0;if((p|0)==1){g[j>>2]=0.0;g[i+(s*5<<2)>>2]=34028234663852886.0e22;break}else{g[j>>2]=-34028234663852886.0e22;g[i+(s*5<<2)>>2]=0.0;break}}else{g[(c[e+36>>2]|0)+(s*5<<2)>>2]=-34028234663852886.0e22;g[(c[e+40>>2]|0)+(s*5<<2)>>2]=34028234663852886.0e22}while(0);h=+g[d+704>>2];do if(h>0.0){f=(V*Y+W*Z+X*_)*+g[ra+368>>2]+(Y*$+Z*aa+_*ba)*+g[ra+372>>2]+(Y*ca+Z*da+_*ea)*+g[ra+376>>2]-((V*Y+W*Z+X*_)*+g[sa+368>>2]+(Y*$+Z*aa+_*ba)*+g[sa+372>>2]+(Y*ca+Z*da+_*ea)*+g[sa+376>>2]);if((p|0)==1){if(!(f<0.0))break;if(!(+g[n>>2]<-(h*f)))break;g[n>>2]=-(h*f);break}else{if(!(f>0.0))break;if(!(+g[n>>2]>-(h*f)))break;g[n>>2]=-(h*f);break}}while(0);g[n>>2]=+g[d+700>>2]*+g[n>>2];return}Y=+g[ra+4>>2];Z=+g[ra+8>>2];_=+g[ra+12>>2];w=+g[d+556>>2];y=+g[d+572>>2];z=+g[d+588>>2];$=+g[d+560>>2];aa=+g[d+576>>2];ba=+g[d+592>>2];ca=+g[ra+20>>2];da=+g[ra+24>>2];ea=+g[ra+28>>2];fa=+g[ra+36>>2];ga=+g[ra+40>>2];ha=+g[ra+44>>2];ja=+g[d+600>>2];ia=+g[d+604>>2];o=+g[d+608>>2];h=+g[ra+52>>2]+(Y*ja+Z*ia+_*o);v=ca*ja+da*ia+ea*o+ +g[ra+56>>2];o=fa*ja+ga*ia+ha*o+ +g[ra+60>>2];ia=+g[sa+4>>2];ja=+g[sa+8>>2];ka=+g[sa+12>>2];la=+g[d+624>>2];ma=+g[d+640>>2];P=+g[d+656>>2];Q=+g[sa+20>>2];R=+g[sa+24>>2];S=+g[sa+28>>2];V=+g[sa+36>>2];W=+g[sa+40>>2];X=+g[sa+44>>2];q=+g[d+664>>2];x=+g[d+668>>2];k=+g[d+672>>2];f=+g[sa+52>>2];u=+g[sa+56>>2];m=+g[sa+60>>2];L=f+(ia*q+ja*x+ka*k)-h;M=Q*q+R*x+S*k+u-v;N=V*q+W*x+X*k+m-o;A=+g[(c[d+28>>2]|0)+384>>2];B=+g[(c[d+32>>2]|0)+384>>2];J=A+B>0.0?B/(A+B):.5;na=(Y*$+Z*aa+_*ba)*J+(ia*la+ja*ma+ka*P)*(1.0-J);oa=($*ca+aa*da+ba*ea)*J+(la*Q+ma*R+P*S)*(1.0-J);pa=($*fa+aa*ga+ba*ha)*J+(la*V+ma*W+P*X)*(1.0-J);qa=1.0/+G(+(na*na+oa*oa+pa*pa));F=(f+(ia*q+ja*x+ka*k)-f)*na*qa+(Q*q+R*x+S*k+u-u)*oa*qa+(V*q+W*x+X*k+m-m)*pa*qa;f=f+(ia*q+ja*x+ka*k)-f-na*qa*F;u=Q*q+R*x+S*k+u-u-oa*qa*F;m=V*q+W*x+X*k+m-m-pa*qa*F;h=h-+g[ra+52>>2];v=v-+g[ra+56>>2];o=o-+g[ra+60>>2];k=na*qa*(h*na*qa+v*oa*qa+o*pa*qa);x=oa*qa*(h*na*qa+v*oa*qa+o*pa*qa);q=pa*qa*(h*na*qa+v*oa*qa+o*pa*qa);D=h-k+J*(k-na*qa*F);E=v-x+J*(x-oa*qa*F);C=o-q+J*(q-pa*qa*F);H=f-(1.0-J)*(k-na*qa*F);I=u-(1.0-J)*(x-oa*qa*F);F=m-(1.0-J)*(q-pa*qa*F);l=(J*f+(1.0-J)*(h-k))*(J*f+(1.0-J)*(h-k))+(J*u+(1.0-J)*(v-x))*(J*u+(1.0-J)*(v-x))+(J*m+(1.0-J)*(o-q))*(J*m+(1.0-J)*(o-q));if(l>1.1920928955078125e-007){z=1.0/+G(+l);O=(J*f+(1.0-J)*(h-k))*z;K=z*(J*m+(1.0-J)*(o-q));q=z*(J*u+(1.0-J)*(v-x))}else{O=Y*w+Z*y+_*z;K=w*fa+y*ga+z*ha;q=w*ca+y*da+z*ea}u=oa*qa*K-pa*qa*q;v=pa*qa*O-K*na*qa;w=q*na*qa-oa*qa*O;U=c[e+12>>2]|0;g[U>>2]=E*K-C*q;g[U+4>>2]=C*O-D*K;g[U+8>>2]=D*q-E*O;U=c[e+20>>2]|0;g[U>>2]=-(I*K-F*q);g[U+4>>2]=-(F*O-H*K);g[U+8>>2]=-(H*q-I*O);if(A<1.1920928955078125e-007|B<1.1920928955078125e-007?(a[d+716>>0]|0)!=0:0){f=J*(E*w-C*v);h=J*(C*u-D*w);k=J*(D*v-E*u);l=(1.0-J)*(I*w-F*v);m=(1.0-J)*(F*u-H*w);o=(1.0-J)*(H*v-I*u)}else{f=E*w-C*v;h=C*u-D*w;k=D*v-E*u;l=I*w-F*v;m=F*u-H*w;o=H*v-I*u}U=(c[e+12>>2]|0)+(s<<2)|0;g[U>>2]=f;g[U+4>>2]=h;g[U+8>>2]=k;U=c[e+20>>2]|0;g[U+(s<<2)>>2]=-l;g[U+(s+1<<2)>>2]=-m;g[U+(s+2<<2)>>2]=-o;if(A<1.1920928955078125e-007|B<1.1920928955078125e-007){o=J*(E*pa*qa-C*oa*qa);m=J*(C*na*qa-D*pa*qa);h=J*(D*oa*qa-E*na*qa);l=(1.0-J)*(I*pa*qa-F*oa*qa);k=(1.0-J)*(F*na*qa-H*pa*qa);f=(1.0-J)*(H*oa*qa-I*na*qa)}else{o=E*pa*qa-C*oa*qa;m=C*na*qa-D*pa*qa;h=D*oa*qa-E*na*qa;l=I*pa*qa-F*oa*qa;k=F*na*qa-H*pa*qa;f=H*oa*qa-I*na*qa}i=(c[e+12>>2]|0)+(s<<1<<2)|0;g[i>>2]=o;g[i+4>>2]=m;g[i+8>>2]=h;i=c[e+20>>2]|0;g[i+(s<<1<<2)>>2]=-l;g[i+((s<<1|1)<<2)>>2]=-k;g[i+((s<<1)+2<<2)>>2]=-f;m=+g[((c[d+748>>2]&8|0)==0?e+4|0:d+756|0)>>2];f=m*+g[e>>2];if(!(a[d+736>>0]|0)){p=c[e+8>>2]|0;g[p>>2]=O;g[p+4>>2]=q;g[p+8>>2]=K;p=(c[e+8>>2]|0)+(s<<2)|0;g[p>>2]=u;g[p+4>>2]=v;g[p+8>>2]=w;p=(c[e+8>>2]|0)+(s<<1<<2)|0;g[p>>2]=na*qa;g[p+4>>2]=oa*qa;g[p+8>>2]=pa*qa;p=c[e+16>>2]|0;h=-O;g[p>>2]=h;g[p+4>>2]=-q;g[p+8>>2]=-K;g[p+(s<<2)>>2]=-u;g[p+(s+1<<2)>>2]=-v;g[p+(s+2<<2)>>2]=-w;g[p+(s<<1<<2)>>2]=-(na*qa);g[p+((s<<1|1)<<2)>>2]=-(oa*qa);g[p+((s<<1)+2<<2)>>2]=-(pa*qa);p=c[e+28>>2]|0;g[p>>2]=f*(L*O+M*q+N*K);g[p+(s<<2)>>2]=f*(L*u+M*v+N*w);g[p+(s<<1<<2)>>2]=f*(L*na*qa+M*oa*qa+N*pa*qa);f=h;h=-u;k=-v;l=-w;i=c[e+20>>2]|0}else{f=-O;h=-u;k=-v;l=-w;p=c[e+28>>2]|0}j=c[e+12>>2]|0;g[j+(s*3<<2)>>2]=O;g[j+((s*3|0)+1<<2)>>2]=q;g[j+((s*3|0)+2<<2)>>2]=K;g[j+(s<<2<<2)>>2]=u;g[j+((s<<2|1)<<2)>>2]=v;g[j+((s<<2|2)<<2)>>2]=w;g[i+(s*3<<2)>>2]=f;g[i+((s*3|0)+1<<2)>>2]=-q;g[i+((s*3|0)+2<<2)>>2]=-K;g[i+(s<<2<<2)>>2]=h;g[i+((s<<2|1)<<2)>>2]=k;g[i+((s<<2|2)<<2)>>2]=l;M=m*+g[e>>2];N=($*ca+aa*da+ba*ea)*(la*V+ma*W+P*X)-($*fa+aa*ga+ba*ha)*(la*Q+ma*R+P*S);ha=($*fa+aa*ga+ba*ha)*(ia*la+ja*ma+ka*P)-(Y*$+Z*aa+_*ba)*(la*V+ma*W+P*X);ma=(Y*$+Z*aa+_*ba)*(la*Q+ma*R+P*S)-($*ca+aa*da+ba*ea)*(ia*la+ja*ma+ka*P);g[p+(s*3<<2)>>2]=M*(N*O+ha*q+ma*K);g[p+(s<<2<<2)>>2]=M*(N*u+ha*v+ma*w);if(!(a[d+716>>0]|0)){q=0.0;t=0}else{ma=+g[d+708>>2]*+g[d+732>>2];q=ma;t=ma>0.0?1:2}n=a[d+737>>0]|0;r=(t|0)!=0;if(!(n&255|t))return;s=(c[e+24>>2]|0)*5|0;g[j+(s<<2)>>2]=na*qa;g[j+(s+1<<2)>>2]=oa*qa;g[j+(s+2<<2)>>2]=pa*qa;g[i+(s<<2)>>2]=-(na*qa);g[i+(s+1<<2)>>2]=-(oa*qa);g[i+(s+2<<2)>>2]=-(pa*qa);h=+g[d+688>>2];k=+g[d+692>>2];f=+jh(h-k,6.2831854820251465);if(!(f<-3.1415927410125732))if(f>3.1415927410125732)o=f+-6.2831854820251465;else o=f;else o=f+6.2831854820251465;f=+jh(h+k,6.2831854820251465);if(!(f<-3.1415927410125732)){if(f>3.1415927410125732)f=f+-6.2831854820251465}else f=f+6.2831854820251465;j=o==f;p=p+(s<<2)|0;g[p>>2]=0.0;i=c[d+748>>2]|0;if(i&2)m=+g[d+764>>2];if(!(n<<24>>24==0|r&j)){if(i&4|0)c[(c[e+32>>2]|0)+(s<<2)>>2]=c[d+752>>2];k=+g[d+728>>2];l=+g[d+680>>2];h=o>f?1.0:0.0;do if(!(o>=f)){h=l/(m*+g[e>>2]);if(h<0.0)if(k>=o&o-h>k){f=(o-k)/h;break}else{f=k<o?0.0:1.0;break}if(h>0.0)if(k<=f&f-h<k){f=(f-k)/h;break}else{f=k>f?0.0:1.0;break}else f=0.0}else f=h;while(0);g[p>>2]=f*l*+g[d+732>>2]+ +g[p>>2];g[(c[e+36>>2]|0)+(s<<2)>>2]=-+g[d+684>>2];c[(c[e+40>>2]|0)+(s<<2)>>2]=c[d+684>>2]}if(!r)return;g[p>>2]=+g[p>>2]+q*m*+g[e>>2];if(i&1|0)c[(c[e+32>>2]|0)+(s<<2)>>2]=c[d+760>>2];do if(!j){j=(c[e+36>>2]|0)+(s<<2)|0;i=c[e+40>>2]|0;if((t|0)==1){g[j>>2]=0.0;g[i+(s<<2)>>2]=34028234663852886.0e22;break}else{g[j>>2]=-34028234663852886.0e22;g[i+(s<<2)>>2]=0.0;break}}else{g[(c[e+36>>2]|0)+(s<<2)>>2]=-34028234663852886.0e22;g[(c[e+40>>2]|0)+(s<<2)>>2]=34028234663852886.0e22}while(0);h=+g[d+704>>2];do if(h>0.0){f=+g[ra+368>>2]*na*qa+ +g[ra+372>>2]*oa*qa+ +g[ra+376>>2]*pa*qa-(na*qa*+g[sa+368>>2]+oa*qa*+g[sa+372>>2]+pa*qa*+g[sa+376>>2]);if((t|0)==1){if(!(f<0.0))break;if(!(+g[p>>2]<-(h*f)))break;g[p>>2]=-(h*f);break}else{if(!(f>0.0))break;if(!(+g[p>>2]>-(h*f)))break;g[p>>2]=-(h*f);break}}while(0);g[p>>2]=+g[d+700>>2]*+g[p>>2];return}function tc(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,m=0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0;z=i;i=i+112|0;c[b+164>>2]=1065353216;c[b+168>>2]=1065353216;c[b+172>>2]=1065353216;g[b+176>>2]=0.0;c[b+180>>2]=0;g[b+184>>2]=999999984306749440.0;c[b+188>>2]=0;c[b+188+4>>2]=0;c[b+188+8>>2]=0;c[b+188+12>>2]=0;c[b+204>>2]=1;c[b+208>>2]=-1;c[b+212>>2]=-1;c[b+216>>2]=1;g[b+220>>2]=0.0;g[b+224>>2]=.5;g[b+228>>2]=0.0;g[b+232>>2]=0.0;g[b+236>>2]=0.0;g[b+240>>2]=.10000000149011612;g[b+244>>2]=1.0e4;c[b+248>>2]=1;c[b+252>>2]=0;c[b+256>>2]=-1;c[b+260>>2]=-1;g[b+264>>2]=1.0;g[b+268>>2]=0.0;g[b+272>>2]=0.0;c[b+276>>2]=0;a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;c[b+288>>2]=0;c[b+300>>2]=0;c[b+4>>2]=1065353216;c[b+8>>2]=0;c[b+8+4>>2]=0;c[b+8+8>>2]=0;c[b+8+12>>2]=0;c[b+24>>2]=1065353216;c[b+28>>2]=0;c[b+28+4>>2]=0;c[b+28+8>>2]=0;c[b+28+12>>2]=0;c[b+44>>2]=1065353216;c[b+48>>2]=0;c[b+48+4>>2]=0;c[b+48+8>>2]=0;c[b+48+12>>2]=0;c[b+48+16>>2]=0;c[b>>2]=2996;a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;c[b+324>>2]=0;a[b+448>>0]=1;c[b+444>>2]=0;c[b+436>>2]=0;c[b+440>>2]=0;a[b+468>>0]=1;c[b+464>>2]=0;c[b+456>>2]=0;c[b+460>>2]=0;a[b+488>>0]=1;c[b+484>>2]=0;c[b+476>>2]=0;c[b+480>>2]=0;a[b+536>>0]=1;c[b+532>>2]=0;c[b+524>>2]=0;c[b+528>>2]=0;a[b+556>>0]=1;c[b+552>>2]=0;c[b+544>>2]=0;c[b+548>>2]=0;c[b+724>>2]=d;a[b+744>>0]=1;c[b+740>>2]=0;c[b+732>>2]=0;c[b+736>>2]=0;a[b+764>>0]=1;c[b+760>>2]=0;c[b+752>>2]=0;c[b+756>>2]=0;a[b+784>>0]=1;c[b+780>>2]=0;c[b+772>>2]=0;c[b+776>>2]=0;a[b+804>>0]=1;c[b+800>>2]=0;c[b+792>>2]=0;c[b+796>>2]=0;a[b+824>>0]=1;c[b+820>>2]=0;c[b+812>>2]=0;c[b+816>>2]=0;a[b+844>>0]=1;c[b+840>>2]=0;c[b+832>>2]=0;c[b+836>>2]=0;a[b+864>>0]=1;c[b+860>>2]=0;c[b+852>>2]=0;c[b+856>>2]=0;a[b+884>>0]=1;c[b+880>>2]=0;c[b+872>>2]=0;c[b+876>>2]=0;a[b+904>>0]=1;c[b+900>>2]=0;c[b+892>>2]=0;c[b+896>>2]=0;a[b+924>>0]=1;c[b+920>>2]=0;c[b+912>>2]=0;c[b+916>>2]=0;a[b+1004>>0]=1;c[b+1e3>>2]=0;c[b+992>>2]=0;c[b+996>>2]=0;a[b+1024>>0]=1;c[b+1020>>2]=0;c[b+1012>>2]=0;c[b+1016>>2]=0;c[b+968>>2]=0;c[b+972>>2]=0;c[b+976>>2]=-1;c[b+980>>2]=0;c[b+984>>2]=0;a[b+1064>>0]=1;c[b+1060>>2]=0;c[b+1052>>2]=0;c[b+1056>>2]=0;a[b+1084>>0]=1;c[b+1080>>2]=0;c[b+1072>>2]=0;c[b+1076>>2]=0;c[b+1028>>2]=0;c[b+1032>>2]=0;c[b+1036>>2]=-1;c[b+1040>>2]=0;c[b+1044>>2]=0;a[b+1124>>0]=1;c[b+1120>>2]=0;c[b+1112>>2]=0;c[b+1116>>2]=0;a[b+1144>>0]=1;c[b+1140>>2]=0;c[b+1132>>2]=0;c[b+1136>>2]=0;c[b+1088>>2]=0;c[b+1092>>2]=0;c[b+1096>>2]=-1;c[b+1100>>2]=0;c[b+1104>>2]=0;a[b+1164>>0]=1;c[b+1160>>2]=0;c[b+1152>>2]=0;c[b+1156>>2]=0;a[b+1184>>0]=1;c[b+1180>>2]=0;c[b+1172>>2]=0;c[b+1176>>2]=0;a[b+1288>>0]=1;c[b+1284>>2]=0;c[b+1276>>2]=0;c[b+1280>>2]=0;c[b+248>>2]=8;c[b+328>>2]=0;g[b+332>>2]=1.0;c[b+336>>2]=0;c[b+336+4>>2]=0;c[b+336+8>>2]=0;c[b+336+12>>2]=0;c[b+336+16>>2]=0;g[b+356>>2]=.20000000298023224;g[b+360>>2]=0.0;g[b+364>>2]=1.0;g[b+368>>2]=.10000000149011612;g[b+372>>2]=1.0;g[b+376>>2]=.699999988079071;g[b+380>>2]=.10000000149011612;g[b+384>>2]=1.0;g[b+388>>2]=.5;g[b+392>>2]=.5;g[b+396>>2]=.5;g[b+400>>2]=.5;g[b+404>>2]=1.0;g[b+408>>2]=1.0;c[b+412>>2]=0;c[b+416>>2]=1;c[b+420>>2]=0;c[b+424>>2]=4;c[b+428>>2]=1;a[b+512>>0]=0;a[b+513>>0]=0;g[b+516>>2]=0.0;c[b+560>>2]=0;c[b+560+4>>2]=0;c[b+560+8>>2]=0;c[b+560+12>>2]=0;c[b+576>>2]=1065353216;c[b+580>>2]=0;c[b+580+4>>2]=0;c[b+580+8>>2]=0;c[b+580+12>>2]=0;c[b+596>>2]=1065353216;c[b+600>>2]=0;c[b+600+4>>2]=0;c[b+600+8>>2]=0;c[b+600+12>>2]=0;c[b+616>>2]=1065353216;g[b+620>>2]=0.0;c[b+624>>2]=1065353216;c[b+628>>2]=0;c[b+628+4>>2]=0;c[b+628+8>>2]=0;c[b+628+12>>2]=0;c[b+644>>2]=1065353216;c[b+648>>2]=0;c[b+648+4>>2]=0;c[b+648+8>>2]=0;c[b+648+12>>2]=0;c[b+664>>2]=1065353216;g[b+668>>2]=0.0;c[b+720>>2]=0;g[b+928>>2]=0.0;a[b+964>>0]=1;c[b+932>>2]=0;c[b+932+4>>2]=0;c[b+932+8>>2]=0;c[b+932+12>>2]=0;c[b+932+16>>2]=0;c[b+932+20>>2]=0;c[b+932+24>>2]=0;c[b+932+28>>2]=0;c[b+4>>2]=1065353216;c[b+8>>2]=0;c[b+8+4>>2]=0;c[b+8+8>>2]=0;c[b+8+12>>2]=0;c[b+24>>2]=1065353216;c[b+28>>2]=0;c[b+28+4>>2]=0;c[b+28+8>>2]=0;c[b+28+12>>2]=0;c[b+44>>2]=1065353216;c[b+48>>2]=0;c[b+48+4>>2]=0;c[b+48+8>>2]=0;c[b+48+12>>2]=0;c[b+48+16>>2]=0;d=c[b+444>>2]|0;if(d|0){if(a[b+448>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+444>>2]=0}a[b+448>>0]=1;c[b+444>>2]=0;c[b+436>>2]=0;c[b+440>>2]=0;d=c[b+464>>2]|0;if(d|0){if(a[b+468>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+464>>2]=0}a[b+468>>0]=1;c[b+464>>2]=0;c[b+456>>2]=0;c[b+460>>2]=0;d=c[b+484>>2]|0;do if(d)if(a[b+488>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);j=c[b+456>>2]|0;d=c[b+460>>2]|0;c[b+484>>2]=0;a[b+488>>0]=1;c[b+484>>2]=0;c[b+476>>2]=0;c[b+480>>2]=0;if((j|0)==(d|0)){s=14;break}else break}else{c[b+484>>2]=0;a[b+488>>0]=1;c[b+484>>2]=0;c[b+476>>2]=0;c[b+480>>2]=0;d=0;s=14;break}else{a[b+488>>0]=1;c[b+484>>2]=0;c[b+476>>2]=0;c[b+480>>2]=0;d=0;s=14}while(0);if((s|0)==14){o=d|0?d<<1:1;if((d|0)<(o|0)){if(!o)m=0;else{c[6324]=(c[6324]|0)+1;d=ic((o<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}m=d;d=c[b+456>>2]|0}k=c[b+464>>2]|0;if((d|0)<=0){if(k)s=22}else{j=0;do{c[m+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)!=(d|0));s=22}if((s|0)==22){if(a[b+468>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);d=c[b+456>>2]|0}c[b+464>>2]=0}a[b+468>>0]=1;c[b+464>>2]=m;c[b+460>>2]=o;j=d;d=o}else j=d}k=c[b+464>>2]|0;c[k+(j<<2)>>2]=1;j=j+1|0;c[b+456>>2]=j;if((j|0)==(d|0)){o=d|0?d<<1:1;if((d|0)<(o|0)){if(!o)m=0;else{c[6324]=(c[6324]|0)+1;d=ic((o<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}m=d;d=c[b+456>>2]|0;k=c[b+464>>2]|0}if((d|0)<=0){if(k)s=35}else{j=0;do{c[m+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)!=(d|0));s=35}if((s|0)==35){if(a[b+468>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);d=c[b+456>>2]|0}c[b+464>>2]=0}a[b+468>>0]=1;c[b+464>>2]=m;c[b+460>>2]=o;k=m;j=d;d=o}else j=d}c[k+(j<<2)>>2]=2;j=j+1|0;c[b+456>>2]=j;if((j|0)==(d|0)){o=d|0?d<<1:1;if((d|0)<(o|0)){if(!o)m=0;else{c[6324]=(c[6324]|0)+1;d=ic((o<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}m=d;d=c[b+456>>2]|0;k=c[b+464>>2]|0}if((d|0)<=0){if(k)s=48}else{j=0;do{c[m+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)!=(d|0));s=48}if((s|0)==48){if(a[b+468>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);d=c[b+456>>2]|0}c[b+464>>2]=0}a[b+468>>0]=1;c[b+464>>2]=m;c[b+460>>2]=o;j=d;d=o}else{m=k;j=d}}else m=k;c[m+(j<<2)>>2]=3;j=j+1|0;c[b+456>>2]=j;if((j|0)==(d|0)){o=d|0?d<<1:1;if((d|0)<(o|0)){if(!o)k=0;else{c[6324]=(c[6324]|0)+1;d=ic((o<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}k=d;d=c[b+456>>2]|0;m=c[b+464>>2]|0}if((d|0)<=0){if(m)s=61}else{j=0;do{c[k+(j<<2)>>2]=c[m+(j<<2)>>2];j=j+1|0}while((j|0)!=(d|0));s=61}if((s|0)==61){if(a[b+468>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0);d=c[b+456>>2]|0}c[b+464>>2]=0}a[b+468>>0]=1;c[b+464>>2]=k;c[b+460>>2]=o}else k=m}else{k=m;d=j}c[k+(d<<2)>>2]=0;c[b+456>>2]=d+1;c[6324]=(c[6324]|0)+1;d=ic(43)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+8>>2]=0;c[d+12>>2]=-1;c[d>>2]=3104;c[d+4>>2]=32;c[d+20>>2]=b;c[b+192>>2]=d;g[d+16>>2]=.25;c[b+1188>>2]=1065353216;c[b+1192>>2]=0;c[b+1192+4>>2]=0;c[b+1192+8>>2]=0;c[b+1192+12>>2]=0;c[b+1208>>2]=1065353216;c[b+1212>>2]=0;c[b+1212+4>>2]=0;c[b+1212+8>>2]=0;c[b+1212+12>>2]=0;c[b+1228>>2]=1065353216;s=b+1232|0;t=s+36|0;do{c[s>>2]=0;s=s+4|0}while((s|0)<(t|0));g[b+1268>>2]=1.0;x=bh(b)|0;g[x+4>>2]=1.0;g[x+8>>2]=1.0;g[x+12>>2]=1.0;c[x+16>>2]=1;s=c[b+192>>2]|0;y=+Cb[c[(c[s>>2]|0)+48>>2]&15](s);s=z;t=s+100|0;do{c[s>>2]=0;s=s+4|0}while((s|0)<(t|0));o=c[b+752>>2]|0;if((o|0)<(e|0)){if((c[b+756>>2]|0)<(e|0)){if(!e){d=0;k=o}else{c[6324]=(c[6324]|0)+1;d=ic((e*104|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}k=c[b+752>>2]|0}if((k|0)>0){j=0;do{s=d+(j*104|0)|0;m=(c[b+760>>2]|0)+(j*104|0)|0;t=s+104|0;do{c[s>>2]=c[m>>2];s=s+4|0;m=m+4|0}while((s|0)<(t|0));j=j+1|0}while((j|0)!=(k|0))}j=c[b+760>>2]|0;if(j|0){if(a[b+764>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[b+760>>2]=0}a[b+764>>0]=1;c[b+760>>2]=d;c[b+756>>2]=e;d=o}else d=o;do{s=c[b+760>>2]|0;c[s+(d*104|0)>>2]=0;s=s+(d*104|0)+4|0;m=z;t=s+100|0;do{c[s>>2]=c[m>>2];s=s+4|0;m=m+4|0}while((s|0)<(t|0));d=d+1|0}while((d|0)!=(e|0))}c[b+752>>2]=e;if((e|0)>0){o=f;f=0;while(1){v=c[b+760>>2]|0;w=v+(f*104|0)|0;s=w;t=s+104|0;do{c[s>>2]=0;s=s+4|0}while((s|0)<(t|0));j=v+(f*104|0)+8|0;if(!o){u=0;d=0;k=0;m=0;n=0.0}else{u=o+16|0;d=c[o>>2]|0;k=c[o+4>>2]|0;m=c[o+8>>2]|0;n=+g[o+12>>2]}c[j>>2]=d;c[v+(f*104|0)+12>>2]=k;c[v+(f*104|0)+16>>2]=m;g[v+(f*104|0)+20>>2]=n;t=v+(f*104|0)+24|0;c[t>>2]=c[j>>2];c[t+4>>2]=c[j+4>>2];c[t+8>>2]=c[j+8>>2];c[t+12>>2]=c[j+12>>2];r=(c[l>>2]=d,+g[l>>2]);q=(c[l>>2]=k,+g[l>>2]);p=(c[l>>2]=m,+g[l>>2]);if(!h){j=0;n=1.0}else{j=h+4|0;n=+g[h>>2]}g[v+(f*104|0)+88>>2]=n>0.0?1.0/n:0.0;d=c[b+972>>2]|0;if(!d){c[6324]=(c[6324]|0)+1;d=ic(63)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}s=d;t=s+44|0;do{c[s>>2]=0;s=s+4|0}while((s|0)<(t|0))}else c[b+972>>2]=0;c[d+32>>2]=0;c[d+36>>2]=w;c[d+40>>2]=0;g[d>>2]=r-y;g[d+4>>2]=q-y;g[d+8>>2]=p-y;g[d+12>>2]=0.0;g[d+16>>2]=y+r;g[d+20>>2]=y+q;g[d+24>>2]=y+p;g[d+28>>2]=0.0;Ze(b+968|0,c[b+968>>2]|0,d);c[b+980>>2]=(c[b+980>>2]|0)+1;c[v+(f*104|0)+96>>2]=d;c[v+(f*104|0)+4>>2]=x;f=f+1|0;if((f|0)==(e|0))break;else{o=u;h=j}}}d=c[b+968>>2]|0;if(!d){c[b+932>>2]=0;c[b+932+4>>2]=0;c[b+932+8>>2]=0;c[b+932+12>>2]=0;c[b+932+16>>2]=0;c[b+932+20>>2]=0;c[b+932+24>>2]=0;c[b+932+28>>2]=0;i=z;return}e=c[b+192>>2]|0;q=+Cb[c[(c[e>>2]|0)+48>>2]&15](e);y=+g[d+4>>2]-q;r=+g[d+8>>2]-q;g[b+932>>2]=+g[d>>2]-q;g[b+936>>2]=y;g[b+940>>2]=r;g[b+944>>2]=0.0;r=q+ +g[d+20>>2];y=q+ +g[d+24>>2];g[b+948>>2]=q+ +g[d+16>>2];g[b+952>>2]=r;g[b+956>>2]=y;g[b+960>>2]=0.0;d=c[b+188>>2]|0;if(!d){i=z;return}e=c[b+724>>2]|0;x=c[e+32>>2]|0;ib[c[(c[x>>2]|0)+16>>2]&31](x,d,b+932|0,b+948|0,c[e+36>>2]|0);i=z;return}function uc(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0,C=0,D=0.0,E=0,F=0,H=0,I=0,J=0,K=0,L=0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0,T=0;S=i;i=i+240|0;g[b+56>>2]=0.0;K=S+224+4|0;L=S+224+8|0;c[S+224>>2]=0;c[S+224+4>>2]=0;c[S+224+8>>2]=0;c[S+224+12>>2]=0;c[S+160>>2]=c[d>>2];c[S+160+4>>2]=c[d+4>>2];c[S+160+8>>2]=c[d+8>>2];c[S+160+12>>2]=c[d+12>>2];c[S+160+16>>2]=c[d+16>>2];c[S+160+16+4>>2]=c[d+16+4>>2];c[S+160+16+8>>2]=c[d+16+8>>2];c[S+160+16+12>>2]=c[d+16+12>>2];c[S+160+32>>2]=c[d+32>>2];c[S+160+32+4>>2]=c[d+32+4>>2];c[S+160+32+8>>2]=c[d+32+8>>2];c[S+160+32+12>>2]=c[d+32+12>>2];B=S+160+48|0;c[B>>2]=c[d+48>>2];c[B+4>>2]=c[d+48+4>>2];c[B+8>>2]=c[d+48+8>>2];c[B+12>>2]=c[d+48+12>>2];c[S+96>>2]=c[d+64>>2];c[S+96+4>>2]=c[d+64+4>>2];c[S+96+8>>2]=c[d+64+8>>2];c[S+96+12>>2]=c[d+64+12>>2];c[S+96+16>>2]=c[d+80>>2];c[S+96+16+4>>2]=c[d+80+4>>2];c[S+96+16+8>>2]=c[d+80+8>>2];c[S+96+16+12>>2]=c[d+80+12>>2];c[S+96+32>>2]=c[d+96>>2];c[S+96+32+4>>2]=c[d+96+4>>2];c[S+96+32+8>>2]=c[d+96+8>>2];c[S+96+32+12>>2]=c[d+96+12>>2];C=S+96+48|0;c[C>>2]=c[d+112>>2];c[C+4>>2]=c[d+112+4>>2];c[C+8>>2]=c[d+112+8>>2];c[C+12>>2]=c[d+112+12>>2];M=+g[B>>2];N=+g[C>>2];F=S+160+52|0;O=+g[F>>2];H=S+96+52|0;P=+g[H>>2];I=S+160+56|0;Q=+g[I>>2];J=S+96+56|0;R=+g[J>>2];g[B>>2]=M-(M+N)*.5;g[F>>2]=O-(O+P)*.5;g[I>>2]=Q-(Q+R)*.5;g[C>>2]=N-(M+N)*.5;g[H>>2]=P-(O+P)*.5;g[J>>2]=R-(Q+R)*.5;if(((c[(c[b+28>>2]|0)+4>>2]|0)+-17|0)>>>0<2)B=((c[(c[b+32>>2]|0)+4>>2]|0)+-17|0)>>>0<2;else B=0;v=+g[b+44>>2];u=+g[b+48>>2];c[6068]=(c[6068]|0)+1;C=a[b+52>>0]|0;c[b+64>>2]=0;c[b+4>>2]=0;c[b+8>>2]=1065353216;c[b+12>>2]=0;g[b+16>>2]=0.0;c[b+68>>2]=0;c[b+60>>2]=-1;n=c[b+24>>2]|0;a[n+312>>0]=0;c[n>>2]=0;a[n+356>>0]=1;c[n+292>>2]=1566444395;c[n+296>>2]=1566444395;c[n+300>>2]=1566444395;g[n+304>>2]=0.0;c[n+336>>2]=0;c[n+336+4>>2]=0;c[n+336+8>>2]=0;c[n+336+12>>2]=0;a[n+336+16>>0]=0;a[n+332>>0]=a[n+332>>0]&-16;n=0;q=999999984306749440.0;do{p=+g[b+4>>2];o=+g[b+8>>2];k=+g[b+12>>2];l=+g[d+4>>2]*-p+ +g[d+20>>2]*-o+ +g[d+36>>2]*-k;m=+g[d+8>>2]*-p+ +g[d+24>>2]*-o+ +g[d+40>>2]*-k;g[S+80>>2]=+g[d>>2]*-p+ +g[d+16>>2]*-o+ +g[d+32>>2]*-k;g[S+80+4>>2]=l;g[S+80+8>>2]=m;g[S+80+12>>2]=0.0;m=p*+g[d+68>>2]+o*+g[d+84>>2]+k*+g[d+100>>2];l=p*+g[d+72>>2]+o*+g[d+88>>2]+k*+g[d+104>>2];g[S+64>>2]=+g[d+64>>2]*p+ +g[d+80>>2]*o+ +g[d+96>>2]*k;g[S+64+4>>2]=m;g[S+64+8>>2]=l;g[S+64+12>>2]=0.0;sd(S+48|0,c[b+28>>2]|0,S+80|0);sd(S+32|0,c[b+32>>2]|0,S+64|0);l=+g[S+48>>2];m=+g[S+48+4>>2];k=+g[S+48+8>>2];o=l*+g[S+160>>2]+m*+g[S+160+4>>2]+k*+g[S+160+8>>2]+ +g[S+160+48>>2];p=l*+g[S+160+16>>2]+m*+g[S+160+20>>2]+k*+g[S+160+24>>2]+ +g[F>>2];k=l*+g[S+160+32>>2]+m*+g[S+160+36>>2]+k*+g[S+160+40>>2]+ +g[I>>2];m=+g[S+32>>2];l=+g[S+32+4>>2];t=+g[S+32+8>>2];r=m*+g[S+96>>2]+l*+g[S+96+4>>2]+t*+g[S+96+8>>2]+ +g[S+96+48>>2];s=m*+g[S+96+16>>2]+l*+g[S+96+20>>2]+t*+g[S+96+24>>2]+ +g[H>>2];t=m*+g[S+96+32>>2]+l*+g[S+96+36>>2]+t*+g[S+96+40>>2]+ +g[J>>2];l=B?0.0:t;m=B?0.0:k;t=(B?0.0:k)-(B?0.0:t);k=+g[b+4>>2]*(o-r)+ +g[b+8>>2]*(p-s)+ +g[b+12>>2]*t;if(k>0.0?k*k>q*+g[d+128>>2]:0){c[b+68>>2]=10;n=1;h=0}else T=7;do if((T|0)==7){T=0;w=c[b+24>>2]|0;x=c[w>>2]|0;a:do if((x|0)>0){j=+g[w+308>>2];h=0;while(1){z=o-r-+g[w+4+(h<<4)>>2];A=p-s-+g[w+4+(h<<4)+4>>2];D=t-+g[w+4+(h<<4)+8>>2];h=h+1|0;if(z*z+A*A+D*D<=j){h=1;break a}if((h|0)>=(x|0)){h=0;break}}}else h=0;while(0);if((+g[w+304>>2]==0.0?t==+g[w+300>>2]:0)?p-s==+g[w+296>>2]:0){if(o-r==+g[w+292>>2]|h)T=16}else T=15;if((T|0)==15?(T=0,h):0)T=16;if((T|0)==16){T=0;c[b+68>>2]=1;n=1;h=0;break}j=q-k;if(j<=q*9.999999974752427e-007){c[b+68>>2]=!(j<=0.0)?11:2;n=1;h=0;break}g[w+292>>2]=o-r;g[w+296>>2]=p-s;g[w+300>>2]=t;g[w+304>>2]=0.0;a[w+356>>0]=1;g[w+4+(x<<4)>>2]=o-r;g[w+4+(x<<4)+4>>2]=p-s;g[w+4+(x<<4)+8>>2]=t;g[w+4+(x<<4)+12>>2]=0.0;h=c[w>>2]|0;g[w+84+(h<<4)>>2]=o;g[w+84+(h<<4)+4>>2]=p;g[w+84+(h<<4)+8>>2]=m;g[w+84+(h<<4)+12>>2]=0.0;h=c[w>>2]|0;g[w+164+(h<<4)>>2]=r;g[w+164+(h<<4)+4>>2]=s;g[w+164+(h<<4)+8>>2]=l;g[w+164+(h<<4)+12>>2]=0.0;c[w>>2]=(c[w>>2]|0)+1;h=c[b+24>>2]|0;x=Hc(h)|0;j=+g[h+276>>2];k=+g[h+280>>2];l=+g[h+284>>2];h=c[h+288>>2]|0;if(!x){c[b+68>>2]=3;n=1;h=0;break}if(j*j+k*k+l*l<9.999999974752427e-007){g[b+4>>2]=j;g[b+8>>2]=k;g[b+12>>2]=l;c[b+16>>2]=h;c[b+68>>2]=6;n=1;h=0;break}if(q-(j*j+k*k+l*l)<=q*1.1920928955078125e-007){c[b+68>>2]=12;q=j*j+k*k+l*l;n=1;h=0;break}g[b+4>>2]=j;g[b+8>>2]=k;g[b+12>>2]=l;c[b+16>>2]=h;x=c[b+64>>2]|0;c[b+64>>2]=x+1;if((x|0)<=1e3)if((c[c[b+24>>2]>>2]|0)==4){c[b+68>>2]=13;q=j*j+k*k+l*l;h=0}else{q=j*j+k*k+l*l;h=1}else{q=j*j+k*k+l*l;h=0}}while(0)}while(h);y=C<<24>>24==0?u:0.0;u=(C<<24>>24==0?v:0.0)+y;do if(n){C=c[b+24>>2]|0;Hc(C)|0;l=+g[C+260>>2];k=+g[C+264>>2];j=+g[C+268>>2];c[S+224>>2]=c[b+4>>2];c[S+224+4>>2]=c[b+4+4>>2];c[S+224+8>>2]=c[b+4+8>>2];c[S+224+12>>2]=c[b+4+12>>2];m=+g[b+4>>2];o=+g[b+8>>2];p=+g[b+12>>2];if(m*m+o*o+p*p<.0001)c[b+68>>2]=5;if(m*m+o*o+p*p>1.4210854715202004e-014){D=1.0/+G(+(m*m+o*o+p*p));g[S+224>>2]=D*+g[S+224>>2];g[K>>2]=D*+g[K>>2];g[L>>2]=D*+g[L>>2];A=y/+G(+q);c[b+60>>2]=1;D=1.0/D-u;w=1;l=A*m+l;k=A*o+k;j=A*p+j;break}else{c[b+60>>2]=2;D=0.0;w=0;break}}else{D=0.0;w=0;l=0.0;k=0.0;j=0.0}while(0);if(((c[b+72>>2]|0)!=0?(c[b+20>>2]|0)!=0:0)?(c[b+68>>2]|0)!=0:0)h=u+D<1.0000000474974513e-003;else h=0;n=w^1;do if(h|n?(E=c[b+20>>2]|0,(E|0)!=0):0){c[6067]=(c[6067]|0)+1;c[b+4>>2]=0;c[b+4+4>>2]=0;c[b+4+8>>2]=0;c[b+4+12>>2]=0;if(!(nb[c[(c[E>>2]|0)+8>>2]&3](E,c[b+24>>2]|0,c[b+28>>2]|0,c[b+32>>2]|0,S+160|0,S+96|0,b+4|0,S+80|0,S+64|0,f)|0)){o=+g[b+4>>2];q=+g[b+8>>2];s=+g[b+12>>2];if(!(o*o+q*q+s*s>0.0)){if(w){m=D;break}i=S;return}p=+g[S+64>>2];z=+g[S+80>>2]-p;r=+g[S+64+4>>2];A=+g[S+80+4>>2]-r;t=+g[S+64+8>>2];m=+g[S+80+8>>2]-t;m=+G(+(z*z+A*A+m*m))-u;if(m<D|n){c[S+224>>2]=c[b+4>>2];c[S+224+4>>2]=c[b+4+4>>2];c[S+224+8>>2]=c[b+4+8>>2];c[S+224+12>>2]=c[b+4+12>>2];D=+g[S+224>>2];j=+g[K>>2];k=+g[L>>2];l=1.0/+G(+(D*D+j*j+k*k));g[S+224>>2]=D*l;g[K>>2]=j*l;g[L>>2]=k*l;c[b+60>>2]=6;l=y*o+p;k=y*q+r;j=y*s+t;break}c[b+60>>2]=5;if(w){m=D;break}i=S;return}y=+g[S+64>>2];o=+g[S+80>>2];z=+g[S+64+4>>2];p=+g[S+80+4>>2];A=+g[S+64+8>>2];q=+g[S+80+8>>2];if(!((y-o)*(y-o)+(z-p)*(z-p)+(A-q)*(A-q)<=1.4210854715202004e-014)){m=(y-o)*(y-o)+(z-p)*(z-p)+(A-q)*(A-q);s=y-o;t=A-q;u=0.0;v=z-p}else{s=+g[b+4>>2];v=+g[b+8>>2];t=+g[b+12>>2];m=s*s+v*v+t*t;u=+g[b+16>>2]}if(!(m>1.4210854715202004e-014)){c[b+60>>2]=9;if(w){m=D;break}i=S;return}r=1.0/+G(+m);m=-+G(+((o-y)*(o-y)+(p-z)*(p-z)+(q-A)*(q-A)));c[b+60>>2]=3;if(!(D>m|n)){c[b+60>>2]=8;if(w){m=D;break}i=S;return}D=t*r;q=v*r;s=s*r;g[S+224>>2]=s;g[K>>2]=q;g[L>>2]=D;g[S+224+12>>2]=u;k=s*+g[d+4>>2]+q*+g[d+20>>2]+D*+g[d+36>>2];j=s*+g[d+8>>2]+q*+g[d+24>>2]+D*+g[d+40>>2];g[S+48>>2]=+g[d>>2]*s+ +g[d+16>>2]*q+ +g[d+32>>2]*D;g[S+48+4>>2]=k;g[S+48+8>>2]=j;g[S+48+12>>2]=0.0;j=+g[d+68>>2]*-s+ +g[d+84>>2]*-q+ +g[d+100>>2]*-D;k=+g[d+72>>2]*-s+ +g[d+88>>2]*-q+ +g[d+104>>2]*-D;g[S+32>>2]=+g[d+64>>2]*-s+ +g[d+80>>2]*-q+ +g[d+96>>2]*-D;g[S+32+4>>2]=j;g[S+32+8>>2]=k;g[S+32+12>>2]=0.0;sd(S+16|0,c[b+28>>2]|0,S+48|0);sd(S,c[b+32>>2]|0,S+32|0);k=+g[S+16>>2];j=+g[S+16+4>>2];D=+g[S+16+8>>2];s=+g[S>>2];r=+g[S+4>>2];q=+g[S+8>>2];v=+g[S+224>>2];u=+g[K>>2];t=+g[L>>2];q=-((k*+g[S+160+16>>2]+j*+g[S+160+20>>2]+D*+g[S+160+24>>2]+ +g[F>>2]-(s*+g[S+96+16>>2]+r*+g[S+96+20>>2]+q*+g[S+96+24>>2]+ +g[H>>2]))*u)-(k*+g[S+160>>2]+j*+g[S+160+4>>2]+D*+g[S+160+8>>2]+ +g[S+160+48>>2]-(s*+g[S+96>>2]+r*+g[S+96+4>>2]+q*+g[S+96+8>>2]+ +g[S+96+48>>2]))*v-(k*+g[S+160+32>>2]+j*+g[S+160+36>>2]+D*+g[S+160+40>>2]+ +g[I>>2]-(s*+g[S+96+32>>2]+r*+g[S+96+36>>2]+q*+g[S+96+40>>2]+ +g[J>>2]))*t;r=+g[d+4>>2]*-v+ +g[d+20>>2]*-u+ +g[d+36>>2]*-t;s=+g[d+8>>2]*-v+ +g[d+24>>2]*-u+ +g[d+40>>2]*-t;g[S+48>>2]=+g[d>>2]*-v+ +g[d+16>>2]*-u+ +g[d+32>>2]*-t;g[S+48+4>>2]=r;g[S+48+8>>2]=s;g[S+48+12>>2]=0.0;s=v*+g[d+68>>2]+u*+g[d+84>>2]+t*+g[d+100>>2];r=v*+g[d+72>>2]+u*+g[d+88>>2]+t*+g[d+104>>2];g[S+32>>2]=+g[d+64>>2]*v+ +g[d+80>>2]*u+ +g[d+96>>2]*t;g[S+32+4>>2]=s;g[S+32+8>>2]=r;g[S+32+12>>2]=0.0;sd(S+16|0,c[b+28>>2]|0,S+48|0);sd(S,c[b+32>>2]|0,S+32|0);r=+g[S+16>>2];s=+g[S+16+4>>2];t=+g[S+16+8>>2];u=+g[S>>2];v=+g[S+4>>2];D=+g[S+8>>2];j=+g[S+224>>2];k=+g[K>>2];l=+g[L>>2];if(q>(r*+g[S+160>>2]+s*+g[S+160+4>>2]+t*+g[S+160+8>>2]+ +g[S+160+48>>2]-(u*+g[S+96>>2]+v*+g[S+96+4>>2]+D*+g[S+96+8>>2]+ +g[S+96+48>>2]))*j+(r*+g[S+160+16>>2]+s*+g[S+160+20>>2]+t*+g[S+160+24>>2]+ +g[F>>2]-(u*+g[S+96+16>>2]+v*+g[S+96+20>>2]+D*+g[S+96+24>>2]+ +g[H>>2]))*k+(r*+g[S+160+32>>2]+s*+g[S+160+36>>2]+t*+g[S+160+40>>2]+ +g[I>>2]-(u*+g[S+96+32>>2]+v*+g[S+96+36>>2]+D*+g[S+96+40>>2]+ +g[J>>2]))*l){c[b+60>>2]=10;g[S+224>>2]=-j;g[K>>2]=-k;g[L>>2]=-l}l=y;k=z;j=A}else T=56;while(0);if((T|0)==56)if(w)m=D;else{i=S;return}if(!(m<0.0)?!(m*m<+g[d+128>>2]):0){i=S;return}c[b+4>>2]=c[S+224>>2];c[b+4+4>>2]=c[S+224+4>>2];c[b+4+8>>2]=c[S+224+8>>2];c[b+4+12>>2]=c[S+224+12>>2];g[b+56>>2]=m;T=c[(c[e>>2]|0)+16>>2]|0;g[S+80>>2]=(M+N)*.5+l;g[S+80+4>>2]=(O+P)*.5+k;g[S+80+8>>2]=(Q+R)*.5+j;g[S+80+12>>2]=0.0;Tb[T&15](e,S+224|0,S+80|0,m);i=S;return}function vc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0;u=i;i=i+208|0;if(ob[c[(c[a>>2]|0)+20>>2]&127](a)|0?(s=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0,(ob[c[(c[s>>2]|0)+56>>2]&127](s)|0)&32768|0):0){s=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;Wb[c[(c[s>>2]|0)+64>>2]&7](s,b,1.0)}f=c[d+4>>2]|0;switch(f|0){case 31:{f=c[d+20>>2]|0;if((f|0)<=0){i=u;return}do{t=f;f=f+-1|0;s=c[d+28>>2]|0;J=+g[s+(f*80|0)>>2];G=+g[s+(f*80|0)+4>>2];D=+g[s+(f*80|0)+8>>2];I=+g[s+(f*80|0)+16>>2];F=+g[s+(f*80|0)+20>>2];B=+g[s+(f*80|0)+24>>2];H=+g[s+(f*80|0)+32>>2];E=+g[s+(f*80|0)+36>>2];z=+g[s+(f*80|0)+40>>2];R=+g[s+(f*80|0)+48>>2];Q=+g[s+(f*80|0)+52>>2];v=+g[s+(f*80|0)+56>>2];s=c[s+(f*80|0)+64>>2]|0;r=c[(c[a>>2]|0)+28>>2]|0;P=+g[b>>2];O=+g[b+4>>2];N=+g[b+8>>2];M=+g[b+16>>2];L=+g[b+20>>2];K=+g[b+24>>2];C=+g[b+32>>2];A=+g[b+36>>2];y=+g[b+40>>2];x=R*P+Q*O+v*N+ +g[b+48>>2];w=R*M+Q*L+v*K+ +g[b+52>>2];v=R*C+Q*A+v*y+ +g[b+56>>2];g[u+144>>2]=J*P+I*O+H*N;g[u+144+4>>2]=G*P+F*O+E*N;g[u+144+8>>2]=D*P+B*O+z*N;g[u+144+12>>2]=0.0;g[u+144+16>>2]=J*M+I*L+H*K;g[u+144+20>>2]=G*M+F*L+E*K;g[u+144+24>>2]=D*M+B*L+z*K;g[u+144+28>>2]=0.0;g[u+144+32>>2]=J*C+I*A+H*y;g[u+144+36>>2]=G*C+F*A+E*y;g[u+144+40>>2]=D*C+B*A+z*y;g[u+144+44>>2]=0.0;g[u+144+48>>2]=x;g[u+144+52>>2]=w;g[u+144+56>>2]=v;g[u+144+60>>2]=0.0;Yb[r&127](a,u+144|0,s,e)}while((t|0)>1);i=u;return}case 0:{c[u+144>>2]=c[d+32>>2];c[u+144+4>>2]=c[d+32+4>>2];c[u+144+8>>2]=c[d+32+8>>2];c[u+144+12>>2]=c[d+32+12>>2];P=+Cb[c[(c[d>>2]|0)+48>>2]&15](d);Q=+Cb[c[(c[d>>2]|0)+48>>2]&15](d);R=+Cb[c[(c[d>>2]|0)+48>>2]&15](d);P=P+ +g[u+144>>2];g[u+144>>2]=P;Q=Q+ +g[u+144+4>>2];g[u+144+4>>2]=Q;R=R+ +g[u+144+8>>2];g[u+144+8>>2]=R;d=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;a=c[(c[d>>2]|0)+80>>2]|0;g[u+128>>2]=-P;g[u+128+4>>2]=-Q;g[u+128+8>>2]=-R;g[u+128+12>>2]=0.0;ib[a&31](d,u+128|0,u+144|0,b,e);i=u;return}case 8:{R=+Cb[c[(c[d>>2]|0)+48>>2]&15](d);d=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;rb[c[(c[d>>2]|0)+24>>2]&0](d,R,b,e);i=u;return}case 9:{f=c[d+96>>2]|0;if((f|0)<=0){i=u;return}do{t=f;f=f+-1|0;s=c[d+104>>2]|0;D=+g[s+(f<<4)>>2];E=+g[s+(f<<4)+4>>2];Q=+g[s+(f<<4)+8>>2];s=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;r=c[(c[s>>2]|0)+24>>2]|0;R=+g[(c[d+124>>2]|0)+(f<<2)>>2];G=+g[b>>2];H=+g[b+4>>2];F=+g[b+8>>2];J=+g[b+16>>2];K=+g[b+20>>2];I=+g[b+24>>2];M=+g[b+32>>2];N=+g[b+36>>2];L=+g[b+40>>2];O=D*G+E*H+Q*F+ +g[b+48>>2];P=D*J+E*K+Q*I+ +g[b+52>>2];Q=D*M+E*N+Q*L+ +g[b+56>>2];g[u+144>>2]=G+H*0.0+F*0.0;g[u+144+4>>2]=G*0.0+H+F*0.0;g[u+144+8>>2]=F+(G*0.0+H*0.0);g[u+144+12>>2]=0.0;g[u+144+16>>2]=J+K*0.0+I*0.0;g[u+144+20>>2]=J*0.0+K+I*0.0;g[u+144+24>>2]=I+(J*0.0+K*0.0);g[u+144+28>>2]=0.0;g[u+144+32>>2]=M+N*0.0+L*0.0;g[u+144+36>>2]=M*0.0+N+L*0.0;g[u+144+40>>2]=L+(M*0.0+N*0.0);g[u+144+44>>2]=0.0;g[u+144+48>>2]=O;g[u+144+52>>2]=P;g[u+144+56>>2]=Q;g[u+144+60>>2]=0.0;rb[r&0](s,R,u+144|0,e)}while((t|0)>1);i=u;return}case 10:{t=c[d+56>>2]|0;Q=+g[d+32+(((t+2|0)%3|0)<<2)>>2];R=+g[d+32+(t<<2)>>2];d=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;qb[c[(c[d>>2]|0)+84>>2]&0](d,Q,R,t,b,e);i=u;return}case 11:{Q=+g[d+60>>2];R=+g[d+64>>2];d=c[d+72>>2]|0;a=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;qb[c[(c[a>>2]|0)+92>>2]&0](a,Q,R,d,b,e);i=u;return}case 13:{t=c[d+56>>2]|0;Q=+Cb[c[(c[d>>2]|0)+92>>2]&15](d);c[u+112>>2]=c[d+32>>2];c[u+112+4>>2]=c[d+32+4>>2];c[u+112+8>>2]=c[d+32+8>>2];c[u+112+12>>2]=c[d+32+12>>2];O=+Cb[c[(c[d>>2]|0)+48>>2]&15](d);P=+Cb[c[(c[d>>2]|0)+48>>2]&15](d);R=+Cb[c[(c[d>>2]|0)+48>>2]&15](d);g[u+112>>2]=O+ +g[u+112>>2];g[u+112+4>>2]=P+ +g[u+112+4>>2];g[u+112+8>>2]=R+ +g[u+112+8>>2];R=+g[u+112+(t<<2)>>2];d=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;qb[c[(c[d>>2]|0)+88>>2]&0](d,Q,R,t,b,e);i=u;return}case 28:{R=+g[d+68>>2];a=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;Fb[c[(c[a>>2]|0)+96>>2]&0](a,d+52|0,R,b,e);i=u;return}default:{a:do if((f|0)<7){r=c[d+56>>2]|0;if(!r){if((ob[c[(c[d>>2]|0)+100>>2]&127](d)|0)<=0)break;f=0;while(1){Yb[c[(c[d>>2]|0)+104>>2]&127](d,f,u+144|0,u+128|0);P=+g[u+144>>2];D=+g[b>>2];N=+g[u+144+4>>2];E=+g[b+4>>2];L=+g[u+144+8>>2];F=+g[b+8>>2];H=+g[b+16>>2];I=+g[b+20>>2];J=+g[b+24>>2];M=+g[b+32>>2];O=+g[b+36>>2];Q=+g[b+40>>2];G=+g[b+48>>2];K=+g[b+52>>2];R=+g[b+56>>2];g[u+16>>2]=P*D+N*E+L*F+G;g[u+16+4>>2]=P*H+N*I+L*J+K;g[u+16+8>>2]=P*M+N*O+L*Q+R;g[u+16+12>>2]=0.0;L=+g[u+128>>2];N=+g[u+128+4>>2];P=+g[u+128+8>>2];g[u>>2]=L*D+N*E+P*F+G;g[u+4>>2]=L*H+N*I+P*J+K;g[u+8>>2]=L*M+N*O+P*Q+R;g[u+12>>2]=0.0;t=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;Yb[c[(c[t>>2]|0)+16>>2]&127](t,u+16|0,u,e);f=f+1|0;if((f|0)>=(ob[c[(c[d>>2]|0)+100>>2]&127](d)|0))break a}}if((c[r+28>>2]|0)>0){q=0;do{f=c[r+36>>2]|0;s=c[f+(q*36|0)+4>>2]|0;b:do if((s|0)!=0?(t=c[f+(q*36|0)+12>>2]|0,(s|0)>0):0){m=0;n=c[t+(s+-1<<2)>>2]|0;j=0;h=0;f=0;k=t;while(1){o=c[k+(m<<2)>>2]|0;k=c[r+16>>2]|0;j=(g[l>>2]=(c[l>>2]=j,+g[l>>2])+ +g[k+(o<<4)>>2],c[l>>2]|0);f=(g[l>>2]=(c[l>>2]=f,+g[l>>2])+ +g[k+(o<<4)+4>>2],c[l>>2]|0);h=(g[l>>2]=(c[l>>2]=h,+g[l>>2])+ +g[k+(o<<4)+8>>2],c[l>>2]|0);k=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;p=c[(c[k>>2]|0)+16>>2]|0;S=c[r+16>>2]|0;P=+g[S+(n<<4)>>2];D=+g[b>>2];N=+g[S+(n<<4)+4>>2];E=+g[b+4>>2];L=+g[S+(n<<4)+8>>2];F=+g[b+8>>2];H=+g[b+16>>2];I=+g[b+20>>2];J=+g[b+24>>2];M=+g[b+32>>2];O=+g[b+36>>2];Q=+g[b+40>>2];G=+g[b+48>>2];K=+g[b+52>>2];R=+g[b+56>>2];g[u+144>>2]=P*D+N*E+L*F+G;g[u+144+4>>2]=P*H+N*I+L*J+K;g[u+144+8>>2]=P*M+N*O+L*Q+R;g[u+144+12>>2]=0.0;L=+g[S+(o<<4)>>2];N=+g[S+(o<<4)+4>>2];P=+g[S+(o<<4)+8>>2];g[u+128>>2]=L*D+N*E+P*F+G;g[u+128+4>>2]=L*H+N*I+P*J+K;g[u+128+8>>2]=L*M+N*O+P*Q+R;g[u+128+12>>2]=0.0;Yb[p&127](k,u+144|0,u+128|0,e);k=m+1|0;p=c[r+36>>2]|0;if((k|0)>=(c[p+(q*36|0)+4>>2]|0))break b;m=k;n=o;k=c[p+(q*36|0)+12>>2]|0}}else{j=0;h=0;f=0}while(0);S=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;if((ob[c[(c[S>>2]|0)+56>>2]&127](S)|0)&16384|0){O=1.0/+(s|0)*(c[l>>2]=h,+g[l>>2]);L=1.0/+(s|0)*(c[l>>2]=f,+g[l>>2]);I=1.0/+(s|0)*(c[l>>2]=j,+g[l>>2]);c[u+144>>2]=1065353216;c[u+144+4>>2]=1065353216;c[u+144+8>>2]=0;g[u+144+12>>2]=0.0;S=c[r+36>>2]|0;J=+g[S+(q*36|0)+20>>2];M=+g[S+(q*36|0)+24>>2];P=+g[S+(q*36|0)+28>>2];S=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;s=c[(c[S>>2]|0)+16>>2]|0;A=+g[b>>2];B=+g[b+4>>2];C=+g[b+8>>2];E=+g[b+16>>2];F=+g[b+20>>2];G=+g[b+24>>2];K=+g[b+32>>2];N=+g[b+36>>2];Q=+g[b+40>>2];D=+g[b+48>>2];H=+g[b+52>>2];R=+g[b+56>>2];g[u+128>>2]=I*A+L*B+O*C+D;g[u+128+4>>2]=I*E+L*F+O*G+H;g[u+128+8>>2]=I*K+L*N+O*Q+R;g[u+128+12>>2]=0.0;g[u+16>>2]=(I+J)*A+(L+M)*B+(O+P)*C+D;g[u+16+4>>2]=(I+J)*E+(L+M)*F+(O+P)*G+H;g[u+16+8>>2]=(I+J)*K+(L+M)*N+(O+P)*Q+R;g[u+16+12>>2]=0.0;Yb[s&127](S,u+128|0,u+16|0,u+144|0)}q=q+1|0}while((q|0)<(c[r+28>>2]|0))}}while(0);f=c[d+4>>2]|0;if((f+-21|0)>>>0<9){c[u+144>>2]=1566444395;c[u+144+4>>2]=1566444395;c[u+144+8>>2]=1566444395;g[u+144+12>>2]=0.0;c[u+128>>2]=-581039253;c[u+128+4>>2]=-581039253;c[u+128+8>>2]=-581039253;g[u+128+12>>2]=0.0;f=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;c[u+16>>2]=5816;c[u+16+4>>2]=5840;c[u+16+8>>2]=f;c[u+16+12>>2]=c[e>>2];c[u+16+12+4>>2]=c[e+4>>2];c[u+16+12+8>>2]=c[e+8>>2];c[u+16+12+12>>2]=c[e+12>>2];c[u+16+28>>2]=c[b>>2];c[u+16+28+4>>2]=c[b+4>>2];c[u+16+28+8>>2]=c[b+8>>2];c[u+16+28+12>>2]=c[b+12>>2];c[u+16+44>>2]=c[b+16>>2];c[u+16+44+4>>2]=c[b+16+4>>2];c[u+16+44+8>>2]=c[b+16+8>>2];c[u+16+44+12>>2]=c[b+16+12>>2];c[u+16+60>>2]=c[b+32>>2];c[u+16+60+4>>2]=c[b+32+4>>2];c[u+16+60+8>>2]=c[b+32+8>>2];c[u+16+60+12>>2]=c[b+32+12>>2];c[u+16+76>>2]=c[b+48>>2];c[u+16+76+4>>2]=c[b+48+4>>2];c[u+16+76+8>>2]=c[b+48+8>>2];c[u+16+76+12>>2]=c[b+48+12>>2];Yb[c[(c[d>>2]|0)+64>>2]&127](d,u+16|0,u+128|0,u+144|0);f=c[d+4>>2]|0}if((f|0)!=3){i=u;return}c[u+144>>2]=1566444395;c[u+144+4>>2]=1566444395;c[u+144+8>>2]=1566444395;g[u+144+12>>2]=0.0;c[u+128>>2]=-581039253;c[u+128+4>>2]=-581039253;c[u+128+8>>2]=-581039253;g[u+128+12>>2]=0.0;S=ob[c[(c[a>>2]|0)+20>>2]&127](a)|0;c[u+16>>2]=5816;c[u+16+4>>2]=5840;c[u+16+8>>2]=S;c[u+16+12>>2]=c[e>>2];c[u+16+12+4>>2]=c[e+4>>2];c[u+16+12+8>>2]=c[e+8>>2];c[u+16+12+12>>2]=c[e+12>>2];c[u+16+28>>2]=c[b>>2];c[u+16+28+4>>2]=c[b+4>>2];c[u+16+28+8>>2]=c[b+8>>2];c[u+16+28+12>>2]=c[b+12>>2];c[u+16+44>>2]=c[b+16>>2];c[u+16+44+4>>2]=c[b+16+4>>2];c[u+16+44+8>>2]=c[b+16+8>>2];c[u+16+44+12>>2]=c[b+16+12>>2];c[u+16+60>>2]=c[b+32>>2];c[u+16+60+4>>2]=c[b+32+4>>2];c[u+16+60+8>>2]=c[b+32+8>>2];c[u+16+60+12>>2]=c[b+32+12>>2];c[u+16+76>>2]=c[b+48>>2];c[u+16+76+4>>2]=c[b+48+4>>2];c[u+16+76+8>>2]=c[b+48+8>>2];c[u+16+76+12>>2]=c[b+48+12>>2];S=c[d+96>>2]|0;Yb[c[(c[S>>2]|0)+8>>2]&127](S,u+16+4|0,u+128|0,u+144|0);i=u;return}}}function wc(d,f,h){d=d|0;f=f|0;h=h|0;var j=0,k=0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0,r=0,s=0,t=0.0,u=0.0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0,B=0,C=0.0,D=0.0,E=0.0,F=0,G=0,H=0,I=0,J=0,K=0,L=0.0,M=0.0,N=0.0;K=i;i=i+96|0;H=c[d+56>>2]|0;if((h-f|0)==1){if(!(a[d+60>>0]|0)){q=(c[d+96>>2]|0)+(H<<6)|0;r=(c[d+76>>2]|0)+(f<<6)|0;s=q+64|0;do{c[q>>2]=c[r>>2];q=q+4|0;r=r+4|0}while((q|0)<(s|0))}else{J=(c[d+136>>2]|0)+(H<<4)|0;I=(c[d+116>>2]|0)+(f<<4)|0;c[J>>2]=c[I>>2];c[J+4>>2]=c[I+4>>2];c[J+8>>2]=c[I+8>>2];c[J+12>>2]=c[I+12>>2]}c[d+56>>2]=(c[d+56>>2]|0)+1;i=K;return}if((h|0)>(f|0)){n=(a[d+60>>0]|0)==0;if(n){k=c[d+76>>2]|0;j=f;m=0.0;o=0.0;l=0.0;do{m=m+(+g[k+(j<<6)+16>>2]+ +g[k+(j<<6)>>2])*.5;l=l+(+g[k+(j<<6)+20>>2]+ +g[k+(j<<6)+4>>2])*.5;o=o+(+g[k+(j<<6)+24>>2]+ +g[k+(j<<6)+8>>2])*.5;j=j+1|0}while((j|0)!=(h|0))}else{k=c[d+116>>2]|0;p=+g[d+36>>2];t=+g[d+40>>2];u=+g[d+44>>2];x=+g[d+4>>2];y=+g[d+8>>2];z=+g[d+12>>2];j=f;m=0.0;o=0.0;l=0.0;do{m=m+(+(e[k+(j<<4)+6>>1]|0)/p+x+(+(e[k+(j<<4)>>1]|0)/p+x))*.5;l=l+(+(e[k+(j<<4)+8>>1]|0)/t+y+(+(e[k+(j<<4)+2>>1]|0)/t+y))*.5;o=o+(+(e[k+(j<<4)+10>>1]|0)/u+z+(+(e[k+(j<<4)+4>>1]|0)/u+z))*.5;j=j+1|0}while((j|0)!=(h|0))}C=1.0/+(h-f|0);E=C*m;D=C*l;C=C*o;if(n){k=c[d+76>>2]|0;j=f;p=0.0;o=0.0;l=0.0;do{x=(+g[k+(j<<6)+16>>2]+ +g[k+(j<<6)>>2])*.5-E;y=(+g[k+(j<<6)+20>>2]+ +g[k+(j<<6)+4>>2])*.5-D;z=(+g[k+(j<<6)+24>>2]+ +g[k+(j<<6)+8>>2])*.5-C;p=p+x*x;l=l+y*y;o=o+z*z;j=j+1|0}while((j|0)!=(h|0));m=+(h-f|0)}else{k=c[d+116>>2]|0;m=+g[d+36>>2];t=+g[d+40>>2];u=+g[d+44>>2];x=+g[d+4>>2];y=+g[d+8>>2];z=+g[d+12>>2];j=f;p=0.0;o=0.0;l=0.0;do{N=(+(e[k+(j<<4)+6>>1]|0)/m+x+(+(e[k+(j<<4)>>1]|0)/m+x))*.5-E;M=(+(e[k+(j<<4)+8>>1]|0)/t+y+(+(e[k+(j<<4)+2>>1]|0)/t+y))*.5-D;L=(+(e[k+(j<<4)+10>>1]|0)/u+z+(+(e[k+(j<<4)+4>>1]|0)/u+z))*.5-C;p=p+N*N;l=l+M*M;o=o+L*L;j=j+1|0}while((j|0)!=(h|0));m=+(h-f|0)}}else{p=0.0;o=0.0;l=0.0;m=+(h-f|0)}N=1.0/(m+-1.0);M=N*p;L=N*l;N=N*o;w=M<L?(L<N?2:1):M<N?2:0;c[K+16>>2]=0;c[K+16+4>>2]=0;c[K+16+8>>2]=0;c[K+16+12>>2]=0;if((h|0)>(f|0)){if(!(a[d+60>>0]|0)){k=c[d+76>>2]|0;j=f;o=0.0;m=0.0;l=0.0;do{o=(+g[k+(j<<6)+16>>2]+ +g[k+(j<<6)>>2])*.5+o;m=(+g[k+(j<<6)+20>>2]+ +g[k+(j<<6)+4>>2])*.5+m;l=(+g[k+(j<<6)+24>>2]+ +g[k+(j<<6)+8>>2])*.5+l;j=j+1|0}while((j|0)!=(h|0))}else{k=c[d+116>>2]|0;p=+g[d+36>>2];t=+g[d+40>>2];u=+g[d+44>>2];x=+g[d+4>>2];y=+g[d+8>>2];z=+g[d+12>>2];j=f;o=0.0;m=0.0;l=0.0;do{o=(+(e[k+(j<<4)+6>>1]|0)/p+x+(+(e[k+(j<<4)>>1]|0)/p+x))*.5+o;m=(+(e[k+(j<<4)+8>>1]|0)/t+y+(+(e[k+(j<<4)+2>>1]|0)/t+y))*.5+m;l=(+(e[k+(j<<4)+10>>1]|0)/u+z+(+(e[k+(j<<4)+4>>1]|0)/u+z))*.5+l;j=j+1|0}while((j|0)!=(h|0))}g[K+16>>2]=o;g[K+16+4>>2]=m;g[K+16+8>>2]=l;j=K+16|0}else{j=K+16|0;o=0.0;m=0.0;l=0.0}g[j>>2]=1.0/+(h-f|0)*o;g[K+16+4>>2]=1.0/+(h-f|0)*m;g[K+16+8>>2]=1.0/+(h-f|0)*l;x=+g[K+16+(w<<2)>>2];if((h|0)>(f|0)){j=f;v=f;do{k=(a[d+60>>0]|0)==0;if(k){G=c[d+76>>2]|0;l=+g[G+(v<<6)>>2];m=+g[G+(v<<6)+16>>2];o=+g[G+(v<<6)+4>>2];p=+g[G+(v<<6)+20>>2];t=+g[G+(v<<6)+8>>2];u=+g[G+(v<<6)+24>>2]}else{G=c[d+116>>2]|0;o=+g[d+36>>2];t=+g[d+40>>2];N=+g[d+44>>2];m=+g[d+4>>2];p=+g[d+8>>2];u=+g[d+12>>2];l=+(e[G+(v<<4)>>1]|0)/o+m;m=+(e[G+(v<<4)+6>>1]|0)/o+m;o=+(e[G+(v<<4)+2>>1]|0)/t+p;p=+(e[G+(v<<4)+8>>1]|0)/t+p;t=+(e[G+(v<<4)+4>>1]|0)/N+u;u=+(e[G+(v<<4)+10>>1]|0)/N+u}g[K>>2]=(m+l)*.5;g[K+4>>2]=(p+o)*.5;g[K+8>>2]=(u+t)*.5;g[K+12>>2]=0.0;if(+g[K+(w<<2)>>2]>x){if(k){k=c[d+76>>2]|0;n=k+(v<<6)|0;q=K+32|0;r=n;s=q+64|0;do{c[q>>2]=c[r>>2];q=q+4|0;r=r+4|0}while((q|0)<(s|0));q=n;r=k+(j<<6)|0;s=q+64|0;do{c[q>>2]=c[r>>2];q=q+4|0;r=r+4|0}while((q|0)<(s|0));q=(c[d+76>>2]|0)+(j<<6)|0;r=K+32|0;s=q+64|0;do{c[q>>2]=c[r>>2];q=q+4|0;r=r+4|0}while((q|0)<(s|0))}else{F=c[d+116>>2]|0;G=F+(v<<4)|0;c[K+32>>2]=c[G>>2];c[K+32+4>>2]=c[G+4>>2];c[K+32+8>>2]=c[G+8>>2];c[K+32+12>>2]=c[G+12>>2];F=F+(j<<4)|0;c[G>>2]=c[F>>2];c[G+4>>2]=c[F+4>>2];c[G+8>>2]=c[F+8>>2];c[G+12>>2]=c[F+12>>2];G=(c[d+116>>2]|0)+(j<<4)|0;c[G>>2]=c[K+32>>2];c[G+4>>2]=c[K+32+4>>2];c[G+8>>2]=c[K+32+8>>2];c[G+12>>2]=c[K+32+12>>2]}j=j+1|0}v=v+1|0}while((v|0)!=(h|0))}else j=f;if(!((j|0)>(((h-f|0)/3|0)+f|0)?(j|0)<(h+-1-((h-f|0)/3|0)|0):0))j=(h-f>>1)+f|0;G=c[d+56>>2]|0;if(!(a[d+60>>0]|0)){F=(c[d+96>>2]|0)+(G<<6)|0;c[F>>2]=c[d+20>>2];c[F+4>>2]=c[d+20+4>>2];c[F+8>>2]=c[d+20+8>>2];c[F+12>>2]=c[d+20+12>>2]}else{F=c[d+136>>2]|0;M=(+g[d+24>>2]-+g[d+8>>2])*+g[d+40>>2];N=(+g[d+28>>2]-+g[d+12>>2])*+g[d+44>>2];b[F+(G<<4)>>1]=~~((+g[d+20>>2]-+g[d+4>>2])*+g[d+36>>2])&65534;b[F+(G<<4)+2>>1]=~~M&65534;b[F+(G<<4)+4>>1]=~~N&65534}k=c[d+56>>2]|0;if(!(a[d+60>>0]|0)){F=(c[d+96>>2]|0)+(k<<6)+16|0;c[F>>2]=c[d+4>>2];c[F+4>>2]=c[d+4+4>>2];c[F+8>>2]=c[d+4+8>>2];c[F+12>>2]=c[d+4+12>>2]}else{F=c[d+136>>2]|0;L=+g[d+4>>2];M=+g[d+8>>2];N=+g[d+12>>2];M=(M-M)*+g[d+40>>2];N=(N-N)*+g[d+44>>2];b[F+(k<<4)+6>>1]=~~((L-L)*+g[d+36>>2]+1.0)&65535|1;b[F+(k<<4)+8>>1]=~~(M+1.0)&65535|1;b[F+(k<<4)+10>>1]=~~(N+1.0)&65535|1}F=c[d+56>>2]|0;if((h|0)>(f|0)){B=a[d+60>>0]|0;A=f;do{if(!(B<<24>>24)){k=c[d+76>>2]|0;m=+g[k+(A<<6)>>2];u=+g[k+(A<<6)+4>>2];y=+g[k+(A<<6)+8>>2];p=+g[k+(A<<6)+12>>2];l=+g[k+(A<<6)+16>>2];x=+g[k+(A<<6)+20>>2];o=+g[k+(A<<6)+24>>2];t=+g[k+(A<<6)+28>>2];k=c[d+96>>2]|0;if(m<+g[k+(F<<6)>>2])g[k+(F<<6)>>2]=m;if(u<+g[k+(F<<6)+4>>2])g[k+(F<<6)+4>>2]=u;if(y<+g[k+(F<<6)+8>>2])g[k+(F<<6)+8>>2]=y;if(p<+g[k+(F<<6)+12>>2])g[k+(F<<6)+12>>2]=p;if(+g[k+(F<<6)+16>>2]<l)g[k+(F<<6)+16>>2]=l;if(+g[k+(F<<6)+20>>2]<x)g[k+(F<<6)+20>>2]=x;if(+g[k+(F<<6)+24>>2]<o)g[k+(F<<6)+24>>2]=o;if(+g[k+(F<<6)+28>>2]<t)g[k+(F<<6)+28>>2]=t}else{r=c[d+116>>2]|0;p=+g[d+36>>2];E=+g[d+40>>2];y=+g[d+44>>2];t=+g[d+4>>2];L=+g[d+8>>2];z=+g[d+12>>2];u=+g[d+4>>2];M=+g[d+8>>2];C=+g[d+12>>2];x=+g[d+36>>2];N=+g[d+40>>2];D=+g[d+44>>2];s=~~((+(e[r+(A<<4)>>1]|0)/p+t-u)*x)&65534;k=~~((+(e[r+(A<<4)+4>>1]|0)/y+z-C)*D)&65534;q=~~((+(e[r+(A<<4)+2>>1]|0)/E+L-M)*N)&65534;v=(~~((+(e[r+(A<<4)+6>>1]|0)/p+t-u)*x+1.0)&65535|1)&65535;n=(~~((+(e[r+(A<<4)+10>>1]|0)/y+z-C)*D+1.0)&65535|1)&65535;r=(~~((+(e[r+(A<<4)+8>>1]|0)/E+L-M)*N+1.0)&65535|1)&65535;w=c[d+136>>2]|0;if((e[w+(F<<4)>>1]|0)>(s&65535))b[w+(F<<4)>>1]=s;if((e[w+(F<<4)+6>>1]|0)<(v&65535))b[w+(F<<4)+6>>1]=v;if((e[w+(F<<4)+2>>1]|0)>(q&65535))b[w+(F<<4)+2>>1]=q;if((e[w+(F<<4)+8>>1]|0)<(r&65535))b[w+(F<<4)+8>>1]=r;if((e[w+(F<<4)+4>>1]|0)>(k&65535))b[w+(F<<4)+4>>1]=k;if((e[w+(F<<4)+10>>1]|0)<(n&65535))b[w+(F<<4)+10>>1]=n}A=A+1|0}while((A|0)!=(h|0))}c[d+56>>2]=F+1;wc(d,f,j);A=c[d+56>>2]|0;wc(d,j,h);w=(c[d+56>>2]|0)-H|0;j=a[d+60>>0]|0;if(j<<24>>24!=0&(w<<4|0)>2048){s=c[d+136>>2]|0;q=c[s+(F+1<<4)+12>>2]|0;q=(q|0)>-1?1:0-q|0;v=c[s+(A<<4)+12>>2]|0;v=(v|0)>-1?1:0-v|0;if((q<<4|0)<2049){r=c[d+152>>2]|0;if((r|0)==(c[d+156>>2]|0)?(I=r|0?r<<1:1,(r|0)<(I|0)):0){if(!I){j=0;n=r}else{c[6324]=(c[6324]|0)+1;j=ic(I<<5|19)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}n=c[d+152>>2]|0}if((n|0)>0){k=0;do{H=j+(k<<5)|0;h=(c[d+160>>2]|0)+(k<<5)|0;c[H>>2]=c[h>>2];c[H+4>>2]=c[h+4>>2];c[H+8>>2]=c[h+8>>2];c[H+12>>2]=c[h+12>>2];c[H+16>>2]=c[h+16>>2];c[H+20>>2]=c[h+20>>2];c[H+24>>2]=c[h+24>>2];c[H+28>>2]=c[h+28>>2];k=k+1|0}while((k|0)!=(n|0))}k=c[d+160>>2]|0;if(k|0){if(a[d+164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=j;c[d+156>>2]=I;j=c[d+152>>2]|0}else j=r;c[d+152>>2]=j+1;I=(c[d+160>>2]|0)+(r<<5)|0;c[I>>2]=c[K+32>>2];c[I+4>>2]=c[K+32+4>>2];c[I+8>>2]=c[K+32+8>>2];c[I+12>>2]=c[K+32+12>>2];c[I+16>>2]=c[K+32+16>>2];c[I+20>>2]=c[K+32+20>>2];c[I+24>>2]=c[K+32+24>>2];c[I+28>>2]=c[K+32+28>>2];I=c[d+160>>2]|0;b[I+(r<<5)>>1]=b[s+(F+1<<4)>>1]|0;b[I+(r<<5)+2>>1]=b[s+(F+1<<4)+2>>1]|0;b[I+(r<<5)+4>>1]=b[s+(F+1<<4)+4>>1]|0;b[I+(r<<5)+6>>1]=b[s+(F+1<<4)+6>>1]|0;b[I+(r<<5)+8>>1]=b[s+(F+1<<4)+8>>1]|0;b[I+(r<<5)+10>>1]=b[s+(F+1<<4)+10>>1]|0;c[I+(r<<5)+12>>2]=F+1;c[I+(r<<5)+16>>2]=q}if((v<<4|0)<2049){q=c[d+152>>2]|0;if((q|0)==(c[d+156>>2]|0)?(J=q|0?q<<1:1,(q|0)<(J|0)):0){if(!J){j=0;n=q}else{c[6324]=(c[6324]|0)+1;j=ic(J<<5|19)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}n=c[d+152>>2]|0}if((n|0)>0){k=0;do{I=j+(k<<5)|0;H=(c[d+160>>2]|0)+(k<<5)|0;c[I>>2]=c[H>>2];c[I+4>>2]=c[H+4>>2];c[I+8>>2]=c[H+8>>2];c[I+12>>2]=c[H+12>>2];c[I+16>>2]=c[H+16>>2];c[I+20>>2]=c[H+20>>2];c[I+24>>2]=c[H+24>>2];c[I+28>>2]=c[H+28>>2];k=k+1|0}while((k|0)!=(n|0))}k=c[d+160>>2]|0;if(k|0){if(a[d+164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=j;c[d+156>>2]=J;j=c[d+152>>2]|0}else j=q;c[d+152>>2]=j+1;j=(c[d+160>>2]|0)+(q<<5)|0;c[j>>2]=c[K+32>>2];c[j+4>>2]=c[K+32+4>>2];c[j+8>>2]=c[K+32+8>>2];c[j+12>>2]=c[K+32+12>>2];c[j+16>>2]=c[K+32+16>>2];c[j+20>>2]=c[K+32+20>>2];c[j+24>>2]=c[K+32+24>>2];c[j+28>>2]=c[K+32+28>>2];j=c[d+160>>2]|0;b[j+(q<<5)>>1]=b[s+(A<<4)>>1]|0;b[j+(q<<5)+2>>1]=b[s+(A<<4)+2>>1]|0;b[j+(q<<5)+4>>1]=b[s+(A<<4)+4>>1]|0;b[j+(q<<5)+6>>1]=b[s+(A<<4)+6>>1]|0;b[j+(q<<5)+8>>1]=b[s+(A<<4)+8>>1]|0;b[j+(q<<5)+10>>1]=b[s+(A<<4)+10>>1]|0;c[j+(q<<5)+12>>2]=A;c[j+(q<<5)+16>>2]=v;j=d+152|0}else j=d+152|0;c[d+168>>2]=c[j>>2];j=a[d+60>>0]|0}if(!(j<<24>>24)){c[(c[d+96>>2]|0)+(G<<6)+32>>2]=w;i=K;return}else{c[(c[d+136>>2]|0)+(G<<4)+12>>2]=0-w;i=K;return}}function xc(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0;ea=i;i=i+176|0;ba=c[d+4>>2]|0;ca=c[e+4>>2]|0;r=c[ba+68>>2]|0;s=c[ca+68>>2]|0;if(!((r|0)!=0&(s|0)!=0)){Cc(b,d,e,f,h);i=ea;return}if((c[ba+72>>2]|0)==(c[b+108>>2]|0)?(c[ca+72>>2]|0)==(c[b+112>>2]|0):0)aa=b+84|0;else{j=c[b+84>>2]|0;l=c[j+8>>2]|0;if((l|0)>0){k=0;do{m=c[(c[j+16>>2]|0)+(k*12|0)+8>>2]|0;if(m|0){kb[c[c[m>>2]>>2]&255](m);aa=c[b+4>>2]|0;mb[c[(c[aa>>2]|0)+60>>2]&127](aa,m)}k=k+1|0}while((k|0)!=(l|0));j=c[b+84>>2]|0}Qh(j);c[b+108>>2]=c[ba+72>>2];c[b+112>>2]=c[ca+72>>2];aa=b+84|0}a[ea+128+16>>0]=1;q=ea+128+12|0;c[q>>2]=0;c[ea+128+4>>2]=0;c[ea+128+8>>2]=0;p=c[aa>>2]|0;j=c[p+8>>2]|0;if((j|0)>0){o=0;do{k=c[(c[p+16>>2]|0)+(o*12|0)+8>>2]|0;if(k){mb[c[(c[k>>2]|0)+16>>2]&127](k,ea+128|0);j=c[ea+128+4>>2]|0;if((j|0)>0){n=0;do{m=c[(c[q>>2]|0)+(n<<2)>>2]|0;if(c[m+780>>2]|0){c[h+4>>2]=m;k=c[m+772>>2]|0;l=c[(c[h+8>>2]|0)+8>>2]|0;j=c[(c[h+12>>2]|0)+8>>2]|0;if((k|0)==(l|0))Te(m,k+4|0,j+4|0);else Te(m,j+4|0,l+4|0);c[h+4>>2]=0;j=c[ea+128+4>>2]|0}n=n+1|0}while((n|0)<(j|0))}if((j|0)<0){if((c[ea+128+8>>2]|0)<0){k=c[q>>2]|0;if(k|0){if(a[ea+128+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[q>>2]=0}a[ea+128+16>>0]=1;c[q>>2]=0;c[ea+128+8>>2]=0}do{c[(c[q>>2]|0)+(j<<2)>>2]=0;j=j+1|0}while((j|0)!=0)}c[ea+128+4>>2]=0;j=c[p+8>>2]|0}o=o+1|0}while((o|0)<(j|0));j=c[q>>2]|0;if(j|0){if(a[ea+128+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[q>>2]=0}}q=c[b+4>>2]|0;k=c[aa>>2]|0;l=c[b+72>>2]|0;c[ea+128>>2]=9136;c[ea+128+4>>2]=0;c[ea+128+8>>2]=d;c[ea+128+12>>2]=e;c[ea+128+16>>2]=q;c[ea+128+20>>2]=f;c[ea+128+24>>2]=h;c[ea+128+28>>2]=k;c[ea+128+32>>2]=l;l=c[d+12>>2]|0;C=+g[l>>2];D=+g[l+16>>2];E=+g[l+32>>2];G=+g[l+4>>2];H=+g[l+20>>2];I=+g[l+36>>2];J=+g[l+8>>2];K=+g[l+24>>2];L=+g[l+40>>2];M=-+g[l+48>>2];N=-+g[l+52>>2];O=-+g[l+56>>2];l=c[e+12>>2]|0;P=+g[l>>2];Q=+g[l+16>>2];R=+g[l+32>>2];S=+g[l+4>>2];T=+g[l+20>>2];U=+g[l+36>>2];V=+g[l+8>>2];W=+g[l+24>>2];X=+g[l+40>>2];Y=+g[l+48>>2];Z=+g[l+52>>2];_=+g[l+56>>2];l=c[r>>2]|0;k=c[s>>2]|0;if((l|0)!=0&(k|0)!=0){c[6324]=(c[6324]|0)+1;j=ic(1043)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}c[j>>2]=l;c[j+4>>2]=k;t=+F(+(C*P+D*Q+E*R));u=+F(+(C*S+D*T+E*U));v=+F(+(C*V+D*W+E*X));w=+F(+(G*P+H*Q+I*R));x=+F(+(G*S+H*T+I*U));y=+F(+(G*V+H*W+I*X));z=+F(+(J*P+K*Q+L*R));A=+F(+(J*S+K*T+L*U));B=+F(+(J*V+K*W+L*X));r=1;m=124;l=128;o=128;while(1){h=r+-1|0;q=c[j+(h<<3)>>2]|0;f=c[j+(h<<3)+4>>2]|0;pa=+g[f+16>>2];oa=+g[f>>2];na=+g[f+20>>2];ma=+g[f+4>>2];la=+g[f+24>>2];fa=+g[f+8>>2];ka=C*M+D*N+E*O+(C*Y+D*Z+E*_)+((C*P+D*Q+E*R)*(pa+oa)*.5+(C*S+D*T+E*U)*(na+ma)*.5+(C*V+D*W+E*X)*(la+fa)*.5);ia=G*M+H*N+I*O+(G*Y+H*Z+I*_)+((G*P+H*Q+I*R)*(pa+oa)*.5+(G*S+H*T+I*U)*(na+ma)*.5+(G*V+H*W+I*X)*(la+fa)*.5);ga=J*M+K*N+L*O+(J*Y+K*Z+L*_)+((J*P+K*Q+L*R)*(pa+oa)*.5+(J*S+K*T+L*U)*(na+ma)*.5+(J*V+K*W+L*X)*(la+fa)*.5);ja=((pa-oa)*.5+0.0)*t+((na-ma)*.5+0.0)*u+((la-fa)*.5+0.0)*v;ha=((pa-oa)*.5+0.0)*w+((na-ma)*.5+0.0)*x+((la-fa)*.5+0.0)*y;fa=((pa-oa)*.5+0.0)*z+((na-ma)*.5+0.0)*A+((la-fa)*.5+0.0)*B;do if(((((+g[q>>2]<=ja+ka?+g[q+16>>2]>=ka-ja:0)?+g[q+4>>2]<=ia+ha:0)?+g[q+20>>2]>=ia-ha:0)?+g[q+8>>2]<=ga+fa:0)?+g[q+24>>2]>=ga-fa:0){if((h|0)>(m|0)){m=o<<1;do if((o|0)<(m|0)&(l|0)<(m|0)){do if(!o){k=0;$=54}else{c[6324]=(c[6324]|0)+1;k=ic((o<<4|3)+16|0)|0;if(!k)k=0;else{c[(k+4+15&-16)+-4>>2]=k;k=k+4+15&-16}if((o|0)>0)l=0;else{$=54;break}do{n=j+(l<<3)|0;p=c[n+4>>2]|0;s=k+(l<<3)|0;c[s>>2]=c[n>>2];c[s+4>>2]=p;l=l+1|0}while((l|0)!=(o|0))}while(0);if(($|0)==54){$=0;if(!j){l=m;j=k;break}}c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);l=m;j=k}while(0);p=m+-4|0;k=m}else{p=m;k=o}m=(c[f+40>>2]|0)!=0;if(!(c[q+40>>2]|0))if(m){n=c[f+36>>2]|0;c[j+(h<<3)>>2]=q;c[j+(h<<3)+4>>2]=n;n=c[f+40>>2]|0;c[j+(r<<3)>>2]=q;c[j+(r<<3)+4>>2]=n;n=r+1|0;m=p;break}else{Ub[c[(c[ea+128>>2]|0)+8>>2]&127](ea+128|0,q,f);n=h;m=p;break}else{n=j+(h<<3)|0;o=c[q+36>>2]|0;if(m){m=c[f+36>>2]|0;c[n>>2]=o;c[j+(h<<3)+4>>2]=m;m=r+1|0;n=c[f+36>>2]|0;c[j+(r<<3)>>2]=c[q+40>>2];c[j+(r<<3)+4>>2]=n;n=r+2|0;s=c[f+40>>2]|0;c[j+(m<<3)>>2]=c[q+36>>2];c[j+(m<<3)+4>>2]=s;m=c[f+40>>2]|0;c[j+(n<<3)>>2]=c[q+40>>2];c[j+(n<<3)+4>>2]=m;n=r+3|0;m=p;break}else{c[n>>2]=o;c[j+(h<<3)+4>>2]=f;c[j+(r<<3)>>2]=c[q+40>>2];c[j+(r<<3)+4>>2]=f;n=r+1|0;m=p;break}}}else{n=h;k=o}while(0);if(!n)break;else{r=n;o=k}}if(j|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}}p=c[aa>>2]|0;if((c[p+8>>2]|0)>0){o=0;do{j=c[p+16>>2]|0;k=c[j+(o*12|0)+8>>2]|0;do if(k|0){$=c[j+(o*12|0)>>2]|0;s=c[ba+28>>2]|0;r=c[s+($*80|0)+64>>2]|0;h=c[d+12>>2]|0;pa=+g[h>>2];Q=+g[h+4>>2];P=+g[h+8>>2];ma=+g[h+16>>2];ka=+g[h+20>>2];ia=+g[h+24>>2];la=+g[h+32>>2];ha=+g[h+36>>2];V=+g[h+40>>2];ga=+g[s+($*80|0)>>2];fa=+g[s+($*80|0)+16>>2];_=+g[s+($*80|0)+32>>2];Z=+g[s+($*80|0)+4>>2];Y=+g[s+($*80|0)+20>>2];X=+g[s+($*80|0)+36>>2];ja=+g[s+($*80|0)+8>>2];W=+g[s+($*80|0)+24>>2];U=+g[s+($*80|0)+40>>2];oa=+g[s+($*80|0)+48>>2];na=+g[s+($*80|0)+52>>2];R=+g[s+($*80|0)+56>>2];T=+g[h+48>>2]+(pa*oa+Q*na+P*R);S=+g[h+52>>2]+(ma*oa+ka*na+ia*R);R=+g[h+56>>2]+(la*oa+ha*na+V*R);g[ea>>2]=pa*ga+Q*fa+P*_;g[ea+4>>2]=pa*Z+Q*Y+P*X;g[ea+8>>2]=pa*ja+Q*W+P*U;g[ea+12>>2]=0.0;g[ea+16>>2]=ma*ga+ka*fa+ia*_;g[ea+20>>2]=ma*Z+ka*Y+ia*X;g[ea+24>>2]=ma*ja+ka*W+ia*U;g[ea+28>>2]=0.0;g[ea+32>>2]=la*ga+ha*fa+V*_;g[ea+36>>2]=la*Z+ha*Y+V*X;g[ea+40>>2]=la*ja+ha*W+V*U;g[ea+44>>2]=0.0;g[ea+48>>2]=T;g[ea+52>>2]=S;g[ea+56>>2]=R;g[ea+60>>2]=0.0;Yb[c[(c[r>>2]|0)+8>>2]&127](r,ea,ea+112|0,ea+96|0);r=c[(c[p+16>>2]|0)+(o*12|0)+4>>2]|0;h=c[ca+28>>2]|0;$=c[h+(r*80|0)+64>>2]|0;s=c[e+12>>2]|0;R=+g[s>>2];S=+g[s+4>>2];T=+g[s+8>>2];U=+g[s+16>>2];V=+g[s+20>>2];W=+g[s+24>>2];ha=+g[s+32>>2];ja=+g[s+36>>2];la=+g[s+40>>2];X=+g[h+(r*80|0)>>2];Y=+g[h+(r*80|0)+16>>2];Z=+g[h+(r*80|0)+32>>2];_=+g[h+(r*80|0)+4>>2];fa=+g[h+(r*80|0)+20>>2];ga=+g[h+(r*80|0)+36>>2];ia=+g[h+(r*80|0)+8>>2];ka=+g[h+(r*80|0)+24>>2];ma=+g[h+(r*80|0)+40>>2];P=+g[h+(r*80|0)+48>>2];Q=+g[h+(r*80|0)+52>>2];pa=+g[h+(r*80|0)+56>>2];na=+g[s+48>>2]+(R*P+S*Q+T*pa);oa=+g[s+52>>2]+(U*P+V*Q+W*pa);pa=+g[s+56>>2]+(ha*P+ja*Q+la*pa);g[ea>>2]=R*X+S*Y+T*Z;g[ea+4>>2]=R*_+S*fa+T*ga;g[ea+8>>2]=R*ia+S*ka+T*ma;g[ea+12>>2]=0.0;g[ea+16>>2]=U*X+V*Y+W*Z;g[ea+20>>2]=U*_+V*fa+W*ga;g[ea+24>>2]=U*ia+V*ka+W*ma;g[ea+28>>2]=0.0;g[ea+32>>2]=ha*X+ja*Y+la*Z;g[ea+36>>2]=ha*_+ja*fa+la*ga;g[ea+40>>2]=ha*ia+ja*ka+la*ma;g[ea+44>>2]=0.0;g[ea+48>>2]=na;g[ea+52>>2]=oa;g[ea+56>>2]=pa;g[ea+60>>2]=0.0;Yb[c[(c[$>>2]|0)+8>>2]&127]($,ea,ea+80|0,ea+64|0);if(!(+g[ea+112>>2]>+g[ea+64>>2])?!(+g[ea+96>>2]<+g[ea+80>>2]):0)j=1;else j=0;if(!(!(+g[ea+112+8>>2]>+g[ea+64+8>>2])?!(+g[ea+96+8>>2]<+g[ea+80+8>>2]):0))j=0;if(!(+g[ea+112+4>>2]>+g[ea+64+4>>2])?!(+g[ea+96+4>>2]<+g[ea+80+4>>2]|j^1):0)break;kb[c[c[k>>2]>>2]&255](k);n=c[b+4>>2]|0;mb[c[(c[n>>2]|0)+60>>2]&127](n,k);n=c[p+16>>2]|0;m=c[n+(o*12|0)>>2]|0;n=c[n+(o*12|0)+4>>2]|0;k=c[b+92>>2]|0;if((k|0)==(c[b+96>>2]|0)?(da=k|0?k<<1:1,(k|0)<(da|0)):0){if(!da)j=0;else{c[6324]=(c[6324]|0)+1;j=ic((da*12|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}k=c[b+92>>2]|0}if((k|0)>0){l=0;do{$=j+(l*12|0)|0;s=(c[b+100>>2]|0)+(l*12|0)|0;c[$>>2]=c[s>>2];c[$+4>>2]=c[s+4>>2];c[$+8>>2]=c[s+8>>2];l=l+1|0}while((l|0)!=(k|0))}k=c[b+100>>2]|0;if(k|0){if(a[b+104>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[b+100>>2]=0}a[b+104>>0]=1;c[b+100>>2]=j;c[b+96>>2]=da;j=c[b+92>>2]|0}else j=k;$=c[b+100>>2]|0;c[$+(j*12|0)>>2]=m;c[$+(j*12|0)+4>>2]=n;c[$+(j*12|0)+8>>2]=0;c[b+92>>2]=(c[b+92>>2]|0)+1}while(0);o=o+1|0}while((o|0)<(c[p+8>>2]|0));k=b+100|0;l=b+92|0}else{k=b+100|0;l=b+92|0}if((c[l>>2]|0)>0){j=0;do{e=c[aa>>2]|0;da=c[k>>2]|0;yb[c[(c[e>>2]|0)+8>>2]&63](e,c[da+(j*12|0)>>2]|0,c[da+(j*12|0)+4>>2]|0)|0;j=j+1|0}while((j|0)<(c[l>>2]|0))}j=c[k>>2]|0;if(j|0){if(a[b+104>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[k>>2]=0}a[b+104>>0]=1;c[k>>2]=0;c[l>>2]=0;c[b+96>>2]=0;i=ea;return}function yc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0,s=0,t=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0;t=i;i=i+48|0;z=1.0/+g[a+112>>2];A=1.0/+g[a+116>>2];B=1.0/+g[a+120>>2];u=+g[a+52>>2];v=z*+g[d>>2]+u;o=+g[a+56>>2];j=A*+g[d+4>>2]+o;q=+g[a+60>>2];p=B*+g[d+8>>2]+q;u=z*+g[e>>2]+u;o=A*+g[e+4>>2]+o;q=B*+g[e+8>>2]+q;B=+g[a+20>>2];v=v<B?B:v;A=+g[a+24>>2];j=j<A?A:j;z=+g[a+28>>2];p=p<z?z:p;y=+g[a+36>>2];v=y<v?y:v;x=+g[a+40>>2];j=x<j?x:j;w=+g[a+44>>2];p=w<p?w:p;u=u<B?B:u;o=o<A?A:o;q=q<z?z:q;u=y<u?y:u;o=x<o?x:o;q=w<q?w:q;m=~~(v+(v<0.0?-.5:.5))+-1|0;h=~~(u+(u<0.0?-.5:.5))+1|0;n=~~(j+(j<0.0?-.5:.5))+-1|0;k=~~(o+(o<0.0?-.5:.5))+1|0;f=~~(p+(p<0.0?-.5:.5))+-1|0;d=~~(q+(q<0.0?-.5:.5))+1|0;l=(c[a+68>>2]|0)+-1|0;e=(c[a+72>>2]|0)+-1|0;switch(c[a+108>>2]|0){case 0:{e=(d|0)<(e|0)?d:e;d=(f|0)>0?f:0;l=(k|0)<(l|0)?k:l;n=(n|0)>0?n:0;break}case 1:{e=(d|0)<(e|0)?d:e;d=(f|0)>0?f:0;l=(h|0)<(l|0)?h:l;n=(m|0)>0?m:0;break}case 2:{e=(k|0)<(e|0)?k:e;d=(n|0)>0?n:0;l=(h|0)<(l|0)?h:l;n=(m|0)>0?m:0;break}default:{d=0;n=0}}if((d|0)>=(e|0)){i=t;return}r=(n|0)<(l|0);do if(r){k=(d&1|0)==0;m=d+1|0;q=+(d|0);f=n;while(1){h=c[a+104>>2]|0;do if(!((h&255)<<24>>24)){if(h&65280|0?(f+d&1|0)==0:0){s=16;break}if(!(k&(h&16711680|0)!=0)){j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,f,d);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(f|0)-+g[a+84>>2]*.5;p=q-+g[a+88>>2]*.5;g[t>>2]=j;g[t+4>>2]=o;g[t+8>>2]=p;g[t+12>>2]=0.0;break}case 1:{B=+(f|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=q-+g[a+88>>2]*.5;g[t>>2]=B;g[t+4>>2]=o;g[t+8>>2]=p;g[t+12>>2]=0.0;j=B;break}case 2:{B=+(f|0)-+g[a+84>>2]*.5;o=q-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t>>2]=B;g[t+4>>2]=o;g[t+8>>2]=p;g[t+12>>2]=0.0;j=B;break}default:{j=+g[t>>2];o=+g[t+4>>2];p=+g[t+8>>2]}}g[t>>2]=j*+g[a+112>>2];g[t+4>>2]=o*+g[a+116>>2];g[t+8>>2]=p*+g[a+120>>2];j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,f,m);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(f|0)-+g[a+84>>2]*.5;p=+(m|0)-+g[a+88>>2]*.5;g[t+16>>2]=j;g[t+20>>2]=o;g[t+24>>2]=p;g[t+28>>2]=0.0;break}case 1:{B=+(f|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=+(m|0)-+g[a+88>>2]*.5;g[t+16>>2]=B;g[t+20>>2]=o;g[t+24>>2]=p;g[t+28>>2]=0.0;j=B;break}case 2:{B=+(f|0)-+g[a+84>>2]*.5;o=+(m|0)-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t+16>>2]=B;g[t+20>>2]=o;g[t+24>>2]=p;g[t+28>>2]=0.0;j=B;break}default:{j=+g[t+16>>2];o=+g[t+20>>2];p=+g[t+24>>2]}}g[t+16>>2]=j*+g[a+112>>2];g[t+20>>2]=o*+g[a+116>>2];g[t+24>>2]=p*+g[a+120>>2];h=f+1|0;j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,h,d);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(h|0)-+g[a+84>>2]*.5;p=q-+g[a+88>>2]*.5;g[t+32>>2]=j;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;break}case 1:{B=+(h|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=q-+g[a+88>>2]*.5;g[t+32>>2]=B;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;j=B;break}case 2:{B=+(h|0)-+g[a+84>>2]*.5;o=q-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t+32>>2]=B;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;j=B;break}default:{j=+g[t+32>>2];o=+g[t+36>>2];p=+g[t+40>>2]}}g[t+32>>2]=j*+g[a+112>>2];g[t+36>>2]=o*+g[a+116>>2];g[t+40>>2]=p*+g[a+120>>2];Yb[c[(c[b>>2]|0)+8>>2]&127](b,t,f,d);j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,h,d);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(h|0)-+g[a+84>>2]*.5;p=q-+g[a+88>>2]*.5;g[t>>2]=j;g[t+4>>2]=o;g[t+8>>2]=p;g[t+12>>2]=0.0;break}case 1:{B=+(h|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=q-+g[a+88>>2]*.5;g[t>>2]=B;g[t+4>>2]=o;g[t+8>>2]=p;g[t+12>>2]=0.0;j=B;break}case 2:{B=+(h|0)-+g[a+84>>2]*.5;o=q-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t>>2]=B;g[t+4>>2]=o;g[t+8>>2]=p;g[t+12>>2]=0.0;j=B;break}default:{j=+g[t>>2];o=+g[t+4>>2];p=+g[t+8>>2]}}g[t>>2]=j*+g[a+112>>2];g[t+4>>2]=o*+g[a+116>>2];g[t+8>>2]=p*+g[a+120>>2];j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,h,m);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(h|0)-+g[a+84>>2]*.5;p=+(m|0)-+g[a+88>>2]*.5;g[t+32>>2]=j;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;break}case 1:{B=+(h|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=+(m|0)-+g[a+88>>2]*.5;g[t+32>>2]=B;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;j=B;break}case 2:{B=+(h|0)-+g[a+84>>2]*.5;o=+(m|0)-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t+32>>2]=B;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;j=B;break}default:{j=+g[t+32>>2];o=+g[t+36>>2];p=+g[t+40>>2]}}g[t+32>>2]=j*+g[a+112>>2];g[t+36>>2]=o*+g[a+116>>2];g[t+40>>2]=p*+g[a+120>>2];Yb[c[(c[b>>2]|0)+8>>2]&127](b,t,f,d);f=h}else s=16}else s=16;while(0);if((s|0)==16){s=0;j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,f,d);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(f|0)-+g[a+84>>2]*.5;p=q-+g[a+88>>2]*.5;g[t>>2]=j;g[t+4>>2]=o;g[t+8>>2]=p;g[t+12>>2]=0.0;break}case 1:{B=+(f|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=q-+g[a+88>>2]*.5;g[t>>2]=B;g[t+4>>2]=o;g[t+8>>2]=p;g[t+12>>2]=0.0;j=B;break}case 2:{B=+(f|0)-+g[a+84>>2]*.5;o=q-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t>>2]=B;g[t+4>>2]=o;g[t+8>>2]=p;g[t+12>>2]=0.0;j=B;break}default:{j=+g[t>>2];o=+g[t+4>>2];p=+g[t+8>>2]}}g[t>>2]=j*+g[a+112>>2];g[t+4>>2]=o*+g[a+116>>2];g[t+8>>2]=p*+g[a+120>>2];j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,f,m);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(f|0)-+g[a+84>>2]*.5;p=+(m|0)-+g[a+88>>2]*.5;g[t+16>>2]=j;g[t+20>>2]=o;g[t+24>>2]=p;g[t+28>>2]=0.0;break}case 1:{B=+(f|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=+(m|0)-+g[a+88>>2]*.5;g[t+16>>2]=B;g[t+20>>2]=o;g[t+24>>2]=p;g[t+28>>2]=0.0;j=B;break}case 2:{B=+(f|0)-+g[a+84>>2]*.5;o=+(m|0)-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t+16>>2]=B;g[t+20>>2]=o;g[t+24>>2]=p;g[t+28>>2]=0.0;j=B;break}default:{j=+g[t+16>>2];o=+g[t+20>>2];p=+g[t+24>>2]}}g[t+16>>2]=j*+g[a+112>>2];g[t+20>>2]=o*+g[a+116>>2];g[t+24>>2]=p*+g[a+120>>2];h=f+1|0;j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,h,m);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(h|0)-+g[a+84>>2]*.5;p=+(m|0)-+g[a+88>>2]*.5;g[t+32>>2]=j;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;break}case 1:{B=+(h|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=+(m|0)-+g[a+88>>2]*.5;g[t+32>>2]=B;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;j=B;break}case 2:{B=+(h|0)-+g[a+84>>2]*.5;o=+(m|0)-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t+32>>2]=B;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;j=B;break}default:{j=+g[t+32>>2];o=+g[t+36>>2];p=+g[t+40>>2]}}g[t+32>>2]=j*+g[a+112>>2];g[t+36>>2]=o*+g[a+116>>2];g[t+40>>2]=p*+g[a+120>>2];Yb[c[(c[b>>2]|0)+8>>2]&127](b,t,f,d);j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,h,m);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(h|0)-+g[a+84>>2]*.5;p=+(m|0)-+g[a+88>>2]*.5;g[t+16>>2]=j;g[t+20>>2]=o;g[t+24>>2]=p;g[t+28>>2]=0.0;break}case 1:{B=+(h|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=+(m|0)-+g[a+88>>2]*.5;g[t+16>>2]=B;g[t+20>>2]=o;g[t+24>>2]=p;g[t+28>>2]=0.0;j=B;break}case 2:{B=+(h|0)-+g[a+84>>2]*.5;o=+(m|0)-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t+16>>2]=B;g[t+20>>2]=o;g[t+24>>2]=p;g[t+28>>2]=0.0;j=B;break}default:{j=+g[t+16>>2];o=+g[t+20>>2];p=+g[t+24>>2]}}g[t+16>>2]=j*+g[a+112>>2];g[t+20>>2]=o*+g[a+116>>2];g[t+24>>2]=p*+g[a+120>>2];j=+Kb[c[(c[a>>2]|0)+68>>2]&15](a,h,d);switch(c[a+108>>2]|0){case 0:{j=j-+g[a+52>>2];o=+(h|0)-+g[a+84>>2]*.5;p=q-+g[a+88>>2]*.5;g[t+32>>2]=j;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;break}case 1:{B=+(h|0)-+g[a+84>>2]*.5;o=j-+g[a+56>>2];p=q-+g[a+88>>2]*.5;g[t+32>>2]=B;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;j=B;break}case 2:{B=+(h|0)-+g[a+84>>2]*.5;o=q-+g[a+88>>2]*.5;p=j-+g[a+60>>2];g[t+32>>2]=B;g[t+36>>2]=o;g[t+40>>2]=p;g[t+44>>2]=0.0;j=B;break}default:{j=+g[t+32>>2];o=+g[t+36>>2];p=+g[t+40>>2]}}g[t+32>>2]=j*+g[a+112>>2];g[t+36>>2]=o*+g[a+116>>2];g[t+40>>2]=p*+g[a+120>>2];Yb[c[(c[b>>2]|0)+8>>2]&127](b,t,f,d);f=h}if((f|0)==(l|0)){d=m;break}}}else d=d+1|0;while((d|0)!=(e|0));i=t;return}function zc(b,d){b=b|0;d=+d;var e=0,f=0.0,h=0,j=0,k=0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0;s=i;i=i+96|0;o=c[b+128>>2]|0;if(!o){i=s;return}e=c[b+8>>2]|0;if((e|0)<(o|0)){if((c[b+12>>2]|0)<(o|0)){c[6324]=(c[6324]|0)+1;h=ic((o<<4|3)+16|0)|0;if(!h)k=0;else{c[(h+4+15&-16)+-4>>2]=h;k=h+4+15&-16}j=c[b+8>>2]|0;if((j|0)>0){h=0;do{p=k+(h<<4)|0;n=(c[b+16>>2]|0)+(h<<4)|0;c[p>>2]=c[n>>2];c[p+4>>2]=c[n+4>>2];c[p+8>>2]=c[n+8>>2];c[p+12>>2]=c[n+12>>2];h=h+1|0}while((h|0)!=(j|0))}h=c[b+16>>2]|0;if(h|0){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=k;c[b+12>>2]=o;h=b+16|0}else h=b+16|0;do{p=(c[h>>2]|0)+(e<<4)|0;c[p>>2]=c[s+48>>2];c[p+4>>2]=c[s+48+4>>2];c[p+8>>2]=c[s+48+8>>2];c[p+12>>2]=c[s+48+12>>2];e=e+1|0}while((e|0)!=(o|0))}c[b+8>>2]=o;e=c[b+28>>2]|0;if((e|0)<(o|0)){if((c[b+32>>2]|0)<(o|0)){c[6324]=(c[6324]|0)+1;h=ic((o<<4|3)+16|0)|0;if(!h)k=0;else{c[(h+4+15&-16)+-4>>2]=h;k=h+4+15&-16}j=c[b+28>>2]|0;if((j|0)>0){h=0;do{p=k+(h<<4)|0;n=(c[b+36>>2]|0)+(h<<4)|0;c[p>>2]=c[n>>2];c[p+4>>2]=c[n+4>>2];c[p+8>>2]=c[n+8>>2];c[p+12>>2]=c[n+12>>2];h=h+1|0}while((h|0)!=(j|0))}h=c[b+36>>2]|0;if(h|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=k;c[b+32>>2]=o;h=b+36|0}else h=b+36|0;do{p=(c[h>>2]|0)+(e<<4)|0;c[p>>2]=c[s+48>>2];c[p+4>>2]=c[s+48+4>>2];c[p+8>>2]=c[s+48+8>>2];c[p+12>>2]=c[s+48+12>>2];e=e+1|0}while((e|0)!=(o|0))}c[b+28>>2]=o;n=c[b+48>>2]|0;if((n|0)<(o|0)){do if((c[b+52>>2]|0)<(o|0)){c[6324]=(c[6324]|0)+1;e=ic((o<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}j=c[b+48>>2]|0;k=c[b+56>>2]|0;if((j|0)<=0){if(!k){a[b+60>>0]=1;c[b+56>>2]=e;c[b+52>>2]=o;h=o<<2;break}}else{h=0;do{c[e+(h<<2)>>2]=c[k+(h<<2)>>2];h=h+1|0}while((h|0)!=(j|0))}if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}a[b+60>>0]=1;c[b+56>>2]=e;c[b+52>>2]=o;h=o<<2}else{h=o<<2;e=c[b+56>>2]|0}while(0);yn(e+(n<<2)|0,0,h-(n<<2)|0)|0}c[b+48>>2]=o;n=c[b+68>>2]|0;if((n|0)<(o|0)){do if((c[b+72>>2]|0)<(o|0)){c[6324]=(c[6324]|0)+1;e=ic((o<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}j=c[b+68>>2]|0;k=c[b+76>>2]|0;if((j|0)<=0){if(!k){a[b+80>>0]=1;c[b+76>>2]=e;c[b+72>>2]=o;h=o<<2;break}}else{h=0;do{c[e+(h<<2)>>2]=c[k+(h<<2)>>2];h=h+1|0}while((h|0)!=(j|0))}if(a[b+80>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}a[b+80>>0]=1;c[b+76>>2]=e;c[b+72>>2]=o;h=o<<2}else{h=o<<2;e=c[b+76>>2]|0}while(0);yn(e+(n<<2)|0,0,h-(n<<2)|0)|0}c[b+68>>2]=o;e=c[b+128>>2]|0;if((e|0)<=0){i=s;return}j=c[b+76>>2]|0;k=c[b+56>>2]|0;h=0;do{g[j+(h<<2)>>2]=0.0;g[k+(h<<2)>>2]=0.0;h=h+1|0}while((h|0)!=(e|0));k=0;do{h=c[b+136>>2]|0;j=c[h+(k*284|0)+88>>2]|0;if(j){e=h+(k*284|0)+92|0;c[s+48>>2]=c[e>>2];c[s+48+4>>2]=c[e+4>>2];c[s+48+8>>2]=c[e+8>>2];c[s+48+12>>2]=c[e+12>>2];e=h+(k*284|0)+108|0;c[s+48+16>>2]=c[e>>2];c[s+48+16+4>>2]=c[e+4>>2];c[s+48+16+8>>2]=c[e+8>>2];c[s+48+16+12>>2]=c[e+12>>2];e=h+(k*284|0)+124|0;c[s+48+32>>2]=c[e>>2];c[s+48+32+4>>2]=c[e+4>>2];c[s+48+32+8>>2]=c[e+8>>2];c[s+48+32+12>>2]=c[e+12>>2];e=c[b+36>>2]|0;x=c[b+112>>2]|0;o=c[s+48+16+(x<<2)>>2]|0;y=c[s+48+32+(x<<2)>>2]|0;c[e+(k<<4)>>2]=c[s+48+(x<<2)>>2];c[e+(k<<4)+4>>2]=o;c[e+(k<<4)+8>>2]=y;g[e+(k<<4)+12>>2]=0.0;e=c[b+36>>2]|0;y=e+(k<<4)|0;z=+g[y>>2];o=h+(k*284|0)|0;f=+g[o>>2];x=e+(k<<4)+4|0;w=+g[x>>2];n=h+(k*284|0)+4|0;l=+g[n>>2];e=e+(k<<4)+8|0;t=+g[e>>2];p=h+(k*284|0)+8|0;v=+g[p>>2];m=z-f*(z*f+w*l+t*v);u=w-l*(z*f+w*l+t*v);v=t-v*(z*f+w*l+t*v);t=1.0/+G(+(m*m+u*u+v*v));g[y>>2]=m*t;g[x>>2]=u*t;g[e>>2]=v*t;e=c[b+16>>2]|0;l=+g[n>>2];w=+g[p>>2];f=+g[o>>2];g[e+(k<<4)>>2]=l*v*t-w*u*t;g[e+(k<<4)+4>>2]=w*m*t-v*t*f;g[e+(k<<4)+8>>2]=u*t*f-l*m*t;g[e+(k<<4)+12>>2]=0.0;e=c[b+16>>2]|0;o=e+(k<<4)|0;t=+g[o>>2];p=e+(k<<4)+4|0;m=+g[p>>2];e=e+(k<<4)+8|0;l=+g[e>>2];f=1.0/+G(+(t*t+m*m+l*l));g[o>>2]=t*f;g[p>>2]=m*f;g[e>>2]=l*f;e=c[b+108>>2]|0;p=c[b+36>>2]|0;f=+g[p+(k<<4)>>2];l=+g[p+(k<<4)+4>>2];m=+g[p+(k<<4)+8>>2];if(f*f+l*l+m*m>1.100000023841858)f=0.0;else{C=+g[h+(k*284|0)+16>>2];H=C-+g[e+52>>2];E=+g[h+(k*284|0)+20>>2];J=E-+g[e+56>>2];K=+g[h+(k*284|0)+24>>2];M=K-+g[e+60>>2];C=C-+g[j+52>>2];E=E-+g[j+56>>2];K=K-+g[j+60>>2];F=+g[e+372>>2];N=+g[e+376>>2];I=+g[e+368>>2];B=+g[j+372>>2];L=+g[j+376>>2];D=+g[j+368>>2];A=(m*J-l*M)*+g[e+4>>2]+(f*M-m*H)*+g[e+20>>2]+(l*H-f*J)*+g[e+36>>2];t=(m*J-l*M)*+g[e+8>>2]+(f*M-m*H)*+g[e+24>>2]+(l*H-f*J)*+g[e+40>>2];u=(m*J-l*M)*+g[e+12>>2]+(f*M-m*H)*+g[e+28>>2]+(l*H-f*J)*+g[e+44>>2];v=(E*-m-K*-l)*+g[j+4>>2]+(K*-f-C*-m)*+g[j+20>>2]+(C*-l-E*-f)*+g[j+36>>2];w=(E*-m-K*-l)*+g[j+8>>2]+(K*-f-C*-m)*+g[j+24>>2]+(C*-l-E*-f)*+g[j+40>>2];z=(E*-m-K*-l)*+g[j+12>>2]+(K*-f-C*-m)*+g[j+28>>2]+(C*-l-E*-f)*+g[j+44>>2];f=(f*(M*F-J*N+ +g[e+352>>2]-(K*B-E*L+ +g[j+352>>2]))+l*(+g[e+356>>2]+(H*N-M*I)-(+g[j+356>>2]+(C*L-K*D)))+m*(J*I-H*F+ +g[e+360>>2]-(E*D-C*B+ +g[j+360>>2])))*-.20000000298023224*(1.0/(+g[j+384>>2]+(+g[e+384>>2]+(A*A*+g[e+436>>2]+t*t*+g[e+440>>2]+u*u*+g[e+444>>2]))+(v*v*+g[j+436>>2]+w*w*+g[j+440>>2]+z*z*+g[j+444>>2])))}g[(c[b+76>>2]|0)+(k<<2)>>2]=f;e=c[b+128>>2]|0}k=k+1|0}while((k|0)<(e|0));if((e|0)<=0){i=s;return}j=0;o=0;h=c[b+136>>2]|0;while(1){e=c[h+(o*284|0)+88>>2]|0;if(e){f=+g[h+(o*284|0)+252>>2];if(f!=0.0){f=f*d;p=h}else{N=+g[h+(o*284|0)+256>>2];N=N==0.0?0.0:N;p=c[b+108>>2]|0;y=c[b+16>>2]|0;H=+g[h+(o*284|0)+16>>2];E=+g[h+(o*284|0)+20>>2];A=+g[h+(o*284|0)+24>>2];w=+g[y+(o<<4)>>2];D=+g[y+(o<<4)+4>>2];f=+g[y+(o<<4)+8>>2];P=H-+g[p+52>>2];Q=E-+g[p+56>>2];l=A-+g[p+60>>2];m=+g[p+304>>2]*(Q*f-l*D)+ +g[p+320>>2]*(l*w-P*f)+(P*D-Q*w)*+g[p+336>>2];R=(Q*f-l*D)*+g[p+308>>2]+(l*w-P*f)*+g[p+324>>2]+(P*D-Q*w)*+g[p+340>>2];O=(Q*f-l*D)*+g[p+312>>2]+(l*w-P*f)*+g[p+328>>2]+(P*D-Q*w)*+g[p+344>>2];L=H-+g[e+52>>2];J=E-+g[e+56>>2];C=A-+g[e+60>>2];v=(D*L-w*J)*+g[e+336>>2]+(+g[e+304>>2]*(f*J-D*C)+ +g[e+320>>2]*(w*C-f*L));t=(f*J-D*C)*+g[e+308>>2]+(w*C-f*L)*+g[e+324>>2]+(D*L-w*J)*+g[e+340>>2];u=(f*J-D*C)*+g[e+312>>2]+(w*C-f*L)*+g[e+328>>2]+(D*L-w*J)*+g[e+344>>2];H=H-+g[p+52>>2];E=E-+g[p+56>>2];A=A-+g[p+60>>2];I=+g[p+372>>2];z=+g[p+376>>2];F=+g[p+368>>2];M=+g[e+372>>2];B=+g[e+376>>2];K=+g[e+368>>2];f=-(1.0/(+g[p+384>>2]+(f*(Q*m-P*R)+(w*(l*R-Q*O)+D*(P*O-l*m)))+(+g[e+384>>2]+(f*(J*v-L*t)+(w*(C*t-J*u)+D*(L*u-C*v)))))*((A*I-E*z+ +g[p+352>>2]-(C*M-J*B+ +g[e+352>>2]))*w+(+g[p+356>>2]+(H*z-A*F)-(+g[e+356>>2]+(L*B-C*K)))*D+(E*F-H*I+ +g[p+360>>2]-(J*K-L*M+ +g[e+360>>2]))*f));f=N<f?N:f;f=f<-N?-N:f;p=c[b+136>>2]|0}n=c[b+56>>2]|0;y=n+(o<<2)|0;g[y>>2]=0.0;e=p+(o*284|0)+280|0;g[e>>2]=1.0;m=+g[h+(o*284|0)+276>>2]*d*+g[h+(o*284|0)+228>>2];g[y>>2]=f;f=f*.5;l=+g[(c[b+76>>2]|0)+(o<<2)>>2];if(f*f+l*l>m*m){R=m/+G(+(f*f+l*l));g[e>>2]=R*+g[e>>2];e=1}else e=j}else{n=c[b+56>>2]|0;g[n+(o<<2)>>2]=0.0;g[h+(o*284|0)+280>>2]=1.0;e=j;p=h}o=o+1|0;k=c[b+128>>2]|0;if((o|0)>=(k|0))break;else{j=e;h=p}}if(e){if((k|0)<=0){i=s;return}h=c[b+76>>2]|0;e=0;do{j=h+(e<<2)|0;if(+g[j>>2]!=0.0?(q=p+(e*284|0)+280|0,r=+g[q>>2],r<1.0):0){y=n+(e<<2)|0;g[y>>2]=r*+g[y>>2];g[j>>2]=+g[q>>2]*+g[j>>2]}e=e+1|0}while((e|0)!=(k|0))}if((k|0)<=0){i=s;return}e=0;h=n;while(1){j=c[b+108>>2]|0;k=p+(e*284|0)+16|0;l=+g[k>>2]-+g[j+52>>2];n=p+(e*284|0)+20|0;m=+g[n>>2]-+g[j+56>>2];o=p+(e*284|0)+24|0;d=+g[o>>2]-+g[j+60>>2];g[s+48>>2]=l;g[s+48+4>>2]=m;g[s+48+8>>2]=d;g[s+48+12>>2]=0.0;f=+g[h+(e<<2)>>2];if(f!=0.0){y=c[b+16>>2]|0;Q=f*+g[y+(e<<4)+4>>2];R=f*+g[y+(e<<4)+8>>2];g[s+32>>2]=+g[y+(e<<4)>>2]*f;g[s+32+4>>2]=Q;g[s+32+8>>2]=R;g[s+32+12>>2]=0.0;Xi(j,s+32|0,s+48|0)}f=+g[(c[b+76>>2]|0)+(e<<2)>>2];if(f!=0.0){y=c[(c[b+136>>2]|0)+(e*284|0)+88>>2]|0;Q=+g[n>>2]-+g[y+56>>2];P=+g[o>>2]-+g[y+60>>2];g[s+32>>2]=+g[k>>2]-+g[y+52>>2];g[s+32+4>>2]=Q;g[s+32+8>>2]=P;g[s+32+12>>2]=0.0;x=c[b+36>>2]|0;P=+g[x+(e<<4)>>2]*f;Q=f*+g[x+(e<<4)+4>>2];R=f*+g[x+(e<<4)+8>>2];g[s+16>>2]=P;g[s+16+4>>2]=Q;g[s+16+8>>2]=R;g[s+16+12>>2]=0.0;x=c[b+108>>2]|0;q=c[b+116>>2]|0;L=+g[x+4+(q<<2)>>2];M=+g[x+20+(q<<2)>>2];N=+g[x+36+(q<<2)>>2];O=(L*l+M*m+N*d)*(1.0-+g[p+(e*284|0)+244>>2]);g[s+48>>2]=l-L*O;g[s+48+4>>2]=m-M*O;g[s+48+8>>2]=d-N*O;Xi(x,s+16|0,s+48|0);g[s>>2]=-P;g[s+4>>2]=-Q;g[s+8>>2]=-R;g[s+12>>2]=0.0;Xi(y,s,s+32|0)}e=e+1|0;if((e|0)>=(c[b+128>>2]|0))break;p=c[b+136>>2]|0;h=c[b+56>>2]|0}i=s;return}function Ac(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0.0,s=0.0,t=0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0,B=0.0,C=0.0,D=0,E=0,F=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0.0;P=i;i=i+192|0;O=c[d+36>>2]|0;o=+g[(+g[O+88>>2]>0.0?b+16|0:b+20|0)>>2];if(a[O+100>>0]&1){i=P;return}L=c[b+8>>2]|0;u=c[L+4>>2]|0;M=c[L+12>>2]|0;J=c[(c[b+4>>2]|0)+724>>2]|0;B=+g[O+8>>2]-+g[M+48>>2];r=+g[O+12>>2]-+g[M+52>>2];C=+g[O+16>>2]-+g[M+56>>2];z=1.0/+g[J+76>>2];y=(B*+g[M>>2]+r*+g[M+16>>2]+C*+g[M+32>>2])*z/3.0;F=y<0.0?~~(1.0-y):0;K=~~((y+ +(F|0)-+(~~(y+ +(F|0))|0))*3.0);s=(y+ +(F|0)-+(~~(y+ +(F|0))|0))*3.0-+(K|0);F=~~(y+ +(F|0))-F|0;y=z*(B*+g[M+4>>2]+r*+g[M+20>>2]+C*+g[M+36>>2])/3.0;D=y<0.0?~~(1.0-y):0;H=~~((y+ +(D|0)-+(~~(y+ +(D|0))|0))*3.0);n=(y+ +(D|0)-+(~~(y+ +(D|0))|0))*3.0-+(H|0);D=~~(y+ +(D|0))-D|0;C=z*(B*+g[M+8>>2]+r*+g[M+24>>2]+C*+g[M+40>>2])/3.0;E=C<0.0?~~(1.0-C):0;I=~~((C+ +(E|0)-+(~~(C+ +(E|0))|0))*3.0);r=(C+ +(E|0)-+(~~(C+ +(E|0))|0))*3.0-+(I|0);E=~~(C+ +(E|0))-E|0;t=(F>>>16<<11^(F&65535)+16^(F&65535)+16<<16)+(D&65535)+((F>>>16<<11^(F&65535)+16^(F&65535)+16<<16)>>>11)|0;t=(t^D>>>16<<11^t<<16)+(E&65535)+((t^D>>>16<<11^t<<16)>>>11)|0;t=(t^E>>>16<<11^t<<16)+(u&65535)+((t^E>>>16<<11^t<<16)>>>11)|0;t=((t^u>>>16<<11^t<<16)>>>11)+(t^u>>>16<<11^t<<16)|0;t=((t<<3^t)>>>5)+(t<<3^t)<<4^((t<<3^t)>>>5)+(t<<3^t);t=(((t>>>17)+t<<25^(t>>>17)+t)>>>6)+((t>>>17)+t<<25^(t>>>17)+t)|0;p=c[J+60>>2]|0;q=c[J+68>>2]|0;d=c[q+(((t>>>0)%(p>>>0)|0)<<2)>>2]|0;c[J+96>>2]=(c[J+96>>2]|0)+1;e=(c[J+92>>2]|0)+1|0;c[J+92>>2]=e;a:do if(!d)f=9;else while(1){if(((((c[d+272>>2]|0)==(t|0)?(c[d+256>>2]|0)==(F|0):0)?(c[d+260>>2]|0)==(D|0):0)?(c[d+264>>2]|0)==(E|0):0)?(c[d+276>>2]|0)==(u|0):0)break a;d=c[d+280>>2]|0;e=e+1|0;c[J+92>>2]=e;if(!d){f=9;break}}while(0);b:do if((f|0)==9){A=c[J+84>>2]|0;c[J+84>>2]=A+1;if((A|0)>=(c[J+88>>2]|0)){c[5677]=(c[5677]|0)+1;c:do if((p|0)>0){d=0;e=q;while(1){A=e+(d<<2)|0;e=c[A>>2]|0;c[A>>2]=0;if(e|0)do{A=e;e=c[e+280>>2]|0;Rc(A)}while((e|0)!=0);d=d+1|0;if((d|0)==(p|0))break c;e=c[J+68>>2]|0}}while(0);g[J+76>>2]=.25;c[J+80>>2]=0;c[J+84>>2]=0;c[J+92>>2]=1;c[J+96>>2]=1}while(1){d=ic(284)|0;if(d|0)break;d=c[6453]|0;c[6453]=d+0;if(!d){d=0;break}Vb[d&3]()}yn(d|0,0,284)|0;c[d+280>>2]=c[q+(((t>>>0)%(p>>>0)|0)<<2)>>2];c[q+(((t>>>0)%(p>>>0)|0)<<2)>>2]=d;A=d+276|0;c[A>>2]=u;c[d+272>>2]=t;c[d+256>>2]=F;c[d+260>>2]=D;c[d+264>>2]=E;l=+g[J+76>>2];q=P+120+4|0;t=P+120+24|0;u=P+120+44|0;e=0;h=l;while(1){k=l*+(E|0)*3.0+ +(e|0)*h;f=0;while(1){j=l*+(D|0)*3.0+ +(f|0)*h;g[P+48>>2]=+(F|0)*3.0*l+h*0.0;g[P+48+4>>2]=j;g[P+48+8>>2]=k;g[P+48+12>>2]=0.0;p=c[A>>2]|0;c[P+120>>2]=1065353216;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[P+120+20>>2]=1065353216;c[t>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;c[P+120+40>>2]=1065353216;c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;c[u+16>>2]=0;if((c[p+4>>2]|0)<20)h=+Pc(P+48|0,p,P+120|0,P+64|0);else h=0.0;g[d+(f<<4)+(e<<2)>>2]=h;g[P+48>>2]=+(F|0)*3.0*l+ +g[J+76>>2];g[P+48+4>>2]=j;g[P+48+8>>2]=k;g[P+48+12>>2]=0.0;p=c[A>>2]|0;c[P+120>>2]=1065353216;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[P+120+20>>2]=1065353216;c[t>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;c[P+120+40>>2]=1065353216;c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;c[u+16>>2]=0;if((c[p+4>>2]|0)<20)h=+Pc(P+48|0,p,P+120|0,P+64|0);else h=0.0;g[d+64+(f<<4)+(e<<2)>>2]=h;g[P+48>>2]=+(F|0)*3.0*l+ +g[J+76>>2]*2.0;g[P+48+4>>2]=j;g[P+48+8>>2]=k;g[P+48+12>>2]=0.0;p=c[A>>2]|0;c[P+120>>2]=1065353216;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[P+120+20>>2]=1065353216;c[t>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;c[P+120+40>>2]=1065353216;c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;c[u+16>>2]=0;if((c[p+4>>2]|0)<20)h=+Pc(P+48|0,p,P+120|0,P+64|0);else h=0.0;g[d+128+(f<<4)+(e<<2)>>2]=h;g[P+48>>2]=+(F|0)*3.0*l+ +g[J+76>>2]*3.0;g[P+48+4>>2]=j;g[P+48+8>>2]=k;g[P+48+12>>2]=0.0;p=c[A>>2]|0;c[P+120>>2]=1065353216;c[q>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[P+120+20>>2]=1065353216;c[t>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;c[P+120+40>>2]=1065353216;c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;c[u+16>>2]=0;if((c[p+4>>2]|0)<20)h=+Pc(P+48|0,p,P+120|0,P+64|0);else h=0.0;g[d+192+(f<<4)+(e<<2)>>2]=h;f=f+1|0;if((f|0)==4)break;h=+g[J+76>>2]}e=e+1|0;if((e|0)==4)break b;h=+g[J+76>>2]}}while(0);c[d+268>>2]=c[J+80>>2];h=+g[d+(K<<6)+(H<<4)+(I<<2)>>2];x=+g[d+(K+1<<6)+(H<<4)+(I<<2)>>2];v=+g[d+(K+1<<6)+(H+1<<4)+(I<<2)>>2];w=+g[d+(K<<6)+(H+1<<4)+(I<<2)>>2];C=+g[d+(K<<6)+(H<<4)+(I+1<<2)>>2];B=+g[d+(K+1<<6)+(H<<4)+(I+1<<2)>>2];y=+g[d+(K+1<<6)+(H+1<<4)+(I+1<<2)>>2];z=+g[d+(K<<6)+(H+1<<4)+(I+1<<2)>>2];j=x-h+n*(v-w-(x-h))+r*(B-C+n*(y-z-(B-C))-(x-h+n*(v-w-(x-h))));k=w-h+s*(v-x-(w-h))+r*(z-C+s*(y-B-(z-C))-(w-h+s*(v-x-(w-h))));l=C-h+s*(B-x-(C-h))+n*(z-w+s*(y-v-(z-w))-(C-h+s*(B-x-(C-h))));m=1.0/+G(+(j*j+k*k+l*l));h=h+s*(x-h)+n*(w+s*(v-w)-(h+s*(x-h)));h=h+r*(C+s*(B-C)+n*(z+s*(y-z)-(C+s*(B-C)))-h)-o;if(!(h<0.0)){i=P;return}t=c[L+8>>2]|0;B=+g[M>>2]*j*m+ +g[M+4>>2]*k*m+ +g[M+8>>2]*l*m;C=j*m*+g[M+16>>2]+k*m*+g[M+20>>2]+l*m*+g[M+24>>2];z=j*m*+g[M+32>>2]+k*m*+g[M+36>>2]+l*m*+g[M+40>>2];y=-(B*(+g[O+8>>2]-h*B)+C*(+g[O+12>>2]-h*C)+z*(+g[O+16>>2]-h*z));s=+g[O+88>>2];d=c[b+12>>2]|0;if(!d)r=0.0;else r=+g[d+384>>2];if(!(s+r>0.0)){i=P;return}if(!d)d=c[(c[b+8>>2]|0)+8>>2]|0;if(!(a[22072]|0)){a[22072]=1;e=22712;f=e+48|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0))}e=c[b+12>>2]|0;m=+g[O+8>>2];w=m-+g[d+52>>2];n=+g[O+12>>2];x=n-+g[d+56>>2];o=+g[O+16>>2];v=o-+g[d+60>>2];if(!e){M=c[b+4>>2]|0;h=0.0;j=0.0;k=0.0;d=M;l=+g[M+492>>2]}else{k=+g[e+372>>2];j=+g[e+376>>2];Q=+g[e+368>>2];d=c[b+4>>2]|0;l=+g[d+492>>2];h=(k*v-j*x+ +g[e+352>>2])*l;j=(+g[e+356>>2]+(j*w-v*Q))*l;k=(x*Q-k*w+ +g[e+360>>2])*l}m=m-+g[O+24>>2]-h;n=n-+g[O+28>>2]-j;Q=o-+g[O+32>>2]-k;j=+g[d+356>>2]*+g[(c[(c[b+8>>2]|0)+8>>2]|0)+224>>2];Df(P+120|0,l,s,r,(e|0)==0?22712:e+304|0,w,x,v);c[P+32>>2]=c[P+120>>2];c[P+32+4>>2]=c[P+120+4>>2];c[P+32+8>>2]=c[P+120+8>>2];c[P+32+12>>2]=c[P+120+12>>2];c[P+16>>2]=c[P+120+16>>2];c[P+16+4>>2]=c[P+120+16+4>>2];c[P+16+8>>2]=c[P+120+16+8>>2];c[P+16+12>>2]=c[P+120+16+12>>2];c[P>>2]=c[P+120+32>>2];c[P+4>>2]=c[P+120+32+4>>2];c[P+8>>2]=c[P+120+32+8>>2];c[P+12>>2]=c[P+120+32+12>>2];q=c[b+4>>2]|0;h=s*+g[q+492>>2];j=(Q-z*(m*B+n*C+Q*z))*(Q-z*(m*B+n*C+Q*z))+((m-B*(m*B+n*C+Q*z))*(m-B*(m*B+n*C+Q*z))+(n-C*(m*B+n*C+Q*z))*(n-C*(m*B+n*C+Q*z)))<j*(m*B+n*C+Q*z)*(m*B+n*C+Q*z)*j?0.0:1.0-j;p=c[(c[(c[(c[b+8>>2]|0)+8>>2]|0)+204>>2]&3|0?q+368|0:q+364|0)>>2]|0;d=c[q+852>>2]|0;if((d|0)==(c[q+856>>2]|0)?(N=d|0?d<<1:1,(d|0)<(N|0)):0){if(!N)f=0;else{c[6324]=(c[6324]|0)+1;d=ic((N*104|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}f=d;d=c[q+852>>2]|0}if((d|0)>0){e=0;do{M=f+(e*104|0)|0;L=c[q+860>>2]|0;K=L+(e*104|0)|0;c[M>>2]=c[K>>2];c[M+4>>2]=c[K+4>>2];c[M+8>>2]=c[K+8>>2];c[M+12>>2]=c[K+12>>2];c[M+16>>2]=c[K+16>>2];c[M+20>>2]=c[K+20>>2];c[M+24>>2]=c[K+24>>2];M=f+(e*104|0)+28|0;K=L+(e*104|0)+28|0;c[M>>2]=c[K>>2];c[M+4>>2]=c[K+4>>2];c[M+8>>2]=c[K+8>>2];c[M+12>>2]=c[K+12>>2];M=f+(e*104|0)+44|0;K=L+(e*104|0)+44|0;c[M>>2]=c[K>>2];c[M+4>>2]=c[K+4>>2];c[M+8>>2]=c[K+8>>2];c[M+12>>2]=c[K+12>>2];M=f+(e*104|0)+60|0;K=L+(e*104|0)+60|0;c[M>>2]=c[K>>2];c[M+4>>2]=c[K+4>>2];c[M+8>>2]=c[K+8>>2];c[M+12>>2]=c[K+12>>2];M=f+(e*104|0)+76|0;L=L+(e*104|0)+76|0;c[M>>2]=c[L>>2];c[M+4>>2]=c[L+4>>2];c[M+8>>2]=c[L+8>>2];c[M+12>>2]=c[L+12>>2];c[M+16>>2]=c[L+16>>2];c[M+20>>2]=c[L+20>>2];c[M+24>>2]=c[L+24>>2];e=e+1|0}while((e|0)!=(d|0))}d=c[q+860>>2]|0;if(d|0){if(a[q+864>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[q+860>>2]=0}a[q+864>>0]=1;c[q+860>>2]=f;c[q+856>>2]=N;d=c[q+852>>2]|0}N=c[q+860>>2]|0;c[N+(d*104|0)>>2]=t;g[N+(d*104|0)+4>>2]=B;g[N+(d*104|0)+8>>2]=C;g[N+(d*104|0)+12>>2]=z;g[N+(d*104|0)+16>>2]=0.0;g[N+(d*104|0)+20>>2]=y;c[N+(d*104|0)+24>>2]=O;O=N+(d*104|0)+28|0;c[O>>2]=c[P+32>>2];c[O+4>>2]=c[P+32+4>>2];c[O+8>>2]=c[P+32+8>>2];c[O+12>>2]=c[P+32+12>>2];O=N+(d*104|0)+44|0;c[O>>2]=c[P+16>>2];c[O+4>>2]=c[P+16+4>>2];c[O+8>>2]=c[P+16+8>>2];c[O+12>>2]=c[P+16+12>>2];O=N+(d*104|0)+60|0;c[O>>2]=c[P>>2];c[O+4>>2]=c[P+4>>2];c[O+8>>2]=c[P+8>>2];c[O+12>>2]=c[P+12>>2];O=N+(d*104|0)+76|0;g[O>>2]=w;g[N+(d*104|0)+80>>2]=x;g[N+(d*104|0)+84>>2]=v;g[N+(d*104|0)+88>>2]=0.0;g[O+16>>2]=h;g[O+20>>2]=j;c[O+24>>2]=p;c[q+852>>2]=(c[q+852>>2]|0)+1;d=c[b+12>>2]|0;if(!d){i=P;return}if(c[d+204>>2]&3|0){i=P;return}if((c[d+216>>2]&-2|0)!=4)c[d+216>>2]=1;g[d+220>>2]=0.0;i=P;return}
function Zb(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0.0,D=0.0,E=0.0,H=0.0,I=0,J=0,K=0.0,L=0,M=0,N=0,O=0.0,P=0.0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0.0,ha=0;fa=i;i=i+192|0;j=c[d+56>>2]|0;if(j|0?(kb[c[c[j>>2]>>2]&255](j),h=c[d+56>>2]|0,h|0):0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[6324]=(c[6324]|0)+1;h=ic(151)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}c[h>>2]=9428;a[h+20>>0]=1;c[h+16>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;a[h+40>>0]=1;c[h+36>>2]=0;c[h+28>>2]=0;c[h+32>>2]=0;a[h+60>>0]=1;c[h+56>>2]=0;c[h+48>>2]=0;c[h+52>>2]=0;c[d+56>>2]=h;m=0;n=0;ea=0;L=0;while(1){if((m|0)>=(ob[c[(c[d>>2]|0)+96>>2]&127](d)|0))break;do if((L|0)==(n|0)){k=n|0?n<<1:1;if((n|0)<(k|0)){if((k|0)!=0?(c[6324]=(c[6324]|0)+1,o=ic((k<<4|3)+16|0)|0,(o|0)!=0):0){c[(o+4+15&-16)+-4>>2]=o;h=o+4+15&-16}else h=0;if((n|0)<=0){if(!ea){j=n;break}}else{j=0;do{da=h+(j<<4)|0;ca=ea+(j<<4)|0;c[da>>2]=c[ca>>2];c[da+4>>2]=c[ca+4>>2];c[da+8>>2]=c[ca+8>>2];c[da+12>>2]=c[ca+12>>2];j=j+1|0}while((j|0)!=(n|0))}c[6325]=(c[6325]|0)+1;Rc(c[ea+-4>>2]|0);j=n}else{k=n;h=ea;j=n}}else{k=n;h=ea;j=L}while(0);n=h+(L<<4)|0;c[n>>2]=c[fa+136>>2];c[n+4>>2]=c[fa+136+4>>2];c[n+8>>2]=c[fa+136+8>>2];c[n+12>>2]=c[fa+136+12>>2];Ub[c[(c[d>>2]|0)+108>>2]&127](d,m,n);m=m+1|0;n=k;ea=h;L=j+1|0}a[fa+76+16>>0]=1;da=fa+76+12|0;c[da>>2]=0;c[fa+76+4>>2]=0;c[fa+76+8>>2]=0;a[fa+76+36>>0]=1;ca=fa+76+32|0;c[ca>>2]=0;c[fa+76+24>>2]=0;c[fa+76+28>>2]=0;a[fa+76+56>>0]=1;ba=fa+76+52|0;c[ba>>2]=0;c[fa+76+44>>2]=0;c[fa+76+48>>2]=0;if(f){if((L|0)>0){J=0;k=0;j=0;m=0;while(1){h=J;J=J+1|0;if((J|0)<(L|0)){B=ea+(h<<4)|0;I=ea+(h<<4)+4|0;A=ea+(h<<4)+8|0;z=J;h=m;do{m=z;z=z+1|0;if((z|0)<(L|0)){x=ea+(m<<4)|0;y=ea+(m<<4)+4|0;w=ea+(m<<4)+8|0;p=z;do{E=+g[B>>2];v=+g[x>>2]-E;H=+g[I>>2];C=+g[y>>2]-H;K=+g[A>>2];D=+g[w>>2]-K;E=+g[ea+(p<<4)>>2]-E;H=+g[ea+(p<<4)+4>>2]-H;K=+g[ea+(p<<4)+8>>2]-K;q=1.0;f=0;while(1){t=(C*K-D*H)*q;u=(D*E-v*K)*q;r=(v*H-C*E)*q;a:do if(r*r+(t*t+u*u)>9.999999747378752e-005){s=1.0/+G(+(r*r+(t*t+u*u)));if((h|0)>0){m=0;do{if(t*s*+g[j+(m<<4)>>2]+u*s*+g[j+(m<<4)+4>>2]+r*s*+g[j+(m<<4)+8>>2]>.9990000128746033)break a;m=m+1|0}while((m|0)<(h|0))}q=t*s*+g[B>>2]+u*s*+g[I>>2]+r*s*+g[A>>2];m=0;do{if(t*s*+g[ea+(m<<4)>>2]+u*s*+g[ea+(m<<4)+4>>2]+r*s*+g[ea+(m<<4)+8>>2]-q+-.009999999776482582>0.0)break a;m=m+1|0}while((m|0)<(L|0));do if((h|0)==(k|0)){o=k|0?k<<1:1;if((k|0)<(o|0)){do if(!o)n=0;else{c[6324]=(c[6324]|0)+1;m=ic((o<<4|3)+16|0)|0;if(!m){n=0;break}c[(m+4+15&-16)+-4>>2]=m;n=m+4+15&-16}while(0);if((k|0)<=0){if(!j){m=o;j=n;break}}else{m=0;do{_=n+(m<<4)|0;Z=j+(m<<4)|0;c[_>>2]=c[Z>>2];c[_+4>>2]=c[Z+4>>2];c[_+8>>2]=c[Z+8>>2];c[_+12>>2]=c[Z+12>>2];m=m+1|0}while((m|0)!=(k|0))}c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);m=o;j=n}else m=k}else{m=k;k=h}while(0);g[j+(k<<4)>>2]=t*s;g[j+(k<<4)+4>>2]=u*s;g[j+(k<<4)+8>>2]=r*s;g[j+(k<<4)+12>>2]=-q;k=m;h=h+1|0}while(0);f=f+1|0;if((f|0)==2)break;else q=-1.0}p=p+1|0}while((p|0)!=(L|0))}}while((z|0)!=(L|0))}else h=m;if((J|0)==(L|0)){p=h;break}else m=h}if((p|0)>0){h=0;o=0;f=0;while(1){_=j+(f<<4)|0;c[fa+136>>2]=c[_>>2];c[fa+136+4>>2]=c[_+4>>2];c[fa+136+8>>2]=c[_+8>>2];q=+g[j+(f<<4)+12>>2];q=q-+Cb[c[(c[d>>2]|0)+48>>2]&15](d);do if((f|0)==(h|0)){n=h|0?h<<1:1;if((h|0)<(n|0)){if((n|0)!=0?(c[6324]=(c[6324]|0)+1,M=ic((n<<4|3)+16|0)|0,(M|0)!=0):0){c[(M+4+15&-16)+-4>>2]=M;k=M+4+15&-16}else k=0;if((h|0)<=0){if(!o)break}else{m=0;do{_=k+(m<<4)|0;Z=o+(m<<4)|0;c[_>>2]=c[Z>>2];c[_+4>>2]=c[Z+4>>2];c[_+8>>2]=c[Z+8>>2];c[_+12>>2]=c[Z+12>>2];m=m+1|0}while((m|0)!=(h|0))}c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}else{n=h;k=o}}else{n=h;k=o;h=f}while(0);_=k+(h<<4)|0;c[_>>2]=c[fa+136>>2];c[_+4>>2]=c[fa+136+4>>2];c[_+8>>2]=c[fa+136+8>>2];g[k+(h<<4)+12>>2]=q;f=f+1|0;if((f|0)<(p|0)){h=n;o=k}else break}if((f|0)>0){B=0;n=0;m=0;h=0;do{z=B;B=B+1|0;if((B|0)<(f|0)){A=B;do{y=A;A=A+1|0;if((A|0)<(f|0)){x=A;do{t=+g[k+(y<<4)+4>>2];q=+g[k+(x<<4)+8>>2];r=+g[k+(y<<4)+8>>2];u=+g[k+(x<<4)+4>>2];v=+g[k+(x<<4)>>2];C=+g[k+(y<<4)>>2];s=+g[k+(z<<4)+8>>2];D=+g[k+(z<<4)+4>>2];E=+g[k+(z<<4)>>2];b:do if((((u*C-t*v)*(u*C-t*v)+((t*q-r*u)*(t*q-r*u)+(r*v-q*C)*(r*v-q*C))>9.999999747378752e-005?(v*D-u*E)*(v*D-u*E)+((u*s-q*D)*(u*s-q*D)+(q*E-v*s)*(q*E-v*s))>9.999999747378752e-005:0)?(t*E-C*D)*(t*E-C*D)+((r*D-t*s)*(r*D-t*s)+(C*s-r*E)*(C*s-r*E))>9.999999747378752e-005:0)?(O=s*(u*C-t*v)+(D*(r*v-q*C)+(t*q-r*u)*E),+F(+O)>9.999999974752427e-007):0){K=+g[k+(z<<4)+12>>2];P=+g[k+(y<<4)+12>>2];ga=+g[k+(x<<4)+12>>2];H=-1.0/O*((r*D-t*s)*ga+((t*q-r*u)*K+(u*s-q*D)*P));r=-1.0/O*((C*s-r*E)*ga+((r*v-q*C)*K+(q*E-v*s)*P));q=-1.0/O*((t*E-C*D)*ga+((u*C-t*v)*K+(v*D-u*E)*P));o=0;do{if(+g[k+(o<<4)+12>>2]+(H*+g[k+(o<<4)>>2]+r*+g[k+(o<<4)+4>>2]+q*+g[k+(o<<4)+8>>2])+-.009999999776482582>0.0)break b;o=o+1|0}while((o|0)<(f|0));do if((h|0)==(n|0)){w=n|0?n<<1:1;if((n|0)>=(w|0)){o=n;break}do if(!w)p=0;else{c[6324]=(c[6324]|0)+1;o=ic((w<<4|3)+16|0)|0;if(!o){p=0;break}c[(o+4+15&-16)+-4>>2]=o;p=o+4+15&-16}while(0);if((n|0)<=0){if(!m){o=w;m=p;break}}else{o=0;do{_=p+(o<<4)|0;Z=m+(o<<4)|0;c[_>>2]=c[Z>>2];c[_+4>>2]=c[Z+4>>2];c[_+8>>2]=c[Z+8>>2];c[_+12>>2]=c[Z+12>>2];o=o+1|0}while((o|0)!=(n|0))}c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0);o=w;m=p}else{o=n;n=h}while(0);g[m+(n<<4)>>2]=H;g[m+(n<<4)+4>>2]=r;g[m+(n<<4)+8>>2]=q;g[m+(n<<4)+12>>2]=0.0;n=o;h=h+1|0}while(0);x=x+1|0}while((x|0)!=(f|0))}}while((A|0)!=(f|0))}}while((B|0)!=(f|0))}else{m=0;h=0}}else{m=0;k=0;h=0}}else{m=0;k=0;j=0;h=0}oc(fa+76|0,m,h);if(m|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0)}if(k|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}if(j|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}}else oc(fa+76|0,ea,L);J=c[fa+76+44>>2]|0;if((J|0)>0){c[6324]=(c[6324]|0)+1;h=ic((J<<4|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}j=0;do{_=h+(j<<4)|0;c[_>>2]=c[fa+136>>2];c[_+4>>2]=c[fa+136+4>>2];c[_+8>>2]=c[fa+136+8>>2];c[_+12>>2]=c[fa+136+12>>2];j=j+1|0}while((j|0)!=(J|0))}else h=0;a[fa+56+16>>0]=1;_=fa+56+12|0;c[_>>2]=0;Z=fa+56+4|0;c[Z>>2]=0;c[fa+56+8>>2]=0;m=fa+136|0;o=m+19|0;do{a[m>>0]=0;m=m+1|0}while((m|0)<(o|0));if((J|0)<0)Xa();if(J|0){vf(fa+56|0,J);k=c[_>>2]|0;j=0;do{m=k+(j*36|0)|0;a[m+16>>0]=1;c[m+4>>2]=0;c[m+4+4>>2]=0;c[m+4+8>>2]=0;m=m+20|0;n=fa+136+3|0;o=m+16|0;do{a[m>>0]=a[n>>0]|0;m=m+1|0;n=n+1|0}while((m|0)<(o|0));j=j+1|0}while((j|0)!=(J|0))}c[Z>>2]=J;f=c[fa+76+4>>2]|0;o=c[d+56>>2]|0;n=c[o+8>>2]|0;if((n|0)<(f|0)){if((c[o+12>>2]|0)<(f|0)){if(!f){j=0;m=n}else{c[6324]=(c[6324]|0)+1;j=ic((f<<4|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}m=c[o+8>>2]|0}if((m|0)>0){k=0;do{Y=j+(k<<4)|0;X=(c[o+16>>2]|0)+(k<<4)|0;c[Y>>2]=c[X>>2];c[Y+4>>2]=c[X+4>>2];c[Y+8>>2]=c[X+8>>2];c[Y+12>>2]=c[X+12>>2];k=k+1|0}while((k|0)!=(m|0))}k=c[o+16>>2]|0;if(k|0){if(a[o+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[o+16>>2]=0}a[o+20>>0]=1;c[o+16>>2]=j;c[o+12>>2]=f;k=o+16|0}else k=o+16|0;j=n;do{Y=(c[k>>2]|0)+(j<<4)|0;c[Y>>2]=c[fa+136>>2];c[Y+4>>2]=c[fa+136+4>>2];c[Y+8>>2]=c[fa+136+8>>2];c[Y+12>>2]=c[fa+136+12>>2];j=j+1|0}while((j|0)!=(f|0))}c[o+8>>2]=f;if((f|0)>0){j=0;do{Y=(c[(c[d+56>>2]|0)+16>>2]|0)+(j<<4)|0;X=(c[da>>2]|0)+(j<<4)|0;c[Y>>2]=c[X>>2];c[Y+4>>2]=c[X+4>>2];c[Y+8>>2]=c[X+8>>2];c[Y+12>>2]=c[X+12>>2];j=j+1|0}while((j|0)!=(f|0))}if((J|0)>0){I=0;do{A=(c[ca>>2]|0)+((c[(c[ba>>2]|0)+(I<<2)>>2]|0)*12|0)|0;z=A;j=0;do{B=z+4|0;y=c[z+((c[B>>2]|0)*12|0)+8>>2]|0;w=c[_>>2]|0;x=w+(I*36|0)+4|0;k=c[x>>2]|0;p=w+(I*36|0)+8|0;if((k|0)==(c[p>>2]|0)?(N=k|0?k<<1:1,(k|0)<(N|0)):0){if(!N)f=0;else{c[6324]=(c[6324]|0)+1;k=ic((N<<2|3)+16|0)|0;if(!k)k=0;else{c[(k+4+15&-16)+-4>>2]=k;k=k+4+15&-16}f=k;k=c[x>>2]|0}o=w+(I*36|0)+12|0;n=c[o>>2]|0;if((k|0)<=0)if(!n)m=w+(I*36|0)+16|0;else $=132;else{m=0;do{c[f+(m<<2)>>2]=c[n+(m<<2)>>2];m=m+1|0}while((m|0)!=(k|0));$=132}if(($|0)==132){$=0;k=w+(I*36|0)+16|0;if(a[k>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0)}c[o>>2]=0;m=k;k=c[x>>2]|0}a[m>>0]=1;c[o>>2]=f;c[p>>2]=N}c[(c[w+(I*36|0)+12>>2]|0)+(k<<2)>>2]=y;c[x>>2]=(c[x>>2]|0)+1;X=c[z+8>>2]|0;Y=c[da>>2]|0;s=+g[Y+(X<<4)>>2]-+g[Y+(y<<4)>>2];t=+g[Y+(X<<4)+4>>2]-+g[Y+(y<<4)+4>>2];q=+g[Y+(X<<4)+8>>2]-+g[Y+(y<<4)+8>>2];r=1.0/+G(+(s*s+t*t+q*q));if((j|0)<2){g[fa+136+(j<<4)>>2]=s*r;g[fa+136+(j<<4)+4>>2]=t*r;g[fa+136+(j<<4)+8>>2]=q*r;g[fa+136+(j<<4)+12>>2]=0.0;j=j+1|0}Y=z+((c[B>>2]|0)*12|0)|0;z=Y+((c[Y>>2]|0)*12|0)|0}while((z|0)!=(A|0));k=h+(I<<4)|0;if((j|0)==2){H=+g[fa+136+4>>2];K=+g[fa+136+24>>2];O=+g[fa+136+8>>2];P=+g[fa+136+20>>2];E=+g[fa+136+16>>2];D=+g[fa+136>>2];X=h+(I<<4)+4|0;Y=h+(I<<4)+8|0;g[h+(I<<4)+12>>2]=0.0;ga=1.0/+G(+((H*K-O*P)*(H*K-O*P)+(O*E-K*D)*(O*E-K*D)+(P*D-H*E)*(P*D-H*E)));g[k>>2]=(H*K-O*P)*ga;g[X>>2]=(O*E-K*D)*ga;g[Y>>2]=(P*D-H*E)*ga;o=c[_>>2]|0;g[o+(I*36|0)+20>>2]=(H*K-O*P)*ga;c[o+(I*36|0)+24>>2]=c[X>>2];c[o+(I*36|0)+28>>2]=c[Y>>2];g[o+(I*36|0)+32>>2]=10000000150474662.0e14}else{c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;o=c[_>>2]|0}m=c[o+(I*36|0)+4>>2]|0;if((m|0)>0){n=c[(c[d+56>>2]|0)+16>>2]|0;r=+g[k>>2];s=+g[h+(I<<4)+4>>2];t=+g[h+(I<<4)+8>>2];k=c[o+(I*36|0)+12>>2]|0;j=0;q=10000000150474662.0e14;do{Y=c[k+(j<<2)>>2]|0;ga=+g[n+(Y<<4)>>2]*r+ +g[n+(Y<<4)+4>>2]*s+ +g[n+(Y<<4)+8>>2]*t;q=q>ga?ga:q;j=j+1|0}while((j|0)!=(m|0))}else q=10000000150474662.0e14;g[o+(I*36|0)+32>>2]=-q;I=I+1|0}while((I|0)!=(J|0))}if((c[Z>>2]|0)>0){j=0;n=0;o=0;while(1){do if((o|0)==(j|0)){j=o|0?o<<1:1;if((o|0)<(j|0)){if((j|0)!=0?(c[6324]=(c[6324]|0)+1,Q=ic((j<<2|3)+16|0)|0,(Q|0)!=0):0){c[(Q+4+15&-16)+-4>>2]=Q;m=Q+4+15&-16}else m=0;if((o|0)<=0){if(!n)break}else{k=0;do{c[m+(k<<2)>>2]=c[n+(k<<2)>>2];k=k+1|0}while((k|0)!=(o|0))}c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0)}else{j=o;m=n}}else m=n;while(0);c[m+(o<<2)>>2]=o;o=o+1|0;if((o|0)>=(c[Z>>2]|0))break;else n=m}M=fa+36+12|0;N=fa+36+4|0;Q=fa+136+12|0;n=o;while(1){f=n+-1|0;k=c[m+(f<<2)>>2]|0;c[6324]=(c[6324]|0)+1;j=ic(23)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}c[j>>2]=k;Y=c[_>>2]|0;r=+g[Y+(k*36|0)+20>>2];s=+g[Y+(k*36|0)+24>>2];q=+g[Y+(k*36|0)+28>>2];c:do if((n|0)>1){o=f;n=1;k=1;x=f;while(1){f=j;y=k;d:while(1){j=c[_>>2]|0;p=o;do{Y=p;p=p+-1|0;if((Y|0)<=0){L=f;J=y;I=x;break c}w=c[m+(p<<2)>>2]|0}while(!(r*+g[j+(w*36|0)+20>>2]+s*+g[j+(w*36|0)+24>>2]+q*+g[j+(w*36|0)+28>>2]>.9990000128746033));do if((y|0)==(n|0)){n=y|0?y<<1:1;if((y|0)<(n|0)){do if(!n)k=0;else{c[6324]=(c[6324]|0)+1;j=ic((n<<2|3)+16|0)|0;if(!j){k=0;break}c[(j+4+15&-16)+-4>>2]=j;k=j+4+15&-16}while(0);if((y|0)<=0){if(!f)break}else{j=0;do{c[k+(j<<2)>>2]=c[f+(j<<2)>>2];j=j+1|0}while((j|0)!=(y|0))}c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}else{n=y;k=f}}else k=f;while(0);c[k+(y<<2)>>2]=w;y=y+1|0;j=0;while(1){o=m+(j<<2)|0;if((c[o>>2]|0)==(w|0))break;j=j+1|0;if((j|0)>=(x|0)){o=p;f=k;continue d}}if((j|0)<(x|0))break;else{o=p;f=k}}f=x+-1|0;Y=m+(f<<2)|0;c[o>>2]=c[Y>>2];c[Y>>2]=w;if((x|0)>1){o=p;j=k;k=y;x=f}else{o=p;j=k;k=y;x=f;$=161;break}}}else{o=f;n=1;k=1;x=f;$=161}while(0);e:do if(($|0)==161){$=0;p=j;w=k;while(1){j=c[_>>2]|0;do{Y=o;o=o+-1|0;if((Y|0)<=0){L=p;J=w;I=x;break e}f=c[m+(o<<2)>>2]|0}while(!(r*+g[j+(f*36|0)+20>>2]+s*+g[j+(f*36|0)+24>>2]+q*+g[j+(f*36|0)+28>>2]>.9990000128746033));do if((w|0)==(n|0)){n=w|0?w<<1:1;if((w|0)<(n|0)){do if(!n)k=0;else{c[6324]=(c[6324]|0)+1;j=ic((n<<2|3)+16|0)|0;if(!j){k=0;break}c[(j+4+15&-16)+-4>>2]=j;k=j+4+15&-16}while(0);if((w|0)<=0){if(!p){j=k;break}}else{j=0;do{c[k+(j<<2)>>2]=c[p+(j<<2)>>2];j=j+1|0}while((j|0)!=(w|0))}c[6325]=(c[6325]|0)+1;Rc(c[p+-4>>2]|0);j=k}else{n=w;j=p}}else j=p;while(0);c[j+(w<<2)>>2]=f;p=j;w=w+1|0}}while(0);if((J|0)>1){a[fa+36+16>>0]=1;c[M>>2]=0;c[N>>2]=0;c[fa+36+8>>2]=0;z=0;q=0.0;r=0.0;s=0.0;n=0;do{k=c[L+(z<<2)>>2]|0;q=+g[j+(k*36|0)+20>>2]+q;r=+g[j+(k*36|0)+24>>2]+r;s=+g[j+(k*36|0)+28>>2]+s;y=j+(k*36|0)+4|0;if((c[y>>2]|0)>0){x=j+(k*36|0)+12|0;w=0;j=n;while(1){p=c[(c[x>>2]|0)+(w<<2)>>2]|0;Y=(c[(c[d+56>>2]|0)+16>>2]|0)+(p<<4)|0;c[fa+136>>2]=c[Y>>2];c[fa+136+4>>2]=c[Y+4>>2];c[fa+136+8>>2]=c[Y+8>>2];c[fa+136+12>>2]=c[Y+12>>2];f:do if((j|0)>0){n=c[M>>2]|0;k=0;while(1){if((c[n+(k*24|0)+20>>2]|0)==(p|0))break f;k=k+1|0;if((k|0)>=(j|0)){$=262;break}}}else $=262;while(0);if(($|0)==262){$=0;c[fa>>2]=c[fa+136>>2];c[fa+4>>2]=c[fa+136+4>>2];c[fa+8>>2]=c[fa+136+8>>2];c[fa+12>>2]=c[fa+136+12>>2];do if((j|0)==(c[fa+36+8>>2]|0)){f=j|0?j<<1:1;if((j|0)>=(f|0))break;if(!f)o=0;else{c[6324]=(c[6324]|0)+1;j=ic((f*24|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}o=j;j=c[N>>2]|0}n=c[M>>2]|0;if((j|0)<=0){if(n)$=271}else{k=0;do{$=o+(k*24|0)|0;Y=n+(k*24|0)|0;c[$>>2]=c[Y>>2];c[$+4>>2]=c[Y+4>>2];c[$+8>>2]=c[Y+8>>2];c[$+12>>2]=c[Y+12>>2];c[$+16>>2]=c[Y+16>>2];c[$+20>>2]=c[Y+20>>2];k=k+1|0}while((k|0)!=(j|0));$=271}if(($|0)==271){$=0;if(a[fa+36+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0);j=c[N>>2]|0}c[M>>2]=0}a[fa+36+16>>0]=1;c[M>>2]=o;c[fa+36+8>>2]=f}while(0);Y=c[M>>2]|0;X=Y+(j*24|0)|0;c[X>>2]=c[fa>>2];c[X+4>>2]=c[fa+4>>2];c[X+8>>2]=c[fa+8>>2];c[X+12>>2]=c[fa+12>>2];c[X+16>>2]=c[fa+16>>2];c[Y+(j*24|0)+20>>2]=p;j=(c[N>>2]|0)+1|0;c[N>>2]=j}w=w+1|0;if((w|0)>=(c[y>>2]|0)){n=j;break}}}z=z+1|0;j=c[_>>2]|0}while((z|0)!=(J|0));a[fa+16>>0]=1;c[fa+12>>2]=0;c[fa+4>>2]=0;c[fa+8>>2]=0;Y=c[L>>2]|0;c[fa+20>>2]=c[j+(Y*36|0)+20>>2];c[fa+24>>2]=c[j+(Y*36|0)+24>>2];c[fa+28>>2]=c[j+(Y*36|0)+28>>2];c[fa+32>>2]=c[j+(Y*36|0)+32>>2];K=1.0/+G(+(q*q+r*r+s*s));P=q*K;O=r*K;K=s*K;if(+F(+K)>.7071067690849304){H=1.0/+G(+(K*K+O*O));u=P*-(K*H);v=(K*K+O*O)*H;C=0.0;D=O*H;E=-(P*O*H);H=-(K*H)}else{H=1.0/+G(+(P*P+O*O));u=(P*P+O*O)*H;v=-(K*P*H);C=-(O*H);D=0.0;E=K*-(O*H);H=P*H}if((n|0)<2)if((n|0)==1){n=0;o=0;p=0;k=1;while(1){w=c[M>>2]|0;do if((n|0)==(o|0)){f=o|0?o<<1:1;if((o|0)>=(f|0)){f=o;j=p;break}do if(!f)j=0;else{c[6324]=(c[6324]|0)+1;j=ic((f*24|3)+16|0)|0;if(!j){j=0;o=n;break}c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16;o=n}while(0);if((o|0)<=0){if(p|0)$=209}else{k=0;do{$=j+(k*24|0)|0;Y=p+(k*24|0)|0;c[$>>2]=c[Y>>2];c[$+4>>2]=c[Y+4>>2];c[$+8>>2]=c[Y+8>>2];c[$+12>>2]=c[Y+12>>2];c[$+16>>2]=c[Y+16>>2];c[$+20>>2]=c[Y+20>>2];k=k+1|0}while((k|0)!=(o|0));$=209}if(($|0)==209){$=0;c[6325]=(c[6325]|0)+1;Rc(c[p+-4>>2]|0)}o=n;k=c[N>>2]|0}else{f=o;j=p;o=n}while(0);Y=j+(o*24|0)|0;c[Y>>2]=c[w>>2];c[Y+4>>2]=c[w+4>>2];c[Y+8>>2]=c[w+8>>2];c[Y+12>>2]=c[w+12>>2];c[Y+16>>2]=c[w+16>>2];c[Y+20>>2]=c[w+20>>2];n=n+1|0;if((n|0)<(k|0)){o=f;p=j}else{$=277;break}}}else{j=0;$=315}else{o=c[M>>2]|0;k=0;j=n;do{if(C*+g[o+(k*24|0)>>2]+H*+g[o+(k*24|0)+4>>2]+D*+g[o+(k*24|0)+8>>2]<C*+g[o>>2]+H*+g[o+4>>2]+D*+g[o+8>>2]){c[fa+136>>2]=c[o>>2];c[fa+136+4>>2]=c[o+4>>2];c[fa+136+8>>2]=c[o+8>>2];c[fa+136+12>>2]=c[o+12>>2];c[fa+136+16>>2]=c[o+16>>2];c[fa+136+20>>2]=c[o+20>>2];j=o+(k*24|0)|0;c[o>>2]=c[j>>2];c[o+4>>2]=c[j+4>>2];c[o+8>>2]=c[j+8>>2];c[o+12>>2]=c[j+12>>2];c[o+16>>2]=c[j+16>>2];c[o+20>>2]=c[j+20>>2];j=o+(k*24|0)|0;c[j>>2]=c[fa+136>>2];c[j+4>>2]=c[fa+136+4>>2];c[j+8>>2]=c[fa+136+8>>2];c[j+12>>2]=c[fa+136+12>>2];c[j+16>>2]=c[fa+136+16>>2];c[j+20>>2]=c[fa+136+20>>2];j=n}k=k+1|0}while((k|0)<(j|0));g[o+16>>2]=-10000000150474662.0e14;if((j|0)>1){s=+g[o+4>>2];k=1;do{r=+g[o+(k*24|0)>>2]-+g[o>>2];ga=+g[o+(k*24|0)+4>>2]-s;q=+g[o+(k*24|0)+8>>2]-+g[o+8>>2];t=v*r+E*ga+u*q;q=C*r+H*ga+D*q;if(t*t+q*q<1.1920928955078125e-007)g[o+(k*24|0)+16>>2]=0.0;else{r=+F(+t);if(!(q>=0.0))q=2.356194496154785-(q+r)/(r-q)*.7853981852531433;else q=.7853981852531433-(q-r)/(q+r)*.7853981852531433;g[o+(k*24|0)+16>>2]=t<0.0?-q:q}k=k+1|0}while((k|0)!=(j|0))}c[fa+136>>2]=c[o>>2];c[fa+136+4>>2]=c[o+4>>2];c[fa+136+8>>2]=c[o+8>>2];c[fa+136+12>>2]=c[o+12>>2];ff(fa+36|0,fa+136|0,1,j+-1|0);k=c[M>>2]|0;c[6324]=(c[6324]|0)+1;j=ic(43)|0;if(!j)n=0;else{c[(j+4+15&-16)+-4>>2]=j;n=j+4+15&-16}o=c[M>>2]|0;c[n>>2]=c[k>>2];c[n+4>>2]=c[k+4>>2];c[n+8>>2]=c[k+8>>2];c[n+12>>2]=c[k+12>>2];c[n+16>>2]=c[k+16>>2];c[n+20>>2]=c[k+20>>2];c[6324]=(c[6324]|0)+1;j=ic(67)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}c[j>>2]=c[n>>2];c[j+4>>2]=c[n+4>>2];c[j+8>>2]=c[n+8>>2];c[j+12>>2]=c[n+12>>2];c[j+16>>2]=c[n+16>>2];c[j+20>>2]=c[n+20>>2];if(n|0){c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0)}$=j+24|0;c[$>>2]=c[o+24>>2];c[$+4>>2]=c[o+24+4>>2];c[$+8>>2]=c[o+24+8>>2];c[$+12>>2]=c[o+24+12>>2];c[$+16>>2]=c[o+24+16>>2];c[$+20>>2]=c[o+24+20>>2];if((c[N>>2]|0)==2){k=2;n=2}else{k=2;n=2;p=2;o=2;do{g:do if((o|0)>1){w=c[M>>2]|0;x=w+(k*24|0)|0;q=+g[x>>2];r=+g[w+(k*24|0)+4>>2];s=+g[w+(k*24|0)+8>>2];while(1){$=o+-2|0;f=o+-1|0;E=+g[j+($*24|0)>>2];H=E-+g[j+(f*24|0)>>2];C=+g[j+($*24|0)+4>>2];v=C-+g[j+(f*24|0)+4>>2];ga=+g[j+($*24|0)+8>>2];D=ga-+g[j+(f*24|0)+8>>2];if((H*(C-r)-v*(E-q))*K+(P*(v*(ga-s)-D*(C-r))+O*(D*(E-q)-H*(ga-s)))>0.0)break;if((f|0)>1){n=f;o=f}else{n=f;o=w;$=241;break g}}do if((o|0)==(p|0)){w=p<<1;if((p|0)>=(w|0)){w=p;o=p;break}c[6324]=(c[6324]|0)+1;o=ic((p*48|3)+16|0)|0;if(!o)f=0;else{c[(o+4+15&-16)+-4>>2]=o;f=o+4+15&-16}if((n|0)>0){o=0;do{$=f+(o*24|0)|0;Y=j+(o*24|0)|0;c[$>>2]=c[Y>>2];c[$+4>>2]=c[Y+4>>2];c[$+8>>2]=c[Y+8>>2];c[$+12>>2]=c[Y+12>>2];c[$+16>>2]=c[Y+16>>2];c[$+20>>2]=c[Y+20>>2];o=o+1|0}while((o|0)!=(n|0))}c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);j=f;o=n}else w=p;while(0);o=j+(o*24|0)|0;c[o>>2]=c[x>>2];c[o+4>>2]=c[x+4>>2];c[o+8>>2]=c[x+8>>2];c[o+12>>2]=c[x+12>>2];c[o+16>>2]=c[x+16>>2];c[o+20>>2]=c[x+20>>2];o=n+1|0;n=o;p=w;$=239}else $=239;while(0);do if(($|0)==239){$=0;if((o|0)!=1)break;o=c[M>>2]|0;$=241}while(0);if(($|0)==241){w=o+(k*24|0)|0;do if((p|0)==1){c[6324]=(c[6324]|0)+1;o=ic(67)|0;if(!o)f=0;else{c[(o+4+15&-16)+-4>>2]=o;f=o+4+15&-16}if((n|0)<=0){if(!j){p=2;j=f;o=n;break}}else{o=0;do{$=f+(o*24|0)|0;Y=j+(o*24|0)|0;c[$>>2]=c[Y>>2];c[$+4>>2]=c[Y+4>>2];c[$+8>>2]=c[Y+8>>2];c[$+12>>2]=c[Y+12>>2];c[$+16>>2]=c[Y+16>>2];c[$+20>>2]=c[Y+20>>2];o=o+1|0}while((o|0)!=(n|0))}c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);p=2;j=f;o=n}else o=1;while(0);o=j+(o*24|0)|0;c[o>>2]=c[w>>2];c[o+4>>2]=c[w+4>>2];c[o+8>>2]=c[w+8>>2];c[o+12>>2]=c[w+12>>2];c[o+16>>2]=c[w+16>>2];c[o+20>>2]=c[w+20>>2];o=n+1|0;n=o}k=k+1|0}while((k|0)!=(c[N>>2]|0))}$=277}h:do if(($|0)==277){$=0;if((n|0)>0){A=0;o=c[fa+4>>2]|0;k=c[fa+8>>2]|0;while(1){z=j+(A*24|0)+20|0;do if((o|0)==(k|0)){w=k|0?k<<1:1;if((k|0)>=(w|0)){o=k;y=k;break}do if(!w)p=0;else{c[6324]=(c[6324]|0)+1;o=ic((w<<2|3)+16|0)|0;if(!o){p=0;break}c[(o+4+15&-16)+-4>>2]=o;p=o+4+15&-16}while(0);f=c[fa+12>>2]|0;if((k|0)<=0){if(f)$=305}else{o=0;do{c[p+(o<<2)>>2]=c[f+(o<<2)>>2];o=o+1|0}while((o|0)!=(k|0));$=305}if(($|0)==305){$=0;if(a[fa+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[fa+12>>2]=0;k=c[fa+4>>2]|0}a[fa+16>>0]=1;c[fa+12>>2]=p;c[fa+8>>2]=w;o=k;y=w}else y=k;while(0);c[(c[fa+12>>2]|0)+(o<<2)>>2]=c[z>>2];o=o+1|0;c[fa+4>>2]=o;k=c[N>>2]|0;i:do if((k|0)>0){x=c[M>>2]|0;p=c[z>>2]|0;f=0;while(1){w=x+(f*24|0)+20|0;f=f+1|0;if((c[w>>2]|0)==(p|0))break;if((f|0)>=(k|0))break i}c[w>>2]=-1}while(0);A=A+1|0;if((A|0)>=(n|0))break;else k=y}}if((k|0)<=0){$=315;break}x=c[M>>2]|0;y=c[Z>>2]|0;z=c[_>>2]|0;A=(J|0)>0;if((y|0)>0)w=0;else{$=315;break}while(1){B=c[x+(w*24|0)+20>>2]|0;j:do if((B|0)!=-1){if(A)p=0;else{o=0;while(1){f=c[z+(o*36|0)+4>>2]|0;if((f|0)>0){p=c[z+(o*36|0)+12>>2]|0;n=0;do{if((c[p+(n<<2)>>2]|0)==(B|0)){k=1;break h}n=n+1|0}while((n|0)<(f|0))}o=o+1|0;if((o|0)>=(y|0))break j}}do{n=0;while(1){if((c[L+(n<<2)>>2]|0)==(p|0))break;n=n+1|0;if((n|0)>=(J|0)){$=291;break}}do if(($|0)==291){$=0;o=c[z+(p*36|0)+4>>2]|0;if((o|0)<=0)break;f=c[z+(p*36|0)+12>>2]|0;n=0;do{if((c[f+(n<<2)>>2]|0)==(B|0)){k=1;break h}n=n+1|0}while((n|0)<(o|0))}while(0);p=p+1|0}while((p|0)<(y|0))}while(0);w=w+1|0;if((w|0)>=(k|0)){$=315;break}}}while(0);if(($|0)==315){$=0;hh((c[d+56>>2]|0)+24|0,fa);k=0}if(j|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}j=c[fa+12>>2]|0;if(j|0){if(a[fa+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[fa+12>>2]=0}j=c[M>>2]|0;if(j|0){if(a[fa+36+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[M>>2]=0}if(k&(J|0)>0){f=0;$=327}}else if((J|0)==1){f=0;$=327}if(($|0)==327)while(1){$=0;p=c[L+(f<<2)>>2]|0;w=c[_>>2]|0;a[fa+136+16>>0]=1;c[Q>>2]=0;c[fa+136+4>>2]=0;c[fa+136+8>>2]=0;o=c[w+(p*36|0)+4>>2]|0;if((o|0)>0){c[6324]=(c[6324]|0)+1;n=ic((o<<2|3)+16|0)|0;do if(!n){k=0;j=0;$=331}else{c[(n+4+15&-16)+-4>>2]=n;j=c[Q>>2]|0;if(!j){k=n+4+15&-16;j=n+4+15&-16;$=331;break}c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);a[fa+136+16>>0]=1;c[Q>>2]=n+4+15&-16;c[fa+136+8>>2]=o;yn(n+4+15&-16|0,0,o<<2|0)|0;j=n+4+15&-16}while(0);if(($|0)==331){$=0;a[fa+136+16>>0]=1;c[Q>>2]=k;c[fa+136+8>>2]=o;yn(k|0,0,o<<2|0)|0}c[fa+136+4>>2]=o;n=c[w+(p*36|0)+12>>2]|0;k=0;do{c[j+(k<<2)>>2]=c[n+(k<<2)>>2];k=k+1|0}while((k|0)!=(o|0));j=c[Q>>2]|0}else{c[fa+136+4>>2]=o;j=0}c[fa+136+20>>2]=c[w+(p*36|0)+20>>2];c[fa+136+20+4>>2]=c[w+(p*36|0)+20+4>>2];c[fa+136+20+8>>2]=c[w+(p*36|0)+20+8>>2];c[fa+136+20+12>>2]=c[w+(p*36|0)+20+12>>2];hh((c[d+56>>2]|0)+24|0,fa+136|0);if(j|0){if(a[fa+136+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[Q>>2]=0}f=f+1|0;if((f|0)>=(J|0))break;else $=327}if(L|0){c[6325]=(c[6325]|0)+1;Rc(c[L+-4>>2]|0)}if(!I)break;else n=I}}else m=0;Y=c[d+56>>2]|0;c[Y+64>>2]=0;c[Y+64+4>>2]=0;c[Y+64+8>>2]=0;c[Y+64+12>>2]=0;j=c[Y+28>>2]|0;if((j|0)>0){X=0;x=0;k=0;n=0;J=0;A=0;y=0;o=0;B=0;w=0;f=0;z=0;p=0;while(1){I=c[Y+36>>2]|0;W=c[I+(X*36|0)+4>>2]|0;if((W|0)>0){V=X&65535;U=X|-65536;L=0;S=A;Q=w;N=p;j=I;while(1){T=L+1|0;d=c[j+(X*36|0)+12>>2]|0;w=c[d+(L<<2)>>2]&65535;L=c[d+(((T|0)==(W|0)?0:T)<<2)>>2]&65535;d=L<<16>>16>w<<16>>16?w:L;R=L<<16>>16>w<<16>>16?L:w;p=L<<16>>16>w<<16>>16?w:L;w=L<<16>>16>w<<16>>16?L:w;L=Q+-1|0;k:do if((((p&65535)<<16)+(w<<16>>16)&L)>>>0<J>>>0?(aa=c[n+((((p&65535)<<16)+(w<<16>>16)&L)<<2)>>2]|0,(aa|0)!=-1):0){j=aa;while(1){if(w<<16>>16==(b[k+(j<<2)>>1]|0)?p<<16>>16==(b[k+(j<<2)+2>>1]|0):0)break;j=c[o+(j<<2)>>2]|0;if((j|0)==-1){I=0;break k}}I=f+(j<<2)|0}else I=0;while(0);j=c[Y+16>>2]|0;u=+g[j+(p<<16>>16<<4)>>2]-+g[j+(w<<16>>16<<4)>>2];v=+g[j+(p<<16>>16<<4)+4>>2]-+g[j+(w<<16>>16<<4)+4>>2];s=+g[j+(p<<16>>16<<4)+8>>2]-+g[j+(w<<16>>16<<4)+8>>2];t=1.0/+G(+(u*u+v*v+s*s));j=c[Y+48>>2]|0;l:do if((j|0)>0){w=c[Y+56>>2]|0;p=0;while(1){q=+g[w+(p<<4)>>2];r=+g[w+(p<<4)+8>>2];do if(!(+F(+(q-u*t))>1.0e-006)){if(+F(+(+g[w+(p<<4)+4>>2]-v*t))>1.0e-006)break;if(!(+F(+(r-s*t))>1.0e-006))break l}while(0);do if(!(+F(+(u*t+q))>1.0e-006)){if(+F(+(v*t+ +g[w+(p<<4)+4>>2]))>1.0e-006)break;if(!(+F(+(s*t+r))>1.0e-006))break l}while(0);p=p+1|0;if((p|0)>=(j|0)){$=368;break}}}else $=368;while(0);if(($|0)==368){$=0;do if((j|0)==(c[Y+52>>2]|0)){A=j|0?j<<1:1;if((j|0)>=(A|0))break;if(!A)w=0;else{c[6324]=(c[6324]|0)+1;j=ic((A<<4|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}w=j;j=c[Y+48>>2]|0}if((j|0)>0){p=0;do{M=w+(p<<4)|0;ha=(c[Y+56>>2]|0)+(p<<4)|0;c[M>>2]=c[ha>>2];c[M+4>>2]=c[ha+4>>2];c[M+8>>2]=c[ha+8>>2];c[M+12>>2]=c[ha+12>>2];p=p+1|0}while((p|0)!=(j|0))}j=c[Y+56>>2]|0;if(j|0){if(a[Y+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[Y+56>>2]=0}a[Y+60>>0]=1;c[Y+56>>2]=w;c[Y+52>>2]=A;j=c[Y+48>>2]|0}while(0);ha=c[Y+56>>2]|0;g[ha+(j<<4)>>2]=u*t;g[ha+(j<<4)+4>>2]=v*t;g[ha+(j<<4)+8>>2]=s*t;g[ha+(j<<4)+12>>2]=0.0;c[Y+48>>2]=(c[Y+48>>2]|0)+1}m:do if(!I){I=((d&65535)<<16)+(R<<16>>16)&L;n:do if(I>>>0<J>>>0){j=c[n+(I<<2)>>2]|0;if((j|0)==-1)break;while(1){if(R<<16>>16==(b[k+(j<<2)>>1]|0)?d<<16>>16==(b[k+(j<<2)+2>>1]|0):0)break;j=c[o+(j<<2)>>2]|0;if((j|0)==-1)break n}I=f+(j<<2)|0;b[I>>1]=U;b[I+2>>1]=U>>>16;I=J;A=S;w=Q;j=z;p=N;break m}while(0);do if((B|0)==(Q|0)){w=B|0?B<<1:1;if((B|0)>=(w|0)){w=B;break}do if(!w)p=0;else{c[6324]=(c[6324]|0)+1;j=ic((w<<2|3)+16|0)|0;if(!j){p=0;break}c[(j+4+15&-16)+-4>>2]=j;p=j+4+15&-16}while(0);if((B|0)<=0){if(!f){f=p;break}}else{j=0;do{ha=p+(j<<2)|0;M=f+(j<<2)|0;M=e[M>>1]|e[M+2>>1]<<16;b[ha>>1]=M;b[ha+2>>1]=M>>>16;j=j+1|0}while((j|0)!=(B|0))}c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);f=p}else w=Q;while(0);M=f+(B<<2)|0;b[M>>1]=U;b[M+2>>1]=U>>>16;M=B+1|0;do if((N|0)==(x|0)){x=N|0?N<<1:1;if((N|0)>=(x|0)){x=N;break}do if(!x)p=0;else{c[6324]=(c[6324]|0)+1;j=ic((x<<2|3)+16|0)|0;if(!j){p=0;break}c[(j+4+15&-16)+-4>>2]=j;p=j+4+15&-16}while(0);if((N|0)<=0){if(!k){k=p;break}}else{j=0;do{ha=p+(j<<2)|0;L=k+(j<<2)|0;L=e[L>>1]|e[L+2>>1]<<16;b[ha>>1]=L;b[ha+2>>1]=L>>>16;j=j+1|0}while((j|0)!=(N|0))}c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);k=p}while(0);L=k+(N<<2)|0;b[L>>1]=(d&65535)<<16|R&65535;b[L+2>>1]=((d&65535)<<16|R&65535)>>>16;L=N+1|0;if((Q|0)<(w|0)){do if((J|0)<(w|0)){do if((z|0)<(w|0)){do if(!w)j=0;else{c[6324]=(c[6324]|0)+1;j=ic((w<<2|3)+16|0)|0;if(!j){j=0;break}c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}while(0);if((J|0)<=0){if(!n){n=j;z=w;break}}else{p=0;do{c[j+(p<<2)>>2]=c[n+(p<<2)>>2];p=p+1|0}while((p|0)!=(J|0))}c[6325]=(c[6325]|0)+1;Rc(c[n+-4>>2]|0);n=j;z=w}while(0);A=w<<2;yn(n+(J<<2)|0,0,A-(J<<2)|0)|0;if((S|0)<(w|0)){do if((y|0)<(w|0)){do if(!w)p=0;else{c[6324]=(c[6324]|0)+1;j=ic((A|3)+16|0)|0;if(!j){p=0;break}c[(j+4+15&-16)+-4>>2]=j;p=j+4+15&-16}while(0);if((S|0)<=0){if(!o){j=w;o=p;break}}else{j=0;do{c[p+(j<<2)>>2]=c[o+(j<<2)>>2];j=j+1|0}while((j|0)!=(S|0))}c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0);j=w;o=p}else j=y;while(0);yn(o+(S<<2)|0,0,A-(S<<2)|0)|0;y=j}if((w|0)>0){yn(n|0,-1,A|0)|0;yn(o|0,-1,A|0)|0}if((J|0)<=0){p=w;A=w;j=z;break}p=w+-1|0;j=0;do{ha=n+(((e[k+(j<<2)+2>>1]<<16)+(b[k+(j<<2)>>1]|0)&p)<<2)|0;c[o+(j<<2)>>2]=c[ha>>2];c[ha>>2]=j;j=j+1|0}while((j|0)!=(J|0));p=w;A=w;j=z}else{p=J;A=S;j=z}while(0);I=((d&65535)<<16)+(R<<16>>16)&w+-1}else{p=J;A=S;j=z}I=n+(I<<2)|0;c[o+(B<<2)>>2]=c[I>>2];c[I>>2]=B;I=p;B=M;p=L}else{b[I+2>>1]=V;I=J;A=S;w=Q;j=z;p=N}while(0);if((T|0)>=(W|0))break;L=T;J=I;S=A;Q=w;z=j;N=p;j=c[Y+36>>2]|0}z=j;j=c[Y+28>>2]|0}else I=J;X=X+1|0;if((X|0)>=(j|0))break;else J=I}if((j|0)>0){A=c[Y+36>>2]|0;B=c[Y+16>>2]|0;z=0;q=0.0;do{w=c[A+(z*36|0)+4>>2]|0;x=c[A+(z*36|0)+12>>2]|0;y=c[x>>2]|0;if((w+-2|0)>=1){p=1;r=+g[Y+64>>2];s=+g[Y+68>>2];t=+g[Y+72>>2];do{aa=c[x+(p<<2)>>2]|0;p=p+1|0;ha=c[x+(((p|0)%(w|0)|0)<<2)>>2]|0;u=+g[B+(y<<4)>>2];v=+g[B+(aa<<4)>>2];D=+g[B+(y<<4)+4>>2];E=+g[B+(aa<<4)+4>>2];K=+g[B+(y<<4)+8>>2];O=+g[B+(aa<<4)+8>>2];C=+g[B+(ha<<4)>>2];H=+g[B+(ha<<4)+4>>2];P=+g[B+(ha<<4)+8>>2];ga=+G(+(((u-v)*(D-H)-(D-E)*(u-C))*((u-v)*(D-H)-(D-E)*(u-C))+(((D-E)*(K-P)-(K-O)*(D-H))*((D-E)*(K-P)-(K-O)*(D-H))+((K-O)*(u-C)-(u-v)*(K-P))*((K-O)*(u-C)-(u-v)*(K-P)))))*.5;r=r+(u+v+C)*.3333333432674408*ga;g[Y+64>>2]=r;s=(D+E+H)*.3333333432674408*ga+s;g[Y+68>>2]=s;t=ga*(K+O+P)*.3333333432674408+t;g[Y+72>>2]=t;q=q+ga}while((p|0)!=(w+-1|0))}z=z+1|0}while((z|0)!=(j|0));p=Y+64|0;x=k;w=n;k=1}else $=347}else{k=0;n=0;o=0;f=0;$=347}if(($|0)==347){q=0.0;p=Y+64|0;x=k;w=n;k=0}t=1.0/q;u=t*+g[p>>2];g[p>>2]=u;s=t*+g[Y+68>>2];g[Y+68>>2]=s;t=t*+g[Y+72>>2];g[Y+72>>2]=t;g[Y+96>>2]=34028234663852886.0e22;if(k){n=c[Y+36>>2]|0;k=0;r=34028234663852886.0e22;while(1){q=+F(+(+g[n+(k*36|0)+32>>2]+(+g[n+(k*36|0)+20>>2]*u+ +g[n+(k*36|0)+24>>2]*s+ +g[n+(k*36|0)+28>>2]*t)));if(q<r)g[Y+96>>2]=q;else q=r;k=k+1|0;if((k|0)>=(j|0)){C=q;break}else r=q}}else C=34028234663852886.0e22;k=c[Y+8>>2]|0;if((k|0)>0){n=c[Y+16>>2]|0;j=0;u=-34028234663852886.0e22;v=-34028234663852886.0e22;t=-34028234663852886.0e22;s=34028234663852886.0e22;r=34028234663852886.0e22;q=34028234663852886.0e22;do{ga=+g[n+(j<<4)>>2];q=ga<q?ga:q;t=ga>t?ga:t;ga=+g[n+(j<<4)+4>>2];r=ga<r?ga:r;v=ga>v?ga:v;ga=+g[n+(j<<4)+8>>2];s=ga<s?ga:s;u=ga>u?ga:u;j=j+1|0}while((j|0)!=(k|0))}else{u=-34028234663852886.0e22;v=-34028234663852886.0e22;t=-34028234663852886.0e22;s=34028234663852886.0e22;r=34028234663852886.0e22;q=34028234663852886.0e22}g[Y+100>>2]=q+t;g[Y+104>>2]=r+v;g[Y+108>>2]=s+u;g[Y+112>>2]=0.0;ga=t-q;r=v-r;q=u-s;g[Y+116>>2]=ga;g[Y+120>>2]=r;g[Y+124>>2]=q;g[Y+128>>2]=0.0;s=C/1.7320507764816284;p=ga<r?(r<q?2:1):ga<q?2:0;q=(+g[Y+116+(p<<2)>>2]*.5-s)*.0009765625;g[Y+88>>2]=s;g[Y+84>>2]=s;g[Y+80>>2]=s;r=+g[Y+116+(p<<2)>>2]*.5;g[Y+80+(p<<2)>>2]=r;j=0;while(1){if(Xg(Y)|0){$=453;break}r=r-q;g[Y+80+(p<<2)>>2]=r;j=j+1|0;if((j|0)>=1024){$=452;break}}o:do if(($|0)==452){g[Y+88>>2]=s;g[Y+84>>2]=s;g[Y+80>>2]=s}else if(($|0)==453){q=(+g[Y+96>>2]-s)*.0009765625;j=0;n=c[Y+80+((1<<(1<<p&3)&3)<<2)>>2]|0;while(1){k=c[Y+80+((1<<p&3)<<2)>>2]|0;g[Y+80+((1<<p&3)<<2)>>2]=q+(c[l>>2]=k,+g[l>>2]);r=q+ +g[Y+80+((1<<(1<<p&3)&3)<<2)>>2];g[Y+80+((1<<(1<<p&3)&3)<<2)>>2]=r;j=j+1|0;if(!(Xg(Y)|0))break;if((j|0)>=1024)break o;else n=(g[l>>2]=r,c[l>>2]|0)}c[Y+80+((1<<p&3)<<2)>>2]=k;c[Y+80+((1<<(1<<p&3)&3)<<2)>>2]=n}while(0);if(x|0){c[6325]=(c[6325]|0)+1;Rc(c[x+-4>>2]|0)}if(f|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}if(o|0){c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}if(w|0){c[6325]=(c[6325]|0)+1;Rc(c[w+-4>>2]|0)}if(m|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0)}f=c[Z>>2]|0;p=c[_>>2]|0;if((f|0)<=0){if(p|0)$=474}else{j=0;do{m=p+(j*36|0)+4|0;n=p+(j*36|0)+12|0;o=c[n>>2]|0;k=p+(j*36|0)+16|0;if(o|0){if(a[k>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[o+-4>>2]|0)}c[n>>2]=0}a[k>>0]=1;c[n>>2]=0;c[m>>2]=0;c[p+(j*36|0)+8>>2]=0;j=j+1|0}while((j|0)!=(f|0));$=474}if(($|0)==474){if(a[fa+56+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[p+-4>>2]|0)}c[_>>2]=0}if(h|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}h=c[ba>>2]|0;if(h|0){if(a[fa+76+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[ba>>2]=0}a[fa+76+56>>0]=1;c[ba>>2]=0;c[fa+76+44>>2]=0;c[fa+76+48>>2]=0;h=c[ca>>2]|0;if(h|0){if(a[fa+76+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[ca>>2]=0}a[fa+76+36>>0]=1;c[ca>>2]=0;c[fa+76+24>>2]=0;c[fa+76+28>>2]=0;h=c[da>>2]|0;if(h|0){if(a[fa+76+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[da>>2]=0}if(!ea){i=fa;return 1}c[6325]=(c[6325]|0)+1;Rc(c[ea+-4>>2]|0);i=fa;return 1}function _b(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,H=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0.0,aa=0,ba=0.0,ca=0.0,da=0.0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0,pa=0,qa=0,ra=0,sa=0.0,ta=0.0;ra=i;i=i+704|0;k=c[b+60>>2]|0;if(!k){k=c[b+4>>2]|0;k=yb[c[(c[k>>2]|0)+12>>2]&63](k,c[d+8>>2]|0,c[e+8>>2]|0)|0;c[b+60>>2]=k;a[b+56>>0]=1}c[h+4>>2]=k;oa=c[d+4>>2]|0;pa=c[e+4>>2]|0;j=c[oa+4>>2]|0;m=c[pa+4>>2]|0;if((j|0)==10&(m|0)==10){P=+g[k+784>>2];ja=c[oa+56>>2]|0;y=+g[oa+32+(ja<<2)>>2];O=+g[oa+32+(((ja+2|0)%3|0)<<2)>>2];qa=c[pa+56>>2]|0;r=+g[pa+32+(qa<<2)>>2];N=+g[pa+32+(((qa+2|0)%3|0)<<2)>>2];b=c[d+12>>2]|0;d=c[e+12>>2]|0;D=+g[b+(ja<<2)>>2];H=+g[b+16+(ja<<2)>>2];E=+g[b+32+(ja<<2)>>2];q=+g[d+(qa<<2)>>2];s=+g[d+16+(qa<<2)>>2];u=+g[d+32+(qa<<2)>>2];K=+g[d+48>>2];L=+g[d+52>>2];M=+g[d+56>>2];A=K-+g[b+48>>2];B=L-+g[b+52>>2];C=M-+g[b+56>>2];o=1.0-(D*q+H*s+E*u)*(D*q+H*s+E*u);if(!(o==0.0)){o=(D*A+H*B+E*C-(D*q+H*s+E*u)*(q*A+s*B+u*C))/o;if(!(o<-y)){if(o>y)o=y}else o=-y}else o=0.0;p=(D*q+H*s+E*u)*o-(q*A+s*B+u*C);if(p<-r){o=(D*q+H*s+E*u)*-r+(D*A+H*B+E*C);if(!(o<-y))if(o>y){p=-r;o=y}else p=-r;else{p=-r;o=-y}}else if(p>r){o=r*(D*q+H*s+E*u)+(D*A+H*B+E*C);if(!(o<-y))if(o>y){p=r;o=y}else p=r;else{p=r;o=-y}}z=q*p;y=s*p;u=u*p;p=z+(A-D*o);r=y+(B-H*o);o=u+(C-E*o);s=+G(+(o*o+(p*p+r*r)));if(!(s-O-N>P)){do if(o*o+(p*p+r*r)<=1.4210854715202004e-014)if(+F(+E)>.7071067690849304){o=1.0/+G(+(H*H+E*E));g[ra+280>>2]=0.0;g[ra+280+4>>2]=-(E*o);g[ra+280+8>>2]=H*o;q=0.0;p=-(E*o);o=H*o;break}else{p=1.0/+G(+(D*D+H*H));g[ra+280>>2]=-(H*p);g[ra+280+4>>2]=D*p;g[ra+280+8>>2]=0.0;q=-(H*p);p=D*p;o=0.0;break}else{g[ra+280>>2]=p*-(1.0/s);g[ra+280+4>>2]=r*-(1.0/s);g[ra+280+8>>2]=o*-(1.0/s);g[ra+280+12>>2]=0.0;q=p*-(1.0/s);p=r*-(1.0/s);o=o*-(1.0/s)}while(0);g[ra+264>>2]=N*q+(z+K);g[ra+264+4>>2]=N*p+(y+L);g[ra+264+8>>2]=N*o+(u+M);g[ra+264+12>>2]=0.0}if(s-O-N<P){Tb[c[(c[h>>2]|0)+16>>2]&15](h,ra+280|0,ra+264|0,s-O-N);k=c[h+4>>2]|0}if(!(c[k+780>>2]|0)){i=ra;return}m=c[k+772>>2]|0;n=c[(c[h+8>>2]|0)+8>>2]|0;j=c[(c[h+12>>2]|0)+8>>2]|0;if((m|0)==(n|0)){Te(k,m+4|0,j+4|0);i=ra;return}else{Te(k,j+4|0,n+4|0);i=ra;return}}g[ra+128+128>>2]=999999984306749440.0;w=c[b+8>>2]|0;t=c[b+12>>2]|0;c[ra+48>>2]=8848;c[ra+48+4>>2]=0;c[ra+48+8>>2]=1065353216;c[ra+48+12>>2]=0;g[ra+48+16>>2]=0.0;c[ra+48+20>>2]=t;c[ra+48+24>>2]=w;c[ra+48+28>>2]=oa;c[ra+48+32>>2]=pa;c[ra+48+36>>2]=j;c[ra+48+40>>2]=m;g[ra+48+44>>2]=+Cb[c[(c[oa>>2]|0)+48>>2]&15](oa);g[ra+48+48>>2]=+Cb[c[(c[pa>>2]|0)+48>>2]&15](pa);a[ra+48+52>>0]=0;c[ra+48+60>>2]=-1;c[ra+48+72>>2]=1;c[ra+48+76>>2]=1;c[ra+48+28>>2]=oa;c[ra+48+32>>2]=pa;ma=+Cb[c[(c[oa>>2]|0)+48>>2]&15](oa);na=+Cb[c[(c[pa>>2]|0)+48>>2]&15](pa);na=ma+na+ +g[(c[b+60>>2]|0)+784>>2];g[ra+128+128>>2]=na*na;w=c[d+12>>2]|0;c[ra+128>>2]=c[w>>2];c[ra+128+4>>2]=c[w+4>>2];c[ra+128+8>>2]=c[w+8>>2];c[ra+128+12>>2]=c[w+12>>2];m=ra+128+16|0;c[m>>2]=c[w+16>>2];c[m+4>>2]=c[w+16+4>>2];c[m+8>>2]=c[w+16+8>>2];c[m+12>>2]=c[w+16+12>>2];t=ra+128+32|0;c[t>>2]=c[w+32>>2];c[t+4>>2]=c[w+32+4>>2];c[t+8>>2]=c[w+32+8>>2];c[t+12>>2]=c[w+32+12>>2];v=ra+128+48|0;c[v>>2]=c[w+48>>2];c[v+4>>2]=c[w+48+4>>2];c[v+8>>2]=c[w+48+8>>2];c[v+12>>2]=c[w+48+12>>2];w=ra+128+64|0;j=c[e+12>>2]|0;c[w>>2]=c[j>>2];c[w+4>>2]=c[j+4>>2];c[w+8>>2]=c[j+8>>2];c[w+12>>2]=c[j+12>>2];x=ra+128+80|0;c[x>>2]=c[j+16>>2];c[x+4>>2]=c[j+16+4>>2];c[x+8>>2]=c[j+16+8>>2];c[x+12>>2]=c[j+16+12>>2];Q=ra+128+96|0;c[Q>>2]=c[j+32>>2];c[Q+4>>2]=c[j+32+4>>2];c[Q+8>>2]=c[j+32+8>>2];c[Q+12>>2]=c[j+32+12>>2];R=ra+128+112|0;c[R>>2]=c[j+48>>2];c[R+4>>2]=c[j+48+4>>2];c[R+8>>2]=c[j+48+8>>2];c[R+12>>2]=c[j+48+12>>2];j=c[oa+4>>2]|0;if((j|0)<7?(n=c[pa+4>>2]|0,(n|0)<7):0){c[ra+40>>2]=9288;if(!j){j=n;p=0.0}else{p=+Cb[c[(c[oa>>2]|0)+48>>2]&15](oa);j=c[pa+4>>2]|0}if(!j)o=0.0;else o=+Cb[c[(c[pa>>2]|0)+48>>2]&15](pa);c[ra>>2]=9316;c[ra+4>>2]=h;g[ra+24>>2]=p;g[ra+28>>2]=o;a[ra+36>>0]=0;ha=c[oa+56>>2]|0;a:do if(ha|0){ia=c[pa+56>>2]|0;do if(!ia){if((c[pa+4>>2]|0)!=1)break a;v=ra+640+16|0;a[v>>0]=1;w=ra+640+12|0;c[w>>2]=0;t=ra+640+4|0;c[t>>2]=0;n=ra+640+8|0;c[n>>2]=0;j=c[e+12>>2]|0;ma=+g[pa+60>>2];na=+g[pa+60+4>>2];q=+g[pa+60+8>>2];o=ma*+g[j>>2]+na*+g[j+4>>2]+q*+g[j+8>>2]+ +g[j+48>>2];p=ma*+g[j+16>>2]+na*+g[j+20>>2]+q*+g[j+24>>2]+ +g[j+52>>2];q=ma*+g[j+32>>2]+na*+g[j+36>>2]+q*+g[j+40>>2]+ +g[j+56>>2];c[6324]=(c[6324]|0)+1;j=ic(35)|0;if(!j)k=0;else{c[(j+4+15&-16)+-4>>2]=j;k=j+4+15&-16}j=c[w>>2]|0;if(!j)j=0;else{c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);j=c[t>>2]|0;c[w>>2]=0}a[v>>0]=1;c[w>>2]=k;c[n>>2]=1;g[k+(j<<4)>>2]=o;g[k+(j<<4)+4>>2]=p;g[k+(j<<4)+8>>2]=q;g[k+(j<<4)+12>>2]=0.0;j=(c[t>>2]|0)+1|0;c[t>>2]=j;qa=c[e+12>>2]|0;ma=+g[pa+60+16>>2];na=+g[pa+60+20>>2];q=+g[pa+60+24>>2];o=ma*+g[qa>>2]+na*+g[qa+4>>2]+q*+g[qa+8>>2]+ +g[qa+48>>2];p=ma*+g[qa+16>>2]+na*+g[qa+20>>2]+q*+g[qa+24>>2]+ +g[qa+52>>2];q=ma*+g[qa+32>>2]+na*+g[qa+36>>2]+q*+g[qa+40>>2]+ +g[qa+56>>2];if((j|0)==(c[n>>2]|0)?(S=j|0?j<<1:1,(j|0)<(S|0)):0){if(!S)m=0;else{c[6324]=(c[6324]|0)+1;j=ic((S<<4|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}m=j;j=c[t>>2]|0}if((j|0)>0){k=0;do{qa=m+(k<<4)|0;ja=(c[w>>2]|0)+(k<<4)|0;c[qa>>2]=c[ja>>2];c[qa+4>>2]=c[ja+4>>2];c[qa+8>>2]=c[ja+8>>2];c[qa+12>>2]=c[ja+12>>2];k=k+1|0}while((k|0)!=(j|0))}j=c[w>>2]|0;if(j|0){if(a[v>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[w>>2]=0}a[v>>0]=1;c[w>>2]=m;c[n>>2]=S;j=c[t>>2]|0}qa=c[w>>2]|0;g[qa+(j<<4)>>2]=o;g[qa+(j<<4)+4>>2]=p;g[qa+(j<<4)+8>>2]=q;g[qa+(j<<4)+12>>2]=0.0;j=(c[t>>2]|0)+1|0;c[t>>2]=j;e=c[e+12>>2]|0;ma=+g[pa+60+32>>2];na=+g[pa+60+36>>2];q=+g[pa+60+40>>2];o=ma*+g[e>>2]+na*+g[e+4>>2]+q*+g[e+8>>2]+ +g[e+48>>2];p=ma*+g[e+16>>2]+na*+g[e+20>>2]+q*+g[e+24>>2]+ +g[e+52>>2];q=ma*+g[e+32>>2]+na*+g[e+36>>2]+q*+g[e+40>>2]+ +g[e+56>>2];if((j|0)==(c[n>>2]|0)?(T=j|0?j<<1:1,(j|0)<(T|0)):0){if(!T)m=0;else{c[6324]=(c[6324]|0)+1;j=ic((T<<4|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}m=j;j=c[t>>2]|0}if((j|0)>0){k=0;do{e=m+(k<<4)|0;qa=(c[w>>2]|0)+(k<<4)|0;c[e>>2]=c[qa>>2];c[e+4>>2]=c[qa+4>>2];c[e+8>>2]=c[qa+8>>2];c[e+12>>2]=c[qa+12>>2];k=k+1|0}while((k|0)!=(j|0))}j=c[w>>2]|0;if(j|0){if(a[v>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[w>>2]=0}a[v>>0]=1;c[w>>2]=m;c[n>>2]=T;j=c[t>>2]|0}e=c[w>>2]|0;g[e+(j<<4)>>2]=o;g[e+(j<<4)+4>>2]=p;g[e+(j<<4)+8>>2]=q;g[e+(j<<4)+12>>2]=0.0;c[t>>2]=(c[t>>2]|0)+1;r=+g[(c[b+60>>2]|0)+784>>2];uc(ra+48|0,ra+128|0,ra+40|0,c[f+20>>2]|0,0);o=+g[ra+48+4>>2];p=+g[ra+48+8>>2];q=+g[ra+48+12>>2];if(o*o+p*p+q*q>1.1920928955078125e-007){na=1.0/(o*o+p*p+q*q);g[ra+400>>2]=o*na;g[ra+400+4>>2]=p*na;g[ra+400+8>>2]=q*na;g[ra+400+12>>2]=0.0;na=+g[ra+48+56>>2];o=+Cb[c[(c[oa>>2]|0)+48>>2]&15](oa);o=na-o-+Cb[c[(c[pa>>2]|0)+48>>2]&15](pa);j=c[b+40>>2]|0;if((j|0)<0){if((c[b+44>>2]|0)<0){k=c[b+48>>2]|0;if(k|0){if(a[b+52>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[b+48>>2]=0}a[b+52>>0]=1;c[b+48>>2]=0;c[b+44>>2]=0}do{e=(c[b+48>>2]|0)+(j<<4)|0;c[e>>2]=c[ra+384>>2];c[e+4>>2]=c[ra+384+4>>2];c[e+8>>2]=c[ra+384+8>>2];c[e+12>>2]=c[ra+384+12>>2];j=j+1|0}while((j|0)!=0)}c[b+40>>2]=0;Fc(ra+400|0,c[oa+56>>2]|0,c[d+12>>2]|0,ra+640|0,b+36|0,o-r,r,h)}do if(a[b+56>>0]|0?(U=c[h+4>>2]|0,c[U+780>>2]|0):0){k=c[U+772>>2]|0;m=c[(c[h+8>>2]|0)+8>>2]|0;j=c[(c[h+12>>2]|0)+8>>2]|0;if((k|0)==(m|0)){Te(U,k+4|0,j+4|0);break}else{Te(U,j+4|0,m+4|0);break}}while(0);j=c[w>>2]|0;if(j|0){if(a[v>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[w>>2]=0}}else{na=+g[(c[b+60>>2]|0)+784>>2];b:do if(!(a[f+24>>0]|0)){uc(ra+48|0,ra+128|0,ra,c[f+20>>2]|0,0);o=+g[ra+32>>2];if(o<0.0&(a[ra+36>>0]|0)!=0){p=+g[ra+8>>2];q=+g[ra+12>>2];r=+g[ra+16>>2];m=c[ra+20>>2]|0;ja=111}}else{fa=c[d+12>>2]|0;ga=c[e+12>>2]|0;c[6323]=(c[6323]|0)+1;P=+g[ha+64>>2];$=+g[ha+68>>2];s=+g[fa+4>>2];ba=+g[ha+72>>2];u=+g[fa+8>>2];z=+g[fa+16>>2];B=+g[fa+20>>2];D=+g[fa+24>>2];E=+g[fa+32>>2];C=+g[fa+36>>2];A=+g[fa+40>>2];ca=+g[ia+64>>2];da=+g[ia+68>>2];ma=+g[ia+72>>2];ka=P*+g[fa>>2]+$*s+ba*u+ +g[fa+48>>2]-(ca*+g[ga>>2]+da*+g[ga+4>>2]+ma*+g[ga+8>>2]+ +g[ga+48>>2]);la=P*z+$*B+ba*D+ +g[fa+52>>2]-(ca*+g[ga+16>>2]+da*+g[ga+20>>2]+ma*+g[ga+24>>2]+ +g[ga+52>>2]);ma=P*E+$*C+ba*A+ +g[fa+56>>2]-(ca*+g[ga+32>>2]+da*+g[ga+36>>2]+ma*+g[ga+40>>2]+ +g[ga+56>>2]);m=c[ha+28>>2]|0;c:do if((m|0)>0){o=34028234663852886.0e22;j=0;y=0.0;p=0.0;q=0.0;r=0.0;H=z;while(1){ea=c[ha+36>>2]|0;ba=+g[ea+(j*36|0)+20>>2];ca=+g[ea+(j*36|0)+24>>2];da=+g[ea+(j*36|0)+28>>2];z=ba*+g[fa>>2]+ca*s+da*u;u=ba*H+ca*B+da*D;s=ba*E+ca*C+da*A;g[ra+296>>2]=z;g[ra+296+4>>2]=u;g[ra+296+8>>2]=s;g[ra+296+12>>2]=0.0;if(ka*z+la*u+ma*s<0.0){g[ra+296>>2]=-z;g[ra+296+4>>2]=-u;g[ra+296+8>>2]=-s;D=-z;u=-u;s=-s}else D=z;c[6321]=(c[6321]|0)+1;if(Gi(fa,ga,ka,la,ma,D,u,s,ha,ia,o)|0){c[6322]=(c[6322]|0)+1;Ug(ha,fa,ra+296|0,ra+640|0,ra+400|0,ra+360|0,ra+344|0);Ug(ia,ga,ra+296|0,ra+384|0,ra+376|0,ra+328|0,ra+312|0);z=+g[ra+400>>2];A=+g[ra+384>>2];do if(z<A)k=0;else{B=+g[ra+376>>2];C=+g[ra+640>>2];if(B<C){k=0;break}k=1;y=z-A<B-C?z-A:B-C}while(0);if(!k)break;if(y<o){o=y;p=D;q=u;r=s}}j=j+1|0;if((j|0)>=(m|0))break c;s=+g[fa+4>>2];u=+g[fa+8>>2];H=+g[fa+16>>2];B=+g[fa+20>>2];D=+g[fa+24>>2];E=+g[fa+32>>2];C=+g[fa+36>>2];A=+g[fa+40>>2]}break b}else{o=34028234663852886.0e22;p=0.0;q=0.0;r=0.0}while(0);m=c[ia+28>>2]|0;d:do if((m|0)>0){k=0;z=0.0;while(1){ea=c[ia+36>>2]|0;ca=+g[ea+(k*36|0)+20>>2];da=+g[ea+(k*36|0)+24>>2];y=+g[ea+(k*36|0)+28>>2];s=ca*+g[ga>>2]+da*+g[ga+4>>2]+y*+g[ga+8>>2];u=ca*+g[ga+16>>2]+da*+g[ga+20>>2]+y*+g[ga+24>>2];y=ca*+g[ga+32>>2]+da*+g[ga+36>>2]+y*+g[ga+40>>2];g[ra+296>>2]=s;g[ra+296+4>>2]=u;g[ra+296+8>>2]=y;g[ra+296+12>>2]=0.0;if(ka*s+la*u+ma*y<0.0){g[ra+296>>2]=-s;g[ra+296+4>>2]=-u;g[ra+296+8>>2]=-y;s=-s;u=-u;y=-y}c[6321]=(c[6321]|0)+1;if(Gi(fa,ga,ka,la,ma,s,u,y,ha,ia,o)|0){c[6322]=(c[6322]|0)+1;Ug(ha,fa,ra+296|0,ra+640|0,ra+400|0,ra+360|0,ra+344|0);Ug(ia,ga,ra+296|0,ra+384|0,ra+376|0,ra+328|0,ra+312|0);A=+g[ra+400>>2];B=+g[ra+384>>2];do if(A<B)j=0;else{C=+g[ra+376>>2];D=+g[ra+640>>2];if(C<D){j=0;break}j=1;z=A-B<C-D?A-B:C-D}while(0);if(!j)break;if(z<o){o=z;p=s;q=u;r=y}}k=k+1|0;if((k|0)>=(m|0))break d}break b}while(0);Q=c[ha+48>>2]|0;e:do if((Q|0)>0){ea=0;x=-1;w=-1;s=0.0;S=0;f=0;V=0;R=0;W=0;U=0;t=0;v=0;B=0.0;O=0.0;A=0.0;N=0.0;n=0;k=0;z=0.0;M=0.0;m=0;j=0;T=c[ia+48>>2]|0;f:while(1){aa=c[ha+56>>2]|0;P=+g[aa+(ea<<4)>>2];$=+g[aa+(ea<<4)+4>>2];da=+g[aa+(ea<<4)+8>>2];ba=P*+g[fa>>2]+$*+g[fa+4>>2]+da*+g[fa+8>>2];ca=P*+g[fa+16>>2]+$*+g[fa+20>>2]+da*+g[fa+24>>2];da=P*+g[fa+32>>2]+$*+g[fa+36>>2]+da*+g[fa+40>>2];if((T|0)>0){aa=0;P=s;$=p;T=W;L=q;K=r;while(1){_=c[ia+56>>2]|0;y=+g[_+(aa<<4)>>2];C=+g[_+(aa<<4)+4>>2];H=+g[_+(aa<<4)+8>>2];D=y*+g[ga>>2]+C*+g[ga+4>>2]+H*+g[ga+8>>2];E=y*+g[ga+16>>2]+C*+g[ga+20>>2]+H*+g[ga+24>>2];H=y*+g[ga+32>>2]+C*+g[ga+36>>2]+H*+g[ga+40>>2];g[ra+296>>2]=ca*H-da*E;g[ra+296+4>>2]=da*D-ba*H;g[ra+296+8>>2]=ba*E-ca*D;g[ra+296+12>>2]=0.0;do if(!(+F(+(ca*H-da*E))>1.0e-006)){if(+F(+(da*D-ba*H))>1.0e-006){ja=75;break}if(!(+F(+(ba*E-ca*D))>1.0e-006)){s=P;p=$;Q=S;X=f;Y=V;Z=R;W=T;_=U;q=L;r=K}else ja=75}else ja=75;while(0);do if((ja|0)==75){ja=0;r=1.0/+G(+((ca*H-da*E)*(ca*H-da*E)+(da*D-ba*H)*(da*D-ba*H)+(ba*E-ca*D)*(ba*E-ca*D)));p=(ca*H-da*E)*r;g[ra+296>>2]=p;q=(da*D-ba*H)*r;g[ra+296+4>>2]=q;r=(ba*E-ca*D)*r;g[ra+296+8>>2]=r;if(p*ka+q*la+ma*r<0.0){g[ra+296>>2]=-p;g[ra+296+4>>2]=-q;g[ra+296+8>>2]=-r;p=-p;q=-q;r=-r}c[6321]=(c[6321]|0)+1;if(!(Gi(fa,ga,ka,la,ma,p,q,r,ha,ia,o)|0)){s=P;p=$;Q=S;X=f;Y=V;Z=R;W=T;_=U;q=L;r=K;break}c[6322]=(c[6322]|0)+1;Ug(ha,fa,ra+296|0,ra+640|0,ra+400|0,ra+360|0,ra+344|0);Ug(ia,ga,ra+296|0,ra+384|0,ra+376|0,ra+328|0,ra+312|0);s=+g[ra+400>>2];u=+g[ra+384>>2];do if(!(s<u)){y=+g[ra+376>>2];C=+g[ra+640>>2];if(y<C){Q=0;s=P;break}if(s-u<y-C){Q=1;s=s-u;S=c[ra+328>>2]|0;f=c[ra+328+4>>2]|0;V=c[ra+328+8>>2]|0;R=c[ra+344>>2]|0;T=c[ra+344+4>>2]|0;U=c[ra+344+8>>2]|0;break}else{Q=1;s=y-C;S=c[ra+312>>2]|0;f=c[ra+312+4>>2]|0;V=c[ra+312+8>>2]|0;R=c[ra+360>>2]|0;T=c[ra+360+4>>2]|0;U=c[ra+360+8>>2]|0;break}}else{Q=0;s=P}while(0);if(!Q)break f;if(!(s<o)){p=$;Q=S;X=f;Y=V;Z=R;W=T;_=U;q=L;r=K;break}o=s;x=aa;w=ea;Q=S;X=f;Y=V;Z=R;W=T;_=U;t=S;v=R;B=D;O=ba;A=E;N=ca;n=T;k=f;z=H;M=da;m=U;j=V}while(0);aa=aa+1|0;T=c[ia+48>>2]|0;if((aa|0)>=(T|0))break;else{P=s;$=p;S=Q;f=X;V=Y;R=Z;T=W;U=_;L=q;K=r}}S=Q;f=X;V=Y;R=Z;U=_;Q=c[ha+48>>2]|0}ea=ea+1|0;if((ea|0)>=(Q|0))break e}break b}else{x=-1;w=-1;t=0;v=0;B=0.0;O=0.0;A=0.0;N=0.0;n=0;k=0;z=0.0;M=0.0;m=0;j=0}while(0);if((x|w|0)>-1){L=(c[l>>2]=t,+g[l>>2]);E=L-(c[l>>2]=v,+g[l>>2]);K=(c[l>>2]=k,+g[l>>2]);D=K-(c[l>>2]=n,+g[l>>2]);H=(c[l>>2]=j,+g[l>>2]);C=H-(c[l>>2]=m,+g[l>>2]);u=B*O+A*N+z*M;y=E*O+D*N+C*M;o=E*B+D*A+C*z;do if(1.0-u*u==0.0)s=0.0;else{if((y-o*u)/(1.0-u*u)<-10000000150474662.0e14){s=-10000000150474662.0e14;break}if(!((y-o*u)/(1.0-u*u)>10000000150474662.0e14)){s=(y-o*u)/(1.0-u*u);break}s=10000000150474662.0e14}while(0);o=u*s-o;do if(o<-10000000150474662.0e14){if(y-u*10000000150474662.0e14<-10000000150474662.0e14){o=-10000000150474662.0e14;s=-10000000150474662.0e14;break}if(!(y-u*10000000150474662.0e14>10000000150474662.0e14)){o=-10000000150474662.0e14;s=y-u*10000000150474662.0e14;break}o=-10000000150474662.0e14;s=10000000150474662.0e14}else{if(!(o>10000000150474662.0e14))break;if(y+u*10000000150474662.0e14<-10000000150474662.0e14){o=10000000150474662.0e14;s=-10000000150474662.0e14;break}if(!(y+u*10000000150474662.0e14>10000000150474662.0e14)){o=10000000150474662.0e14;s=y+u*10000000150474662.0e14;break}o=10000000150474662.0e14;s=10000000150474662.0e14}while(0);B=B*o;A=A*o;z=z*o;y=B+(E-O*s);u=A+(D-N*s);o=z+(C-M*s);g[ra+640>>2]=y;g[ra+640+4>>2]=u;g[ra+640+8>>2]=o;g[ra+640+12>>2]=0.0;if(y*y+u*u+o*o>1.1920928955078125e-007){s=+G(+(y*y+u*u+o*o));g[ra+640>>2]=y*(1.0/s);g[ra+640+4>>2]=1.0/s*u;g[ra+640+8>>2]=1.0/s*o;if(y*(1.0/s)*ka+1.0/s*u*la+1.0/s*o*ma<0.0){g[ra+640>>2]=-(y*(1.0/s));g[ra+640+4>>2]=-(1.0/s*u);g[ra+640+8>>2]=-(1.0/s*o)}g[ra+400>>2]=L+B;g[ra+400+4>>2]=K+A;g[ra+400+8>>2]=H+z;g[ra+400+12>>2]=0.0;Tb[c[(c[h>>2]|0)+16>>2]&15](h,ra+640|0,ra+400|0,-s)}}if(ka*p+la*q+ma*r<0.0){o=-10000000150474662.0e14;p=-p;q=-q;r=-r;m=0;ja=111}else{o=-10000000150474662.0e14;m=0;ja=111}}while(0);if((ja|0)==111){j=c[b+20>>2]|0;if((j|0)<0){if((c[b+24>>2]|0)<0){k=c[b+28>>2]|0;if(k|0){if(a[b+32>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[b+28>>2]=0}a[b+32>>0]=1;c[b+28>>2]=0;c[b+24>>2]=0}do{ja=(c[b+28>>2]|0)+(j<<4)|0;c[ja>>2]=c[ra+640>>2];c[ja+4>>2]=c[ra+640+4>>2];c[ja+8>>2]=c[ra+640+8>>2];c[ja+12>>2]=c[ra+640+12>>2];j=j+1|0}while((j|0)!=0)}c[b+20>>2]=0;T=c[oa+56>>2]|0;S=c[pa+56>>2]|0;R=c[d+12>>2]|0;Q=c[e+12>>2]|0;M=o-na;H=1.0/+G(+(p*p+q*q+r*r));L=p*H;K=q*H;H=r*H;g[ra+640>>2]=L;g[ra+640+4>>2]=K;g[ra+640+8>>2]=H;c[ra+640+12>>2]=m;k=c[S+28>>2]|0;if((k|0)>0){m=c[S+36>>2]|0;p=+g[Q>>2];q=+g[Q+4>>2];r=+g[Q+8>>2];s=+g[Q+16>>2];u=+g[Q+20>>2];y=+g[Q+24>>2];z=+g[Q+32>>2];A=+g[Q+36>>2];B=+g[Q+40>>2];o=-34028234663852886.0e22;j=0;w=-1;while(1){C=+g[m+(j*36|0)+20>>2];D=+g[m+(j*36|0)+24>>2];E=+g[m+(j*36|0)+28>>2];n=(C*p+D*q+E*r)*L+(C*s+D*u+E*y)*K+(C*z+D*A+E*B)*H>o;w=n?j:w;j=j+1|0;if((j|0)==(k|0))break;else o=n?(C*p+D*q+E*r)*L+(C*s+D*u+E*y)*K+(C*z+D*A+E*B)*H:o}}else w=-1;j=c[S+36>>2]|0;c[b+20>>2]=0;x=c[j+(w*36|0)+4>>2]|0;if((x|0)>0){v=j+(w*36|0)+12|0;t=0;j=0;do{d=c[(c[v>>2]|0)+(t<<2)>>2]|0;e=c[S+16>>2]|0;la=+g[e+(d<<4)>>2];ma=+g[e+(d<<4)+4>>2];q=+g[e+(d<<4)+8>>2];o=la*+g[Q>>2]+ma*+g[Q+4>>2]+q*+g[Q+8>>2]+ +g[Q+48>>2];p=la*+g[Q+16>>2]+ma*+g[Q+20>>2]+q*+g[Q+24>>2]+ +g[Q+52>>2];q=la*+g[Q+32>>2]+ma*+g[Q+36>>2]+q*+g[Q+40>>2]+ +g[Q+56>>2];do if((j|0)==(c[b+24>>2]|0)){n=j|0?j<<1:1;if((j|0)>=(n|0))break;if(!n)m=0;else{c[6324]=(c[6324]|0)+1;j=ic((n<<4|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}m=j;j=c[b+20>>2]|0}if((j|0)>0){k=0;do{d=m+(k<<4)|0;e=(c[b+28>>2]|0)+(k<<4)|0;c[d>>2]=c[e>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];k=k+1|0}while((k|0)!=(j|0))}j=c[b+28>>2]|0;if(j|0){if(a[b+32>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[b+28>>2]=0}a[b+32>>0]=1;c[b+28>>2]=m;c[b+24>>2]=n;j=c[b+20>>2]|0}while(0);d=c[b+28>>2]|0;g[d+(j<<4)>>2]=o;g[d+(j<<4)+4>>2]=p;g[d+(j<<4)+8>>2]=q;g[d+(j<<4)+12>>2]=0.0;j=(c[b+20>>2]|0)+1|0;c[b+20>>2]=j;t=t+1|0}while((t|0)!=(x|0))}if((w|0)>-1)Fc(ra+640|0,T,R,b+16|0,b+36|0,M,na,h)}if(a[b+56>>0]|0?(qa=c[h+4>>2]|0,c[qa+780>>2]|0):0){k=c[qa+772>>2]|0;m=c[(c[h+8>>2]|0)+8>>2]|0;j=c[(c[h+12>>2]|0)+8>>2]|0;if((k|0)==(m|0)){Te(qa,k+4|0,j+4|0);break}else{Te(qa,j+4|0,m+4|0);break}}}while(0);i=ra;return}while(0)}uc(ra+48|0,ra+128|0,h,c[f+20>>2]|0,0);if((c[b+68>>2]|0?(c[(c[h+4>>2]|0)+780>>2]|0)<(c[b+72>>2]|0):0)?(M=+g[ra+48+4>>2],N=+g[ra+48+8>>2],O=+g[ra+48+12>>2],M*M+N*N+O*O>1.1920928955078125e-007):0){L=1.0/(M*M+N*N+O*O);if(+F(+(O*L))>.7071067690849304){K=1.0/+G(+(O*L*O*L+N*L*N*L));E=0.0;H=N*L*K;K=-(O*L*K)}else{K=1.0/+G(+(M*L*M*L+N*L*N*L));E=-(N*L*K);H=0.0;K=M*L*K}D=+Cb[c[(c[oa>>2]|0)+16>>2]&15](oa);B=+Cb[c[(c[pa>>2]|0)+16>>2]&15](pa);o=.019999999552965164/(D<B?D:B);if(D<B){c[ra+640>>2]=c[ra+128>>2];c[ra+640+4>>2]=c[ra+128+4>>2];c[ra+640+8>>2]=c[ra+128+8>>2];c[ra+640+12>>2]=c[ra+128+12>>2];c[ra+640+16>>2]=c[m>>2];c[ra+640+16+4>>2]=c[m+4>>2];c[ra+640+16+8>>2]=c[m+8>>2];c[ra+640+16+12>>2]=c[m+12>>2];c[ra+640+32>>2]=c[t>>2];c[ra+640+32+4>>2]=c[t+4>>2];c[ra+640+32+8>>2]=c[t+8>>2];c[ra+640+32+12>>2]=c[t+12>>2];c[ra+640+48>>2]=c[v>>2];c[ra+640+48+4>>2]=c[v+4>>2];c[ra+640+48+8>>2]=c[v+8>>2];c[ra+640+48+12>>2]=c[v+12>>2]}else{c[ra+640>>2]=c[w>>2];c[ra+640+4>>2]=c[w+4>>2];c[ra+640+8>>2]=c[w+8>>2];c[ra+640+12>>2]=c[w+12>>2];c[ra+640+16>>2]=c[x>>2];c[ra+640+16+4>>2]=c[x+4>>2];c[ra+640+16+8>>2]=c[x+8>>2];c[ra+640+16+12>>2]=c[x+12>>2];c[ra+640+32>>2]=c[Q>>2];c[ra+640+32+4>>2]=c[Q+4>>2];c[ra+640+32+8>>2]=c[Q+8>>2];c[ra+640+32+12>>2]=c[Q+12>>2];c[ra+640+48>>2]=c[R>>2];c[ra+640+48+4>>2]=c[R+4>>2];c[ra+640+48+8>>2]=c[R+8>>2];c[ra+640+48+12>>2]=c[R+12>>2]}j=c[b+68>>2]|0;if((j|0)>0){C=E*E+K*K+H*H;A=(o>.39269909262657166?.39269909262657166:o)*.5;k=0;do{if(C>1.1920928955078125e-007){y=+J(+A)/+G(+C);s=E*y;u=K*y;y=H*y;z=+I(+A);r=+(k|0)*(6.2831854820251465/+(j|0))*.5;q=+J(+r)/+G(+(O*L*O*L+(M*L*M*L+N*L*N*L)));o=M*L*q;p=N*L*q;q=O*L*q;r=+I(+r);if(D<B){da=q*(s*-q+(u*r+z*-p)-y*-o)+(o*(z*r-s*-o-u*-p-y*-q)+r*(y*-p+(s*r+z*-o)-u*-q))-p*(u*-o+(y*r+z*-q)-s*-p);la=o*(u*-o+(y*r+z*-q)-s*-p)+(r*(s*-q+(u*r+z*-p)-y*-o)+p*(z*r-s*-o-u*-p-y*-q))-q*(y*-p+(s*r+z*-o)-u*-q);sa=p*(y*-p+(s*r+z*-o)-u*-q)+(q*(z*r-s*-o-u*-p-y*-q)+r*(u*-o+(y*r+z*-q)-s*-p))-o*(s*-q+(u*r+z*-p)-y*-o);ba=r*(z*r-s*-o-u*-p-y*-q)-o*(y*-p+(s*r+z*-o)-u*-q)-p*(s*-q+(u*r+z*-p)-y*-o)-q*(u*-o+(y*r+z*-q)-s*-p);ka=da*(2.0/(ba*ba+(sa*sa+(da*da+la*la))));ma=la*(2.0/(ba*ba+(sa*sa+(da*da+la*la))));$=sa*(2.0/(ba*ba+(sa*sa+(da*da+la*la))));qa=c[d+12>>2]|0;q=+g[qa>>2];r=+g[qa+16>>2];s=+g[qa+32>>2];u=+g[qa+4>>2];y=+g[qa+20>>2];z=+g[qa+36>>2];P=+g[qa+8>>2];ca=+g[qa+24>>2];na=+g[qa+40>>2];g[ra+128>>2]=(1.0-(la*ma+sa*$))*q+(da*ma-ba*$)*r+(da*$+ba*ma)*s;g[ra+128+4>>2]=(1.0-(la*ma+sa*$))*u+(da*ma-ba*$)*y+(da*$+ba*ma)*z;g[ra+128+8>>2]=(1.0-(la*ma+sa*$))*P+(da*ma-ba*$)*ca+(da*$+ba*ma)*na;g[ra+128+12>>2]=0.0;g[ra+128+16>>2]=(da*ma+ba*$)*q+(1.0-(da*ka+sa*$))*r+(la*$-ba*ka)*s;g[ra+128+20>>2]=(da*ma+ba*$)*u+(1.0-(da*ka+sa*$))*y+(la*$-ba*ka)*z;g[ra+128+24>>2]=(da*ma+ba*$)*P+(1.0-(da*ka+sa*$))*ca+(la*$-ba*ka)*na;g[ra+128+28>>2]=0.0;g[ra+128+32>>2]=(da*$-ba*ma)*q+(la*$+ba*ka)*r+(1.0-(da*ka+la*ma))*s;g[ra+128+36>>2]=(da*$-ba*ma)*u+(la*$+ba*ka)*y+(1.0-(da*ka+la*ma))*z;g[ra+128+40>>2]=(da*$-ba*ma)*P+(la*$+ba*ka)*ca+(1.0-(da*ka+la*ma))*na;g[ra+128+44>>2]=0.0;qa=c[e+12>>2]|0;c[w>>2]=c[qa>>2];c[w+4>>2]=c[qa+4>>2];c[w+8>>2]=c[qa+8>>2];c[w+12>>2]=c[qa+12>>2];c[x>>2]=c[qa+16>>2];c[x+4>>2]=c[qa+16+4>>2];c[x+8>>2]=c[qa+16+8>>2];c[x+12>>2]=c[qa+16+12>>2];c[Q>>2]=c[qa+32>>2];c[Q+4>>2]=c[qa+32+4>>2];c[Q+8>>2]=c[qa+32+8>>2];c[Q+12>>2]=c[qa+32+12>>2];c[R>>2]=c[qa+48>>2];c[R+4>>2]=c[qa+48+4>>2];c[R+8>>2]=c[qa+48+8>>2];c[R+12>>2]=c[qa+48+12>>2]}else{qa=c[d+12>>2]|0;c[ra+128>>2]=c[qa>>2];c[ra+128+4>>2]=c[qa+4>>2];c[ra+128+8>>2]=c[qa+8>>2];c[ra+128+12>>2]=c[qa+12>>2];c[m>>2]=c[qa+16>>2];c[m+4>>2]=c[qa+16+4>>2];c[m+8>>2]=c[qa+16+8>>2];c[m+12>>2]=c[qa+16+12>>2];c[t>>2]=c[qa+32>>2];c[t+4>>2]=c[qa+32+4>>2];c[t+8>>2]=c[qa+32+8>>2];c[t+12>>2]=c[qa+32+12>>2];c[v>>2]=c[qa+48>>2];c[v+4>>2]=c[qa+48+4>>2];c[v+8>>2]=c[qa+48+8>>2];c[v+12>>2]=c[qa+48+12>>2];ka=q*(s*-q+(u*r+z*-p)-y*-o)+(o*(z*r-s*-o-u*-p-y*-q)+r*(y*-p+(s*r+z*-o)-u*-q))-p*(u*-o+(y*r+z*-q)-s*-p);ma=o*(u*-o+(y*r+z*-q)-s*-p)+(r*(s*-q+(u*r+z*-p)-y*-o)+p*(z*r-s*-o-u*-p-y*-q))-q*(y*-p+(s*r+z*-o)-u*-q);ta=p*(y*-p+(s*r+z*-o)-u*-q)+(q*(z*r-s*-o-u*-p-y*-q)+r*(u*-o+(y*r+z*-q)-s*-p))-o*(s*-q+(u*r+z*-p)-y*-o);ca=r*(z*r-s*-o-u*-p-y*-q)-o*(y*-p+(s*r+z*-o)-u*-q)-p*(s*-q+(u*r+z*-p)-y*-o)-q*(u*-o+(y*r+z*-q)-s*-p);la=ka*(2.0/(ca*ca+(ta*ta+(ka*ka+ma*ma))));na=ma*(2.0/(ca*ca+(ta*ta+(ka*ka+ma*ma))));ba=ta*(2.0/(ca*ca+(ta*ta+(ka*ka+ma*ma))));qa=c[e+12>>2]|0;r=+g[qa>>2];s=+g[qa+16>>2];u=+g[qa+32>>2];y=+g[qa+4>>2];z=+g[qa+20>>2];P=+g[qa+36>>2];$=+g[qa+8>>2];da=+g[qa+24>>2];sa=+g[qa+40>>2];g[ra+128+64>>2]=(1.0-(ma*na+ta*ba))*r+(ka*na-ca*ba)*s+(ka*ba+ca*na)*u;g[ra+128+68>>2]=(1.0-(ma*na+ta*ba))*y+(ka*na-ca*ba)*z+(ka*ba+ca*na)*P;g[ra+128+72>>2]=(1.0-(ma*na+ta*ba))*$+(ka*na-ca*ba)*da+(ka*ba+ca*na)*sa;g[ra+128+76>>2]=0.0;g[ra+128+80>>2]=(ka*na+ca*ba)*r+(1.0-(ka*la+ta*ba))*s+(ma*ba-ca*la)*u;g[ra+128+84>>2]=(ka*na+ca*ba)*y+(1.0-(ka*la+ta*ba))*z+(ma*ba-ca*la)*P;g[ra+128+88>>2]=(ka*na+ca*ba)*$+(1.0-(ka*la+ta*ba))*da+(ma*ba-ca*la)*sa;g[ra+128+92>>2]=0.0;g[ra+128+96>>2]=(ka*ba-ca*na)*r+(ma*ba+ca*la)*s+(1.0-(ka*la+ma*na))*u;g[ra+128+100>>2]=(ka*ba-ca*na)*y+(ma*ba+ca*la)*z+(1.0-(ka*la+ma*na))*P;g[ra+128+104>>2]=(ka*ba-ca*na)*$+(ma*ba+ca*la)*da+(1.0-(ka*la+ma*na))*sa;g[ra+128+108>>2]=0.0}j=c[f+20>>2]|0;c[ra+400>>2]=9344;c[ra+400+32>>2]=h;c[ra+400+36>>2]=c[ra+128>>2];c[ra+400+36+4>>2]=c[ra+128+4>>2];c[ra+400+36+8>>2]=c[ra+128+8>>2];c[ra+400+36+12>>2]=c[ra+128+12>>2];c[ra+400+52>>2]=c[m>>2];c[ra+400+52+4>>2]=c[m+4>>2];c[ra+400+52+8>>2]=c[m+8>>2];c[ra+400+52+12>>2]=c[m+12>>2];c[ra+400+68>>2]=c[t>>2];c[ra+400+68+4>>2]=c[t+4>>2];c[ra+400+68+8>>2]=c[t+8>>2];c[ra+400+68+12>>2]=c[t+12>>2];c[ra+400+84>>2]=c[v>>2];c[ra+400+84+4>>2]=c[v+4>>2];c[ra+400+84+8>>2]=c[v+8>>2];c[ra+400+84+12>>2]=c[v+12>>2];c[ra+400+100>>2]=c[w>>2];c[ra+400+100+4>>2]=c[w+4>>2];c[ra+400+100+8>>2]=c[w+8>>2];c[ra+400+100+12>>2]=c[w+12>>2];c[ra+400+116>>2]=c[x>>2];c[ra+400+116+4>>2]=c[x+4>>2];c[ra+400+116+8>>2]=c[x+8>>2];c[ra+400+116+12>>2]=c[x+12>>2];c[ra+400+132>>2]=c[Q>>2];c[ra+400+132+4>>2]=c[Q+4>>2];c[ra+400+132+8>>2]=c[Q+8>>2];c[ra+400+132+12>>2]=c[Q+12>>2];c[ra+400+148>>2]=c[R>>2];c[ra+400+148+4>>2]=c[R+4>>2];c[ra+400+148+8>>2]=c[R+8>>2];c[ra+400+148+12>>2]=c[R+12>>2];c[ra+400+164>>2]=c[ra+640>>2];c[ra+400+164+4>>2]=c[ra+640+4>>2];c[ra+400+164+8>>2]=c[ra+640+8>>2];c[ra+400+164+12>>2]=c[ra+640+12>>2];c[ra+400+180>>2]=c[ra+640+16>>2];c[ra+400+180+4>>2]=c[ra+640+16+4>>2];c[ra+400+180+8>>2]=c[ra+640+16+8>>2];c[ra+400+180+12>>2]=c[ra+640+16+12>>2];c[ra+400+196>>2]=c[ra+640+32>>2];c[ra+400+196+4>>2]=c[ra+640+32+4>>2];c[ra+400+196+8>>2]=c[ra+640+32+8>>2];c[ra+400+196+12>>2]=c[ra+640+32+12>>2];c[ra+400+212>>2]=c[ra+640+48>>2];c[ra+400+212+4>>2]=c[ra+640+48+4>>2];c[ra+400+212+8>>2]=c[ra+640+48+8>>2];c[ra+400+212+12>>2]=c[ra+640+48+12>>2];a[ra+400+228>>0]=D<B&1;c[ra+400+232>>2]=j;uc(ra+48|0,ra+128|0,ra+400|0,j,0);j=c[b+68>>2]|0}k=k+1|0}while((k|0)<(j|0))}}if(!(a[b+56>>0]|0)){i=ra;return}k=c[h+4>>2]|0;if(!(c[k+780>>2]|0)){i=ra;return}m=c[k+772>>2]|0;n=c[(c[h+8>>2]|0)+8>>2]|0;j=c[(c[h+12>>2]|0)+8>>2]|0;if((m|0)==(n|0)){Te(k,m+4|0,j+4|0);i=ra;return}else{Te(k,j+4|0,n+4|0);i=ra;return}}function $b(d){d=d|0;var e=0,f=0,h=0,j=0,k=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,E=0.0,F=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0;X=i;i=i+176|0;di(d);if(!(ob[c[(c[d>>2]|0)+20>>2]&127](d)|0)){i=X;return}if((c[d+328>>2]|0)<=0){i=X;return}R=X+96+32|0;S=X+96+52|0;O=0;do{T=c[(c[d+336>>2]|0)+(O<<2)>>2]|0;if(ob[c[(c[d>>2]|0)+20>>2]&127](d)|0?(N=ob[c[(c[d>>2]|0)+20>>2]&127](d)|0,(ob[c[(c[N>>2]|0)+56>>2]&127](N)|0)&1|0):0){f=c[d+72>>2]|0;if(!(a[T+513>>0]|0))N=f;else{c[X+80>>2]=c[T+560>>2];c[X+80+4>>2]=c[T+560+4>>2];c[X+80+8>>2]=c[T+560+8>>2];c[X+80+12>>2]=c[T+560+12>>2];k=+g[T+624>>2];m=+g[T+576>>2];n=+g[T+640>>2];u=+g[T+580>>2];v=+g[T+656>>2];w=+g[T+584>>2];x=+g[T+628>>2];y=+g[T+644>>2];z=+g[T+660>>2];A=+g[T+632>>2];B=+g[T+648>>2];C=+g[T+664>>2];E=+g[T+592>>2];F=+g[T+596>>2];H=+g[T+600>>2];I=+g[T+608>>2];J=+g[T+612>>2];K=+g[T+616>>2];ha=k*m+n*u+v*w+(m*x+u*y+w*z)*0.0+(m*A+u*B+w*C)*0.0;fa=(A*E+B*F+C*H)*0.0+(k*E+n*F+v*H+(x*E+y*F+z*H)*0.0);ea=(A*I+B*J+C*K)*0.0+(k*I+n*J+v*K+(x*I+y*J+z*K)*0.0);ga=1.0/+G(+(ha*ha+fa*fa+ea*ea));da=(k*m+n*u+v*w)*0.0+(m*x+u*y+w*z)+(m*A+u*B+w*C)*0.0;ba=(A*E+B*F+C*H)*0.0+(x*E+y*F+z*H+(k*E+n*F+v*H)*0.0);aa=(A*I+B*J+C*K)*0.0+(x*I+y*J+z*K+(k*I+n*J+v*K)*0.0);ca=1.0/+G(+(da*da+ba*ba+aa*aa));$=(k*m+n*u+v*w)*0.0+(m*x+u*y+w*z)*0.0+(m*A+u*B+w*C);Z=A*E+B*F+C*H+((k*E+n*F+v*H)*0.0+(x*E+y*F+z*H)*0.0);Y=A*I+B*J+C*K+((k*I+n*J+v*K)*0.0+(x*I+y*J+z*K)*0.0);_=1.0/+G(+($*$+Z*Z+Y*Y));N=c[(c[f>>2]|0)+16>>2]|0;fa=fa*ga*10.0+ +g[X+80+4>>2];ea=ga*ea*10.0+ +g[X+80+8>>2];g[X+160>>2]=ha*ga*10.0+ +g[X+80>>2];g[X+160+4>>2]=fa;g[X+160+8>>2]=ea;g[X+160+12>>2]=0.0;c[X+96>>2]=1065353216;c[X+96+4>>2]=0;c[X+96+8>>2]=0;g[X+96+12>>2]=0.0;Yb[N&127](f,X+80|0,X+160|0,X+96|0);N=c[(c[f>>2]|0)+16>>2]|0;ba=ba*ca*10.0+ +g[X+80+4>>2];aa=ca*aa*10.0+ +g[X+80+8>>2];g[X+160>>2]=da*ca*10.0+ +g[X+80>>2];g[X+160+4>>2]=ba;g[X+160+8>>2]=aa;g[X+160+12>>2]=0.0;c[X+96>>2]=0;c[X+96+4>>2]=1065353216;c[X+96+8>>2]=0;g[X+96+12>>2]=0.0;Yb[N&127](f,X+80|0,X+160|0,X+96|0);N=c[(c[f>>2]|0)+16>>2]|0;Z=Z*_*10.0+ +g[X+80+4>>2];Y=_*Y*10.0+ +g[X+80+8>>2];g[X+160>>2]=$*_*10.0+ +g[X+80>>2];g[X+160+4>>2]=Z;g[X+160+8>>2]=Y;g[X+160+12>>2]=0.0;c[X+96>>2]=0;c[X+96+4>>2]=0;c[X+96+8>>2]=1065353216;g[X+96+12>>2]=0.0;Yb[N&127](f,X+80|0,X+160|0,X+96|0);if((c[T+524>>2]|0)>0){e=0;do{N=c[T+532>>2]|0;da=+g[N+(e<<4)>>2];ea=+g[N+(e<<4)+4>>2];ha=+g[N+(e<<4)+8>>2];fa=+g[X+80>>2]+((k*m+n*u+v*w)*da+(m*x+u*y+w*z)*ea+(m*A+u*B+w*C)*ha);ga=+g[X+80+4>>2]+((k*E+n*F+v*H)*da+(x*E+y*F+z*H)*ea+(A*E+B*F+C*H)*ha);ha=(k*I+n*J+v*K)*da+(x*I+y*J+z*K)*ea+(A*I+B*J+C*K)*ha+ +g[X+80+8>>2];c[X+64>>2]=1065353216;c[X+64+4>>2]=0;c[X+64+8>>2]=1065353216;g[X+64+12>>2]=0.0;N=c[(c[f>>2]|0)+16>>2]|0;g[X+160>>2]=fa+-.10000000149011612;g[X+160+4>>2]=ga;g[X+160+8>>2]=ha;g[X+160+12>>2]=0.0;g[X+96>>2]=fa+.10000000149011612;g[X+96+4>>2]=ga+0.0;g[X+96+8>>2]=ha+0.0;g[X+96+12>>2]=0.0;Yb[N&127](f,X+160|0,X+96|0,X+64|0);N=c[(c[f>>2]|0)+16>>2]|0;g[X+160>>2]=fa;g[X+160+4>>2]=ga+-.10000000149011612;g[X+160+8>>2]=ha;g[X+160+12>>2]=0.0;g[X+96>>2]=fa+0.0;g[X+96+4>>2]=ga+.10000000149011612;g[X+96+8>>2]=ha+0.0;g[X+96+12>>2]=0.0;Yb[N&127](f,X+160|0,X+96|0,X+64|0);N=c[(c[f>>2]|0)+16>>2]|0;g[X+160>>2]=fa;g[X+160+4>>2]=ga;g[X+160+8>>2]=ha+-.10000000149011612;g[X+160+12>>2]=0.0;g[X+96>>2]=fa+0.0;g[X+96+4>>2]=ga+0.0;g[X+96+8>>2]=ha+.10000000149011612;g[X+96+12>>2]=0.0;Yb[N&127](f,X+160|0,X+96|0,X+64|0);e=e+1|0}while((e|0)<(c[T+524>>2]|0))}N=c[d+72>>2]|0}M=c[d+344>>2]|0;c[X+80>>2]=0;c[X+80+4>>2]=0;c[X+80+8>>2]=0;c[X+80+12>>2]=0;c[X+64>>2]=1065353216;c[X+64+4>>2]=1065353216;c[X+64+8>>2]=1065353216;g[X+64+12>>2]=0.0;c[X+48>>2]=1065353216;c[X+48+4>>2]=0;c[X+48+8>>2]=0;g[X+48+12>>2]=0.0;if(!(M&256)){if(M&1|0?(U=c[T+752>>2]|0,(U|0)>0):0){h=0;e=U;do{f=c[T+760>>2]|0;if(c[(c[f+(h*104|0)+4>>2]|0)+16>>2]&1){e=c[(c[N>>2]|0)+16>>2]|0;L=f+(h*104|0)+8|0;s=f+(h*104|0)+12|0;q=c[s>>2]|0;t=f+(h*104|0)+16|0;r=c[t>>2]|0;g[X+160>>2]=+g[L>>2]+-.10000000149011612;c[X+160+4>>2]=q;c[X+160+8>>2]=r;g[X+160+12>>2]=0.0;ga=+g[s>>2]+0.0;ha=+g[t>>2]+0.0;g[X+96>>2]=+g[L>>2]+.10000000149011612;g[X+96+4>>2]=ga;g[X+96+8>>2]=ha;g[X+96+12>>2]=0.0;c[X+32>>2]=1065353216;c[X+32+4>>2]=0;c[X+32+8>>2]=0;g[X+32+12>>2]=0.0;Yb[e&127](N,X+160|0,X+96|0,X+32|0);e=c[(c[N>>2]|0)+16>>2]|0;ha=+g[s>>2]+-.10000000149011612;r=c[t>>2]|0;c[X+160>>2]=c[L>>2];g[X+160+4>>2]=ha;c[X+160+8>>2]=r;g[X+160+12>>2]=0.0;ha=+g[s>>2]+.10000000149011612;ga=+g[t>>2]+0.0;g[X+96>>2]=+g[L>>2]+0.0;g[X+96+4>>2]=ha;g[X+96+8>>2]=ga;g[X+96+12>>2]=0.0;c[X+32>>2]=0;c[X+32+4>>2]=1065353216;c[X+32+8>>2]=0;g[X+32+12>>2]=0.0;Yb[e&127](N,X+160|0,X+96|0,X+32|0);e=c[(c[N>>2]|0)+16>>2]|0;r=c[s>>2]|0;ga=+g[t>>2]+-.10000000149011612;c[X+160>>2]=c[L>>2];c[X+160+4>>2]=r;g[X+160+8>>2]=ga;g[X+160+12>>2]=0.0;ga=+g[s>>2]+0.0;ha=+g[t>>2]+.10000000149011612;g[X+96>>2]=+g[L>>2]+0.0;g[X+96+4>>2]=ga;g[X+96+8>>2]=ha;g[X+96+12>>2]=0.0;c[X+32>>2]=0;c[X+32+4>>2]=0;c[X+32+8>>2]=1065353216;g[X+32+12>>2]=0.0;Yb[e&127](N,X+160|0,X+96|0,X+32|0);e=c[T+752>>2]|0}h=h+1|0}while((h|0)<(e|0))}if(M&2|0?(V=c[T+772>>2]|0,(V|0)>0):0){h=0;e=V;do{f=c[T+780>>2]|0;if(c[(c[f+(h*52|0)+4>>2]|0)+16>>2]&1){Yb[c[(c[N>>2]|0)+16>>2]&127](N,(c[f+(h*52|0)+8>>2]|0)+8|0,(c[f+(h*52|0)+12>>2]|0)+8|0,X+80|0);e=c[T+772>>2]|0}h=h+1|0}while((h|0)<(e|0))}if(M&16|0?(W=c[T+752>>2]|0,(W|0)>0):0){h=0;e=W;do{f=c[T+760>>2]|0;if(c[(c[f+(h*104|0)+4>>2]|0)+16>>2]&1){fa=+g[f+(h*104|0)+72>>2]*.5;ha=+g[f+(h*104|0)+76>>2]*.5;ga=+g[f+(h*104|0)+80>>2]*.5;L=c[(c[N>>2]|0)+16>>2]|0;e=f+(h*104|0)+8|0;s=f+(h*104|0)+12|0;da=ha+ +g[s>>2];t=f+(h*104|0)+16|0;ea=ga+ +g[t>>2];g[X+160>>2]=fa+ +g[e>>2];g[X+160+4>>2]=da;g[X+160+8>>2]=ea;g[X+160+12>>2]=0.0;Yb[L&127](N,e,X+160|0,X+64|0);L=c[(c[N>>2]|0)+16>>2]|0;ha=+g[s>>2]-ha;ga=+g[t>>2]-ga;g[X+160>>2]=+g[e>>2]-fa;g[X+160+4>>2]=ha;g[X+160+8>>2]=ga;g[X+160+12>>2]=0.0;ga=+g[X+64+4>>2]*.5;ha=+g[X+64+8>>2]*.5;g[X+96>>2]=+g[X+64>>2]*.5;g[X+96+4>>2]=ga;g[X+96+8>>2]=ha;g[X+96+12>>2]=0.0;Yb[L&127](N,e,X+160|0,X+96|0);e=c[T+752>>2]|0}h=h+1|0}while((h|0)<(e|0))}if(M&32|0){if(!(a[22080]|0)){a[22080]=1;c[5691]=1065353216;c[5692]=0;c[5693]=0;c[5694]=0;c[5695]=0;c[5696]=1065353216;c[5697]=0;c[5698]=0;c[5699]=0;c[5700]=0;c[5701]=1065353216;g[5702]=0.0}if((c[T+852>>2]|0)>0){e=0;do{L=c[T+860>>2]|0;s=c[L+(e*104|0)+24>>2]|0;E=+g[s+8>>2];t=L+(e*104|0)+4|0;F=+g[t>>2];J=+g[s+12>>2];r=L+(e*104|0)+8|0;K=+g[r>>2];ga=+g[s+16>>2];s=L+(e*104|0)+12|0;ea=+g[s>>2];ca=+g[L+(e*104|0)+20>>2]+(E*F+J*K+ga*ea);g[X+160>>2]=E-F*ca;g[X+160+4>>2]=J-K*ca;g[X+160+8>>2]=ga-ea*ca;g[X+160+12>>2]=0.0;Y=+g[t>>2];_=+g[r>>2];H=+g[s>>2];L=Y<_?(Y<H?0:2):_<H?1:2;I=+g[22764+(L<<4)+8>>2];Z=+g[22764+(L<<4)+4>>2];$=+g[22764+(L<<4)>>2];aa=1.0/+G(+((Y*Z-_*$)*(Y*Z-_*$)+((_*I-H*Z)*(_*I-H*Z)+(H*$-Y*I)*(H*$-Y*I))));ba=H*(H*$-Y*I)*aa-_*(Y*Z-_*$)*aa;da=Y*(Y*Z-_*$)*aa-H*(_*I-H*Z)*aa;ha=_*(_*I-H*Z)*aa-Y*(H*$-Y*I)*aa;fa=1.0/+G(+(ha*ha+(ba*ba+da*da)));L=c[(c[N>>2]|0)+16>>2]|0;g[X+96>>2]=E-F*ca-(_*I-H*Z)*aa*.5;g[X+96+4>>2]=J-K*ca-(H*$-Y*I)*aa*.5;g[X+96+8>>2]=ga-ea*ca-(Y*Z-_*$)*aa*.5;g[X+96+12>>2]=0.0;g[X+32>>2]=(_*I-H*Z)*aa*.5+(E-F*ca);g[X+32+4>>2]=(H*$-Y*I)*aa*.5+(J-K*ca);g[X+32+8>>2]=(Y*Z-_*$)*aa*.5+(ga-ea*ca);g[X+32+12>>2]=0.0;Yb[L&127](N,X+96|0,X+32|0,X+48|0);L=c[(c[N>>2]|0)+16>>2]|0;ca=+g[X+160>>2];ea=+g[X+160+4>>2];ga=+g[X+160+8>>2];g[X+96>>2]=ca-fa*ba*.5;g[X+96+4>>2]=ea-fa*da*.5;g[X+96+8>>2]=ga-fa*ha*.5;g[X+96+12>>2]=0.0;g[X+32>>2]=fa*ba*.5+ca;g[X+32+4>>2]=fa*da*.5+ea;g[X+32+8>>2]=fa*ha*.5+ga;g[X+32+12>>2]=0.0;Yb[L&127](N,X+96|0,X+32|0,X+48|0);L=c[(c[N>>2]|0)+16>>2]|0;ga=+g[r>>2]*.5*3.0+ +g[X+160+4>>2];ha=+g[s>>2]*.5*3.0+ +g[X+160+8>>2];g[X+96>>2]=+g[t>>2]*.5*3.0+ +g[X+160>>2];g[X+96+4>>2]=ga;g[X+96+8>>2]=ha;g[X+96+12>>2]=0.0;c[X+32>>2]=1065353216;c[X+32+4>>2]=1065353216;c[X+32+8>>2]=0;g[X+32+12>>2]=0.0;Yb[L&127](N,X+160|0,X+96|0,X+32|0);e=e+1|0}while((e|0)<(c[T+852>>2]|0))}}if(M&4|0?(c[X+160>>2]=0,c[X+160+4>>2]=1060320051,c[X+160+8>>2]=0,g[X+160+12>>2]=0.0,P=c[T+792>>2]|0,(P|0)>0):0){h=0;e=P;do{f=c[T+800>>2]|0;if(c[(c[f+(h*44|0)+4>>2]|0)+16>>2]&1){e=c[f+(h*44|0)+8>>2]|0;$=+g[e+8>>2];ca=+g[e+12>>2];fa=+g[e+16>>2];e=c[f+(h*44|0)+12>>2]|0;aa=+g[e+8>>2];da=+g[e+12>>2];ga=+g[e+16>>2];e=c[f+(h*44|0)+16>>2]|0;ba=+g[e+8>>2];ea=+g[e+12>>2];ha=+g[e+16>>2];e=c[(c[N>>2]|0)+36>>2]|0;g[X+96>>2]=($+aa+ba)*.3333333432674408+($-($+aa+ba)*.3333333432674408)*.800000011920929;g[X+96+4>>2]=(ca+da+ea)*.3333333432674408+(ca-(ca+da+ea)*.3333333432674408)*.800000011920929;g[X+96+8>>2]=(fa+ga+ha)*.3333333432674408+(fa-(fa+ga+ha)*.3333333432674408)*.800000011920929;g[X+96+12>>2]=0.0;g[X+32>>2]=($+aa+ba)*.3333333432674408+(aa-($+aa+ba)*.3333333432674408)*.800000011920929;g[X+32+4>>2]=(ca+da+ea)*.3333333432674408+(da-(ca+da+ea)*.3333333432674408)*.800000011920929;g[X+32+8>>2]=(fa+ga+ha)*.3333333432674408+(ga-(fa+ga+ha)*.3333333432674408)*.800000011920929;g[X+32+12>>2]=0.0;g[X+16>>2]=($+aa+ba)*.3333333432674408+(ba-($+aa+ba)*.3333333432674408)*.800000011920929;g[X+16+4>>2]=(ca+da+ea)*.3333333432674408+(ea-(ca+da+ea)*.3333333432674408)*.800000011920929;g[X+16+8>>2]=(fa+ga+ha)*.3333333432674408+(ha-(fa+ga+ha)*.3333333432674408)*.800000011920929;g[X+16+12>>2]=0.0;zb[e&0](N,X+96|0,X+32|0,X+16|0,X+160|0,1.0);e=c[T+792>>2]|0}h=h+1|0}while((h|0)<(e|0))}if(M&8|0?(c[X+160>>2]=1050253722,c[X+160+4>>2]=1050253722,c[X+160+8>>2]=1060320051,g[X+160+12>>2]=0.0,Q=c[T+812>>2]|0,(Q|0)>0):0){h=0;e=Q;do{f=c[T+820>>2]|0;if(c[(c[f+(h*104|0)+4>>2]|0)+16>>2]&1){e=c[f+(h*104|0)+8>>2]|0;A=+g[e+8>>2];E=+g[e+12>>2];I=+g[e+16>>2];e=c[f+(h*104|0)+12>>2]|0;B=+g[e+8>>2];F=+g[e+12>>2];J=+g[e+16>>2];e=c[f+(h*104|0)+16>>2]|0;C=+g[e+8>>2];H=+g[e+12>>2];K=+g[e+16>>2];e=c[f+(h*104|0)+20>>2]|0;fa=+g[e+8>>2];ga=+g[e+12>>2];ha=+g[e+16>>2];e=c[(c[N>>2]|0)+36>>2]|0;ca=(A+B+C+fa)*.25+(A-(A+B+C+fa)*.25)*.800000011920929;da=(E+F+H+ga)*.25+(E-(E+F+H+ga)*.25)*.800000011920929;ea=(I+J+K+ha)*.25+(I-(I+J+K+ha)*.25)*.800000011920929;g[X+96>>2]=ca;g[X+96+4>>2]=da;g[X+96+8>>2]=ea;g[X+96+12>>2]=0.0;Y=(A+B+C+fa)*.25+(B-(A+B+C+fa)*.25)*.800000011920929;Z=(E+F+H+ga)*.25+(F-(E+F+H+ga)*.25)*.800000011920929;_=(I+J+K+ha)*.25+(J-(I+J+K+ha)*.25)*.800000011920929;g[X+32>>2]=Y;g[X+32+4>>2]=Z;g[X+32+8>>2]=_;g[X+32+12>>2]=0.0;$=(A+B+C+fa)*.25+(C-(A+B+C+fa)*.25)*.800000011920929;aa=(E+F+H+ga)*.25+(H-(E+F+H+ga)*.25)*.800000011920929;ba=(I+J+K+ha)*.25+(K-(I+J+K+ha)*.25)*.800000011920929;g[X+16>>2]=$;g[X+16+4>>2]=aa;g[X+16+8>>2]=ba;g[X+16+12>>2]=0.0;zb[e&0](N,X+96|0,X+32|0,X+16|0,X+160|0,1.0);e=c[(c[N>>2]|0)+36>>2]|0;g[X+96>>2]=ca;g[X+96+4>>2]=da;g[X+96+8>>2]=ea;g[X+96+12>>2]=0.0;g[X+32>>2]=Y;g[X+32+4>>2]=Z;g[X+32+8>>2]=_;g[X+32+12>>2]=0.0;fa=(A+B+C+fa)*.25+(fa-(A+B+C+fa)*.25)*.800000011920929;ga=(E+F+H+ga)*.25+(ga-(E+F+H+ga)*.25)*.800000011920929;ha=(I+J+K+ha)*.25+(ha-(I+J+K+ha)*.25)*.800000011920929;g[X+16>>2]=fa;g[X+16+4>>2]=ga;g[X+16+8>>2]=ha;g[X+16+12>>2]=0.0;zb[e&0](N,X+96|0,X+32|0,X+16|0,X+160|0,1.0);e=c[(c[N>>2]|0)+36>>2]|0;g[X+96>>2]=Y;g[X+96+4>>2]=Z;g[X+96+8>>2]=_;g[X+96+12>>2]=0.0;g[X+32>>2]=$;g[X+32+4>>2]=aa;g[X+32+8>>2]=ba;g[X+32+12>>2]=0.0;g[X+16>>2]=fa;g[X+16+4>>2]=ga;g[X+16+8>>2]=ha;g[X+16+12>>2]=0.0;zb[e&0](N,X+96|0,X+32|0,X+16|0,X+160|0,1.0);e=c[(c[N>>2]|0)+36>>2]|0;g[X+96>>2]=$;g[X+96+4>>2]=aa;g[X+96+8>>2]=ba;g[X+96+12>>2]=0.0;g[X+32>>2]=ca;g[X+32+4>>2]=da;g[X+32+8>>2]=ea;g[X+32+12>>2]=0.0;g[X+16>>2]=fa;g[X+16+4>>2]=ga;g[X+16+8>>2]=ha;g[X+16+12>>2]=0.0;zb[e&0](N,X+96|0,X+32|0,X+16|0,X+160|0,1.0);e=c[T+812>>2]|0}h=h+1|0}while((h|0)<(e|0))}}else{c[5530]=1805;c[5531]=0;e=c[T+1152>>2]|0;if((e|0)>0){L=0;do{f=(c[T+1160>>2]|0)+(L<<2)|0;if(a[(c[f>>2]|0)+377>>0]|0){r=rr(c[5530]|0,c[5531]|0,1284865837,1481765933)|0;r=Ct(r|0,D|0,1,0)|0;h=D;s=ps(r|0,h|0,33)|0;h=rr(r|0,h|0,1284865837,1481765933)|0;h=Ct(h|0,D|0,1,0)|0;r=D;t=ps(h|0,r|0,33)|0;r=rr(h|0,r|0,1284865837,1481765933)|0;r=Ct(r|0,D|0,1,0)|0;h=D;c[5530]=r;c[5531]=h;h=ps(r|0,h|0,33)|0;ha=1.0/+G(+(+(h|0)*4.656612873077393e-010*+(h|0)*4.656612873077393e-010+(+(s|0)*4.656612873077393e-010*+(s|0)*4.656612873077393e-010+ +(t|0)*4.656612873077393e-010*+(t|0)*4.656612873077393e-010)));g[X+160>>2]=+(s|0)*4.656612873077393e-010*ha*.75;g[X+160+4>>2]=+(t|0)*4.656612873077393e-010*ha*.75;g[X+160+8>>2]=+(h|0)*4.656612873077393e-010*ha*.75;g[X+160+12>>2]=0.0;h=c[(c[f>>2]|0)+24>>2]|0;if((h|0)>0){c[6324]=(c[6324]|0)+1;e=ic((h<<4|3)+16|0)|0;if(!e)f=0;else{c[(e+4+15&-16)+-4>>2]=e;f=e+4+15&-16}e=0;do{t=f+(e<<4)|0;c[t>>2]=c[X+96>>2];c[t+4>>2]=c[X+96+4>>2];c[t+8>>2]=c[X+96+8>>2];c[t+12>>2]=c[X+96+12>>2];e=e+1|0}while((e|0)!=(h|0));e=0;do{t=f+(e<<4)|0;s=(c[(c[(c[(c[T+1160>>2]|0)+(L<<2)>>2]|0)+32>>2]|0)+(e<<2)>>2]|0)+8|0;c[t>>2]=c[s>>2];c[t+4>>2]=c[s+4>>2];c[t+8>>2]=c[s+8>>2];c[t+12>>2]=c[s+12>>2];e=e+1|0}while((e|0)!=(h|0))}else f=0;a[X+96+16>>0]=1;c[X+96+12>>2]=0;c[X+96+4>>2]=0;c[X+96+8>>2]=0;a[X+96+36>>0]=1;c[R>>2]=0;c[X+96+24>>2]=0;c[X+96+28>>2]=0;a[X+96+56>>0]=1;c[S>>2]=0;c[X+96+44>>2]=0;c[X+96+48>>2]=0;oc(X+96|0,f,h);s=c[X+96+44>>2]|0;if((s|0)>0){q=c[R>>2]|0;p=0;do{t=c[(c[S>>2]|0)+(p<<2)>>2]|0;h=c[q+(t*12|0)+4>>2]|0;e=q+(t*12|0)+(h*12|0)+((c[q+(t*12|0)+(h*12|0)>>2]|0)*12|0)|0;if((e|0)!=(q+(t*12|0)|0)){r=c[X+96+12>>2]|0;h=c[q+(t*12|0)+(h*12|0)+8>>2]|0;j=c[q+(t*12|0)+8>>2]|0;while(1){o=c[e+8>>2]|0;zb[c[(c[N>>2]|0)+36>>2]&0](N,r+(h<<4)|0,r+(j<<4)|0,r+(o<<4)|0,X+160|0,1.0);h=e+((c[e+4>>2]|0)*12|0)|0;e=h+((c[h>>2]|0)*12|0)|0;if((e|0)==(q+(t*12|0)|0))break;else{h=j;j=o}}}p=p+1|0}while((p|0)<(s|0))}e=c[S>>2]|0;if(e|0){if(a[X+96+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[S>>2]=0}a[X+96+56>>0]=1;c[S>>2]=0;c[X+96+44>>2]=0;c[X+96+48>>2]=0;e=c[R>>2]|0;if(e|0){if(a[X+96+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[R>>2]=0}a[X+96+36>>0]=1;c[R>>2]=0;c[X+96+24>>2]=0;c[X+96+28>>2]=0;e=c[X+96+12>>2]|0;if(e|0){if(a[X+96+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[X+96+12>>2]=0}if(f|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}e=c[T+1152>>2]|0}L=L+1|0}while((L|0)<(e|0))}}if(M&64|0){if((c[T+832>>2]|0)>0){e=0;do{L=c[T+840>>2]|0;q=c[L+(e*96|0)+20>>2]|0;da=+g[L+(e*96|0)+4>>2];ea=+g[L+(e*96|0)+8>>2];fa=+g[L+(e*96|0)+12>>2];ga=da*+g[q+20>>2]+ea*+g[q+24>>2]+fa*+g[q+28>>2]+ +g[q+56>>2];ha=da*+g[q+36>>2]+ea*+g[q+40>>2]+fa*+g[q+44>>2]+ +g[q+60>>2];g[X+32>>2]=da*+g[q+4>>2]+ea*+g[q+8>>2]+fa*+g[q+12>>2]+ +g[q+52>>2];g[X+32+4>>2]=ga;g[X+32+8>>2]=ha;g[X+32+12>>2]=0.0;L=L+(e*96|0)|0;q=c[L>>2]|0;c[X+16>>2]=1065353216;c[X+16+4>>2]=0;c[X+16+8>>2]=0;g[X+16+12>>2]=0.0;t=c[(c[N>>2]|0)+16>>2]|0;ha=+g[q+8>>2];s=c[q+12>>2]|0;r=c[q+16>>2]|0;g[X+160>>2]=ha+-.25;c[X+160+4>>2]=s;c[X+160+8>>2]=r;g[X+160+12>>2]=0.0;ga=(c[l>>2]=s,+g[l>>2])+0.0;fa=(c[l>>2]=r,+g[l>>2])+0.0;g[X+96>>2]=ha+.25;g[X+96+4>>2]=ga;g[X+96+8>>2]=fa;g[X+96+12>>2]=0.0;Yb[t&127](N,X+160|0,X+96|0,X+16|0);t=c[(c[N>>2]|0)+16>>2]|0;r=c[q+8>>2]|0;fa=+g[q+12>>2];s=c[q+16>>2]|0;c[X+160>>2]=r;g[X+160+4>>2]=fa+-.25;c[X+160+8>>2]=s;g[X+160+12>>2]=0.0;ga=(c[l>>2]=r,+g[l>>2])+0.0;ha=(c[l>>2]=s,+g[l>>2])+0.0;g[X+96>>2]=ga;g[X+96+4>>2]=fa+.25;g[X+96+8>>2]=ha;g[X+96+12>>2]=0.0;Yb[t&127](N,X+160|0,X+96|0,X+16|0);t=c[(c[N>>2]|0)+16>>2]|0;s=c[q+8>>2]|0;r=c[q+12>>2]|0;ha=+g[q+16>>2];c[X+160>>2]=s;c[X+160+4>>2]=r;g[X+160+8>>2]=ha+-.25;g[X+160+12>>2]=0.0;fa=(c[l>>2]=s,+g[l>>2])+0.0;ga=(c[l>>2]=r,+g[l>>2])+0.0;g[X+96>>2]=fa;g[X+96+4>>2]=ga;g[X+96+8>>2]=ha+.25;g[X+96+12>>2]=0.0;Yb[t&127](N,X+160|0,X+96|0,X+16|0);c[X+16>>2]=0;c[X+16+4>>2]=1065353216;c[X+16+8>>2]=0;g[X+16+12>>2]=0.0;t=c[(c[N>>2]|0)+16>>2]|0;ha=+g[X+32>>2];r=c[X+32+4>>2]|0;s=c[X+32+8>>2]|0;g[X+160>>2]=ha+-.25;c[X+160+4>>2]=r;c[X+160+8>>2]=s;g[X+160+12>>2]=0.0;ga=(c[l>>2]=r,+g[l>>2])+0.0;fa=(c[l>>2]=s,+g[l>>2])+0.0;g[X+96>>2]=ha+.25;g[X+96+4>>2]=ga;g[X+96+8>>2]=fa;g[X+96+12>>2]=0.0;Yb[t&127](N,X+160|0,X+96|0,X+16|0);t=c[(c[N>>2]|0)+16>>2]|0;s=c[X+32>>2]|0;fa=+g[X+32+4>>2];r=c[X+32+8>>2]|0;c[X+160>>2]=s;g[X+160+4>>2]=fa+-.25;c[X+160+8>>2]=r;g[X+160+12>>2]=0.0;ga=(c[l>>2]=s,+g[l>>2])+0.0;ha=(c[l>>2]=r,+g[l>>2])+0.0;g[X+96>>2]=ga;g[X+96+4>>2]=fa+.25;g[X+96+8>>2]=ha;g[X+96+12>>2]=0.0;Yb[t&127](N,X+160|0,X+96|0,X+16|0);t=c[(c[N>>2]|0)+16>>2]|0;r=c[X+32>>2]|0;s=c[X+32+4>>2]|0;ha=+g[X+32+8>>2];c[X+160>>2]=r;c[X+160+4>>2]=s;g[X+160+8>>2]=ha+-.25;g[X+160+12>>2]=0.0;fa=(c[l>>2]=r,+g[l>>2])+0.0;ga=(c[l>>2]=s,+g[l>>2])+0.0;g[X+96>>2]=fa;g[X+96+4>>2]=ga;g[X+96+8>>2]=ha+.25;g[X+96+12>>2]=0.0;Yb[t&127](N,X+160|0,X+96|0,X+16|0);t=c[(c[N>>2]|0)+16>>2]|0;L=(c[L>>2]|0)+8|0;c[X+160>>2]=1065353216;c[X+160+4>>2]=1065353216;c[X+160+8>>2]=1065353216;g[X+160+12>>2]=0.0;Yb[t&127](N,L,X+32|0,X+160|0);e=e+1|0}while((e|0)<(c[T+832>>2]|0))}e=c[T+752>>2]|0;if((e|0)>0){h=0;do{f=c[T+760>>2]|0;if((c[(c[f+(h*104|0)+4>>2]|0)+16>>2]&1|0)!=0?+g[f+(h*104|0)+88>>2]<=0.0:0){t=f+(h*104|0)+8|0;c[X+32>>2]=1065353216;c[X+32+4>>2]=0;c[X+32+8>>2]=0;g[X+32+12>>2]=0.0;e=c[(c[N>>2]|0)+16>>2]|0;ha=+g[t>>2];L=f+(h*104|0)+12|0;r=c[L>>2]|0;s=f+(h*104|0)+16|0;q=c[s>>2]|0;g[X+160>>2]=ha+-.25;c[X+160+4>>2]=r;c[X+160+8>>2]=q;g[X+160+12>>2]=0.0;ga=(c[l>>2]=r,+g[l>>2])+0.0;fa=(c[l>>2]=q,+g[l>>2])+0.0;g[X+96>>2]=ha+.25;g[X+96+4>>2]=ga;g[X+96+8>>2]=fa;g[X+96+12>>2]=0.0;Yb[e&127](N,X+160|0,X+96|0,X+32|0);e=c[(c[N>>2]|0)+16>>2]|0;q=c[t>>2]|0;fa=+g[L>>2];r=c[s>>2]|0;c[X+160>>2]=q;g[X+160+4>>2]=fa+-.25;c[X+160+8>>2]=r;g[X+160+12>>2]=0.0;ga=(c[l>>2]=q,+g[l>>2])+0.0;ha=(c[l>>2]=r,+g[l>>2])+0.0;g[X+96>>2]=ga;g[X+96+4>>2]=fa+.25;g[X+96+8>>2]=ha;g[X+96+12>>2]=0.0;Yb[e&127](N,X+160|0,X+96|0,X+32|0);e=c[(c[N>>2]|0)+16>>2]|0;t=c[t>>2]|0;L=c[L>>2]|0;ha=+g[s>>2];c[X+160>>2]=t;c[X+160+4>>2]=L;g[X+160+8>>2]=ha+-.25;g[X+160+12>>2]=0.0;fa=(c[l>>2]=t,+g[l>>2])+0.0;ga=(c[l>>2]=L,+g[l>>2])+0.0;g[X+96>>2]=fa;g[X+96+4>>2]=ga;g[X+96+8>>2]=ha+.25;g[X+96+12>>2]=0.0;Yb[e&127](N,X+160|0,X+96|0,X+32|0);e=c[T+752>>2]|0}h=h+1|0}while((h|0)<(e|0))}}if(M&128|0?(c[T+732>>2]|0)>0:0){f=0;do{h=c[T+740>>2]|0;j=h+(f*60|0)+8|0;c[X+160>>2]=c[j>>2];c[X+160+4>>2]=c[j+4>>2];c[X+160+8>>2]=c[j+8>>2];c[X+160+12>>2]=c[j+12>>2];j=c[h+(f*60|0)+24>>2]|0;if((j|0)>0){e=0;k=+g[X+160>>2];m=+g[X+160+4>>2];n=+g[X+160+8>>2];do{L=c[h+(f*60|0)+28+(e<<2)>>2]|0;ha=+g[h+(f*60|0)+44+(e<<2)>>2];k=+g[L+8>>2]*ha+k;m=ha*+g[L+12>>2]+m;n=ha*+g[L+16>>2]+n;g[X+160+8>>2]=n;e=e+1|0}while((e|0)!=(j|0));g[X+160>>2]=k;g[X+160+4>>2]=m}Ub[c[(c[N>>2]|0)+48>>2]&127](N,X+160|0,c[h+(f*60|0)+4>>2]|0);f=f+1|0}while((f|0)<(c[T+732>>2]|0))}if(M&512|0){L=c[T+968>>2]|0;c[X+160>>2]=1065353216;c[X+160+4>>2]=0;c[X+160+8>>2]=1065353216;g[X+160+12>>2]=0.0;c[X+96>>2]=1065353216;c[X+96+4>>2]=1065353216;c[X+96+8>>2]=1065353216;g[X+96+12>>2]=0.0;Bf(N,L,0,X+160|0,X+96|0)}if(M&1024|0){L=c[T+1028>>2]|0;c[X+160>>2]=0;c[X+160+4>>2]=1065353216;c[X+160+8>>2]=0;g[X+160+12>>2]=0.0;c[X+96>>2]=1065353216;c[X+96+4>>2]=0;c[X+96+8>>2]=0;g[X+96+12>>2]=0.0;Bf(N,L,0,X+160|0,X+96|0)}if(M&2048|0){L=c[T+1088>>2]|0;c[X+160>>2]=0;c[X+160+4>>2]=1065353216;c[X+160+8>>2]=1065353216;g[X+160+12>>2]=0.0;c[X+96>>2]=1065353216;c[X+96+4>>2]=0;c[X+96+8>>2]=0;g[X+96+12>>2]=0.0;Bf(N,L,0,X+160|0,X+96|0)}a:do if(M&4096|0?(c[T+892>>2]|0)>0:0){e=0;while(1){f=c[(c[T+900>>2]|0)+(e<<2)>>2]|0;switch(ob[c[(c[f>>2]|0)+20>>2]&127](f)|0){case 0:{M=zi(f+4|0)|0;ha=+g[f+28>>2];ga=+g[f+32>>2];fa=+g[f+36>>2];ea=ha*+g[M+16>>2]+ga*+g[M+20>>2]+fa*+g[M+24>>2]+ +g[M+52>>2];da=ha*+g[M+32>>2]+ga*+g[M+36>>2]+fa*+g[M+40>>2]+ +g[M+56>>2];g[X+32>>2]=ha*+g[M>>2]+ga*+g[M+4>>2]+fa*+g[M+8>>2]+ +g[M+48>>2];g[X+32+4>>2]=ea;g[X+32+8>>2]=da;g[X+32+12>>2]=0.0;M=zi(f+16|0)|0;da=+g[f+44>>2];ea=+g[f+48>>2];fa=+g[f+52>>2];ga=da*+g[M+16>>2]+ea*+g[M+20>>2]+fa*+g[M+24>>2]+ +g[M+52>>2];ha=da*+g[M+32>>2]+ea*+g[M+36>>2]+fa*+g[M+40>>2]+ +g[M+56>>2];g[X+16>>2]=da*+g[M>>2]+ea*+g[M+4>>2]+fa*+g[M+8>>2]+ +g[M+48>>2];g[X+16+4>>2]=ga;g[X+16+8>>2]=ha;g[X+16+12>>2]=0.0;M=c[(c[N>>2]|0)+16>>2]|0;L=(zi(f+4|0)|0)+48|0;c[X+160>>2]=1065353216;c[X+160+4>>2]=1065353216;c[X+160+8>>2]=0;g[X+160+12>>2]=0.0;Yb[M&127](N,L,X+32|0,X+160|0);L=c[(c[N>>2]|0)+16>>2]|0;M=(zi(f+16|0)|0)+48|0;c[X+160>>2]=0;c[X+160+4>>2]=1065353216;c[X+160+8>>2]=1065353216;g[X+160+12>>2]=0.0;Yb[L&127](N,M,X+16|0,X+160|0);c[X>>2]=1065353216;c[X+4>>2]=1065353216;c[X+8>>2]=0;g[X+12>>2]=0.0;M=c[(c[N>>2]|0)+16>>2]|0;ha=+g[X+32>>2];L=c[X+32+4>>2]|0;t=c[X+32+8>>2]|0;g[X+160>>2]=ha+-.25;c[X+160+4>>2]=L;c[X+160+8>>2]=t;g[X+160+12>>2]=0.0;ga=(c[l>>2]=L,+g[l>>2])+0.0;fa=(c[l>>2]=t,+g[l>>2])+0.0;g[X+96>>2]=ha+.25;g[X+96+4>>2]=ga;g[X+96+8>>2]=fa;g[X+96+12>>2]=0.0;Yb[M&127](N,X+160|0,X+96|0,X);M=c[(c[N>>2]|0)+16>>2]|0;t=c[X+32>>2]|0;fa=+g[X+32+4>>2];L=c[X+32+8>>2]|0;c[X+160>>2]=t;g[X+160+4>>2]=fa+-.25;c[X+160+8>>2]=L;g[X+160+12>>2]=0.0;ga=(c[l>>2]=t,+g[l>>2])+0.0;ha=(c[l>>2]=L,+g[l>>2])+0.0;g[X+96>>2]=ga;g[X+96+4>>2]=fa+.25;g[X+96+8>>2]=ha;g[X+96+12>>2]=0.0;Yb[M&127](N,X+160|0,X+96|0,X);M=c[(c[N>>2]|0)+16>>2]|0;L=c[X+32>>2]|0;t=c[X+32+4>>2]|0;ha=+g[X+32+8>>2];c[X+160>>2]=L;c[X+160+4>>2]=t;g[X+160+8>>2]=ha+-.25;g[X+160+12>>2]=0.0;fa=(c[l>>2]=L,+g[l>>2])+0.0;ga=(c[l>>2]=t,+g[l>>2])+0.0;g[X+96>>2]=fa;g[X+96+4>>2]=ga;g[X+96+8>>2]=ha+.25;g[X+96+12>>2]=0.0;Yb[M&127](N,X+160|0,X+96|0,X);c[X>>2]=0;c[X+4>>2]=1065353216;c[X+8>>2]=1065353216;g[X+12>>2]=0.0;M=c[(c[N>>2]|0)+16>>2]|0;ha=+g[X+16>>2];t=c[X+16+4>>2]|0;L=c[X+16+8>>2]|0;g[X+160>>2]=ha+-.25;c[X+160+4>>2]=t;c[X+160+8>>2]=L;g[X+160+12>>2]=0.0;ga=(c[l>>2]=t,+g[l>>2])+0.0;fa=(c[l>>2]=L,+g[l>>2])+0.0;g[X+96>>2]=ha+.25;g[X+96+4>>2]=ga;g[X+96+8>>2]=fa;g[X+96+12>>2]=0.0;Yb[M&127](N,X+160|0,X+96|0,X);M=c[(c[N>>2]|0)+16>>2]|0;L=c[X+16>>2]|0;fa=+g[X+16+4>>2];t=c[X+16+8>>2]|0;c[X+160>>2]=L;g[X+160+4>>2]=fa+-.25;c[X+160+8>>2]=t;g[X+160+12>>2]=0.0;ga=(c[l>>2]=L,+g[l>>2])+0.0;ha=(c[l>>2]=t,+g[l>>2])+0.0;g[X+96>>2]=ga;g[X+96+4>>2]=fa+.25;g[X+96+8>>2]=ha;g[X+96+12>>2]=0.0;Yb[M&127](N,X+160|0,X+96|0,X);M=c[(c[N>>2]|0)+16>>2]|0;t=c[X+16>>2]|0;L=c[X+16+4>>2]|0;ha=+g[X+16+8>>2];c[X+160>>2]=t;c[X+160+4>>2]=L;g[X+160+8>>2]=ha+-.25;g[X+160+12>>2]=0.0;fa=(c[l>>2]=t,+g[l>>2])+0.0;ga=(c[l>>2]=L,+g[l>>2])+0.0;g[X+96>>2]=fa;g[X+96+4>>2]=ga;g[X+96+8>>2]=ha+.25;g[X+96+12>>2]=0.0;Yb[M&127](N,X+160|0,X+96|0,X);break}case 1:{M=(zi(f+4|0)|0)+48|0;c[X+160>>2]=c[M>>2];c[X+160+4>>2]=c[M+4>>2];c[X+160+8>>2]=c[M+8>>2];c[X+160+12>>2]=c[M+12>>2];M=(zi(f+16|0)|0)+48|0;c[X+96>>2]=c[M>>2];c[X+96+4>>2]=c[M+4>>2];c[X+96+8>>2]=c[M+8>>2];c[X+96+12>>2]=c[M+12>>2];M=zi(f+4|0)|0;ba=+g[f+28>>2];aa=+g[f+32>>2];ea=+g[f+36>>2];ca=+g[M>>2]*ba+ +g[M+4>>2]*aa+ +g[M+8>>2]*ea;da=ba*+g[M+16>>2]+aa*+g[M+20>>2]+ea*+g[M+24>>2];ea=ba*+g[M+32>>2]+aa*+g[M+36>>2]+ea*+g[M+40>>2];M=zi(f+16|0)|0;aa=+g[f+44>>2];ba=+g[f+48>>2];ha=+g[f+52>>2];fa=+g[M>>2]*aa+ +g[M+4>>2]*ba+ +g[M+8>>2]*ha;ga=aa*+g[M+16>>2]+ba*+g[M+20>>2]+ha*+g[M+24>>2];ha=aa*+g[M+32>>2]+ba*+g[M+36>>2]+ha*+g[M+40>>2];M=c[(c[N>>2]|0)+16>>2]|0;ba=da*10.0+ +g[X+160+4>>2];aa=ea*10.0+ +g[X+160+8>>2];g[X+32>>2]=ca*10.0+ +g[X+160>>2];g[X+32+4>>2]=ba;g[X+32+8>>2]=aa;g[X+32+12>>2]=0.0;c[X+16>>2]=1065353216;c[X+16+4>>2]=1065353216;c[X+16+8>>2]=0;g[X+16+12>>2]=0.0;Yb[M&127](N,X+160|0,X+32|0,X+16|0);M=c[(c[N>>2]|0)+16>>2]|0;aa=ga*10.0+ +g[X+160+4>>2];ba=ha*10.0+ +g[X+160+8>>2];g[X+32>>2]=fa*10.0+ +g[X+160>>2];g[X+32+4>>2]=aa;g[X+32+8>>2]=ba;g[X+32+12>>2]=0.0;c[X+16>>2]=1065353216;c[X+16+4>>2]=1065353216;c[X+16+8>>2]=0;g[X+16+12>>2]=0.0;Yb[M&127](N,X+160|0,X+32|0,X+16|0);M=c[(c[N>>2]|0)+16>>2]|0;da=da*10.0+ +g[X+96+4>>2];ea=ea*10.0+ +g[X+96+8>>2];g[X+32>>2]=ca*10.0+ +g[X+96>>2];g[X+32+4>>2]=da;g[X+32+8>>2]=ea;g[X+32+12>>2]=0.0;c[X+16>>2]=0;c[X+16+4>>2]=1065353216;c[X+16+8>>2]=1065353216;g[X+16+12>>2]=0.0;Yb[M&127](N,X+96|0,X+32|0,X+16|0);M=c[(c[N>>2]|0)+16>>2]|0;ga=ga*10.0+ +g[X+96+4>>2];ha=ha*10.0+ +g[X+96+8>>2];g[X+32>>2]=fa*10.0+ +g[X+96>>2];g[X+32+4>>2]=ga;g[X+32+8>>2]=ha;g[X+32+12>>2]=0.0;c[X+16>>2]=0;c[X+16+4>>2]=1065353216;c[X+16+8>>2]=1065353216;g[X+16+12>>2]=0.0;Yb[M&127](N,X+96|0,X+32|0,X+16|0);break}default:{}}e=e+1|0;if((e|0)>=(c[T+892>>2]|0))break a}}while(0)}e=c[d+72>>2]|0;if(e|0?(ob[c[(c[e>>2]|0)+56>>2]&127](e)|0)&2|0:0){e=b[d+348>>1]|0;if(!((e&255)<<24>>24))e=(e&65535)>>>8&255;else{N=c[d+72>>2]|0;e=c[T+968>>2]|0;c[X+160>>2]=1065353216;c[X+160+4>>2]=0;c[X+160+8>>2]=1065353216;g[X+160+12>>2]=0.0;c[X+96>>2]=1065353216;c[X+96+4>>2]=1065353216;c[X+96+8>>2]=1065353216;g[X+96+12>>2]=0.0;Bf(N,e,0,X+160|0,X+96|0);e=a[d+349>>0]|0}if(e<<24>>24){M=c[d+72>>2]|0;N=c[T+1028>>2]|0;c[X+160>>2]=0;c[X+160+4>>2]=1065353216;c[X+160+8>>2]=0;g[X+160+12>>2]=0.0;c[X+96>>2]=1065353216;c[X+96+4>>2]=0;c[X+96+8>>2]=0;g[X+96+12>>2]=0.0;Bf(M,N,0,X+160|0,X+96|0)}if(a[d+350>>0]|0){N=c[d+72>>2]|0;T=c[T+1088>>2]|0;c[X+160>>2]=0;c[X+160+4>>2]=1065353216;c[X+160+8>>2]=1065353216;g[X+160+12>>2]=0.0;c[X+96>>2]=1065353216;c[X+96+4>>2]=0;c[X+96+8>>2]=0;g[X+96+12>>2]=0.0;Bf(N,T,0,X+160|0,X+96|0)}}O=O+1|0}while((O|0)<(c[d+328>>2]|0));i=X;return}function ac(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0,j=0,k=0,m=0.0,n=0.0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0,E=0,F=0,G=0,H=0,K=0,L=0,M=0.0,N=0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0;N=i;i=i+176|0;C=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;C=(ob[c[(c[C>>2]|0)+56>>2]&127](C)|0)>>>11;L=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;L=(ob[c[(c[L>>2]|0)+56>>2]&127](L)|0)>>>12;M=+g[d+40>>2];if(M<=0.0){i=N;return}switch(c[d+4>>2]|0){case 3:{c[N+112>>2]=1065353216;c[N+112+4>>2]=0;c[N+112+4+4>>2]=0;c[N+112+4+8>>2]=0;c[N+112+4+12>>2]=0;c[N+112+20>>2]=1065353216;c[N+112+24>>2]=0;c[N+112+24+4>>2]=0;c[N+112+24+8>>2]=0;c[N+112+24+12>>2]=0;c[N+112+40>>2]=1065353216;L=N+112+44|0;c[L>>2]=0;c[L+4>>2]=0;c[L+8>>2]=0;c[L+12>>2]=0;c[L+16>>2]=0;B=+g[d+300>>2];A=+g[d+304>>2];z=+g[d+308>>2];L=c[d+28>>2]|0;y=B*+g[L+20>>2]+A*+g[L+24>>2]+z*+g[L+28>>2]+ +g[L+56>>2];x=B*+g[L+36>>2]+A*+g[L+40>>2]+z*+g[L+44>>2]+ +g[L+60>>2];g[N+112+48>>2]=B*+g[L+4>>2]+A*+g[L+8>>2]+z*+g[L+12>>2]+ +g[L+52>>2];g[N+112+52>>2]=y;g[N+112+56>>2]=x;g[N+112+60>>2]=0.0;L=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[L>>2]|0)+64>>2]&7](L,N+112|0,M);x=+g[d+316>>2];y=+g[d+320>>2];z=+g[d+324>>2];d=c[d+32>>2]|0;A=x*+g[d+20>>2]+y*+g[d+24>>2]+z*+g[d+28>>2]+ +g[d+56>>2];B=x*+g[d+36>>2]+y*+g[d+40>>2]+z*+g[d+44>>2]+ +g[d+60>>2];g[N+112+48>>2]=x*+g[d+4>>2]+y*+g[d+8>>2]+z*+g[d+12>>2]+ +g[d+52>>2];g[N+112+52>>2]=A;g[N+112+56>>2]=B;g[N+112+60>>2]=0.0;if(C&1|0){b=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[b>>2]|0)+64>>2]&7](b,N+112|0,M)}i=N;return}case 4:{K=c[d+28>>2]|0;O=+g[d+552>>2];U=+g[K+4>>2];e=+g[d+552+16>>2];T=+g[K+8>>2];f=+g[d+552+32>>2];S=+g[K+12>>2];m=+g[d+552+4>>2];n=+g[d+552+20>>2];s=+g[d+552+36>>2];t=+g[d+552+8>>2];v=+g[d+552+24>>2];x=+g[d+552+40>>2];R=+g[K+20>>2];Q=+g[K+24>>2];P=+g[K+28>>2];u=+g[K+36>>2];w=+g[K+40>>2];y=+g[K+44>>2];W=+g[d+552+48>>2];V=+g[d+552+52>>2];B=+g[d+552+56>>2];z=+g[K+52>>2]+(U*W+T*V+S*B);A=R*W+Q*V+P*B+ +g[K+56>>2];B=u*W+w*V+y*B+ +g[K+60>>2];g[N+112>>2]=O*U+e*T+f*S;g[N+112+4>>2]=U*m+T*n+S*s;g[N+112+8>>2]=U*t+T*v+S*x;g[N+112+12>>2]=0.0;g[N+112+16>>2]=O*R+e*Q+f*P;g[N+112+20>>2]=m*R+n*Q+s*P;g[N+112+24>>2]=t*R+v*Q+x*P;g[N+112+28>>2]=0.0;g[N+112+32>>2]=O*u+e*w+f*y;g[N+112+36>>2]=m*u+n*w+s*y;g[N+112+40>>2]=t*u+v*w+x*y;g[N+112+44>>2]=0.0;g[N+112+48>>2]=z;g[N+112+52>>2]=A;g[N+112+56>>2]=B;g[N+112+60>>2]=0.0;if(!(C&1)){K=c[d+32>>2]|0;w=+g[d+616>>2];m=+g[K+4>>2];x=+g[d+616+16>>2];n=+g[K+8>>2];y=+g[d+616+32>>2];s=+g[K+12>>2];z=+g[d+616+4>>2];A=+g[d+616+20>>2];B=+g[d+616+36>>2];O=+g[d+616+8>>2];Q=+g[d+616+24>>2];S=+g[d+616+40>>2];t=+g[K+20>>2];u=+g[K+24>>2];v=+g[K+28>>2];P=+g[K+36>>2];R=+g[K+40>>2];T=+g[K+44>>2];e=+g[d+616+48>>2];f=+g[d+616+52>>2];W=+g[d+616+56>>2];U=+g[K+52>>2]+(m*e+n*f+s*W);V=t*e+u*f+v*W+ +g[K+56>>2];W=P*e+R*f+T*W+ +g[K+60>>2];g[N+112>>2]=w*m+x*n+y*s;g[N+112+4>>2]=m*z+n*A+s*B;g[N+112+8>>2]=m*O+n*Q+s*S;g[N+112+12>>2]=0.0;g[N+112+16>>2]=w*t+x*u+y*v;g[N+112+20>>2]=z*t+A*u+B*v;g[N+112+24>>2]=O*t+Q*u+S*v;g[N+112+28>>2]=0.0;g[N+112+32>>2]=w*P+x*R+y*T;g[N+112+36>>2]=z*P+A*R+B*T;g[N+112+40>>2]=O*P+Q*R+S*T;g[N+112+44>>2]=0.0;g[N+112+48>>2]=U;g[N+112+52>>2]=V;g[N+112+56>>2]=W;g[N+112+60>>2]=0.0}else{K=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[K>>2]|0)+64>>2]&7](K,N+112|0,M);K=c[d+32>>2]|0;w=+g[d+616>>2];m=+g[K+4>>2];x=+g[d+616+16>>2];n=+g[K+8>>2];y=+g[d+616+32>>2];s=+g[K+12>>2];z=+g[d+616+4>>2];A=+g[d+616+20>>2];B=+g[d+616+36>>2];O=+g[d+616+8>>2];Q=+g[d+616+24>>2];S=+g[d+616+40>>2];t=+g[K+20>>2];u=+g[K+24>>2];v=+g[K+28>>2];P=+g[K+36>>2];R=+g[K+40>>2];T=+g[K+44>>2];e=+g[d+616+48>>2];f=+g[d+616+52>>2];W=+g[d+616+56>>2];U=+g[K+52>>2]+(m*e+n*f+s*W);V=t*e+u*f+v*W+ +g[K+56>>2];W=P*e+R*f+T*W+ +g[K+60>>2];g[N+112>>2]=w*m+x*n+y*s;g[N+112+4>>2]=m*z+n*A+s*B;g[N+112+8>>2]=m*O+n*Q+s*S;g[N+112+12>>2]=0.0;g[N+112+16>>2]=w*t+x*u+y*v;g[N+112+20>>2]=z*t+A*u+B*v;g[N+112+24>>2]=O*t+Q*u+S*v;g[N+112+28>>2]=0.0;g[N+112+32>>2]=w*P+x*R+y*T;g[N+112+36>>2]=z*P+A*R+B*T;g[N+112+40>>2]=O*P+Q*R+S*T;g[N+112+44>>2]=0.0;g[N+112+48>>2]=U;g[N+112+52>>2]=V;g[N+112+56>>2]=W;g[N+112+60>>2]=0.0;K=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[K>>2]|0)+64>>2]&7](K,N+112|0,M)}m=+g[d+688>>2];n=+g[d+688+4>>2];e=+jh(m-n,6.2831854820251465);if(!(e<-3.1415927410125732))if(e>3.1415927410125732)f=e+-6.2831854820251465;else f=e;else f=e+6.2831854820251465;e=+jh(m+n,6.2831854820251465);if(!(e<-3.1415927410125732)){if(e>3.1415927410125732)e=e+-6.2831854820251465}else e=e+6.2831854820251465;if(!(f==e)?L&1|0:0){c[N+96>>2]=c[N+112+8>>2];c[N+96+4>>2]=c[N+112+24>>2];c[N+96+8>>2]=c[N+112+40>>2];g[N+96+12>>2]=0.0;c[N+80>>2]=c[N+112>>2];c[N+80+4>>2]=c[N+112+16>>2];c[N+80+8>>2]=c[N+112+32>>2];g[N+80+12>>2]=0.0;b=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;d=c[(c[b>>2]|0)+68>>2]|0;c[N+64>>2]=0;c[N+64+4>>2]=0;c[N+64+8>>2]=0;c[N+64+12>>2]=0;vb[d&0](b,N+112+48|0,N+96|0,N+80|0,M,M,n>0.0?f:0.0,n>0.0?e:6.2831854820251465,N+64|0,n>0.0,10.0)}i=N;return}case 5:{E=c[d+28>>2]|0;w=+g[d+300>>2];m=+g[E+4>>2];x=+g[d+300+16>>2];n=+g[E+8>>2];y=+g[d+300+32>>2];s=+g[E+12>>2];z=+g[d+300+4>>2];A=+g[d+300+20>>2];B=+g[d+300+36>>2];O=+g[d+300+8>>2];Q=+g[d+300+24>>2];S=+g[d+300+40>>2];t=+g[E+20>>2];u=+g[E+24>>2];v=+g[E+28>>2];P=+g[E+36>>2];R=+g[E+40>>2];T=+g[E+44>>2];e=+g[d+300+48>>2];f=+g[d+300+52>>2];W=+g[d+300+56>>2];U=+g[E+52>>2]+(m*e+n*f+s*W);V=t*e+u*f+v*W+ +g[E+56>>2];W=P*e+R*f+T*W+ +g[E+60>>2];g[N+112>>2]=w*m+x*n+y*s;E=N+112+4|0;g[E>>2]=m*z+n*A+s*B;G=N+112+8|0;g[G>>2]=m*O+n*Q+s*S;g[N+112+12>>2]=0.0;H=N+112+16|0;g[H>>2]=w*t+x*u+y*v;K=N+112+20|0;g[K>>2]=z*t+A*u+B*v;o=N+112+24|0;g[o>>2]=O*t+Q*u+S*v;g[N+112+28>>2]=0.0;p=N+112+32|0;g[p>>2]=w*P+x*R+y*T;q=N+112+36|0;g[q>>2]=z*P+A*R+B*T;r=N+112+40|0;g[r>>2]=O*P+Q*R+S*T;g[N+112+44>>2]=0.0;k=N+112+48|0;g[k>>2]=U;D=N+112+52|0;g[D>>2]=V;F=N+112+56|0;g[F>>2]=W;g[N+112+60>>2]=0.0;if(!(C&1)){C=c[d+32>>2]|0;w=+g[d+364>>2];m=+g[C+4>>2];x=+g[d+364+16>>2];n=+g[C+8>>2];y=+g[d+364+32>>2];s=+g[C+12>>2];z=+g[d+364+4>>2];A=+g[d+364+20>>2];B=+g[d+364+36>>2];O=+g[d+364+8>>2];Q=+g[d+364+24>>2];S=+g[d+364+40>>2];t=+g[C+20>>2];u=+g[C+24>>2];v=+g[C+28>>2];P=+g[C+36>>2];R=+g[C+40>>2];T=+g[C+44>>2];e=+g[d+364+48>>2];f=+g[d+364+52>>2];W=+g[d+364+56>>2];U=+g[C+52>>2]+(m*e+n*f+s*W);V=t*e+u*f+v*W+ +g[C+56>>2];W=P*e+R*f+T*W+ +g[C+60>>2];g[N+112>>2]=w*m+x*n+y*s;g[E>>2]=m*z+n*A+s*B;g[G>>2]=m*O+n*Q+s*S;g[N+112+12>>2]=0.0;g[H>>2]=w*t+x*u+y*v;g[K>>2]=z*t+A*u+B*v;g[o>>2]=O*t+Q*u+S*v;g[N+112+28>>2]=0.0;g[p>>2]=w*P+x*R+y*T;g[q>>2]=z*P+A*R+B*T;g[r>>2]=O*P+Q*R+S*T;g[N+112+44>>2]=0.0;g[k>>2]=U;g[D>>2]=V;g[F>>2]=W;g[N+112+60>>2]=0.0}else{C=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[C>>2]|0)+64>>2]&7](C,N+112|0,M);C=c[d+32>>2]|0;w=+g[d+364>>2];m=+g[C+4>>2];x=+g[d+364+16>>2];n=+g[C+8>>2];y=+g[d+364+32>>2];s=+g[C+12>>2];z=+g[d+364+4>>2];A=+g[d+364+20>>2];B=+g[d+364+36>>2];O=+g[d+364+8>>2];Q=+g[d+364+24>>2];S=+g[d+364+40>>2];t=+g[C+20>>2];u=+g[C+24>>2];v=+g[C+28>>2];P=+g[C+36>>2];R=+g[C+40>>2];T=+g[C+44>>2];e=+g[d+364+48>>2];f=+g[d+364+52>>2];W=+g[d+364+56>>2];U=+g[C+52>>2]+(m*e+n*f+s*W);V=t*e+u*f+v*W+ +g[C+56>>2];W=P*e+R*f+T*W+ +g[C+60>>2];g[N+112>>2]=w*m+x*n+y*s;g[E>>2]=m*z+n*A+s*B;g[G>>2]=m*O+n*Q+s*S;g[N+112+12>>2]=0.0;g[H>>2]=w*t+x*u+y*v;g[K>>2]=z*t+A*u+B*v;g[o>>2]=O*t+Q*u+S*v;g[N+112+28>>2]=0.0;g[p>>2]=w*P+x*R+y*T;g[q>>2]=z*P+A*R+B*T;g[r>>2]=O*P+Q*R+S*T;g[N+112+44>>2]=0.0;g[k>>2]=U;g[D>>2]=V;g[F>>2]=W;g[N+112+60>>2]=0.0;C=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[C>>2]|0)+64>>2]&7](C,N+112|0,M)}if(L&1|0){tj(N+96|0,d,6.0868353843688965,M);S=+g[N+96>>2];T=+g[N+96+4>>2];U=+g[N+96+8>>2];V=S*+g[H>>2]+T*+g[K>>2]+U*+g[o>>2]+ +g[D>>2];W=S*+g[p>>2]+T*+g[q>>2]+U*+g[r>>2]+ +g[F>>2];g[N+96>>2]=S*+g[N+112>>2]+T*+g[E>>2]+U*+g[G>>2]+ +g[k>>2];g[N+96+4>>2]=V;g[N+96+8>>2]=W;g[N+96+12>>2]=0.0;j=N+112+48|0;h=0;do{tj(N+80|0,d,+(h|0)*6.283185005187988*.03125,M);S=+g[N+80>>2];T=+g[N+80+4>>2];U=+g[N+80+8>>2];V=S*+g[H>>2]+T*+g[K>>2]+U*+g[o>>2]+ +g[D>>2];W=S*+g[p>>2]+T*+g[q>>2]+U*+g[r>>2]+ +g[F>>2];g[N+80>>2]=S*+g[N+112>>2]+T*+g[E>>2]+U*+g[G>>2]+ +g[k>>2];g[N+80+4>>2]=V;g[N+80+8>>2]=W;g[N+80+12>>2]=0.0;L=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;C=c[(c[L>>2]|0)+16>>2]|0;c[N+64>>2]=0;c[N+64+4>>2]=0;c[N+64+8>>2]=0;c[N+64+12>>2]=0;Yb[C&127](L,N+96|0,N+80|0,N+64|0);if(!(h&3)){L=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;C=c[(c[L>>2]|0)+16>>2]|0;c[N+64>>2]=0;c[N+64+4>>2]=0;c[N+64+8>>2]=0;c[N+64+12>>2]=0;Yb[C&127](L,j,N+80|0,N+64|0)}c[N+96>>2]=c[N+80>>2];c[N+96+4>>2]=c[N+80+4>>2];c[N+96+8>>2]=c[N+80+8>>2];c[N+96+12>>2]=c[N+80+12>>2];h=h+1|0}while((h|0)!=32);A=+g[d+452>>2];B=+g[d+512>>2];h=c[d+32>>2]|0;if(+g[h+384>>2]>0.0){S=+g[d+364>>2];T=+g[h+4>>2];U=+g[d+364+16>>2];V=+g[h+8>>2];W=+g[d+364+32>>2];x=+g[h+12>>2];Q=+g[d+364+4>>2];R=+g[d+364+20>>2];w=+g[d+364+36>>2];O=+g[d+364+8>>2];P=+g[d+364+24>>2];v=+g[d+364+40>>2];Y=+g[h+20>>2];X=+g[h+24>>2];u=+g[h+28>>2];t=+g[h+36>>2];s=+g[h+40>>2];n=+g[h+44>>2];m=+g[d+364+48>>2];f=+g[d+364+52>>2];e=+g[d+364+56>>2];y=t*m+s*f+n*e+ +g[h+60>>2];z=Y*m+X*f+u*e+ +g[h+56>>2];e=+g[h+52>>2]+(T*m+V*f+x*e);f=O*t+P*s+v*n;m=Q*t+R*s+w*n;n=S*t+U*s+W*n;s=O*Y+P*X+v*u;t=Q*Y+R*X+w*u;u=S*Y+U*X+W*u;v=T*O+V*P+x*v;w=T*Q+V*R+x*w;x=S*T+U*V+W*x}else{L=c[d+28>>2]|0;U=+g[d+300>>2];V=+g[L+4>>2];W=+g[d+300+16>>2];X=+g[L+8>>2];Y=+g[d+300+32>>2];x=+g[L+12>>2];S=+g[d+300+4>>2];T=+g[d+300+20>>2];w=+g[d+300+36>>2];Q=+g[d+300+8>>2];R=+g[d+300+24>>2];v=+g[d+300+40>>2];O=+g[L+20>>2];P=+g[L+24>>2];u=+g[L+28>>2];t=+g[L+36>>2];s=+g[L+40>>2];n=+g[L+44>>2];m=+g[d+300+48>>2];f=+g[d+300+52>>2];e=+g[d+300+56>>2];y=t*m+s*f+n*e+ +g[L+60>>2];z=O*m+P*f+u*e+ +g[L+56>>2];e=+g[L+52>>2]+(V*m+X*f+x*e);f=Q*t+R*s+v*n;m=S*t+T*s+w*n;n=U*t+W*s+Y*n;s=Q*O+R*P+v*u;t=S*O+T*P+w*u;u=U*O+W*P+Y*u;v=V*Q+X*R+x*v;w=V*S+X*T+x*w;x=U*V+W*X+Y*x}g[N+112>>2]=x;g[E>>2]=w;g[G>>2]=v;g[N+112+12>>2]=0.0;g[H>>2]=u;g[K>>2]=t;g[o>>2]=s;g[N+112+28>>2]=0.0;g[p>>2]=n;g[q>>2]=m;g[r>>2]=f;g[N+112+44>>2]=0.0;g[k>>2]=e;g[D>>2]=z;g[F>>2]=y;g[N+112+60>>2]=0.0;c[N+80>>2]=c[j>>2];c[N+80+4>>2]=c[j+4>>2];c[N+80+8>>2]=c[j+8>>2];c[N+80+12>>2]=c[j+12>>2];g[N+64>>2]=x;g[N+64+4>>2]=u;g[N+64+8>>2]=n;g[N+64+12>>2]=0.0;g[N+48>>2]=w;g[N+48+4>>2]=t;g[N+48+8>>2]=m;g[N+48+12>>2]=0.0;b=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;d=c[(c[b>>2]|0)+68>>2]|0;c[N+32>>2]=0;c[N+32+4>>2]=0;c[N+32+8>>2]=0;c[N+32+12>>2]=0;vb[d&0](b,N+80|0,N+64|0,N+48|0,M,M,-B-A,A-B,N+32|0,1,10.0)}i=N;return}case 6:case 9:{c[N+112>>2]=c[d+1064>>2];c[N+112+4>>2]=c[d+1064+4>>2];c[N+112+8>>2]=c[d+1064+8>>2];c[N+112+12>>2]=c[d+1064+12>>2];j=N+112+16|0;k=d+1064+16|0;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];o=N+112+32|0;p=d+1064+32|0;c[o>>2]=c[p>>2];c[o+4>>2]=c[p+4>>2];c[o+8>>2]=c[p+8>>2];c[o+12>>2]=c[p+12>>2];q=N+112+48|0;r=d+1064+48|0;c[q>>2]=c[r>>2];c[q+4>>2]=c[r+4>>2];c[q+8>>2]=c[r+8>>2];c[q+12>>2]=c[r+12>>2];if(!(C&1)){c[N+112>>2]=c[d+1128>>2];c[N+112+4>>2]=c[d+1128+4>>2];c[N+112+8>>2]=c[d+1128+8>>2];c[N+112+12>>2]=c[d+1128+12>>2];c[j>>2]=c[d+1128+16>>2];c[j+4>>2]=c[d+1128+16+4>>2];c[j+8>>2]=c[d+1128+16+8>>2];c[j+12>>2]=c[d+1128+16+12>>2];c[o>>2]=c[d+1128+32>>2];c[o+4>>2]=c[d+1128+32+4>>2];c[o+8>>2]=c[d+1128+32+8>>2];c[o+12>>2]=c[d+1128+32+12>>2];c[q>>2]=c[d+1128+48>>2];c[q+4>>2]=c[d+1128+48+4>>2];c[q+8>>2]=c[d+1128+48+8>>2];c[q+12>>2]=c[d+1128+48+12>>2]}else{K=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[K>>2]|0)+64>>2]&7](K,N+112|0,M);c[N+112>>2]=c[d+1128>>2];c[N+112+4>>2]=c[d+1128+4>>2];c[N+112+8>>2]=c[d+1128+8>>2];c[N+112+12>>2]=c[d+1128+12>>2];c[j>>2]=c[d+1128+16>>2];c[j+4>>2]=c[d+1128+16+4>>2];c[j+8>>2]=c[d+1128+16+8>>2];c[j+12>>2]=c[d+1128+16+12>>2];c[o>>2]=c[d+1128+32>>2];c[o+4>>2]=c[d+1128+32+4>>2];c[o+8>>2]=c[d+1128+32+8>>2];c[o+12>>2]=c[d+1128+32+12>>2];c[q>>2]=c[d+1128+48>>2];c[q+4>>2]=c[d+1128+48+4>>2];c[q+8>>2]=c[d+1128+48+8>>2];c[q+12>>2]=c[d+1128+48+12>>2];K=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[K>>2]|0)+64>>2]&7](K,N+112|0,M)}if(L&1|0){c[N+112>>2]=c[d+1064>>2];c[N+112+4>>2]=c[d+1064+4>>2];c[N+112+8>>2]=c[d+1064+8>>2];c[N+112+12>>2]=c[d+1064+12>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];c[o>>2]=c[p>>2];c[o+4>>2]=c[p+4>>2];c[o+8>>2]=c[p+8>>2];c[o+12>>2]=c[p+12>>2];c[q>>2]=c[r>>2];c[q+4>>2]=c[r+4>>2];c[q+8>>2]=c[r+8>>2];c[q+12>>2]=c[r+12>>2];h=d+1128+48|0;c[N+96>>2]=c[N+112+8>>2];c[N+96+4>>2]=c[N+112+24>>2];c[N+96+8>>2]=c[N+112+40>>2];g[N+96+12>>2]=0.0;c[N+80>>2]=c[N+112>>2];c[N+80+4>>2]=c[N+112+16>>2];c[N+80+8>>2]=c[N+112+32>>2];g[N+80+12>>2]=0.0;U=+g[d+932>>2];e=+g[d+932+4>>2];X=+g[d+996>>2];W=+g[d+996+4>>2];H=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;K=c[(c[H>>2]|0)+72>>2]|0;c[N+64>>2]=0;c[N+64+4>>2]=0;c[N+64+8>>2]=0;c[N+64+12>>2]=0;Pb[K&0](H,h,N+96|0,N+80|0,M*.8999999761581421,U,e,X,W,N+64|0,10.0,1);H=c[N+112+4>>2]|0;K=c[N+112+20>>2]|0;L=c[N+112+36>>2]|0;c[N+80>>2]=H;c[N+80+4>>2]=K;c[N+80+8>>2]=L;g[N+80+12>>2]=0.0;W=+g[d+1196>>2];X=+g[d+1200>>2];e=+I(+W);W=+J(+W);U=+I(+X);X=+J(+X);V=(c[l>>2]=H,+g[l>>2]);Y=(c[l>>2]=K,+g[l>>2]);f=(c[l>>2]=L,+g[l>>2]);g[N+64>>2]=e*U*V+e*X*Y-W*f;g[N+64+4>>2]=U*Y-X*V;g[N+64+8>>2]=W*U*V+W*X*Y+e*f;c[N+112>>2]=c[d+1128>>2];c[N+112+4>>2]=c[d+1128+4>>2];c[N+112+8>>2]=c[d+1128+8>>2];c[N+112+12>>2]=c[d+1128+12>>2];c[j>>2]=c[d+1128+16>>2];c[j+4>>2]=c[d+1128+16+4>>2];c[j+8>>2]=c[d+1128+16+8>>2];c[j+12>>2]=c[d+1128+16+12>>2];c[o>>2]=c[d+1128+32>>2];c[o+4>>2]=c[d+1128+32+4>>2];c[o+8>>2]=c[d+1128+32+8>>2];c[o+12>>2]=c[d+1128+32+12>>2];c[q>>2]=c[h>>2];c[q+4>>2]=c[h+4>>2];c[q+8>>2]=c[h+8>>2];c[q+12>>2]=c[h+12>>2];f=-+g[N+112+16>>2];e=-+g[N+112+32>>2];g[N+48>>2]=-+g[N+112>>2];g[N+48+4>>2]=f;g[N+48+8>>2]=e;g[N+48+12>>2]=0.0;e=+g[d+868>>2];f=+g[d+868+4>>2];if(!(e>f)){if(e<f){L=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;K=c[(c[L>>2]|0)+68>>2]|0;c[N+32>>2]=0;c[N+32+4>>2]=0;c[N+32+8>>2]=0;c[N+32+12>>2]=0;vb[K&0](L,h,N+48|0,N+64|0,M,M,e,f,N+32|0,1,10.0)}}else{L=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;K=c[(c[L>>2]|0)+68>>2]|0;c[N+32>>2]=0;c[N+32+4>>2]=0;c[N+32+8>>2]=0;c[N+32+12>>2]=0;vb[K&0](L,h,N+48|0,N+64|0,M,M,-3.1415927410125732,3.1415927410125732,N+32|0,0,10.0)}c[N+112>>2]=c[d+1064>>2];c[N+112+4>>2]=c[d+1064+4>>2];c[N+112+8>>2]=c[d+1064+8>>2];c[N+112+12>>2]=c[d+1064+12>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];c[o>>2]=c[p>>2];c[o+4>>2]=c[p+4>>2];c[o+8>>2]=c[p+8>>2];c[o+12>>2]=c[p+12>>2];c[q>>2]=c[r>>2];c[q+4>>2]=c[r+4>>2];c[q+8>>2]=c[r+8>>2];c[q+12>>2]=c[r+12>>2];c[N+32>>2]=c[d+680>>2];c[N+32+4>>2]=c[d+680+4>>2];c[N+32+8>>2]=c[d+680+8>>2];c[N+32+12>>2]=c[d+680+12>>2];c[N+16>>2]=c[d+680+16>>2];c[N+16+4>>2]=c[d+680+16+4>>2];c[N+16+8>>2]=c[d+680+16+8>>2];c[N+16+12>>2]=c[d+680+16+12>>2];b=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;d=c[(c[b>>2]|0)+80>>2]|0;c[N>>2]=0;c[N+4>>2]=0;c[N+8>>2]=0;c[N+12>>2]=0;ib[d&31](b,N+32|0,N+16|0,N+112|0,N)}i=N;return}case 12:{c[N+112>>2]=c[d+1236>>2];c[N+112+4>>2]=c[d+1236+4>>2];c[N+112+8>>2]=c[d+1236+8>>2];c[N+112+12>>2]=c[d+1236+12>>2];j=N+112+16|0;k=d+1236+16|0;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];o=N+112+32|0;p=d+1236+32|0;c[o>>2]=c[p>>2];c[o+4>>2]=c[p+4>>2];c[o+8>>2]=c[p+8>>2];c[o+12>>2]=c[p+12>>2];q=N+112+48|0;r=d+1236+48|0;c[q>>2]=c[r>>2];c[q+4>>2]=c[r+4>>2];c[q+8>>2]=c[r+8>>2];c[q+12>>2]=c[r+12>>2];if(!(C&1)){c[N+112>>2]=c[d+1300>>2];c[N+112+4>>2]=c[d+1300+4>>2];c[N+112+8>>2]=c[d+1300+8>>2];c[N+112+12>>2]=c[d+1300+12>>2];c[j>>2]=c[d+1300+16>>2];c[j+4>>2]=c[d+1300+16+4>>2];c[j+8>>2]=c[d+1300+16+8>>2];c[j+12>>2]=c[d+1300+16+12>>2];c[o>>2]=c[d+1300+32>>2];c[o+4>>2]=c[d+1300+32+4>>2];c[o+8>>2]=c[d+1300+32+8>>2];c[o+12>>2]=c[d+1300+32+12>>2];c[q>>2]=c[d+1300+48>>2];c[q+4>>2]=c[d+1300+48+4>>2];c[q+8>>2]=c[d+1300+48+8>>2];c[q+12>>2]=c[d+1300+48+12>>2]}else{K=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[K>>2]|0)+64>>2]&7](K,N+112|0,M);c[N+112>>2]=c[d+1300>>2];c[N+112+4>>2]=c[d+1300+4>>2];c[N+112+8>>2]=c[d+1300+8>>2];c[N+112+12>>2]=c[d+1300+12>>2];c[j>>2]=c[d+1300+16>>2];c[j+4>>2]=c[d+1300+16+4>>2];c[j+8>>2]=c[d+1300+16+8>>2];c[j+12>>2]=c[d+1300+16+12>>2];c[o>>2]=c[d+1300+32>>2];c[o+4>>2]=c[d+1300+32+4>>2];c[o+8>>2]=c[d+1300+32+8>>2];c[o+12>>2]=c[d+1300+32+12>>2];c[q>>2]=c[d+1300+48>>2];c[q+4>>2]=c[d+1300+48+4>>2];c[q+8>>2]=c[d+1300+48+8>>2];c[q+12>>2]=c[d+1300+48+12>>2];K=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[K>>2]|0)+64>>2]&7](K,N+112|0,M)}if(L&1|0){c[N+112>>2]=c[d+1236>>2];c[N+112+4>>2]=c[d+1236+4>>2];c[N+112+8>>2]=c[d+1236+8>>2];c[N+112+12>>2]=c[d+1236+12>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];c[o>>2]=c[p>>2];c[o+4>>2]=c[p+4>>2];c[o+8>>2]=c[p+8>>2];c[o+12>>2]=c[p+12>>2];c[q>>2]=c[r>>2];c[q+4>>2]=c[r+4>>2];c[q+8>>2]=c[r+8>>2];c[q+12>>2]=c[r+12>>2];h=d+1300+48|0;c[N+96>>2]=c[N+112+8>>2];c[N+96+4>>2]=c[N+112+24>>2];c[N+96+8>>2]=c[N+112+40>>2];g[N+96+12>>2]=0.0;c[N+80>>2]=c[N+112>>2];c[N+80+4>>2]=c[N+112+16>>2];c[N+80+8>>2]=c[N+112+32>>2];g[N+80+12>>2]=0.0;U=+g[d+1056>>2];e=+g[d+1060>>2];X=+g[d+1144>>2];W=+g[d+1144+4>>2];H=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;K=c[(c[H>>2]|0)+72>>2]|0;c[N+64>>2]=0;c[N+64+4>>2]=0;c[N+64+8>>2]=0;c[N+64+12>>2]=0;Pb[K&0](H,h,N+96|0,N+80|0,M*.8999999761581421,U,e,X,W,N+64|0,10.0,1);H=c[N+112+4>>2]|0;K=c[N+112+20>>2]|0;L=c[N+112+36>>2]|0;c[N+80>>2]=H;c[N+80+4>>2]=K;c[N+80+8>>2]=L;g[N+80+12>>2]=0.0;W=+g[d+1368>>2];X=+g[d+1372>>2];e=+I(+W);W=+J(+W);U=+I(+X);X=+J(+X);V=(c[l>>2]=H,+g[l>>2]);Y=(c[l>>2]=K,+g[l>>2]);f=(c[l>>2]=L,+g[l>>2]);g[N+64>>2]=e*U*V+e*X*Y-W*f;g[N+64+4>>2]=U*Y-X*V;g[N+64+8>>2]=W*U*V+W*X*Y+e*f;c[N+112>>2]=c[d+1300>>2];c[N+112+4>>2]=c[d+1300+4>>2];c[N+112+8>>2]=c[d+1300+8>>2];c[N+112+12>>2]=c[d+1300+12>>2];c[j>>2]=c[d+1300+16>>2];c[j+4>>2]=c[d+1300+16+4>>2];c[j+8>>2]=c[d+1300+16+8>>2];c[j+12>>2]=c[d+1300+16+12>>2];c[o>>2]=c[d+1300+32>>2];c[o+4>>2]=c[d+1300+32+4>>2];c[o+8>>2]=c[d+1300+32+8>>2];c[o+12>>2]=c[d+1300+32+12>>2];c[q>>2]=c[h>>2];c[q+4>>2]=c[h+4>>2];c[q+8>>2]=c[h+8>>2];c[q+12>>2]=c[h+12>>2];f=-+g[N+112+16>>2];e=-+g[N+112+32>>2];g[N+48>>2]=-+g[N+112>>2];g[N+48+4>>2]=f;g[N+48+8>>2]=e;g[N+48+12>>2]=0.0;e=+g[d+968>>2];f=+g[d+968+4>>2];if(!(e>f)){if(e<f){L=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;K=c[(c[L>>2]|0)+68>>2]|0;c[N+32>>2]=0;c[N+32+4>>2]=0;c[N+32+8>>2]=0;c[N+32+12>>2]=0;vb[K&0](L,h,N+48|0,N+64|0,M,M,e,f,N+32|0,1,10.0)}}else{L=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;K=c[(c[L>>2]|0)+68>>2]|0;c[N+32>>2]=0;c[N+32+4>>2]=0;c[N+32+8>>2]=0;c[N+32+12>>2]=0;vb[K&0](L,h,N+48|0,N+64|0,M,M,-3.1415927410125732,3.1415927410125732,N+32|0,0,10.0)}c[N+112>>2]=c[d+1236>>2];c[N+112+4>>2]=c[d+1236+4>>2];c[N+112+8>>2]=c[d+1236+8>>2];c[N+112+12>>2]=c[d+1236+12>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];c[o>>2]=c[p>>2];c[o+4>>2]=c[p+4>>2];c[o+8>>2]=c[p+8>>2];c[o+12>>2]=c[p+12>>2];c[q>>2]=c[r>>2];c[q+4>>2]=c[r+4>>2];c[q+8>>2]=c[r+8>>2];c[q+12>>2]=c[r+12>>2];c[N+32>>2]=c[d+680>>2];c[N+32+4>>2]=c[d+680+4>>2];c[N+32+8>>2]=c[d+680+8>>2];c[N+32+12>>2]=c[d+680+12>>2];c[N+16>>2]=c[d+680+16>>2];c[N+16+4>>2]=c[d+680+16+4>>2];c[N+16+8>>2]=c[d+680+16+8>>2];c[N+16+12>>2]=c[d+680+16+12>>2];b=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;d=c[(c[b>>2]|0)+80>>2]|0;c[N>>2]=0;c[N+4>>2]=0;c[N+8>>2]=0;c[N+12>>2]=0;ib[d&31](b,N+32|0,N+16|0,N+112|0,N)}i=N;return}case 7:{c[N+112>>2]=c[d+824>>2];c[N+112+4>>2]=c[d+824+4>>2];c[N+112+8>>2]=c[d+824+8>>2];c[N+112+12>>2]=c[d+824+12>>2];h=N+112+16|0;c[h>>2]=c[d+824+16>>2];c[h+4>>2]=c[d+824+16+4>>2];c[h+8>>2]=c[d+824+16+8>>2];c[h+12>>2]=c[d+824+16+12>>2];j=N+112+32|0;c[j>>2]=c[d+824+32>>2];c[j+4>>2]=c[d+824+32+4>>2];c[j+8>>2]=c[d+824+32+8>>2];c[j+12>>2]=c[d+824+32+12>>2];k=N+112+48|0;c[k>>2]=c[d+824+48>>2];c[k+4>>2]=c[d+824+48+4>>2];c[k+8>>2]=c[d+824+48+8>>2];c[k+12>>2]=c[d+824+48+12>>2];if(!(C&1)){c[N+112>>2]=c[d+888>>2];c[N+112+4>>2]=c[d+888+4>>2];c[N+112+8>>2]=c[d+888+8>>2];c[N+112+12>>2]=c[d+888+12>>2];c[h>>2]=c[d+888+16>>2];c[h+4>>2]=c[d+888+16+4>>2];c[h+8>>2]=c[d+888+16+8>>2];c[h+12>>2]=c[d+888+16+12>>2];c[j>>2]=c[d+888+32>>2];c[j+4>>2]=c[d+888+32+4>>2];c[j+8>>2]=c[d+888+32+8>>2];c[j+12>>2]=c[d+888+32+12>>2];c[k>>2]=c[d+888+48>>2];c[k+4>>2]=c[d+888+48+4>>2];c[k+8>>2]=c[d+888+48+8>>2];c[k+12>>2]=c[d+888+48+12>>2]}else{K=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[K>>2]|0)+64>>2]&7](K,N+112|0,M);c[N+112>>2]=c[d+888>>2];c[N+112+4>>2]=c[d+888+4>>2];c[N+112+8>>2]=c[d+888+8>>2];c[N+112+12>>2]=c[d+888+12>>2];c[h>>2]=c[d+888+16>>2];c[h+4>>2]=c[d+888+16+4>>2];c[h+8>>2]=c[d+888+16+8>>2];c[h+12>>2]=c[d+888+16+12>>2];c[j>>2]=c[d+888+32>>2];c[j+4>>2]=c[d+888+32+4>>2];c[j+8>>2]=c[d+888+32+8>>2];c[j+12>>2]=c[d+888+32+12>>2];c[k>>2]=c[d+888+48>>2];c[k+4>>2]=c[d+888+48+4>>2];c[k+8>>2]=c[d+888+48+8>>2];c[k+12>>2]=c[d+888+48+12>>2];K=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;Wb[c[(c[K>>2]|0)+64>>2]&7](K,N+112|0,M)}if(L&1|0){D=a[d+180>>0]|0?d+824|0:d+888|0;E=c[D>>2]|0;H=c[D+4>>2]|0;F=c[D+16>>2]|0;K=c[D+20>>2]|0;G=c[D+32>>2]|0;L=c[D+36>>2]|0;A=+g[D+48>>2];Q=+g[D+52>>2];U=+g[D+56>>2];X=+g[d+184>>2];P=(c[l>>2]=E,+g[l>>2]);O=(c[l>>2]=H,+g[l>>2])*0.0;B=+g[D+8>>2]*0.0;T=(c[l>>2]=F,+g[l>>2]);S=(c[l>>2]=K,+g[l>>2])*0.0;R=+g[D+24>>2]*0.0;Y=(c[l>>2]=G,+g[l>>2]);W=(c[l>>2]=L,+g[l>>2])*0.0;V=+g[D+40>>2]*0.0;g[N+96>>2]=A+(B+(O+P*X));g[N+96+4>>2]=Q+(R+(S+T*X));g[N+96+8>>2]=U+(V+(W+Y*X));g[N+96+12>>2]=0.0;X=+g[d+188>>2];g[N+80>>2]=A+(B+(O+P*X));g[N+80+4>>2]=Q+(R+(S+T*X));g[N+80+8>>2]=U+(V+(W+Y*X));g[N+80+12>>2]=0.0;D=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;C=c[(c[D>>2]|0)+16>>2]|0;c[N+64>>2]=0;c[N+64+4>>2]=0;c[N+64+8>>2]=0;c[N+64+12>>2]=0;Yb[C&127](D,N+96|0,N+80|0,N+64|0);c[N+64>>2]=E;c[N+64+4>>2]=F;c[N+64+8>>2]=G;g[N+64+12>>2]=0.0;c[N+48>>2]=H;c[N+48+4>>2]=K;c[N+48+8>>2]=L;g[N+48+12>>2]=0.0;X=+g[d+192>>2];Y=+g[d+196>>2];b=ob[c[(c[b>>2]|0)+20>>2]&127](b)|0;L=c[(c[b>>2]|0)+68>>2]|0;c[N+32>>2]=0;c[N+32+4>>2]=0;c[N+32+8>>2]=0;c[N+32+12>>2]=0;vb[L&0](b,d+888+48|0,N+64|0,N+48|0,M,M,X,Y,N+32|0,1,10.0)}i=N;return}default:{i=N;return}}}function bc(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0,t=0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0,N=0,O=0.0,P=0.0,Q=0,R=0,T=0,U=0,V=0,W=0,X=0,Y=0;Y=i;i=i+112|0;c[Y+40>>2]=0;a[Y+16>>0]=1;c[Y+12>>2]=0;c[Y+4>>2]=0;c[Y+8>>2]=0;a[Y+36>>0]=1;c[Y+32>>2]=0;c[Y+24>>2]=0;c[Y+28>>2]=0;k=e>>>0<8?8:e;if((k|0)>0){c[6324]=(c[6324]|0)+1;h=ic((k<<4|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}j=0;do{X=h+(j<<4)|0;c[X>>2]=c[Y+48>>2];c[X+4>>2]=c[Y+48+4>>2];c[X+8>>2]=c[Y+48+8>>2];c[X+12>>2]=c[Y+48+12>>2];j=j+1|0}while((j|0)!=(k|0));X=h}else X=0;do if(!e){s=0;j=0;h=0;n=0;o=0}else{j=c[Y+24>>2]|0;if((j|0)<0){h=c[Y+32>>2]|0;do if((c[Y+28>>2]|0)<0){if(!h){a[Y+36>>0]=1;c[Y+32>>2]=0;c[Y+28>>2]=0;h=0;break}if(a[Y+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}a[Y+36>>0]=1;c[Y+32>>2]=0;c[Y+28>>2]=0;h=0}while(0);yn(h+(j<<2)|0,0,S(j,-4)|0)|0}c[Y+24>>2]=0;h=d;j=0;v=34028234663852886.0e22;p=-34028234663852886.0e22;w=34028234663852886.0e22;q=-34028234663852886.0e22;x=34028234663852886.0e22;r=-34028234663852886.0e22;while(1){P=+g[h>>2];v=P<v?P:v;p=P>p?P:p;P=+g[h+4>>2];w=P<w?P:w;q=P>q?P:q;P=+g[h+8>>2];x=P<x?P:x;r=P>r?P:r;j=j+1|0;if((j|0)==(e|0))break;else h=h+16|0}O=p-v;P=q-w;r=r-x;B=v+O*.5;A=w+P*.5;z=x+r*.5;do if(e>>>0<3|(O<9.999999974752427e-007|P<9.999999974752427e-007|r<9.999999974752427e-007)){v=O>9.999999974752427e-007&O<34028234663852886.0e22?O:34028234663852886.0e22;v=P>9.999999974752427e-007&P<v?P:v;v=r>9.999999974752427e-007&r<v?r:v;if(!(v==34028234663852886.0e22)){q=O<9.999999974752427e-007?v*.05000000074505806:O;p=P<9.999999974752427e-007?v*.05000000074505806:P;if(r<9.999999974752427e-007)r=v*.05000000074505806}else{r=.009999999776482582;q=.009999999776482582;p=.009999999776482582}P=B-q;O=B+q;K=A-p;q=A+p;p=z-r;v=z+r;g[X>>2]=P;g[X+4>>2]=K;g[X+8>>2]=p;g[X+16>>2]=O;g[X+20>>2]=K;g[X+24>>2]=p;g[X+32>>2]=O;g[X+36>>2]=q;g[X+40>>2]=p;g[X+48>>2]=P;g[X+52>>2]=q;g[X+56>>2]=p;g[X+64>>2]=P;g[X+68>>2]=K;g[X+72>>2]=v;g[X+80>>2]=O;g[X+84>>2]=K;g[X+88>>2]=v;g[X+96>>2]=O;g[X+100>>2]=q;g[X+104>>2]=v;g[X+112>>2]=P;g[X+116>>2]=q;g[X+120>>2]=v;v=1.0;q=1.0;p=1.0;U=8;W=53}else{h=0;s=0;o=d;j=0;do{w=1.0/O*+g[o>>2];x=1.0/P*+g[o+4>>2];y=1.0/r*+g[o+8>>2];o=o+16|0;a:do if(h){k=0;while(1){d=X+(k<<4)|0;p=+g[d>>2];m=X+(k<<4)+4|0;q=+g[m>>2];n=X+(k<<4)+8|0;v=+g[n>>2];if(+F(+(p-w))<1.0000000474974513e-003&+F(+(q-x))<1.0000000474974513e-003&+F(+(v-y))<1.0000000474974513e-003)break;k=k+1|0;if(k>>>0>=h>>>0){n=k;break a}}if((w-1.0/O*B)*(w-1.0/O*B)+(x-1.0/P*A)*(x-1.0/P*A)+(y-1.0/r*z)*(y-1.0/r*z)>(p-1.0/O*B)*(p-1.0/O*B)+(q-1.0/P*A)*(q-1.0/P*A)+(v-1.0/r*z)*(v-1.0/r*z)){g[d>>2]=w;g[m>>2]=x;g[n>>2]=y;n=k}else n=k}else n=0;while(0);if((n|0)==(h|0)){g[X+(h<<4)>>2]=w;g[X+(h<<4)+4>>2]=x;g[X+(h<<4)+8>>2]=y;h=h+1|0}if((j|0)==(c[Y+28>>2]|0)?(t=j|0?j<<1:1,(j|0)<(t|0)):0){if((t|0)!=0?(c[6324]=(c[6324]|0)+1,u=ic((t<<2|3)+16|0)|0,(u|0)!=0):0){c[(u+4+15&-16)+-4>>2]=u;m=u+4+15&-16}else m=0;d=c[Y+32>>2]|0;if((j|0)<=0){if(d)W=39}else{k=0;do{c[m+(k<<2)>>2]=c[d+(k<<2)>>2];k=k+1|0}while((k|0)!=(j|0));W=39}if((W|0)==39){W=0;if(a[Y+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[Y+32>>2]=0;j=c[Y+24>>2]|0}a[Y+36>>0]=1;c[Y+32>>2]=m;c[Y+28>>2]=t}c[(c[Y+32>>2]|0)+(j<<2)>>2]=n;j=(c[Y+24>>2]|0)+1|0;c[Y+24>>2]=j;s=s+1|0}while((s|0)!=(e|0));if(!h){j=1;y=34028234663852886.0e22;v=-34028234663852886.0e22;x=34028234663852886.0e22;q=-34028234663852886.0e22;w=34028234663852886.0e22;p=-34028234663852886.0e22}else{j=0;A=34028234663852886.0e22;y=34028234663852886.0e22;B=-34028234663852886.0e22;v=-34028234663852886.0e22;E=34028234663852886.0e22;x=34028234663852886.0e22;H=-34028234663852886.0e22;q=-34028234663852886.0e22;J=34028234663852886.0e22;w=34028234663852886.0e22;K=-34028234663852886.0e22;p=-34028234663852886.0e22;while(1){z=+g[X+(j<<4)>>2];k=z<A;y=k?z:y;d=z>B;v=d?z:v;C=+g[X+(j<<4)+4>>2];m=C<E;x=m?C:x;n=C>H;q=n?C:q;I=+g[X+(j<<4)+8>>2];o=I<J;w=o?I:w;s=I>K;p=s?I:p;j=j+1|0;if((j|0)==(h|0))break;else{A=k?z:A;B=d?z:B;E=m?C:E;H=n?C:H;J=o?I:J;K=s?I:K}}j=h>>>0<3}A=v-y;q=q-x;v=p-w;if(!(j|(A<9.999999974752427e-007|q<9.999999974752427e-007|v<9.999999974752427e-007))){if(h|0){v=O;q=P;p=r;U=h;W=53;break}break}z=y+A*.5;y=x+q*.5;x=w+v*.5;w=A>=9.999999974752427e-007&A<34028234663852886.0e22?A:34028234663852886.0e22;w=q>=9.999999974752427e-007&q<w?q:w;w=v>=9.999999974752427e-007&v<w?v:w;if(!(w==34028234663852886.0e22)){p=A<9.999999974752427e-007?w*.05000000074505806:A;q=q<9.999999974752427e-007?w*.05000000074505806:q;if(v<9.999999974752427e-007)v=w*.05000000074505806}else{v=.009999999776482582;q=.009999999776482582;p=.009999999776482582}K=z-p;p=z+p;J=y-q;q=y+q;I=x-v;v=x+v;g[X>>2]=K;g[X+4>>2]=J;g[X+8>>2]=I;g[X+16>>2]=p;g[X+20>>2]=J;g[X+24>>2]=I;g[X+32>>2]=p;g[X+36>>2]=q;g[X+40>>2]=I;g[X+48>>2]=K;g[X+52>>2]=q;g[X+56>>2]=I;g[X+64>>2]=K;g[X+68>>2]=J;g[X+72>>2]=v;g[X+80>>2]=p;g[X+84>>2]=J;g[X+88>>2]=v;g[X+96>>2]=p;g[X+100>>2]=q;g[X+104>>2]=v;g[X+112>>2]=K;g[X+116>>2]=q;g[X+120>>2]=v;v=O;q=P;p=r;U=8;W=53}while(0);if((W|0)==53){h=0;do{V=X+(h<<4)|0;g[V>>2]=v*+g[V>>2];V=X+(h<<4)+4|0;g[V>>2]=q*+g[V>>2];V=X+(h<<4)+8|0;g[V>>2]=p*+g[V>>2];h=h+1|0}while(h>>>0<U>>>0);if((U|0)>=4){p=+g[X>>2];r=+g[X+4>>2];q=+g[X+8>>2];V=U<<2;c[6324]=(c[6324]|0)+1;h=ic((V|3)+16|0)|0;if(!h)k=0;else{c[(h+4+15&-16)+-4>>2]=h;k=h+4+15&-16}c[Y+48>>2]=0;c[6324]=(c[6324]|0)+1;j=ic((V|3)+16|0)|0;if(j){c[(j+4+15&-16)+-4>>2]=j;h=c[Y+48>>2]|0;if(!h){h=j+4+15&-16;W=59}else{c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0);c[Y+48>>2]=j+4+15&-16}}else{h=0;W=59}if((W|0)==59)c[Y+48>>2]=h;y=p;w=p;x=q;v=q;m=U;o=0;q=r;p=r;h=U;while(1){if((o|0)==(h|0)?(D=o|0?o<<1:1,(o|0)<(D|0)):0){if((D|0)!=0?(c[6324]=(c[6324]|0)+1,L=ic((D<<2|3)+16|0)|0,(L|0)!=0):0){c[(L+4+15&-16)+-4>>2]=L;j=L+4+15&-16}else j=0;d=c[Y+48>>2]|0;if((o|0)<=0){if(d|0)W=70}else{h=0;do{c[j+(h<<2)>>2]=c[d+(h<<2)>>2];h=h+1|0}while((h|0)!=(o|0));W=70}if((W|0)==70){W=0;c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);c[Y+48>>2]=0}c[Y+48>>2]=j;h=D}c[(c[Y+48>>2]|0)+(o<<2)>>2]=1;n=o;o=o+1|0;do if((n|0)==(m|0)){d=n|0?n<<1:1;if((n|0)<(d|0)){if((d|0)!=0?(c[6324]=(c[6324]|0)+1,M=ic((d<<2|3)+16|0)|0,(M|0)!=0):0){c[(M+4+15&-16)+-4>>2]=M;m=M+4+15&-16}else m=0;if((n|0)<=0){if(!k){j=d;Q=m;break}}else{j=0;do{c[m+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)!=(n|0))}c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);j=d;Q=m}else{j=n;Q=k}}else{j=m;Q=k}while(0);c[Q+(n<<2)>>2]=0;K=+g[X+(n<<4)>>2];w=K<w?K:w;O=+g[X+(n<<4)+4>>2];p=O<p?O:p;P=+g[X+(n<<4)+8>>2];v=P<v?P:v;y=y<K?K:y;q=q<O?O:q;x=x<P?P:x;if((o|0)>=(U|0))break;else{m=j;k=Q}}y=y-w;w=q-p;J=x-v;J=+G(+(y*y+w*w+J*J))*1.0000000474974513e-003;M=Ce(X,U,.009999999776482582,.019999999552965164,1.0,c[Y+48>>2]|0)|0;n=c[Y+48>>2]|0;N=Ce(X,U,-.009999999776482582,-.019999999552965164,-1.0,n)|0;o=X+(M<<4)|0;s=X+(N<<4)|0;w=+g[o>>2]-+g[s>>2];t=X+(M<<4)+4|0;u=X+(N<<4)+4|0;x=+g[t>>2]-+g[u>>2];D=X+(M<<4)+8|0;L=X+(N<<4)+8|0;y=+g[D>>2]-+g[L>>2];b:do if((M|0)!=(N|0)?!(y==0.0&x==0.0&w==0.0):0){p=+G(+((y*.019999999552965164-x*0.0)*(y*.019999999552965164-x*0.0)+(w*0.0-y)*(w*0.0-y)+(x-w*.019999999552965164)*(x-w*.019999999552965164)));q=+G(+((y-x*0.0)*(y-x*0.0)+(y*.019999999552965164+w*0.0)*(y*.019999999552965164+w*0.0)+(x*-.019999999552965164-w)*(x*-.019999999552965164-w)));if(p>q){r=(y*.019999999552965164-x*0.0)*(1.0/p);v=(w*0.0-y)*(1.0/p);p=(x-w*.019999999552965164)*(1.0/p)}else{r=(y-x*0.0)*(1.0/q);v=(y*.019999999552965164+w*0.0)*(1.0/q);p=(x*-.019999999552965164-w)*(1.0/q)}h=Ce(X,U,r,v,p,n)|0;if((h|0)==(M|0)|(h|0)==(N|0))j=Ce(X,U,-r,-v,-p,n)|0;else j=h;if(!((j|0)==(M|0)|(j|0)==(N|0))){k=X+(j<<4)|0;p=+g[k>>2]-+g[o>>2];d=X+(j<<4)+4|0;q=+g[d>>2]-+g[t>>2];m=X+(j<<4)+8|0;r=+g[m>>2]-+g[D>>2];v=1.0/+G(+((x*p-q*w)*(x*p-q*w)+((q*y-r*x)*(q*y-r*x)+(r*w-y*p)*(r*w-y*p))));h=Ce(X,U,(q*y-r*x)*v,(r*w-y*p)*v,(x*p-q*w)*v,n)|0;if((h|0)==(j|0)|((h|0)==(M|0)|(h|0)==(N|0)))h=Ce(X,U,-((q*y-r*x)*v),-((r*w-y*p)*v),-((x*p-q*w)*v),n)|0;if(!((h|0)==(j|0)|((h|0)==(M|0)|(h|0)==(N|0)))?(B=+g[o>>2],H=+g[t>>2],A=+g[D>>2],O=+g[s>>2]-B,C=+g[u>>2]-H,I=+g[L>>2]-A,K=+g[k>>2]-B,E=+g[d>>2]-H,P=+g[m>>2]-A,R=(+g[X+(h<<4)+8>>2]-A)*(O*E-C*K)+((+g[X+(h<<4)>>2]-B)*(C*P-I*E)+(+g[X+(h<<4)+4>>2]-H)*(I*K-O*P))<0.0,T=R?j:h,R=R?h:j,(M|0)!=-1):0){E=(+g[X+(M<<4)>>2]+ +g[X+(N<<4)>>2]+ +g[X+(R<<4)>>2]+ +g[X+(T<<4)>>2])*.25;H=(+g[X+(M<<4)+4>>2]+ +g[X+(N<<4)+4>>2]+ +g[X+(R<<4)+4>>2]+ +g[X+(T<<4)+4>>2])*.25;I=(+g[X+(M<<4)+8>>2]+ +g[X+(N<<4)+8>>2]+ +g[X+(R<<4)+8>>2]+ +g[X+(T<<4)+8>>2])*.25;h=Kh(Y,R,T,N)|0;c[h+12>>2]=2;c[h+16>>2]=3;c[h+20>>2]=1;h=Kh(Y,T,R,M)|0;c[h+12>>2]=3;c[h+16>>2]=2;c[h+20>>2]=0;h=Kh(Y,M,N,T)|0;c[h+12>>2]=0;c[h+16>>2]=1;c[h+20>>2]=3;h=Kh(Y,N,M,R)|0;c[h+12>>2]=1;c[h+16>>2]=0;c[h+20>>2]=2;c[Q+(T<<2)>>2]=1;c[Q+(R<<2)>>2]=1;c[Q+(N<<2)>>2]=1;c[Q+(M<<2)>>2]=1;h=c[Y+4>>2]|0;if((h|0)>0){n=c[Y+12>>2]|0;m=0;do{d=c[n+(m<<2)>>2]|0;R=c[d>>2]|0;N=c[d+4>>2]|0;T=c[d+8>>2]|0;w=+g[X+(N<<4)>>2];r=w-+g[X+(R<<4)>>2];x=+g[X+(N<<4)+4>>2];v=x-+g[X+(R<<4)+4>>2];q=+g[X+(N<<4)+8>>2];p=q-+g[X+(R<<4)+8>>2];w=+g[X+(T<<4)>>2]-w;x=+g[X+(T<<4)+4>>2]-x;q=+g[X+(T<<4)+8>>2]-q;y=+G(+((r*x-v*w)*(r*x-v*w)+((v*q-p*x)*(v*q-p*x)+(p*w-r*q)*(p*w-r*q))));if(y==0.0){k=1065353216;h=0;j=0}else{k=(g[l>>2]=1.0/y*(v*q-p*x),c[l>>2]|0);j=(g[l>>2]=1.0/y*(p*w-r*q),c[l>>2]|0);h=(g[l>>2]=1.0/y*(r*x-v*w),c[l>>2]|0)}K=(c[l>>2]=k,+g[l>>2]);O=(c[l>>2]=j,+g[l>>2]);P=(c[l>>2]=h,+g[l>>2]);T=Ce(X,U,K,O,P,c[Y+48>>2]|0)|0;c[d+28>>2]=T;h=c[d>>2]|0;g[d+32>>2]=(+g[X+(T<<4)>>2]-+g[X+(h<<4)>>2])*K+(+g[X+(T<<4)+4>>2]-+g[X+(h<<4)+4>>2])*O+(+g[X+(T<<4)+8>>2]-+g[X+(h<<4)+8>>2])*P;m=m+1|0;h=c[Y+4>>2]|0}while((m|0)<(h|0))}if((e+-4|0)>0){s=e+-4|0;while(1){m=c[Y+12>>2]|0;d=0;j=0;do{k=c[m+(d<<2)>>2]|0;do if(j){if(!k)break;if(+g[j+32>>2]<+g[k+32>>2])W=105}else W=105;while(0);if((W|0)==105){W=0;j=k}d=d+1|0}while((d|0)<(h|0));if((j|0)==0?1:!(+g[j+32>>2]>J)){h=1;break b}o=c[j+28>>2]|0;c[Q+(o<<2)>>2]=1;h=c[Y+4>>2]|0;c:do if(h|0){k=X+(o<<4)|0;d=X+(o<<4)+4|0;n=X+(o<<4)+8|0;j=m;while(1){h=h+-1|0;j=c[j+(h<<2)>>2]|0;do if(j|0){T=c[j>>2]|0;R=c[j+4>>2]|0;e=c[j+8>>2]|0;r=+g[X+(R<<4)>>2];A=+g[X+(T<<4)>>2];v=+g[X+(R<<4)+4>>2];B=+g[X+(T<<4)+4>>2];p=+g[X+(R<<4)+8>>2];C=+g[X+(T<<4)+8>>2];w=+g[X+(e<<4)>>2]-r;x=+g[X+(e<<4)+4>>2]-v;q=+g[X+(e<<4)+8>>2]-p;y=+G(+(((r-A)*x-(v-B)*w)*((r-A)*x-(v-B)*w)+(((v-B)*q-(p-C)*x)*((v-B)*q-(p-C)*x)+((p-C)*w-(r-A)*q)*((p-C)*w-(r-A)*q))));if(y==0.0){z=1.0;q=0.0;p=0.0}else{z=1.0/y*((v-B)*q-(p-C)*x);q=1.0/y*((p-C)*w-(r-A)*q);p=1.0/y*((r-A)*x-(v-B)*w)}if(!(z*(+g[k>>2]-A)+q*(+g[d>>2]-B)+p*(+g[n>>2]-C)>J*.009999999776482582))break;ee(Y,j,o)}while(0);if(!h)break;j=c[Y+12>>2]|0}h=c[Y+4>>2]|0;if(!h)break;else j=h;d:do{j=j+-1|0;m=c[Y+12>>2]|0;n=c[m+(j<<2)>>2]|0;do if(n){d=c[n>>2]|0;do if((d|0)!=(o|0)){k=c[n+4>>2]|0;if((k|0)==(o|0)){k=o;break}if((c[n+8>>2]|0)!=(o|0))break d}else k=c[n+4>>2]|0;while(0);e=c[n+8>>2]|0;z=+g[X+(k<<4)>>2];B=+g[X+(d<<4)>>2];A=+g[X+(k<<4)+4>>2];C=+g[X+(d<<4)+4>>2];q=+g[X+(k<<4)+8>>2];x=+g[X+(d<<4)+8>>2];r=+g[X+(e<<4)>>2]-z;v=+g[X+(e<<4)+4>>2]-A;p=+g[X+(e<<4)+8>>2]-q;y=+G(+(((z-B)*v-(A-C)*r)*((z-B)*v-(A-C)*r)+(((A-C)*p-(q-x)*v)*((A-C)*p-(q-x)*v)+((q-x)*r-(z-B)*p)*((q-x)*r-(z-B)*p))));if(y==0.0){w=1.0;q=0.0;p=0.0}else{w=1.0/y*((A-C)*p-(q-x)*v);q=1.0/y*((q-x)*r-(z-B)*p);p=1.0/y*((z-B)*v-(A-C)*r)}if(!(y<J*J*.10000000149011612?1:(E-B)*w+(H-C)*q+(I-x)*p>J*.009999999776482582))break;ee(Y,c[m+(c[n+12>>2]<<2)>>2]|0,o);h=c[Y+4>>2]|0;j=h}while(0)}while((j|0)!=0);if(!h)break;n=c[Y+12>>2]|0;do{h=h+-1|0;m=c[n+(h<<2)>>2]|0;do if(m|0){if((c[m+28>>2]|0)>-1)break c;T=c[m>>2]|0;R=c[m+4>>2]|0;e=c[m+8>>2]|0;w=+g[X+(R<<4)>>2];r=w-+g[X+(T<<4)>>2];x=+g[X+(R<<4)+4>>2];v=x-+g[X+(T<<4)+4>>2];q=+g[X+(R<<4)+8>>2];p=q-+g[X+(T<<4)+8>>2];w=+g[X+(e<<4)>>2]-w;x=+g[X+(e<<4)+4>>2]-x;q=+g[X+(e<<4)+8>>2]-q;y=+G(+((r*x-v*w)*(r*x-v*w)+((v*q-p*x)*(v*q-p*x)+(p*w-r*q)*(p*w-r*q))));if(y==0.0){d=1065353216;k=0;j=0}else{d=(g[l>>2]=1.0/y*(v*q-p*x),c[l>>2]|0);j=(g[l>>2]=1.0/y*(p*w-r*q),c[l>>2]|0);k=(g[l>>2]=1.0/y*(r*x-v*w),c[l>>2]|0)}r=(c[l>>2]=d,+g[l>>2]);q=(c[l>>2]=j,+g[l>>2]);p=(c[l>>2]=k,+g[l>>2]);j=Ce(X,U,r,q,p,c[Y+48>>2]|0)|0;c[m+28>>2]=j;if(!(c[Q+(j<<2)>>2]|0)){e=c[m>>2]|0;g[m+32>>2]=(+g[X+(j<<4)>>2]-+g[X+(e<<4)>>2])*r+(+g[X+(j<<4)+4>>2]-+g[X+(e<<4)+4>>2])*q+(+g[X+(j<<4)+8>>2]-+g[X+(e<<4)+8>>2])*p;break}else{c[m+28>>2]=-1;break}}while(0)}while((h|0)!=0)}while(0);if((s|0)<=1){h=1;break b}s=s+-1|0;h=c[Y+4>>2]|0}}else h=1}else h=0}else h=0}else h=0;while(0);j=c[Y+48>>2]|0;if(j|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);c[Y+48>>2]=0}if(Q|0){c[6325]=(c[6325]|0)+1;Rc(c[Q+-4>>2]|0)}if(h){h=c[Y+4>>2]|0;if((h|0)>0){t=0;o=0;k=0;d=0;j=c[Y+12>>2]|0;while(1){n=c[j+(t<<2)>>2]|0;if(!n)m=o;else{do if((d|0)==(o|0)){m=o|0?o<<1:1;if((o|0)>=(m|0)){m=o;break}do if(!m)j=0;else{c[6324]=(c[6324]|0)+1;h=ic((m<<2|3)+16|0)|0;if(!h){j=0;break}c[(h+4+15&-16)+-4>>2]=h;j=h+4+15&-16}while(0);if((o|0)<=0){if(!k){k=j;break}}else{h=0;do{c[j+(h<<2)>>2]=c[k+(h<<2)>>2];h=h+1|0}while((h|0)!=(o|0))}c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);k=j}else m=o;while(0);c[k+(d<<2)>>2]=c[n>>2];o=d+1|0;s=(c[(c[Y+12>>2]|0)+(t<<2)>>2]|0)+4|0;do if((o|0)==(m|0)){n=m|0?m<<1:1;if((m|0)>=(n|0))break;do if(!n)j=0;else{c[6324]=(c[6324]|0)+1;h=ic((n<<2|3)+16|0)|0;if(!h){j=0;break}c[(h+4+15&-16)+-4>>2]=h;j=h+4+15&-16}while(0);if((m|0)<=0){if(!k){m=n;k=j;break}}else{h=0;do{c[j+(h<<2)>>2]=c[k+(h<<2)>>2];h=h+1|0}while((h|0)!=(m|0))}c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);m=n;k=j}while(0);c[k+(o<<2)>>2]=c[s>>2];o=d+2|0;s=(c[(c[Y+12>>2]|0)+(t<<2)>>2]|0)+8|0;do if((o|0)==(m|0)){n=m|0?m<<1:1;if((m|0)>=(n|0))break;do if(!n)j=0;else{c[6324]=(c[6324]|0)+1;h=ic((n<<2|3)+16|0)|0;if(!h){j=0;break}c[(h+4+15&-16)+-4>>2]=h;j=h+4+15&-16}while(0);if((m|0)<=0){if(!k){m=n;k=j;break}}else{h=0;do{c[j+(h<<2)>>2]=c[k+(h<<2)>>2];h=h+1|0}while((h|0)!=(m|0))}c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);m=n;k=j}while(0);c[k+(o<<2)>>2]=c[s>>2];j=c[Y+12>>2]|0;h=c[j+(t<<2)>>2]|0;c[j+(c[h+24>>2]<<2)>>2]=0;if(h|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}d=d+3|0;h=c[Y+4>>2]|0}t=t+1|0;if((t|0)>=(h|0))break;else o=m}c[Y+44>>2]=(d|0)/3|0;if((d|0)>0){c[6324]=(c[6324]|0)+1;h=ic((d<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}yn(h|0,0,d<<2|0)|0;j=0;do{c[h+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)!=(d|0));m=k;L=d}else{m=k;h=0;L=d}}else{c[Y+44>>2]=0;m=0;h=0;L=0}j=c[Y+4>>2]|0;if((j|0)<0){if((c[Y+8>>2]|0)<0){k=c[Y+12>>2]|0;if(k|0){if(a[Y+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}c[Y+12>>2]=0}a[Y+16>>0]=1;c[Y+12>>2]=0;c[Y+8>>2]=0}do{c[(c[Y+12>>2]|0)+(j<<2)>>2]=0;j=j+1|0}while((j|0)!=0)}c[Y+4>>2]=0;if(m|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0)}M=c[Y+44>>2]|0;m=(U|0)>0;if(m){c[6324]=(c[6324]|0)+1;j=ic((U<<4|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}k=0;do{e=j+(k<<4)|0;c[e>>2]=c[Y+48>>2];c[e+4>>2]=c[Y+48+4>>2];c[e+8>>2]=c[Y+48+8>>2];c[e+12>>2]=c[Y+48+12>>2];k=k+1|0}while((k|0)!=(U|0));D=j}else D=0;k=c[Y+24>>2]|0;do if((k|0)>0){c[6324]=(c[6324]|0)+1;j=ic((k<<2|3)+16|0)|0;if(!j)d=0;else{c[(j+4+15&-16)+-4>>2]=j;d=j+4+15&-16}yn(d|0,0,k<<2|0)|0;if((c[Y+24>>2]|0)<=0)break;k=c[Y+32>>2]|0;j=0;do{c[d+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)<(c[Y+24>>2]|0))}else d=0;while(0);if(m){c[6324]=(c[6324]|0)+1;j=ic((V|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}yn(j|0,0,V|0)|0}else j=0;yn(j|0,0,V|0)|0;if((M|0)<=0)if(!j)s=0;else{k=0;W=223}else{u=c[Y+32>>2]|0;t=0;k=0;do{m=h+(t<<2)|0;o=c[m>>2]|0;s=j+(o<<2)|0;n=c[s>>2]|0;if(!n){c[m>>2]=k;c[D+(k<<4)>>2]=c[X+(o<<4)>>2];c[D+(k<<4)+4>>2]=c[X+(o<<4)+4>>2];c[D+(k<<4)+8>>2]=c[X+(o<<4)+8>>2];n=c[Y+24>>2]|0;if((n|0)>0){m=0;do{if((c[d+(m<<2)>>2]|0)==(o|0))c[u+(m<<2)>>2]=k;m=m+1|0}while((m|0)!=(n|0))}k=k+1|0;c[s>>2]=k}else c[m>>2]=n+-1;t=t+1|0}while((t|0)!=(M*3|0));W=223}if((W|0)==223){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);s=k}if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}if((s|0)>0){c[6324]=(c[6324]|0)+1;j=ic((s<<4|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}k=0;do{W=j+(k<<4)|0;c[W>>2]=c[Y+48>>2];c[W+4>>2]=c[Y+48+4>>2];c[W+8>>2]=c[Y+48+8>>2];c[W+12>>2]=c[Y+48+12>>2];k=k+1|0}while((k|0)!=(s|0))}else j=0;if((M|0)>0){c[6324]=(c[6324]|0)+1;k=ic((M*12|3)+16|0)|0;if(!k)k=0;else{c[(k+4+15&-16)+-4>>2]=k;k=k+4+15&-16}d=c[Y+40>>2]|0;if(!d)c[Y+40>>2]=k;else{c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);c[Y+40>>2]=k}yn(k|0,0,M*12|0)|0}Lm(j|0,D|0,s<<4|0)|0;Lm(c[Y+40>>2]|0,h|0,M*12|0)|0;do if(L){if(!h){h=0;break}c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0);h=0}while(0);if(!D){n=M;o=M*3|0;break}c[6325]=(c[6325]|0)+1;Rc(c[D+-4>>2]|0);n=M;o=M*3|0;break}}}s=0;j=0;h=0;n=0;o=0}while(0);if(X|0){c[6325]=(c[6325]|0)+1;Rc(c[X+-4>>2]|0)}if(h|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[6324]=(c[6324]|0)+1;h=ic(1311)|0;if(!h)D=0;else{c[(h+4+15&-16)+-4>>2]=h;D=h+4+15&-16}tc(D,b,s,j,0);if((n|0)>0){h=0;do{m=h*3|0;b=c[Y+40>>2]|0;k=c[b+(m<<2)>>2]|0;d=c[b+(m+1<<2)>>2]|0;m=c[b+(m+2<<2)>>2]|0;if((k|0)<(d|0))Gf(D,k,d,0,0);if((d|0)<(m|0))Gf(D,d,m,0,0);if((m|0)<(k|0))Gf(D,m,k,0,0);Pf(D,k,d,m,0);h=h+1|0}while((h|0)!=(n|0))}if(s)if(!j)j=0;else{c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);j=0}if(o|0){h=c[Y+40>>2]|0;if(h|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0);c[Y+40>>2]=0}c[Y+40>>2]=0}if(f){d=c[D+772>>2]|0;if((d|0)>0){m=D+780|0;h=243703;k=0;do{n=c[m>>2]|0;o=n+(k*52|0)|0;h=(S(h,1664525)|0)+1013904223|0;s=Y+48|0;t=o;u=s+52|0;do{c[s>>2]=c[t>>2];s=s+4|0;t=t+4|0}while((s|0)<(u|0));s=o;t=n+(((h>>>0)%(d>>>0)|0)*52|0)|0;u=s+52|0;do{c[s>>2]=c[t>>2];s=s+4|0;t=t+4|0}while((s|0)<(u|0));s=n+(((h>>>0)%(d>>>0)|0)*52|0)|0;t=Y+48|0;u=s+52|0;do{c[s>>2]=c[t>>2];s=s+4|0;t=t+4|0}while((s|0)<(u|0));k=k+1|0}while((k|0)!=(d|0))}else h=243703;n=c[D+792>>2]|0;if((n|0)>0){o=D+800|0;k=0;do{m=c[o>>2]|0;d=m+(k*44|0)|0;h=(S(h,1664525)|0)+1013904223|0;m=m+(((h>>>0)%(n>>>0)|0)*44|0)|0;s=Y+48|0;t=d;u=s+44|0;do{c[s>>2]=c[t>>2];s=s+4|0;t=t+4|0}while((s|0)<(u|0));s=d;t=m;u=s+44|0;do{c[s>>2]=c[t>>2];s=s+4|0;t=t+4|0}while((s|0)<(u|0));s=m;t=Y+48|0;u=s+44|0;do{c[s>>2]=c[t>>2];s=s+4|0;t=t+4|0}while((s|0)<(u|0));k=k+1|0}while((k|0)!=(n|0))}}h=c[Y+32>>2]|0;if(h|0){if(a[Y+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[Y+32>>2]=0}a[Y+36>>0]=1;c[Y+32>>2]=0;c[Y+24>>2]=0;c[Y+28>>2]=0;h=c[Y+12>>2]|0;if(h|0){if(a[Y+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[Y+12>>2]=0}h=c[Y+40>>2]|0;if(h|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0);c[Y+40>>2]=0}c[Y+40>>2]=0;if(!j){i=Y;return D|0}c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);i=Y;return D|0}function cc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0.0,M=0.0,N=0.0,O=0.0;J=i;i=i+16|0;f=c[b+1152>>2]|0;a:do if((f|0)>0)while(1){q=c[c[b+1160>>2]>>2]|0;f=c[q+348>>2]|0;if(f|0){Wg(b+1088|0,f)|0;h=c[b+1092>>2]|0;if(h|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+1092>>2]=f;c[b+1100>>2]=(c[b+1100>>2]|0)+-1}qk(q);if(q|0){c[6325]=(c[6325]|0)+1;Rc(c[q+-4>>2]|0)}f=c[b+1152>>2]|0;if((f|0)<=0){h=f;break a}k=c[b+1160>>2]|0;h=0;do{j=k+(h<<2)|0;if((c[j>>2]|0)==(q|0)){I=14;break}h=h+1|0}while((h|0)<(f|0));if((I|0)==14){I=0;if((h|0)<(f|0)){c[j>>2]=c[k+(f+-1<<2)>>2];c[(c[b+1160>>2]|0)+(f+-1<<2)>>2]=q;c[b+1152>>2]=f+-1;f=f+-1|0}}if((f|0)<=0){h=f;break}}else h=f;while(0);f=c[b+752>>2]|0;f=(f|0)>(d|0)?d:f;if((h|0)<(f|0)){if((c[b+1156>>2]|0)<(f|0)){if(f){c[6324]=(c[6324]|0)+1;j=ic((f<<2|3)+16|0)|0;if(!j)j=0;else{c[(j+4+15&-16)+-4>>2]=j;j=j+4+15&-16}q=c[b+1152>>2]|0;if((q|0)>0){k=0;do{c[j+(k<<2)>>2]=c[(c[b+1160>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(q|0));k=j;j=b+1160|0}else{k=j;j=b+1160|0}}else{k=0;j=b+1160|0}q=c[j>>2]|0;if(q|0){if(a[b+1164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[q+-4>>2]|0)}c[j>>2]=0}a[b+1164>>0]=1;c[j>>2]=k;c[b+1156>>2]=f}else j=b+1160|0;do{c[(c[j>>2]|0)+(h<<2)>>2]=0;h=h+1|0}while((h|0)!=(f|0))}c[b+1152>>2]=f;if((f|0)>0){h=0;do{c[6324]=(c[6324]|0)+1;f=ic(403)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}a[f+16>>0]=1;c[f+12>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;a[f+36>>0]=1;c[f+32>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;a[f+56>>0]=1;c[f+52>>2]=0;c[f+44>>2]=0;c[f+48>>2]=0;r=f+348|0;c[r>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;g[f+368>>2]=100.0;g[f+372>>2]=.009999999776482582;a[f+376>>0]=0;c[(c[b+1160>>2]|0)+(h<<2)>>2]=f;r=c[b+1160>>2]|0;a[(c[r+(h<<2)>>2]|0)+377>>0]=1;h=h+1|0;f=c[b+1152>>2]|0}while((h|0)<(f|0));if((f|0)>0){d=c[b+752>>2]|0;b:do if((d|0)>0){k=0;j=0;q=0;h=0;s=f;while(1){u=c[b+760>>2]|0;j=(g[l>>2]=(c[l>>2]=j,+g[l>>2])+ +g[u+(k*104|0)+8>>2],c[l>>2]|0);h=(g[l>>2]=(c[l>>2]=h,+g[l>>2])+ +g[u+(k*104|0)+12>>2],c[l>>2]|0);q=(g[l>>2]=(c[l>>2]=q,+g[l>>2])+ +g[u+(k*104|0)+16>>2],c[l>>2]|0);t=c[r+(((k*29873|0)%(s|0)|0)<<2)>>2]|0;u=u+(k*104|0)|0;r=c[t+24>>2]|0;if((r|0)==(c[t+28>>2]|0)?(v=r|0?r<<1:1,(r|0)<(v|0)):0){if(!v)d=0;else{c[6324]=(c[6324]|0)+1;d=ic((v<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}r=c[t+24>>2]|0}if((r|0)>0){s=0;do{c[d+(s<<2)>>2]=c[(c[t+32>>2]|0)+(s<<2)>>2];s=s+1|0}while((s|0)!=(r|0))}s=c[t+32>>2]|0;if(s){if(a[t+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[s+-4>>2]|0);r=c[t+24>>2]|0}c[t+32>>2]=0}a[t+36>>0]=1;c[t+32>>2]=d;c[t+28>>2]=v;d=c[b+752>>2]|0}c[(c[t+32>>2]|0)+(r<<2)>>2]=u;c[t+24>>2]=r+1;k=k+1|0;if((k|0)>=(d|0)){k=d;break b}s=c[b+1152>>2]|0;r=c[b+1160>>2]|0}}else{k=d;j=0;q=0;h=0}while(0);m=1.0/+(k|0);o=(c[l>>2]=j,+g[l>>2])*m;n=(c[l>>2]=h,+g[l>>2])*m;m=(c[l>>2]=q,+g[l>>2])*m;if((f|0)<0)E=0;else{if((f|0)!=0?(c[6324]=(c[6324]|0)+1,w=ic((f<<4|3)+16|0)|0,(w|0)!=0):0){c[(w+4+15&-16)+-4>>2]=w;h=w+4+15&-16}else h=0;j=0;do{g[h+(j<<4)>>2]=o;g[h+(j<<4)+4>>2]=n;g[h+(j<<4)+8>>2]=m;g[h+(j<<4)+12>>2]=0.0;j=j+1|0}while((j|0)!=(f|0));E=h}v=E+4|0;w=E+8|0;u=0;do{z=+(u|0)*.0625;z=2.0-(z>1.0?1.0:z);s=0;t=0;do{h=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;r=c[h+24>>2]|0;if((r|0)>0){d=c[h+32>>2]|0;q=0;h=0;j=0;k=0;do{K=c[d+(q<<2)>>2]|0;h=(g[l>>2]=(c[l>>2]=h,+g[l>>2])+ +g[K+8>>2],c[l>>2]|0);j=(g[l>>2]=(c[l>>2]=j,+g[l>>2])+ +g[K+12>>2],c[l>>2]|0);k=(g[l>>2]=(c[l>>2]=k,+g[l>>2])+ +g[K+16>>2],c[l>>2]|0);q=q+1|0}while((q|0)!=(r|0))}else{h=0;j=0;k=0}if(r){y=(c[l>>2]=h,+g[l>>2])*(1.0/+(r|0));n=(c[l>>2]=j,+g[l>>2])*(1.0/+(r|0));d=E+(t<<4)|0;o=+g[d>>2];K=E+(t<<4)+4|0;p=+g[K>>2];h=E+(t<<4)+8|0;x=+g[h>>2];m=x+z*((c[l>>2]=k,+g[l>>2])*(1.0/+(r|0))-x);g[d>>2]=o+z*(y-o);g[K>>2]=p+z*(n-p);g[h>>2]=m;g[E+(t<<4)+12>>2]=0.0;k=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;h=c[k+24>>2]|0;if((h|0)<0){if((c[k+28>>2]|0)<0){j=c[k+32>>2]|0;if(j|0){if(a[k+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[k+32>>2]=0}a[k+36>>0]=1;c[k+32>>2]=0;c[k+28>>2]=0}do{c[(c[k+32>>2]|0)+(h<<2)>>2]=0;h=h+1|0}while((h|0)!=0)}c[k+24>>2]=0;s=s|(o+z*(y-o)-o)*(o+z*(y-o)-o)+(p+z*(n-p)-p)*(p+z*(n-p)-p)+(m-x)*(m-x)>1.1920928955078125e-007}t=t+1|0}while((t|0)<(f|0));u=u+1|0;h=c[b+752>>2]|0;c:do if((h|0)>0){if((f|0)>1)t=0;else{r=0;while(1){q=c[c[b+1160>>2]>>2]|0;d=(c[b+760>>2]|0)+(r*104|0)|0;j=c[q+24>>2]|0;if((j|0)==(c[q+28>>2]|0)?(D=j|0?j<<1:1,(j|0)<(D|0)):0){if(!D)h=0;else{c[6324]=(c[6324]|0)+1;h=ic((D<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}j=c[q+24>>2]|0}if((j|0)>0){k=0;do{c[h+(k<<2)>>2]=c[(c[q+32>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(j|0))}k=c[q+32>>2]|0;if(k){if(a[q+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);j=c[q+24>>2]|0}c[q+32>>2]=0}a[q+36>>0]=1;c[q+32>>2]=h;c[q+28>>2]=D;h=c[b+752>>2]|0}c[(c[q+32>>2]|0)+(j<<2)>>2]=d;c[q+24>>2]=j+1;r=r+1|0;if((r|0)>=(h|0))break c}}do{d=c[b+760>>2]|0;n=+g[d+(t*104|0)+8>>2];o=+g[d+(t*104|0)+12>>2];p=+g[d+(t*104|0)+16>>2];j=1;m=+F(+(+g[E>>2]-n))+ +F(+(+g[v>>2]-o))+ +F(+(+g[w>>2]-p));k=0;while(1){x=+F(+(+g[E+(j<<4)>>2]-n))+ +F(+(+g[E+(j<<4)+4>>2]-o))+ +F(+(+g[E+(j<<4)+8>>2]-p));q=x<m;k=q?j:k;j=j+1|0;if((j|0)==(f|0))break;else m=q?x:m}r=c[(c[b+1160>>2]|0)+(k<<2)>>2]|0;q=d+(t*104|0)|0;j=c[r+24>>2]|0;if((j|0)==(c[r+28>>2]|0)?(C=j|0?j<<1:1,(j|0)<(C|0)):0){if(!C)h=0;else{c[6324]=(c[6324]|0)+1;h=ic((C<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}j=c[r+24>>2]|0}if((j|0)>0){k=0;do{c[h+(k<<2)>>2]=c[(c[r+32>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(j|0))}k=c[r+32>>2]|0;if(k){if(a[r+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0);j=c[r+24>>2]|0}c[r+32>>2]=0}a[r+36>>0]=1;c[r+32>>2]=h;c[r+28>>2]=C;h=c[b+752>>2]|0}c[(c[r+32>>2]|0)+(j<<2)>>2]=q;c[r+24>>2]=j+1;t=t+1|0}while((t|0)<(h|0))}while(0)}while((u|0)<(e|0)&s);if((h|0)>0){h=h<<2;c[6324]=(c[6324]|0)+1;f=ic((h|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}yn(f|0,-1,h|0)|0;w=f}else w=0;f=c[b+1152>>2]|0;if((f|0)>0){d=c[b+1160>>2]|0;q=0;do{k=c[d+(q<<2)>>2]|0;if((c[k+24>>2]|0)>0){j=c[b+760>>2]|0;h=c[k+32>>2]|0;f=0;do{c[w+((((c[h+(f<<2)>>2]|0)-j|0)/104|0)<<2)>>2]=q;f=f+1|0}while((f|0)<(c[k+24>>2]|0));f=c[b+1152>>2]|0}q=q+1|0}while((q|0)<(f|0))}if((c[b+792>>2]|0)>0){t=0;do{K=c[b+800>>2]|0;s=c[b+760>>2]|0;f=((c[K+(t*44|0)+8>>2]|0)-s|0)/104|0;c[J>>2]=f;c[J+4>>2]=((c[K+(t*44|0)+12>>2]|0)-s|0)/104|0;c[J+8>>2]=((c[K+(t*44|0)+16>>2]|0)-s|0)/104|0;s=0;while(1){d=c[w+(f<<2)>>2]|0;q=1;do{f=c[J+(((q+s|0)%3|0)<<2)>>2]|0;d:do if((c[w+(f<<2)>>2]|0)!=(d|0)){r=c[(c[b+1160>>2]|0)+(d<<2)>>2]|0;k=(c[b+760>>2]|0)+(f*104|0)|0;h=c[r+24>>2]|0;e:do if((h|0)>0){j=c[r+32>>2]|0;f=0;while(1){if((c[j+(f<<2)>>2]|0)==(k|0))break;f=f+1|0;if((f|0)>=(h|0))break e}if((f|0)!=(h|0))break d}while(0);if((h|0)==(c[r+28>>2]|0)?(G=h|0?h<<1:1,(h|0)<(G|0)):0){if(!G)f=0;else{c[6324]=(c[6324]|0)+1;f=ic((G<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[r+24>>2]|0}if((h|0)>0){j=0;do{c[f+(j<<2)>>2]=c[(c[r+32>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[r+32>>2]|0;if(j){if(a[r+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);h=c[r+24>>2]|0}c[r+32>>2]=0}a[r+36>>0]=1;c[r+32>>2]=f;c[r+28>>2]=G;f=h}else f=h;c[(c[r+32>>2]|0)+(f<<2)>>2]=k;c[r+24>>2]=f+1}while(0);q=q+1|0}while((q|0)!=3);f=s+1|0;if((f|0)>=3)break;s=f;f=c[J+(f<<2)>>2]|0}t=t+1|0}while((t|0)<(c[b+792>>2]|0));f=c[b+1152>>2]|0}if((f|0)>1){c[6324]=(c[6324]|0)+1;f=ic(403)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}a[f+16>>0]=1;c[f+12>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;r=f+36|0;a[r>>0]=1;s=f+32|0;c[s>>2]=0;t=f+24|0;c[t>>2]=0;u=f+28|0;c[u>>2]=0;a[f+56>>0]=1;c[f+52>>2]=0;c[f+44>>2]=0;c[f+48>>2]=0;v=f+348|0;c[v>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;c[v+12>>2]=0;c[v+16>>2]=0;g[f+368>>2]=100.0;g[f+372>>2]=.009999999776482582;a[f+376>>0]=0;v=f;a[f+377>>0]=0;k=c[b+752>>2]|0;if((k|0)>0){c[6324]=(c[6324]|0)+1;f=ic((k<<2|3)+16|0)|0;if(!f)j=0;else{c[(f+4+15&-16)+-4>>2]=f;j=f+4+15&-16}h=c[t>>2]|0;if((h|0)>0){f=0;do{c[j+(f<<2)>>2]=c[(c[s>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(h|0))}f=c[s>>2]|0;if(f|0){if(a[r>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[s>>2]=0}a[r>>0]=1;c[s>>2]=j;c[u>>2]=k;f=c[b+752>>2]|0;if((f|0)>0){d=0;j=c[t>>2]|0;h=k;while(1){q=(c[b+760>>2]|0)+(d*104|0)|0;do if((j|0)==(h|0)){k=h|0?h<<1:1;if((h|0)>=(k|0)){k=h;break}if(!k)f=0;else{c[6324]=(c[6324]|0)+1;f=ic((k<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[t>>2]|0}if((h|0)>0){j=0;do{c[f+(j<<2)>>2]=c[(c[s>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[s>>2]|0;if(j){if(a[r>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);h=c[t>>2]|0}c[s>>2]=0}a[r>>0]=1;c[s>>2]=f;c[u>>2]=k;f=c[b+752>>2]|0}else{k=h;h=j}while(0);c[(c[s>>2]|0)+(h<<2)>>2]=q;j=h+1|0;c[t>>2]=j;d=d+1|0;if((d|0)>=(f|0))break;else h=k}}}f=c[b+1152>>2]|0;if((f|0)==(c[b+1156>>2]|0)?(H=f|0?f<<1:1,(f|0)<(H|0)):0){if(!H)j=0;else{c[6324]=(c[6324]|0)+1;f=ic((H<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}j=f;f=c[b+1152>>2]|0}if((f|0)>0){h=0;do{c[j+(h<<2)>>2]=c[(c[b+1160>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(f|0))}h=c[b+1160>>2]|0;if(h){if(a[b+1164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0);f=c[b+1152>>2]|0}c[b+1160>>2]=0}a[b+1164>>0]=1;c[b+1160>>2]=j;c[b+1156>>2]=H}c[(c[b+1160>>2]|0)+(f<<2)>>2]=v;K=f+1|0;c[b+1152>>2]=K;G=c[b+1160>>2]|0;f=G+(f<<2)|0;H=c[G>>2]|0;c[G>>2]=c[f>>2];c[f>>2]=H;f=K}if((f|0)>0){h=0;do{d=c[(c[b+1160>>2]|0)+(h<<2)>>2]|0;f:do if(!(c[d+24>>2]|0)){h=h+-1|0;f=c[d+348>>2]|0;if(f|0){Wg(b+1088|0,f)|0;j=c[b+1092>>2]|0;if(j|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[b+1092>>2]=f;c[b+1100>>2]=(c[b+1100>>2]|0)+-1}qk(d);if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}f=c[b+1152>>2]|0;if((f|0)>0){q=c[b+1160>>2]|0;j=0;while(1){k=q+(j<<2)|0;if((c[k>>2]|0)==(d|0))break;j=j+1|0;if((j|0)>=(f|0))break f}if((j|0)<(f|0)){c[k>>2]=c[q+(f+-1<<2)>>2];c[(c[b+1160>>2]|0)+(f+-1<<2)>>2]=d;c[b+1152>>2]=f+-1;f=f+-1|0}}}while(0);h=h+1|0}while((h|0)<(f|0))}if(w|0){c[6325]=(c[6325]|0)+1;Rc(c[w+-4>>2]|0)}if(E|0){c[6325]=(c[6325]|0)+1;Rc(c[E+-4>>2]|0)}}else I=212}else I=212;g:do if((I|0)==212){q=c[b+812>>2]|0;if(q|0){if((f|0)<(q|0)){if((c[b+1156>>2]|0)<(q|0)){c[6324]=(c[6324]|0)+1;h=ic((q<<2|3)+16|0)|0;if(!h)k=0;else{c[(h+4+15&-16)+-4>>2]=h;k=h+4+15&-16}j=c[b+1152>>2]|0;if((j|0)>0){h=0;do{c[k+(h<<2)>>2]=c[(c[b+1160>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(j|0))}h=c[b+1160>>2]|0;if(h|0){if(a[b+1164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[b+1160>>2]=0}a[b+1164>>0]=1;c[b+1160>>2]=k;c[b+1156>>2]=q;h=b+1160|0}else h=b+1160|0;do{c[(c[h>>2]|0)+(f<<2)>>2]=0;f=f+1|0}while((f|0)!=(q|0))}c[b+1152>>2]=q;if((q|0)>0){h=0;do{c[6324]=(c[6324]|0)+1;f=ic(403)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}a[f+16>>0]=1;c[f+12>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;a[f+36>>0]=1;c[f+32>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;a[f+56>>0]=1;c[f+52>>2]=0;c[f+44>>2]=0;c[f+48>>2]=0;K=f+348|0;c[K>>2]=0;c[K+4>>2]=0;c[K+8>>2]=0;c[K+12>>2]=0;c[K+16>>2]=0;g[f+368>>2]=100.0;g[f+372>>2]=.009999999776482582;a[f+376>>0]=0;c[(c[b+1160>>2]|0)+(h<<2)>>2]=f;a[(c[(c[b+1160>>2]|0)+(h<<2)>>2]|0)+377>>0]=1;h=h+1|0}while((h|0)<(c[b+1152>>2]|0))}if((c[b+812>>2]|0)<=0)break;q=0;while(1){k=0;do{d=c[(c[b+1160>>2]|0)+(q<<2)>>2]|0;r=(c[b+820>>2]|0)+(q*104|0)+8+(k<<2)|0;h=c[d+24>>2]|0;if((h|0)==(c[d+28>>2]|0)?(s=h|0?h<<1:1,(h|0)<(s|0)):0){if(!s)f=0;else{c[6324]=(c[6324]|0)+1;f=ic((s<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[d+24>>2]|0}if((h|0)>0){j=0;do{c[f+(j<<2)>>2]=c[(c[d+32>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[d+32>>2]|0;if(j){if(a[d+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);h=c[d+24>>2]|0}c[d+32>>2]=0}a[d+36>>0]=1;c[d+32>>2]=f;c[d+28>>2]=s;f=h}else f=h;c[(c[d+32>>2]|0)+(f<<2)>>2]=c[r>>2];c[d+24>>2]=f+1;k=k+1|0}while((k|0)!=4);q=q+1|0;if((q|0)>=(c[b+812>>2]|0))break g}}q=c[b+792>>2]|0;if((f|0)<(q|0)){if((c[b+1156>>2]|0)<(q|0)){if(q){c[6324]=(c[6324]|0)+1;h=ic((q<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}k=c[b+1152>>2]|0;if((k|0)>0){j=0;do{c[h+(j<<2)>>2]=c[(c[b+1160>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(k|0));k=b+1160|0}else k=b+1160|0}else{h=0;k=b+1160|0}j=c[k>>2]|0;if(j|0){if(a[b+1164>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[k>>2]=0}a[b+1164>>0]=1;c[k>>2]=h;c[b+1156>>2]=q}do{c[(c[b+1160>>2]|0)+(f<<2)>>2]=0;f=f+1|0}while((f|0)!=(q|0))}c[b+1152>>2]=q;if((q|0)>0){h=0;do{c[6324]=(c[6324]|0)+1;f=ic(403)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}a[f+16>>0]=1;c[f+12>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;a[f+36>>0]=1;c[f+32>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;a[f+56>>0]=1;c[f+52>>2]=0;c[f+44>>2]=0;c[f+48>>2]=0;K=f+348|0;c[K>>2]=0;c[K+4>>2]=0;c[K+8>>2]=0;c[K+12>>2]=0;c[K+16>>2]=0;g[f+368>>2]=100.0;g[f+372>>2]=.009999999776482582;a[f+376>>0]=0;c[(c[b+1160>>2]|0)+(h<<2)>>2]=f;a[(c[(c[b+1160>>2]|0)+(h<<2)>>2]|0)+377>>0]=1;h=h+1|0}while((h|0)<(c[b+1152>>2]|0))}if((c[b+792>>2]|0)>0){q=0;do{k=0;do{d=c[(c[b+1160>>2]|0)+(q<<2)>>2]|0;r=(c[b+800>>2]|0)+(q*44|0)+8+(k<<2)|0;h=c[d+24>>2]|0;if((h|0)==(c[d+28>>2]|0)?(t=h|0?h<<1:1,(h|0)<(t|0)):0){if(!t)f=0;else{c[6324]=(c[6324]|0)+1;f=ic((t<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}h=c[d+24>>2]|0}if((h|0)>0){j=0;do{c[f+(j<<2)>>2]=c[(c[d+32>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[d+32>>2]|0;if(j){if(a[d+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0);h=c[d+24>>2]|0}c[d+32>>2]=0}a[d+36>>0]=1;c[d+32>>2]=f;c[d+28>>2]=t;f=h}else f=h;c[(c[d+32>>2]|0)+(f<<2)>>2]=c[r>>2];c[d+24>>2]=f+1;k=k+1|0}while((k|0)!=3);q=q+1|0}while((q|0)<(c[b+792>>2]|0))}}while(0);f=c[b+1152>>2]|0;if(!f){K=0;i=J;return K|0}if((f|0)>0){s=0;do{t=c[(c[b+1160>>2]|0)+(s<<2)>>2]|0;g[t+128>>2]=0.0;d=c[t+24>>2]|0;q=c[t+4>>2]|0;if((d|0)>(q|0)){do if((c[t+8>>2]|0)<(d|0)){if(!d){f=0;j=q}else{c[6324]=(c[6324]|0)+1;f=ic((d<<2|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}j=c[t+4>>2]|0}k=c[t+12>>2]|0;if((j|0)<=0){if(!k){a[t+16>>0]=1;c[t+12>>2]=f;c[t+8>>2]=d;break}}else{h=0;do{c[f+(h<<2)>>2]=c[k+(h<<2)>>2];h=h+1|0}while((h|0)!=(j|0))}if(a[t+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}a[t+16>>0]=1;c[t+12>>2]=f;c[t+8>>2]=d}else f=c[t+12>>2]|0;while(0);yn(f+(q<<2)|0,0,d-q<<2|0)|0;k=c[t+24>>2]|0}else k=d;c[t+4>>2]=d;if((k|0)>0){h=c[t+32>>2]|0;j=c[t+12>>2]|0;f=0;do{m=+g[(c[h+(f<<2)>>2]|0)+88>>2];if(m==0.0){a[t+376>>0]=1;m=999999984306749440.0}else m=1.0/m;g[j+(f<<2)>>2]=m;n=m+ +g[t+128>>2];g[t+128>>2]=n;f=f+1|0}while((f|0)!=(k|0));g[t+128>>2]=1.0/n;h=c[t+32>>2]|0;j=c[t+12>>2]|0;f=0;o=0.0;p=0.0;m=0.0;do{K=c[h+(f<<2)>>2]|0;B=+g[j+(f<<2)>>2];o=o+ +g[K+8>>2]*B;m=m+B*+g[K+12>>2];p=p+B*+g[K+16>>2];f=f+1|0}while((f|0)!=(k|0));n=1.0/n}else{n=1.0/+g[t+128>>2];g[t+128>>2]=n;o=0.0;p=0.0;m=0.0}z=o*n;x=m*n;o=p*n;g[t+228>>2]=z;g[t+232>>2]=x;g[t+236>>2]=o;g[t+240>>2]=0.0;f=t+316|0;h=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(h|0));f=t+132|0;h=f+48|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(h|0));h=c[t+24>>2]|0;if((h|0)>0){j=c[t+32>>2]|0;k=c[t+12>>2]|0;f=0;B=+g[t+132>>2];A=+g[t+152>>2];y=0.0;n=+g[t+136>>2];m=+g[t+140>>2];p=+g[t+156>>2];do{K=c[j+(f<<2)>>2]|0;O=+g[K+8>>2]-z;M=+g[K+12>>2]-x;N=+g[K+16>>2]-o;L=+g[k+(f<<2)>>2];B=B+L*(M*M+N*N);g[t+132>>2]=B;A=L*(O*O+N*N)+A;g[t+152>>2]=A;y=(O*O+M*M)*L+y;g[t+172>>2]=y;n=n-M*O*L;g[t+136>>2]=n;m=m-N*O*L;g[t+140>>2]=m;p=p-N*M*L;g[t+156>>2]=p;f=f+1|0}while((f|0)!=(h|0));j=(g[l>>2]=p,c[l>>2]|0);f=(g[l>>2]=m,c[l>>2]|0);k=t+136|0;q=t+140|0;d=t+156|0;r=t+152|0;x=A;h=(g[l>>2]=n,c[l>>2]|0);o=B}else{h=c[t+136>>2]|0;K=c[t+140>>2]|0;j=c[t+156>>2]|0;p=(c[l>>2]=j,+g[l>>2]);n=(c[l>>2]=h,+g[l>>2]);k=t+136|0;q=t+140|0;d=t+156|0;r=t+152|0;y=0.0;x=+g[t+152>>2];f=K;o=+g[t+132>>2];m=(c[l>>2]=K,+g[l>>2])}M=(c[l>>2]=j,+g[l>>2]);z=x*y-p*M;L=(c[l>>2]=f,+g[l>>2]);N=(c[l>>2]=h,+g[l>>2]);A=p*L-y*N;B=M*N-x*L;O=1.0/(z*o+n*A+B*m);g[t+132>>2]=z*O;g[k>>2]=(M*m-y*n)*O;g[q>>2]=(p*n-x*m)*O;g[t+144>>2]=0.0;g[t+148>>2]=A*O;g[r>>2]=(y*o-L*m)*O;g[d>>2]=(N*m-p*o)*O;g[t+160>>2]=0.0;g[t+164>>2]=B*O;g[t+168>>2]=(L*n-M*o)*O;g[t+172>>2]=(x*o-N*n)*O;g[t+176>>2]=0.0;c[t+60>>2]=1065353216;c[t+64>>2]=0;c[t+64+4>>2]=0;c[t+64+8>>2]=0;c[t+64+12>>2]=0;c[t+80>>2]=1065353216;c[t+84>>2]=0;c[t+84+4>>2]=0;c[t+84+8>>2]=0;c[t+84+12>>2]=0;c[t+100>>2]=1065353216;c[t+104>>2]=0;c[t+104+4>>2]=0;c[t+104+8>>2]=0;c[t+104+12>>2]=0;c[t+104+16>>2]=0;c[t+108>>2]=c[t+228>>2];c[t+108+4>>2]=c[t+228+4>>2];c[t+108+8>>2]=c[t+228+8>>2];c[t+108+12>>2]=c[t+228+12>>2];q=c[t+24>>2]|0;k=c[t+44>>2]|0;if((k|0)<(q|0)){if((c[t+48>>2]|0)<(q|0)){if(!q){f=0;j=k}else{c[6324]=(c[6324]|0)+1;f=ic((q<<4|3)+16|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}j=c[t+44>>2]|0}if((j|0)>0){h=0;do{K=f+(h<<4)|0;I=(c[t+52>>2]|0)+(h<<4)|0;c[K>>2]=c[I>>2];c[K+4>>2]=c[I+4>>2];c[K+8>>2]=c[I+8>>2];c[K+12>>2]=c[I+12>>2];h=h+1|0}while((h|0)!=(j|0))}h=c[t+52>>2]|0;if(h|0){if(a[t+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[h+-4>>2]|0)}c[t+52>>2]=0}a[t+56>>0]=1;c[t+52>>2]=f;c[t+48>>2]=q;h=t+52|0}else h=t+52|0;f=k;do{K=(c[h>>2]|0)+(f<<4)|0;c[K>>2]=c[J>>2];c[K+4>>2]=c[J+4>>2];c[K+8>>2]=c[J+8>>2];c[K+12>>2]=c[J+12>>2];f=f+1|0}while((f|0)!=(q|0))}c[t+44>>2]=q;if((q|0)>0){f=0;do{K=c[t+52>>2]|0;I=c[(c[t+32>>2]|0)+(f<<2)>>2]|0;N=+g[I+12>>2]-+g[t+232>>2];O=+g[I+16>>2]-+g[t+236>>2];g[K+(f<<4)>>2]=+g[I+8>>2]-+g[t+228>>2];g[K+(f<<4)+4>>2]=N;g[K+(f<<4)+8>>2]=O;g[K+(f<<4)+12>>2]=0.0;f=f+1|0}while((f|0)<(c[t+44>>2]|0))}s=s+1|0}while((s|0)<(c[b+1152>>2]|0))}Mc(b);f=c[b+1152>>2]|0;d=S(f,f)|0;q=c[b+1172>>2]|0;if((d|0)>(q|0)){do if((c[b+1176>>2]|0)<(d|0)){if(!d){f=0;j=q}else{c[6324]=(c[6324]|0)+1;f=ic(d+19|0)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}j=c[b+1172>>2]|0}k=c[b+1180>>2]|0;if((j|0)<=0){if(!k){a[b+1184>>0]=1;c[b+1180>>2]=f;c[b+1176>>2]=d;break}}else{h=0;do{a[f+h>>0]=a[k+h>>0]|0;h=h+1|0}while((h|0)!=(j|0))}if(a[b+1184>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}a[b+1184>>0]=1;c[b+1180>>2]=f;c[b+1176>>2]=d}else f=c[b+1180>>2]|0;while(0);yn(f+q|0,0,d-q|0)|0;f=c[b+1152>>2]|0}c[b+1172>>2]=d;if((f|0)<=0){K=f;i=J;return K|0}e=c[b+1160>>2]|0;u=c[b+1180>>2]|0;t=0;do{v=c[e+(t<<2)>>2]|0;c[v+380>>2]=t;w=c[v+24>>2]|0;s=0;do{k=c[e+(s<<2)>>2]|0;h:do if((w|0)>0){q=c[k+24>>2]|0;h=0;while(1){if((q|0)>0){r=c[(c[v+32>>2]|0)+(h<<2)>>2]|0;d=c[k+32>>2]|0;j=0;do{if((r|0)==(c[d+(j<<2)>>2]|0)){h=1;break h}j=j+1|0}while((j|0)<(q|0))}h=h+1|0;if((h|0)>=(w|0)){h=0;break}}}else h=0;while(0);a[u+((S(f,s)|0)+t)>>0]=h;s=s+1|0}while((s|0)!=(f|0));t=t+1|0}while((t|0)!=(f|0));i=J;return f|0}function dc(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;A=i;i=i+80|0;Ue(b,e,f)|0;a[A+16>>0]=1;c[A+12>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;a[A+36>>0]=1;c[A+32>>2]=0;c[A+24>>2]=0;c[A+28>>2]=0;a[A+56>>0]=1;c[A+52>>2]=0;c[A+44>>2]=0;c[A+48>>2]=0;a[A+76>>0]=1;c[A+72>>2]=0;c[A+64>>2]=0;c[A+68>>2]=0;y=c[b+912>>2]|0;c[e+300>>2]=y;if(y){y=Jb[c[(c[f>>2]|0)+28>>2]&31](f,b+908|0)|0;c[e+268>>2]=y;if(y|0){k=c[e+300>>2]|0;n=yb[c[(c[f>>2]|0)+16>>2]&63](f,4,k)|0;if((k|0)>0){g=c[n+8>>2]|0;h=0;while(1){l=c[(c[b+920>>2]|0)+(h<<2)>>2]|0;if(!l){j=0;m=0}else{j=l;m=Jb[c[(c[f>>2]|0)+28>>2]&31](f,l)|0}c[g>>2]=m;if(!(Jb[c[(c[f>>2]|0)+24>>2]&31](f,j)|0)){y=yb[c[(c[f>>2]|0)+16>>2]&63](f,16,1)|0;t=c[y+8>>2]|0;c[t+12>>2]=c[l+16>>2];c[t+4>>2]=c[l+8>>2];c[t>>2]=c[l+4>>2];c[t+8>>2]=c[l+12>>2];ib[c[(c[f>>2]|0)+20>>2]&31](f,y,10406,1414349395,j)}h=h+1|0;if((h|0)>=(k|0)){g=f;break}else g=g+4|0}}else g=f;ib[c[(c[g>>2]|0)+20>>2]&31](f,n,10406,1497453121,b+908|0)}}else c[e+268>>2]=0;y=c[b+752>>2]|0;c[e+304>>2]=y;if(y){y=Jb[c[(c[f>>2]|0)+28>>2]&31](f,b+748|0)|0;c[e+272>>2]=y;if(y|0){s=c[e+304>>2]|0;t=yb[c[(c[f>>2]|0)+16>>2]&63](f,100,s)|0;if((s|0)>0){q=0;r=c[t+8>>2]|0;while(1){h=c[b+760>>2]|0;c[r+52>>2]=c[h+(q*104|0)+56>>2];c[r+56>>2]=c[h+(q*104|0)+60>>2];c[r+60>>2]=c[h+(q*104|0)+64>>2];c[r+64>>2]=c[h+(q*104|0)+68>>2];c[r+88>>2]=c[h+(q*104|0)+92>>2];c[r+92>>2]=(a[h+(q*104|0)+100>>0]<<7&255)<<24>>24>>7<<24>>24;c[r+84>>2]=c[h+(q*104|0)+88>>2];g=c[h+(q*104|0)+4>>2]|0;if(!g){j=0;g=h}else{j=Jb[c[(c[f>>2]|0)+28>>2]&31](f,g)|0;g=c[b+760>>2]|0}c[r>>2]=j;c[r+68>>2]=c[g+(q*104|0)+72>>2];c[r+72>>2]=c[g+(q*104|0)+76>>2];c[r+76>>2]=c[g+(q*104|0)+80>>2];c[r+80>>2]=c[g+(q*104|0)+84>>2];c[r+4>>2]=c[g+(q*104|0)+8>>2];c[r+8>>2]=c[g+(q*104|0)+12>>2];c[r+12>>2]=c[g+(q*104|0)+16>>2];c[r+16>>2]=c[g+(q*104|0)+20>>2];c[r+20>>2]=c[g+(q*104|0)+24>>2];c[r+24>>2]=c[g+(q*104|0)+28>>2];c[r+28>>2]=c[g+(q*104|0)+32>>2];c[r+32>>2]=c[g+(q*104|0)+36>>2];c[r+36>>2]=c[g+(q*104|0)+40>>2];c[r+40>>2]=c[g+(q*104|0)+44>>2];c[r+44>>2]=c[g+(q*104|0)+48>>2];c[r+48>>2]=c[g+(q*104|0)+52>>2];l=(c[b+760>>2]|0)+(q*104|0)|0;p=(l+~(l<<15)>>10^l+~(l<<15))*9|0;p=(p>>6^p)+~((p>>6^p)<<11)>>16^(p>>6^p)+~((p>>6^p)<<11);m=c[A+48>>2]|0;a:do if((p&m+-1)>>>0<(c[A+4>>2]|0)>>>0?(u=c[(c[A+12>>2]|0)+((p&m+-1)<<2)>>2]|0,(u|0)!=-1):0){h=c[A+72>>2]|0;j=c[A+32>>2]|0;g=u;while(1){if((l|0)==(c[h+(g<<3)>>2]|0))break;g=c[j+(g<<2)>>2]|0;if((g|0)==-1){z=27;break a}}c[(c[A+52>>2]|0)+(g<<2)>>2]=q}else z=27;while(0);if((z|0)==27){z=0;o=c[A+44>>2]|0;if((o|0)==(m|0)){g=m|0?m<<1:1;if((m|0)<(g|0)){if((g|0)!=0?(c[6324]=(c[6324]|0)+1,v=ic((g<<2|3)+16|0)|0,(v|0)!=0):0){c[(v+4+15&-16)+-4>>2]=v;k=v+4+15&-16}else k=0;j=c[A+52>>2]|0;if((m|0)<=0)if(!j)h=m;else z=35;else{h=0;do{c[k+(h<<2)>>2]=c[j+(h<<2)>>2];h=h+1|0}while((h|0)!=(m|0));z=35}if((z|0)==35){z=0;if(a[A+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[j+-4>>2]|0)}c[A+52>>2]=0;h=c[A+44>>2]|0}a[A+56>>0]=1;c[A+52>>2]=k;c[A+48>>2]=g}else{g=m;h=m}}else{g=m;h=o}c[(c[A+52>>2]|0)+(h<<2)>>2]=q;c[A+44>>2]=h+1;h=c[A+64>>2]|0;if((h|0)==(c[A+68>>2]|0)?(w=h|0?h<<1:1,(h|0)<(w|0)):0){if((w|0)!=0?(c[6324]=(c[6324]|0)+1,x=ic((w<<3|3)+16|0)|0,(x|0)!=0):0){c[(x+4+15&-16)+-4>>2]=x;j=x+4+15&-16}else j=0;if((h|0)>0){g=0;do{k=(c[A+72>>2]|0)+(g<<3)|0;n=c[k+4>>2]|0;y=j+(g<<3)|0;c[y>>2]=c[k>>2];c[y+4>>2]=n;g=g+1|0}while((g|0)!=(h|0))}g=c[A+72>>2]|0;if(g|0){if(a[A+76>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}c[A+72>>2]=0}a[A+76>>0]=1;c[A+72>>2]=j;c[A+68>>2]=w;h=c[A+64>>2]|0;g=c[A+48>>2]|0}c[(c[A+72>>2]|0)+(h<<3)>>2]=l;c[A+64>>2]=h+1;if((m|0)<(g|0)){n=c[A+4>>2]|0;do if((n|0)<(g|0)){b:do if((c[A+8>>2]|0)<(g|0)){do if(!g)h=0;else{c[6324]=(c[6324]|0)+1;h=ic((g<<2|3)+16|0)|0;if(!h){h=0;break}c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}while(0);k=c[A+12>>2]|0;do if((n|0)>0){j=0;do{c[h+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)!=(n|0))}else{if(k|0)break;a[A+16>>0]=1;c[A+12>>2]=h;c[A+8>>2]=g;break b}while(0);if(a[A+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}a[A+16>>0]=1;c[A+12>>2]=h;c[A+8>>2]=g}else h=c[A+12>>2]|0;while(0);m=g<<2;yn(h+(n<<2)|0,0,m-(n<<2)|0)|0;c[A+4>>2]=g;l=c[A+24>>2]|0;if((l|0)<(g|0)){c:do if((c[A+28>>2]|0)<(g|0)){do if(!g)h=0;else{c[6324]=(c[6324]|0)+1;h=ic((m|3)+16|0)|0;if(!h){h=0;break}c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}while(0);k=c[A+32>>2]|0;do if((l|0)>0){j=0;do{c[h+(j<<2)>>2]=c[k+(j<<2)>>2];j=j+1|0}while((j|0)!=(l|0))}else{if(k|0)break;a[A+36>>0]=1;c[A+32>>2]=h;c[A+28>>2]=g;break c}while(0);if(a[A+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[k+-4>>2]|0)}a[A+36>>0]=1;c[A+32>>2]=h;c[A+28>>2]=g}else h=c[A+32>>2]|0;while(0);yn(h+(l<<2)|0,0,m-(l<<2)|0)|0}c[A+24>>2]=g;if((g|0)>0){yn(c[A+12>>2]|0,-1,m|0)|0;yn(c[A+32>>2]|0,-1,m|0)|0}if((n|0)<=0){g=c[A+48>>2]|0;break}j=c[A+72>>2]|0;k=c[A+12>>2]|0;l=c[A+32>>2]|0;g=c[A+48>>2]|0;h=0;do{y=c[j+(h<<3)>>2]|0;y=(y+~(y<<15)>>10^y+~(y<<15))*9|0;y=k+((((y>>6^y)+~((y>>6^y)<<11)>>16^(y>>6^y)+~((y>>6^y)<<11))&g+-1)<<2)|0;c[l+(h<<2)>>2]=c[y>>2];c[y>>2]=h;h=h+1|0}while((h|0)!=(n|0))}while(0);g=p&g+-1}else g=p&m+-1;y=(c[A+12>>2]|0)+(g<<2)|0;c[(c[A+32>>2]|0)+(o<<2)>>2]=c[y>>2];c[y>>2]=o}q=q+1|0;if((q|0)>=(s|0))break;else r=r+100|0}}ib[c[(c[f>>2]|0)+20>>2]&31](f,t,10427,1145979475,b+748|0)}}else c[e+272>>2]=0;y=c[b+772>>2]|0;c[e+308>>2]=y;if(y){y=Jb[c[(c[f>>2]|0)+28>>2]&31](f,c[b+780>>2]|0)|0;c[e+276>>2]=y;if(y|0){m=c[e+308>>2]|0;n=yb[c[(c[f>>2]|0)+16>>2]&63](f,20,m)|0;if((m|0)>0){j=c[b+780>>2]|0;k=c[n+8>>2]|0;l=0;g=j;while(1){c[k+16>>2]=(a[j+(l*52|0)+20>>0]<<7&255)<<24>>24>>7<<24>>24;h=c[j+(l*52|0)+4>>2]|0;if(!h)h=0;else{h=Jb[c[(c[f>>2]|0)+28>>2]&31](f,h)|0;j=c[b+780>>2]|0;g=j}c[k>>2]=h;h=c[j+(l*52|0)+8>>2]|0;if(!h)h=-1;else h=(h-(c[b+760>>2]|0)|0)/104|0;c[k+4>>2]=h;h=c[j+(l*52|0)+12>>2]|0;if(!h)h=-1;else h=(h-(c[b+760>>2]|0)|0)/104|0;c[k+8>>2]=h;c[k+12>>2]=c[j+(l*52|0)+16>>2];l=l+1|0;if((l|0)>=(m|0))break;else k=k+20|0}}else g=c[b+780>>2]|0;ib[c[(c[f>>2]|0)+20>>2]&31](f,n,10444,1497453121,g)}}else c[e+276>>2]=0;y=c[b+792>>2]|0;c[e+312>>2]=y;if(y){y=Jb[c[(c[f>>2]|0)+28>>2]&31](f,c[b+800>>2]|0)|0;c[e+280>>2]=y;if(y|0){m=c[e+312>>2]|0;n=yb[c[(c[f>>2]|0)+16>>2]&63](f,36,m)|0;if((m|0)>0){j=c[b+800>>2]|0;k=c[n+8>>2]|0;l=0;g=j;while(1){h=c[j+(l*44|0)+4>>2]|0;if(!h)h=0;else{h=Jb[c[(c[f>>2]|0)+28>>2]&31](f,h)|0;j=c[b+800>>2]|0;g=j}c[k+16>>2]=h;c[k>>2]=c[j+(l*44|0)+20>>2];c[k+4>>2]=c[j+(l*44|0)+24>>2];c[k+8>>2]=c[j+(l*44|0)+28>>2];c[k+12>>2]=c[j+(l*44|0)+32>>2];h=c[j+(l*44|0)+8>>2]|0;if(!h)h=-1;else h=(h-(c[b+760>>2]|0)|0)/104|0;c[k+20>>2]=h;h=c[j+(l*44|0)+12>>2]|0;if(!h)h=-1;else h=(h-(c[b+760>>2]|0)|0)/104|0;c[k+24>>2]=h;h=c[j+(l*44|0)+16>>2]|0;if(!h)h=-1;else h=(h-(c[b+760>>2]|0)|0)/104|0;c[k+28>>2]=h;c[k+32>>2]=c[j+(l*44|0)+36>>2];l=l+1|0;if((l|0)>=(m|0))break;else k=k+36|0}}else g=c[b+800>>2]|0;ib[c[(c[f>>2]|0)+20>>2]&31](f,n,10461,1497453121,g)}}else c[e+280>>2]=0;y=c[b+812>>2]|0;c[e+316>>2]=y;if(y){y=Jb[c[(c[f>>2]|0)+28>>2]&31](f,c[b+820>>2]|0)|0;c[e+284>>2]=y;if(y|0){m=c[e+316>>2]|0;n=yb[c[(c[f>>2]|0)+16>>2]&63](f,100,m)|0;if((m|0)>0){j=c[b+820>>2]|0;k=c[n+8>>2]|0;l=0;g=j;while(1){c[k>>2]=c[j+(l*104|0)+32>>2];c[k+4>>2]=c[j+(l*104|0)+36>>2];c[k+8>>2]=c[j+(l*104|0)+40>>2];c[k+12>>2]=c[j+(l*104|0)+44>>2];h=c[j+8>>2]|0;if(!h)h=-1;else h=(h-(c[b+760>>2]|0)|0)/104|0;c[k+68>>2]=h;c[k+16>>2]=c[j+(l*104|0)+48>>2];c[k+20>>2]=c[j+(l*104|0)+52>>2];c[k+24>>2]=c[j+(l*104|0)+56>>2];c[k+28>>2]=c[j+(l*104|0)+60>>2];h=c[j+116>>2]|0;if(!h)h=-1;else h=(h-(c[b+760>>2]|0)|0)/104|0;c[k+72>>2]=h;c[k+32>>2]=c[j+(l*104|0)+64>>2];c[k+36>>2]=c[j+(l*104|0)+68>>2];c[k+40>>2]=c[j+(l*104|0)+72>>2];c[k+44>>2]=c[j+(l*104|0)+76>>2];h=c[j+224>>2]|0;if(!h)h=-1;else h=(h-(c[b+760>>2]|0)|0)/104|0;c[k+76>>2]=h;c[k+48>>2]=c[j+(l*104|0)+80>>2];c[k+52>>2]=c[j+(l*104|0)+84>>2];c[k+56>>2]=c[j+(l*104|0)+88>>2];c[k+60>>2]=c[j+(l*104|0)+92>>2];h=c[j+332>>2]|0;if(!h)h=-1;else h=(h-(c[b+760>>2]|0)|0)/104|0;c[k+80>>2]=h;c[k+88>>2]=c[j+(l*104|0)+96>>2];c[k+92>>2]=c[j+(l*104|0)+100>>2];h=c[j+(l*104|0)+4>>2]|0;if(!h)h=0;else{h=Jb[c[(c[f>>2]|0)+28>>2]&31](f,h)|0;j=c[b+820>>2]|0;g=j}c[k+64>>2]=h;c[k+84>>2]=c[j+(l*104|0)+24>>2];l=l+1|0;if((l|0)>=(m|0))break;else k=k+100|0}}else g=c[b+820>>2]|0;ib[c[(c[f>>2]|0)+20>>2]&31](f,n,10478,1497453121,g)}}else c[e+284>>2]=0;y=c[b+832>>2]|0;c[e+320>>2]=y;if(y){y=Jb[c[(c[f>>2]|0)+28>>2]&31](f,c[b+840>>2]|0)|0;c[e+288>>2]=y;if(!y)y=f;else{l=c[e+320>>2]|0;m=yb[c[(c[f>>2]|0)+16>>2]&63](f,92,l)|0;if((l|0)>0){j=c[m+8>>2]|0;k=0;while(1){h=c[b+840>>2]|0;c[j>>2]=c[h+(k*96|0)+28>>2];c[j+4>>2]=c[h+(k*96|0)+32>>2];c[j+8>>2]=c[h+(k*96|0)+36>>2];c[j+12>>2]=c[h+(k*96|0)+40>>2];c[j+16>>2]=c[h+(k*96|0)+44>>2];c[j+20>>2]=c[h+(k*96|0)+48>>2];c[j+24>>2]=c[h+(k*96|0)+52>>2];c[j+28>>2]=c[h+(k*96|0)+56>>2];c[j+32>>2]=c[h+(k*96|0)+60>>2];c[j+36>>2]=c[h+(k*96|0)+64>>2];c[j+40>>2]=c[h+(k*96|0)+68>>2];c[j+44>>2]=c[h+(k*96|0)+72>>2];c[j+48>>2]=c[h+(k*96|0)+76>>2];c[j+52>>2]=c[h+(k*96|0)+80>>2];c[j+56>>2]=c[h+(k*96|0)+84>>2];c[j+60>>2]=c[h+(k*96|0)+88>>2];c[j+88>>2]=c[h+(k*96|0)+92>>2];h=c[b+840>>2]|0;c[j+64>>2]=c[h+(k*96|0)+4>>2];c[j+68>>2]=c[h+(k*96|0)+8>>2];c[j+72>>2]=c[h+(k*96|0)+12>>2];c[j+76>>2]=c[h+(k*96|0)+16>>2];g=c[h+(k*96|0)>>2]|0;if(!g)g=-1;else g=(g-(c[b+760>>2]|0)|0)/104|0;c[j+84>>2]=g;g=c[h+(k*96|0)+20>>2]|0;if(!g)g=0;else g=Jb[c[(c[f>>2]|0)+28>>2]&31](f,g)|0;c[j+80>>2]=g;k=k+1|0;if((k|0)>=(l|0))break;else j=j+92|0}}ib[c[(c[f>>2]|0)+20>>2]&31](f,m,10496,1497453121,c[b+840>>2]|0);y=f}}else{c[e+288>>2]=0;y=f}c[e+360>>2]=c[b+356>>2];c[e+336>>2]=c[b+332>>2];c[e+352>>2]=c[b+348>>2];c[e+332>>2]=c[b+328>>2];c[e+348>>2]=c[b+344>>2];c[e+344>>2]=c[b+340>>2];c[e+420>>2]=c[b+416>>2];c[e+424>>2]=c[b+420>>2];c[e+428>>2]=c[b+424>>2];c[e+416>>2]=c[b+412>>2];n=c[b+404>>2]|0;c[e+340>>2]=c[b+336>>2];c[e+364>>2]=c[b+360>>2];c[e+432>>2]=c[b+428>>2];c[e+356>>2]=c[b+352>>2];c[e+368>>2]=c[b+364>>2];c[e+372>>2]=c[b+368>>2];c[e+376>>2]=c[b+372>>2];c[e+380>>2]=c[b+376>>2];c[e+412>>2]=c[b+408>>2];c[e+408>>2]=n;c[e+384>>2]=c[b+380>>2];c[e+388>>2]=c[b+384>>2];c[e+392>>2]=c[b+388>>2];c[e+396>>2]=c[b+392>>2];c[e+400>>2]=c[b+396>>2];c[e+404>>2]=c[b+400>>2];c[e+264>>2]=Jb[c[(c[y>>2]|0)+28>>2]&31](f,b+512|0)|0;n=yb[c[(c[f>>2]|0)+16>>2]&63](f,192,1)|0;m=c[n+8>>2]|0;c[m+96>>2]=c[b+672>>2];c[m+100>>2]=c[b+676>>2];c[m+104>>2]=c[b+680>>2];c[m+108>>2]=c[b+684>>2];c[m+112>>2]=c[b+688>>2];c[m+116>>2]=c[b+692>>2];c[m+120>>2]=c[b+696>>2];c[m+124>>2]=c[b+700>>2];c[m+128>>2]=c[b+704>>2];c[m+132>>2]=c[b+708>>2];c[m+136>>2]=c[b+712>>2];c[m+140>>2]=c[b+716>>2];c[m+180>>2]=d[b+513>>0];c[m+176>>2]=d[b+512>>0];c[m+144>>2]=c[b+560>>2];c[m+148>>2]=c[b+564>>2];c[m+152>>2]=c[b+568>>2];c[m+156>>2]=c[b+572>>2];x=c[b+524>>2]|0;c[m+168>>2]=x;if(x){x=Jb[c[(c[y>>2]|0)+28>>2]&31](f,c[b+532>>2]|0)|0;k=c[m+168>>2]|0;c[m+160>>2]=x;if(k|0){l=yb[c[(c[f>>2]|0)+16>>2]&63](f,16,k)|0;if((k|0)>0){g=c[b+532>>2]|0;h=c[l+8>>2]|0;j=0;while(1){c[h>>2]=c[g+(j<<4)>>2];c[h+4>>2]=c[g+(j<<4)+4>>2];c[h+8>>2]=c[g+(j<<4)+8>>2];c[h+12>>2]=c[g+(j<<4)+12>>2];j=j+1|0;if((j|0)==(k|0))break;else h=h+16|0}}else g=c[b+532>>2]|0;ib[c[(c[f>>2]|0)+20>>2]&31](f,l,18816,1497453121,g)}}else c[m+160>>2]=0;c[m+184>>2]=c[b+516>>2];c[m>>2]=c[b+576>>2];c[m+4>>2]=c[b+580>>2];c[m+8>>2]=c[b+584>>2];c[m+12>>2]=c[b+588>>2];c[m+16>>2]=c[b+592>>2];c[m+20>>2]=c[b+596>>2];c[m+24>>2]=c[b+600>>2];c[m+28>>2]=c[b+604>>2];c[m+32>>2]=c[b+608>>2];c[m+36>>2]=c[b+612>>2];c[m+40>>2]=c[b+616>>2];c[m+44>>2]=c[b+620>>2];c[m+48>>2]=c[b+624>>2];c[m+52>>2]=c[b+628>>2];c[m+56>>2]=c[b+632>>2];c[m+60>>2]=c[b+636>>2];c[m+64>>2]=c[b+640>>2];c[m+68>>2]=c[b+644>>2];c[m+72>>2]=c[b+648>>2];c[m+76>>2]=c[b+652>>2];c[m+80>>2]=c[b+656>>2];c[m+84>>2]=c[b+660>>2];c[m+88>>2]=c[b+664>>2];c[m+92>>2]=c[b+668>>2];x=c[b+544>>2]|0;c[m+172>>2]=x;if(x){x=Jb[c[(c[y>>2]|0)+28>>2]&31](f,c[b+552>>2]|0)|0;k=c[m+172>>2]|0;c[m+164>>2]=x;if(!k)z=149;else{l=yb[c[(c[f>>2]|0)+16>>2]&63](f,4,k)|0;if((k|0)>0){g=c[b+552>>2]|0;h=0;j=c[l+8>>2]|0;while(1){c[j>>2]=c[g+(h<<2)>>2];h=h+1|0;if((h|0)==(k|0))break;else j=j+4|0}}else g=c[b+552>>2]|0;ib[c[(c[f>>2]|0)+20>>2]&31](f,l,10516,1497453121,g);x=f}}else{c[m+164>>2]=0;z=149}if((z|0)==149)x=f;ib[c[(c[x>>2]|0)+20>>2]&31](f,n,10522,1497453121,b+512|0);z=c[b+1152>>2]|0;c[e+324>>2]=z;if(z){z=Jb[c[(c[y>>2]|0)+28>>2]&31](f,c[c[b+1160>>2]>>2]|0)|0;v=c[e+324>>2]|0;c[e+292>>2]=z;if(v|0){w=yb[c[(c[f>>2]|0)+16>>2]&63](f,348,v)|0;if((v|0)>0){t=0;u=c[w+8>>2]|0;while(1){h=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;z=u+320|0;c[z>>2]=c[h+360>>2];c[u+256>>2]=c[h+332>>2];c[u+260>>2]=c[h+336>>2];c[u+264>>2]=c[h+340>>2];c[u+268>>2]=c[h+344>>2];c[u+344>>2]=c[h+380>>2];c[u+340>>2]=d[h+377>>0];c[u+160>>2]=c[h+228>>2];c[u+164>>2]=c[h+232>>2];c[u+168>>2]=c[h+236>>2];c[u+172>>2]=c[h+240>>2];c[u+336>>2]=d[h+376>>0];c[u+208>>2]=c[h+276>>2];c[u+212>>2]=c[h+280>>2];c[u+216>>2]=c[h+284>>2];c[u+220>>2]=c[h+288>>2];c[u+224>>2]=c[h+292>>2];c[u+228>>2]=c[h+296>>2];c[u+232>>2]=c[h+300>>2];c[u+236>>2]=c[h+304>>2];h=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;c[u>>2]=c[h+60>>2];c[u+4>>2]=c[h+64>>2];c[u+8>>2]=c[h+68>>2];c[u+12>>2]=c[h+72>>2];c[u+16>>2]=c[h+76>>2];c[u+20>>2]=c[h+80>>2];c[u+24>>2]=c[h+84>>2];c[u+28>>2]=c[h+88>>2];c[u+32>>2]=c[h+92>>2];c[u+36>>2]=c[h+96>>2];c[u+40>>2]=c[h+100>>2];c[u+44>>2]=c[h+104>>2];c[u+48>>2]=c[h+108>>2];c[u+52>>2]=c[h+112>>2];c[u+56>>2]=c[h+116>>2];c[u+60>>2]=c[h+120>>2];c[u+296>>2]=c[h+124>>2];h=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;c[u+300>>2]=c[h+128>>2];c[u+112>>2]=c[h+180>>2];c[u+116>>2]=c[h+184>>2];c[u+120>>2]=c[h+188>>2];c[u+124>>2]=c[h+192>>2];c[u+128>>2]=c[h+196>>2];c[u+132>>2]=c[h+200>>2];c[u+136>>2]=c[h+204>>2];c[u+140>>2]=c[h+208>>2];c[u+144>>2]=c[h+212>>2];c[u+148>>2]=c[h+216>>2];c[u+152>>2]=c[h+220>>2];c[u+156>>2]=c[h+224>>2];g=u+316|0;c[g>>2]=c[h+356>>2];c[u+64>>2]=c[h+132>>2];c[u+68>>2]=c[h+136>>2];c[u+72>>2]=c[h+140>>2];c[u+76>>2]=c[h+144>>2];c[u+80>>2]=c[h+148>>2];c[u+84>>2]=c[h+152>>2];c[u+88>>2]=c[h+156>>2];c[u+92>>2]=c[h+160>>2];c[u+96>>2]=c[h+164>>2];c[u+100>>2]=c[h+168>>2];c[u+104>>2]=c[h+172>>2];c[u+108>>2]=c[h+176>>2];h=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;c[u+240>>2]=c[h+316>>2];c[u+244>>2]=c[h+320>>2];c[u+248>>2]=c[h+324>>2];c[u+252>>2]=c[h+328>>2];c[u+324>>2]=c[h+364>>2];c[u+328>>2]=c[h+368>>2];c[u+312>>2]=c[h+352>>2];c[g>>2]=c[h+356>>2];c[z>>2]=c[h+360>>2];c[u+332>>2]=c[h+372>>2];z=c[h+44>>2]|0;g=u+284|0;c[g>>2]=z;n=u+292|0;c[n>>2]=c[h+4>>2];o=u+288|0;c[o>>2]=c[h+24>>2];c[u+304>>2]=c[h+308>>2];c[u+176>>2]=c[h+244>>2];c[u+180>>2]=c[h+248>>2];c[u+184>>2]=c[h+252>>2];c[u+188>>2]=c[h+256>>2];c[u+192>>2]=c[h+260>>2];c[u+196>>2]=c[h+264>>2];c[u+200>>2]=c[h+268>>2];c[u+204>>2]=c[h+272>>2];h=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;c[u+308>>2]=c[h+312>>2];if(z){z=Jb[c[(c[y>>2]|0)+28>>2]&31](f,c[h+52>>2]|0)|0;c[u+272>>2]=z;if(z|0){k=c[g>>2]|0;m=yb[c[(c[f>>2]|0)+16>>2]&63](f,16,k)|0;if((k|0)>0){g=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;l=c[g+52>>2]|0;h=0;j=c[m+8>>2]|0;while(1){c[j>>2]=c[l+(h<<4)>>2];c[j+4>>2]=c[l+(h<<4)+4>>2];c[j+8>>2]=c[l+(h<<4)+8>>2];c[j+12>>2]=c[l+(h<<4)+12>>2];h=h+1|0;if((h|0)==(k|0))break;else j=j+16|0}}else g=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;ib[c[(c[x>>2]|0)+20>>2]&31](f,m,18816,1497453121,c[g+52>>2]|0)}}else c[u+272>>2]=0;if(c[n>>2]|0){z=Jb[c[(c[y>>2]|0)+28>>2]&31](f,c[(c[(c[b+1160>>2]|0)+(t<<2)>>2]|0)+12>>2]|0)|0;c[u+280>>2]=z;if(z|0){k=c[n>>2]|0;m=yb[c[(c[f>>2]|0)+16>>2]&63](f,4,k)|0;if((k|0)>0){g=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;l=c[g+12>>2]|0;h=0;j=c[m+8>>2]|0;while(1){c[j>>2]=c[l+(h<<2)>>2];h=h+1|0;if((h|0)==(k|0))break;else j=j+4|0}}else g=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;ib[c[(c[x>>2]|0)+20>>2]&31](f,m,10516,1497453121,c[g+12>>2]|0)}}else c[u+280>>2]=0;if(c[o>>2]|0){z=Jb[c[(c[y>>2]|0)+28>>2]&31](f,(c[(c[b+1160>>2]|0)+(t<<2)>>2]|0)+20|0)|0;c[u+276>>2]=z;if(z|0){m=c[n>>2]|0;s=yb[c[(c[f>>2]|0)+16>>2]&63](f,4,m)|0;if((m|0)>0){g=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;n=c[g+32>>2]|0;o=c[A+12>>2]|0;p=c[A+72>>2]|0;q=c[A+52>>2]|0;r=c[A+32>>2]|0;k=0;l=c[s+8>>2]|0;while(1){j=c[n+(k<<2)>>2]|0;h=(j+~(j<<15)>>10^j+~(j<<15))*9|0;h=c[o+((((h>>6^h)+~((h>>6^h)<<11)>>16^(h>>6^h)+~((h>>6^h)<<11))&(c[A+48>>2]|0)+-1)<<2)>>2]|0;if((j|0)!=(c[p+(h<<3)>>2]|0))do h=c[r+(h<<2)>>2]|0;while((j|0)!=(c[p+(h<<3)>>2]|0));c[l>>2]=c[q+(h<<2)>>2];k=k+1|0;if((k|0)==(m|0))break;else l=l+4|0}}else g=c[(c[b+1160>>2]|0)+(t<<2)>>2]|0;ib[c[(c[x>>2]|0)+20>>2]&31](f,s,10559,1497453121,g+20|0)}}else c[u+276>>2]=0;t=t+1|0;if((t|0)>=(v|0))break;else u=u+348|0}}ib[c[(c[x>>2]|0)+20>>2]&31](f,w,10539,1497453121,c[c[b+1160>>2]>>2]|0)}}else c[e+292>>2]=0;z=c[b+892>>2]|0;c[e+328>>2]=z;if(!z){c[e+296>>2]=0;dj(A);i=A;return 10583}z=Jb[c[(c[y>>2]|0)+28>>2]&31](f,c[b+900>>2]|0)|0;c[e+296>>2]=z;if(!z){dj(A);i=A;return 10583}l=c[b+892>>2]|0;m=yb[c[(c[f>>2]|0)+16>>2]&63](f,104,l)|0;if((l|0)>0){j=0;k=c[m+8>>2]|0;while(1){g=c[(c[b+900>>2]|0)+(j<<2)>>2]|0;c[k+96>>2]=ob[c[(c[g>>2]|0)+20>>2]&127](g)|0;g=(c[b+900>>2]|0)+(j<<2)|0;h=c[g>>2]|0;c[k+8>>2]=c[h+28>>2];c[k+12>>2]=c[h+32>>2];c[k+16>>2]=c[h+36>>2];c[k+20>>2]=c[h+40>>2];c[k+24>>2]=c[h+44>>2];c[k+28>>2]=c[h+48>>2];c[k+32>>2]=c[h+52>>2];c[k+36>>2]=c[h+56>>2];c[k+40>>2]=c[h+60>>2];c[k+44>>2]=c[h+64>>2];c[k+48>>2]=c[h+68>>2];c[k+52>>2]=d[h+152>>0];h=k+56|0;c[k>>2]=0;n=k+4|0;c[n>>2]=0;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;c[h+20>>2]=0;c[h+24>>2]=0;c[h+28>>2]=0;g=c[g>>2]|0;h=c[g+4>>2]|0;if(h){c[k+88>>2]=1;c[k>>2]=Jb[c[(c[y>>2]|0)+28>>2]&31](f,h)|0;g=c[(c[b+900>>2]|0)+(j<<2)>>2]|0}if(c[g+12>>2]|0){c[k+88>>2]=3;c[k>>2]=Jb[c[(c[y>>2]|0)+28>>2]&31](f,c[(c[(c[b+900>>2]|0)+(j<<2)>>2]|0)+12>>2]|0)|0}g=c[(c[b+900>>2]|0)+(j<<2)>>2]|0;h=c[g+8>>2]|0;if(h){c[k+88>>2]=2;c[k>>2]=Jb[c[(c[y>>2]|0)+28>>2]&31](f,h)|0;g=c[(c[b+900>>2]|0)+(j<<2)>>2]|0}h=c[g+16>>2]|0;if(h){c[k+92>>2]=1;c[n>>2]=Jb[c[(c[y>>2]|0)+28>>2]&31](f,h)|0;g=c[(c[b+900>>2]|0)+(j<<2)>>2]|0}h=c[g+24>>2]|0;if(h){c[k+92>>2]=3;c[n>>2]=Jb[c[(c[y>>2]|0)+28>>2]&31](f,h)|0;g=c[(c[b+900>>2]|0)+(j<<2)>>2]|0}g=c[g+20>>2]|0;if(g|0){c[k+92>>2]=2;c[n>>2]=Jb[c[(c[y>>2]|0)+28>>2]&31](f,g)|0}j=j+1|0;if((j|0)>=(l|0))break;else k=k+104|0}}ib[c[(c[x>>2]|0)+20>>2]&31](f,m,10563,1497453121,c[b+900>>2]|0);dj(A);i=A;return 10583}function ec(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;K=i;i=i+144|0;a:do switch(d-b|0){case 0:{c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;i=K;return}case 2:{f=c[(c[a+92>>2]|0)+(b<<2)>>2]|0;j=c[f+88>>2]|0;k=c[f+200>>2]|0;h=c[f+92>>2]|0;g=c[f+204>>2]|0;if((j|0)==(k|0)&(h|0)==(g|0))if((c[f+96>>2]|0)==(c[f+208>>2]|0))break a;else g=h;g=h-g|0;do if(g|j-k){c[f>>2]=f+112;c[f+4>>2]=f+112;c[f+112>>2]=f;c[f+116>>2]=f;J=(j-k|0)<0|(j-k|0)==0&(g|0)<0;c[e>>2]=J?f:f+112|0;c[e+4>>2]=J?f+112|0:f;if((g|0)<0|(j-k|0)<0&(g|0)==0){c[e+8>>2]=f;c[e+12>>2]=f+112;g=f;f=f+112|0;break}else{c[e+8>>2]=f+112;c[e+12>>2]=f;g=f;f=f+112|0;break}}else{J=(c[f+96>>2]|0)>(c[f+208>>2]|0);g=J?f+112|0:f;c[g>>2]=g;c[g+4>>2]=g;c[e>>2]=g;c[e+4>>2]=g;c[e+8>>2]=g;c[e+12>>2]=g;f=J?f:f+112|0}while(0);a=Wf(a,g,f)|0;c[a>>2]=a;c[a+4>>2]=a;c[g+8>>2]=a;a=c[a+8>>2]|0;c[a>>2]=a;c[a+4>>2]=a;c[f+8>>2]=a;i=K;return}case 1:{f=c[(c[a+92>>2]|0)+(b<<2)>>2]|0;break}default:{n=((d-b|0)/2|0)+b|0;m=c[a+92>>2]|0;l=c[m+(n+-1<<2)>>2]|0;j=c[l+88>>2]|0;k=c[l+92>>2]|0;l=c[l+96>>2]|0;b:do if((n|0)<(d|0)){f=n;do{g=c[m+(f<<2)>>2]|0;if((c[g+88>>2]|0)!=(j|0))break b;if((c[g+92>>2]|0)!=(k|0))break b;if((c[g+96>>2]|0)!=(l|0))break b;f=f+1|0}while((f|0)<(d|0))}else f=n;while(0);ec(a,b,n,e);c[K+96>>2]=0;c[K+96+4>>2]=0;c[K+96+8>>2]=0;c[K+96+12>>2]=0;ec(a,f,d,K+96|0);k=c[K+96+4>>2]|0;c:do if(k|0){A=c[e+4>>2]|0;if(!A){c[e>>2]=c[K+96>>2];c[e+4>>2]=c[K+96+4>>2];c[e+8>>2]=c[K+96+8>>2];c[e+12>>2]=c[K+96+12>>2];break}c[a+100>>2]=(c[a+100>>2]|0)+-1;m=c[e+12>>2]|0;j=c[K+96+8>>2]|0;g=c[m+88>>2]|0;d:do if((g|0)==(c[j+88>>2]|0)?(h=c[m+92>>2]|0,(h|0)==(c[j+92>>2]|0)):0){l=c[j+4>>2]|0;if((l|0)==(j|0)){f=c[j+8>>2]|0;if(!f)f=g;else{j=c[f+12>>2]|0;f=c[j+88>>2]|0;h=c[j+92>>2]|0}n=j;o=f+1|0;g=m;p=c[j+96>>2]|0;q=h;h=m;break}h=c[j>>2]|0;c[l>>2]=h;c[h+4>>2]=l;e:do if((j|0)==(c[K+96>>2]|0)){f=c[h+88>>2]|0;g=c[l+88>>2]|0;do if((f|0)>=(g|0)){if((f|0)==(g|0)?(c[h+92>>2]|0)<(c[l+92>>2]|0):0)break;c[K+96>>2]=l;break e}while(0);c[K+96>>2]=h}while(0);if((j|0)==(k|0)){f=c[h+88>>2]|0;g=c[l+88>>2]|0;do if((f|0)<=(g|0)){if((f|0)==(g|0)?(c[h+92>>2]|0)>(c[l+92>>2]|0):0)break;c[K+96+4>>2]=l;k=l;H=38;break d}while(0);c[K+96+4>>2]=h;k=h;H=38}else H=38}else H=38;while(0);if((H|0)==38){y=c[e>>2]|0;z=c[K+96>>2]|0;d=A;h=0;j=0;w=1;x=0;o=k;while(1){m=c[o+88>>2]|0;n=c[d+88>>2]|0;g=S(m-n|0,w)|0;f:do if((g|0)<=0){if((g|0)<0){v=(x|0)!=0;l=d;f=o;b=c[d+92>>2]|0;u=c[o+92>>2]|0;while(1){r=c[(v?f+4|0:f)>>2]|0;s=(r|0)==(f|0);t=f+88|0;while(1){d=l+88|0;p=u-b|0;if(!s?(B=c[r+88>>2]|0,C=S(B-m|0,w)|0,E=c[r+92>>2]|0,F=E-u|0,(F|0)>-1):0){if(!C)break;if((C|0)<0?(S(F,g)|0)<=(S(C,p)|0):0)break}q=c[(v?l+4|0:l)>>2]|0;if((q|0)==(l|0))break f;G=c[q+88>>2]|0;n=S(G-(c[d>>2]|0)|0,w)|0;o=c[q+92>>2]|0;d=o-b|0;m=c[t>>2]|0;b=g;g=S(m-G|0,w)|0;if(!((d|0)>0&(g|0)<0))break f;if(!n){l=q;b=o;continue}if((n|0)>=0)break f;if((S(d,b)|0)>=(S(n,p)|0))break f;else{l=q;b=o}}f=r;g=S(B-(c[d>>2]|0)|0,w)|0;u=E;m=B}}f=c[d+92>>2]|0;b=(x|0)!=0;g:do if(b){l=d;while(1){g=c[l>>2]|0;if((g|0)==(d|0)){m=l;break g}if((c[g+88>>2]|0)!=(n|0)){m=l;break g}G=f;f=c[g+92>>2]|0;if((f|0)>(G|0)){m=l;break}else l=g}}else{l=d;while(1){g=c[l+4>>2]|0;if((g|0)==(d|0)){m=l;break g}if((c[g+88>>2]|0)!=(n|0)){m=l;break g}G=f;f=c[g+92>>2]|0;if((f|0)>(G|0)){m=l;break}else l=g}}while(0);g=c[o+92>>2]|0;if(b){f=o;while(1){l=c[f+4>>2]|0;if((l|0)==(o|0)){l=m;break f}if((c[l+88>>2]|0)!=(n|0)){l=m;break f}G=g;g=c[l+92>>2]|0;if((g|0)<(G|0)){l=m;break}else f=l}}else{f=o;while(1){l=c[f>>2]|0;if((l|0)==(o|0)){l=m;break f}if((c[l+88>>2]|0)!=(n|0)){l=m;break f}G=g;g=c[l+92>>2]|0;if((g|0)<(G|0)){l=m;break}else f=l}}}else{u=(x|0)!=0;l=d;f=o;t=n;s=c[o+92>>2]|0;while(1){r=f+88|0;b=c[l+92>>2]|0;d=s-b|0;m=c[(u?l:l+4|0)>>2]|0;h:do if((m|0)!=(l|0))if(u){p=g;q=m;o=t;n=b;while(1){m=o;o=c[q+88>>2]|0;m=S(o-m|0,w)|0;b=n;n=c[q+92>>2]|0;b=n-b|0;if((b|0)>=1)break h;if(m|0){if((m|0)>=0)break h;if((S(b,p)|0)>(S(m,d)|0))break h}l=S((c[r>>2]|0)-o|0,w)|0;d=s-n|0;m=c[q>>2]|0;if((m|0)==(q|0)){p=l;l=q;break}else{G=q;p=l;q=m;l=G}}}else{p=g;q=m;o=t;n=b;while(1){m=o;o=c[q+88>>2]|0;m=S(o-m|0,w)|0;b=n;n=c[q+92>>2]|0;b=n-b|0;if((b|0)>=1)break h;if(m|0){if((m|0)>=0)break h;if((S(b,p)|0)>(S(m,d)|0))break h}l=S((c[r>>2]|0)-o|0,w)|0;d=s-n|0;m=c[q+4>>2]|0;if((m|0)==(q|0)){p=l;l=q;break}else{G=q;p=l;q=m;l=G}}}else p=g;while(0);n=c[(u?f:f+4|0)>>2]|0;if((n|0)==(f|0))break f;g=c[n+88>>2]|0;m=S(g-(c[r>>2]|0)|0,w)|0;b=s;s=c[n+92>>2]|0;b=s-b|0;t=c[l+88>>2]|0;g=S(g-t|0,w)|0;if(!((b|0)<0&(g|0)>0))break f;if(!m){f=n;continue}if((m|0)>=0)break f;if((S(b,p)|0)>=(S(m,d)|0))break;else f=n}}while(0);g=(x|0)==0;j=g?f:j;h=g?l:h;o=g?z:f;d=g?y:l;x=x+1|0;if((x|0)==2)break;else w=g?-1:w}c[d+4>>2]=o;c[o>>2]=d;c[h>>2]=j;c[j+4>>2]=h;if((c[z+88>>2]|0)<(c[y+88>>2]|0))c[e>>2]=z;if((c[k+88>>2]|0)>=(c[A+88>>2]|0))c[e+4>>2]=k;c[e+12>>2]=c[K+96+12>>2];g=h;F=j;s=c[j+88>>2]|0;n=c[h+88>>2]|0;t=c[j+92>>2]|0;u=c[h+92>>2]|0;v=c[j+96>>2]|0;o=c[h+96>>2]|0;w=((t-u|0)<0)<<31>>31;x=0-(s-n)|0;y=Ds(0,0,x|0,((x|0)<0)<<31>>31|0)|0;y=rr(v-o|0,((v-o|0)<0)<<31>>31|0,y|0,D|0)|0;z=D;A=rr(v-o|0,((v-o|0)<0)<<31>>31|0,t-u|0,w|0)|0;B=D;p=rr(s-n|0,((s-n|0)<0)<<31>>31|0,x|0,((x|0)<0)<<31>>31|0)|0;E=D;C=rr(t-u|0,w|0,t-u|0,w|0)|0;C=Ds(p|0,E|0,C|0,D|0)|0;E=D;p=c[h+8>>2]|0;c[K+120>>2]=0;if(!p)p=0;else{q=Ds(0,0,t-u|0,w|0)|0;r=D;d=p;f=0;while(1){m=c[d+12>>2]|0;k=c[m+88>>2]|0;l=c[m+92>>2]|0;m=c[m+96>>2]|0;b=rr(l-u|0,((l-u|0)<0)<<31>>31|0,x|0,((x|0)<0)<<31>>31|0)|0;G=D;e=rr(k-n|0,((k-n|0)<0)<<31>>31|0,q|0,r|0)|0;i:do if((b|0)==(e|0)&(G|0)==(D|0)?(e=rr(k-n|0,((k-n|0)<0)<<31>>31|0,y|0,z|0)|0,b=D,G=rr(l-u|0,((l-u|0)<0)<<31>>31|0,A|0,B|0)|0,b=Ct(G|0,D|0,e|0,b|0)|0,e=D,G=rr(m-o|0,((m-o|0)<0)<<31>>31|0,C|0,E|0)|0,G=Ct(b|0,e|0,G|0,D|0)|0,e=D,(e|0)>0|(e|0)==0&G>>>0>0):0){do if(f|0){b=(c[f+4>>2]|0)==(d|0);if((c[f>>2]|0)!=(d|0))if(b)break;else break i;if(!b)break i;e=c[f+12>>2]|0;L=c[(c[d+8>>2]|0)+12>>2]|0;G=c[L+88>>2]|0;b=c[L+92>>2]|0;L=c[L+96>>2]|0;M=(c[e+96>>2]|0)-L|0;b=(S(m-L|0,(c[e+92>>2]|0)-b|0)|0)-(S(M,l-b|0)|0)|0;G=(S(M,k-G|0)|0)-(S(m-L|0,(c[e+88>>2]|0)-G|0)|0)|0;b=rr(b|0,((b|0)<0)<<31>>31|0,t-u|0,w|0)|0;e=D;G=rr(G|0,((G|0)<0)<<31>>31|0,x|0,((x|0)<0)<<31>>31|0)|0;G=Ct(b|0,e|0,G|0,D|0)|0;e=D;if((e|0)>0|(e|0)==0&G>>>0>0)break i}while(0);c[K+120>>2]=d;f=d}while(0);d=c[d>>2]|0;if((d|0)==(p|0)){p=f;break}}}d=c[j+8>>2]|0;c[K+72>>2]=0;if(!d)f=0;else{n=Ds(0,0,t-u|0,w|0)|0;o=D;b=d;f=0;do{m=c[b+12>>2]|0;k=c[m+88>>2]|0;l=c[m+92>>2]|0;m=c[m+96>>2]|0;G=rr(l-t|0,((l-t|0)<0)<<31>>31|0,x|0,((x|0)<0)<<31>>31|0)|0;M=D;L=rr(k-s|0,((k-s|0)<0)<<31>>31|0,n|0,o|0)|0;do if((G|0)==(L|0)&(M|0)==(D|0)?(L=rr(k-s|0,((k-s|0)<0)<<31>>31|0,y|0,z|0)|0,G=D,M=rr(l-t|0,((l-t|0)<0)<<31>>31|0,A|0,B|0)|0,G=Ct(M|0,D|0,L|0,G|0)|0,L=D,M=rr(m-v|0,((m-v|0)<0)<<31>>31|0,C|0,E|0)|0,M=Ct(G|0,L|0,M|0,D|0)|0,L=D,(L|0)>0|(L|0)==0&M>>>0>0):0){if(f|0){if((c[f>>2]|0)!=(b|0))break;if((c[f+4>>2]|0)==(b|0)?(L=c[f+12>>2]|0,e=c[(c[b+8>>2]|0)+12>>2]|0,M=c[e+88>>2]|0,G=c[e+92>>2]|0,e=c[e+96>>2]|0,r=(c[L+96>>2]|0)-e|0,G=(S(m-e|0,(c[L+92>>2]|0)-G|0)|0)-(S(r,l-G|0)|0)|0,M=(S(r,k-M|0)|0)-(S(m-e|0,(c[L+88>>2]|0)-M|0)|0)|0,G=rr(G|0,((G|0)<0)<<31>>31|0,t-u|0,w|0)|0,L=D,M=rr(M|0,((M|0)<0)<<31>>31|0,x|0,((x|0)<0)<<31>>31|0)|0,M=Ct(G|0,L|0,M|0,D|0)|0,L=D,!((L|0)>0|(L|0)==0&M>>>0>0)):0)break}c[K+72>>2]=b;f=b}while(0);b=c[b>>2]|0}while((b|0)!=(d|0))}if((p|0)!=0|(f|0)!=0){mc(a,h,j,K+120|0,K+72|0);f=c[K+120>>2]|0;if(f){h=c[f+12>>2]|0;g=h}f=c[K+72>>2]|0;if(!f)f=F;else{j=c[f+12>>2]|0;f=j}}else f=F;n=f;o=c[j+88>>2]|0;p=(c[j+96>>2]|0)+1|0;q=c[j+92>>2]|0}l=0;f=0;k=0;A=0;G=1;b=0;F=0;d=0;C=0;E=p;z=j;y=h;while(1){B=c[y+88>>2]|0;w=(c[z+88>>2]|0)-B|0;M=c[y+92>>2]|0;e=(c[z+92>>2]|0)-M|0;v=c[y+96>>2]|0;t=(c[z+96>>2]|0)-v|0;c[K+120>>2]=w;c[K+120+4>>2]=e;c[K+120+8>>2]=t;c[K+120+12>>2]=-1;B=o-B|0;M=q-M|0;v=E-v|0;u=(S(t,M)|0)-(S(e,v)|0)|0;v=(S(w,v)|0)-(S(t,B)|0)|0;M=(S(e,B)|0)-(S(w,M)|0)|0;c[K+72>>2]=u;c[K+72+4>>2]=((u|0)<0)<<31>>31;c[K+72+8>>2]=v;c[K+72+8+4>>2]=((v|0)<0)<<31>>31;c[K+72+16>>2]=M;c[K+72+16+4>>2]=((M|0)<0)<<31>>31;B=rr(e|0,((e|0)<0)<<31>>31|0,M|0,((M|0)<0)<<31>>31|0)|0;L=D;x=rr(t|0,((t|0)<0)<<31>>31|0,v|0,((v|0)<0)<<31>>31|0)|0;x=Ds(B|0,L|0,x|0,D|0)|0;L=D;t=rr(u|0,((u|0)<0)<<31>>31|0,t|0,((t|0)<0)<<31>>31|0)|0;B=D;M=rr(w|0,((w|0)<0)<<31>>31|0,M|0,((M|0)<0)<<31>>31|0)|0;M=Ds(t|0,B|0,M|0,D|0)|0;B=D;v=rr(w|0,((w|0)<0)<<31>>31|0,v|0,((v|0)<0)<<31>>31|0)|0;w=D;e=rr(u|0,((u|0)<0)<<31>>31|0,e|0,((e|0)<0)<<31>>31|0)|0;e=Ds(v|0,w|0,e|0,D|0)|0;c[K+48>>2]=x;c[K+48+4>>2]=L;c[K+48+8>>2]=M;c[K+48+8+4>>2]=B;c[K+48+16>>2]=e;c[K+48+16+4>>2]=D;c[K+24>>2]=0;c[K+24+4>>2]=0;c[K+24+8>>2]=0;c[K+24+12>>2]=0;c[K+24+16>>2]=0;e=rd(a,0,y,K+120|0,K+72|0,K+48|0,K+24|0)|0;c[K>>2]=0;c[K+4>>2]=0;c[K+8>>2]=0;c[K+12>>2]=0;c[K+16>>2]=0;B=rd(a,1,z,K+120|0,K+72|0,K+48|0,K)|0;do if((e|0)!=0|(B|0)!=0){m=e|0?-1:1;do if((e|0)!=0&(B|0)!=0){x=c[K+24+16>>2]|0;m=c[K+16>>2]|0;if((x|0)!=(m|0)){w=x-m|0;break}if(!x)w=0;else{M=c[K+24>>2]|0;v=c[K+24+4>>2]|0;r=c[K+8>>2]|0;N=c[K+8+4>>2]|0;p=rr(r|0,0,M|0,0)|0;m=D;M=rr(N|0,0,M|0,0)|0;L=D;r=rr(r|0,0,v|0,0)|0;s=D;v=rr(N|0,0,v|0,0)|0;N=D;r=Ct(M|0,0,r|0,0)|0;M=D;N=Ct(L|0,0,v|0,N|0)|0;s=Ct(N|0,D|0,s|0,0)|0;M=Ct(s|0,D|0,M|0,0)|0;s=D;m=Ct(0,r|0,p|0,m|0)|0;p=D;r=Ct(M|0,s|0,(p>>>0<r>>>0|(p|0)==(r|0)&m>>>0<0)&1|0,0)|0;s=D;M=c[K+24+8>>2]|0;N=c[K+24+8+4>>2]|0;v=c[K>>2]|0;L=c[K+4>>2]|0;u=rr(v|0,0,M|0,0)|0;t=D;M=rr(L|0,0,M|0,0)|0;O=D;v=rr(v|0,0,N|0,0)|0;w=D;N=rr(L|0,0,N|0,0)|0;L=D;v=Ct(M|0,0,v|0,0)|0;M=D;L=Ct(O|0,0,N|0,L|0)|0;w=Ct(L|0,D|0,w|0,0)|0;M=Ct(w|0,D|0,M|0,0)|0;w=D;t=Ct(0,v|0,u|0,t|0)|0;u=D;v=Ct(M|0,w|0,(u>>>0<v>>>0|(u|0)==(v|0)&t>>>0<0)&1|0,0)|0;w=D;if(!(s>>>0<w>>>0|(s|0)==(w|0)&r>>>0<v>>>0))if(!(s>>>0>w>>>0|(s|0)==(w|0)&r>>>0>v>>>0))if(p>>>0<u>>>0|(p|0)==(u|0)&m>>>0<t>>>0)m=-1;else m=(p>>>0>u>>>0|(p|0)==(u|0)&m>>>0>t>>>0)&1;else m=1;else m=-1;w=S(m,x)|0}}else w=m;while(0);do if(!G)if((w|0)>-1)if((c[K+16>>2]|0)<0&((c[K+8>>2]|0)==0?(c[K+8+4>>2]|0)==0:0)){p=A;u=C;x=k;t=d;break}else{H=135;break}else if((c[K+24+16>>2]|0)<0&((c[K+24+8>>2]|0)==0?(c[K+24+8+4>>2]|0)==0:0)){p=A;u=C;x=k;t=d;break}else{H=135;break}else H=135;while(0);if((H|0)==135){H=0;p=Wf(a,y,z)|0;if(!A)k=p;else c[A+4>>2]=p;c[p>>2]=A;m=c[p+8>>2]|0;if(!C)d=m;else c[C>>2]=m;c[m+4>>2]=C;u=m;x=k;t=d}c[K+116>>2]=e;c[K+112>>2]=B;if(!w){mc(a,g,n,K+116|0,K+112|0);d=c[K+112>>2]|0}else d=B;if((w|0)>-1&(d|0)!=0){r=(b|0)!=0;if(r?(I=c[b>>2]|0,(I|0)!=(B|0)):0){o=I;do{q=o;o=c[o>>2]|0;s=c[q+8>>2]|0;m=c[s+12>>2]|0;if((o|0)==(q|0))k=0;else{c[o+4>>2]=c[q+4>>2];c[c[q+4>>2]>>2]=o;k=o}c[m+8>>2]=k;k=c[s>>2]|0;m=c[q+12>>2]|0;if((k|0)==(s|0))k=0;else{c[k+4>>2]=c[s+4>>2];c[c[s+4>>2]>>2]=k}c[m+8>>2]=k;c[q+4>>2]=0;c[q+4+4>>2]=0;c[q+4+8>>2]=0;c[q+4+12>>2]=0;c[q>>2]=c[a+56>>2];c[a+56>>2]=q;c[s+4>>2]=0;c[s+4+4>>2]=0;c[s+4+8>>2]=0;c[s+4+12>>2]=0;c[s>>2]=c[a+56>>2];c[a+56>>2]=s;c[a+116>>2]=(c[a+116>>2]|0)+-1}while((o|0)!=(B|0))}if(!u){k=r?F:B;m=t}else{if(r){c[b>>2]=t;k=F;m=B+4|0}else{b=c[B+4>>2]|0;c[b>>2]=t;k=t;m=B+4|0}c[t+4>>2]=b;c[u>>2]=B;c[m>>2]=u;m=0;d=c[K+112>>2]|0}q=n;b=c[d+8>>2]|0;v=k;u=0;B=m;A=c[d+12>>2]|0;o=c[q+88>>2]|0;d=c[q+96>>2]|0;q=c[q+92>>2]|0}else{v=F;B=t;A=n;d=E}m=c[K+116>>2]|0;if((w|0)<1&(m|0)!=0){q=(l|0)!=0;if(q?(J=c[l+4>>2]|0,(J|0)!=(e|0)):0){n=J;do{r=n+4|0;o=n;n=c[r>>2]|0;k=c[o>>2]|0;s=c[o+8>>2]|0;d=c[s+12>>2]|0;if((k|0)==(o|0))k=0;else{c[k+4>>2]=n;c[c[r>>2]>>2]=k}c[d+8>>2]=k;k=c[s>>2]|0;d=c[o+12>>2]|0;if((k|0)==(s|0))k=0;else{c[k+4>>2]=c[s+4>>2];c[c[s+4>>2]>>2]=k}c[d+8>>2]=k;c[r>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[o>>2]=c[a+56>>2];c[a+56>>2]=o;c[s+4>>2]=0;c[s+4+4>>2]=0;c[s+4+8>>2]=0;c[s+4+12>>2]=0;c[s>>2]=c[a+56>>2];c[a+56>>2]=s;c[a+116>>2]=(c[a+116>>2]|0)+-1}while((n|0)!=(e|0))}if(!p){f=q?f:e;k=x}else{if(q){c[l+4>>2]=x;k=e}else{l=c[e>>2]|0;c[l+4>>2]=x;f=x;k=e}c[x>>2]=l;c[k>>2]=p;c[p+4>>2]=e;k=0;m=c[K+116>>2]|0}z=g;l=c[m+8>>2]|0;p=0;o=c[z+88>>2]|0;g=c[m+12>>2]|0;y=c[z+96>>2]|0;z=c[z+92>>2]|0}else{k=x;y=d;z=q}if((g|0)==(h|0)&(A|0)==(j|0)){if(l){t=l+4|0;m=c[t>>2]|0;if((m|0)!=(f|0))do{r=m+4|0;q=m;m=c[r>>2]|0;d=c[q>>2]|0;s=c[q+8>>2]|0;n=c[s+12>>2]|0;if((d|0)==(q|0))d=0;else{c[d+4>>2]=m;c[c[r>>2]>>2]=d}c[n+8>>2]=d;d=c[s>>2]|0;n=c[q+12>>2]|0;if((d|0)==(s|0))d=0;else{c[d+4>>2]=c[s+4>>2];c[c[s+4>>2]>>2]=d}c[n+8>>2]=d;c[r>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[q>>2]=c[a+56>>2];c[a+56>>2]=q;c[s+4>>2]=0;c[s+4+4>>2]=0;c[s+4+8>>2]=0;c[s+4+12>>2]=0;c[s>>2]=c[a+56>>2];c[a+56>>2]=s;c[a+116>>2]=(c[a+116>>2]|0)+-1}while((m|0)!=(f|0));if(p|0){c[k>>2]=l;c[t>>2]=k;c[f>>2]=p;c[p+4>>2]=f}}else{c[k>>2]=p;c[p+4>>2]=k;c[g+8>>2]=p}if(!b){c[u>>2]=B;c[B+4>>2]=u;c[j+8>>2]=u;x=0;w=G;b=0;t=u;d=B;s=A;r=g;m=y;q=z;break}m=c[b>>2]|0;if((m|0)!=(v|0))do{q=m;m=c[m>>2]|0;r=c[q+8>>2]|0;n=c[r+12>>2]|0;if((m|0)==(q|0))d=0;else{c[m+4>>2]=c[q+4>>2];c[c[q+4>>2]>>2]=m;d=m}c[n+8>>2]=d;d=c[r>>2]|0;n=c[q+12>>2]|0;if((d|0)==(r|0))d=0;else{c[d+4>>2]=c[r+4>>2];c[c[r+4>>2]>>2]=d}c[n+8>>2]=d;c[q+4>>2]=0;c[q+4+4>>2]=0;c[q+4+8>>2]=0;c[q+4+12>>2]=0;c[q>>2]=c[a+56>>2];c[a+56>>2]=q;c[r+4>>2]=0;c[r+4+4>>2]=0;c[r+4+8>>2]=0;c[r+4+12>>2]=0;c[r>>2]=c[a+56>>2];c[a+56>>2]=r;c[a+116>>2]=(c[a+116>>2]|0)+-1}while((m|0)!=(v|0));if(!u){x=0;w=G;t=0;d=B;s=A;r=g;m=y;q=z}else{c[b>>2]=B;c[B+4>>2]=b;c[u>>2]=v;c[v+4>>2]=u;x=0;w=G;t=u;d=B;s=A;r=g;m=y;q=z}}else{x=1;w=0;t=u;d=B;s=A;r=g;m=y;q=z}}else{x=Wf(a,y,z)|0;c[x>>2]=x;c[x+4>>2]=x;c[y+8>>2]=x;x=c[x+8>>2]|0;c[x>>2]=x;c[x+4>>2]=x;c[z+8>>2]=x;x=0;w=G;p=A;v=F;t=C;s=n;r=g;m=E}while(0);if(!x)break c;A=p;G=w;F=v;C=t;n=s;g=r;E=m;z=s;y=r}}while(0);i=K;return}}while(0);c[f+8>>2]=0;c[f>>2]=f;c[f+4>>2]=f;c[e>>2]=f;c[e+4>>2]=f;c[e+8>>2]=f;c[e+12>>2]=f;i=K;return}function fc(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,m=0,n=0,o=0.0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0,Q=0,R=0,S=0.0,T=0.0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0;ja=i;i=i+64|0;if((e|0)<=0){i=ja;return}$=ja+16+4|0;aa=ja+16+8|0;Y=0;do{ba=c[d+(Y<<2)>>2]|0;ca=c[ba+772>>2]|0;da=c[ba+776>>2]|0;ea=Oj(b,ca,+g[f+12>>2])|0;fa=Oj(b,da,+g[f+12>>2])|0;ga=c[b+16>>2]|0;O=+g[ga+(ea*244|0)+128>>2];S=+g[ga+(ea*244|0)+132>>2];T=+g[ga+(ea*244|0)+136>>2];if(!(O*O+S*S+T*T<1.4210854715202004e-014?(O=+g[ga+(fa*244|0)+128>>2],S=+g[ga+(fa*244|0)+132>>2],T=+g[ga+(fa*244|0)+136>>2],O*O+S*S+T*T<1.4210854715202004e-014):0))ia=5;if((ia|0)==5?(ia=0,ha=c[ba+780>>2]|0,(ha|0)>0):0){Z=0;h=ha;do{W=ba+4+(Z*192|0)|0;E=ba+4+(Z*192|0)+80|0;if(+g[E>>2]<=+g[ba+788>>2]){X=c[b+28>>2]|0;if((X|0)==(c[b+32>>2]|0)?(_=X|0?X<<1:1,(X|0)<(_|0)):0){if(!_){h=0;n=X}else{c[6324]=(c[6324]|0)+1;h=ic((_*152|3)+16|0)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}n=c[b+28>>2]|0}if((n|0)>0){m=0;do{Lm(h+(m*152|0)|0,(c[b+36>>2]|0)+(m*152|0)|0,152)|0;m=m+1|0}while((m|0)!=(n|0))}m=c[b+36>>2]|0;if(m|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[m+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=h;c[b+32>>2]=_;h=c[b+28>>2]|0}else h=X;c[b+28>>2]=h+1;V=c[b+36>>2]|0;c[V+(X*152|0)+144>>2]=ea;c[V+(X*152|0)+148>>2]=fa;c[V+(X*152|0)+132>>2]=W;y=+g[ba+4+(Z*192|0)+48>>2]-+g[ca+52>>2];z=+g[ba+4+(Z*192|0)+52>>2]-+g[ca+56>>2];x=+g[ba+4+(Z*192|0)+56>>2]-+g[ca+60>>2];g[ja+48>>2]=y;g[ja+48+4>>2]=z;g[ja+48+8>>2]=x;g[ja+48+12>>2]=0.0;B=+g[ba+4+(Z*192|0)+32>>2]-+g[da+52>>2];D=+g[ba+4+(Z*192|0)+36>>2]-+g[da+56>>2];A=+g[ba+4+(Z*192|0)+40>>2]-+g[da+60>>2];g[ja+32>>2]=B;g[ja+32+4>>2]=D;g[ja+32+8>>2]=A;g[ja+32+12>>2]=0.0;if(!(c[ga+(ea*244|0)+240>>2]|0)){m=0;p=0;r=0}else{S=+g[ga+(ea*244|0)+192>>2]+ +g[ga+(ea*244|0)+224>>2];T=+g[ga+(ea*244|0)+196>>2]+ +g[ga+(ea*244|0)+228>>2];O=+g[ga+(ea*244|0)+200>>2]+ +g[ga+(ea*244|0)+232>>2];m=(g[l>>2]=+g[ga+(ea*244|0)+176>>2]+ +g[ga+(ea*244|0)+208>>2]+(T*x-O*z),c[l>>2]|0);p=(g[l>>2]=+g[ga+(ea*244|0)+180>>2]+ +g[ga+(ea*244|0)+212>>2]+(O*y-S*x),c[l>>2]|0);r=(g[l>>2]=+g[ga+(ea*244|0)+184>>2]+ +g[ga+(ea*244|0)+216>>2]+(S*z-T*y),c[l>>2]|0)}if(!(c[ga+(fa*244|0)+240>>2]|0)){h=0;n=0;q=0}else{S=+g[ga+(fa*244|0)+192>>2]+ +g[ga+(fa*244|0)+224>>2];T=+g[ga+(fa*244|0)+196>>2]+ +g[ga+(fa*244|0)+228>>2];O=+g[ga+(fa*244|0)+200>>2]+ +g[ga+(fa*244|0)+232>>2];h=(g[l>>2]=+g[ga+(fa*244|0)+176>>2]+ +g[ga+(fa*244|0)+208>>2]+(T*A-O*D),c[l>>2]|0);n=(g[l>>2]=+g[ga+(fa*244|0)+180>>2]+ +g[ga+(fa*244|0)+212>>2]+(O*B-S*A),c[l>>2]|0);q=(g[l>>2]=+g[ga+(fa*244|0)+184>>2]+ +g[ga+(fa*244|0)+216>>2]+(S*D-T*B),c[l>>2]|0)}S=(c[l>>2]=m,+g[l>>2]);S=S-(c[l>>2]=h,+g[l>>2]);O=(c[l>>2]=p,+g[l>>2]);O=O-(c[l>>2]=n,+g[l>>2]);K=(c[l>>2]=r,+g[l>>2]);K=K-(c[l>>2]=q,+g[l>>2]);P=ba+4+(Z*192|0)+64|0;L=+g[P>>2];Q=ba+4+(Z*192|0)+68|0;M=+g[Q>>2];R=ba+4+(Z*192|0)+72|0;N=+g[R>>2];r=c[b+16>>2]|0;p=c[r+(ea*244|0)+240>>2]|0;q=c[r+(fa*244|0)+240>>2]|0;T=+g[f+28>>2];J=+g[f+12>>2];j=+g[f+40>>2];k=+g[f+36>>2];U=ba+4+(Z*192|0)+120|0;h=c[U>>2]|0;if(!(h&6))if(!(h&8))H=k;else{H=J*+g[ba+4+(Z*192|0)+144>>2];j=H+ +g[ba+4+(Z*192|0)+148>>2];j=j<1.1920928955078125e-007?1.1920928955078125e-007:j;H=H/j;j=1.0/j}else{j=(h&2|0)==0?j:+g[ba+4+(Z*192|0)+144>>2];if(!(h&4))H=k;else H=+g[ba+4+(Z*192|0)+148>>2]}I=1.0/J*j;if(p|0){n=(g[l>>2]=((z*N-x*M)*+g[p+304>>2]+(x*L-N*y)*+g[p+308>>2]+(M*y-z*L)*+g[p+312>>2])*+g[p+584>>2],c[l>>2]|0);h=(g[l>>2]=((z*N-x*M)*+g[p+320>>2]+(x*L-N*y)*+g[p+324>>2]+(M*y-z*L)*+g[p+328>>2])*+g[p+588>>2],c[l>>2]|0);m=(g[l>>2]=((z*N-x*M)*+g[p+336>>2]+(x*L-N*y)*+g[p+340>>2]+(M*y-z*L)*+g[p+344>>2])*+g[p+592>>2],c[l>>2]|0)}else{n=0;h=0;m=0}c[V+(X*152|0)+64>>2]=n;c[V+(X*152|0)+68>>2]=h;c[V+(X*152|0)+72>>2]=m;g[V+(X*152|0)+76>>2]=0.0;u=+g[R>>2];v=+g[Q>>2];w=+g[P>>2];t=(c[l>>2]=h,+g[l>>2]);s=(c[l>>2]=m,+g[l>>2]);k=(c[l>>2]=n,+g[l>>2]);if(q|0){h=(g[l>>2]=(+g[q+304>>2]*-(D*u-A*v)+ +g[q+308>>2]*-(A*w-u*B)+ +g[q+312>>2]*-(v*B-D*w))*+g[q+584>>2],c[l>>2]|0);m=(g[l>>2]=(+g[q+320>>2]*-(D*u-A*v)+ +g[q+324>>2]*-(A*w-u*B)+ +g[q+328>>2]*-(v*B-D*w))*+g[q+588>>2],c[l>>2]|0);n=(g[l>>2]=(+g[q+336>>2]*-(D*u-A*v)+ +g[q+340>>2]*-(A*w-u*B)+ +g[q+344>>2]*-(v*B-D*w))*+g[q+592>>2],c[l>>2]|0)}else{h=0;m=0;n=0}c[V+(X*152|0)+80>>2]=h;c[V+(X*152|0)+84>>2]=m;c[V+(X*152|0)+88>>2]=n;g[V+(X*152|0)+92>>2]=0.0;o=(c[l>>2]=h,+g[l>>2]);j=(c[l>>2]=m,+g[l>>2]);if(p|0)k=+g[p+384>>2]+((t*x-s*z)*+g[P>>2]+(s*y-x*k)*+g[Q>>2]+(z*k-t*y)*+g[R>>2]);else k=0.0;if(q|0){C=-(c[l>>2]=n,+g[l>>2]);j=+g[q+384>>2]+((A*-j-D*C)*+g[P>>2]+(B*C-A*-o)*+g[Q>>2]+(D*-o-B*-j)*+g[R>>2])}else j=0.0;g[V+(X*152|0)+108>>2]=T/(I+(k+j));if(p|0){c[V+(X*152|0)+16>>2]=c[P>>2];c[V+(X*152|0)+16+4>>2]=c[P+4>>2];c[V+(X*152|0)+16+8>>2]=c[P+8>>2];c[V+(X*152|0)+16+12>>2]=c[P+12>>2];g[V+(X*152|0)>>2]=z*N-x*M;g[V+(X*152|0)+4>>2]=x*L-N*y;g[V+(X*152|0)+8>>2]=M*y-z*L;g[V+(X*152|0)+12>>2]=0.0}else{c[V+(X*152|0)>>2]=0;c[V+(X*152|0)+4>>2]=0;c[V+(X*152|0)+8>>2]=0;c[V+(X*152|0)+12>>2]=0;c[V+(X*152|0)+16>>2]=0;c[V+(X*152|0)+20>>2]=0;c[V+(X*152|0)+24>>2]=0;c[V+(X*152|0)+28>>2]=0}if(q|0){t=-+g[Q>>2];C=-+g[R>>2];g[V+(X*152|0)+48>>2]=-+g[P>>2];g[V+(X*152|0)+52>>2]=t;g[V+(X*152|0)+56>>2]=C;g[V+(X*152|0)+60>>2]=0.0;g[V+(X*152|0)+32>>2]=-(D*u-A*v);g[V+(X*152|0)+36>>2]=-(A*w-u*B);g[V+(X*152|0)+40>>2]=-(v*B-D*w);g[V+(X*152|0)+44>>2]=0.0}else{c[V+(X*152|0)+32>>2]=0;c[V+(X*152|0)+32+4>>2]=0;c[V+(X*152|0)+32+8>>2]=0;c[V+(X*152|0)+32+12>>2]=0;c[V+(X*152|0)+32+16>>2]=0;c[V+(X*152|0)+32+20>>2]=0;c[V+(X*152|0)+32+24>>2]=0;c[V+(X*152|0)+32+28>>2]=0}C=+g[E>>2]+ +g[f+56>>2];if(p|0){s=+g[p+372>>2];t=+g[p+376>>2];w=+g[p+368>>2];u=s*x-t*z+ +g[p+352>>2];t=+g[p+356>>2]+(t*y-x*w);s=z*w-s*y+ +g[p+360>>2]}else{u=0.0;t=0.0;s=0.0}if(q|0){j=+g[q+372>>2];k=+g[q+376>>2];z=+g[q+368>>2];o=j*A-k*D+ +g[q+352>>2];k=+g[q+356>>2]+(k*B-A*z);j=D*z-j*B+ +g[q+360>>2]}else{o=0.0;k=0.0;j=0.0}B=(u-o)*+g[P>>2]+(t-k)*+g[Q>>2]+(s-j)*+g[R>>2];c[V+(X*152|0)+104>>2]=c[ba+4+(Z*192|0)+84>>2];B=-(B*+g[ba+4+(Z*192|0)+96>>2]);B=B<=0.0?0.0:B;h=c[f+64>>2]|0;do if(!(h&4))g[V+(X*152|0)+100>>2]=0.0;else{j=+g[ba+4+(Z*192|0)+124>>2]*+g[f+60>>2];g[V+(X*152|0)+100>>2]=j;do if(p|0){if(!(c[r+(ea*244|0)+240>>2]|0))break;D=j*+g[V+(X*152|0)+20>>2]*+g[r+(ea*244|0)+132>>2]*+g[p+392>>2]*+g[r+(ea*244|0)+116>>2];A=j*+g[V+(X*152|0)+24>>2]*+g[r+(ea*244|0)+136>>2]*+g[p+396>>2]*+g[r+(ea*244|0)+120>>2];g[r+(ea*244|0)+64>>2]=+g[r+(ea*244|0)+112>>2]*j*+g[V+(X*152|0)+16>>2]*+g[r+(ea*244|0)+128>>2]*+g[p+388>>2]+ +g[r+(ea*244|0)+64>>2];g[r+(ea*244|0)+68>>2]=D+ +g[r+(ea*244|0)+68>>2];g[r+(ea*244|0)+72>>2]=A+ +g[r+(ea*244|0)+72>>2];A=j*+g[r+(ea*244|0)+100>>2]*+g[V+(X*152|0)+68>>2];D=j*+g[r+(ea*244|0)+104>>2]*+g[V+(X*152|0)+72>>2];g[r+(ea*244|0)+80>>2]=j*+g[r+(ea*244|0)+96>>2]*+g[V+(X*152|0)+64>>2]+ +g[r+(ea*244|0)+80>>2];g[r+(ea*244|0)+84>>2]=A+ +g[r+(ea*244|0)+84>>2];g[r+(ea*244|0)+88>>2]=D+ +g[r+(ea*244|0)+88>>2]}while(0);if(!q)break;j=+g[V+(X*152|0)+100>>2];if(!(c[r+(fa*244|0)+240>>2]|0))break;D=+g[V+(X*152|0)+88>>2];A=+g[V+(X*152|0)+84>>2];z=+g[V+(X*152|0)+80>>2];x=j*+g[V+(X*152|0)+52>>2]*+g[r+(fa*244|0)+132>>2]*+g[q+392>>2]*+g[r+(fa*244|0)+116>>2];y=j*+g[V+(X*152|0)+56>>2]*+g[r+(fa*244|0)+136>>2]*+g[q+396>>2]*+g[r+(fa*244|0)+120>>2];g[r+(fa*244|0)+64>>2]=+g[r+(fa*244|0)+112>>2]*j*+g[V+(X*152|0)+48>>2]*+g[r+(fa*244|0)+128>>2]*+g[q+388>>2]+ +g[r+(fa*244|0)+64>>2];g[r+(fa*244|0)+68>>2]=x+ +g[r+(fa*244|0)+68>>2];g[r+(fa*244|0)+72>>2]=y+ +g[r+(fa*244|0)+72>>2];A=A*+g[r+(fa*244|0)+100>>2]*-j;D=D*+g[r+(fa*244|0)+104>>2]*-j;g[r+(fa*244|0)+80>>2]=+g[r+(fa*244|0)+80>>2]-z*+g[r+(fa*244|0)+96>>2]*-j;g[r+(fa*244|0)+84>>2]=+g[r+(fa*244|0)+84>>2]-A;g[r+(fa*244|0)+88>>2]=+g[r+(fa*244|0)+88>>2]-D}while(0);g[V+(X*152|0)+96>>2]=0.0;if(!(c[r+(ea*244|0)+240>>2]|0)){o=0.0;s=0.0;v=0.0;w=0.0;z=0.0;A=0.0}else{o=+g[r+(ea*244|0)+224>>2];s=+g[r+(ea*244|0)+208>>2];v=+g[r+(ea*244|0)+228>>2];w=+g[r+(ea*244|0)+212>>2];z=+g[r+(ea*244|0)+232>>2];A=+g[r+(ea*244|0)+216>>2]}if(!(c[r+(fa*244|0)+240>>2]|0)){j=0.0;k=0.0;t=0.0;u=0.0;x=0.0;y=0.0}else{j=+g[r+(fa*244|0)+224>>2];k=+g[r+(fa*244|0)+208>>2];t=+g[r+(fa*244|0)+228>>2];u=+g[r+(fa*244|0)+212>>2];x=+g[r+(fa*244|0)+232>>2];y=+g[r+(fa*244|0)+216>>2]}j=B-((s+ +g[r+(ea*244|0)+176>>2])*+g[V+(X*152|0)+16>>2]+(w+ +g[r+(ea*244|0)+180>>2])*+g[V+(X*152|0)+20>>2]+(A+ +g[r+(ea*244|0)+184>>2])*+g[V+(X*152|0)+24>>2]+((o+ +g[r+(ea*244|0)+192>>2])*+g[V+(X*152|0)>>2]+(v+ +g[r+(ea*244|0)+196>>2])*+g[V+(X*152|0)+4>>2]+(z+ +g[r+(ea*244|0)+200>>2])*+g[V+(X*152|0)+8>>2])+((k+ +g[r+(fa*244|0)+176>>2])*+g[V+(X*152|0)+48>>2]+(u+ +g[r+(fa*244|0)+180>>2])*+g[V+(X*152|0)+52>>2]+(y+ +g[r+(fa*244|0)+184>>2])*+g[V+(X*152|0)+56>>2]+((j+ +g[r+(fa*244|0)+192>>2])*+g[V+(X*152|0)+32>>2]+(t+ +g[r+(fa*244|0)+196>>2])*+g[V+(X*152|0)+36>>2]+(x+ +g[r+(fa*244|0)+200>>2])*+g[V+(X*152|0)+40>>2])));if(C>0.0){s=j-1.0/J*C;j=0.0}else{s=j;j=-(1.0/J*H*C)}o=+g[V+(X*152|0)+108>>2];k=j*o;j=s*o;if((c[f+44>>2]|0)==0?1:C>+g[f+48>>2]){g[V+(X*152|0)+112>>2]=k+j;g[V+(X*152|0)+128>>2]=0.0}else{g[V+(X*152|0)+112>>2]=j;g[V+(X*152|0)+128>>2]=k}g[V+(X*152|0)+116>>2]=I*o;g[V+(X*152|0)+120>>2]=0.0;g[V+(X*152|0)+124>>2]=1.0e10;c[V+(X*152|0)+140>>2]=c[b+68>>2];n=ba+4+(Z*192|0)+88|0;if(+g[n>>2]>0.0){Ad(b,P,ea,fa,X,+g[ba+4+(Z*192|0)+92>>2]);j=+g[R>>2];if(+F(+j)>.7071067690849304){I=+g[Q>>2];H=1.0/+G(+(j*j+I*I));g[ja+16>>2]=0.0;g[$>>2]=-(H*j);g[aa>>2]=H*I;g[ja>>2]=(j*j+I*I)*H;J=+g[P>>2];g[ja+4>>2]=-(H*I*J);v=J*-(H*j);k=0.0;o=-(H*j);s=H*I;t=(j*j+I*I)*H;j=-(H*I*J)}else{t=+g[P>>2];I=+g[Q>>2];J=1.0/+G(+(t*t+I*I));g[ja+16>>2]=-(I*J);g[$>>2]=J*t;g[aa>>2]=0.0;g[ja>>2]=-(J*t*j);g[ja+4>>2]=j*-(I*J);v=(t*t+I*I)*J;k=-(I*J);o=J*t;s=0.0;t=-(J*t*j);j=j*-(I*J)}u=1.0/+G(+(k*k+o*o+s*s));w=k*u;g[ja+16>>2]=w;x=o*u;g[$>>2]=x;u=s*u;g[aa>>2]=u;J=1.0/+G(+(t*t+j*j+v*v));o=t*J;g[ja>>2]=o;k=j*J;g[ja+4>>2]=k;j=v*J;g[ja+8>>2]=j;h=(c[ca+180>>2]&2|0)==0;if(h){s=w;t=x}else{y=+g[ca+4>>2];A=+g[ca+20>>2];C=+g[ca+36>>2];z=+g[ca+8>>2];B=+g[ca+24>>2];H=+g[ca+40>>2];s=+g[ca+12>>2];t=+g[ca+28>>2];J=+g[ca+44>>2];D=(y*w+A*x+C*u)*+g[ca+164>>2];I=(w*z+x*B+u*H)*+g[ca+168>>2];u=(w*s+x*t+u*J)*+g[ca+172>>2];g[ja+16>>2]=y*D+z*I+s*u;g[$>>2]=A*D+B*I+t*u;g[aa>>2]=C*D+H*I+J*u;g[ja+16+12>>2]=0.0;s=y*D+z*I+s*u;t=A*D+B*I+t*u;u=C*D+H*I+J*u}m=(c[da+180>>2]&2|0)==0;if(!m){w=+g[da+4>>2];z=+g[da+20>>2];C=+g[da+36>>2];x=+g[da+8>>2];A=+g[da+24>>2];H=+g[da+40>>2];y=+g[da+12>>2];B=+g[da+28>>2];J=+g[da+44>>2];D=(w*s+z*t+C*u)*+g[da+164>>2];I=(s*x+t*A+u*H)*+g[da+168>>2];u=(s*y+t*B+u*J)*+g[da+172>>2];g[ja+16>>2]=w*D+x*I+y*u;g[$>>2]=z*D+A*I+B*u;g[aa>>2]=C*D+H*I+J*u;g[ja+16+12>>2]=0.0;s=w*D+x*I+y*u;t=z*D+A*I+B*u;u=C*D+H*I+J*u}if(!((ca|0)==0|h)){w=+g[ca+4>>2];z=+g[ca+20>>2];C=+g[ca+36>>2];x=+g[ca+8>>2];A=+g[ca+24>>2];H=+g[ca+40>>2];y=+g[ca+12>>2];B=+g[ca+28>>2];J=+g[ca+44>>2];D=(w*o+z*k+C*j)*+g[ca+164>>2];I=(o*x+k*A+j*H)*+g[ca+168>>2];j=(o*y+k*B+j*J)*+g[ca+172>>2];g[ja>>2]=w*D+x*I+y*j;g[ja+4>>2]=z*D+A*I+B*j;g[ja+8>>2]=C*D+H*I+J*j;g[ja+12>>2]=0.0;o=w*D+x*I+y*j;k=z*D+A*I+B*j;j=C*D+H*I+J*j}if(!((da|0)==0|m)){w=+g[da+4>>2];z=+g[da+20>>2];C=+g[da+36>>2];x=+g[da+8>>2];A=+g[da+24>>2];H=+g[da+40>>2];y=+g[da+12>>2];B=+g[da+28>>2];J=+g[da+44>>2];D=(w*o+z*k+C*j)*+g[da+164>>2];I=(o*x+k*A+j*H)*+g[da+168>>2];j=(o*y+k*B+j*J)*+g[da+172>>2];g[ja>>2]=w*D+x*I+y*j;g[ja+4>>2]=z*D+A*I+B*j;g[ja+8>>2]=C*D+H*I+J*j;g[ja+12>>2]=0.0;o=w*D+x*I+y*j;k=z*D+A*I+B*j;j=C*D+H*I+J*j}if(+G(+(s*s+t*t+u*u))>.001)Ad(b,ja+16|0,ea,fa,X,+g[n>>2]);if(+G(+(o*o+k*k+j*j))>.001)Ad(b,ja,ea,fa,X,+g[n>>2]);h=c[f+64>>2]|0}do if(!(h&32))ia=85;else{if(!(c[U>>2]&1)){ia=85;break}h=ba+4+(Z*192|0)+152|0;$c(b,ba+4+(Z*192|0)+160|0,ea,fa,X,W,ja+48|0,ja+32|0,T,+g[ba+4+(Z*192|0)+136>>2],+g[h>>2]);if(!(c[f+64>>2]&16))break;$c(b,ba+4+(Z*192|0)+176|0,ea,fa,X,W,ja+48|0,ja+32|0,T,+g[ba+4+(Z*192|0)+140>>2],+g[h>>2])}while(0);do if((ia|0)==85){ia=0;p=ba+4+(Z*192|0)+160|0;s=+g[P>>2];t=+g[Q>>2];u=+g[R>>2];k=S-(S*L+O*M+K*N)*s;o=O-(S*L+O*M+K*N)*t;j=K-(S*L+O*M+K*N)*u;g[ba+4+(Z*192|0)+160>>2]=k;h=ba+4+(Z*192|0)+164|0;g[h>>2]=o;n=ba+4+(Z*192|0)+168|0;g[n>>2]=j;g[ba+4+(Z*192|0)+172>>2]=0.0;if((c[f+64>>2]&64|0)==0?k*k+o*o+j*j>1.1920928955078125e-007:0){S=1.0/+G(+(k*k+o*o+j*j));g[p>>2]=k*S;g[h>>2]=S*o;g[n>>2]=S*j;ok(ca,p);ok(da,p);$c(b,p,ea,fa,X,W,ja+48|0,ja+32|0,T,0.0,0.0);if(!(c[f+64>>2]&16))break;U=ba+4+(Z*192|0)+176|0;N=+g[h>>2];K=+g[R>>2];J=+g[n>>2];L=+g[Q>>2];O=+g[P>>2];M=+g[p>>2];g[ba+4+(Z*192|0)+176>>2]=N*K-J*L;g[ba+4+(Z*192|0)+188>>2]=0.0;S=1.0/+G(+((N*K-J*L)*(N*K-J*L)+(J*O-K*M)*(J*O-K*M)+(L*M-N*O)*(L*M-N*O)));g[U>>2]=(N*K-J*L)*S;g[ba+4+(Z*192|0)+180>>2]=(J*O-K*M)*S;g[ba+4+(Z*192|0)+184>>2]=(L*M-N*O)*S;ok(ca,U);ok(da,U);$c(b,U,ea,fa,X,W,ja+48|0,ja+32|0,T,0.0,0.0);break}m=ba+4+(Z*192|0)+176|0;if(+F(+u)>.7071067690849304){j=1.0/+G(+(u*u+t*t));g[p>>2]=0.0;g[h>>2]=-(j*u);g[n>>2]=j*t;k=-(j*t*s);o=s*-(j*u);j=(u*u+t*t)*j}else{j=1.0/+G(+(s*s+t*t));g[p>>2]=-(t*j);g[h>>2]=j*s;g[n>>2]=0.0;k=u*-(t*j);o=(s*s+t*t)*j;j=-(j*s*u)}g[m>>2]=j;g[ba+4+(Z*192|0)+180>>2]=k;g[ba+4+(Z*192|0)+184>>2]=o;ok(ca,p);ok(da,p);$c(b,p,ea,fa,X,W,ja+48|0,ja+32|0,T,0.0,0.0);h=c[f+64>>2]|0;if(h&16){ok(ca,m);ok(da,m);$c(b,m,ea,fa,X,W,ja+48|0,ja+32|0,T,0.0,0.0);h=c[f+64>>2]|0}if((h&80|0)!=80)break;c[U>>2]=c[U>>2]|1}while(0);r=c[b+16>>2]|0;m=c[r+(ea*244|0)+240>>2]|0;n=c[r+(fa*244|0)+240>>2]|0;p=c[V+(X*152|0)+140>>2]|0;q=c[b+76>>2]|0;h=c[f+64>>2]|0;do if(!(h&4))g[q+(p*152|0)+100>>2]=0.0;else{j=+g[ba+4+(Z*192|0)+128>>2]*+g[f+60>>2];g[q+(p*152|0)+100>>2]=j;if(m|0){O=+g[m+384>>2];T=j*O*+g[q+(p*152|0)+20>>2]*+g[m+392>>2]*+g[r+(ea*244|0)+116>>2];S=j*O*+g[q+(p*152|0)+24>>2]*+g[m+396>>2]*+g[r+(ea*244|0)+120>>2];g[r+(ea*244|0)+64>>2]=+g[r+(ea*244|0)+112>>2]*j*O*+g[q+(p*152|0)+16>>2]*+g[m+388>>2]+ +g[r+(ea*244|0)+64>>2];g[r+(ea*244|0)+68>>2]=T+ +g[r+(ea*244|0)+68>>2];g[r+(ea*244|0)+72>>2]=S+ +g[r+(ea*244|0)+72>>2];S=j*+g[r+(ea*244|0)+100>>2]*+g[q+(p*152|0)+68>>2];T=j*+g[r+(ea*244|0)+104>>2]*+g[q+(p*152|0)+72>>2];g[r+(ea*244|0)+80>>2]=j*+g[r+(ea*244|0)+96>>2]*+g[q+(p*152|0)+64>>2]+ +g[r+(ea*244|0)+80>>2];g[r+(ea*244|0)+84>>2]=S+ +g[r+(ea*244|0)+84>>2];g[r+(ea*244|0)+88>>2]=T+ +g[r+(ea*244|0)+88>>2]}if(!n)break;j=+g[n+384>>2];k=+g[q+(p*152|0)+100>>2];if(!(c[r+(fa*244|0)+240>>2]|0))break;T=+g[q+(p*152|0)+88>>2];S=+g[q+(p*152|0)+84>>2];O=+g[q+(p*152|0)+80>>2];M=k*j*+g[q+(p*152|0)+52>>2]*+g[n+392>>2]*+g[r+(fa*244|0)+116>>2];N=k*j*+g[q+(p*152|0)+56>>2]*+g[n+396>>2]*+g[r+(fa*244|0)+120>>2];g[r+(fa*244|0)+64>>2]=+g[r+(fa*244|0)+112>>2]*k*j*+g[q+(p*152|0)+48>>2]*+g[n+388>>2]+ +g[r+(fa*244|0)+64>>2];g[r+(fa*244|0)+68>>2]=M+ +g[r+(fa*244|0)+68>>2];g[r+(fa*244|0)+72>>2]=N+ +g[r+(fa*244|0)+72>>2];S=S*+g[r+(fa*244|0)+100>>2]*-k;T=T*+g[r+(fa*244|0)+104>>2]*-k;g[r+(fa*244|0)+80>>2]=+g[r+(fa*244|0)+80>>2]-O*+g[r+(fa*244|0)+96>>2]*-k;g[r+(fa*244|0)+84>>2]=+g[r+(fa*244|0)+84>>2]-S;g[r+(fa*244|0)+88>>2]=+g[r+(fa*244|0)+88>>2]-T}while(0);do if(h&16|0){if(!(h&4)){g[q+((p+1|0)*152|0)+100>>2]=0.0;break}k=+g[ba+4+(Z*192|0)+132>>2]*+g[f+60>>2];g[q+((p+1|0)*152|0)+100>>2]=k;do if(m|0){j=+g[m+384>>2];if(!(c[r+(ea*244|0)+240>>2]|0))break;T=k*j*+g[q+((p+1|0)*152|0)+20>>2]*+g[r+(ea*244|0)+116>>2];S=k*j*+g[q+((p+1|0)*152|0)+24>>2]*+g[r+(ea*244|0)+120>>2];g[r+(ea*244|0)+64>>2]=+g[r+(ea*244|0)+112>>2]*k*j*+g[q+((p+1|0)*152|0)+16>>2]+ +g[r+(ea*244|0)+64>>2];g[r+(ea*244|0)+68>>2]=T+ +g[r+(ea*244|0)+68>>2];g[r+(ea*244|0)+72>>2]=S+ +g[r+(ea*244|0)+72>>2];S=k*+g[r+(ea*244|0)+100>>2]*+g[q+((p+1|0)*152|0)+68>>2];T=k*+g[r+(ea*244|0)+104>>2]*+g[q+((p+1|0)*152|0)+72>>2];g[r+(ea*244|0)+80>>2]=k*+g[r+(ea*244|0)+96>>2]*+g[q+((p+1|0)*152|0)+64>>2]+ +g[r+(ea*244|0)+80>>2];g[r+(ea*244|0)+84>>2]=S+ +g[r+(ea*244|0)+84>>2];g[r+(ea*244|0)+88>>2]=T+ +g[r+(ea*244|0)+88>>2]}while(0);if(!n)break;j=+g[n+384>>2];k=+g[q+((p+1|0)*152|0)+100>>2];if(!(c[r+(fa*244|0)+240>>2]|0))break;T=+g[q+((p+1|0)*152|0)+88>>2];S=+g[q+((p+1|0)*152|0)+84>>2];O=+g[q+((p+1|0)*152|0)+80>>2];M=k*j*+g[q+((p+1|0)*152|0)+52>>2]*+g[r+(fa*244|0)+116>>2];N=k*j*+g[q+((p+1|0)*152|0)+56>>2]*+g[r+(fa*244|0)+120>>2];g[r+(fa*244|0)+64>>2]=+g[r+(fa*244|0)+112>>2]*k*j*+g[q+((p+1|0)*152|0)+48>>2]+ +g[r+(fa*244|0)+64>>2];g[r+(fa*244|0)+68>>2]=M+ +g[r+(fa*244|0)+68>>2];g[r+(fa*244|0)+72>>2]=N+ +g[r+(fa*244|0)+72>>2];S=S*+g[r+(fa*244|0)+100>>2]*-k;T=T*+g[r+(fa*244|0)+104>>2]*-k;g[r+(fa*244|0)+80>>2]=+g[r+(fa*244|0)+80>>2]-O*+g[r+(fa*244|0)+96>>2]*-k;g[r+(fa*244|0)+84>>2]=+g[r+(fa*244|0)+84>>2]-S;g[r+(fa*244|0)+88>>2]=+g[r+(fa*244|0)+88>>2]-T}while(0);h=c[ba+780>>2]|0}Z=Z+1|0}while((Z|0)<(h|0))}Y=Y+1|0}while((Y|0)!=(e|0));i=ja;return}function gc(b,d){b=b|0;d=+d;var e=0,f=0,h=0,j=0.0,k=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,H=0.0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0,_=0,$=0,aa=0.0,ba=0.0,ca=0.0,da=0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0,ja=0,ka=0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0,ta=0.0;ia=i;i=i+240|0;e=c[b+24>>2]|0;if((e|0)<=0){i=ia;return}O=ia+128+76|0;P=ia+80+16|0;Q=ia+80+32|0;N=0;do{M=c[(c[b+32>>2]|0)+(N<<2)>>2]|0;switch(c[M+216>>2]|0){case 2:case 5:break;default:{if(a[M+964>>0]|0){a[M+964>>0]=0;f=c[M+772>>2]|0;if((f|0)>0){h=c[M+780>>2]|0;e=0;do{K=c[h+(e*52|0)+8>>2]|0;L=c[h+(e*52|0)+12>>2]|0;D=+g[K+8>>2]-+g[L+8>>2];E=+g[K+12>>2]-+g[L+12>>2];H=+g[K+16>>2]-+g[L+16>>2];H=+G(+(D*D+E*E+H*H));g[h+(e*52|0)+16>>2]=H;g[h+(e*52|0)+28>>2]=H*H;e=e+1|0}while((e|0)!=(f|0));e=0;do{g[h+(e*52|0)+24>>2]=(+g[(c[h+(e*52|0)+8>>2]|0)+88>>2]+ +g[(c[h+(e*52|0)+12>>2]|0)+88>>2])/+g[(c[h+(e*52|0)+4>>2]|0)+4>>2];e=e+1|0}while((e|0)!=(f|0))}Vf(M);e=c[M+1028>>2]|0;if(e|0)hn(M+1028|0,e);e=c[M+1032>>2]|0;if(e|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[M+1032>>2]=0;c[M+1036>>2]=-1;e=c[M+1060>>2]|0;if(e|0){if(a[M+1064>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[M+1060>>2]=0}a[M+1064>>0]=1;c[M+1060>>2]=0;c[M+1052>>2]=0;c[M+1056>>2]=0;c[M+1044>>2]=0;if(c[M+428>>2]&16|0)Uf(M)}m=+g[M+408>>2]*d;g[M+492>>2]=m;g[M+496>>2]=1.0/m;g[M+500>>2]=m*3.0;K=c[M+192>>2]|0;m=+Cb[c[(c[K>>2]|0)+48>>2]&15](K);g[M+504>>2]=m;g[M+508>>2]=m*.25;K=c[M+724>>2]|0;m=+g[M+492>>2];j=+g[K+40>>2]*m;k=m*+g[K+44>>2];m=m*+g[K+48>>2];L=c[M+752>>2]|0;if((L|0)>0){f=c[M+760>>2]|0;e=0;do{if(+g[f+(e*104|0)+88>>2]>0.0){J=f+(e*104|0)+40|0;g[J>>2]=j+ +g[J>>2];J=f+(e*104|0)+44|0;g[J>>2]=k+ +g[J>>2];J=f+(e*104|0)+48|0;g[J>>2]=m+ +g[J>>2]}e=e+1|0}while((e|0)!=(L|0))}E=+g[M+348>>2];H=+g[M+352>>2];n=+g[M+344>>2]>0.0?1:+g[M+340>>2]>0.0;if(E!=0.0|H>0.0){if((L|0)>0){f=c[M+760>>2]|0;k=+g[f+8>>2];m=+g[f+12>>2];o=+g[f+16>>2];f=c[M+792>>2]|0;if((f|0)>0){h=c[M+800>>2]|0;e=0;j=0.0;do{J=c[h+(e*44|0)+8>>2]|0;I=c[h+(e*44|0)+12>>2]|0;C=+g[I+8>>2]-k;x=+g[I+12>>2]-m;A=+g[I+16>>2]-o;I=c[h+(e*44|0)+16>>2]|0;B=+g[I+8>>2]-k;z=+g[I+12>>2]-m;D=+g[I+16>>2]-o;j=j+((+g[J+16>>2]-o)*(C*z-x*B)+((+g[J+8>>2]-k)*(x*D-A*z)+(+g[J+12>>2]-m)*(A*B-C*D)));e=e+1|0}while((e|0)!=(f|0))}else j=0.0;j=j/6.0}else j=0.0;D=E*(1.0/+F(+j));C=H*(+g[M+516>>2]-j)}else{C=0.0;D=0.0}a:do if((L|0)>0){if(!n){f=c[M+760>>2]|0;e=0;while(1){if(+g[f+(e*104|0)+88>>2]>0.0){if(E!=0.0){z=D*+g[f+(e*104|0)+92>>2];A=z*+g[f+(e*104|0)+76>>2];B=z*+g[f+(e*104|0)+80>>2];J=f+(e*104|0)+56|0;g[J>>2]=+g[f+(e*104|0)+72>>2]*z+ +g[J>>2];J=f+(e*104|0)+60|0;g[J>>2]=A+ +g[J>>2];J=f+(e*104|0)+64|0;g[J>>2]=B+ +g[J>>2]}if(H>0.0){z=C*+g[f+(e*104|0)+92>>2];A=z*+g[f+(e*104|0)+76>>2];B=z*+g[f+(e*104|0)+80>>2];J=f+(e*104|0)+56|0;g[J>>2]=+g[f+(e*104|0)+72>>2]*z+ +g[J>>2];J=f+(e*104|0)+60|0;g[J>>2]=A+ +g[J>>2];J=f+(e*104|0)+64|0;g[J>>2]=B+ +g[J>>2]}}e=e+1|0;if((e|0)==(L|0))break a}}h=c[M+760>>2]|0;f=0;do{x=+g[h+(f*104|0)+88>>2];if(x>0.0){z=+g[M+492>>2];p=+g[M+344>>2];o=+g[M+340>>2];b:do if((p>0.0|o>0.0?(R=c[K>>2]|0,(c[M+328>>2]|0)<4):0)?(S=+g[h+(f*104|0)+40>>2],T=S-+g[M+1252>>2],U=+g[h+(f*104|0)+44>>2],V=U-+g[M+1256>>2],W=+g[h+(f*104|0)+48>>2],X=W-+g[M+1260>>2],Y=+G(+(T*T+V*V+X*X)),T*T+V*V+X*X>1.1920928955078125e-007):0){v=T*(1.0/Y);A=V*(1.0/Y);B=X*(1.0/Y);s=+g[h+(f*104|0)+72>>2];t=+g[h+(f*104|0)+76>>2];u=+g[h+(f*104|0)+80>>2];switch(c[M+328>>2]|0){case 2:break;case 1:case 3:case 0:{j=T*s+V*t+X*u<0.0?-1.0:1.0;if(!(X*u*j+(T*s*j+V*t*j)>0.0))break b;w=-((c[l>>2]=R,+g[l>>2])*(T*T+V*V+X*X)*(X*u*j+(T*s*j+V*t*j))*+g[h+(f*104|0)+92>>2]*.5);m=v*o*w+(s*j*p*w+0.0);k=A*o*w+(t*j*p*w+0.0);j=B*o*w+(u*j*p*w+0.0);e=h+(f*104|0)+56|0;if(z*x*j*z*x*j+(z*x*m*z*x*m+z*x*k*z*x*k)>S*S+U*U+W*W){B=1.0/+G(+(j*j+(m*m+k*k)));g[e>>2]=+g[e>>2]-1.0/(z*x)*m*B*(W*j*B+(S*m*B+U*k*B));J=h+(f*104|0)+60|0;g[J>>2]=+g[J>>2]-1.0/(z*x)*k*B*(W*j*B+(S*m*B+U*k*B));J=h+(f*104|0)+64|0;g[J>>2]=+g[J>>2]-1.0/(z*x)*j*B*(W*j*B+(S*m*B+U*k*B));break b}else{g[e>>2]=m+ +g[e>>2];J=h+(f*104|0)+60|0;g[J>>2]=k+ +g[J>>2];J=h+(f*104|0)+64|0;g[J>>2]=j+ +g[J>>2];break b}}default:break b}r=T*s+V*t+X*u<0.0?-1.0:1.0;j=B*u*r+(v*s*r+A*t*r);k=+g[h+(f*104|0)+92>>2]*.5;m=(c[l>>2]=R,+g[l>>2]);w=j*o*.5*m*(T*T+V*V+X*X)*k;if(j>0.0&j<.9847999811172485){o=p*.5*m*Y*k*+G(+(1.0-j*j));p=(B*(v*u*r-B*s*r)-A*(A*s*r-v*t*r))*o;q=(v*(A*s*r-v*t*r)-B*(B*t*r-A*u*r))*o;o=(A*(B*t*r-A*u*r)-v*(v*u*r-B*s*r))*o}else{p=0.0;q=0.0;o=0.0}j=z*x*-(B*w)*z*x*-(B*w)+(x*-(v*w)*z*x*-(v*w)*z+z*x*-(A*w)*z*x*-(A*w));if(j>0.0?j>=S*S+U*U+W*W:0){j=+G(+(S*S+U*U+W*W))/+G(+j)*.800000011920929;m=j*-(v*w);k=j*-(B*w);j=j*-(A*w)}else{m=-(v*w);k=-(B*w);j=-(A*w)}y=h+(f*104|0)+56|0;I=h+(f*104|0)+60|0;A=j+ +g[I>>2];J=h+(f*104|0)+64|0;B=k+ +g[J>>2];g[y>>2]=p+(m+ +g[y>>2]);g[I>>2]=q+A;g[J>>2]=o+B}while(0);if(E!=0.0){z=D*+g[h+(f*104|0)+92>>2];A=z*+g[h+(f*104|0)+76>>2];B=z*+g[h+(f*104|0)+80>>2];J=h+(f*104|0)+56|0;g[J>>2]=+g[h+(f*104|0)+72>>2]*z+ +g[J>>2];J=h+(f*104|0)+60|0;g[J>>2]=A+ +g[J>>2];J=h+(f*104|0)+64|0;g[J>>2]=B+ +g[J>>2]}if(H>0.0){z=C*+g[h+(f*104|0)+92>>2];A=z*+g[h+(f*104|0)+76>>2];B=z*+g[h+(f*104|0)+80>>2];J=h+(f*104|0)+56|0;g[J>>2]=+g[h+(f*104|0)+72>>2]*z+ +g[J>>2];J=h+(f*104|0)+60|0;g[J>>2]=A+ +g[J>>2];J=h+(f*104|0)+64|0;g[J>>2]=B+ +g[J>>2]}}f=f+1|0}while((f|0)!=(L|0))}while(0);J=c[M+792>>2]|0;if((J|0)>0){I=0;do{w=+g[M+492>>2];r=+g[M+344>>2];p=+g[M+340>>2];c:do if((r>0.0|p>0.0?(Z=c[M+328>>2]|0,(Z|0)>3):0)?(_=c[M+800>>2]|0,$=c[_+(I*44|0)+8>>2]|0,n=c[_+(I*44|0)+12>>2]|0,aa=+g[$+40>>2],ba=+g[$+44>>2],ca=+g[$+48>>2],y=c[_+(I*44|0)+16>>2]|0,da=c[K>>2]|0,ea=(aa+ +g[n+40>>2]+ +g[y+40>>2])*.3333333432674408-+g[M+1252>>2],fa=(ba+ +g[n+44>>2]+ +g[y+44>>2])*.3333333432674408-+g[M+1256>>2],ga=(ca+ +g[n+48>>2]+ +g[y+48>>2])*.3333333432674408-+g[M+1260>>2],ha=+G(+(ea*ea+fa*fa+ga*ga)),ea*ea+fa*fa+ga*ga>1.1920928955078125e-007):0){t=ea*(1.0/ha);v=fa*(1.0/ha);x=ga*(1.0/ha);q=+g[_+(I*44|0)+20>>2];s=+g[_+(I*44|0)+24>>2];u=+g[_+(I*44|0)+28>>2];switch(Z|0){case 5:break;case 4:case 6:{j=ea*q+fa*s+ga*u<0.0?-1.0:1.0;if(!(ga*u*j+(ea*q*j+fa*s*j)>0.0))break c;k=-((c[l>>2]=da,+g[l>>2])*(ea*ea+fa*fa+ga*ga)*(ga*u*j+(ea*q*j+fa*s*j))*+g[_+(I*44|0)+36>>2]);t=(t*p*k+(q*j*r*k+0.0))*.3333333432674408;q=(v*p*k+(s*j*r*k+0.0))*.3333333432674408;p=(x*p*k+(u*j*r*k+0.0))*.3333333432674408;e=0;f=$;k=aa;m=ba;o=ca;while(1){j=w*+g[f+88>>2];h=f+56|0;if(p*j*p*j+(t*j*t*j+q*j*q*j)>k*k+m*m+o*o){E=1.0/+G(+(p*p+(t*t+q*q)));H=o*p*E+(k*t*E+m*q*E);g[h>>2]=+g[h>>2]-1.0/j*t*E*H;y=f+60|0;g[y>>2]=+g[y>>2]-1.0/j*q*E*H;y=f+64|0;g[y>>2]=+g[y>>2]-1.0/j*p*E*H}else{g[h>>2]=t+ +g[h>>2];y=f+60|0;g[y>>2]=q+ +g[y>>2];y=f+64|0;g[y>>2]=p+ +g[y>>2]}e=e+1|0;if((e|0)==3)break c;y=c[_+(I*44|0)+8+(e<<2)>>2]|0;f=y;k=+g[y+40>>2];m=+g[y+44>>2];o=+g[y+48>>2]}}default:break c}o=ea*q+fa*s+ga*u<0.0?-1.0:1.0;j=x*u*o+(t*q*o+v*s*o);k=+g[_+(I*44|0)+36>>2]*.5;m=(c[l>>2]=da,+g[l>>2]);p=j*(ea*ea+fa*fa+ga*ga)*p*.5*m*k;if(j>0.0&j<.9847999811172485){H=ha*r*.5*m*k*+G(+(1.0-j*j));w=(x*(t*u*o-x*q*o)-v*(v*q*o-t*s*o))*H*.3333333432674408;z=(v*(x*s*o-v*u*o)-t*(t*u*o-x*q*o))*H*.3333333432674408;s=(t*(v*q*o-t*s*o)-x*(x*s*o-v*u*o))*H*.3333333432674408}else{w=0.0;z=0.0;s=0.0}f=(g[l>>2]=t*p*-.3333333432674408,c[l>>2]|0);h=(g[l>>2]=v*p*-.3333333432674408,c[l>>2]|0);y=0;e=(g[l>>2]=x*p*-.3333333432674408,c[l>>2]|0);n=$;while(1){j=+g[n+88>>2];if(j>0.0){p=(c[l>>2]=f,+g[l>>2]);q=(c[l>>2]=h,+g[l>>2]);r=(c[l>>2]=e,+g[l>>2]);k=+g[M+492>>2];j=r*j*k*r*j*k+(p*j*k*p*j*k+q*j*k*q*j*k);k=+g[n+40>>2];m=+g[n+44>>2];o=+g[n+48>>2];if(j>0.0?j>=k*k+m*m+o*o:0){H=+G(+(k*k+m*m+o*o))/+G(+j)*.800000011920929;f=(g[l>>2]=p*H,c[l>>2]|0);h=(g[l>>2]=q*H,c[l>>2]|0);e=(g[l>>2]=r*H,c[l>>2]|0)}ka=n+56|0;D=(c[l>>2]=f,+g[l>>2])+ +g[ka>>2];ja=n+60|0;E=(c[l>>2]=h,+g[l>>2])+ +g[ja>>2];n=n+64|0;H=(c[l>>2]=e,+g[l>>2])+ +g[n>>2];g[ka>>2]=w+D;g[ja>>2]=s+E;g[n>>2]=z+H}n=y+1|0;if((n|0)==3)break c;y=n;n=c[_+(I*44|0)+8+(n<<2)>>2]|0}}while(0);I=I+1|0}while((I|0)!=(J|0))}if((L|0)>0){e=0;do{ja=c[M+760>>2]|0;ka=ja+(e*104|0)+24|0;K=ja+(e*104|0)+8|0;c[ka>>2]=c[K>>2];c[ka+4>>2]=c[K+4>>2];c[ka+8>>2]=c[K+8>>2];c[ka+12>>2]=c[K+12>>2];ka=ja+(e*104|0)+56|0;E=+g[ja+(e*104|0)+88>>2];H=+g[M+492>>2];C=+g[ka>>2]*E*H;D=E*+g[ja+(e*104|0)+60>>2]*H;E=H*E*+g[ja+(e*104|0)+64>>2];H=+g[(c[M+724>>2]|0)+12>>2]/H;C=C>H?H:C;D=D>H?H:D;E=E>H?H:E;J=ja+(e*104|0)+40|0;C=(C<-H?-H:C)+ +g[J>>2];g[J>>2]=C;J=ja+(e*104|0)+44|0;D=(D<-H?-H:D)+ +g[J>>2];g[J>>2]=D;J=ja+(e*104|0)+48|0;E=(E<-H?-H:E)+ +g[J>>2];g[J>>2]=E;H=+g[M+492>>2];g[K>>2]=C*H+ +g[K>>2];K=ja+(e*104|0)+12|0;g[K>>2]=H*D+ +g[K>>2];ja=ja+(e*104|0)+16|0;g[ja>>2]=E*H+ +g[ja>>2];c[ka>>2]=0;c[ka+4>>2]=0;c[ka+8>>2]=0;c[ka+12>>2]=0;e=e+1|0}while((e|0)!=(L|0))}Mc(M);e=c[M+968>>2]|0;if(e){ka=c[M+192>>2]|0;D=+Cb[c[(c[ka>>2]|0)+48>>2]&15](ka);H=+g[e+4>>2]-D;E=+g[e+8>>2]-D;g[M+932>>2]=+g[e>>2]-D;g[M+936>>2]=H;g[M+940>>2]=E;g[M+944>>2]=0.0;E=D+ +g[e+20>>2];H=D+ +g[e+24>>2];g[M+948>>2]=D+ +g[e+16>>2];g[M+952>>2]=E;g[M+956>>2]=H;g[M+960>>2]=0.0;e=c[M+188>>2]|0;if(e|0){ka=c[M+724>>2]|0;ja=c[ka+32>>2]|0;ib[c[(c[ja>>2]|0)+16>>2]&31](ja,e,M+932|0,M+948|0,c[ka+36>>2]|0)}}else{c[M+932>>2]=0;c[M+932+4>>2]=0;c[M+932+8>>2]=0;c[M+932+12>>2]=0;c[M+932+16>>2]=0;c[M+932+20>>2]=0;c[M+932+24>>2]=0;c[M+932+28>>2]=0}f=c[M+752>>2]|0;if((f|0)>0){e=0;do{ja=c[M+760>>2]|0;E=+g[M+504>>2];C=+g[ja+(e*104|0)+8>>2];H=+g[ja+(e*104|0)+12>>2];D=+g[ja+(e*104|0)+16>>2];g[ia>>2]=C-E;g[ia+4>>2]=H-E;g[ia+8>>2]=D-E;g[ia+12>>2]=0.0;g[ia+16>>2]=E+C;g[ia+20>>2]=E+H;g[ia+24>>2]=E+D;g[ia+28>>2]=0.0;ka=c[ja+(e*104|0)+96>>2]|0;D=+g[M+500>>2];E=D*+g[ja+(e*104|0)+44>>2];H=D*+g[ja+(e*104|0)+48>>2];g[ia+128>>2]=+g[ja+(e*104|0)+40>>2]*D;g[ia+128+4>>2]=E;g[ia+128+8>>2]=H;g[ia+128+12>>2]=0.0;Yg(M+968|0,ka,ia,ia+128|0,+g[M+508>>2])|0;e=e+1|0}while((e|0)!=(f|0))}if(c[M+1028>>2]|0?(c[M+792>>2]|0)>0:0){e=0;do{ka=c[M+800>>2]|0;K=c[ka+(e*44|0)+8>>2]|0;L=c[ka+(e*44|0)+12>>2]|0;ja=c[ka+(e*44|0)+16>>2]|0;C=(+g[K+40>>2]+ +g[L+40>>2]+ +g[ja+40>>2])*.3333333432674408;D=(+g[K+44>>2]+ +g[L+44>>2]+ +g[ja+44>>2])*.3333333432674408;E=(+g[K+48>>2]+ +g[L+48>>2]+ +g[ja+48>>2])*.3333333432674408;x=+g[M+504>>2];u=+g[K+8>>2];w=+g[K+12>>2];A=+g[K+16>>2];H=+g[K+20>>2];B=+g[L+8>>2];p=B<u?B:u;z=+g[L+12>>2];q=z<w?z:w;v=+g[L+16>>2];r=v<A?v:A;t=+g[L+20>>2];s=t<H?t:H;u=u<B?B:u;w=w<z?z:w;A=A<v?v:A;H=H<t?t:H;t=+g[ja+8>>2];v=+g[ja+12>>2];z=+g[ja+16>>2];B=+g[ja+20>>2];g[ia>>2]=(t<p?t:p)-x;g[ia+4>>2]=(v<q?v:q)-x;g[ia+8>>2]=(z<r?z:r)-x;g[ia+12>>2]=B<s?B:s;g[ia+16>>2]=x+(u<t?t:u);g[ia+20>>2]=x+(w<v?v:w);g[ia+24>>2]=x+(A<z?z:A);g[ia+28>>2]=H<B?B:H;ka=c[ka+(e*44|0)+40>>2]|0;H=+g[M+500>>2];g[ia+128>>2]=C*H;g[ia+128+4>>2]=D*H;g[ia+128+8>>2]=E*H;g[ia+128+12>>2]=0.0;Yg(M+1028|0,ka,ia,ia+128|0,+g[M+508>>2])|0;e=e+1|0}while((e|0)<(c[M+792>>2]|0))}do if(a[M+513>>0]|0){y=c[M+752>>2]|0;if((y|0)>0){f=c[M+760>>2]|0;h=c[M+552>>2]|0;e=0;j=0.0;k=0.0;m=0.0;do{H=+g[h+(e<<2)>>2];j=j+ +g[f+(e*104|0)+8>>2]*H;k=k+H*+g[f+(e*104|0)+12>>2];m=m+H*+g[f+(e*104|0)+16>>2];e=e+1|0}while((e|0)!=(y|0))}else{j=0.0;k=0.0;m=0.0}g[M+560>>2]=j;g[M+564>>2]=k;g[M+568>>2]=m;g[M+572>>2]=0.0;h=ia+128+4|0;n=h+44|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(n|0));g[ia+128>>2]=1.1920928955078125e-007;g[ia+128+20>>2]=2.384185791015625e-007;g[ia+128+40>>2]=3.5762786865234375e-007;if((y|0)>0){f=c[M+552>>2]|0;h=c[M+760>>2]|0;n=c[M+532>>2]|0;e=0;o=1.1920928955078125e-007;p=+g[ia+128+4>>2];q=+g[ia+128+8>>2];r=+g[ia+128+16>>2];s=2.384185791015625e-007;t=+g[ia+128+24>>2];u=0.0;v=0.0;w=3.5762786865234375e-007;do{E=+g[f+(e<<2)>>2];A=(+g[h+(e*104|0)+8>>2]-j)*E;B=(+g[h+(e*104|0)+12>>2]-k)*E;E=E*(+g[h+(e*104|0)+16>>2]-m);C=+g[n+(e<<4)>>2];D=+g[n+(e<<4)+4>>2];H=+g[n+(e<<4)+8>>2];o=A*C+o;p=A*D+p;q=A*H+q;r=B*C+r;s=B*D+s;t=B*H+t;u=E*C+u;v=E*D+v;w=E*H+w;e=e+1|0}while((e|0)!=(y|0));g[ia+128>>2]=o;g[ia+128+4>>2]=p;g[ia+128+8>>2]=q;g[ia+128+16>>2]=r;g[ia+128+20>>2]=s;g[ia+128+24>>2]=t;g[ia+128+32>>2]=u;g[ia+128+36>>2]=v;g[ia+128+40>>2]=w}if(!(a[22064]|0)){a[22064]=1;g[5675]=9.999999747378752e-005;c[5676]=16}Xc(ia+128|0,ia+80|0,ia+32|0);c[M+576>>2]=c[ia+80>>2];c[M+576+4>>2]=c[ia+80+4>>2];c[M+576+8>>2]=c[ia+80+8>>2];c[M+576+12>>2]=c[ia+80+12>>2];c[M+592>>2]=c[P>>2];c[M+592+4>>2]=c[P+4>>2];c[M+592+8>>2]=c[P+8>>2];c[M+592+12>>2]=c[P+12>>2];c[M+608>>2]=c[Q>>2];c[M+608+4>>2]=c[Q+4>>2];c[M+608+8>>2]=c[Q+8>>2];c[M+608+12>>2]=c[Q+12>>2];na=+g[ia+80>>2];w=+g[P>>2];B=+g[Q>>2];ma=+g[ia+80+4>>2];x=+g[ia+80+20>>2];D=+g[ia+80+36>>2];la=+g[ia+80+8>>2];z=+g[ia+80+24>>2];H=+g[ia+80+40>>2];p=+g[M+672>>2];o=+g[M+676>>2];m=+g[M+680>>2];ta=+g[M+688>>2];sa=+g[M+692>>2];q=+g[M+696>>2];C=+g[M+704>>2];E=+g[M+708>>2];u=+g[M+712>>2];ra=+g[ia+128>>2];qa=+g[ia+128+16>>2];r=+g[ia+128+32>>2];j=(na*p+ma*o+la*m)*ra+(w*p+x*o+z*m)*qa+(B*p+D*o+H*m)*r;pa=+g[ia+128+4>>2];oa=+g[ia+128+20>>2];s=+g[ia+128+36>>2];k=(na*p+ma*o+la*m)*pa+(w*p+x*o+z*m)*oa+(B*p+D*o+H*m)*s;v=+g[ia+128+8>>2];A=+g[ia+128+24>>2];t=+g[ia+128+40>>2];m=(na*p+ma*o+la*m)*v+(w*p+x*o+z*m)*A+(B*p+D*o+H*m)*t;o=(na*ta+ma*sa+la*q)*ra+(w*ta+x*sa+z*q)*qa+(B*ta+D*sa+H*q)*r;p=(na*ta+ma*sa+la*q)*pa+(w*ta+x*sa+z*q)*oa+(B*ta+D*sa+H*q)*s;q=(na*ta+ma*sa+la*q)*v+(w*ta+x*sa+z*q)*A+(B*ta+D*sa+H*q)*t;r=ra*(na*C+ma*E+la*u)+qa*(w*C+x*E+z*u)+(B*C+D*E+H*u)*r;s=(na*C+ma*E+la*u)*pa+(w*C+x*E+z*u)*oa+(B*C+D*E+H*u)*s;t=(na*C+ma*E+la*u)*v+(w*C+x*E+z*u)*A+(B*C+D*E+H*u)*t;g[M+624>>2]=j;g[M+628>>2]=k;g[M+632>>2]=m;g[M+636>>2]=0.0;g[M+640>>2]=o;g[M+644>>2]=p;g[M+648>>2]=q;g[M+652>>2]=0.0;g[M+656>>2]=r;g[M+660>>2]=s;g[M+664>>2]=t;g[M+668>>2]=0.0;u=+g[M+404>>2];if(u>1.0){ta=1.0/(m*(s*o-p*r)+(j*(p*t-q*s)+k*(q*r-t*o)))<1.0?1.0:u<1.0/(m*(s*o-p*r)+(j*(p*t-q*s)+k*(q*r-t*o)))?u:1.0/(m*(s*o-p*r)+(j*(p*t-q*s)+k*(q*r-t*o)));g[M+624>>2]=j*ta;g[M+628>>2]=k*ta;g[M+632>>2]=m*ta;g[M+636>>2]=0.0;g[M+640>>2]=o*ta;g[M+644>>2]=p*ta;g[M+648>>2]=q*ta;g[M+652>>2]=0.0;g[M+656>>2]=r*ta;g[M+660>>2]=s*ta;g[M+664>>2]=ta*t;g[M+668>>2]=0.0}if(a[M+513>>0]|0?+g[M+360>>2]>0.0:0){j=+g[M+576>>2];p=+g[M+580>>2];q=+g[M+584>>2];r=+g[M+592>>2];s=+g[M+596>>2];t=+g[M+600>>2];k=+g[M+608>>2];m=+g[M+612>>2];o=+g[M+616>>2];f=c[M+752>>2]|0;if((f|0)<=0)break;e=0;do{h=c[M+760>>2]|0;if(+g[h+(e*104|0)+88>>2]>0.0){L=c[M+532>>2]|0;oa=+g[L+(e<<4)>>2];pa=+g[L+(e<<4)+4>>2];qa=+g[L+(e<<4)+8>>2];na=+g[M+360>>2];L=h+(e*104|0)+8|0;ra=+g[L>>2];ja=h+(e*104|0)+12|0;sa=+g[ja>>2];ka=h+(e*104|0)+16|0;ta=+g[ka>>2];sa=sa+na*(r*oa+s*pa+t*qa+ +g[M+564>>2]-sa);ta=ta+na*(k*oa+m*pa+o*qa+ +g[M+568>>2]-ta);g[L>>2]=ra+na*(+g[M+560>>2]+(j*oa+p*pa+q*qa)-ra);g[ja>>2]=sa;g[ka>>2]=ta;g[h+(e*104|0)+20>>2]=0.0}e=e+1|0}while((e|0)!=(f|0))}}while(0);h=ia+128|0;n=h+104|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(n|0));e=c[M+852>>2]|0;if((e|0)<0){if((c[M+856>>2]|0)<0){f=c[M+860>>2]|0;if(f|0){if(a[M+864>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[M+860>>2]=0}a[M+864>>0]=1;c[M+860>>2]=0;c[M+856>>2]=0}do{ka=c[M+860>>2]|0;ja=ka+(e*104|0)|0;c[ja>>2]=c[ia+128>>2];c[ja+4>>2]=c[ia+128+4>>2];c[ja+8>>2]=c[ia+128+8>>2];c[ja+12>>2]=c[ia+128+12>>2];c[ja+16>>2]=c[ia+128+16>>2];c[ja+20>>2]=c[ia+128+20>>2];c[ja+24>>2]=c[ia+128+24>>2];ja=ka+(e*104|0)+28|0;c[ja>>2]=c[ia+128+28>>2];c[ja+4>>2]=c[ia+128+28+4>>2];c[ja+8>>2]=c[ia+128+28+8>>2];c[ja+12>>2]=c[ia+128+28+12>>2];ja=ka+(e*104|0)+44|0;c[ja>>2]=c[ia+128+44>>2];c[ja+4>>2]=c[ia+128+44+4>>2];c[ja+8>>2]=c[ia+128+44+8>>2];c[ja+12>>2]=c[ia+128+44+12>>2];ja=ka+(e*104|0)+60|0;c[ja>>2]=c[ia+128+60>>2];c[ja+4>>2]=c[ia+128+60+4>>2];c[ja+8>>2]=c[ia+128+60+8>>2];c[ja+12>>2]=c[ia+128+60+12>>2];ka=ka+(e*104|0)+76|0;c[ka>>2]=c[O>>2];c[ka+4>>2]=c[O+4>>2];c[ka+8>>2]=c[O+8>>2];c[ka+12>>2]=c[O+12>>2];c[ka+16>>2]=c[O+16>>2];c[ka+20>>2]=c[O+20>>2];c[ka+24>>2]=c[O+24>>2];e=e+1|0}while((e|0)!=0)}c[M+852>>2]=0;h=ia+128|0;n=h+56|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(n|0));e=c[M+872>>2]|0;if((e|0)<0){if((c[M+876>>2]|0)<0){f=c[M+880>>2]|0;if(f|0){if(a[M+884>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[M+880>>2]=0}a[M+884>>0]=1;c[M+880>>2]=0;c[M+876>>2]=0}do{h=(c[M+880>>2]|0)+(e*56|0)|0;f=ia+128|0;n=h+56|0;do{c[h>>2]=c[f>>2];h=h+4|0;f=f+4|0}while((h|0)<(n|0));e=e+1|0}while((e|0)!=0)}c[M+872>>2]=0;Yf(M+968|0,1);Yf(M+1028|0,1);Yf(M+1088|0,1);e=c[b+24>>2]|0}}N=N+1|0}while((N|0)<(e|0));i=ia;return}
function mj(){var b=0;c[6324]=(c[6324]|0)+1;b=ic(223)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}c[b>>2]=4564;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;c[b+72>>2]=0;a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;a[b+120>>0]=1;c[b+116>>2]=0;c[b+108>>2]=0;c[b+112>>2]=0;a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;a[b+160>>0]=1;c[b+156>>2]=0;c[b+148>>2]=0;c[b+152>>2]=0;a[b+180>>0]=1;c[b+176>>2]=0;c[b+168>>2]=0;c[b+172>>2]=0;c[b+192>>2]=13;c[b+196>>2]=14;c[b+200>>2]=0;return b|0}function nj(a,b,e){a=a|0;b=b|0;e=e|0;Zg(a,b,e)|0;c[b+276>>2]=c[a+1316>>2];c[b+324>>2]=c[a+1364>>2];c[b+252>>2]=d[a+1309>>0];c[b+300>>2]=c[a+1340>>2];c[b+280>>2]=c[a+1320>>2];c[b+328>>2]=c[a+1368>>2];c[b+256>>2]=d[a+1310>>0];c[b+304>>2]=c[a+1344>>2];c[b+284>>2]=c[a+1324>>2];c[b+332>>2]=c[a+1372>>2];c[b+260>>2]=d[a+1311>>0];c[b+308>>2]=c[a+1348>>2];c[b+288>>2]=c[a+1328>>2];c[b+336>>2]=c[a+1376>>2];c[b+264>>2]=d[a+1312>>0];c[b+312>>2]=c[a+1352>>2];c[b+292>>2]=c[a+1332>>2];c[b+340>>2]=c[a+1380>>2];c[b+268>>2]=d[a+1313>>0];c[b+316>>2]=c[a+1356>>2];c[b+296>>2]=c[a+1336>>2];c[b+344>>2]=c[a+1384>>2];c[b+272>>2]=d[a+1314>>0];c[b+320>>2]=c[a+1360>>2];return 12055}function oj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0;i=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);m=i+ +g[a+32>>2];k=i+ +g[a+36>>2];i=i+ +g[a+40>>2];u=+F(+(+g[b>>2]));t=+F(+(+g[b+4>>2]));s=+F(+(+g[b+8>>2]));q=+F(+(+g[b+16>>2]));p=+F(+(+g[b+20>>2]));o=+F(+(+g[b+24>>2]));l=+F(+(+g[b+32>>2]));j=+F(+(+g[b+36>>2]));h=+F(+(+g[b+40>>2]));r=+g[b+48>>2];n=+g[b+52>>2];f=+g[b+56>>2];g[d>>2]=r-(m*u+k*t+i*s);g[d+4>>2]=n-(m*q+k*p+i*o);g[d+8>>2]=f-(m*l+k*j+i*h);g[d+12>>2]=0.0;g[e>>2]=m*u+k*t+i*s+r;g[e+4>>2]=m*q+k*p+i*o+n;g[e+8>>2]=m*l+k*j+i*h+f;g[e+12>>2]=0.0;return}function pj(b){b=b|0;var d=0;c[b>>2]=5072;if(c[b+108>>2]|0){d=c[b+112>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+112>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+108>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+108>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}}d=c[b+88>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+84>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+80>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+60>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}if(!(a[b+100>>0]|0))return;d=c[b+92>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+92>>2]|0;if(!d)return;c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);return}function qj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;while(1){i=c[a+12>>2]|0;k=c[i+(((b+d|0)/2|0)<<3)>>2]|0;f=d;e=b;while(1){while(1){j=e+1|0;if((c[i+(e<<3)>>2]|0)<(k|0))e=j;else break}while(1){g=i+(f<<3)|0;h=f+-1|0;if((k|0)<(c[g>>2]|0))f=h;else break}if((e|0)<=(f|0)){l=i+(e<<3)|0;i=c[l>>2]|0;e=c[l+4>>2]|0;m=c[g+4>>2]|0;c[l>>2]=c[g>>2];c[l+4>>2]=m;f=(c[a+12>>2]|0)+(f<<3)|0;c[f>>2]=i;c[f+4>>2]=e;f=h;e=j}if((e|0)>(f|0))break;i=c[a+12>>2]|0}if((f|0)>(b|0))qj(a,b,f);if((e|0)<(d|0))b=e;else break}return}function rj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=c[b+72>>2]|0;if(!e)return;f=c[d+4>>2]|0;if((f|0)==(c[d+8>>2]|0)?(h=f|0?f<<1:1,(f|0)<(h|0)):0){if(!h)e=0;else{c[6324]=(c[6324]|0)+1;e=ic((h<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}f=c[d+4>>2]|0}if((f|0)>0){g=0;do{c[e+(g<<2)>>2]=c[(c[d+12>>2]|0)+(g<<2)>>2];g=g+1|0}while((g|0)!=(f|0))}g=c[d+12>>2]|0;if(g){if(a[d+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0);f=c[d+4>>2]|0}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=e;c[d+8>>2]=h;e=c[b+72>>2]|0}c[(c[d+12>>2]|0)+(f<<2)>>2]=e;c[d+4>>2]=f+1;return}function sj(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0;c[6324]=(c[6324]|0)+1;e=ic(379)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}Fj(e,3,b);c[e>>2]=4508;l=e+300|0;c[l>>2]=c[d>>2];c[l+4>>2]=c[d+4>>2];c[l+8>>2]=c[d+8>>2];c[l+12>>2]=c[d+12>>2];k=+g[d>>2];j=+g[d+4>>2];i=+g[d+8>>2];h=k*+g[b+20>>2]+j*+g[b+24>>2]+i*+g[b+28>>2]+ +g[b+56>>2];f=k*+g[b+36>>2]+j*+g[b+40>>2]+i*+g[b+44>>2]+ +g[b+60>>2];g[e+316>>2]=k*+g[b+4>>2]+j*+g[b+8>>2]+i*+g[b+12>>2]+ +g[b+52>>2];g[e+320>>2]=h;g[e+324>>2]=f;g[e+328>>2]=0.0;c[e+332>>2]=0;a[e+344>>0]=0;g[e+348>>2]=.30000001192092896;g[e+352>>2]=1.0;g[e+356>>2]=0.0;return e|0}function tj(a,b,d,e){a=a|0;b=b|0;d=+d;e=+e;var f=0,h=0.0,i=0.0,j=0.0,k=0,m=0.0,n=0.0,o=0.0;j=+I(+d);i=+J(+d);f=c[b+444>>2]|0;k=+F(+j)>1.1920928955078125e-007;d=(c[l>>2]=f,+g[l>>2]);if(k){m=+g[b+448>>2];m=+G(+((i*i/(j*j)+1.0)/(1.0/(m*m)+i*i/(j*j)/(d*d))));d=i*i;h=j*j;f=(g[l>>2]=m,c[l>>2]|0)}else{d=i*i;h=j*j}m=+G(+(h+0.0+d));n=(c[l>>2]=f,+g[l>>2])*.5;m=+J(+n)/m;n=+I(+n);o=n*e+j*m*0.0-i*m*-0.0;h=n*0.0-i*m*e-m*0.0*0.0;d=n*0.0+m*0.0*0.0-j*m*e;e=-(m*0.0*e)-j*m*0.0-i*m*-0.0;g[a>>2]=i*m*h+(n*o+e*-(m*0.0))-d*-(j*m);g[a+4>>2]=d*-(m*0.0)+(n*h+e*-(j*m))-i*m*o;g[a+8>>2]=o*-(j*m)+(i*m*e+n*d)-h*-(m*0.0);g[a+12>>2]=0.0;return}function uj(a,d,f,h){a=a|0;d=d|0;f=f|0;h=h|0;var i=0,j=0,k=0,l=0,m=0;i=c[a+108>>2]|0;if(i|0){Yb[c[(c[i>>2]|0)+28>>2]&127](i,d,f,h);return}i=b[a+56>>1]|0;if((i&65535)<<1>>>0<=1)return;m=1;k=1;do{j=c[a+68>>2]|0;if(b[j+(k<<2)>>1]&1){l=c[a+60>>2]|0;k=e[j+(k<<2)+2>>1]|0;if(!(+g[d>>2]>+g[l+(k<<6)+32>>2])?!(+g[f>>2]<+g[l+(k<<6)+16>>2]):0)j=1;else j=0;if(!(!(+g[d+8>>2]>+g[l+(k<<6)+40>>2])?!(+g[f+8>>2]<+g[l+(k<<6)+24>>2]):0))j=0;if(!(+g[d+4>>2]>+g[l+(k<<6)+36>>2])?!(+g[f+4>>2]<+g[l+(k<<6)+20>>2]|j^1):0){Jb[c[(c[h>>2]|0)+8>>2]&31](h,l+(k<<6)|0)|0;i=b[a+56>>1]|0}}m=m+1<<16>>16;k=m&65535}while(k>>>0<((i&65535)<<1|1)>>>0);return}function vj(a,b,d){a=a|0;b=+b;d=+d;var e=0,f=0,h=0,i=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0;f=c[a+772>>2]|0;if((f|0)<=0)return;e=c[a+780>>2]|0;a=0;do{d=+g[e+(a*52|0)+24>>2];if(d>0.0?(h=c[e+(a*52|0)+8>>2]|0,i=c[e+(a*52|0)+12>>2]|0,j=+g[h+8>>2],k=+g[i+8>>2]-j,l=+g[h+12>>2],m=+g[i+12>>2]-l,n=+g[h+16>>2],o=+g[i+16>>2]-n,p=+g[e+(a*52|0)+28>>2],p+(k*k+m*m+o*o)>1.1920928955078125e-007):0){d=(p-(k*k+m*m+o*o))/(d*(p+(k*k+m*m+o*o)))*b;q=d*+g[h+88>>2];g[h+8>>2]=j-k*q;g[h+12>>2]=l-m*q;g[h+16>>2]=n-o*q;d=d*+g[i+88>>2];g[i+8>>2]=+g[i+8>>2]+k*d;g[i+12>>2]=m*d+ +g[i+12>>2];g[i+16>>2]=o*d+ +g[i+16>>2]}a=a+1|0}while((a|0)!=(f|0));return}function wj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0;e=i;i=i+96|0;c[e+32>>2]=1065353216;c[e+32+4>>2]=0;c[e+32+4+4>>2]=0;c[e+32+4+8>>2]=0;c[e+32+4+12>>2]=0;c[e+32+20>>2]=1065353216;c[e+32+24>>2]=0;c[e+32+24+4>>2]=0;c[e+32+24+8>>2]=0;c[e+32+24+12>>2]=0;c[e+32+40>>2]=1065353216;n=e+32+44|0;c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;Yb[c[(c[a>>2]|0)+8>>2]&127](a,e+32|0,e+16|0,e);l=+g[e>>2];m=+g[e+16>>2];j=+g[e+4>>2];k=+g[e+16+4>>2];f=+g[e+8>>2];h=+g[e+16+8>>2];g[d>>2]=+G(+((l-m)*(l-m)+(j-k)*(j-k)+(f-h)*(f-h)))*.5;g[b>>2]=(m+l)*.5;g[b+4>>2]=(k+j)*.5;g[b+8>>2]=(h+f)*.5;g[b+12>>2]=0.0;i=e;return}function xj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;c[a+4>>2]=c[b+24>>2];e=c[b>>2]|0;c[a+8>>2]=e;if(d){c[a+52>>2]=c[b+8>>2];c[a+52+4>>2]=c[b+8+4>>2];c[a+52+8>>2]=c[b+8+8>>2];c[a+52+12>>2]=c[b+8+12>>2]}else{k=+g[b+8>>2];j=+g[b+12>>2];i=+g[b+16>>2];h=+g[e+20>>2]*k+ +g[e+24>>2]*j+ +g[e+28>>2]*i;f=+g[e+36>>2]*k+ +g[e+40>>2]*j+ +g[e+44>>2]*i;g[a+52>>2]=+g[e+4>>2]*k+ +g[e+8>>2]*j+ +g[e+12>>2]*i;g[a+56>>2]=h;g[a+60>>2]=f;g[a+64>>2]=0.0}k=+g[b+24>>2];g[a+68>>2]=(1.0-k)*+g[a+20>>2]+ +g[a+36>>2]*k;g[a+72>>2]=(1.0-k)*+g[a+24>>2]+ +g[a+40>>2]*k;g[a+76>>2]=(1.0-k)*+g[a+28>>2]+ +g[a+44>>2]*k;return +(+g[b+24>>2])}function yj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0;h=+g[b>>2];i=+g[b+16>>2];j=h<i?h:i;f=+g[b+32>>2];if((j<f?j:f)>+g[a+24>>2])return;k=h>i?b:b+16|0;if(+g[(+g[k>>2]>f?k:b+32|0)>>2]<+g[a+8>>2])return;f=+g[b+8>>2];h=+g[b+24>>2];j=f<h?f:h;i=+g[b+40>>2];if((j<i?j:i)>+g[a+32>>2])return;k=f>h?b+8|0:b+24|0;if(+g[(+g[k>>2]>i?k:b+40|0)>>2]<+g[a+16>>2])return;f=+g[b+4>>2];h=+g[b+20>>2];j=f<h?f:h;i=+g[b+36>>2];if((j<i?j:i)>+g[a+28>>2])return;k=f>h?b+4|0:b+20|0;if(+g[(+g[k>>2]>i?k:b+36|0)>>2]<+g[a+12>>2])return;k=c[a+4>>2]|0;Yb[c[(c[k>>2]|0)+8>>2]&127](k,b,d,e);return}function zj(b){b=b|0;var d=0,e=0,f=0,h=0.0;e=i;i=i+96|0;a[b+92>>0]=1;if(!(a[22104]|0)){a[22104]=1;c[6043]=1065353216;c[6044]=0;c[6045]=0;c[6046]=0;c[6047]=0;c[6048]=1065353216;c[6049]=0;c[6050]=0;c[6051]=0;c[6052]=0;c[6053]=1065353216;g[6054]=0.0;c[6055]=-1082130432;c[6056]=0;c[6057]=0;c[6058]=0;c[6059]=0;c[6060]=-1082130432;c[6061]=0;c[6062]=0;c[6063]=0;c[6064]=0;c[6065]=-1082130432;g[6066]=0.0}d=e;f=d+96|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(f|0));Yb[c[(c[b>>2]|0)+76>>2]&127](b,24172,e,6);h=+g[b+48>>2];g[b+76>>2]=+g[e>>2]+h;g[b+60>>2]=+g[e+48>>2]-h;g[b+80>>2]=+g[e+20>>2]+h;g[b+64>>2]=+g[e+68>>2]-h;g[b+84>>2]=+g[e+40>>2]+h;g[b+68>>2]=+g[e+88>>2]-h;i=e;return}function Aj(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0,j=0.0,k=0.0,l=0.0;h=i;i=i+16|0;g[b+32>>2]=f;c[b+8>>2]=c[d>>2];c[b+8+4>>2]=c[d+4>>2];c[b+8+8>>2]=c[d+8>>2];c[b+8+12>>2]=c[d+12>>2];j=+g[b+28>>2];l=+g[e+4>>2]-j*+g[d+4>>2];k=+g[e+8>>2]-j*+g[d+8>>2];g[h>>2]=+g[e>>2]-+g[d>>2]*j;g[h+4>>2]=l;g[h+8>>2]=k;g[h+12>>2]=0.0;f=+g[b+24>>2]+j+f;g[b+32>>2]=f;if(!(f<0.0)){b=b+4|0;b=c[b>>2]|0;e=c[b>>2]|0;e=e+16|0;e=c[e>>2]|0;Tb[e&15](b,d,h,f);i=h;return}a[b+36>>0]=1;b=b+4|0;b=c[b>>2]|0;e=c[b>>2]|0;e=e+16|0;e=c[e>>2]|0;Tb[e&15](b,d,h,f);i=h;return}function Bj(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;if((c[d+60>>2]|0)==2){g=c[d+48>>2]|0;Wg(b+64|0,g)|0;f=c[b+68>>2]|0;if(f|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0)}c[b+68>>2]=g;c[b+76>>2]=(c[b+76>>2]|0)+-1}else{f=c[d+48>>2]|0;Wg(b+4|0,f)|0;g=c[b+8>>2]|0;if(g|0){c[6325]=(c[6325]|0)+1;Rc(c[g+-4>>2]|0)}c[b+8>>2]=f;c[b+16>>2]=(c[b+16>>2]|0)+-1}f=c[d+52>>2]|0;g=c[d+56>>2]|0;if(!f)c[b+124+(c[d+60>>2]<<2)>>2]=g;else c[f+56>>2]=g;f=c[d+56>>2]|0;if(f|0)c[f+52>>2]=c[d+52>>2];g=c[b+136>>2]|0;Ub[c[(c[g>>2]|0)+16>>2]&127](g,d,e);c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);a[b+194>>0]=1;return}function Cj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+96|0;g=c[b+192>>2]|0;c[f+64>>2]=0;c[f+64+4>>2]=g;c[f+64+8>>2]=b;c[f+64+12>>2]=b+4;c[f+64+16>>2]=-1;c[f+64+20>>2]=-1;b=c[d+192>>2]|0;c[f+40>>2]=0;c[f+40+4>>2]=b;c[f+40+8>>2]=d;c[f+40+12>>2]=d+4;c[f+40+16>>2]=-1;c[f+40+20>>2]=-1;b=c[a+24>>2]|0;b=sb[c[(c[b>>2]|0)+8>>2]&31](b,f+64|0,f+40|0,0)|0;if(!b){i=f;return}c[f+4>>2]=0;c[f+8>>2]=f+64;c[f+12>>2]=f+40;c[f>>2]=6008;c[f+32>>2]=e;ib[c[(c[b>>2]|0)+8>>2]&31](b,f+64|0,f+40|0,a+28|0,f);kb[c[c[b>>2]>>2]&255](b);g=c[a+24>>2]|0;mb[c[(c[g>>2]|0)+60>>2]&127](g,b);i=f;return}function Dj(a,b,d){a=a|0;b=+b;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;e=+g[a+32>>2];f=+g[a+36>>2];i=+g[a+40>>2];j=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);h=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);i=+Cb[c[(c[a>>2]|0)+48>>2]&15](a)+i;switch(c[a+56>>2]|0){case 0:{j=b*.25*(h+f)*(h+f)+b/12.0*(j+e)*(j+e)*4.0;g[d>>2]=b*.5*(h+f)*(h+f);g[d+4>>2]=j;g[d+8>>2]=j;g[d+12>>2]=0.0;return}case 2:{g[d>>2]=b*.25*(j+e)*(j+e)+b/12.0*i*i*4.0;g[d+4>>2]=b*.25*(j+e)*(j+e)+b/12.0*i*i*4.0;g[d+8>>2]=b*.5*(j+e)*(j+e);g[d+12>>2]=0.0;return}default:{i=b*.25*(j+e)*(j+e)+b/12.0*(h+f)*(h+f)*4.0;g[d>>2]=i;g[d+4>>2]=b*.5*(j+e)*(j+e);g[d+8>>2]=i;g[d+12>>2]=0.0;return}}}function Ej(a){a=a|0;var b=0;c[a>>2]=3428;b=c[a+92>>2]|0;kb[c[c[b>>2]>>2]&255](b);b=c[a+92>>2]|0;if(b|0){c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0)}b=c[a+96>>2]|0;kb[c[c[b>>2]>>2]&255](b);b=c[a+96>>2]|0;if(b|0){c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0)}b=c[a+100>>2]|0;kb[c[c[b>>2]>>2]&255](b);b=c[a+100>>2]|0;if(b|0){c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0)}b=c[a+104>>2]|0;kb[c[c[b>>2]>>2]&255](b);b=c[a+104>>2]|0;if(b|0){c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0)}b=c[a+108>>2]|0;kb[c[c[b>>2]>>2]&255](b);b=c[a+108>>2]|0;if(!b){Xe(a);return}c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);Xe(a);return}function Fj(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0;f=i;i=i+16|0;c[b+4>>2]=d;c[b>>2]=4276;c[b+8>>2]=-1;c[b+12>>2]=-1;g[b+16>>2]=34028234663852886.0e22;a[b+20>>0]=1;a[b+21>>0]=0;c[b+24>>2]=-1;c[b+28>>2]=e;if(!(a[22088]|0)){a[22088]=1;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;If(22832,0.0,0,0,f)}c[5759]=c[5759]|1;g[5804]=0.0;h=+g[5814]*0.0;j=+g[5815]*0.0;g[5809]=+g[5813]*0.0;g[5810]=h;g[5811]=j;g[5812]=0.0;c[5817]=0;c[5818]=0;c[5819]=0;c[5820]=0;j=+g[5806]*0.0;h=+g[5807]*0.0;g[5858]=+g[5805]*0.0;g[5859]=j;g[5860]=h;g[5861]=0.0;c[b+32>>2]=22832;g[b+36>>2]=0.0;g[b+40>>2]=.30000001192092896;c[b+44>>2]=0;i=f;return}function Gj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0,i=0.0,j=0.0,k=0.0,l=0,m=0;m=c[b+56>>2]|0;l=c[m+32>>2]|0;b=c[l>>2]|0;m=c[m+24>>2]|0;if((m|0)<=1){m=b;m=m+8|0;c[a>>2]=c[m>>2];c[a+4>>2]=c[m+4>>2];c[a+8>>2]=c[m+8>>2];c[a+12>>2]=c[m+12>>2];return}j=+g[d>>2];k=+g[d+4>>2];i=+g[d+8>>2];d=0;h=1;e=j*+g[b+8>>2]+k*+g[b+12>>2]+i*+g[b+16>>2];while(1){b=c[l+(h<<2)>>2]|0;f=j*+g[b+8>>2]+k*+g[b+12>>2]+i*+g[b+16>>2];b=f>e;d=b?h:d;h=h+1|0;if((h|0)==(m|0))break;else e=b?f:e}m=c[l+(d<<2)>>2]|0;m=m+8|0;c[a>>2]=c[m>>2];c[a+4>>2]=c[m+4>>2];c[a+8>>2]=c[m+8>>2];c[a+12>>2]=c[m+12>>2];return}function Hj(a){a=a|0;var b=0.0,c=0.0,d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;n=+g[a+4>>2];h=+g[a+436>>2];m=+g[a+8>>2];e=+g[a+440>>2];l=+g[a+12>>2];c=+g[a+444>>2];k=+g[a+20>>2];j=+g[a+24>>2];i=+g[a+28>>2];f=+g[a+36>>2];d=+g[a+40>>2];b=+g[a+44>>2];g[a+304>>2]=n*h*n+m*e*m+l*c*l;g[a+308>>2]=n*h*k+m*e*j+l*c*i;g[a+312>>2]=n*h*f+m*e*d+l*c*b;g[a+316>>2]=0.0;g[a+320>>2]=h*k*n+e*j*m+c*i*l;g[a+324>>2]=h*k*k+e*j*j+c*i*i;g[a+328>>2]=h*k*f+e*j*d+c*i*b;g[a+332>>2]=0.0;g[a+336>>2]=h*f*n+e*d*m+c*b*l;g[a+340>>2]=h*f*k+e*d*j+c*b*i;g[a+344>>2]=h*f*f+e*d*d+c*b*b;g[a+348>>2]=0.0;return}function Ij(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0;if(a[b+738>>0]|0){c[d>>2]=0;c[d+4>>2]=0;return}c[d>>2]=5;c[d+4>>2]=1;e=+_i(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);g[b+728>>2]=e;g[b+708>>2]=0.0;g[b+712>>2]=0.0;a[b+716>>0]=0;f=+g[b+692>>2];do if(f>=0.0){e=+jh(e-+g[b+688>>2],6.2831854820251465);if(!(e<-3.1415927410125732)){if(e>3.1415927410125732)e=e+-6.2831854820251465}else e=e+6.2831854820251465;if(e<-f){a[b+716>>0]=1;g[b+708>>2]=-(e+f);g[b+712>>2]=1.0;break}if(e>f){a[b+716>>0]=1;g[b+708>>2]=f-e;g[b+712>>2]=-1.0}else h=12}else h=12;while(0);if((h|0)==12?(a[b+737>>0]|0)==0:0)return;c[d>>2]=6;c[d+4>>2]=0;return}function Jj(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;c[b>>2]=5628;e=c[b+8>>2]|0;d=c[b+16>>2]|0;if((e|0)>0){h=0;do{f=(c[d+(h<<2)>>2]|0)+188|0;g=c[f>>2]|0;if(g){e=c[b+68>>2]|0;e=ob[c[(c[e>>2]|0)+36>>2]&127](e)|0;Ub[c[(c[e>>2]|0)+40>>2]&127](e,g,c[b+24>>2]|0);e=c[b+68>>2]|0;Ub[c[(c[e>>2]|0)+12>>2]&127](e,g,c[b+24>>2]|0);c[f>>2]=0;e=c[b+8>>2]|0;d=c[b+16>>2]|0}h=h+1|0}while((h|0)<(e|0))}if(!d){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}function Kj(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;d=c[d>>2]|0;c[b+4>>2]=d;c[b>>2]=3880;a[b+8>>0]=g&1;c[b+12>>2]=4092;c[b+60>>2]=d;c[b+64>>2]=0;a[b+88>>0]=1;c[b+84>>2]=0;c[b+76>>2]=0;c[b+80>>2]=0;a[b+108>>0]=1;c[b+104>>2]=0;c[b+96>>2]=0;c[b+100>>2]=0;a[b+128>>0]=1;c[b+124>>2]=0;c[b+116>>2]=0;c[b+120>>2]=0;a[b+148>>0]=1;c[b+144>>2]=0;c[b+136>>2]=0;c[b+140>>2]=0;if(g){c[b+16>>2]=c[f+8>>2];f=e;f=f+8|0;f=c[f>>2]|0;g=b+20|0;c[g>>2]=f;Sf(b+12|0);return}else{c[b+16>>2]=c[e+8>>2];f=f+8|0;f=c[f>>2]|0;g=b+20|0;c[g>>2]=f;Sf(b+12|0);return}}function Lj(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,h=0,i=0.0,j=0.0;c[a+248>>2]=c[b>>2];c[a+248+4>>2]=c[b+4>>2];c[a+248+8>>2]=c[b+8>>2];c[a+248+12>>2]=c[b+12>>2];d=c[a+232>>2]|0;if((d|0)<=0)return;h=0;do{f=c[(c[a+240>>2]|0)+(h<<2)>>2]|0;switch(c[f+216>>2]|0){case 2:case 5:break;default:if(!(c[f+544>>2]&1)){e=+g[f+384>>2];if(e!=0.0){j=1.0/e*+g[b+4>>2];i=1.0/e*+g[b+8>>2];g[f+404>>2]=1.0/e*+g[b>>2];g[f+408>>2]=j;g[f+412>>2]=i;g[f+416>>2]=0.0}c[f+420>>2]=c[b>>2];c[f+420+4>>2]=c[b+4>>2];c[f+420+8>>2]=c[b+8>>2];c[f+420+12>>2]=c[b+12>>2];d=c[a+232>>2]|0}}h=h+1|0}while((h|0)<(d|0));return}function Mj(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0;c[6324]=(c[6324]|0)+1;h=ic(379)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}c[h+4>>2]=3;c[h+8>>2]=-1;c[h+12>>2]=-1;g[h+16>>2]=34028234663852886.0e22;a[h+20>>0]=1;a[h+21>>0]=0;c[h+24>>2]=-1;c[h+28>>2]=b;c[h+32>>2]=d;g[h+36>>2]=0.0;g[h+40>>2]=.30000001192092896;c[h+44>>2]=0;c[h>>2]=4508;d=h+300|0;c[d>>2]=c[e>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];e=h+316|0;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];c[h+332>>2]=0;a[h+344>>0]=0;g[h+348>>2]=.30000001192092896;g[h+352>>2]=1.0;g[h+356>>2]=0.0;return h|0}function Nj(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0,h=0.0,i=0.0,j=0.0;e=c[a+204>>2]|0;if(b==0.0){c[a+204>>2]=e|1;h=0.0}else{c[a+204>>2]=e&-2;h=1.0/b}g[a+384>>2]=h;j=+g[a+424>>2]*b;i=+g[a+428>>2]*b;g[a+404>>2]=+g[a+420>>2]*b;g[a+408>>2]=j;g[a+412>>2]=i;g[a+416>>2]=0.0;b=+g[d>>2];f=b!=0.0?(g[l>>2]=1.0/b,c[l>>2]|0):0;b=+g[d+4>>2];e=b!=0.0?(g[l>>2]=1.0/b,c[l>>2]|0):0;b=+g[d+8>>2];d=b!=0.0?(g[l>>2]=1.0/b,c[l>>2]|0):0;c[a+436>>2]=f;c[a+440>>2]=e;c[a+444>>2]=d;g[a+448>>2]=0.0;i=h*+g[a+392>>2];j=h*+g[a+396>>2];g[a+600>>2]=+g[a+388>>2]*h;g[a+604>>2]=i;g[a+608>>2]=j;g[a+612>>2]=0.0;return}function Oj(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0,h=0;f=i;i=i+256|0;e=c[b+212>>2]|0;if((e|0)>-1){a=e;i=f;return a|0}h=(c[b+248>>2]&2|0)==0;e=h?0:b;do if(!h){if(!(+g[e+384>>2]!=0.0)?(c[e+204>>2]&2|0)==0:0)break;h=c[a+8>>2]|0;yn(f|0,0,244)|0;ve(pf(a+4|0,f)|0,b,d);c[b+212>>2]=h;i=f;return h|0}while(0);e=c[a+188>>2]|0;if((e|0)>=0){h=e;i=f;return h|0}c[a+188>>2]=c[a+8>>2];yn(f|0,0,244)|0;ve(pf(a+4|0,f)|0,0,d);h=c[a+188>>2]|0;i=f;return h|0}function Pj(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var i=0;c[6324]=(c[6324]|0)+1;i=ic(1407)|0;if(!i)i=0;else{c[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}ue(i,b,d,e,f,h);c[i>>2]=4388;c[i+4>>2]=9;a[i+1309>>0]=0;g[i+1316>>2]=0.0;g[i+1340>>2]=0.0;g[i+1364>>2]=1.0;a[i+1310>>0]=0;g[i+1320>>2]=0.0;g[i+1344>>2]=0.0;g[i+1368>>2]=1.0;a[i+1311>>0]=0;g[i+1324>>2]=0.0;g[i+1348>>2]=0.0;g[i+1372>>2]=1.0;a[i+1312>>0]=0;g[i+1328>>2]=0.0;g[i+1352>>2]=0.0;g[i+1376>>2]=1.0;a[i+1313>>0]=0;g[i+1332>>2]=0.0;g[i+1356>>2]=0.0;g[i+1380>>2]=1.0;a[i+1314>>0]=0;g[i+1336>>2]=0.0;g[i+1360>>2]=0.0;g[i+1384>>2]=1.0;return i|0}function Qj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=c[b+280>>2]|0;if((e|0)==(c[b+284>>2]|0)?(h=e|0?e<<1:1,(e|0)<(h|0)):0){if(!h)g=0;else{c[6324]=(c[6324]|0)+1;e=ic((h<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}g=e;e=c[b+280>>2]|0}if((e|0)>0){f=0;do{c[g+(f<<2)>>2]=c[(c[b+288>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(e|0))}f=c[b+288>>2]|0;if(f){if(a[b+292>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[f+-4>>2]|0);e=c[b+280>>2]|0}c[b+288>>2]=0}a[b+292>>0]=1;c[b+288>>2]=g;c[b+284>>2]=h}c[(c[b+288>>2]|0)+(e<<2)>>2]=d;c[b+280>>2]=e+1;return}function Rj(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0;e=i;i=i+96|0;c[e+32>>2]=1065353216;c[e+32+4>>2]=0;c[e+32+4+4>>2]=0;c[e+32+4+8>>2]=0;c[e+32+4+12>>2]=0;c[e+32+20>>2]=1065353216;c[e+32+24>>2]=0;c[e+32+24+4>>2]=0;c[e+32+24+8>>2]=0;c[e+32+24+12>>2]=0;c[e+32+40>>2]=1065353216;k=e+32+44|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;Yb[c[(c[a>>2]|0)+8>>2]&127](a,e+32|0,e+16|0,e);h=(+g[e>>2]-+g[e+16>>2])*.5*2.0;f=(+g[e+4>>2]-+g[e+16+4>>2])*.5*2.0;j=(+g[e+8>>2]-+g[e+16+8>>2])*.5*2.0;g[d>>2]=b/12.0*(f*f+j*j);g[d+4>>2]=b/12.0*(h*h+j*j);g[d+8>>2]=b/12.0*(h*h+f*f);i=e;return}function Sj(){var a=0,b=0,d=0,e=0;e=i;i=i+48|0;if(Za(25804,3)|0)Vi(21654,e);a=Qa(c[6452]|0)|0;if(a|0?(d=c[a>>2]|0,d|0):0){a=c[d+48>>2]|0;b=c[d+48+4>>2]|0;if(!((a&-256|0)==1126902528&(b|0)==1129074247)){c[e+32>>2]=21515;Vi(21465,e+32|0)}if((a|0)==1126902529&(b|0)==1129074247)a=c[d+44>>2]|0;else a=d+80|0;c[e+44>>2]=a;d=c[d>>2]|0;a=c[d+4>>2]|0;if(Al(2752,d,e+44|0)|0){d=c[e+44>>2]|0;d=ob[c[(c[d>>2]|0)+8>>2]&127](d)|0;c[e+8>>2]=21515;c[e+8+4>>2]=a;c[e+8+8>>2]=d;Vi(21379,e+8|0)}else{c[e+24>>2]=21515;c[e+24+4>>2]=a;Vi(21424,e+24|0)}}Vi(21503,e+40|0)}function Tj(a,b,c){a=+a;b=+b;c=+c;var d=0.0,e=0.0,f=0;if(b>=c)return +a;if(a<b){d=+jh(b-a,6.2831854820251465);if(!(d<-3.1415927410125732)){if(d>3.1415927410125732)d=d+-6.2831854820251465}else d=d+6.2831854820251465;e=+F(+d);d=+jh(c-a,6.2831854820251465);if(!(d<-3.1415927410125732)){if(d>3.1415927410125732)d=d+-6.2831854820251465}else d=d+6.2831854820251465;f=e<+F(+d);a=f?a:a+6.2831854820251465;return +a}if(!(a>c))return +a;d=+jh(a-c,6.2831854820251465);if(!(d<-3.1415927410125732)){if(d>3.1415927410125732)d=d+-6.2831854820251465}else d=d+6.2831854820251465;e=+F(+d);d=+jh(a-b,6.2831854820251465);if(!(d<-3.1415927410125732)){if(d>3.1415927410125732)d=d+-6.2831854820251465}else d=d+6.2831854820251465;f=+F(+d)<e;a=f?a+-6.2831854820251465:a;return +a}function Uj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;i=i+16|0;Ub[c[(c[b>>2]|0)+68>>2]&127](e,b,d);c[a>>2]=c[e>>2];c[a+4>>2]=c[e+4>>2];c[a+8>>2]=c[e+8>>2];c[a+12>>2]=c[e+12>>2];if(!(+Cb[c[(c[b>>2]|0)+48>>2]&15](b)!=0.0)){i=e;return}j=+g[d>>2];h=+g[d+4>>2];f=+g[d+8>>2];l=j*j+h*h+f*f<1.4210854715202004e-014?-1.0:j;k=j*j+h*h+f*f<1.4210854715202004e-014?-1.0:h;f=j*j+h*h+f*f<1.4210854715202004e-014?-1.0:f;h=1.0/+G(+(f*f+(l*l+k*k)));j=+Cb[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=+g[a>>2]+j*h*l;g[a+4>>2]=j*h*k+ +g[a+4>>2];g[a+8>>2]=j*h*f+ +g[a+8>>2];i=e;return}function Vj(a,b,d){a=a|0;b=+b;d=+d;var e=0.0,f=0.0,h=0.0;f=+g[a+692>>2];do if(f>0.0){h=+g[a+688>>2];e=+jh(b-h,6.2831854820251465);if(!(e<-3.1415927410125732)){if(e>3.1415927410125732)e=e+-6.2831854820251465}else e=e+6.2831854820251465;if(!(!(e<-f)&e<=f))if(e>0.0){b=+jh(f+h,6.2831854820251465);if(b<-3.1415927410125732){b=b+6.2831854820251465;break}if(!(b>3.1415927410125732))break;b=b+-6.2831854820251465;break}else{b=+jh(h-f,6.2831854820251465);if(b<-3.1415927410125732){b=b+6.2831854820251465;break}if(!(b>3.1415927410125732))break;b=b+-6.2831854820251465;break}}while(0);g[a+680>>2]=(b-+_i(a,(c[a+28>>2]|0)+4|0,(c[a+32>>2]|0)+4|0))/d;return}function Wj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0;a:do switch(b|0){case 2:{if((c|0)<1){d=+g[a+232>>2];break a}if((c|0)<3){d=+g[a+264>>2];break a}if((c|0)==3){d=+g[a+248>>2];break a}if((c|0)<6)d=+g[a+280>>2];else d=34028234663852886.0e22;break}case 3:{if((c|0)<1){d=+g[a+212>>2];break a}if((c|0)==3)d=+g[a+228>>2];else d=34028234663852886.0e22;break}case 4:{if((c|0)<1){d=+g[a+244>>2];break a}if((c|0)<3){d=+g[a+276>>2];break a}if((c|0)==3){d=+g[a+260>>2];break a}if((c|0)<6)d=+g[a+292>>2];else d=34028234663852886.0e22;break}default:d=34028234663852886.0e22}while(0);return +d}function Xj(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;e=+g[d>>2];f=+g[d+4>>2];h=+g[d+8>>2];if(e*e+f*f+h*h==0.0)e=+g[b+36>>2];else e=+G(+(e*e+f*f+h*h));g[b+32>>2]=e;g[b+20>>2]=e;a[b+249>>0]=1;e=+g[d>>2];f=+g[d+4>>2];h=+g[d+8>>2];if(e*e+f*f+h*h==0.0){i=+g[b+256>>2];f=+g[b+260>>2];e=+g[b+264>>2];d=b+268|0}else{j=1.0/+G(+(e*e+f*f+h*h));i=e*j;f=f*j;e=h*j;d=d+12|0}d=c[d>>2]|0;g[b+272>>2]=i;g[b+276>>2]=f;g[b+280>>2]=e;c[b+284>>2]=d;d=(c[b+8>>2]|0)+52|0;c[b+116>>2]=c[d>>2];c[b+116+4>>2]=c[d+4>>2];c[b+116+8>>2]=c[d+8>>2];c[b+116+12>>2]=c[d+12>>2];return}function Yj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,h=0.0,i=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0;n=c[b+100>>2]|0;if((n|0)<=0){c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;return}o=+g[b+16>>2];p=+g[d>>2]*o;k=+g[b+20>>2];l=+g[d+4>>2]*k;m=+g[b+24>>2];j=+g[d+8>>2]*m;f=c[b+108>>2]|0;d=-1;b=0;e=-34028234663852886.0e22;while(1){h=p*+g[f+(b<<4)>>2]+l*+g[f+(b<<4)+4>>2]+j*+g[f+(b<<4)+8>>2];i=h>e;d=i?b:d;b=b+1|0;if((b|0)==(n|0))break;else e=i?h:e}l=+g[f+(d<<4)+4>>2]*k;p=+g[f+(d<<4)+8>>2]*m;g[a>>2]=+g[f+(d<<4)>>2]*o;g[a+4>>2]=l;g[a+8>>2]=p;g[a+12>>2]=0.0;return}function Zj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;c[6041]=(c[6041]|0)+1;e=(c[b+12>>2]|0)>(c[d+12>>2]|0);f=c[(e?d:b)+12>>2]|0;e=c[(e?b:d)+12>>2]|0;b=((e<<16|f)+~((e<<16|f)<<15)>>10^(e<<16|f)+~((e<<16|f)<<15))*9|0;b=((b>>6^b)+~((b>>6^b)<<11)>>16^(b>>6^b)+~((b>>6^b)<<11))&(c[a+12>>2]|0)+-1;if((b|0)>=(c[a+32>>2]|0)){g=0;return g|0}b=c[(c[a+40>>2]|0)+(b<<2)>>2]|0;if((b|0)==-1){g=0;return g|0}d=c[a+16>>2]|0;while(1){if((c[(c[d+(b<<4)>>2]|0)+12>>2]|0)==(f|0)?(c[(c[d+(b<<4)+4>>2]|0)+12>>2]|0)==(e|0):0)break;b=c[(c[a+60>>2]|0)+(b<<2)>>2]|0;if((b|0)==-1){b=0;g=8;break}}if((g|0)==8)return b|0;g=d+(b<<4)|0;return g|0}function _j(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;c[6324]=(c[6324]|0)+1;f=ic(1407)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}Md(f,b,d,e);c[f>>2]=4388;c[f+4>>2]=9;a[f+1309>>0]=0;g[f+1316>>2]=0.0;g[f+1340>>2]=0.0;g[f+1364>>2]=1.0;a[f+1310>>0]=0;g[f+1320>>2]=0.0;g[f+1344>>2]=0.0;g[f+1368>>2]=1.0;a[f+1311>>0]=0;g[f+1324>>2]=0.0;g[f+1348>>2]=0.0;g[f+1372>>2]=1.0;a[f+1312>>0]=0;g[f+1328>>2]=0.0;g[f+1352>>2]=0.0;g[f+1376>>2]=1.0;a[f+1313>>0]=0;g[f+1332>>2]=0.0;g[f+1356>>2]=0.0;g[f+1380>>2]=1.0;a[f+1314>>0]=0;g[f+1336>>2]=0.0;g[f+1360>>2]=0.0;g[f+1384>>2]=1.0;return f|0}function $j(b){b=b|0;var d=0;c[b>>2]=3568;if(a[b+456>>0]|0?(d=c[b+452>>2]|0,kb[c[c[d>>2]>>2]&255](d),d=c[b+452>>2]|0,d|0):0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}d=c[b+420>>2]|0;if(d|0){if(a[b+424>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+420>>2]=0}a[b+424>>0]=1;c[b+420>>2]=0;c[b+412>>2]=0;c[b+416>>2]=0;d=c[b+336>>2]|0;if(!d){a[b+340>>0]=1;c[b+336>>2]=0;c[b+328>>2]=0;d=b+332|0;c[d>>2]=0;Dg(b);return}if(a[b+340>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+336>>2]=0;a[b+340>>0]=1;c[b+336>>2]=0;c[b+328>>2]=0;d=b+332|0;c[d>>2]=0;Dg(b);return}function ak(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;d=i;i=i+64|0;c[d+48>>2]=0;c[d+48+4>>2]=0;c[d+48+8>>2]=0;c[d+48+12>>2]=0;j=+g[b>>2];f=+g[b+4>>2];m=+g[b+8>>2];k=+g[b+12>>2];h=j*(2.0/(j*j+f*f+m*m+k*k));e=f*(2.0/(j*j+f*f+m*m+k*k));l=m*(2.0/(j*j+f*f+m*m+k*k));g[d>>2]=1.0-(f*e+m*l);g[d+4>>2]=j*e-k*l;g[d+8>>2]=j*l+k*e;g[d+12>>2]=0.0;g[d+16>>2]=j*e+k*l;g[d+20>>2]=1.0-(j*h+m*l);g[d+24>>2]=f*l-k*h;g[d+28>>2]=0.0;g[d+32>>2]=j*l-k*e;g[d+36>>2]=f*l+k*h;g[d+40>>2]=1.0-(j*h+f*e);g[d+44>>2]=0.0;zd(a,d);i=d;return}function bk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,m=0,n=0,o=0;f=i;i=i+48|0;Ub[c[(c[a>>2]|0)+124>>2]&127](a,f+32|0,e);o=c[f+32>>2]|0;n=c[f+32+4>>2]|0;m=c[f+32+8>>2]|0;c[b>>2]=o;c[b+4>>2]=n;c[b+8>>2]=m;g[b+12>>2]=0.0;e=c[(c[a>>2]|0)+64>>2]|0;k=-(c[l>>2]=o,+g[l>>2]);j=-(c[l>>2]=n,+g[l>>2]);h=-(c[l>>2]=m,+g[l>>2]);g[f>>2]=k;g[f+4>>2]=j;g[f+8>>2]=h;g[f+12>>2]=0.0;Ub[e&127](f+16|0,a,f);c[d>>2]=c[f+16>>2];c[d+4>>2]=c[f+16+4>>2];c[d+8>>2]=c[f+16+8>>2];c[d+12>>2]=c[f+16+12>>2];i=f;return}function ck(a,b,d){a=a|0;b=b|0;d=d|0;do if(!((b|0)==8&(d|0)==8)){if((b|0)==8&(d|0)==1){a=a+76|0;break}if((b|0)==1&(d|0)==8){a=a+80|0;break}if(!(d|b)){a=a+72|0;break}if((b|0)<20&(d|0)==28){a=a+88|0;break}if((b|0)==28&(d|0)<20){a=a+84|0;break}if((b|0)<20){if((d|0)<20){a=a+32|0;break}if((d+-21|0)>>>0<9){a=a+36|0;break}}else{if((d|0)<20&(b+-21|0)>>>0<9){a=a+40|0;break}if((b|0)==31)if((d|0)==31){a=a+48|0;break}else{a=a+44|0;break}}if((d|0)==31){a=a+52|0;break}else{a=a+56|0;break}}else a=a+60|0;while(0);return c[a>>2]|0}function dk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0;f=+g[a+32>>2];h=+g[a+36>>2];e=+g[a+40>>2];switch(d|0){case 0:{c[b>>2]=1065353216;c[b+4>>2]=0;c[b+8>>2]=0;g[b+12>>2]=-f;return}case 1:{c[b>>2]=-1082130432;c[b+4>>2]=0;c[b+8>>2]=0;g[b+12>>2]=-f;return}case 2:{c[b>>2]=0;c[b+4>>2]=1065353216;c[b+8>>2]=0;g[b+12>>2]=-h;return}case 3:{c[b>>2]=0;c[b+4>>2]=-1082130432;c[b+8>>2]=0;g[b+12>>2]=-h;return}case 4:{c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=1065353216;g[b+12>>2]=-e;return}case 5:{c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=-1082130432;g[b+12>>2]=-e;return}default:return}}function ek(a,b,d,e,f){a=a|0;b=b|0;d=+d;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;h=i;i=i+48|0;c[h+32>>2]=e;c[h+32+4>>2]=f;n=+g[b>>2];m=+g[b+4>>2];j=+g[b+8>>2];l=+g[a+56>>2]*n+ +g[a+60>>2]*m+ +g[a+64>>2]*j;k=n*+g[a+72>>2]+m*+g[a+76>>2]+j*+g[a+80>>2];j=n*+g[a+88>>2]+m*+g[a+92>>2]+j*+g[a+96>>2];c[h>>2]=c[a+48>>2];c[h+4>>2]=h+32;g[h+8>>2]=l;g[h+12>>2]=k;g[h+16>>2]=j;g[h+20>>2]=0.0;g[h+24>>2]=d;f=c[a+44>>2]|0;d=+Kb[c[(c[f>>2]|0)+12>>2]&15](f,h,1);i=h;return +d}function fk(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;if(e>>>0<3)switch(b|0){case 2:{g[a+756+(e<<2)>>2]=d;c[a+1304>>2]=c[a+1304>>2]|4<<e*3;return}case 4:{g[a+772+(e<<2)>>2]=d;c[a+1304>>2]=c[a+1304>>2]|2<<e*3;return}case 3:{g[a+740+(e<<2)>>2]=d;c[a+1304>>2]=c[a+1304>>2]|1<<e*3;return}default:return}if((e+-3|0)>>>0>=3)return;switch(b|0){case 2:{g[a+868+(e+-3<<6)+32>>2]=d;c[a+1304>>2]=c[a+1304>>2]|4<<e*3;return}case 4:{g[a+868+(e+-3<<6)+36>>2]=d;c[a+1304>>2]=c[a+1304>>2]|2<<e*3;return}case 3:{g[a+868+(e+-3<<6)+28>>2]=d;c[a+1304>>2]=c[a+1304>>2]|1<<e*3;return}default:return}}function gk(b){b=b|0;var d=0;c[b>>2]=4896;d=c[b+80>>2]|0;if(d|0){if(a[b+84>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+80>>2]=0}a[b+84>>0]=1;c[b+80>>2]=0;c[b+72>>2]=0;c[b+76>>2]=0;d=c[b+60>>2]|0;if(d|0){if(a[b+64>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=0;c[b+52>>2]=0;c[b+56>>2]=0;d=c[b+40>>2]|0;if(!d){a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;b=b+36|0;c[b>>2]=0;return}if(a[b+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+40>>2]=0;a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;b=b+36|0;c[b>>2]=0;return}function hk(b){b=b|0;var d=0;c[b>>2]=5384;d=c[b+60>>2]|0;if(d|0){if(a[b+64>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=0;c[b+52>>2]=0;c[b+56>>2]=0;d=c[b+40>>2]|0;if(d|0){if(a[b+44>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;c[b+36>>2]=0;d=c[b+16>>2]|0;if(!d){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}function ik(b){b=b|0;var d=0;c[b>>2]=6412;d=c[b+56>>2]|0;if(d|0){if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;d=c[b+36>>2]|0;if(d|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;d=c[b+16>>2]|0;if(!d){d=b+12|0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[d>>2]=0;return}if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0;d=b+12|0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[d>>2]=0;return}function jk(b){b=b|0;var d=0;c[b>>2]=9400;d=c[b+56>>2]|0;if(d|0){if(a[b+60>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;d=c[b+36>>2]|0;if(d|0){if(a[b+40>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;d=c[b+16>>2]|0;if(!d){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;b=b+12|0;c[b>>2]=0;return}function kk(b){b=b|0;var d=0;c[b>>2]=6340;d=c[b+324>>2]|0;kb[c[c[d>>2]>>2]&255](d);d=c[b+324>>2]|0;if(d|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b>>2]=6296;d=c[b+316>>2]|0;if(d|0){if(a[b+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+316>>2]=0}a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;c[b>>2]=5592;d=c[b+292>>2]|0;if(!d){a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;b=b+288|0;c[b>>2]=0;return}if(a[b+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+292>>2]=0;a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;b=b+288|0;c[b>>2]=0;return}function lk(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=+e;f=f|0;h=h|0;var j=0;j=i;i=i+64|0;c[j+48>>2]=f;c[j+48+4>>2]=h;f=c[a+212>>2]|0;if(!(+g[f+4>>2]>=e)){i=j;return +e}c[j>>2]=c[a+216>>2];c[j+4>>2]=j+48;c[j+8>>2]=c[b>>2];c[j+8+4>>2]=c[b+4>>2];c[j+8+8>>2]=c[b+8>>2];c[j+8+12>>2]=c[b+12>>2];c[j+24>>2]=c[d>>2];c[j+24+4>>2]=c[d+4>>2];c[j+24+8>>2]=c[d+8>>2];c[j+24+12>>2]=c[d+12>>2];g[j+40>>2]=e;e=+Kb[c[(c[f>>2]|0)+12>>2]&15](f,j,1);i=j;return +e}function mk(b){b=b|0;var d=0,e=0,f=0,g=0;while(1){d=ic(5260)|0;if(d|0)break;d=c[6453]|0;c[6453]=d+0;if(!d){d=0;break}Vb[d&3]()}c[d>>2]=5500;c[d+4>>2]=2;a[d+24>>0]=1;c[d+20>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[d+28>>2]=6384;f=d+5256|0;c[f>>2]=b;c[d+60>>2]=79;c[d+64>>2]=ob[c[(c[b>>2]|0)+12>>2]&127](b)|0;c[d+68>>2]=ob[c[(c[b>>2]|0)+8>>2]&127](b)|0;b=0;do{e=0;do{g=c[f>>2]|0;c[d+72+(b*144|0)+(e<<2)>>2]=yb[c[(c[g>>2]|0)+16>>2]&63](g,b,e)|0;e=e+1|0}while((e|0)<36);b=b+1|0}while((b|0)<36);return d|0}function nk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0,i=0.0,j=0,k=0.0,l=0;k=+g[b+64>>2]*.5;l=c[b+72>>2]|0;e=+g[d>>2];f=+g[d+4>>2];i=+g[d+8>>2];i=+G(+(e*e+f*f+i*i));h=c[b+68>>2]|0;if(+g[d+(l<<2)>>2]>i*+g[b+56>>2]){g[a+(h<<2)>>2]=0.0;g[a+(l<<2)>>2]=k;g[a+(c[b+76>>2]<<2)>>2]=0.0;return}i=+g[d+(h<<2)>>2];j=c[b+76>>2]|0;e=+g[d+(j<<2)>>2];f=+G(+(i*i+e*e));if(f>1.1920928955078125e-007){f=+g[b+60>>2]/f;g[a+(h<<2)>>2]=i*f;g[a+(l<<2)>>2]=-k;g[a+(j<<2)>>2]=e*f;return}else{g[a+(h<<2)>>2]=0.0;g[a+(l<<2)>>2]=-k;g[a+(j<<2)>>2]=0.0;return}}function ok(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0;if(!a)return;if(!(c[a+180>>2]&1))return;p=+g[a+4>>2];r=+g[b>>2];m=+g[a+20>>2];q=+g[b+4>>2];j=+g[a+36>>2];d=+g[b+8>>2];o=+g[a+8>>2];l=+g[a+24>>2];h=+g[a+40>>2];n=+g[a+12>>2];k=+g[a+28>>2];e=+g[a+44>>2];i=(p*r+m*q+j*d)*+g[a+164>>2];f=(r*o+q*l+d*h)*+g[a+168>>2];d=(r*n+q*k+d*e)*+g[a+172>>2];g[b>>2]=p*i+o*f+n*d;g[b+4>>2]=m*i+l*f+k*d;g[b+8>>2]=j*i+h*f+e*d;g[b+12>>2]=0.0;return}function pk(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=c[e+16>>2]|0;if(!f){if(!(po(e)|0)){g=c[e+16>>2]|0;h=5}}else{g=f;h=5}a:do if((h|0)==5){f=c[e+20>>2]|0;if((g-f|0)>>>0<d>>>0){yb[c[e+36>>2]&63](e,b,d)|0;break}b:do if((a[e+75>>0]|0)>-1){h=d;while(1){if(!h){g=d;break b}g=h+-1|0;if((a[b+g>>0]|0)==10)break;else h=g}if((yb[c[e+36>>2]&63](e,b,h)|0)>>>0<h>>>0)break a;g=d-h|0;b=b+h|0;f=c[e+20>>2]|0}else g=d;while(0);Lm(f|0,b|0,g|0)|0;c[e+20>>2]=(c[e+20>>2]|0)+g}while(0);return}function qk(b){b=b|0;var d=0;d=c[b+52>>2]|0;if(d|0){if(a[b+56>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;d=c[b+32>>2]|0;if(d|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;d=c[b+12>>2]|0;if(!d){a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;b=b+8|0;c[b>>2]=0;return}if(a[b+16>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+12>>2]=0;a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;b=b+8|0;c[b>>2]=0;return}function rk(b,d,e){b=b|0;d=d|0;e=e|0;while(1){b=ic(144)|0;if(b|0)break;b=c[6453]|0;c[6453]=b+0;if(!b){b=0;break}Vb[b&3]()}c[b>>2]=4952;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;c[b+72>>2]=0;c[b+92>>2]=e;g[b+96>>2]=0.0;a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;c[b+108>>2]=d;c[b+112>>2]=0;c[b+116>>2]=2;c[b+120>>2]=1;g[b+104>>2]=0.0;g[b+100>>2]=0.0;return b|0}function sk(b){b=b|0;var d=0,e=0;if(a[21968]|0){d=b+92|0;b=22144;e=b+84|0;do{c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0}while((b|0)<(e|0));return 22144}a[21968]=1;g[5536]=.6000000238418579;g[5537]=1.0;g[5538]=.30000001192092896;g[5539]=.01666666753590107;g[5540]=0.0;g[5542]=20.0;c[5541]=10;g[5544]=.20000000298023224;g[5545]=.20000000298023224;g[5546]=0.0;g[5543]=1.0;c[5547]=1;g[5548]=-.03999999910593033;g[5549]=.10000000149011612;g[5550]=0.0;g[5551]=.8500000238418579;c[5552]=260;c[5553]=2;c[5554]=128;g[5555]=100.0;g[5556]=10000000150474662.0e14;d=b+92|0;b=22144;e=b+84|0;do{c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0}while((b|0)<(e|0));return 22144}function tk(b){b=b|0;var d=0,e=0;if(a[22016]|0){d=b+92|0;b=22388;e=b+84|0;do{c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0}while((b|0)<(e|0));return 22388}a[22016]=1;g[5597]=.6000000238418579;g[5598]=1.0;g[5599]=.30000001192092896;g[5600]=.01666666753590107;g[5601]=0.0;g[5603]=20.0;c[5602]=10;g[5605]=.20000000298023224;g[5606]=.20000000298023224;g[5607]=0.0;g[5604]=1.0;c[5608]=1;g[5609]=-.03999999910593033;g[5610]=.10000000149011612;g[5611]=0.0;g[5612]=.8500000238418579;c[5613]=260;c[5614]=2;c[5615]=128;g[5616]=100.0;g[5617]=10000000150474662.0e14;d=b+92|0;b=22388;e=b+84|0;do{c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0}while((b|0)<(e|0));return 22388}function uk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;i=i+16|0;Ub[c[(c[b>>2]|0)+68>>2]&127](e,b,d);c[a>>2]=c[e>>2];c[a+4>>2]=c[e+4>>2];c[a+8>>2]=c[e+8>>2];c[a+12>>2]=c[e+12>>2];j=+g[d>>2];h=+g[d+4>>2];f=+g[d+8>>2];l=j*j+h*h+f*f<1.4210854715202004e-014?-1.0:j;k=j*j+h*h+f*f<1.4210854715202004e-014?-1.0:h;f=j*j+h*h+f*f<1.4210854715202004e-014?-1.0:f;h=1.0/+G(+(f*f+(l*l+k*k)));j=+Cb[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=+g[a>>2]+j*h*l;g[a+4>>2]=j*h*k+ +g[a+4>>2];g[a+8>>2]=j*h*f+ +g[a+8>>2];i=e;return}function vk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=c[b+188>>2]|0;if(d|0){g=c[a+68>>2]|0;g=ob[c[(c[g>>2]|0)+36>>2]&127](g)|0;Ub[c[(c[g>>2]|0)+40>>2]&127](g,d,c[a+24>>2]|0);g=c[a+68>>2]|0;Ub[c[(c[g>>2]|0)+12>>2]&127](g,d,c[a+24>>2]|0);c[b+188>>2]=0}f=c[a+8>>2]|0;if((f|0)<=0)return;g=c[a+16>>2]|0;d=0;while(1){e=g+(d<<2)|0;if((c[e>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(f|0)){h=9;break}}if((h|0)==9)return;if((d|0)>=(f|0))return;c[e>>2]=c[g+(f+-1<<2)>>2];c[(c[a+16>>2]|0)+(f+-1<<2)>>2]=b;c[a+8>>2]=f+-1;return}function wk(b){b=b|0;var d=0,e=0;if(a[22032]|0){d=b+92|0;b=22488;e=b+84|0;do{c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0}while((b|0)<(e|0));return 22488}a[22032]=1;g[5622]=.6000000238418579;g[5623]=1.0;g[5624]=.30000001192092896;g[5625]=.01666666753590107;g[5626]=0.0;g[5628]=20.0;c[5627]=10;g[5630]=.20000000298023224;g[5631]=.20000000298023224;g[5632]=0.0;g[5629]=1.0;c[5633]=1;g[5634]=-.03999999910593033;g[5635]=.10000000149011612;g[5636]=0.0;g[5637]=.8500000238418579;c[5638]=260;c[5639]=2;c[5640]=128;g[5641]=100.0;g[5642]=10000000150474662.0e14;d=b+92|0;b=22488;e=b+84|0;do{c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0}while((b|0)<(e|0));return 22488}function xk(a,b,d,f){a=a|0;b=b|0;d=d|0;f=f|0;var g=0,h=0,i=0;while(1){g=c[a+12>>2]|0;if(!(((e[f>>1]|0)>=(e[a>>1]|0)?(e[d>>1]|0)<=(e[a+6>>1]|0):0)&(e[d+4>>1]|0)<=(e[a+10>>1]|0)&(e[f+4>>1]|0)>=(e[a+4>>1]|0)&(e[d+2>>1]|0)<=(e[a+8>>1]|0)&(e[f+2>>1]|0)>=(e[a+2>>1]|0))){h=6;break}if((g|0)>-1)break;i=a+16|0;xk(i,b,d,f);g=c[a+28>>2]|0;a=(g|0)>-1?a+32|0:i+(0-g<<4)|0}if((h|0)==6)return;Ub[c[(c[b>>2]|0)+8>>2]&127](b,g>>21,g&2097151);return}function yk(b,d){b=b|0;d=d|0;var e=0,f=0,h=0;g[b+20>>2]=0.0;g[b+24>>2]=0.0;a[b+248>>0]=0;a[b+249>>0]=0;g[b+252>>2]=0.0;c[b+68>>2]=0;c[b+68+4>>2]=0;c[b+68+8>>2]=0;c[b+68+12>>2]=0;b=c[(c[b+8>>2]|0)+324>>2]|0;if((c[(ob[c[(c[b>>2]|0)+28>>2]&127](b)|0)+4>>2]|0)<=0)return;do{f=c[b>>2]|0;h=c[f+12>>2]|0;f=c[c[(ob[c[f+28>>2]&127](b)|0)+12>>2]>>2]|0;e=c[(c[(ob[c[(c[b>>2]|0)+28>>2]&127](b)|0)+12>>2]|0)+4>>2]|0;sb[h&31](b,f,e,c[d+24>>2]|0)|0}while((c[(ob[c[(c[b>>2]|0)+28>>2]&127](b)|0)+4>>2]|0)>0);return}function zk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;c[6042]=(c[6042]|0)+-1;mb[c[(c[a>>2]|0)+20>>2]&127](a,b);e=c[b+800>>2]|0;d=(c[a+12>>2]|0)+-1|0;g=c[a+20>>2]|0;f=c[g+(e<<2)>>2]|0;c[g+(e<<2)>>2]=c[g+(d<<2)>>2];c[(c[a+20>>2]|0)+(d<<2)>>2]=f;c[(c[(c[a+20>>2]|0)+(e<<2)>>2]|0)+800>>2]=e;c[a+12>>2]=d;a=c[a+68>>2]|0;if(!b)return;g=c[a+16>>2]|0;if(g>>>0<=b>>>0?(g+(S(c[a>>2]|0,c[a+4>>2]|0)|0)|0)>>>0>b>>>0:0){c[b>>2]=c[a+12>>2];c[a+12>>2]=b;c[a+8>>2]=(c[a+8>>2]|0)+1;return}c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function Ak(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;k=c[b+8>>2]|0;if((k|0)<=0)return;j=c[b+16>>2]|0;i=0;b=0;do{h=c[j+(i<<2)>>2]|0;if(!(c[h+204>>2]&3)){g=c[a+16>>2]|0;e=g+(b<<3)|0;d=c[e>>2]|0;if((d|0)==(b|0))d=b;else{f=d;do{d=g+(f<<3)|0;c[e>>2]=c[d>>2];d=c[d>>2]|0;e=g+(d<<3)|0;f=c[e>>2]|0}while((d|0)!=(f|0))}c[h+208>>2]=d;c[g+(b<<3)+4>>2]=i;c[h+212>>2]=-1;b=b+1|0}else{c[h+208>>2]=-1;c[h+212>>2]=-2}i=i+1|0}while((i|0)!=(k|0));return}function Bk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,i=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;if((e|0)<=0)return;f=0;do{n=+g[b+(f<<4)>>2];m=+g[b+(f<<4)+4>>2];j=+g[b+(f<<4)+8>>2];k=n*+g[a+60>>2]+m*+g[a+64>>2]+j*+g[a+68>>2];l=n*+g[a+76>>2]+m*+g[a+80>>2]+j*+g[a+84>>2];j=n*+g[a+92>>2]+m*+g[a+96>>2]+j*+g[a+100>>2];h=d+(f<<4)|0;i=a+60+((k<l?(l<j?2:1):k<j?2:0)<<4)|0;c[h>>2]=c[i>>2];c[h+4>>2]=c[i+4>>2];c[h+8>>2]=c[i+8>>2];c[h+12>>2]=c[i+12>>2];f=f+1|0}while((f|0)!=(e|0));return}function Ck(b,d){b=b|0;d=d|0;var e=0;c[6324]=(c[6324]|0)+1;e=ic(119)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[e+8>>2]=0;c[e+12>>2]=-1;c[e+16>>2]=1065353216;c[e+20>>2]=1065353216;c[e+24>>2]=1065353216;g[e+28>>2]=0.0;g[e+48>>2]=.03999999910593033;c[e+56>>2]=0;c[e+60>>2]=1065353216;c[e+64>>2]=1065353216;c[e+68>>2]=1065353216;g[e+72>>2]=0.0;c[e+76>>2]=-1082130432;c[e+80>>2]=-1082130432;c[e+84>>2]=-1082130432;g[e+88>>2]=0.0;a[e+92>>0]=0;c[e>>2]=7612;c[e+96>>2]=b;c[e+4>>2]=3;if(!d)return e|0;zj(e);return e|0}function Dk(a,b,d){a=a|0;b=b|0;d=d|0;switch(b|0){case 0:{c[d>>2]=1065353216;c[d+4>>2]=0;c[d+8>>2]=0;g[d+12>>2]=0.0;return}case 1:{c[d>>2]=-1082130432;c[d+4>>2]=0;c[d+8>>2]=0;g[d+12>>2]=0.0;return}case 2:{c[d>>2]=0;c[d+4>>2]=1065353216;c[d+8>>2]=0;g[d+12>>2]=0.0;return}case 3:{c[d>>2]=0;c[d+4>>2]=-1082130432;c[d+8>>2]=0;g[d+12>>2]=0.0;return}case 4:{c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=1065353216;g[d+12>>2]=0.0;return}case 5:{c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=-1082130432;g[d+12>>2]=0.0;return}default:return}}function Ek(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0;h=+g[a+60>>2];k=+g[a+76>>2]-h;j=+g[a+64>>2];i=+g[a+80>>2]-j;l=+g[a+68>>2];m=+g[a+84>>2]-l;h=+g[a+92>>2]-h;j=+g[a+96>>2]-j;l=+g[a+100>>2]-l;g[d+12>>2]=0.0;f=1.0/+G(+((k*j-i*h)*(k*j-i*h)+((i*l-m*j)*(i*l-m*j)+(m*h-k*l)*(m*h-k*l))));g[d>>2]=(i*l-m*j)*f;g[d+4>>2]=(m*h-k*l)*f;g[d+8>>2]=(k*j-i*h)*f;c[e>>2]=c[a+60>>2];c[e+4>>2]=c[a+60+4>>2];c[e+8>>2]=c[a+60+8>>2];c[e+12>>2]=c[a+60+12>>2];return}function Fk(b){b=b|0;var d=0,e=0;c[b>>2]=9260;if(a[b+56>>0]|0?(d=c[b+60>>2]|0,d|0):0){e=c[b+4>>2]|0;mb[c[(c[e>>2]|0)+16>>2]&127](e,d)}d=c[b+48>>2]|0;if(d|0){if(a[b+52>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+48>>2]=0}a[b+52>>0]=1;c[b+48>>2]=0;c[b+40>>2]=0;c[b+44>>2]=0;d=c[b+28>>2]|0;if(!d){a[b+32>>0]=1;c[b+28>>2]=0;c[b+20>>2]=0;e=b+24|0;c[e>>2]=0;return}if(a[b+32>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+28>>2]=0;a[b+32>>0]=1;c[b+28>>2]=0;c[b+20>>2]=0;e=b+24|0;c[e>>2]=0;return}function Gk(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+64|0;Sg(d,b,a+68|0);c[a+4>>2]=c[d>>2];c[a+4+4>>2]=c[d+4>>2];c[a+4+8>>2]=c[d+8>>2];c[a+4+12>>2]=c[d+12>>2];c[a+20>>2]=c[d+16>>2];c[a+20+4>>2]=c[d+16+4>>2];c[a+20+8>>2]=c[d+16+8>>2];c[a+20+12>>2]=c[d+16+12>>2];c[a+36>>2]=c[d+32>>2];c[a+36+4>>2]=c[d+32+4>>2];c[a+36+8>>2]=c[d+32+8>>2];c[a+36+12>>2]=c[d+32+12>>2];c[a+52>>2]=c[d+48>>2];c[a+52+4>>2]=c[d+48+4>>2];c[a+52+8>>2]=c[d+48+8>>2];c[a+52+12>>2]=c[d+48+12>>2];i=d;return}function Hk(b){b=b|0;var d=0;if(!b)return;d=c[b+156>>2]|0;if(d|0){if(!((a[b+160>>0]&1)==0|(d|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+156>>2]=0}a[b+160>>0]=1;c[b+156>>2]=0;c[b+148>>2]=0;c[b+152>>2]=0;d=c[b+136>>2]|0;if(d|0){if(!((a[b+140>>0]&1)==0|(d|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;d=c[b+116>>2]|0;if(d|0){if(!((a[b+120>>0]&1)==0|(d|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;Rc(b);return}function Ik(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;i=+g[a+60>>2];k=+g[a+76>>2]-i;j=+g[a+64>>2];f=+g[a+80>>2]-j;d=+g[a+68>>2];h=+g[a+84>>2]-d;i=+g[a+92>>2]-i;j=+g[a+96>>2]-j;d=+g[a+100>>2]-d;g[c+12>>2]=0.0;e=1.0/+G(+((k*j-f*i)*(k*j-f*i)+((f*d-h*j)*(f*d-h*j)+(h*i-k*d)*(h*i-k*d))));g[c>>2]=(f*d-h*j)*e;g[c+4>>2]=(h*i-k*d)*e;g[c+8>>2]=(k*j-f*i)*e;if(!b)return;g[c>>2]=-((f*d-h*j)*e);g[c+4>>2]=-((h*i-k*d)*e);g[c+8>>2]=-((k*j-f*i)*e);return}function Jk(a,b,c,d,e,f,h,i,j,k){a=+a;b=+b;c=+c;d=+d;e=+e;f=+f;h=+h;i=+i;j=+j;k=k|0;if(!(((h-d)*b-(i-e)*a)*f+(((i-e)*c-(j-f)*b)*d+((j-f)*a-(h-d)*c)*e)<0.0)){k=0;return k|0}if((h-d)*d+(i-e)*e+(j-f)*f>0.0){g[k>>2]=+G(+(d*d+e*e+f*f));k=1;return k|0}if((h-d)*h+(i-e)*i+(j-f)*j<0.0){g[k>>2]=+G(+(h*h+i*i+j*j));k=1;return k|0}else{j=((h*h+i*i+j*j)*(d*d+e*e+f*f)-(h*d+i*e+j*f)*(h*d+i*e+j*f))/((h-d)*(h-d)+(i-e)*(i-e)+(j-f)*(j-f));g[k>>2]=+G(+(j>0.0?j:0.0));k=1;return k|0}return 0}function Kk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;h=c[a+760>>2]|0;g=c[a+792>>2]|0;if((g|0)<=0){h=0;return h|0}f=c[a+800>>2]|0;a=0;while(1){i=c[f+(a*44|0)+8>>2]|0;if(((i|0)==(h+(e*104|0)|0)|((i|0)==(h+(b*104|0)|0)|(i|0)==(h+(d*104|0)|0))?(i=c[f+(a*44|0)+12>>2]|0,(i|0)==(h+(e*104|0)|0)|((i|0)==(h+(b*104|0)|0)|(i|0)==(h+(d*104|0)|0))):0)?(i=c[f+(a*44|0)+16>>2]|0,(i|0)==(h+(e*104|0)|0)|((i|0)==(h+(b*104|0)|0)|(i|0)==(h+(d*104|0)|0))):0){a=1;f=7;break}a=a+1|0;if((a|0)>=(g|0)){a=0;f=7;break}}if((f|0)==7)return a|0;return 0}function Lk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;d=+g[a+388>>2];f=+g[a+392>>2];h=+g[b+4>>2]*f;i=+g[a+396>>2];j=+g[b+8>>2]*i;g[a+452>>2]=+g[a+452>>2]+ +g[b>>2]*d;g[a+456>>2]=+g[a+456>>2]+h;g[a+460>>2]=+g[a+460>>2]+j;d=+g[b>>2]*d;f=+g[b+4>>2]*f;i=+g[b+8>>2]*i;j=+g[c+4>>2];h=+g[c+8>>2];k=+g[c>>2];e=(h*d-k*i)*+g[a+588>>2];d=(k*f-j*d)*+g[a+592>>2];g[a+468>>2]=+g[a+468>>2]+(j*i-h*f)*+g[a+584>>2];g[a+472>>2]=+g[a+472>>2]+e;g[a+476>>2]=+g[a+476>>2]+d;return}function Mk(b){b=b|0;var d=0;c[6324]=(c[6324]|0)+1;d=ic(119)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+8>>2]=0;c[d+12>>2]=-1;c[d+16>>2]=1065353216;c[d+20>>2]=1065353216;c[d+24>>2]=1065353216;g[d+28>>2]=0.0;g[d+48>>2]=.03999999910593033;c[d+56>>2]=0;c[d+60>>2]=1065353216;c[d+64>>2]=1065353216;c[d+68>>2]=1065353216;g[d+72>>2]=0.0;c[d+76>>2]=-1082130432;c[d+80>>2]=-1082130432;c[d+84>>2]=-1082130432;g[d+88>>2]=0.0;a[d+92>>0]=0;c[d>>2]=7612;c[d+96>>2]=b;c[d+4>>2]=3;zj(d);return d|0}function Nk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0,j=0;i=c[a+100>>2]|0;j=c[a+108>>2]|0;f=+g[j+(((b|0)%(i|0)|0)<<4)+4>>2]*+g[a+20>>2];h=+g[j+(((b|0)%(i|0)|0)<<4)+8>>2]*+g[a+24>>2];g[d>>2]=+g[j+(((b|0)%(i|0)|0)<<4)>>2]*+g[a+16>>2];g[d+4>>2]=f;g[d+8>>2]=h;g[d+12>>2]=0.0;d=c[a+108>>2]|0;h=+g[d+(((b+1|0)%(i|0)|0)<<4)+4>>2]*+g[a+20>>2];f=+g[d+(((b+1|0)%(i|0)|0)<<4)+8>>2]*+g[a+24>>2];g[e>>2]=+g[d+(((b+1|0)%(i|0)|0)<<4)>>2]*+g[a+16>>2];g[e+4>>2]=h;g[e+8>>2]=f;g[e+12>>2]=0.0;return}function Ok(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0,j=0;e=i;i=i+32|0;d=c[a+184>>2]|0;if(+g[d+4>>2]==0.0){d=0;i=e;return d|0}b=c[b>>2]|0;if(!(Jb[c[(c[d>>2]|0)+8>>2]&31](d,c[b+188>>2]|0)|0)){d=1;i=e;return d|0}h=c[a+192>>2]|0;j=c[b+192>>2]|0;d=c[a+184>>2]|0;f=+g[a+188>>2];c[e>>2]=0;c[e+4>>2]=j;c[e+8>>2]=b;c[e+12>>2]=b+4;c[e+16>>2]=-1;c[e+20>>2]=-1;pc(h,a+36|0,a+100|0,e,d,f);d=1;i=e;return d|0}function Pk(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;f=c[d>>2]|0;f=Jb[c[(c[f>>2]|0)+56>>2]&31](f,76)|0;h=c[d+4>>2]|0;j=c[b+12>>2]|0;i=c[b+8>>2]|0;g=c[b+16>>2]|0;e=c[b+20>>2]|0;c[f+4>>2]=c[d>>2];c[f>>2]=9260;c[f+8>>2]=j;c[f+12>>2]=i;a[f+32>>0]=1;c[f+28>>2]=0;c[f+20>>2]=0;c[f+24>>2]=0;a[f+52>>0]=1;c[f+48>>2]=0;c[f+40>>2]=0;c[f+44>>2]=0;a[f+56>>0]=0;c[f+60>>2]=h;a[f+64>>0]=0;c[f+68>>2]=g;c[f+72>>2]=e;return f|0}function Qk(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+16|0;c[d>>2]=c[b>>2];c[d+4>>2]=c[b+4>>2];c[d+8>>2]=c[b+8>>2];c[d+12>>2]=c[b+12>>2];b=c[a+8>>2]|0;c[b+300>>2]=(c[b+300>>2]|0)+1;c[b+4>>2]=1065353216;c[b+8>>2]=0;c[b+8+4>>2]=0;c[b+8+8>>2]=0;c[b+8+12>>2]=0;c[b+24>>2]=1065353216;c[b+28>>2]=0;c[b+28+4>>2]=0;c[b+28+8>>2]=0;c[b+28+12>>2]=0;c[b+44>>2]=1065353216;c[b+48>>2]=0;c[b+52>>2]=c[d>>2];c[b+52+4>>2]=c[d+4>>2];c[b+52+8>>2]=c[d+8>>2];c[b+52+12>>2]=c[d+12>>2];i=d;return}function Rk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;do switch(b|0){case 0:{b=1;f=0;break}case 1:{b=2;f=0;break}case 2:{b=3;f=1;break}case 3:{f=2;break}case 4:{f=0;break}case 5:{f=1;break}case 6:{f=2;break}case 7:{f=3;break}case 8:{b=5;f=4;break}case 9:{b=6;f=4;break}case 10:{b=7;f=5;break}case 11:{b=7;f=6;break}default:{b=0;f=0}}while(0);Ub[c[(c[a>>2]|0)+108>>2]&127](a,f,d);Ub[c[(c[a>>2]|0)+108>>2]&127](a,b,e);return}function Sk(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0;k=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);h=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);d=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);m=(k+ +g[a+32>>2])/+g[a+16>>2];j=(h+ +g[a+36>>2])/+g[a+20>>2];f=(d+ +g[a+40>>2])/+g[a+24>>2];l=+F(+(+g[b>>2]));i=+F(+(+g[b+4>>2]));e=+F(+(+g[b+8>>2]));g[a+16>>2]=l;g[a+20>>2]=i;g[a+24>>2]=e;g[a+28>>2]=0.0;g[a+32>>2]=m*l-k;g[a+36>>2]=j*i-h;g[a+40>>2]=f*e-d;g[a+44>>2]=0.0;return}function Tk(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,i=0,j=0;if(a[b+527>>0]|0){c[d>>2]=0;c[d+4>>2]=0;return}c[d>>2]=3;c[d+4>>2]=3;j=c[b+28>>2]|0;i=c[b+32>>2]|0;qc(b,j+4|0,i+4|0,j+304|0,i+304|0);if((a[b+526>>0]|0?(e=c[d>>2]|0,c[d>>2]=e+1,f=c[d+4>>2]|0,c[d+4>>2]=f+-1,h=+g[b+456>>2],+g[b+444>>2]<h):0)?+g[b+448>>2]<h:0){c[d>>2]=e+2;c[d+4>>2]=f+-2}if(!(a[b+525>>0]|0))return;c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+-1;return}function Uk(a,b){a=a|0;b=+b;var d=0,e=0,f=0.0,h=0.0,i=0.0,j=0.0;c[6324]=(c[6324]|0)+1;d=ic(107)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}e=d+4|0;c[e>>2]=35;c[d+8>>2]=0;c[d+12>>2]=-1;g[d+16>>2]=0.0;c[d>>2]=8468;j=+g[a>>2];i=+g[a+4>>2];h=+g[a+8>>2];a=c[a+12>>2]|0;f=1.0/+G(+(j*j+i*i+h*h));g[d+52>>2]=j*f;g[d+56>>2]=i*f;g[d+60>>2]=h*f;c[d+64>>2]=a;g[d+68>>2]=b;c[d+72>>2]=1065353216;c[d+76>>2]=1065353216;c[d+80>>2]=1065353216;g[d+84>>2]=0.0;c[e>>2]=28;return d|0}function Vk(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0,h=0,i=0;b=c[b+36>>2]|0;i=c[b+8>>2]|0;h=c[b+12>>2]|0;f=c[b+16>>2]|0;e=+g[a+52>>2];d=+Dh(a+4|0,+g[a+36>>2],+g[a+40>>2],+g[a+44>>2],+g[i+8>>2],+g[i+12>>2],+g[i+16>>2],+g[h+8>>2],+g[h+12>>2],+g[h+16>>2],+g[f+8>>2],+g[f+12>>2],+g[f+16>>2],e);if(!(d>0.0&d<e)){i=a+60|0;h=c[i>>2]|0;h=h+1|0;c[i>>2]=h;return}g[a+52>>2]=d;c[a+56>>2]=b;i=a+60|0;h=c[i>>2]|0;h=h+1|0;c[i>>2]=h;return}function Wk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0;a:do if(c>>>0>=3)if((c+-3|0)>>>0<3)switch(b|0){case 2:{d=+g[a+868+(c+-3<<6)+32>>2];break a}case 4:{d=+g[a+868+(c+-3<<6)+36>>2];break a}case 3:{d=+g[a+868+(c+-3<<6)+28>>2];break a}default:{d=0.0;break a}}else d=0.0;else switch(b|0){case 2:{d=+g[a+756+(c<<2)>>2];break a}case 4:{d=+g[a+772+(c<<2)>>2];break a}case 3:{d=+g[a+740+(c<<2)>>2];break a}default:{d=0.0;break a}}while(0);return +d}function Xk(a,b){a=a|0;b=b|0;c[a+300>>2]=(c[a+300>>2]|0)+1;c[a+4>>2]=c[b>>2];c[a+4+4>>2]=c[b+4>>2];c[a+4+8>>2]=c[b+8>>2];c[a+4+12>>2]=c[b+12>>2];c[a+20>>2]=c[b+16>>2];c[a+20+4>>2]=c[b+16+4>>2];c[a+20+8>>2]=c[b+16+8>>2];c[a+20+12>>2]=c[b+16+12>>2];c[a+36>>2]=c[b+32>>2];c[a+36+4>>2]=c[b+32+4>>2];c[a+36+8>>2]=c[b+32+8>>2];c[a+36+12>>2]=c[b+32+12>>2];c[a+52>>2]=c[b+48>>2];c[a+52+4>>2]=c[b+48+4>>2];c[a+52+8>>2]=c[b+48+8>>2];c[a+52+12>>2]=c[b+48+12>>2];return}function Yk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;Ub[c[(c[b>>2]|0)+68>>2]&127](a,b,d);if(!(+Cb[c[(c[b>>2]|0)+48>>2]&15](b)!=0.0))return;h=+g[d>>2];f=+g[d+4>>2];e=+g[d+8>>2];j=h*h+f*f+e*e<1.4210854715202004e-014?-1.0:h;i=h*h+f*f+e*e<1.4210854715202004e-014?-1.0:f;e=h*h+f*f+e*e<1.4210854715202004e-014?-1.0:e;f=1.0/+G(+(e*e+(j*j+i*i)));h=+Cb[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=+g[a>>2]+h*f*j;g[a+4>>2]=h*f*i+ +g[a+4>>2];g[a+8>>2]=h*f*e+ +g[a+8>>2];return}function Zk(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0.0,h=0.0,j=0.0,k=0;k=i;i=i+16|0;h=+g[b>>2];j=+g[b+4>>2];e=+g[b+8>>2];if(h*h+j*j+e*e>0.0?(f=+g[a+52>>2],f>0.0):0){c=1.0/+G(+(h*h+j*j+e*e));d=e*c*-f*e*c*-f+(h*c*-f*h*c*-f+j*c*-f*j*c*-f);if(d>0.0){g[k>>2]=-(h*c*-f);g[k+4>>2]=-(j*c*-f);g[k+8>>2]=-(e*c*-f);g[k+12>>2]=0.0;be(a,k)}g[a+52>>2]=+G(+d);i=k;return}be(a,b);i=k;return}function _k(a,b){a=a|0;b=b|0;var d=0;b=i;i=i+16|0;d=c[a+8>>2]|0;c[a+132>>2]=c[d+52>>2];c[a+132+4>>2]=c[d+52+4>>2];c[a+132+8>>2]=c[d+52+8>>2];c[a+132+12>>2]=c[d+52+12>>2];rp(a+152|0,d+52|0,16)|0;Jg(d+4|0,b);c[a+168>>2]=c[b>>2];c[a+168+4>>2]=c[b+4>>2];c[a+168+8>>2]=c[b+8>>2];c[a+168+12>>2]=c[b+12>>2];c[a+184>>2]=c[a+168>>2];c[a+184+4>>2]=c[a+168+4>>2];c[a+184+8>>2]=c[a+168+8>>2];c[a+184+12>>2]=c[a+168+12>>2];i=b;return}function $k(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;j=i;i=i+256|0;do if((d|0)>(e|0)&(f&73728|0)==0){yn(j|0,b|0,((d-e|0)>>>0>256?256:d-e|0)|0)|0;b=c[a>>2]|0;if((d-e|0)>>>0>255){h=d-e|0;f=b;g=(b&32|0)==0;while(1){if(g){pk(j,256,a);b=c[a>>2]|0}else b=f;h=h+-256|0;g=(b&32|0)==0;if(h>>>0<=255)break;else f=b}if(g)b=d-e&255;else break}else if(!(b&32))b=d-e|0;else break;pk(j,b,a)}while(0);i=j;return}function al(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;f=+g[b>>2];d=+g[b+4>>2];j=+g[b+8>>2];h=+g[b+12>>2];e=f*(2.0/(f*f+d*d+j*j+h*h));c=d*(2.0/(f*f+d*d+j*j+h*h));i=j*(2.0/(f*f+d*d+j*j+h*h));g[a>>2]=1.0-(d*c+j*i);g[a+4>>2]=f*c-h*i;g[a+8>>2]=f*i+h*c;g[a+12>>2]=0.0;g[a+16>>2]=f*c+h*i;g[a+20>>2]=1.0-(f*e+j*i);g[a+24>>2]=d*i-h*e;g[a+28>>2]=0.0;g[a+32>>2]=f*i-h*c;g[a+36>>2]=d*i+h*e;g[a+40>>2]=1.0-(f*e+d*c);g[a+44>>2]=0.0;return}function bl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;f=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b>>2]=f;if(f|0)mb[c[(c[d>>2]|0)+48>>2]&127](d,e);c[b+4>>2]=c[a+4>>2];c[b+28>>2]=c[a+32>>2];c[b+32>>2]=c[a+36>>2];c[b+36>>2]=c[a+40>>2];c[b+40>>2]=c[a+44>>2];c[b+12>>2]=c[a+16>>2];c[b+16>>2]=c[a+20>>2];c[b+20>>2]=c[a+24>>2];c[b+24>>2]=c[a+28>>2];c[b+44>>2]=c[a+48>>2];c[b+52>>2]=c[a+56>>2];return 16562}function cl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;f=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b>>2]=f;if(f|0)mb[c[(c[d>>2]|0)+48>>2]&127](d,e);c[b+4>>2]=c[a+4>>2];c[b+28>>2]=c[a+32>>2];c[b+32>>2]=c[a+36>>2];c[b+36>>2]=c[a+40>>2];c[b+40>>2]=c[a+44>>2];c[b+12>>2]=c[a+16>>2];c[b+16>>2]=c[a+20>>2];c[b+20>>2]=c[a+24>>2];c[b+24>>2]=c[a+28>>2];c[b+44>>2]=c[a+48>>2];c[b+52>>2]=c[a+56>>2];return 16093}function dl(a,b){a=a|0;b=b|0;c[a+92>>2]=c[b>>2];c[a+92+4>>2]=c[b+4>>2];c[a+92+8>>2]=c[b+8>>2];c[a+92+12>>2]=c[b+12>>2];c[a+108>>2]=c[b+16>>2];c[a+108+4>>2]=c[b+16+4>>2];c[a+108+8>>2]=c[b+16+8>>2];c[a+108+12>>2]=c[b+16+12>>2];c[a+124>>2]=c[b+32>>2];c[a+124+4>>2]=c[b+32+4>>2];c[a+124+8>>2]=c[b+32+8>>2];c[a+124+12>>2]=c[b+32+12>>2];c[a+140>>2]=c[b+48>>2];c[a+140+4>>2]=c[b+48+4>>2];c[a+140+8>>2]=c[b+48+8>>2];c[a+140+12>>2]=c[b+48+12>>2];return}function el(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;f=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b>>2]=f;if(f|0)mb[c[(c[d>>2]|0)+48>>2]&127](d,e);c[b+4>>2]=c[a+4>>2];c[b+28>>2]=c[a+32>>2];c[b+32>>2]=c[a+36>>2];c[b+36>>2]=c[a+40>>2];c[b+40>>2]=c[a+44>>2];c[b+12>>2]=c[a+16>>2];c[b+16>>2]=c[a+20>>2];c[b+20>>2]=c[a+24>>2];c[b+24>>2]=c[a+28>>2];c[b+44>>2]=c[a+48>>2];c[b+52>>2]=c[a+72>>2];return 16325}function fl(a,b){a=a|0;b=b|0;c[a+4>>2]=c[b>>2];c[a+4+4>>2]=c[b+4>>2];c[a+4+8>>2]=c[b+8>>2];c[a+4+12>>2]=c[b+12>>2];c[a+20>>2]=c[b+16>>2];c[a+20+4>>2]=c[b+16+4>>2];c[a+20+8>>2]=c[b+16+8>>2];c[a+20+12>>2]=c[b+16+12>>2];c[a+36>>2]=c[b+32>>2];c[a+36+4>>2]=c[b+32+4>>2];c[a+36+8>>2]=c[b+32+8>>2];c[a+36+12>>2]=c[b+32+12>>2];c[a+52>>2]=c[b+48>>2];c[a+52+4>>2]=c[b+48+4>>2];c[a+52+8>>2]=c[b+48+8>>2];c[a+52+12>>2]=c[b+48+12>>2];return}function gl(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;a[b+53>>0]=1;do if((c[b+4>>2]|0)==(e|0)){a[b+52>>0]=1;e=c[b+16>>2]|0;if(!e){c[b+16>>2]=d;c[b+24>>2]=f;c[b+36>>2]=1;if(!((f|0)==1?(c[b+48>>2]|0)==1:0))break;a[b+54>>0]=1;break}if((e|0)!=(d|0)){c[b+36>>2]=(c[b+36>>2]|0)+1;a[b+54>>0]=1;break}e=c[b+24>>2]|0;if((e|0)==2){c[b+24>>2]=f;e=f}if((e|0)==1?(c[b+48>>2]|0)==1:0)a[b+54>>0]=1}while(0);return}function hl(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0,l=0;e=i;i=i+16|0;k=c[a+56>>2]|0;l=c[a+32+(((k+2|0)%3|0)<<2)>>2]|0;c[e>>2]=l;c[e+4>>2]=l;c[e+8>>2]=l;g[e+12>>2]=0.0;g[e+(k<<2)>>2]=+g[a+32+(k<<2)>>2]+ +g[e+(k<<2)>>2];h=(+g[e>>2]+.03999999910593033)*2.0;f=(+g[e+4>>2]+.03999999910593033)*2.0;j=(+g[e+8>>2]+.03999999910593033)*2.0;g[d>>2]=b*.0833333283662796*(f*f+j*j);g[d+4>>2]=b*.0833333283662796*(h*h+j*j);g[d+8>>2]=b*.0833333283662796*(h*h+f*f);i=e;return}function il(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a:do if((b|0)!=(c[d+8>>2]|0)){h=c[b+12>>2]|0;Tn(b+16|0,d,e,f);if((h|0)>1){g=b+24|0;do{Tn(g,d,e,f);if(a[d+54>>0]|0)break a;g=g+8|0}while(g>>>0<(b+16+(h<<3)|0)>>>0)}}else Xm(d,e,f);while(0);return}function jl(b,d,e){b=b|0;d=d|0;e=+e;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;a[b+251>>0]=0;c[b+68>>2]=c[d>>2];c[b+68+4>>2]=c[d+4>>2];c[b+68+8>>2]=c[d+8>>2];c[b+68+12>>2]=c[d+12>>2];f=+g[b+68>>2];h=+g[b+72>>2];i=+g[b+76>>2];j=+G(+(f*f+h*h+i*i));if(j>1.1920928955078125e-007){k=f*(1.0/j);h=h*(1.0/j);f=i*(1.0/j);d=c[b+80>>2]|0}else{k=0.0;h=0.0;f=0.0;d=0}g[b+84>>2]=k;g[b+88>>2]=h;g[b+92>>2]=f;c[b+96>>2]=d;g[b+252>>2]=+g[b+252>>2]+e;return}function kl(){var a=0,b=0,d=0;c[6324]=(c[6324]|0)+1;a=ic(823)|0;if(!a)a=0;else{c[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}c[a>>2]=1025;b=a+120|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));b=a+312|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));b=a+504|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));b=a+696|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));c[a+772>>2]=0;c[a+776>>2]=0;c[a+780>>2]=0;c[a+800>>2]=0;return a|0}function ll(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0,j=0.0,k=0.0,l=0.0,m=0;if((d|0)<=0)return;m=0;do{e=+g[a+36>>2];h=+g[a+32>>2];i=b+(m<<4)|0;k=+g[b+(m<<4)+4>>2];f=+g[b+(m<<4)+8>>2];l=+G(+(k*k+f*f));if(l!=0.0){j=f*(e/l);f=+g[i>>2]<0.0?-h:h;e=k*(e/l)}else{j=0.0;f=+g[i>>2]<0.0?-h:h}g[c+(m<<4)>>2]=f;g[c+(m<<4)+4>>2]=e;g[c+(m<<4)+8>>2]=j;m=m+1|0}while((m|0)!=(d|0));return}function ml(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;j=c[b>>2]|0;if(!e)e=c[a+188>>2]|0;i=c[a+308>>2]|0;if((i|0)<=0)return;h=c[a+316>>2]|0;f=0;while(1){g=h+(f<<2)|0;if((c[g>>2]|0)==(j|0))break;f=f+1|0;if((f|0)>=(i|0)){k=9;break}}if((k|0)==9)return;if((f|0)>=(i|0))return;c[g>>2]=c[h+(i+-1<<2)>>2];c[a+308>>2]=i+-1;k=c[a+324>>2]|0;sb[c[(c[k>>2]|0)+12>>2]&31](k,e,b,d)|0;return}function nl(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;e=i;i=i+32|0;d=c[a+216>>2]|0;if(+g[d+4>>2]==0.0){d=0;i=e;return d|0}b=c[b>>2]|0;if(!(Jb[c[(c[d>>2]|0)+8>>2]&31](d,c[b+188>>2]|0)|0)){d=1;i=e;return d|0}f=c[b+192>>2]|0;d=c[a+216>>2]|0;c[e>>2]=0;c[e+4>>2]=f;c[e+8>>2]=b;c[e+12>>2]=b+4;c[e+16>>2]=-1;c[e+20>>2]=-1;Vc(a+68|0,a+132|0,e,d);d=1;i=e;return d|0}function ol(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;f=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b>>2]=f;if(f|0)mb[c[(c[d>>2]|0)+48>>2]&127](d,e);c[b+4>>2]=c[a+4>>2];c[b+28>>2]=c[a+32>>2];c[b+32>>2]=c[a+36>>2];c[b+36>>2]=c[a+40>>2];c[b+40>>2]=c[a+44>>2];c[b+12>>2]=c[a+16>>2];c[b+16>>2]=c[a+20>>2];c[b+20>>2]=c[a+24>>2];c[b+24>>2]=c[a+28>>2];c[b+44>>2]=c[a+48>>2];return 10746}function pl(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;do if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)==(e|0)?(c[d+28>>2]|0)!=1:0)c[d+28>>2]=f}else if((b|0)==(c[d>>2]|0)){if((c[d+16>>2]|0)!=(e|0)?(c[d+20>>2]|0)!=(e|0):0){c[d+32>>2]=f;c[d+20>>2]=e;c[d+40>>2]=(c[d+40>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0)a[d+54>>0]=1;c[d+44>>2]=4;break}if((f|0)==1)c[d+32>>2]=1}while(0);return}function ql(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;f=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b>>2]=f;if(f|0)mb[c[(c[d>>2]|0)+48>>2]&127](d,e);c[b+4>>2]=c[a+4>>2];c[b+12>>2]=c[a+72>>2];c[b+16>>2]=c[a+76>>2];c[b+20>>2]=c[a+80>>2];c[b+24>>2]=c[a+84>>2];c[b+28>>2]=c[a+52>>2];c[b+32>>2]=c[a+56>>2];c[b+36>>2]=c[a+60>>2];c[b+40>>2]=c[a+64>>2];c[b+44>>2]=c[a+68>>2];return 17002}function rl(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;c[b+4>>2]=c[d>>2];c[b>>2]=9044;a[b+24>>0]=1;c[b+20>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;c[b+36>>2]=0;a[b+64>>0]=1;c[b+60>>2]=0;c[b+52>>2]=0;c[b+56>>2]=0;a[b+68>>0]=g&1;c[b+72>>2]=c[d+4>>2];a[b+76>>0]=0;c[b+80>>2]=c[(c[(g?f:e)+4>>2]|0)+72>>2];_g(b,e,f);return}function sl(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0,i=0,j=0;j=c[a+72>>2]|0;i=c[a+68>>2]|0;h=c[a+76>>2]|0;e=+g[a+64>>2]*(+g[b+(j<<2)>>2]/+g[a+16+(j<<2)>>2]);g[a+64>>2]=e;f=+g[a+60>>2]*(+g[b+(i<<2)>>2]/+g[a+16+(i<<2)>>2]+ +g[b+(h<<2)>>2]/+g[a+16+(h<<2)>>2])*.5;g[a+60>>2]=f;g[a+56>>2]=f/+G(+(e*e+f*f));f=+F(+(+g[b>>2]));e=+F(+(+g[b+4>>2]));d=+F(+(+g[b+8>>2]));g[a+16>>2]=f;g[a+20>>2]=e;g[a+24>>2]=d;g[a+28>>2]=0.0;return}function tl(b){b=b|0;var d=0;c[b>>2]=6296;d=c[b+316>>2]|0;if(d|0){if(a[b+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+316>>2]=0}a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;c[b>>2]=5592;d=c[b+292>>2]|0;if(!d){a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;b=b+288|0;c[b>>2]=0;return}if(a[b+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+292>>2]=0;a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;b=b+288|0;c[b>>2]=0;return}function ul(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0;if((d|0)<=0)return;m=0;do{e=+g[a+32>>2];i=+g[a+40>>2];k=+g[b+(m<<4)>>2];f=+g[b+(m<<4)+4>>2];l=+G(+(k*k+f*f));h=+g[b+(m<<4)+8>>2];if(l!=0.0){j=f*(e/l);f=h<0.0?-i:i;e=k*(e/l)}else{j=0.0;f=h<0.0?-i:i}g[c+(m<<4)>>2]=e;g[c+(m<<4)+4>>2]=j;g[c+(m<<4)+8>>2]=f;m=m+1|0}while((m|0)!=(d|0));return}function vl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0;if((d|0)<=0)return;m=0;do{e=+g[a+32>>2];i=+g[a+36>>2];k=+g[b+(m<<4)>>2];f=+g[b+(m<<4)+8>>2];l=+G(+(k*k+f*f));h=+g[b+(m<<4)+4>>2];if(l!=0.0){j=f*(e/l);f=h<0.0?-i:i;e=k*(e/l)}else{j=0.0;f=h<0.0?-i:i}g[c+(m<<4)>>2]=e;g[c+(m<<4)+4>>2]=f;g[c+(m<<4)+8>>2]=j;m=m+1|0}while((m|0)!=(d|0));return}function wl(b){b=b|0;var d=0;c[b>>2]=4916;d=c[b+536>>2]|0;if(d|0){if(a[b+540>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+536>>2]=0}a[b+540>>0]=1;c[b+536>>2]=0;c[b+528>>2]=0;c[b+532>>2]=0;c[b>>2]=5592;d=c[b+292>>2]|0;if(!d){a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;b=b+288|0;c[b>>2]=0;return}if(a[b+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+292>>2]=0;a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;b=b+288|0;c[b>>2]=0;return}function xl(a,d){a=a|0;d=d|0;var e=0,f=0;while(1){e=ic(84)|0;if(e|0)break;e=c[6453]|0;c[6453]=e+0;if(!e){e=0;break}Vb[e&3]()}g[e+4>>2]=1.0;c[e+8>>2]=0;b[e+12>>1]=1;b[e+14>>1]=-1;c[e+16>>2]=0;c[e>>2]=2896;f=e+20|0;c[f>>2]=c[a>>2];c[f+4>>2]=c[a+4>>2];c[f+8>>2]=c[a+8>>2];c[f+12>>2]=c[a+12>>2];a=e+36|0;c[a>>2]=c[d>>2];c[a+4>>2]=c[d+4>>2];c[a+8>>2]=c[d+8>>2];c[a+12>>2]=c[d+12>>2];return e|0}function yl(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+48|0;c[f+32>>2]=5312;c[f+32+4>>2]=e;c[f>>2]=c[b>>2];c[f+4>>2]=c[b+4>>2];c[f+8>>2]=c[b+8>>2];c[f+12>>2]=c[b+12>>2];c[f+16>>2]=c[d>>2];c[f+16+4>>2]=c[d+4>>2];c[f+16+8>>2]=c[d+8>>2];c[f+16+12>>2]=c[d+12>>2];Mf(c[a+4>>2]|0,f,f+32|0);Mf(c[a+64>>2]|0,f,f+32|0);i=f;return}function zl(a,d,f,g,h,i){a=a|0;d=d|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0;j=c[a+108>>2]|0;if(j|0){Ab[c[(c[j>>2]|0)+24>>2]&7](j,d,f,g,h,i);return}d=b[a+56>>1]|0;if((d&65535)<<1>>>0<=1)return;h=1;i=1;do{f=c[a+68>>2]|0;if(b[f+(i<<2)>>1]&1){Jb[c[(c[g>>2]|0)+8>>2]&31](g,(c[a+60>>2]|0)+((e[f+(i<<2)+2>>1]|0)<<6)|0)|0;d=b[a+56>>1]|0}h=h+1<<16>>16;i=h&65535}while(i>>>0<((d&65535)<<1|1)>>>0);return}function Al(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;g=i;i=i+64|0;if((a|0)!=(b|0))if((b|0)!=0?(f=jj(b,2760)|0,(f|0)!=0):0){b=g+4|0;e=b+52|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(e|0));c[g>>2]=f;c[g+8>>2]=a;c[g+12>>2]=-1;c[g+48>>2]=1;Yb[c[(c[f>>2]|0)+28>>2]&127](f,g,c[d>>2]|0,1);if((c[g+24>>2]|0)==1){c[d>>2]=c[g+16>>2];b=1}else b=0}else b=0;else b=1;i=g;return b|0}function Bl(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;b=c[d>>2]|0;b=Jb[c[(c[b>>2]|0)+56>>2]&31](b,80)|0;d=c[d>>2]|0;c[b+4>>2]=d;c[b>>2]=9172;c[b+8>>2]=9220;c[b+56>>2]=d;c[b+60>>2]=0;c[b+44>>2]=f;c[b+48>>2]=e;f=yb[c[(c[d>>2]|0)+12>>2]&63](d,c[f+8>>2]|0,c[e+8>>2]|0)|0;c[b+72>>2]=f;e=c[b+56>>2]|0;mb[c[(c[e>>2]|0)+20>>2]&127](e,f);a[b+76>>0]=1;return b|0}function Cl(a,b){a=+a;b=+b;var d=0;c[6324]=(c[6324]|0)+1;d=ic(99)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+8>>2]=0;c[d+12>>2]=-1;c[d+16>>2]=1065353216;c[d+20>>2]=1065353216;c[d+24>>2]=1065353216;g[d+28>>2]=0.0;g[d+48>>2]=.03999999910593033;g[d+60>>2]=a;g[d+64>>2]=b;c[d+4>>2]=11;g[d+56>>2]=a/+G(+(a*a+b*b));c[d>>2]=7280;c[d+68>>2]=0;c[d+72>>2]=2;c[d+76>>2]=1;g[d+32>>2]=a;g[d+40>>2]=b;g[d+36>>2]=a;return d|0}function Dl(a,b){a=+a;b=+b;var d=0;c[6324]=(c[6324]|0)+1;d=ic(99)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+8>>2]=0;c[d+12>>2]=-1;c[d+16>>2]=1065353216;c[d+20>>2]=1065353216;c[d+24>>2]=1065353216;g[d+28>>2]=0.0;g[d+48>>2]=.03999999910593033;g[d+60>>2]=a;g[d+64>>2]=b;c[d+4>>2]=11;g[d+56>>2]=a/+G(+(a*a+b*b));c[d>>2]=7380;c[d+68>>2]=1;c[d+72>>2]=0;c[d+76>>2]=2;g[d+36>>2]=a;g[d+32>>2]=b;g[d+40>>2]=a;return d|0}function El(a,b){a=+a;b=+b;var d=0;c[6324]=(c[6324]|0)+1;d=ic(99)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+8>>2]=0;c[d+12>>2]=-1;c[d+16>>2]=1065353216;c[d+20>>2]=1065353216;c[d+24>>2]=1065353216;g[d+28>>2]=0.0;g[d+48>>2]=.03999999910593033;c[d>>2]=7180;g[d+60>>2]=a;g[d+64>>2]=b;c[d+4>>2]=11;c[d+68>>2]=0;c[d+72>>2]=1;c[d+76>>2]=2;g[d+32>>2]=a;g[d+36>>2]=b;g[d+40>>2]=a;g[d+56>>2]=a/+G(+(a*a+b*b));return d|0}function Fl(){if(a[21984]|0)return;a[21984]=1;if(!(a[21992]|0)){a[21992]=1;c[5577]=1065353216;c[5578]=0;c[5579]=0;c[5580]=0;c[5581]=0;c[5582]=1065353216;c[5583]=0;c[5584]=0;c[5585]=0;c[5586]=0;c[5587]=1065353216;g[5588]=0.0}c[5561]=c[5577];c[5562]=c[5578];c[5563]=c[5579];c[5564]=c[5580];c[5565]=c[5581];c[5566]=c[5582];c[5567]=c[5583];c[5568]=c[5584];c[5569]=c[5585];c[5570]=c[5586];c[5571]=c[5587];c[5572]=c[5588];c[5573]=0;c[5574]=0;c[5575]=0;c[5576]=0;return}function Gl(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;b=c[d>>2]|0;b=Jb[c[(c[b>>2]|0)+56>>2]&31](b,80)|0;d=c[d>>2]|0;c[b+4>>2]=d;c[b>>2]=9172;c[b+8>>2]=9220;c[b+56>>2]=d;c[b+60>>2]=0;c[b+44>>2]=e;c[b+48>>2]=f;f=yb[c[(c[d>>2]|0)+12>>2]&63](d,c[e+8>>2]|0,c[f+8>>2]|0)|0;c[b+72>>2]=f;e=c[b+56>>2]|0;mb[c[(c[e>>2]|0)+20>>2]&127](e,f);a[b+76>>0]=0;return b|0}function Hl(a,d){a=a|0;d=d|0;var e=0,f=0;while(1){e=ic(80)|0;if(e|0)break;e=c[6453]|0;c[6453]=e+0;if(!e){e=0;break}Vb[e&3]()}g[e+4>>2]=1.0;b[e+8>>1]=1;b[e+10>>1]=-1;c[e>>2]=2972;f=e+12|0;c[f>>2]=c[a>>2];c[f+4>>2]=c[a+4>>2];c[f+8>>2]=c[a+8>>2];c[f+12>>2]=c[a+12>>2];a=e+28|0;c[a>>2]=c[d>>2];c[a+4>>2]=c[d+4>>2];c[a+8>>2]=c[d+8>>2];c[a+12>>2]=c[d+12>>2];c[e+76>>2]=0;return e|0}function Il(a){a=a|0;var b=0,d=0,e=0,f=0.0,h=0.0;e=c[a+232>>2]|0;if((e|0)<=0)return;b=c[a+240>>2]|0;a=0;do{d=c[b+(a<<2)>>2]|0;switch(c[d+216>>2]|0){case 2:case 5:break;default:if(!(c[d+204>>2]&3)){h=+g[d+408>>2]*+g[d+392>>2];f=+g[d+412>>2]*+g[d+396>>2];g[d+452>>2]=+g[d+404>>2]*+g[d+388>>2]+ +g[d+452>>2];g[d+456>>2]=h+ +g[d+456>>2];g[d+460>>2]=f+ +g[d+460>>2]}}a=a+1|0}while((a|0)!=(e|0));return}function Jl(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;f=a[b+16>>0]|0;h=c[(f<<24>>24==0?d:e)+8>>2]|0;e=f<<24>>24?d:e;f=c[e+8>>2]|0;g=c[h+308>>2]|0;a:do if((g|0)>0){d=c[h+316>>2]|0;b=0;while(1){if((c[d+(b<<2)>>2]|0)==(f|0))break;b=b+1|0;if((b|0)>=(g|0))break a}if((b|0)!=(g|0))return}while(0);d=c[h+324>>2]|0;Ub[c[(c[d>>2]|0)+36>>2]&127](d,h,e);return}function Kl(b){b=b|0;var d=0;while(1){d=ic(64)|0;if(d|0)break;d=c[6453]|0;c[6453]=d+0;if(!d){d=0;break}Vb[d&3]()}c[d+8>>2]=c[b+8>>2];c[d+12>>2]=c[b+12>>2];c[d+24>>2]=c[b+24>>2];c[d>>2]=c[b>>2];c[d+4>>2]=c[b+4>>2];c[d+28>>2]=c[b+28>>2];c[d+32>>2]=c[b+32>>2];c[d+36>>2]=c[b+36>>2];c[d+40>>2]=c[b+40>>2];c[d+56>>2]=c[b+56>>2];c[d+48>>2]=c[b+48>>2];a[d+44>>0]=a[b+44>>0]&1;return d|0}function Ll(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;f=c[a+212>>2]|0;a:do if((f|0)>0){g=c[a+220>>2]|0;d=0;while(1){e=g+(d<<2)|0;if((c[e>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(f|0))break a}if((d|0)<(f|0)){c[e>>2]=c[g+(f+-1<<2)>>2];c[(c[a+220>>2]|0)+(f+-1<<2)>>2]=b;c[a+212>>2]=f+-1}}while(0);qh(c[b+28>>2]|0,b);qh(c[b+32>>2]|0,b);return}function Ml(b,d){b=b|0;d=d|0;do if(b){if(d>>>0<128){a[b>>0]=d;b=1;break}if(d>>>0<2048){a[b>>0]=d>>>6|192;a[b+1>>0]=d&63|128;b=2;break}if(d>>>0<55296|(d&-8192|0)==57344){a[b>>0]=d>>>12|224;a[b+1>>0]=d>>>6&63|128;a[b+2>>0]=d&63|128;b=3;break}if((d+-65536|0)>>>0<1048576){a[b>>0]=d>>>18|240;a[b+1>>0]=d>>>12&63|128;a[b+2>>0]=d>>>6&63|128;a[b+3>>0]=d&63|128;b=4;break}else{c[6326]=84;b=-1;break}}else b=0;while(0);return b|0}function Nl(a,b,d,e,f,g,h,i,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,l=0;Hb[c[(c[a>>2]|0)+32>>2]&1](a,b,d,e,f,g,h,i,j);l=c[a+184>>2]|0;k=c[i+20>>2]|0;k=(l|0)>(k|0)?l:k;if((k|0)<=0)return 0.0;l=0;do{+Lb[c[(c[a>>2]|0)+40>>2]&3](a,l,b,d,e,f,g,h,i,j);l=l+1|0}while((l|0)<(k|0));return 0.0}function Ol(a,b){a=a|0;b=+b;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0;h=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);e=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);i=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);h=h+ +g[a+32>>2];e=e+ +g[a+36>>2];i=i+ +g[a+40>>2];g[a+48>>2]=b;f=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);d=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);b=i-+Cb[c[(c[a>>2]|0)+48>>2]&15](a);g[a+32>>2]=h-f;g[a+36>>2]=e-d;g[a+40>>2]=b;g[a+44>>2]=0.0;return}function Pl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;if((c[a+8>>2]|0)<=0)return;e=0;a:while(1){while(1){f=c[a+16>>2]|0;g=f+(e<<4)|0;if(!(Jb[c[(c[b>>2]|0)+8>>2]&31](b,g)|0))break;sb[c[(c[a>>2]|0)+12>>2]&31](a,c[g>>2]|0,c[f+(e<<4)+4>>2]|0,d)|0;c[6038]=(c[6038]|0)+-1;if((e|0)>=(c[a+8>>2]|0)){e=7;break a}}e=e+1|0;if((e|0)>=(c[a+8>>2]|0)){e=7;break}}if((e|0)==7)return}function Ql(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;b=c[d>>2]|0;b=Jb[c[(c[b>>2]|0)+56>>2]&31](b,16)|0;d=c[d>>2]|0;c[b+4>>2]=d;c[b>>2]=8996;a[b+8>>0]=0;c[b+12>>2]=0;if(!(yb[c[(c[d>>2]|0)+24>>2]&63](d,c[e+8>>2]|0,c[f+8>>2]|0)|0))return b|0;d=c[b+4>>2]|0;c[b+12>>2]=yb[c[(c[d>>2]|0)+12>>2]&63](d,c[e+8>>2]|0,c[f+8>>2]|0)|0;a[b+8>>0]=1;return b|0}function Rl(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;a[b+251>>0]=1;c[b+68>>2]=c[d>>2];c[b+68+4>>2]=c[d+4>>2];c[b+68+8>>2]=c[d+8>>2];c[b+68+12>>2]=c[d+12>>2];e=+g[b+68>>2];f=+g[b+72>>2];h=+g[b+76>>2];i=+G(+(e*e+f*f+h*h));if(i>1.1920928955078125e-007){j=e*(1.0/i);f=f*(1.0/i);e=h*(1.0/i);d=c[b+80>>2]|0}else{j=0.0;f=0.0;e=0.0;d=0}g[b+84>>2]=j;g[b+88>>2]=f;g[b+92>>2]=e;c[b+96>>2]=d;return}function Sl(){var b=0,d=0;while(1){b=ic(100)|0;if(b|0)break;b=c[6453]|0;c[6453]=b+0;if(!b){b=0;break}Vb[b&3]()}g[b>>2]=1.2000000476837158;g[b+4>>2]=0.0;g[b+8>>2]=0.0;g[b+12>>2]=1.0e3;d=b+16|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[d+20>>2]=0;c[d+24>>2]=0;c[b+44>>2]=-1054867456;c[b+48>>2]=0;g[b+52>>2]=0.0;a[b+72>>0]=1;c[b+68>>2]=0;c[b+60>>2]=0;c[b+64>>2]=0;return b|0}function Tl(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;i=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);h=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);f=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);k=+g[b+52>>2]-h;j=+g[b+56>>2]-f;g[d>>2]=+g[b+48>>2]-i;g[d+4>>2]=k;g[d+8>>2]=j;g[d+12>>2]=0.0;h=h+ +g[b+52>>2];f=f+ +g[b+56>>2];g[e>>2]=i+ +g[b+48>>2];g[e+4>>2]=h;g[e+8>>2]=f;g[e+12>>2]=0.0;return}function Ul(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var h=0;while(1){h=ic(44)|0;if(h|0)break;h=c[6453]|0;c[6453]=h+0;if(!h){h=0;break}Vb[h&3]()}c[h>>2]=a;c[h+4>>2]=b;b=h+8|0;c[b>>2]=c[d>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[b+12>>2]=c[d+12>>2];d=h+24|0;c[d>>2]=c[e>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];g[h+40>>2]=f;return h|0}function Vl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=c[a+760>>2]|0;h=c[a+772>>2]|0;if((h|0)<=0){h=0;return h|0}e=c[a+780>>2]|0;a=0;while(1){f=c[e+(a*52|0)+8>>2]|0;if((f|0)==(g+(b*104|0)|0)?(c[e+(a*52|0)+12>>2]|0)==(g+(d*104|0)|0):0){a=1;e=8;break}if((f|0)==(g+(d*104|0)|0)?(c[e+(a*52|0)+12>>2]|0)==(g+(b*104|0)|0):0){a=1;e=8;break}a=a+1|0;if((a|0)>=(h|0)){a=0;e=8;break}}if((e|0)==8)return a|0;return 0}function Wl(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=c[d>>2]|0;g=Jb[c[(c[g>>2]|0)+56>>2]&31](g,20)|0;h=c[d+4>>2]|0;i=a[b+4>>0]|0;b=c[d>>2]|0;c[g+4>>2]=b;c[g>>2]=6464;a[g+8>>0]=0;c[g+12>>2]=h;a[g+16>>0]=i;if(h|0)return g|0;c[g+12>>2]=yb[c[(c[b>>2]|0)+12>>2]&63](b,c[e+8>>2]|0,c[f+8>>2]|0)|0;a[g+8>>0]=1;return g|0}function Xl(b){b=b|0;var d=0;c[b>>2]=6296;d=c[b+316>>2]|0;if(d|0){if(a[b+320>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+316>>2]=0}a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;c[b>>2]=5592;d=c[b+292>>2]|0;if(d|0){if(a[b+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+292>>2]=0}a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;c[b+288>>2]=0;c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function Yl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;j=+g[d>>2];i=+g[d+4>>2];e=+g[d+8>>2];f=j*+g[b+60>>2]+i*+g[b+64>>2]+e*+g[b+68>>2];h=j*+g[b+76>>2]+i*+g[b+80>>2]+e*+g[b+84>>2];e=j*+g[b+92>>2]+i*+g[b+96>>2]+e*+g[b+100>>2];d=b+60+((f<h?(h<e?2:1):f<e?2:0)<<4)|0;c[a>>2]=c[d>>2];c[a+4>>2]=c[d+4>>2];c[a+8>>2]=c[d+8>>2];c[a+12>>2]=c[d+12>>2];return}function Zl(b){b=b|0;var d=0;c[b>>2]=4916;d=c[b+536>>2]|0;if(d|0){if(a[b+540>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+536>>2]=0}a[b+540>>0]=1;c[b+536>>2]=0;c[b+528>>2]=0;c[b+532>>2]=0;c[b>>2]=5592;d=c[b+292>>2]|0;if(d|0){if(a[b+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+292>>2]=0}a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;c[b+288>>2]=0;c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function _l(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+48|0;c[f>>2]=8716;c[f+4>>2]=b;c[f+8>>2]=c[d>>2];c[f+8+4>>2]=c[d+4>>2];c[f+8+8>>2]=c[d+8>>2];c[f+8+12>>2]=c[d+12>>2];c[f+24>>2]=c[e>>2];c[f+24+4>>2]=c[e+4>>2];c[f+24+8>>2]=c[e+8>>2];c[f+24+12>>2]=c[e+12>>2];b=c[a+52>>2]|0;Yb[c[(c[b>>2]|0)+8>>2]&127](b,f,d,e);i=f;return}function $l(a,b,d){a=a|0;b=+b;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;i=+g[a+32>>2];f=+g[a+36>>2];j=+g[a+40>>2];h=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);e=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);j=(j+ +Cb[c[(c[a>>2]|0)+48>>2]&15](a))*2.0;g[d>>2]=b/12.0*((f+e)*2.0*(f+e)*2.0+j*j);g[d+4>>2]=b/12.0*((i+h)*2.0*(i+h)*2.0+j*j);g[d+8>>2]=b/12.0*((i+h)*2.0*(i+h)*2.0+(f+e)*2.0*(f+e)*2.0);g[d+12>>2]=0.0;return}function am(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+64|0;c[d>>2]=1065353216;c[d+4>>2]=0;c[d+4+4>>2]=0;c[d+4+8>>2]=0;c[d+4+12>>2]=0;c[d+20>>2]=1065353216;c[d+24>>2]=0;c[d+24+4>>2]=0;c[d+24+8>>2]=0;c[d+24+12>>2]=0;c[d+40>>2]=1065353216;c[d+44>>2]=0;c[d+48>>2]=c[b>>2];c[d+48+4>>2]=c[b+4>>2];c[d+48+8>>2]=c[b+8>>2];c[d+48+12>>2]=c[b+12>>2];zd(a,d);i=d;return}function bm(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0.0,h=0.0;h=+g[b>>2];f=+g[b+4>>2];e=+g[b+8>>2];d=(+g[a+320>>2]*h+ +g[a+324>>2]*f+ +g[a+328>>2]*e)*+g[a+588>>2];c=(+g[a+336>>2]*h+ +g[a+340>>2]*f+ +g[a+344>>2]*e)*+g[a+592>>2];g[a+368>>2]=+g[a+368>>2]+(+g[a+304>>2]*h+ +g[a+308>>2]*f+ +g[a+312>>2]*e)*+g[a+584>>2];g[a+372>>2]=+g[a+372>>2]+d;g[a+376>>2]=+g[a+376>>2]+c;return}function cm(a,b,d){a=a|0;b=b|0;d=d|0;a:do switch(c[b+216>>2]|0){case 2:case 5:{switch(c[d+216>>2]|0){case 2:case 5:{a=0;break}default:break a}return a|0}default:{}}while(0);if(!((c[b+276>>2]|0)!=0?!(Jb[c[(c[b>>2]|0)+12>>2]&31](b,d)|0):0)){if(!(c[d+276>>2]|0)){d=1;return d|0}if(Jb[c[(c[d>>2]|0)+12>>2]&31](d,b)|0){d=1;return d|0}}d=0;return d|0}function dm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;j=+g[a+32>>2];h=+g[a+36>>2];e=+g[a+40>>2];i=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);f=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);e=e+ +Cb[c[(c[a>>2]|0)+48>>2]&15](a);g[d>>2]=+(b&1^1|0)*(j+i)-+(b&1|0)*(j+i);g[d+4>>2]=+(b>>>1&1^1|0)*(h+f)-+(b>>>1&1|0)*(h+f);g[d+8>>2]=+(b>>>2&1^1|0)*e-+(b>>>2&1|0)*e;g[d+12>>2]=0.0;return}function em(){var b=0;while(1){b=ic(64)|0;if(b|0)break;b=c[6453]|0;c[6453]=b+0;if(!b){b=0;break}Vb[b&3]()}g[b+60>>2]=0.0;g[b+8>>2]=0.0;g[b+12>>2]=.10000000149011612;g[b+16>>2]=300.0;g[b>>2]=1.0;g[b+4>>2]=-1.0;g[b+28>>2]=0.0;g[b+32>>2]=.20000000298023224;g[b+36>>2]=0.0;g[b+40>>2]=0.0;g[b+20>>2]=1.0;g[b+24>>2]=.5;c[b+56>>2]=0;g[b+48>>2]=0.0;a[b+44>>0]=0;return b|0}function fm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,g=0;e=i;i=i+16|0;c[e>>2]=-1;c[e+4>>2]=c[a+16>>2];if(!(c[b+4>>2]|0))c[b+4>>2]=e;g=c[a+12>>2]|0;f=+Kb[c[(c[g>>2]|0)+12>>2]&15](g,b,d);c[a+4>>2]=c[(c[a+12>>2]|0)+4>>2];i=e;return +f}function gm(a,b){a=a|0;b=b|0;c[a>>2]=c[b>>2];c[a+4>>2]=c[b+16>>2];c[a+8>>2]=c[b+32>>2];g[a+12>>2]=0.0;c[a+16>>2]=c[b+4>>2];c[a+20>>2]=c[b+20>>2];c[a+24>>2]=c[b+36>>2];g[a+28>>2]=0.0;c[a+32>>2]=c[b+8>>2];c[a+36>>2]=c[b+24>>2];c[a+40>>2]=c[b+40>>2];g[a+44>>2]=0.0;c[a+48>>2]=c[b+48>>2];c[a+52>>2]=c[b+52>>2];c[a+56>>2]=c[b+56>>2];g[a+60>>2]=0.0;return}function hm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;i=+g[b+32>>2];j=+g[b+36>>2];e=+g[b+40>>2];h=+Cb[c[(c[b>>2]|0)+48>>2]&15](b);f=+Cb[c[(c[b>>2]|0)+48>>2]&15](b);e=e+ +Cb[c[(c[b>>2]|0)+48>>2]&15](b);f=+g[d+4>>2]>=0.0?j+f:-(j+f);e=+g[d+8>>2]>=0.0?e:-e;g[a>>2]=+g[d>>2]>=0.0?i+h:-(i+h);g[a+4>>2]=f;g[a+8>>2]=e;g[a+12>>2]=0.0;return}function im(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0;if((d|0)<=0)return;e=0;do{i=+g[a+32>>2];h=+g[a+36>>2];h=+g[b+(e<<4)+4>>2]>=0.0?h:-h;f=+g[a+40>>2];f=+g[b+(e<<4)+8>>2]>=0.0?f:-f;g[c+(e<<4)>>2]=+g[b+(e<<4)>>2]>=0.0?i:-i;g[c+(e<<4)+4>>2]=h;g[c+(e<<4)+8>>2]=f;g[c+(e<<4)+12>>2]=0.0;e=e+1|0}while((e|0)!=(d|0));return}function jm(a,b,d,e,f,g,h,i,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;a=c[a+32>>2]|0;c[d>>2]=c[a+(k<<5)+12>>2];c[b>>2]=c[a+(k<<5)+16>>2];c[e>>2]=c[a+(k<<5)+28>>2];c[f>>2]=c[a+(k<<5)+20>>2];c[i>>2]=c[a+(k<<5)>>2];c[g>>2]=c[a+(k<<5)+4>>2];c[h>>2]=c[a+(k<<5)+8>>2];c[j>>2]=c[a+(k<<5)+24>>2];return}function km(b){b=b|0;var d=0,e=0;c[b>>2]=7100;d=c[b+68>>2]|0;if(d|0?(gi(d),e=c[b+68>>2]|0,e|0):0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}d=c[b+28>>2]|0;if(!d){a[b+32>>0]=1;c[b+28>>2]=0;c[b+20>>2]=0;b=b+24|0;c[b>>2]=0;return}if(a[b+32>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+28>>2]=0;a[b+32>>0]=1;c[b+28>>2]=0;c[b+20>>2]=0;b=b+24|0;c[b>>2]=0;return}function lm(a,e,f){a=a|0;e=e|0;f=f|0;var h=0.0;switch(c[a+100>>2]|0){case 0:{f=(S(c[a+68>>2]|0,f)|0)+e|0;h=+g[(c[a+96>>2]|0)+(f<<2)>>2];return +h}case 5:{h=+(d[(S(c[a+68>>2]|0,f)|0)+e+(c[a+96>>2]|0)>>0]|0)*+g[a+92>>2];return +h}case 3:{f=(S(c[a+68>>2]|0,f)|0)+e|0;h=+(b[(c[a+96>>2]|0)+(f<<1)>>1]|0)*+g[a+92>>2];return +h}default:{h=0.0;return +h}}return 0.0}function mm(b){b=b|0;var d=0,e=0;c[b>>2]=7480;d=c[b+108>>2]|0;if(d|0){if(a[b+112>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+108>>2]=0}a[b+112>>0]=1;c[b+108>>2]=0;c[b+100>>2]=0;c[b+104>>2]=0;c[b>>2]=8236;d=c[b+56>>2]|0;if(d|0?(kb[c[c[d>>2]>>2]&255](d),e=c[b+56>>2]|0,e|0):0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function nm(a,b){a=+a;b=+b;var d=0;c[6324]=(c[6324]|0)+1;d=ic(79)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+8>>2]=0;c[d+12>>2]=-1;c[d+16>>2]=1065353216;c[d+20>>2]=1065353216;c[d+24>>2]=1065353216;g[d+28>>2]=0.0;g[d+48>>2]=.03999999910593033;c[d+4>>2]=10;c[d>>2]=6900;c[d+56>>2]=0;g[d+32>>2]=b*.5;g[d+36>>2]=a;g[d+40>>2]=a;g[d+44>>2]=0.0;return d|0}function om(a,b){a=+a;b=+b;var d=0;c[6324]=(c[6324]|0)+1;d=ic(79)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+8>>2]=0;c[d+12>>2]=-1;c[d+16>>2]=1065353216;c[d+20>>2]=1065353216;c[d+24>>2]=1065353216;g[d+28>>2]=0.0;g[d+48>>2]=.03999999910593033;c[d+4>>2]=10;c[d>>2]=7e3;c[d+56>>2]=2;g[d+32>>2]=a;g[d+36>>2]=a;g[d+40>>2]=b*.5;g[d+44>>2]=0.0;return d|0}function pm(a,b){a=+a;b=+b;var d=0;c[6324]=(c[6324]|0)+1;d=ic(79)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}c[d+8>>2]=0;c[d+12>>2]=-1;c[d+16>>2]=1065353216;c[d+20>>2]=1065353216;c[d+24>>2]=1065353216;g[d+28>>2]=0.0;g[d+48>>2]=.03999999910593033;c[d>>2]=6800;c[d+4>>2]=10;c[d+56>>2]=1;g[d+32>>2]=a;g[d+36>>2]=b*.5;g[d+40>>2]=a;g[d+44>>2]=0.0;return d|0}function qm(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;var e=0.0,f=0.0,h=0.0;e=+I(+b);f=+I(+c);h=+I(+d);b=+J(+b);c=+J(+c);d=+J(+d);g[a>>2]=f*h;g[a+4>>2]=c*b*h-e*d;g[a+8>>2]=c*e*h+b*d;g[a+12>>2]=0.0;g[a+16>>2]=f*d;g[a+20>>2]=c*b*d+e*h;g[a+24>>2]=c*e*d-b*h;g[a+28>>2]=0.0;g[a+32>>2]=-c;g[a+36>>2]=f*b;g[a+40>>2]=f*e;g[a+44>>2]=0.0;return}function rm(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;c[b+4>>2]=c[d>>2];c[b+4+4>>2]=c[d+4>>2];c[b+4+8>>2]=c[d+8>>2];c[b+4+12>>2]=c[d+12>>2];c[b+20>>2]=c[e>>2];c[b+20+4>>2]=c[e+4>>2];c[b+20+8>>2]=c[e+8>>2];c[b+20+12>>2]=c[e+12>>2];g[b+36>>2]=f;a[b+40>>0]=1;return}function sm(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;switch(e|0){case 5:case -1:break;default:return}switch(b|0){case 2:{g[a+764>>2]=d;c[a+748>>2]=c[a+748>>2]|2;return}case 4:{g[a+760>>2]=d;c[a+748>>2]=c[a+748>>2]|1;return}case 3:{g[a+752>>2]=d;c[a+748>>2]=c[a+748>>2]|4;return}case 1:{g[a+756>>2]=d;c[a+748>>2]=c[a+748>>2]|8;return}default:return}}function tm(b){b=b|0;var d=0;c[b>>2]=7480;d=c[b+108>>2]|0;if(d|0){if(a[b+112>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+108>>2]=0}a[b+112>>0]=1;c[b+108>>2]=0;c[b+100>>2]=0;c[b+104>>2]=0;c[b>>2]=8236;d=c[b+56>>2]|0;if(!d)return;kb[c[c[d>>2]>>2]&255](d);d=c[b+56>>2]|0;if(!d)return;c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);return}function um(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;d=i;i=i+16|0;c[d>>2]=5348;c[d+4>>2]=e;ne(a+4|0,c[a+4>>2]|0,b,e+4|0,e+20|0,+g[e+32>>2],f,h,d);ne(a+64|0,c[a+64>>2]|0,b,e+4|0,e+20|0,+g[e+32>>2],f,h,d);i=d;return}function vm(a,b){a=+a;b=b|0;var d=0,e=0,f=0;h[l>>3]=a;d=c[l>>2]|0;e=c[l+4>>2]|0;f=ps(d|0,e|0,52)|0;switch(f&2047){case 0:{if(a!=0.0){a=+vm(a*18446744073709552.0e3,b);d=(c[b>>2]|0)+-64|0}else d=0;c[b>>2]=d;break}case 2047:break;default:{c[b>>2]=(f&2047)+-1022;c[l>>2]=d;c[l+4>>2]=e&-2146435073|1071644672;a=+h[l>>3]}}return +a}function wm(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0;f=i;i=i+16|0;d=+g[b>>2];e=+g[b+4>>2];c=+g[b+8>>2];if(d*d+e*e+c*c>0.0){g[f>>2]=-d;g[f+4>>2]=-e;g[f+8>>2]=-c;g[f+12>>2]=0.0;be(a,f);d=+g[b>>2];e=+g[b+4>>2];c=+g[b+8>>2]}g[a+52>>2]=+G(+(d*d+e*e+c*c));i=f;return}function xm(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=c[a+308>>2]|0;if((g|0)<=0)return;b=c[b>>2]|0;f=c[a+316>>2]|0;d=0;while(1){e=f+(d<<2)|0;if((c[e>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(g|0)){h=7;break}}if((h|0)==7)return;if((d|0)>=(g|0))return;c[e>>2]=c[f+(g+-1<<2)>>2];c[a+308>>2]=g+-1;return}function ym(a,b,d,e,f,g,h,i,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;+Nb[c[(c[a>>2]|0)+44>>2]&3](a,b,d,e,f,g,h,i,j);+Nb[c[(c[a>>2]|0)+48>>2]&3](a,b,d,e,f,g,h,i,j);+Rb[c[(c[a>>2]|0)+36>>2]&1](a,b,d,i);return 0.0}function zm(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if(c>>>0>0|(c|0)==0&b>>>0>4294967295){while(1){e=er(b|0,c|0,10,0)|0;d=d+-1|0;a[d>>0]=e|48;e=b;b=Sv(b|0,c|0,10,0)|0;if(!(c>>>0>9|(c|0)==9&e>>>0>4294967295))break;else c=D}c=b}else c=b;if(c)while(1){d=d+-1|0;a[d>>0]=(c>>>0)%10|0|48;if(c>>>0<10)break;else c=(c>>>0)/10|0}return d|0}function Am(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;f=c[a+280>>2]|0;if((f|0)<=0)return;g=c[a+288>>2]|0;d=0;while(1){e=g+(d<<2)|0;if((c[e>>2]|0)==(b|0))break;d=d+1|0;if((d|0)>=(f|0)){h=7;break}}if((h|0)==7)return;if((d|0)>=(f|0))return;c[e>>2]=c[g+(f+-1<<2)>>2];c[(c[a+288>>2]|0)+(f+-1<<2)>>2]=b;c[a+280>>2]=f+-1;return}function Bm(){var b=0,e=0,f=0;f=i;i=i+16|0;a[f>>0]=10;b=c[2381]|0;if(!b)if(!(po(9508)|0)){b=c[2381]|0;e=4}else b=-1;else e=4;do if((e|0)==4){e=c[2382]|0;if(!(e>>>0>=b>>>0|(a[9583]|0)==10)){c[2382]=e+1;a[e>>0]=10;b=10;break}if((yb[c[9544>>2]&63](9508,f,1)|0)==1)b=d[f>>0]|0;else b=-1}while(0);i=f;return b|0}function Cm(){var a=0,b=0;b=i;i=i+32|0;while(1){a=ic(112)|0;if(a|0)break;a=c[6453]|0;c[6453]=a+0;if(!a){a=0;break}Vb[a&3]()}c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=4096;c[b+12>>2]=4096;c[b+16>>2]=0;c[b+20>>2]=1;gg(a,b);i=b;return a|0}function Dm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,g=0;e=i;i=i+16|0;c[e>>2]=-1;c[e+4>>2]=c[a+24>>2];if(!(c[b+4>>2]|0))c[b+4>>2]=e;g=c[a+20>>2]|0;f=+Kb[c[(c[g>>2]|0)+12>>2]&15](g,b,d);c[a+4>>2]=c[(c[a+20>>2]|0)+4>>2];i=e;return +f}function Em(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0;a:do switch(b|0){case 2:case 1:{if(c>>>0<3){d=+g[a+600>>2];break a}if((c+-3|0)>>>0<3)d=+g[a+432>>2];else d=0.0;break}case 4:case 3:{if(c>>>0<3){d=+g[a+596>>2];break a}if((c+-3|0)>>>0<3)d=+g[a+604>>2];else d=0.0;break}default:d=0.0}while(0);return +d}function Fm(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;b=c[d>>2]|0;b=Jb[c[(c[b>>2]|0)+56>>2]&31](b,16)|0;d=c[d>>2]|0;c[b+4>>2]=d;c[b>>2]=6436;a[b+8>>0]=0;c[b+12>>2]=0;c[b+12>>2]=yb[c[(c[d>>2]|0)+12>>2]&63](d,c[e+8>>2]|0,c[f+8>>2]|0)|0;a[b+8>>0]=1;return b|0}function Gm(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0;f=i;i=i+16|0;c[6324]=(c[6324]|0)+1;e=ic(311)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}c[f>>2]=1065353216;c[f+4>>2]=0;c[f+8>>2]=0;g[f+12>>2]=0.0;Qg(e,a,b,d,f);i=f;return e|0}function Hm(a,b){a=a|0;b=b|0;var d=0,e=0;d=c[a+60>>2]|0;if(!d)return;e=ob[c[(c[d>>2]|0)+8>>2]&127](d)|0;e=yb[c[(c[b>>2]|0)+16>>2]&63](b,e,1)|0;d=c[a+60>>2]|0;d=yb[c[(c[d>>2]|0)+12>>2]&63](d,c[e+8>>2]|0,b)|0;ib[c[(c[b>>2]|0)+20>>2]&31](b,e,d,1346456916,c[a+60>>2]|0);return}function Im(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;switch(b|0){case 2:case 1:if(e>>>0<3){g[a+600>>2]=d;c[a+592>>2]=c[a+592>>2]|2;return}else{g[a+432>>2]=d;return}case 4:case 3:if(e>>>0<3){g[a+596>>2]=d;c[a+592>>2]=c[a+592>>2]|1;return}else{g[a+604>>2]=d;c[a+592>>2]=c[a+592>>2]|4;return}default:return}}function Jm(a,d){a=a|0;d=d|0;var e=0,f=0,g=0;d=c[a+56>>2]|0;if((d&65535)<<16>>16)return;b[a+64>>1]=1;g=c[a+60>>2]|0;if((d>>>16&65535)>1){e=1;d=1;while(1){b[g+(d<<6)+48>>1]=d+1;f=e+1<<16>>16;d=b[a+58>>1]|0;if((f&65535)<(d&65535)){e=f;d=f&65535}else break}}else d=d>>>16&65535;b[g+((d&65535)+-1<<6)+48>>1]=0;return}function Km(){var a=0,b=0;b=i;i=i+32|0;while(1){a=ic(92)|0;if(a|0)break;a=c[6453]|0;c[6453]=a+0;if(!a){a=0;break}Vb[a&3]()}c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=4096;c[b+12>>2]=4096;c[b+16>>2]=0;c[b+20>>2]=1;Ud(a,b);i=b;return a|0}function Lm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return _a(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if(!e)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function Mm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0;a:do switch(c|0){case 5:case -1:switch(b|0){case 2:{d=+g[a+764>>2];break a}case 4:{d=+g[a+760>>2];break a}case 3:{d=+g[a+752>>2];break a}case 1:{d=+g[a+756>>2];break a}default:{d=0.0;break a}}default:d=0.0}while(0);return +d}function Nm(a,b){a=a|0;b=b|0;var d=0,e=0;d=c[a+56>>2]|0;if(!d)return;e=ob[c[(c[d>>2]|0)+12>>2]&127](d)|0;e=yb[c[(c[b>>2]|0)+16>>2]&63](b,e,1)|0;d=c[a+56>>2]|0;d=yb[c[(c[d>>2]|0)+16>>2]&63](d,c[e+8>>2]|0,b)|0;ib[c[(c[b>>2]|0)+20>>2]&31](b,e,d,1213612625,c[a+56>>2]|0);return}function Om(a){a=a|0;var b=0.0,d=0.0,e=0.0,f=0.0;b=+g[(c[a+28>>2]|0)+384>>2];d=+g[(c[a+32>>2]|0)+384>>2];if(d==0.0)b=1.0;else b=b/(b+d);f=1.0-b;e=b*+g[a+1116>>2]+f*+g[a+1180>>2];d=b*+g[a+1120>>2]+f*+g[a+1184>>2];g[a+1284>>2]=b*+g[a+1112>>2]+f*+g[a+1176>>2];g[a+1288>>2]=e;g[a+1292>>2]=d;g[a+1296>>2]=0.0;return}function Pm(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0,f=0.0,h=0.0;e=+g[a+32>>2];f=+g[a+36>>2];h=+g[a+40>>2];d=+g[b>>2];if(!(d<=e+c)){b=0;return b|0}if(!(d>=-e-c)){b=0;return b|0}d=+g[b+4>>2];if(!(d<=f+c)){b=0;return b|0}if(!(d>=-f-c)){b=0;return b|0}d=+g[b+8>>2];if(!(d<=h+c)){b=0;return b|0}b=d>=-h-c;return b|0}function Qm(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;if(!(+g[b+36>>2]>f))return;a[b+40>>0]=1;c[b+4>>2]=c[d>>2];c[b+4+4>>2]=c[d+4>>2];c[b+4+8>>2]=c[d+8>>2];c[b+4+12>>2]=c[d+12>>2];c[b+20>>2]=c[e>>2];c[b+20+4>>2]=c[e+4>>2];c[b+20+8>>2]=c[e+8>>2];c[b+20+12>>2]=c[e+12>>2];g[b+36>>2]=f;return}function Rm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;d=+g[b+32>>2];i=+g[b+40>>2];k=+g[c>>2];e=+g[c+4>>2];j=+G(+(k*k+e*e));f=+g[c+8>>2];if(j!=0.0){h=e*(d/j);e=f<0.0?-i:i;d=k*(d/j)}else{h=0.0;e=f<0.0?-i:i}g[a>>2]=d;g[a+8>>2]=e;g[a+4>>2]=h;return}function Sm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;d=+g[b+32>>2];i=+g[b+36>>2];k=+g[c>>2];e=+g[c+8>>2];j=+G(+(k*k+e*e));f=+g[c+4>>2];if(j!=0.0){h=e*(d/j);e=f<0.0?-i:i;d=k*(d/j)}else{h=0.0;e=f<0.0?-i:i}g[a>>2]=d;g[a+4>>2]=e;g[a+8>>2]=h;return}function Tm(a,d){a=a|0;d=d|0;var e=0,f=0;e=c[d>>2]|0;f=c[a+80>>2]|0;if((e|0)==(f|0)){f=0;return f|0}d=c[d+4>>2]|0;if(!((b[a+10>>1]&(d&65535))<<16>>16)){f=0;return f|0}if(!((b[a+8>>1]&(d>>>16&65535))<<16>>16)){f=0;return f|0}a=c[a+92>>2]|0;f=yb[c[(c[a>>2]|0)+28>>2]&63](a,f,e)|0;return f|0}function Um(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;d=+g[b+36>>2];f=+g[b+32>>2];j=+g[c+4>>2];e=+g[c+8>>2];i=+G(+(j*j+e*e));if(i!=0.0){h=e*(d/i);e=+g[c>>2]<0.0?-f:f;d=j*(d/i)}else{h=0.0;e=+g[c>>2]<0.0?-f:f}g[a+4>>2]=d;g[a>>2]=e;g[a+8>>2]=h;return}function Vm(a,b){a=a|0;b=+b;var c=0,d=0.0;c=i;i=i+16|0;if(!(+g[a+68>>2]>0.0)){i=c;return}d=-+g[a+92>>2];b=-+g[a+96>>2];g[c>>2]=-+g[a+88>>2];g[c+4>>2]=d;g[c+8>>2]=b;g[c+12>>2]=0.0;Zi(a+4|0,c,a+164|0);Zi(a+16|0,a+88|0,a+180|0);i=c;return}function Wm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0,g=0;if((d|0)>-1|(d|0)==-1&c>>>0>4294967295){e=(+(c>>>0)+4294967296.0*+(d>>>0))*18446744073709552.0e3+(+(a>>>0)+4294967296.0*+(b>>>0));return +e}else{g=Ds(0,0,a|0,b|0)|0;f=D;d=Ct((a|0)==0&(b|0)==0&1|0,0,~c|0,~d|0)|0;e=-+Wm(g,f,d,D);return +e}return 0.0}function Xm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=c[b+16>>2]|0;do if(f){if((f|0)!=(d|0)){c[b+36>>2]=(c[b+36>>2]|0)+1;c[b+24>>2]=2;a[b+54>>0]=1;break}if((c[b+24>>2]|0)==2)c[b+24>>2]=e}else{c[b+16>>2]=d;c[b+24>>2]=e;c[b+36>>2]=1}while(0);return}function Ym(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=c[a+84>>2]|0;a=c[f+8>>2]|0;if((a|0)<=0)return;e=0;do{d=c[(c[f+16>>2]|0)+(e*12|0)+8>>2]|0;if(d){mb[c[(c[d>>2]|0)+16>>2]&127](d,b);a=c[f+8>>2]|0}e=e+1|0}while((e|0)<(a|0));return}function Zm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=i;i=i+32|0;c[f>>2]=c[a+60>>2];c[f+4>>2]=0;c[f+8>>2]=b;c[f+12>>2]=f+20;c[f+16>>2]=d;a=ab(140,f|0)|0;if(a>>>0<=4294963200)if((a|0)<0)e=5;else a=c[f+20>>2]|0;else{c[6326]=0-a;e=5}if((e|0)==5){c[f+20>>2]=-1;a=-1}i=f;return a|0}function _m(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+48|0;f=c[b+192>>2]|0;Yb[c[(c[f>>2]|0)+8>>2]&127](f,b+4|0,e+32|0,e+16|0);c[e>>2]=5988;c[e+4>>2]=b;c[e+8>>2]=a;c[e+12>>2]=d;d=c[a+68>>2]|0;Yb[c[(c[d>>2]|0)+28>>2]&127](d,e+32|0,e+16|0,e);i=e;return}function $m(a,b,d){a=a|0;b=b|0;d=d|0;ii(a,b,d)|0;c[b+52>>2]=c[a+300>>2];c[b+56>>2]=c[a+304>>2];c[b+60>>2]=c[a+308>>2];c[b+64>>2]=c[a+312>>2];c[b+68>>2]=c[a+316>>2];c[b+72>>2]=c[a+320>>2];c[b+76>>2]=c[a+324>>2];c[b+80>>2]=c[a+328>>2];return 12168}function an(a){a=+a;var b=0;c[6324]=(c[6324]|0)+1;b=ic(75)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}c[b+8>>2]=0;c[b+12>>2]=-1;c[b+16>>2]=1065353216;c[b+20>>2]=1065353216;c[b+24>>2]=1065353216;g[b+28>>2]=0.0;c[b>>2]=8368;c[b+4>>2]=8;g[b+32>>2]=a;g[b+48>>2]=a;return b|0}function bn(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0;c[a+388>>2]=c[b>>2];c[a+388+4>>2]=c[b+4>>2];c[a+388+8>>2]=c[b+8>>2];c[a+388+12>>2]=c[b+12>>2];f=+g[a+384>>2];e=+g[a+392>>2]*f;d=+g[a+396>>2]*f;g[a+600>>2]=+g[a+388>>2]*f;g[a+604>>2]=e;g[a+608>>2]=d;g[a+612>>2]=0.0;return}function cn(a){a=a|0;var b=0,d=0,e=0;kb[c[(c[a>>2]|0)+8>>2]&255](a);kb[c[(c[a>>2]|0)+12>>2]&255](a);b=c[a+24>>2]|0;if(!b)return;e=c[(c[b>>2]|0)+32>>2]|0;d=c[a+68>>2]|0;d=ob[c[(c[d>>2]|0)+36>>2]&127](d)|0;Yb[e&127](b,d,a+28|0,c[a+24>>2]|0);return}function dn(a){a=a|0;c[a>>2]=1065353216;c[a+4>>2]=0;c[a+4+4>>2]=0;c[a+4+8>>2]=0;c[a+4+12>>2]=0;c[a+20>>2]=1065353216;c[a+24>>2]=0;c[a+24+4>>2]=0;c[a+24+8>>2]=0;c[a+24+12>>2]=0;c[a+40>>2]=1065353216;c[a+44>>2]=0;c[a+44+4>>2]=0;c[a+44+8>>2]=0;c[a+44+12>>2]=0;c[a+44+16>>2]=0;return}function en(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=c[b>>2]|0;a=c[d>>2]|0;a=(c[a+248>>2]|0)==4?a:0;if(!((f|0)==0?1:(c[f+248>>2]|0)!=4))Yb[c[(c[f>>2]|0)+32>>2]&127](f,d,e,b);if(!a)return 0;Yb[c[(c[a>>2]|0)+32>>2]&127](a,b,e,d);return 0}function fn(a,b){a=a|0;b=b|0;var d=0,e=0;while(1){d=ic(64)|0;if(d|0)break;d=c[6453]|0;c[6453]=d+0;if(!d){d=0;break}Vb[d&3]()}e=d+48|0;al(d,a);c[e>>2]=c[b>>2];c[e+4>>2]=c[b+4>>2];c[e+8>>2]=c[b+8>>2];c[e+12>>2]=c[b+12>>2];return d|0}function gn(a){a=a|0;var b=0,d=0;b=i;i=i+16|0;Ra(a|0)|0;if(Za(25804,3)|0)Vi(21654,b);a=Qa(c[6452]|0)|0;if((a|0?(d=c[a>>2]|0,d|0):0)?((c[d+48>>2]&-256|0)==1126902528?(c[d+48+4>>2]|0)==1129074247:0):0)ru(c[d+12>>2]|0);d=c[2405]|0;c[2405]=d+0;ru(d)}function hn(a,b){a=a|0;b=b|0;var d=0;if(c[b+40>>2]|0){hn(a,c[b+36>>2]|0);hn(a,c[b+40>>2]|0)}if((c[a>>2]|0)==(b|0))c[a>>2]=0;d=c[a+4>>2]|0;if(!d){c[a+4>>2]=b;return}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);c[a+4>>2]=b;return}function jn(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=c[a+32>>2]|0;c[g>>2]=(c[g>>2]|0)+1;tg(a,Cd(a,b,f)|0);tg(a,Cd(a,d,f)|0);tg(a,Cd(a,e,f)|0);return}function kn(a,b){a=a|0;b=b|0;var d=0,e=0;c[a+72>>2]=(c[a+72>>2]|0)+1;d=c[a+20>>2]|0;if((d|0)>0)do{e=d;d=d+-1|0;if((c[(c[a+28>>2]|0)+(d*80|0)+64>>2]|0)==(b|0))je(a,d)}while((e|0)>1);kb[c[(c[a>>2]|0)+68>>2]&255](a);return}function ln(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+16|0;c[f>>2]=a;c[f+4>>2]=e;e=c[a+72+((c[(c[b+4>>2]|0)+4>>2]|0)*144|0)+(c[(c[d+4>>2]|0)+4>>2]<<2)>>2]|0;e=sb[c[(c[e>>2]|0)+8>>2]&31](e,f,b,d)|0;i=f;return e|0}function mn(a,b){a=a|0;b=b|0;var d=0;a=c[a+64>>2]|0;if(!b)return;d=c[a+16>>2]|0;if(d>>>0<=b>>>0?(d+(S(c[a>>2]|0,c[a+4>>2]|0)|0)|0)>>>0>b>>>0:0){c[b>>2]=c[a+12>>2];c[a+12>>2]=b;c[a+8>>2]=(c[a+8>>2]|0)+1;return}c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function nn(a){a=a|0;var b=0,d=0;if((c[a+232>>2]|0)<=0)return;b=0;do{d=(c[(c[a+240>>2]|0)+(b<<2)>>2]|0)+452|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[d+20>>2]=0;c[d+24>>2]=0;c[d+28>>2]=0;b=b+1|0}while((b|0)<(c[a+232>>2]|0));return}function on(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=c[a+52>>2]|0;if((d|0)<=0)return;f=0;do{e=c[(c[a+60>>2]|0)+(f<<2)>>2]|0;if(e){mb[c[(c[e>>2]|0)+16>>2]&127](e,b);d=c[a+52>>2]|0}f=f+1|0}while((f|0)<(d|0));return}function pn(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;var e=0.0,f=0.0,h=0.0;e=+I(+(b*.5));b=+J(+(b*.5));f=+I(+(c*.5));c=+J(+(c*.5));h=+I(+(d*.5));d=+J(+(d*.5));g[a>>2]=d*f*e-h*c*b;g[a+4>>2]=h*c*e+d*f*b;g[a+8>>2]=h*f*b-d*c*e;g[a+12>>2]=h*f*e+d*c*b;return}function qn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=c[a+32>>2]|0;c[f>>2]=(c[f>>2]|0)+1;tg(a,Cd(a,b,0)|0);tg(a,Cd(a,d,0)|0);tg(a,Cd(a,e,0)|0);return}function rn(a,b,d){a=a|0;b=b|0;d=d|0;c[a+52>>2]=c[b>>2];c[a+52+4>>2]=c[b+4>>2];c[a+52+8>>2]=c[b+8>>2];c[a+52+12>>2]=c[b+12>>2];c[a+68>>2]=c[d>>2];c[a+68+4>>2]=c[d+4>>2];c[a+68+8>>2]=c[d+8>>2];c[a+68+12>>2]=c[d+12>>2];c[a+48>>2]=1;return}function sn(){var b=0;while(1){b=ic(40)|0;if(b|0)break;b=c[6453]|0;c[6453]=b+0;if(!b){b=0;break}Vb[b&3]()}g[b+12>>2]=1.0;c[b+8>>2]=0;c[b+4>>2]=5;c[b>>2]=3808;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;a[b+16>>0]=1;return b|0}function tn(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;var e=0.0,f=0.0,h=0.0;e=+I(+(b*.5));b=+J(+(b*.5));f=+I(+(c*.5));c=+J(+(c*.5));h=+I(+(d*.5));d=+J(+(d*.5));g[a>>2]=h*c*e+d*f*b;g[a+4>>2]=h*f*b-d*c*e;g[a+8>>2]=d*f*e-h*c*b;g[a+12>>2]=h*f*e+d*c*b;return}function un(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[d>>2]=c[b+16>>2];c[d+4>>2]=c[b+16+4>>2];c[d+8>>2]=c[b+16+8>>2];c[d+12>>2]=c[b+16+12>>2];c[e>>2]=c[b+32>>2];c[e+4>>2]=c[b+32+4>>2];c[e+8>>2]=c[b+32+8>>2];c[e+12>>2]=c[b+32+12>>2];return}function vn(a,b,c,d,e,f){a=a|0;b=+b;c=+c;d=+d;e=+e;f=+f;g[a+692>>2]=(c-b)*.5;b=+jh((c-b)*.5+b,6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;g[a+688>>2]=b;g[a+696>>2]=d;g[a+700>>2]=e;g[a+704>>2]=f;return}function wn(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;i=c[a+4>>2]|0;if(!(i&1))h=i>>8;else h=c[(c[e>>2]|0)+(i>>8)>>2]|0;a=c[a>>2]|0;Ab[c[(c[a>>2]|0)+20>>2]&7](a,b,d,e+h|0,i&2|0?f:2,g);return}function xn(a,b){a=a|0;b=b|0;var d=0;a=c[a+64>>2]|0;d=c[a+8>>2]|0;if(d|0){b=c[a+12>>2]|0;c[a+12>>2]=c[b>>2];c[a+8>>2]=d+-1;return b|0}c[6324]=(c[6324]|0)+1;a=ic(b+19|0)|0;if(!a){b=0;return b|0}c[(a+4+15&-16)+-4>>2]=a;b=a+4+15&-16;return b|0}function yn(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=b+e|0;if((e|0)>=20){d=d&255;g=b&3;h=d|d<<8|d<<16|d<<24;if(g){g=b+4-g|0;while((b|0)<(g|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(f&~3|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function zn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=c[b>>2]|0;a=c[d>>2]|0;a=(c[a+248>>2]|0)==4?a:0;if(!((e|0)==0?1:(c[e+248>>2]|0)!=4))Ub[c[(c[e>>2]|0)+28>>2]&127](e,d,b);if(!a)return 0;Ub[c[(c[a>>2]|0)+28>>2]&127](a,b,d);return 0}function An(a,b,d){a=a|0;b=+b;d=+d;var e=0;e=i;i=i+16|0;g[e+12>>2]=b;g[e+8>>2]=d;g[e+4>>2]=0.0;g[e>>2]=1.0;c[a+484>>2]=c[(b<0.0?e+4|0:b>1.0?e:e+12|0)>>2];g[e+4>>2]=0.0;g[e>>2]=1.0;c[a+488>>2]=c[(d<0.0?e+4|0:d>1.0?e:e+8|0)>>2];i=e;return}function Bn(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;if((a|0)==(c[b+8>>2]|0))gl(b,d,e,f);else{a=c[a+8>>2]|0;Ab[c[(c[a>>2]|0)+20>>2]&7](a,b,d,e,f,g)}return}function Cn(a,b){a=a|0;b=b|0;var d=0,e=0;d=c[(c[b>>2]|0)+16>>2]|0;e=ob[c[(c[a>>2]|0)+16>>2]&127](a)|0;e=yb[d&63](b,e,1)|0;d=yb[c[(c[a>>2]|0)+20>>2]&63](a,c[e+8>>2]|0,b)|0;ib[c[(c[b>>2]|0)+20>>2]&31](b,e,d,1497645650,a);return}function Dn(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;g[a+692>>2]=(c-b)*.5;b=+jh((c-b)*.5+b,6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;g[a+688>>2]=b;g[a+696>>2]=d;g[a+700>>2]=e;g[a+704>>2]=1.0;return}function En(a,b,d){a=a|0;b=b|0;d=d|0;c[b>>2]=c[a+52>>2];c[b+4>>2]=c[a+52+4>>2];c[b+8>>2]=c[a+52+8>>2];c[b+12>>2]=c[a+52+12>>2];c[d>>2]=c[a+68>>2];c[d+4>>2]=c[a+68+4>>2];c[d+8>>2]=c[a+68+8>>2];c[d+12>>2]=c[a+68+12>>2];return}function Fn(a){a=a|0;var b=0,d=0,e=0;b=c[a+24>>2]|0;if((b|0)<=0)return;e=0;do{d=c[(c[a+32>>2]|0)+(e<<2)>>2]|0;switch(c[d+216>>2]|0){case 2:case 5:break;default:{rg(d);b=c[a+24>>2]|0}}e=e+1|0}while((e|0)<(b|0));return}function Gn(a,b){a=a|0;b=b|0;var d=0,e=0;e=ob[c[(c[a>>2]|0)+16>>2]&127](a)|0;e=yb[c[(c[b>>2]|0)+16>>2]&63](b,e,1)|0;d=yb[c[(c[a>>2]|0)+20>>2]&63](a,c[e+8>>2]|0,b)|0;ib[c[(c[b>>2]|0)+20>>2]&31](b,e,d,1245859651,a);return}function Hn(a,b,d){a=a|0;b=b|0;d=d|0;c[b>>2]=c[a+8>>2];c[b+4>>2]=c[a+8+4>>2];c[b+8>>2]=c[a+8+8>>2];c[b+12>>2]=c[a+8+12>>2];c[d>>2]=c[a+24>>2];c[d+4>>2]=c[a+24+4>>2];c[d+8>>2]=c[a+24+8>>2];c[d+12>>2]=c[a+24+12>>2];return}function In(a,b){a=a|0;b=b|0;var d=0,e=0;e=ob[c[(c[a>>2]|0)+52>>2]&127](a)|0;e=yb[c[(c[b>>2]|0)+16>>2]&63](b,e,1)|0;d=yb[c[(c[a>>2]|0)+56>>2]&63](a,c[e+8>>2]|0,b)|0;ib[c[(c[b>>2]|0)+20>>2]&31](b,e,d,1346455635,a);return}function Jn(){var a=0;while(1){a=ic(24)|0;if(a|0)break;a=c[6453]|0;c[6453]=a+0;if(!a){a=0;break}Vb[a&3]()}g[a>>2]=5.880000114440918;g[a+4>>2]=.8299999833106995;g[a+8>>2]=.8799999952316284;g[a+12>>2]=500.0;g[a+16>>2]=10.5;g[a+20>>2]=6.0e3;return a|0}function Kn(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=c[a+4>>2]|0;if(!(h&1))g=h>>8;else g=c[(c[d>>2]|0)+(h>>8)>>2]|0;a=c[a>>2]|0;ib[c[(c[a>>2]|0)+24>>2]&31](a,b,d+g|0,h&2|0?e:2,f);return}function Ln(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;a=c[b>>2]|0;a=Jb[c[(c[a>>2]|0)+56>>2]&31](a,156)|0;Kj(a,b,d,e,1);return a|0}function Mn(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0;e=+g[a+384>>2];d=+g[b+4>>2]*+g[a+392>>2]*e;c=+g[b+8>>2]*+g[a+396>>2]*e;g[a+352>>2]=+g[a+352>>2]+ +g[b>>2]*+g[a+388>>2]*e;g[a+356>>2]=+g[a+356>>2]+d;g[a+360>>2]=+g[a+360>>2]+c;return}function Nn(a,b,d){a=a|0;b=b|0;d=d|0;c[b>>2]=c[a+932>>2];c[b+4>>2]=c[a+932+4>>2];c[b+8>>2]=c[a+932+8>>2];c[b+12>>2]=c[a+932+12>>2];c[d>>2]=c[a+948>>2];c[d+4>>2]=c[a+948+4>>2];c[d+8>>2]=c[a+948+8>>2];c[d+12>>2]=c[a+948+12>>2];return}function On(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;c[6324]=(c[6324]|0)+1;i=ic(787)|0;if(!i)i=0;else{c[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}Xd(i,a,b,d,e,f,g,h);return i|0}function Pn(a,b){a=a|0;b=b|0;var c=0.0,d=0;d=0;while(1){if((d|0)==3)break;c=+jh(+g[b+(d<<2)>>2],6.2831854820251465);if(!(c<-3.1415927410125732)){if(c>3.1415927410125732)c=c+-6.2831854820251465}else c=c+6.2831854820251465;g[a+868+(d<<6)+4>>2]=c;d=d+1|0}return}function Qn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0;a:do if((c|0)==-1)switch(b|0){case 2:case 1:{d=+g[a+336>>2];break a}case 4:case 3:{d=+g[a+340>>2];break a}default:{d=34028234663852886.0e22;break a}}else d=34028234663852886.0e22;while(0);return +d}function Rn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;a=c[b>>2]|0;a=Jb[c[(c[a>>2]|0)+56>>2]&31](a,156)|0;Kj(a,b,d,e,0);return a|0}function Sn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0;f=+g[b+32>>2];e=+g[b+36>>2];e=+g[c+4>>2]>=0.0?e:-e;d=+g[b+40>>2];d=+g[c+8>>2]>=0.0?d:-d;g[a>>2]=+g[c>>2]>=0.0?f:-f;g[a+4>>2]=e;g[a+8>>2]=d;g[a+12>>2]=0.0;return}function Tn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=c[a+4>>2]|0;if(!(g&1))f=g>>8;else f=c[(c[d>>2]|0)+(g>>8)>>2]|0;a=c[a>>2]|0;Yb[c[(c[a>>2]|0)+28>>2]&127](a,b,d+f|0,g&2|0?e:2);return}function Un(b){b=b|0;var d=0;c[b>>2]=4112;d=c[b+212>>2]|0;if(d|0){if(a[b+216>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+212>>2]=0}a[b+216>>0]=1;c[b+212>>2]=0;c[b+204>>2]=0;c[b+208>>2]=0;c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function Vn(a,b){a=a|0;b=b|0;var c=0.0,d=0;d=0;while(1){if((d|0)==3)break;c=+jh(+g[b+(d<<2)>>2],6.2831854820251465);if(!(c<-3.1415927410125732)){if(c>3.1415927410125732)c=c+-6.2831854820251465}else c=c+6.2831854820251465;g[a+868+(d<<6)>>2]=c;d=d+1|0}return}function Wn(a,b){a=a|0;b=b|0;var d=0,e=0;e=c[a+284>>2]|0;a:do if((e|0)>0){d=c[a+292>>2]|0;a=0;while(1){if((c[d+(a<<2)>>2]|0)==(b|0))break a;a=a+1|0;if((a|0)>=(e|0)){a=e;break}}}else a=e;while(0);return (a|0)>=(e|0)|0}function Xn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;a=c[b>>2]|0;a=Jb[c[(c[a>>2]|0)+56>>2]&31](a,84)|0;rl(a,b,d,e,1);return a|0}function Yn(){var a=0;while(1){a=ic(24)|0;if(a|0)break;a=c[6453]|0;c[6453]=a+0;if(!a){a=0;break}Vb[a&3]()}c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=4096;c[a+12>>2]=4096;c[a+16>>2]=0;c[a+20>>2]=1;return a|0}function Zn(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;var f=0;c[6324]=(c[6324]|0)+1;f=ic(311)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}Qg(f,a,b,d,e);return f|0}function _n(a,b){a=a|0;b=b|0;var d=0;d=c[a+4>>2]|0;if((c[b>>2]|0)!=(d|0)?(c[b+4>>2]|0)!=(d|0):0)return 0;d=c[a+8>>2]|0;Ub[c[(c[d>>2]|0)+32>>2]&127](d,b,c[a+12>>2]|0);return 0}function $n(b){b=b|0;var d=0;c[b>>2]=9444;d=c[b+32>>2]|0;if(d|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function ao(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[6324]=(c[6324]|0)+1;e=ic(343)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}Qd(e,a,b,d);return e|0}function bo(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;a=c[b>>2]|0;a=Jb[c[(c[a>>2]|0)+56>>2]&31](a,84)|0;rl(a,b,d,e,0);return a|0}function co(b){b=b|0;var d=0;c[b>>2]=5592;d=c[b+292>>2]|0;if(d|0){if(a[b+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+292>>2]=0}a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;c[b+288>>2]=0;c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function eo(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;c[6324]=(c[6324]|0)+1;h=ic(787)|0;if(!h)h=0;else{c[(h+4+15&-16)+-4>>2]=h;h=h+4+15&-16}Xd(h,a,b,d,e,f,g,0);return h|0}function fo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=Jb[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;f=Jb[c[(c[d>>2]|0)+28>>2]&31](d,e)|0;c[b>>2]=f;if(f|0)mb[c[(c[d>>2]|0)+48>>2]&127](d,e);c[b+4>>2]=c[a+4>>2];return 16196}function go(a){a=a|0;var b=0;c[a>>2]=9172;c[a+8>>2]=9220;b=c[a+56>>2]|0;mb[c[(c[b>>2]|0)+20>>2]&127](b,c[a+72>>2]|0);b=c[a+56>>2]|0;mb[c[(c[b>>2]|0)+16>>2]&127](b,c[a+72>>2]|0);c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function ho(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0;h=c[a+108>>2]|0;f=+g[h+(b<<4)+4>>2]*+g[a+20>>2];e=+g[h+(b<<4)+8>>2]*+g[a+24>>2];g[d>>2]=+g[h+(b<<4)>>2]*+g[a+16>>2];g[d+4>>2]=f;g[d+8>>2]=e;g[d+12>>2]=0.0;return}function io(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;if((a|0)==(c[b+8>>2]|0))Xm(b,d,e);else{a=c[a+8>>2]|0;Yb[c[(c[a>>2]|0)+28>>2]&127](a,b,d,e)}return}function jo(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;f=c[d>>2]|0;f=Jb[c[(c[f>>2]|0)+56>>2]&31](f,20)|0;e=a[b+4>>0]|0;c[f+4>>2]=c[d>>2];c[f>>2]=3540;a[f+16>>0]=e;return f|0}function ko(a,b,d){a=a|0;b=b|0;d=d|0;c[a+164>>2]=c[b>>2];c[a+164+4>>2]=c[b+4>>2];c[a+164+8>>2]=c[b+8>>2];c[a+164+12>>2]=c[b+12>>2];if((!(+g[b>>2]!=1.0)?!(+g[b+4>>2]!=1.0):0)?!(+g[b+8>>2]!=1.0):0)d=0;c[a+180>>2]=d;return}function lo(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;c[6324]=(c[6324]|0)+1;g=ic(1331)|0;if(!g)g=0;else{c[(g+4+15&-16)+-4>>2]=g;g=g+4+15&-16}ue(g,a,b,d,e,f);return g|0}function mo(a){a=a|0;var b=0,d=0;d=a+15&-16|0;b=c[k>>2]|0;a=b+d|0;if((d|0)>0&(a|0)<(b|0)|(a|0)<0){_()|0;Va(12);return -1}c[k>>2]=a;if((a|0)>(Z()|0)?(Y()|0)==0:0){Va(12);c[k>>2]=b;return -1}return b|0}function no(a){a=a|0;var b=0;while(1){b=ic(112)|0;if(b|0)break;b=c[6453]|0;c[6453]=b+0;if(!b){b=0;break}Vb[b&3]()}gg(b,a);return b|0}function oo(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0;e=+g[b+20>>2];d=e*+g[b+260>>2]+ +g[b+72>>2];c=e*+g[b+264>>2]+ +g[b+76>>2];g[a>>2]=+g[b+256>>2]*e+ +g[b+68>>2];g[a+4>>2]=d;g[a+8>>2]=c;g[a+12>>2]=0.0;return}function po(b){b=b|0;var d=0;d=a[b+74>>0]|0;a[b+74>>0]=d+255|d;d=c[b>>2]|0;if(!(d&8)){c[b+8>>2]=0;c[b+4>>2]=0;d=c[b+44>>2]|0;c[b+28>>2]=d;c[b+20>>2]=d;c[b+16>>2]=d+(c[b+48>>2]|0);b=0}else{c[b>>2]=d|32;b=-1}return b|0}function qo(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;if((e|0)!=-1)return;switch(b|0){case 2:case 1:{g[a+336>>2]=d;c[a+332>>2]=c[a+332>>2]|1;return}case 4:case 3:{g[a+340>>2]=d;c[a+332>>2]=c[a+332>>2]|2;return}default:return}}function ro(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;c[6324]=(c[6324]|0)+1;g=ic(135)|0;if(!g)g=0;else{c[(g+4+15&-16)+-4>>2]=g;g=g+4+15&-16}ae(g,a,b,d&65535,e,f);return g|0}function so(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if((b|0)==(d|0))return;e=c[(c[a+4>>2]|0)+136>>2]|0;yb[c[(c[e>>2]|0)+8>>2]&63](e,c[b+36>>2]|0,c[d+36>>2]|0)|0;d=(c[a+4>>2]|0)+160|0;c[d>>2]=(c[d>>2]|0)+1;return}function to(b){b=b|0;var d=0;d=i;i=i+16|0;if(!(a[21976]|0))a[21976]=1;mb[c[(c[b>>2]|0)+76>>2]&127](d,b);c[5557]=c[d>>2];c[5558]=c[d+4>>2];c[5559]=c[d+8>>2];c[5560]=c[d+12>>2];i=d;return 22228}function uo(b){b=b|0;var d=0;d=i;i=i+16|0;if(!(a[22024]|0))a[22024]=1;mb[c[(c[b>>2]|0)+76>>2]&127](d,b);c[5618]=c[d>>2];c[5619]=c[d+4>>2];c[5620]=c[d+8>>2];c[5621]=c[d+12>>2];i=d;return 22472}function vo(a){a=a|0;var b=0,d=0.0,e=0.0,f=0.0;b=i;i=i+32|0;Ub[c[(c[a>>2]|0)+12>>2]&127](a,b+8|0,b);f=+g[b+8>>2];e=+g[b+8+4>>2];d=+g[b+8+8>>2];d=+G(+(f*f+e*e+d*d));i=b;return +(d+ +g[b>>2])}function wo(a,b){a=a|0;b=b|0;var c=0.0,d=0.0;d=+g[b+4>>2]*+g[a+392>>2];c=+g[b+8>>2]*+g[a+396>>2];g[a+452>>2]=+g[a+452>>2]+ +g[b>>2]*+g[a+388>>2];g[a+456>>2]=+g[a+456>>2]+d;g[a+460>>2]=+g[a+460>>2]+c;return}function xo(a){a=a|0;var b=0;c[a>>2]=9220;b=c[a+48>>2]|0;mb[c[(c[b>>2]|0)+20>>2]&127](b,c[a+64>>2]|0);b=c[a+48>>2]|0;mb[c[(c[b>>2]|0)+16>>2]&127](b,c[a+64>>2]|0);c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function yo(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+16|0;c[f>>2]=5572;c[f+4>>2]=d;c[f+8>>2]=a;Ub[c[(c[b>>2]|0)+48>>2]&127](b,f,e);i=f;return}function zo(a,b){a=a|0;b=b|0;var c=0.0,d=0.0;d=+g[b+4>>2]*+g[a+588>>2];c=+g[b+8>>2]*+g[a+592>>2];g[a+468>>2]=+g[a+468>>2]+ +g[b>>2]*+g[a+584>>2];g[a+472>>2]=+g[a+472>>2]+d;g[a+476>>2]=+g[a+476>>2]+c;return}function Ao(a){a=a|0;var b=0.0,c=0.0,d=0.0,e=0.0,f=0.0;f=+g[a>>2];e=+g[a+4>>2];d=+g[a+8>>2];c=+g[a+12>>2];b=1.0/+G(+(f*f+e*e+d*d+c*c));g[a>>2]=f*b;g[a+4>>2]=e*b;g[a+8>>2]=d*b;g[a+12>>2]=c*b;return}function Bo(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;c[6324]=(c[6324]|0)+1;f=ic(135)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}ae(f,a,b,d&65535,e,0);return f|0}function Co(a,b,d){a=a|0;b=b|0;d=d|0;a=c[b+8>>2]|0;if(!((d|0)!=0&(a|0)!=0))return;kb[c[c[a>>2]>>2]&255](a);mb[c[(c[d>>2]|0)+60>>2]&127](d,c[b+8>>2]|0);c[b+8>>2]=0;return}function Do(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;i=i+16|0;c[e>>2]=5460;c[e+4>>2]=b;c[e+8>>2]=a;c[e+12>>2]=d;Ub[c[(c[a>>2]|0)+48>>2]&127](a,e,d);i=e;return}function Eo(b){b=b|0;var d=0;c[b>>2]=6648;if(a[b+65>>0]|0?(d=c[b+56>>2]|0,kb[c[c[d>>2]>>2]&255](d),d=c[b+56>>2]|0,d|0):0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function Fo(a,b){a=a|0;b=b|0;a=c[a+12>>2]|0;return Jb[c[(c[a>>2]|0)+8>>2]&31](a,b)|0}function Go(a){a=a|0;var b=0;while(1){b=ic(92)|0;if(b|0)break;b=c[6453]|0;c[6453]=b+0;if(!b){b=0;break}Vb[b&3]()}Ud(b,a);return b|0}function Ho(a,b){a=a|0;b=+b;var d=0,e=0;if((c[a+280>>2]|0)<=0)return;d=0;do{e=c[(c[a+288>>2]|0)+(d<<2)>>2]|0;Wb[c[(c[e>>2]|0)+8>>2]&7](e,a,b);d=d+1|0}while((d|0)<(c[a+280>>2]|0));return}function Io(a){a=a|0;var b=0.0,d=0,e=0,f=0.0;e=c[a+752>>2]|0;if((e|0)<=0){b=0.0;return +b}d=c[a+760>>2]|0;a=0;b=0.0;do{f=+g[d+(a*104|0)+88>>2];b=b+(f>0.0?1.0/f:0.0);a=a+1|0}while((a|0)!=(e|0));return +b}function Jo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;c[6324]=(c[6324]|0)+1;e=ic(1331)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}Md(e,a,b,d);return e|0}function Ko(b){b=b|0;var d=0;c[b>>2]=4112;d=c[b+212>>2]|0;if(d|0){if(a[b+216>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+212>>2]=0}a[b+216>>0]=1;c[b+212>>2]=0;c[b+204>>2]=0;c[b+208>>2]=0;return}function Lo(b){b=b|0;var d=0;d=i;i=i+16|0;if(!(a[21960]|0))a[21960]=1;Jg(b,d);c[5532]=c[d>>2];c[5533]=c[d+4>>2];c[5534]=c[d+8>>2];c[5535]=c[d+12>>2];i=d;return 22128}function Mo(a,b,d){a=a|0;b=+b;d=d|0;b=b*.4000000059604645*+Cb[c[(c[a>>2]|0)+48>>2]&15](a);b=b*+Cb[c[(c[a>>2]|0)+48>>2]&15](a);g[d>>2]=b;g[d+4>>2]=b;g[d+8>>2]=b;g[d+12>>2]=0.0;return}function No(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;e=c[b>>2]|0;e=Jb[c[(c[e>>2]|0)+56>>2]&31](e,24)|0;c[e+4>>2]=c[b>>2];c[e>>2]=3780;return e|0}function Oo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;c[6324]=(c[6324]|0)+1;e=ic(99)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}Je(e,a,b,d);return e|0}function Po(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;c[6324]=(c[6324]|0)+1;e=ic(135)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}ae(e,a,b,d&65535,0,0);return e|0}function Qo(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[d>>2]=-581039253;c[d+4>>2]=-581039253;c[d+8>>2]=-581039253;g[d+12>>2]=0.0;c[e>>2]=1566444395;c[e+4>>2]=1566444395;c[e+8>>2]=1566444395;g[e+12>>2]=0.0;return}function Ro(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;c[6324]=(c[6324]|0)+1;f=ic(1311)|0;if(!f)f=0;else{c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}tc(f,a,b,d,e);return f|0}function So(b){b=b|0;var d=0;c[b>>2]=5212;if(a[b+192>>0]|0?(d=c[b+136>>2]|0,kb[c[c[d>>2]>>2]&255](d),d=c[b+136>>2]|0,d|0):0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}gi(b+64|0);gi(b+4|0);return}function To(b){b=b|0;var d=0;c[b>>2]=9444;d=c[b+32>>2]|0;if(d|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;return}function Uo(b){b=b|0;var d=0;c[b>>2]=5592;d=c[b+292>>2]|0;if(d|0){if(a[b+296>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+292>>2]=0}a[b+296>>0]=1;c[b+292>>2]=0;c[b+284>>2]=0;c[b+288>>2]=0;return}function Vo(b){b=b|0;var d=0;c[b>>2]=3808;d=c[b+32>>2]|0;if(d|0){if(a[b+36>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;return}function Wo(a){a=a|0;var b=0,d=0;c[a>>2]=8236;b=c[a+56>>2]|0;if(b|0?(kb[c[c[b>>2]>>2]&255](b),d=c[a+56>>2]|0,d|0):0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function Xo(a){a=a|0;var b=0;c[a>>2]=9172;c[a+8>>2]=9220;b=c[a+56>>2]|0;mb[c[(c[b>>2]|0)+20>>2]&127](b,c[a+72>>2]|0);b=c[a+56>>2]|0;mb[c[(c[b>>2]|0)+16>>2]&127](b,c[a+72>>2]|0);return}function Yo(a,b){a=a|0;b=b|0;var d=0;d=(c[a+96>>2]|0)+4|0;c[d>>2]=c[b>>2];c[d+4>>2]=c[b+4>>2];c[d+8>>2]=c[b+8>>2];c[d+12>>2]=c[b+12>>2];zj(a);return}function Zo(b,d){b=b|0;d=d|0;var e=0;if(a[b+273>>0]|0?(e=c[b+200>>2]|0,e|0):0){c[6325]=(c[6325]|0)+1;Rc(c[e+-4>>2]|0)}a[b+273>>0]=0;c[b+200>>2]=d;c[(c[b+196>>2]|0)+8>>2]=d;return}function _o(b){b=b|0;var d=0;c[b>>2]=5500;d=c[b+20>>2]|0;if(d|0){if(a[b+24>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;return}function $o(a,d,e){a=a|0;d=d|0;e=e|0;d=c[(c[d+188>>2]|0)+4>>2]|0;a=c[e+188>>2]|0;if(!((b[a+6>>1]&(d&65535))<<16>>16)){e=0;return e|0}e=(d>>>16&65535&b[a+4>>1])<<16>>16!=0;return e|0}function ap(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;e=c[b>>2]|0;e=Jb[c[(c[e>>2]|0)+56>>2]&31](e,8)|0;c[e+4>>2]=c[b>>2];c[e>>2]=6268;return e|0}function bp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;c[6324]=(c[6324]|0)+1;e=ic(787)|0;if(!e)e=0;else{c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}Rf(e,a,b,d);return e|0}function cp(a,b,d,e){a=+a;b=+b;d=+d;e=+e;var f=0;while(1){f=ic(16)|0;if(f|0)break;f=c[6453]|0;c[6453]=f+0;Vb[f&3]()}g[f>>2]=a;g[f+4>>2]=b;g[f+8>>2]=d;g[f+12>>2]=e;return f|0}function dp(b){b=b|0;var c=0.0,d=0.0,e=0.0;if(!(a[22e3]|0))a[22e3]=1;e=-+g[b+52>>2];d=+g[b+260>>2]*e;c=+g[b+264>>2]*e;g[5589]=+g[b+256>>2]*e;g[5590]=d;g[5591]=c;g[5592]=0.0;return 22356}function ep(b){b=b|0;var d=0;c[b>>2]=5136;d=c[b+16>>2]|0;if(d|0){if(a[b+20>>0]|0){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;return}function fp(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;f=c[b+8>>2]|0;e=c[f+324>>2]|0;Ub[c[(c[e>>2]|0)+40>>2]&127](e,f,c[d+8>>2]|0);return}function gp(a,b){a=a|0;b=b|0;var d=0;c[6324]=(c[6324]|0)+1;d=ic(99)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}Je(d,a,b,1);return d|0}function hp(){var a=0;while(1){a=ic(12)|0;if(a|0)break;a=c[6453]|0;c[6453]=a+0;if(!a){a=0;break}Vb[a&3]()}g[a>>2]=.30000001192092896;g[a+4>>2]=1.0;g[a+8>>2]=0.0;return a|0}function ip(){var a=0;while(1){a=ic(8)|0;if(a|0)break;a=c[6453]|0;c[6453]=a+0;if(!a){a=0;break}Vb[a&3]()}b[a+4>>1]=1;b[a+6>>1]=-1;c[a>>2]=2872;return a|0}function jp(b){b=b|0;var d=0;if(!b)return;d=c[b+68>>2]|0;if(d|0){if(!((a[b+72>>0]&1)==0|(d|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+68>>2]=0}a[b+72>>0]=1;Rc(b);return}function kp(b){b=b|0;var d=0;c[b>>2]=6648;if(!(a[b+65>>0]|0))return;d=c[b+56>>2]|0;kb[c[c[d>>2]>>2]&255](d);b=c[b+56>>2]|0;if(!b)return;c[6325]=(c[6325]|0)+1;Rc(c[b+-4>>2]|0);return}function lp(a,b){a=a|0;b=b|0;var d=0;c[6324]=(c[6324]|0)+1;d=ic(135)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}ae(d,a,b,16384,0,0);return d|0}function mp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;i=i+16|0;c[e>>2]=5480;c[e+4>>2]=b;Ub[c[(c[a>>2]|0)+48>>2]&127](a,e,d);i=e;return}function np(b){b=b|0;var d=0,e=0;c[b>>2]=6464;if(!(a[b+8>>0]|0)){Rc(b);return}d=c[b+12>>2]|0;if(!d){Rc(b);return}e=c[b+4>>2]|0;mb[c[(c[e>>2]|0)+16>>2]&127](e,d);Rc(b);return}function op(a){a=a|0;var b=0;c[6324]=(c[6324]|0)+1;b=ic(79)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}Sh(b,a);c[b>>2]=7972;c[b+56>>2]=2;return b|0}function pp(a){a=a|0;var b=0;c[6324]=(c[6324]|0)+1;b=ic(79)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}Sh(b,a);c[b>>2]=7868;c[b+56>>2]=0;return b|0}function qp(b){b=b|0;var d=0,e=0;c[b>>2]=6436;if(!(a[b+8>>0]|0)){Rc(b);return}d=c[b+12>>2]|0;if(!d){Rc(b);return}e=c[b+4>>2]|0;mb[c[(c[e>>2]|0)+16>>2]&127](e,d);Rc(b);return}function rp(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b>>0]=a[c>>0]|0}b=e}else Lm(b,c,d)|0;return b|0}function sp(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=S(b&65535,a&65535)|0;e=(c>>>16)+(S(b&65535,a>>>16)|0)|0;d=S(b>>>16,a&65535)|0;return (D=(e>>>16)+(S(b>>>16,a>>>16)|0)+(((e&65535)+d|0)>>>16)|0,e+d<<16|c&65535|0)|0}function tp(b){b=b|0;var d=0,e=0;c[b>>2]=9372;if(!(a[b+8>>0]|0)){Rc(b);return}d=c[b+12>>2]|0;if(!d){Rc(b);return}e=c[b+4>>2]|0;mb[c[(c[e>>2]|0)+16>>2]&127](e,d);Rc(b);return}function up(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;if((a|0)==(c[b+8>>2]|0))gl(b,d,e,f);return}function vp(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0;e=+F(+(+g[b>>2]));d=+F(+(+g[b+4>>2]));c=+F(+(+g[b+8>>2]));g[a+16>>2]=e;g[a+20>>2]=d;g[a+24>>2]=c;g[a+28>>2]=0.0;return}function wp(a,b){a=a|0;b=b|0;var d=0;c[6324]=(c[6324]|0)+1;d=ic(787)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}Rf(d,a,b,0);return d|0}function xp(a,b){a=a|0;b=b|0;Hf(a,c[b+36>>2]|0);return}function yp(b){b=b|0;var d=0;if(!b)return;d=c[b+12>>2]|0;if(d|0){if(!((a[b+16>>0]&1)==0|(d|0)==0)){c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;Rc(b);return}function zp(b){b=b|0;var d=0,e=0;c[b>>2]=8996;if(!(a[b+8>>0]|0)){Rc(b);return}d=c[b+12>>2]|0;if(!d){Rc(b);return}e=c[b+4>>2]|0;mb[c[(c[e>>2]|0)+16>>2]&127](e,d);Rc(b);return}function Ap(a,b,c,d,e,f,g,h,i,j,k,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=+g;h=+h;i=+i;j=+j;k=k|0;l=+l;m=m|0;Pb[a&0](b|0,c|0,d|0,e|0,+f,+g,+h,+i,+j,k|0,+l,m|0)}function Bp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;a=c[b+204>>2]|0;if((a&4|0)==0?(e=c[d+204>>2]|0,(e&4|0)==0):0)if(!(a&3))a=1;else a=(e&3|0)==0;else a=0;return a|0}function Cp(a,b,d,e){a=+a;b=+b;d=+d;e=+e;var f=0;c[6324]=(c[6324]|0)+1;f=ic(35)|0;c[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16;g[f>>2]=a;g[f+4>>2]=b;g[f+8>>2]=d;g[f+12>>2]=e;return f|0}function Dp(a){a=a|0;var b=0;while(1){b=ic(8)|0;if(b|0)break;b=c[6453]|0;c[6453]=b+0;if(!b){b=0;break}Vb[b&3]()}c[b>>2]=4988;c[b+4>>2]=a;return b|0}function Ep(a){a=a|0;var b=0;c[a>>2]=8236;b=c[a+56>>2]|0;if(!b)return;kb[c[c[b>>2]>>2]&255](b);a=c[a+56>>2]|0;if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function Fp(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return +(+cb(0,a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0))}function Gp(a,b){a=a|0;b=b|0;if((b|0)==0?1:(c[b+248>>2]&2|0)==0){vk(a,b);return}else{mb[c[(c[a>>2]|0)+92>>2]&127](a,b);return}}function Hp(a){a=a|0;var b=0;c[a>>2]=9220;b=c[a+48>>2]|0;mb[c[(c[b>>2]|0)+20>>2]&127](b,c[a+64>>2]|0);b=c[a+48>>2]|0;mb[c[(c[b>>2]|0)+16>>2]&127](b,c[a+64>>2]|0);return}function Ip(b){b=b|0;var c=0;c=a[n+(b&255)>>0]|0;if((c|0)<8)return c|0;c=a[n+(b>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return (a[n+(b>>>24)>>0]|0)+24|0}function Jp(a,b,d){a=+a;b=+b;d=+d;var e=0;c[6324]=(c[6324]|0)+1;e=ic(35)|0;c[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16;g[e>>2]=a;g[e+4>>2]=b;g[e+8>>2]=d;g[e+12>>2]=0.0;return e|0}function Kp(a,b){a=a|0;b=b|0;c[a+16>>2]=c[b>>2];c[a+16+4>>2]=c[b+4>>2];c[a+16+8>>2]=c[b+8>>2];c[a+16+12>>2]=c[b+12>>2];zj(a);return}function Lp(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;return nb[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0)|0}function Mp(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;return +Lb[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0)}function Np(){var a=0,b=0;while(1){a=ic(1)|0;if(a|0){b=5;break}a=c[6453]|0;c[6453]=a+0;if(!a){a=0;b=5;break}Vb[a&3]()}if((b|0)==5)return a|0;return 0}function Op(a,b){a=a|0;b=b|0;c[a+300>>2]=(c[a+300>>2]|0)+1;c[a+368>>2]=c[b>>2];c[a+368+4>>2]=c[b+4>>2];c[a+368+8>>2]=c[b+8>>2];c[a+368+12>>2]=c[b+12>>2];return}function Pp(a,b,d){a=a|0;b=b|0;d=d|0;c[d>>2]=c[a+60+(b<<4)>>2];c[d+4>>2]=c[a+60+(b<<4)+4>>2];c[d+8>>2]=c[a+60+(b<<4)+8>>2];c[d+12>>2]=c[a+60+(b<<4)+12>>2];return}function Qp(a,b){a=a|0;b=b|0;c[a+300>>2]=(c[a+300>>2]|0)+1;c[a+352>>2]=c[b>>2];c[a+352+4>>2]=c[b+4>>2];c[a+352+8>>2]=c[b+8>>2];c[a+352+12>>2]=c[b+12>>2];return}function Rp(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=+g;h=+h;i=+i;j=j|0;k=k|0;l=+l;vb[a&0](b|0,c|0,d|0,e|0,+f,+g,+h,+i,j|0,k|0,+l)}function Sp(a,b){a=a|0;b=b|0;c[a+300>>2]=(c[a+300>>2]|0)+1;c[a+584>>2]=c[b>>2];c[a+584+4>>2]=c[b+4>>2];c[a+584+8>>2]=c[b+8>>2];c[a+584+12>>2]=c[b+12>>2];return}function Tp(a){a=a|0;var b=0.0,d=0.0;d=+g[a+36>>2];+Cb[c[(c[a>>2]|0)+48>>2]&15](a);b=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);+Cb[c[(c[a>>2]|0)+48>>2]&15](a);return +(d+b)}function Up(a){a=a|0;var b=0.0,d=0.0;d=+g[a+32>>2];b=+Cb[c[(c[a>>2]|0)+48>>2]&15](a);+Cb[c[(c[a>>2]|0)+48>>2]&15](a);+Cb[c[(c[a>>2]|0)+48>>2]&15](a);return +(d+b)}function Vp(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;Ib[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0)}function Wp(){var a=0;while(1){a=ic(196)|0;if(a|0)break;a=c[6453]|0;c[6453]=a+0;if(!a){a=0;break}Vb[a&3]()}Oh(a,0);return a|0}function Xp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;i=i+16|0;c[e>>2]=c[d>>2];a=yb[c[(c[a>>2]|0)+16>>2]&63](a,b,e)|0;if(a)c[d>>2]=c[e>>2];i=e;return a&1|0}function Yp(a){a=a|0;var b=0.0,c=0.0,d=0.0,e=0.0;e=+g[a>>2];d=+g[a+4>>2];c=+g[a+8>>2];b=1.0/+G(+(e*e+d*d+c*c));g[a>>2]=e*b;g[a+4>>2]=d*b;g[a+8>>2]=c*b;return}function Zp(){var a=0,b=0;while(1){a=ic(64)|0;if(a|0){b=5;break}a=c[6453]|0;c[6453]=a+0;if(!a){a=0;b=5;break}Vb[a&3]()}if((b|0)==5)return a|0;return 0}function _p(b,d){b=b|0;d=d|0;if(!(a[22008]|0))a[22008]=1;c[5593]=c[b+(d<<4)>>2];c[5594]=c[b+(d<<4)+4>>2];c[5595]=c[b+(d<<4)+8>>2];c[5596]=c[b+(d<<4)+12>>2];return 22372}function $p(a,b){a=a|0;b=b|0;var d=0;c[6324]=(c[6324]|0)+1;d=ic(191)|0;if(!d)d=0;else{c[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}Kf(d,a,b);return d|0}function aq(b){b=b|0;var d=0;c[b>>2]=6464;if(!(a[b+8>>0]|0))return;d=c[b+12>>2]|0;if(!d)return;b=c[b+4>>2]|0;mb[c[(c[b>>2]|0)+16>>2]&127](b,d);return}function bq(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;if((a|0)==(c[b+8>>2]|0))Xm(b,d,e);return}function cq(b){b=b|0;var d=0;c[b>>2]=6436;if(!(a[b+8>>0]|0))return;d=c[b+12>>2]|0;if(!d)return;b=c[b+4>>2]|0;mb[c[(c[b>>2]|0)+16>>2]&127](b,d);return}function dq(a,b,c){a=a|0;b=b|0;c=+c;switch(b|0){case 3:{g[a+452>>2]=c;return}case 4:{g[a+448>>2]=c;return}case 5:{g[a+444>>2]=c;return}default:return}}function eq(b){b=b|0;var d=0;c[b>>2]=9372;if(!(a[b+8>>0]|0))return;d=c[b+12>>2]|0;if(!d)return;b=c[b+4>>2]|0;mb[c[(c[b>>2]|0)+16>>2]&127](b,d);return}function fq(b){b=b|0;var d=0;c[b>>2]=3808;d=c[b+32>>2]|0;if(!d){Rc(b);return}if(!(a[b+36>>0]|0)){Rc(b);return}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);Rc(b);return}function gq(a,b){a=a|0;b=b|0;a=c[a+4>>2]|0;return ((c[b>>2]|0)==(a|0)?1:(c[b+4>>2]|0)==(a|0))|0}function hq(a,b){a=a|0;b=b|0;a=c[a+20>>2]|0;return Jb[c[(c[a>>2]|0)+8>>2]&31](a,b)|0}function iq(b){b=b|0;var d=0;c[b>>2]=5500;d=c[b+20>>2]|0;if(!d){Rc(b);return}if(!(a[b+24>>0]|0)){Rc(b);return}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);Rc(b);return}function jq(b){b=b|0;var d=0;c[b>>2]=8996;if(!(a[b+8>>0]|0))return;d=c[b+12>>2]|0;if(!d)return;b=c[b+4>>2]|0;mb[c[(c[b>>2]|0)+16>>2]&127](b,d);return}function kq(a){a=a|0;var b=0;c[6324]=(c[6324]|0)+1;b=ic(79)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}Sh(b,a);return b|0}function lq(a,d){a=a|0;d=d|0;d=c[d+4>>2]|0;if(!((d&65535&b[a+6>>1])<<16>>16)){a=0;return a|0}a=(b[a+4>>1]&(d>>>16&65535))<<16>>16!=0;return a|0}function mq(a,d){a=a|0;d=d|0;d=c[d+4>>2]|0;if(!((d&65535&b[a+10>>1])<<16>>16)){a=0;return a|0}a=(b[a+8>>1]&(d>>>16&65535))<<16>>16!=0;return a|0}function nq(a,b){a=a|0;b=+b;b=+jh(b,6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;g[a+196>>2]=b;return}function oq(a,b){a=a|0;b=+b;b=+jh(b,6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;g[a+192>>2]=b;return}function pq(a,d){a=a|0;d=d|0;d=c[d+4>>2]|0;if(!((d&65535&b[a+14>>1])<<16>>16)){a=0;return a|0}a=(b[a+12>>1]&(d>>>16&65535))<<16>>16!=0;return a|0}function qq(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;return Sb[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0)|0}function rq(b){b=b|0;var d=0;c[b>>2]=5136;d=c[b+16>>2]|0;if(!d){Rc(b);return}if(!(a[b+20>>0]|0)){Rc(b);return}c[6325]=(c[6325]|0)+1;Rc(c[d+-4>>2]|0);Rc(b);return}function sq(a,b){a=a|0;b=b|0;b=c[b+36>>2]|0;De(a,c[(c[(c[(c[a+4>>2]|0)+4>>2]|0)+28>>2]|0)+(b*80|0)+64>>2]|0,b);return}function tq(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;return +Nb[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0)}function uq(a){a=a|0;var b=0;c[6324]=(c[6324]|0)+1;b=ic(115)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}sf(b,a,0);return b|0}function vq(a){a=a|0;var b=0;c[6324]=(c[6324]|0)+1;b=ic(191)|0;if(!b)b=0;else{c[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}Kf(b,a,1);return b|0}function wq(a,b,d,e,f,g,h,i){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;return +(+ub[c[(c[a>>2]|0)+12>>2]&1](a,b,d,e,f,g,h,i))}function xq(){var a=0;c[6324]=(c[6324]|0)+1;a=ic(135)|0;if(!a)a=0;else{c[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}Zf(a,0,0,16);return a|0}function yq(a,b){a=a|0;b=b|0;kb[c[(c[b>>2]|0)+32>>2]&255](b);cd(a,b);kb[c[(c[b>>2]|0)+36>>2]&255](b);return}function zq(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;Hb[a&1](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0)}function Aq(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;Ub[c[(c[a>>2]|0)+108>>2]&127](a,b,d);Ub[c[(c[a>>2]|0)+108>>2]&127](a,(b+1|0)%3|0,e);return}function Bq(a,b){a=a|0;b=b|0;c[a+100>>2]=c[b>>2];c[a+100+4>>2]=c[b+4>>2];c[a+100+8>>2]=c[b+8>>2];c[a+100+12>>2]=c[b+12>>2];return}function Cq(a,b){a=a|0;b=b|0;c[a+12>>2]=c[b>>2];c[a+12+4>>2]=c[b+4>>2];c[a+12+8>>2]=c[b+8>>2];c[a+12+12>>2]=c[b+12>>2];return}function Dq(a,b){a=a|0;b=b|0;c[a+44>>2]=c[b>>2];c[a+44+4>>2]=c[b+4>>2];c[a+44+8>>2]=c[b+8>>2];c[a+44+12>>2]=c[b+12>>2];return}function Eq(a,b){a=a|0;b=b|0;c[a+696>>2]=c[b>>2];c[a+696+4>>2]=c[b+4>>2];c[a+696+8>>2]=c[b+8>>2];c[a+696+12>>2]=c[b+12>>2];return}function Fq(a,b){a=a|0;b=b|0;c[a+680>>2]=c[b>>2];c[a+680+4>>2]=c[b+4>>2];c[a+680+8>>2]=c[b+8>>2];c[a+680+12>>2]=c[b+12>>2];return}function Gq(){var a=0;c[6324]=(c[6324]|0)+1;a=ic(115)|0;if(!a)a=0;else{c[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}sf(a,1,0);return a|0}function Hq(a,b){a=a|0;b=b|0;c[a+60>>2]=c[b>>2];c[a+60+4>>2]=c[b+4>>2];c[a+60+8>>2]=c[b+8>>2];c[a+60+12>>2]=c[b+12>>2];return}function Iq(a,b){a=a|0;b=b|0;c[a+28>>2]=c[b>>2];c[a+28+4>>2]=c[b+4>>2];c[a+28+8>>2]=c[b+8>>2];c[a+28+12>>2]=c[b+12>>2];return}function Jq(a,b){a=a|0;b=b|0;c[a+156>>2]=c[b>>2];c[a+156+4>>2]=c[b+4>>2];c[a+156+8>>2]=c[b+8>>2];c[a+156+12>>2]=c[b+12>>2];return}function Kq(b,c,d){b=b|0;c=c|0;d=d|0;a[b+1309+c>>0]=d&1;if((c|0)<3){a[b+788+c>>0]=d&1;return}else{a[b+868+(c+-3<<6)+44>>0]=d&1;return}}function Lq(a,b){a=a|0;b=b|0;c[a+112>>2]=c[b>>2];c[a+112+4>>2]=c[b+4>>2];c[a+112+8>>2]=c[b+8>>2];c[a+112+12>>2]=c[b+12>>2];return}function Mq(){var a=0;c[6324]=(c[6324]|0)+1;a=ic(191)|0;if(!a)a=0;else{c[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}Kf(a,1,1);return a|0}function Nq(a,b){a=a|0;b=b|0;c[a+20>>2]=c[b>>2];c[a+20+4>>2]=c[b+4>>2];c[a+20+8>>2]=c[b+8>>2];c[a+20+12>>2]=c[b+12>>2];return}function Oq(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;Hd(a,b,c,d,e,f);return}function Pq(a,b){a=a|0;b=b|0;c[a+32>>2]=c[b>>2];c[a+32+4>>2]=c[b+4>>2];c[a+32+8>>2]=c[b+8>>2];c[a+32+12>>2]=c[b+12>>2];return}function Qq(a,b){a=a|0;b=b|0;c[a+316>>2]=c[b>>2];c[a+316+4>>2]=c[b+4>>2];c[a+316+8>>2]=c[b+8>>2];c[a+316+12>>2]=c[b+12>>2];return}function Rq(a,b){a=a|0;b=b|0;c[a+300>>2]=c[b>>2];c[a+300+4>>2]=c[b+4>>2];c[a+300+8>>2]=c[b+8>>2];c[a+300+12>>2]=c[b+12>>2];return}function Sq(a,b){a=a|0;b=b|0;c[a+24>>2]=c[b>>2];c[a+24+4>>2]=c[b+4>>2];c[a+24+8>>2]=c[b+8>>2];c[a+24+12>>2]=c[b+12>>2];return}function Tq(a,b){a=a|0;b=b|0;c[a+64>>2]=c[b>>2];c[a+64+4>>2]=c[b+4>>2];c[a+64+8>>2]=c[b+8>>2];c[a+64+12>>2]=c[b+12>>2];return}function Uq(a,b){a=a|0;b=b|0;g[a>>2]=+g[a>>2]-+g[b>>2];g[a+4>>2]=+g[a+4>>2]-+g[b+4>>2];g[a+8>>2]=+g[a+8>>2]-+g[b+8>>2];return a|0}function Vq(a,b){a=a|0;b=b|0;g[a>>2]=+g[a>>2]+ +g[b>>2];g[a+4>>2]=+g[a+4>>2]+ +g[b+4>>2];g[a+8>>2]=+g[a+8>>2]+ +g[b+8>>2];return a|0}function Wq(a,b){a=a|0;b=b|0;c[a+52>>2]=c[b>>2];c[a+52+4>>2]=c[b+4>>2];c[a+52+8>>2]=c[b+8>>2];c[a+52+12>>2]=c[b+12>>2];return}function Xq(a,b){a=a|0;b=b|0;c[a+40>>2]=c[b>>2];c[a+40+4>>2]=c[b+4>>2];c[a+40+8>>2]=c[b+8>>2];c[a+40+12>>2]=c[b+12>>2];return}function Yq(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;return +ub[a&1](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function Zq(a,b){a=a|0;b=b|0;c[a+16>>2]=c[b>>2];c[a+16+4>>2]=c[b+4>>2];c[a+16+8>>2]=c[b+8>>2];c[a+16+12>>2]=c[b+12>>2];return}function _q(a,b,d){a=a|0;b=b|0;d=+d;mb[c[(c[a>>2]|0)+32>>2]&127](a,b);Wb[c[(c[a>>2]|0)+36>>2]&7](a,b,d);return}function $q(a,b){a=a|0;b=b|0;c[a+68>>2]=c[b>>2];c[a+68+4>>2]=c[b+4>>2];c[a+68+8>>2]=c[b+8>>2];c[a+68+12>>2]=c[b+12>>2];return}function ar(a,b){a=a|0;b=b|0;c[a+36>>2]=c[b>>2];c[a+36+4>>2]=c[b+4>>2];c[a+36+8>>2]=c[b+8>>2];c[a+36+12>>2]=c[b+12>>2];return}function br(a,b){a=a|0;b=b|0;c[a>>2]=c[b+248>>2];c[a+4>>2]=c[b+248+4>>2];c[a+8>>2]=c[b+248+8>>2];c[a+12>>2]=c[b+248+12>>2];return}function cr(a,b){a=a|0;b=+b;Qf(a,b);a=c[a+452>>2]|0;jb[c[(c[a>>2]|0)+24>>2]&31](a,b);return}function dr(a,b){a=a|0;b=b|0;c[a+48>>2]=c[b>>2];c[a+48+4>>2]=c[b+4>>2];c[a+48+8>>2]=c[b+8>>2];c[a+48+12>>2]=c[b+12>>2];return}function er(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+16|0;Ne(a,b,d,e,f|0)|0;i=f;return (D=c[f+4>>2]|0,c[f>>2]|0)|0}function fr(a){a=a|0;var b=0;b=i;i=i+16|0;c[b>>2]=c[a+60>>2];a=Wa(6,b|0)|0;if(a>>>0>4294963200){c[6326]=0-a;a=-1}i=b;return a|0}function gr(a,b){a=a|0;b=b|0;c[a>>2]=c[b>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[a+12>>2]=c[b+12>>2];return}function hr(a,b){a=a|0;b=b|0;c[a+72>>2]=c[b>>2];c[a+72+4>>2]=c[b+4>>2];c[a+72+8>>2]=c[b+8>>2];c[a+72+12>>2]=c[b+12>>2];return}function ir(){var a=0;while(1){a=ic(4)|0;if(a|0)break;a=c[6453]|0;c[6453]=a+0;Vb[a&3]()}c[a>>2]=2920;return a|0}function jr(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;g[a+(c[b+56>>2]<<2)>>2]=1.0;return}function kr(a){a=a|0;var b=0;b=i;i=i+16|0;Rc(a);if(!(Sa(c[6452]|0,0)|0)){i=b;return}else Vi(21753,b)}function lr(a,b){a=a|0;b=b|0;c[a+8>>2]=c[b>>2];c[a+8+4>>2]=c[b+4>>2];c[a+8+8>>2]=c[b+8>>2];c[a+8+12>>2]=c[b+12>>2];return}function mr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return bc(b,c,d,e)|0}function nr(){var a=0;c[6324]=(c[6324]|0)+1;a=ic(35)|0;if(!a){a=0;return a|0}c[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16;return a|0}function or(a){a=a|0;if(!(+F(+(+g[a+20>>2]))<1.1920928955078125e-007)){a=0;return a|0}a=+F(+(+g[a+24>>2]))<1.1920928955078125e-007;return a|0}function pr(a,b){a=a|0;b=b|0;if(!b?c[a+204>>2]&3|0:0)return;if((c[a+216>>2]&-2|0)!=4)c[a+216>>2]=1;g[a+220>>2]=0.0;return}function qr(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;Yb[c[(c[a+-4>>2]|0)+8>>2]&127](a+-4|0,b,d,e);return}function rr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=sp(a,c)|0;f=D;return (D=(S(b,c)|0)+(S(d,a)|0)+f|f&0,e|0|0)|0}function sr(b){b=b|0;if(a[22056]|0)return 22684;a[22056]=1;c[5671]=1065353216;c[5672]=1065353216;c[5673]=1065353216;g[5674]=0.0;return 22684}function tr(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;Gb[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function ur(a){a=a|0;c[a>>2]=3880;c[a+12>>2]=4092;Sf(a+12|0);dj(a+72|0);Rc(a);return}function vr(a,b){a=a|0;b=b|0;c[a+348>>2]=c[b>>2];c[a+348+4>>2]=c[b+4>>2];c[a+348+8>>2]=c[b+8>>2];return}function wr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if((d|0)<=0)return;yn(c|0,0,d<<4|0)|0;return}function xr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Cj(a,b,c,d);return}function yr(a,b){a=a|0;b=b|0;c[a>>2]=1065353216;c[a+4>>2]=1065353216;c[a+8>>2]=1065353216;g[a+12>>2]=0.0;return}function zr(a,b){a=a|0;b=b|0;var d=0;d=c[a+8>>2]|0;Ub[c[d+60>>2]&127](b,d,c[a+4>>2]|0);return 0}function Ar(a,b){a=a|0;b=b|0;var d=0;d=a+92|0;do{c[a>>2]=c[b>>2];a=a+4|0;b=b+4|0}while((a|0)<(d|0));return}function Br(a,b){a=a|0;b=b|0;c[a+520>>2]=b;if(!b)return;mb[c[(c[b>>2]|0)+8>>2]&127](b,a+4|0);return}function Cr(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Cg(a,b,c,d);return}function Dr(a,b,d){a=a|0;b=b|0;d=d|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;return}function Er(a){a=a|0;c[a>>2]=3880;c[a+12>>2]=4092;Sf(a+12|0);dj(a+72|0);return}function Fr(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return Db[a&3](b|0,c|0,d|0,e|0,f|0,g|0)|0}function Gr(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;g[a+12>>2]=e;return}function Hr(a){a=a|0;var b=0;b=i;i=i+16|0;mb[c[(c[a>>2]|0)+44>>2]&127](a,b);i=b;return}function Ir(a){a=a|0;ag(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function Jr(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;Yb[c[(c[a>>2]|0)+8>>2]&127](a,b,d,e);return}function Kr(a,b){a=a|0;b=+b;g[a>>2]=+g[a>>2]*b;g[a+4>>2]=+g[a+4>>2]*b;g[a+8>>2]=+g[a+8>>2]*b;return a|0}function Lr(a,b,d){a=a|0;b=b|0;d=d|0;me(c[a+108>>2]|0,c[a+136>>2]|0,b,d);return}function Mr(a,b,d){a=a|0;b=b|0;d=d|0;Ub[c[(c[b>>2]|0)+64>>2]&127](a,b,d);return}function Nr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return 0.0}function Or(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;Yb[c[(c[a>>2]|0)+80>>2]&127](a,b,d,e);return}function Pr(){var a=0;a=i;i=i+16|0;if(!(Ta(25808,252)|0)){i=a;return}else Vi(21703,a)}function Qr(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=f|0;g=g|0;return +Eb[a&3](b|0,c|0,d|0,+e,f|0,g|0)}function Rr(a){a=a|0;if(c[a+204>>2]&3|0)return;if((c[a+216>>2]&-2|0)!=4)c[a+216>>2]=1;g[a+220>>2]=0.0;return}function Sr(a,b){a=a|0;b=b|0;a=c[a+4>>2]|0;Jb[c[(c[a>>2]|0)+8>>2]&31](a,c[b+36>>2]|0)|0;return}function Tr(a){a=a|0;var b=0.0,c=0.0,d=0.0;d=+g[a>>2];c=+g[a+4>>2];b=+g[a+8>>2];return +(+G(+(d*d+c*c+b*b)))}function Ur(a,b){a=a|0;b=b|0;c[a+300>>2]=(c[a+300>>2]|0)+1;c[a+192>>2]=b;c[a+200>>2]=b;return}function Vr(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Ab[a&7](b|0,c|0,d|0,e|0,f|0,g|0)}function Wr(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=+f;g=+g;h=+h;i=+i;j=j|0;k=+k;l=l|0;W(33)}function Xr(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;Yb[c[(c[a>>2]|0)+24>>2]&127](a,b,d,e);return}function Yr(b,c,d,e){b=b|0;c=c|0;d=+d;e=+e;a[b+737>>0]=c&1;g[b+680>>2]=d;g[b+684>>2]=e;return}function Zr(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;Yb[c[(c[a>>2]|0)+88>>2]&127](a,b,d,e);return}function _r(a,b,d){a=a|0;b=b|0;d=d|0;Ub[c[(c[b>>2]|0)+68>>2]&127](a,b,d);return}function $r(b,d){b=b|0;d=d|0;b=(a[b+344>>0]|0)==0?3:0;c[d>>2]=b;c[d+4>>2]=b;return}function as(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;Yb[c[(c[a>>2]|0)+36>>2]&127](a,b,d,e);return}function bs(a,b,d){a=a|0;b=+b;d=d|0;return Xb[c[(c[a>>2]|0)+52>>2]&1](a,b,d,.01666666753590107)|0}function cs(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){D=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}D=a<<c-32;return 0}function ds(a,b,d){a=a|0;b=+b;d=d|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;return}function es(a){a=a|0;var b=0;b=c[a+68>>2]|0;mb[c[(c[b>>2]|0)+32>>2]&127](b,c[a+24>>2]|0);return}function fs(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;g[a+12>>2]=0.0;return}function gs(a,b,d,e){a=a|0;b=+b;d=d|0;e=+e;return Xb[c[(c[a>>2]|0)+52>>2]&1](a,b,d,e)|0}function hs(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=1065353216;g[a+12>>2]=0.0;return}function is(a,b){a=a|0;b=b|0;c[a>>2]=1065353216;c[a+4>>2]=0;c[a+8>>2]=0;g[a+12>>2]=0.0;return}function js(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=1065353216;c[a+8>>2]=0;g[a+12>>2]=0.0;return}function ks(a,b){a=a|0;b=b|0;Ub[c[(c[a>>2]|0)+8>>2]&127](a,b,c[(c[a+8>>2]|0)+48>>2]|0);return}function ls(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=+g;zb[a&0](b|0,c|0,d|0,e|0,f|0,+g)}function ms(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=f|0;g=g|0;lb[a&0](b|0,c|0,d|0,+e,f|0,g|0)}function ns(b,d,e){b=b|0;d=d|0;e=+e;g[(c[b+760>>2]|0)+(d*104|0)+88>>2]=e>0.0?1.0/e:0.0;a[b+964>>0]=1;return}function os(a,b,d){a=a|0;b=b|0;d=+d;Wb[c[(c[a>>2]|0)+20>>2]&7](a,b,d);return}function ps(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){D=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}D=0;return b>>>c-32|0}function qs(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;Yb[c[(c[a>>2]|0)+124>>2]&127](a,e,b,d);return}function rs(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[a+112>>2]=b;c[a+116>>2]=d;c[a+120>>2]=e;return}function ss(a,b){a=a|0;b=b|0;return +(+g[a>>2]*+g[b>>2]+ +g[a+4>>2]*+g[b+4>>2]+ +g[a+8>>2]*+g[b+8>>2])}function ts(a){a=a|0;$j(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function us(a){a=a|0;kk(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function vs(a,b,c,d,e,f,g){a=a|0;b=b|0;c=+c;d=+d;e=e|0;f=f|0;g=g|0;qb[a&0](b|0,+c,+d,e|0,f|0,g|0)}function ws(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;W(29);return 0.0}function xs(a,b,d){a=a|0;b=b|0;d=d|0;Yb[c[(c[a>>2]|0)+36>>2]&127](a,b,d,-3);return}function ys(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return 1.0}function zs(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return}function As(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;Yb[c[(c[a>>2]|0)+32>>2]&127](a,b,d,e);return}function Bs(a){a=a|0;Dg(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function Cs(){}function Ds(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (D=d,a-c>>>0|0)|0}function Es(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Gf(a,b,c,d,e);return}function Fs(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Pf(a,b,c,d,e);return}function Gs(b){b=b|0;if((c[b+56>>2]|0)==0?(a[b+44>>0]&1)==0:0){b=0;return b|0}b=1;return b|0}function Hs(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;W(5);return 0}function Is(a,b){a=a|0;b=b|0;yd(a,b);return}function Js(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=+f;g=+g;h=+h;i=i|0;j=j|0;k=+k;W(13)}function Ks(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return +wb[a&15](b|0,c|0,d|0,e|0,f|0)}function Ls(a,b,d){a=a|0;b=b|0;d=d|0;Yb[c[(c[a>>2]|0)+36>>2]&127](a,b,d,-1);return}function Ms(a,b){a=a|0;b=+b;return Xb[c[(c[a>>2]|0)+52>>2]&1](a,b,1,.01666666753590107)|0}function Ns(a,b,d){a=a|0;b=b|0;d=d|0;Ub[c[(c[a>>2]|0)+56>>2]&127](a,b,d);return}function Os(a){a=a|0;c[a>>2]=4092;Sf(a);dj(a+60|0);Rc(a);return}function Ps(a,b,d){a=a|0;b=b|0;d=+d;Wb[c[(c[a>>2]|0)+36>>2]&7](a,b,d);return}function Qs(a){a=a|0;li(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function Rs(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;W(26)}function Ss(a){a=a|0;pj(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function Ts(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;return +Qb[a&3](b|0,c|0,+d,e|0,f|0)}function Us(a){a=a|0;c[a>>2]=8076;if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function Vs(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ib[a&31](b|0,c|0,d|0,e|0,f|0)}function Ws(a){a=a|0;if(!(c[a+12>>2]|0)){a=0;return a|0}a=c[a+20>>2]|0;return a|0}function Xs(a){a=a|0;km(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function Ys(a,b,d){a=a|0;b=b|0;d=+d;jb[c[(c[a>>2]|0)+16>>2]&31](a,d);return}function Zs(a,b){a=a|0;b=b|0;Yb[c[(c[a>>2]|0)+36>>2]&127](a,b,2,-3);return}function _s(a,b,d){a=a|0;b=+b;d=d|0;tb[c[(c[a>>2]|0)+32>>2]&15](a,b,d);return}function $s(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return}function at(a){a=a|0;mi(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function bt(a){a=a|0;oi(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function ct(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;W(31);return 0.0}function dt(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;Mb[a&1](b|0,c|0,d|0,e|0,+f)}function et(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;Fb[a&0](b|0,c|0,+d,e|0,f|0)}function ft(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;W(36);return 0}function gt(a){a=a|0;c[a>>2]=4092;Sf(a);dj(a+60|0);return}function ht(a){a=a|0;c[a>>2]=4276;if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function it(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+16>>2]&127](a,b);return}function jt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+40>>2]&127](a,b);return}function kt(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Lc(a,b,c,d)|0;return 1}function lt(a,b,d){a=a|0;b=+b;d=d|0;g[(c[a+136>>2]|0)+(d*284|0)+232>>2]=b;return}function mt(a,b,d){a=a|0;b=+b;d=d|0;g[(c[a+136>>2]|0)+(d*284|0)+252>>2]=b;return}function nt(a,b){a=a|0;b=b|0;Yb[c[(c[a>>2]|0)+36>>2]&127](a,b,1,-1);return}function ot(a,b,c){a=a|0;b=b|0;c=c|0;Yh(b,c);return}function pt(a){a=a|0;hd(a);if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function qt(a,b){a=a|0;b=b|0;if((c[a+216>>2]&-2|0)==4)return;c[a+216>>2]=b;return}function rt(a,b){a=a|0;b=b|0;Ub[c[(c[a>>2]|0)+56>>2]&127](a,b,0);return}function st(a,b){a=a|0;b=b|0;return Jb[c[(c[a>>2]|0)+40>>2]&31](a,b)|0}function tt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+60>>2]&127](a,b);return}function ut(a,b,d){a=a|0;b=b|0;d=+d;mb[c[(c[a>>2]|0)+12>>2]&127](a,b);return}function vt(a){a=a|0;a=c[a+68>>2]|0;return ob[c[(c[a>>2]|0)+36>>2]&127](a)|0}function wt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+92>>2]&127](a,b);return}function xt(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return sb[a&31](b|0,c|0,d|0,e|0)|0}function yt(a,b){a=a|0;b=+b;c[a+300>>2]=(c[a+300>>2]|0)+1;g[a+232>>2]=b;return}function zt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+32>>2]&127](a,b);return}function At(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+128>>2]&127](a,b);return}function Bt(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;W(25)}function Ct(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return (D=b+d+(a+c>>>0>>>0<a>>>0|0)>>>0,a+c>>>0|0)|0}function Dt(a,b,d){a=a|0;b=+b;d=d|0;g[(c[a+136>>2]|0)+(d*284|0)+256>>2]=b;return}function Et(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+84>>2]&127](a,b);return}function Ft(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+28>>2]&127](a,b);return}function Gt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+124>>2]&127](a,b);return}function Ht(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return +Rb[a&1](b|0,c|0,d|0,e|0)}function It(a,b){a=a|0;b=+b;c[a+300>>2]=(c[a+300>>2]|0)+1;g[a+228>>2]=b;return}function Jt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+72>>2]&127](a,b);return}function Kt(a){a=a|0;if(!a)return;kb[c[(c[a>>2]|0)+4>>2]&255](a);return}function Lt(a,b){a=a|0;b=+b;g[a+44>>2]=b;g[a+48>>2]=+I(+b);return}function Mt(a,b){a=a|0;b=+b;return +(+Cb[c[(c[a>>2]|0)+16>>2]&15](a)*b)}function Nt(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;W(12);return 0.0}function Ot(a,b){a=a|0;b=+b;c[a+300>>2]=(c[a+300>>2]|0)+1;g[a+224>>2]=b;return}function Pt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+12>>2]&127](a,b);return}function Qt(a,b){a=a|0;b=b|0;Be(a,b);return}function Rt(a,b,c){a=a|0;b=+b;c=+c;g[a+512>>2]=b;g[a+516>>2]=c;return}function St(a,b,c){a=a|0;b=b|0;c=c|0;wi(a,b,c);return}function Tt(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Yb[a&127](b|0,c|0,d|0,e|0)}function Ut(a,b,c){a=a|0;b=b|0;c=c|0;Xi(a,b,c);return}function Vt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+68>>2]&127](a,b);return}function Wt(b,c){b=b|0;c=+c;g[b+572>>2]=c;a[b+553>>0]=1;return}function Xt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+8>>2]&127](a,b);return}function Yt(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+24>>2]&127](a,b);return}function Zt(a,b){a=a|0;b=b|0;c[a+68>>2]=b;return}function _t(a,b,d){a=a|0;b=b|0;d=d|0;c[a+20>>2]=b;c[a+28>>2]=d;return}function $t(a,b,d){a=a|0;b=b|0;d=d|0;c[a+16>>2]=b;c[a+24>>2]=d;return}function au(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return 0}function bu(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=+e;return Xb[a&1](b|0,+c,d|0,+e)|0}function cu(a,b){a=a|0;b=b|0;mb[c[(c[a>>2]|0)+64>>2]&127](a,b);return}function du(a,b,c){a=a|0;b=b|0;c=+c;g[a+1340+(b<<2)>>2]=c;return}function eu(a,b,c){a=a|0;b=b|0;c=c|0;return cc(a,b,c)|0}function fu(a,b){a=a|0;b=+b;g[a+32>>2]=b;g[a+36>>2]=b;return}function gu(a,b,c){a=a|0;b=b|0;c=+c;g[a+1364+(b<<2)>>2]=c;return}function hu(a,b){a=a|0;b=b|0;je(a,b);return}function iu(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;Tb[a&15](b|0,c|0,d|0,+e)}function ju(a,b){a=a|0;b=+b;g[a+136>>2]=b;return}function ku(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;pb[a&7](b|0,c|0,+d,e|0)}function lu(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;rb[a&0](b|0,+c,d|0,e|0)}function mu(a,b){a=a|0;b=+b;g[a+132>>2]=b;return}function nu(a,b){a=a|0;b=b|0;c[a+24>>2]=b;return}function ou(a,b){a=a|0;b=b|0;g[a+48>>2]=+(b|0);return}function pu(b,c){b=b|0;c=+c;g[b+572>>2]=c;a[b+553>>0]=0;return}function qu(a,b){a=a|0;b=b|0;return c[(c[a+28>>2]|0)+(b*80|0)+64>>2]|0}function ru(a){a=a|0;var b=0;b=i;i=i+16|0;Vb[a&3]();Vi(21806,b)}function su(a,b){a=a|0;b=b|0;return c[(c[a+20>>2]|0)+(b<<2)>>2]|0}function tu(a){a=a|0;return ob[c[(c[a>>2]|0)+40>>2]&127](a)|0}function uu(a){a=a|0;if(!a)return;c[6325]=(c[6325]|0)+1;Rc(c[a+-4>>2]|0);return}function vu(a,b){a=a|0;b=+b;jb[c[(c[a>>2]|0)+44>>2]&31](a,b);return}function wu(a,b){a=a|0;b=+b;g[a+140>>2]=b;return}function xu(a,b){a=a|0;b=b|0;return c[(c[a+316>>2]|0)+(b<<2)>>2]|0}function yu(a,b){a=a|0;b=b|0;return (c[a+136>>2]|0)+(b*284|0)+92|0}function zu(b,c){b=b|0;c=c|0;a[b+32>>0]=c&1;return}function Au(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return yb[a&63](b|0,c|0,d|0)|0}function Bu(a,b){a=a|0;b=b|0;wi(a,b,1);return}function Cu(a){a=a|0;if(!a)a=0;else a=(jj(a,2832)|0)!=0;return a&1|0}function Du(a,b){a=a|0;b=+b;g[a+120>>2]=b;return}function Eu(a,b){a=a|0;b=+b;g[a+116>>2]=b;return}function Fu(a,b){a=a|0;b=+b;g[a+128>>2]=b;return}function Gu(a){a=a|0;Ej(a);Rc(a);return}function Hu(a,b){a=a|0;b=b|0;return c[(c[a+220>>2]|0)+(b<<2)>>2]|0}function Iu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return +Kb[a&15](b|0,c|0,d|0)}function Ju(a,b){a=a|0;b=b|0;return cc(a,b,8192)|0}function Ku(b,c){b=b|0;c=c|0;a[b+124>>0]=c&1;return}function Lu(b,c){b=b|0;c=c|0;a[b+250>>0]=c&1;return}function Mu(a){a=a|0;return ob[c[(c[a>>2]|0)+36>>2]&127](a)|0}function Nu(a){a=a|0;return ob[c[(c[a>>2]|0)+48>>2]&127](a)|0}function Ou(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;return}function Pu(a,b){a=a|0;b=b|0;al(a,b);return}function Qu(a,b){a=a|0;b=b|0;Jg(a,b);return}function Ru(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;return Bb[a&7](b|0,c|0,+d)|0}function Su(a){a=a|0;return +(+g[a+136>>2])}function Tu(a){a=a|0;return +(+g[a+132>>2])}function Uu(a,b){a=a|0;b=b|0;return (c[a+136>>2]|0)+(b*284|0)|0}function Vu(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;W(24)}function Wu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Ub[a&127](b|0,c|0,d|0)}function Xu(a,b){a=a|0;b=+b;g[a+104>>2]=b;return}function Yu(a,b){a=a|0;b=b|0;c[b+780>>2]=0;return}function Zu(){c[5703]=1065353216;c[5704]=0;c[5705]=0;g[5706]=0.0;return}function _u(a,b){a=a|0;b=+b;g[a+96>>2]=b;return}function $u(a){a=a|0;return +(+Cb[c[(c[a>>2]|0)+48>>2]&15](a))}function av(a,c){a=a|0;c=c|0;b[a+10>>1]=c;return}function bv(a,c){a=a|0;c=c|0;b[a+8>>1]=c;return}function cv(a){a=a|0;$i(a);Rc(a);return}function dv(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function ev(a,b){a=a|0;b=b|0;return c[(c[a+12>>2]|0)+(b<<2)>>2]|0}function fv(a,b){a=a|0;b=b|0;zd(a,b);return}function gv(a,b){a=a|0;b=+b;g[a+92>>2]=b;return}function hv(a){a=a|0;return +(+g[a+140>>2])}function iv(b){b=b|0;return (a[b+32>>0]&1)!=0|0}function jv(a,b){a=a|0;b=+b;g[a+112>>2]=b;return}function kv(a,b){a=a|0;b=b|0;return a+868+(b<<6)|0}function lv(a,c){a=a|0;c=c|0;b[a+12>>1]=c;return}function mv(b,c){b=b|0;c=c|0;a[b+44>>0]=c&1;return}function nv(a,c){a=a|0;c=c|0;b[a+14>>1]=c;return}function ov(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;W(21);return 0}function pv(a,b){a=a|0;b=b|0;return ((c[b+248>>2]&2|0)==0?0:b)|0}function qv(a,b){a=a|0;b=b|0;c[a+44>>2]=b&1;return}function rv(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;tb[a&15](b|0,+c,d|0)}function sv(a,b){a=a|0;b=+b;g[a+220>>2]=b;return}function tv(a,b){a=a|0;b=+b;g[a+100>>2]=b;return}function uv(b){b=b|0;return (a[b+124>>0]&1)!=0|0}function vv(b,c){b=b|0;c=c|0;a[b+24>>0]=c&1;return}function wv(a){a=a|0;return ~~+g[a+48>>2]|0}function xv(b,c){b=b|0;c=c|0;a[b+288>>0]=c&1;return}function yv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;Wb[a&7](b|0,c|0,+d)}function zv(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;W(22);return 0.0}function Av(a,b){a=a|0;b=+b;g[a+224>>2]=b;return}function Bv(a){a=a|0;a=c[a+216>>2]|0;return (a|0)!=5&(a|0)!=2|0}function Cv(b,c){b=b|0;c=c|0;a[b+524>>0]=c&1;return}function Dv(a){a=a|0;return +(+g[a+120>>2])}function Ev(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Fv(a,b){a=a|0;b=+b;g[a+276>>2]=b;return}function Gv(a,b){a=a|0;b=+b;g[a+204>>2]=b;return}function Hv(a,b){a=a|0;b=+b;g[a+208>>2]=b;return}function Iv(a){a=a|0;return +(+g[a+116>>2])}function Jv(a){a=a|0;return +(+g[a+128>>2])}function Kv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return}function Lv(a,b){a=a|0;b=b|0;return ((c[b+248>>2]|0)==8?b:0)|0}function Mv(b,c){b=b|0;c=c|0;a[b+552>>0]=c&1;return}function Nv(a,b){a=a|0;b=+b;g[a+216>>2]=b;return}function Ov(a,b){a=a|0;b=b|0;c[a+36>>2]=b;return}function Pv(a,b){a=a|0;b=b|0;c[a+32>>2]=b;return}function Qv(a,b){a=a|0;b=b|0;return a+4+(b*192|0)|0}function Rv(b,c){b=b|0;c=c|0;a[b+736>>0]=c&1;return}function Sv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Ne(a,b,c,d,0)|0}function Tv(a){a=a|0;Xe(a);Rc(a);return}function Uv(a,b){a=a|0;b=+b;g[a+248>>2]=b;return}function Vv(b,c){b=b|0;c=c|0;a[b+260>>0]=c&1;return}function Wv(b,c){b=b|0;c=c|0;a[b+21>>0]=c&1;return}function Xv(a){a=a|0;return !(+g[a>>2]>+g[a+4>>2])|0}function Yv(a,b){a=a|0;b=+b;g[a+684>>2]=b;return}function Zv(b,c){b=b|0;c=c|0;a[b+25>>0]=c&1;return}function _v(a,b,c){a=a|0;b=+b;c=c|0;return}function $v(a,b){a=a|0;b=b|0;c[a+72>>2]=b;return}function aw(a,b,c,d){a=a|0;b=b|0;c=+c;d=+d;xb[a&7](b|0,+c,+d)}function bw(a,b){a=a|0;b=+b;g[a+188>>2]=b;return}function cw(a,b){a=a|0;b=+b;g[a+184>>2]=b;return}function dw(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function ew(a,b){a=a|0;b=b|0;return (c[a+12>>2]|0)+(b*104|0)|0}function fw(a,b){a=a|0;b=+b;g[a+268>>2]=b;return}function gw(b,c){b=b|0;c=c|0;a[b+737>>0]=c&1;return}function hw(a,b){a=a|0;b=b|0;c[a+216>>2]=b;return}function iw(b,c){b=b|0;c=c|0;a[b+26>>0]=c&1;return}function jw(b,c){b=b|0;c=c|0;a[b+84>>0]=c&1;return}function kw(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;W(18)}function lw(a){a=a|0;return (a&255)<<24|(a>>8&255)<<16|(a>>16&255)<<8|a>>>24|0}function mw(a,b){a=a|0;b=+b;g[a+272>>2]=b;return}function nw(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function ow(a,b){a=a|0;b=+b;g[a+440>>2]=b;return}function pw(a,b,c){a=a|0;b=b|0;c=c|0;return Jb[a&31](b|0,c|0)|0}function qw(a,b){a=a|0;b=+b;g[a+244>>2]=b;return}function rw(a){a=a|0;hk(a);Rc(a);return}function sw(a){a=a|0;Fi(a);Rc(a);return}function tw(a,b){a=a|0;b=+b;g[a+212>>2]=b;return}function uw(a,b){a=a|0;b=+b;g[a+228>>2]=b;return}function vw(a,b){a=a|0;b=b|0;c[a+204>>2]=b;return}function ww(b){b=b|0;return (a[b+44>>0]&1)!=0|0}function xw(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;W(17)}function yw(a,b){a=a|0;b=+b;g[a+252>>2]=b;return}function zw(a){a=a|0;return +(+g[a+96>>2])}function Aw(a){a=a|0;return (c[a+44>>2]|0)!=0|0}function Bw(a){a=a|0;gk(a);Rc(a);return}function Cw(a){a=a|0;return +(+g[a+92>>2])}function Dw(b){b=b|0;return (a[b+24>>0]&1)!=0|0}function Ew(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function Fw(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;W(3)}function Gw(a,b){a=a|0;b=b|0;c[a+252>>2]=b;return}function Hw(a){a=a|0;return +(+g[a+112>>2])}function Iw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;W(14);return 0.0}function Jw(a,b){a=a|0;b=+b;g[a+232>>2]=b;return}function Kw(b){b=b|0;return (a[b+16>>0]&1)!=0|0}function Lw(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Mw(a){a=a|0;return b[a+10>>1]|0}function Nw(a){a=a|0;return b[a+8>>1]|0}function Ow(a,b){a=a|0;b=b|0;c[a+260>>2]=b;return}function Pw(a){a=a|0;ik(a);Rc(a);return}function Qw(a,b,c,d,e,f){a=a|0;b=+b;c=+c;d=d|0;e=e|0;f=f|0;W(8)}function Rw(a){a=a|0;return +(+g[a+220>>2])}function Sw(a){a=a|0;return (c[a+204>>2]&2|0)!=0|0}function Tw(a){a=a|0;return +(+g[a+100>>2])}function Uw(a){a=a|0;return b[a+12>>1]|0}function Vw(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;W(34);return 0.0}function Ww(a){a=a|0;return +(+g[a+224>>2])}function Xw(a){a=a|0;return bh(a)|0}function Yw(a){a=a|0;return b[a+14>>1]|0}function Zw(a,b){a=a|0;b=b|0;c[a+84>>2]=b;return}function _w(a,b){a=a|0;b=b|0;c[a+88>>2]=b;return}function $w(a,b){a=a|0;b=b|0;c[a+92>>2]=b;return}function ax(a,b){a=a|0;b=b|0;c[a+100>>2]=b;return}function bx(a,b){a=a|0;b=b|0;c[a+96>>2]=b;return}function cx(a){a=a|0;return (c[a+48>>2]|0)==1|0}function dx(a,b){a=a|0;b=b|0;if(!o){o=a;p=b}}function ex(b){b=b|0;return (a[b+260>>0]&1)!=0|0}function fx(b){b=b|0;return (a[b+25>>0]&1)!=0|0}function gx(a){a=a|0;return (c[a+96>>2]|0)+4|0}function hx(a,b,c){a=a|0;b=b|0;c=c|0;mb[a&127](b|0,c|0)}function ix(a,b,c){a=a|0;b=b|0;c=+c;return +Ob[a&1](b|0,+c)}function jx(a){a=a|0;return +(+g[a+276>>2])}function kx(a){a=a|0;return +(+g[a+204>>2])}function lx(a){a=a|0;return +(+g[a+208>>2])}function mx(a,b){a=a|0;b=b|0;c[a+16>>2]=b;return}function nx(a,b){a=a|0;b=+b;g[a+72>>2]=b;return}function ox(a,b){a=a|0;b=+b;g[a+64>>2]=b;return}function px(a,b){a=a|0;b=+b;g[a+68>>2]=b;return}function qx(a){a=a|0;jk(a);Rc(a);return}function rx(a){a=a|0;Fk(a);Rc(a);return}function sx(a){a=a|0;return +(+g[a+104>>2])}function tx(a){a=a|0;return +(+g[a+216>>2])}function ux(a){a=a|0;return c[a+308>>2]|0}function vx(b){b=b|0;return (a[b+26>>0]&1)!=0|0}function wx(b){b=b|0;return (a[b+84>>0]&1)!=0|0}function xx(a,b){a=a|0;b=+b;g[a+80>>2]=b;return}function yx(a){a=a|0;return +(+g[a+32>>2]*+g[a+16>>2])}function zx(a){a=a|0;return +(+g[a+248>>2])}function Ax(a,b){a=a|0;b=+b;g[a+60>>2]=b;return}function Bx(a,b){a=a|0;b=+b;g[a+52>>2]=b;return}function Cx(a,b){a=a|0;b=+b;g[a+56>>2]=b;return}function Dx(a,b,c){a=a|0;b=b|0;c=+c;return 0}function Ex(a){a=a|0;return c[a+36>>2]|0}function Fx(a){a=a|0;return c[a+32>>2]|0}function Gx(a){a=a|0;return c[a+780>>2]|0}function Hx(a){a=a|0;return a+12|0}function Ix(a){a=a|0;return (c[a+52>>2]|0)+4|0}function Jx(a){a=a|0;return +(+g[a+124>>2])}function Kx(a){a=a|0;return a+44|0}function Lx(a,b,c){a=a|0;b=b|0;c=+c;jb[a&31](b|0,+c)}function Mx(a){a=a|0;return c[a+8>>2]|0}function Nx(a){a=a|0;return (c[a+8>>2]|0)!=0|0}function Ox(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function Px(a,b){a=a|0;b=+b;g[a+40>>2]=b;return}function Qx(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function Rx(a){a=a|0;return a+60|0}function Sx(a){a=a|0;return c[a+200>>2]|0}function Tx(a){a=a|0;return +(+g[a+244>>2])}function Ux(a){a=a|0;return c[a+20>>2]|0}function Vx(a){a=a|0;return +g[a+4>>2]<1.0|0}function Wx(a,b){a=a|0;b=+b;g[a+24>>2]=b;return}function Xx(a,b){a=a|0;b=+b;g[a+20>>2]=b;return}function Yx(a,b){a=a|0;b=+b;g[a+32>>2]=b;return}function Zx(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function _x(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function $x(a){a=a|0;return c[a+212>>2]|0}function ay(a){a=a|0;c[a+200>>2]=0;return}function by(a,b,c){a=a|0;b=b|0;c=c|0;return}function cy(a,b){a=a|0;b=+b;g[a+76>>2]=b;return}function dy(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;W(0)}function ey(a){a=a|0;return +(+g[a+212>>2])}function fy(a){a=a|0;return +(+g[a+228>>2])}function gy(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function hy(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function iy(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function jy(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;W(30)}function ky(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;W(23)}function ly(a){a=a|0;return +(+g[a+252>>2])}function my(a){a=a|0;return c[a+136>>2]|0}function ny(a,b){a=a|0;b=+b;g[a+48>>2]=b;return}function oy(a){a=a|0;return a+156|0}function py(a){a=a|0;return c[a+108>>2]|0}function qy(a){a=a|0;return c[a+128>>2]|0}function ry(a){a=a|0;return c[a+776>>2]|0}function sy(a){a=a|0;return c[a+772>>2]|0}function ty(a){a=a|0;return a+20|0}function uy(a){a=a|0;return a+324|0}function vy(a){a=a|0;return c[a+192>>2]|0}function wy(a){a=a|0;return c[a+204>>2]|0}function xy(a){a=a|0;return c[a+24>>2]|0}function yy(a){a=a|0;return c[a+68>>2]|0}function zy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;W(35);return 0.0}function Ay(a){a=a|0;return +(+g[a+232>>2])}function By(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Cy(a){a=a|0;return a+100|0}function Dy(a){a=a|0;return 348}function Ey(a){a=a|0;return c[a+12>>2]|0}function Fy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;W(10);return 0}function Gy(a){a=a|0;return c[a+520>>2]|0}function Hy(a){a=a|0;qi(a);Rc(a);return}function Iy(a){a=a|0;So(a);Rc(a);return}function Jy(a){a=a|0;Jj(a);Rc(a);return}function Ky(a){a=a|0;return c[a+252>>2]|0}function Ly(a){a=a|0;return a+348|0}function My(a){a=a|0;return c[a>>2]|0}function Ny(a,b){a=a|0;b=b|0;return ob[a&127](b|0)|0}function Oy(a){a=a|0;return c[a+260>>2]|0}function Py(a){a=a|0;return a+24|0}function Qy(a){a=a|0;return c[a+1304>>2]|0}function Ry(a){a=a|0;return a+316|0}function Sy(a){a=a|0;return a+300|0}function Ty(a){a=a|0;return a+64|0}function Uy(a){a=a|0;return +(+g[a+72>>2])}function Vy(a){a=a|0;return +(+g[a+64>>2])}function Wy(a){a=a|0;return +(+g[a+68>>2])}function Xy(a){a=a|0;return c[a+332>>2]|0}function Yy(a){a=a|0;return a+32|0}function Zy(a){a=a|0;if(a|0)Rc(a);return}function _y(a){a=a|0;return c[a+84>>2]|0}function $y(a){a=a|0;return c[a+88>>2]|0}function az(a){a=a|0;return c[a+92>>2]|0}function bz(a){a=a|0;return c[a+96>>2]|0}function cz(a){a=a|0;return 252}function dz(a,b,c,d){a=a|0;b=+b;c=c|0;d=+d;W(41);return 0}function ez(a){a=a|0;return a+52|0}function fz(a){a=a|0;return +(+g[a+80>>2])}function gz(a){a=a|0;return 28}function hz(a){a=a|0;return c[a+100>>2]|0}function iz(a){a=a|0;return c[a+72>>2]|0}function jz(a,b){a=a|0;b=b|0;return +Cb[a&15](b|0)}function kz(a){a=a|0;return a+40|0}function lz(a){a=a|0;return c[a+16>>2]|0}function mz(a){a=a|0;return +(+g[a+60>>2])}function nz(a){a=a|0;return +(+g[a+52>>2])}function oz(a){a=a|0;return +(+g[a+56>>2])}function pz(a){a=a|0;return a+112|0}function qz(a){a=a|0;return 212}function rz(a){a=a|0;return a+92|0}function sz(a,b){a=a|0;b=b|0;return 1}function tz(a){a=a|0;return a+368|0}function uz(a){a=a|0;return a+28|0}function vz(a){a=a|0;return c[a+300>>2]|0}function wz(a,b){a=a|0;b=b|0;i=a;j=b}function xz(a){a=a|0;return a+352|0}function yz(a){a=a|0;return 204}function zz(a){a=a|0;return c[a+748>>2]|0}function Az(a,b){a=a|0;b=b|0;return}function Bz(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;W(42)}function Cz(a){a=a|0;return a+68|0}function Dz(a){a=a|0;return a+36|0}function Ez(a){a=a|0;return +(+g[a+44>>2])}function Fz(a){a=a|0;return +(+g[a+40>>2])}function Gz(a){a=a|0;return +(+g[a+36>>2])}function Hz(a){a=a|0;return +(+g[a+48>>2])}function Iz(a){a=a|0;return 220}function Jz(a){a=a|0;return 264}function Kz(a){a=a|0;return +(+g[a+76>>2])}function Lz(a){a=a|0;c[a>>2]=8076;return}function Mz(a){a=a|0;return +(+g[a+24>>2])}function Nz(a){a=a|0;return +(+g[a+20>>2])}function Oz(a){a=a|0;return +(+g[a+32>>2])}function Pz(a){a=a|0;return +(+g[a+16>>2])}function Qz(a){a=a|0;return +(+g[a+28>>2])}function Rz(a){a=a|0;return a+16|0}function Sz(a){a=a|0;return 52}function Tz(a){a=a|0;return 68}function Uz(a){a=a|0;return 84}function Vz(a){a=a|0;return c[a+4>>2]|0}function Wz(a){a=a|0;return a+908|0}function Xz(a){a=a|0;return a+4|0}function Yz(a,b){a=a|0;b=b|0;kb[a&255](b|0)}function Zz(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;W(37)}function _z(a){a=a|0;return 24}function $z(a,b){a=a|0;b=+b;return}function aA(a){a=a|0;return +(+g[a+12>>2])}function bA(a,b,c,d){a=a|0;b=+b;c=c|0;d=d|0;W(9)}function cA(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;W(7)}function dA(a){a=a|0;return +(+g[a+8>>2])}function eA(a){a=a|0;return +(+g[a+4>>2])}function fA(a){a=a|0;oi(a);return}function gA(a,b,c){a=a|0;b=b|0;c=c|0;W(28);return 0.0}function hA(a){a=a|0;return a+748|0}function iA(a){a=a|0;return 496}function jA(a,b,c){a=a|0;b=b|0;c=c|0;W(16);return 0}function kA(a){a=a|0;Rc(a+-4|0);return}function lA(a){a=a|0;return 32}function mA(a){a=a|0;return a+80|0}function nA(a){a=a|0;return 60}function oA(a){a=a|0;return 436}function pA(a){a=a|0;return a+48|0}function qA(a){a=a|0;return a+328|0}function rA(a){a=a|0;c[a>>2]=4276;return}function sA(a){a=a|0;return (a&255)<<8|a>>8&255|0}function tA(a){a=a|0;return +(+g[a>>2])}function uA(a,b,c){a=a|0;b=b|0;c=+c;W(19);return 0}function vA(a){a=a|0;return 10772}function wA(a){a=a|0;return 4}function xA(a){a=a|0;return 16668}function yA(a){a=a|0;return 16520}function zA(a){a=a|0;return 10710}function AA(a){a=a|0;return a|0}function BA(a){a=a|0;return 15835}function CA(a){a=a|0;return a+72|0}function DA(a,b,c){a=a|0;b=b|0;c=c|0;W(38)}function EA(a){a=a|0;return a+8|0}function FA(a){a=a|0;return 17256}function GA(a){a=a|0;return 0}function HA(a){a=a|0;return 17025}function IA(a){a=a|0;return 16424}function JA(a){a=a|0;return 1}function KA(a,b,c){a=a|0;b=b|0;c=+c;W(40)}function LA(a,b,c){a=a|0;b=+b;c=c|0;W(11)}function MA(a){a=a|0;return 16639}function NA(a){a=a|0;return 16610}function OA(a){a=a|0;return 3}function PA(a){a=a|0;return 11500}function QA(a){a=a|0;return 16582}function RA(a){a=a|0;return 16281}function SA(a){a=a|0;return 16169}function TA(a){a=a|0;return 16142}function UA(a){a=a|0;return 16112}function VA(a){a=a|0;return 8}function WA(a){a=a|0;Rc(a);return}function XA(a,b,c){a=a|0;b=+b;c=+c;W(15)}function YA(a){a=a|0;return 16979}function ZA(a,b){a=a|0;b=b|0;W(27);return 0}function _A(a){a=a|0;return 16360}function $A(a){a=a|0;return 16381}function aB(a){a=a|0;return 6}function bB(a){a=a|0;return 12}function cB(){return 4}function dB(a){a=a|0;return 16341}function eB(a,b){a=a|0;b=+b;W(32);return 0.0}function fB(a){a=a|0;return 2}function gB(a){a=a|0;return 15660}function hB(a){a=a|0;Vb[a&3]()}function iB(){return 2}function jB(){return 1}function kB(){return 5}function lB(){return 3}function mB(){return 0}function nB(){eb()}function oB(a,b){a=a|0;b=b|0;W(4)}function pB(a){a=a|0;return}function qB(a){a=a|0;i=a}function rB(a,b){a=a|0;b=+b;W(1)}function sB(a){a=a|0;D=a}function tB(a){a=a|0;W(20);return 0.0}function uB(a){a=a|0;W(6);return 0}function vB(){return D|0}function wB(){return i|0}function xB(a){a=a|0;W(2)}function yB(){W(39)}

// EMSCRIPTEN_END_FUNCS
var ib=[dy,Jl,fp,$f,Od,Vd,zs,vg,Lf,Ld,uc,Of,hc,Cc,xc,Re,_b,Kc,pl,pi,bf,dy,dy,dy,dy,dy,dy,dy,dy,dy,dy,dy];var jb=[rB,Vm,iy,ny,cr,ld,dh,He,kg,Ho,gc,Qc,$z,ny,Qf,Wc,dd,zc,Ol,Ol,cy,Ol,ny,ej,rB,rB,rB,rB,rB,rB,rB,rB];var kb=[xB,pB,WA,pB,WA,pB,WA,pB,uu,pB,WA,hd,pt,pB,WA,pB,WA,pB,uu,WA,WA,pB,uu,WA,WA,Ej,Gu,pB,WA,WA,WA,WA,pB,WA,$j,ts,Ke,es,$b,cn,kh,nn,mf,Il,pB,WA,pB,WA,Vo,fq,Fn,Er,ur,pB,WA,pB,WA,Ep,Wo,gt,Os,Ko,Un,pB,WA,rA,ht,ie,ht,pB,ht,Dd,Om,ht,ht,Jc,ht,ye,ag,Ir,ay,ht,Dg,Bs,di,WA,gk,Bw,wl,Zl,qi,Hy,pB,WA,pj,Ss,pB,Ss,ep,rq,So,Iy,pB,WA,WA,WA,hk,rw,pB,WA,WA,_o,iq,WA,Uo,co,Jj,Jy,Bd,WA,WA,WA,WA,pB,WA,pB,WA,pB,kA,WA,WA,WA,WA,WA,WA,pB,WA,Xe,Tv,WA,WA,WA,WA,WA,WA,WA,WA,WA,WA,pB,WA,tl,Xl,kk,us,WA,ik,Pw,cq,qp,aq,np,pB,WA,Wo,kp,Eo,pB,WA,WA,WA,uu,uu,uu,km,Xs,bj,uu,uu,uu,tm,mm,Wo,pB,WA,uu,uu,uu,Lz,Us,fA,bt,WA,WA,Wo,uu,pB,uu,mi,at,pB,uu,WA,WA,pB,WA,WA,WA,pB,WA,WA,WA,WA,WA,WA,oi,bt,jq,zp,WA,Fi,sw,WA,$i,cv,WA,Xo,go,WA,Hp,xo,pB,WA,Fk,rx,WA,WA,WA,eq,tp,jk,qx,li,Qs,To,$n,pB,WA,pB,pB,WA,WA,kr,xB,xB,xB];var lb=[Fw];var mb=[oB,nf,Gk,Az,Gn,Vk,Az,yr,In,Ac,_d,vp,Az,Az,$v,mg,jg,Ll,Qj,Am,Lj,br,oh,Ji,Zo,cu,Vt,cu,Vt,Gc,ac,Az,fj,Az,nw,dw,Az,Az,Az,Rl,yk,Qk,_k,Xj,xv,Bq,xi,oo,Tk,fd,ze,Tf,yh,Ij,sc,$r,hf,vh,rc,Gp,Wh,Ur,Cn,Ri,ng,Jm,Az,Az,Az,gd,Xh,ks,Sr,Sr,nu,Zt,qf,zk,Yu,mn,vk,yq,xp,si,Az,Ak,fj,fj,Sk,xh,Nm,Hm,Sk,jr,Yd,kn,sl,js,hs,is,Kp,Yo,Sk,jr,Lq,md,kd,hr,Az,Az,Eh,Gh,Ng,fj,on,sq,Ym,rj,hj,fj,Az,Az,oB,oB,oB,oB,oB,oB];var nb=[Hs,mh,Ic,Hs];var ob=[uB,oA,fB,sr,zA,bB,Rz,vA,Sz,GA,lA,Mx,lz,xy,iz,Sx,$x,wA,GA,JA,Vz,Mx,PA,fB,OA,OA,JA,Nu,or,Cy,qz,Sz,cz,Qy,Dy,Iz,zz,Uz,Xy,JA,yz,vz,fB,iA,az,az,lz,lz,Xz,GA,JA,my,my,lz,lz,Xz,Mx,GA,Ey,Ws,yy,yy,Jz,gB,aB,VA,bB,aB,Ix,BA,nA,UA,nA,TA,SA,mA,RA,_z,dB,nA,_A,$A,IA,Tz,hz,hz,GA,gx,yA,GA,GA,GA,QA,nA,NA,MA,pz,xA,Uz,YA,CA,HA,Sz,xy,cx,gz,FA,lz,fr,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB,uB];var pb=[cA,Im,fk,sm,qo,Ti,cA,cA];var qb=[Qw];var rb=[bA];var sb=[Fy,en,No,jo,Rn,Ln,Uh,au,kf,ln,Gl,Bl,bo,ig,Xn,ap,Fm,Wl,Ql,Pi,Lc,kt,Pk,Fy,Fy,Fy,Fy,Fy,Fy,Fy,Fy,Fy];var tb=[LA,Og,_v,_v,ds,$l,ds,hl,Rj,Ui,cj,Dj,ds,Mo,ds,LA];var ub=[Nt,Fp];var vb=[Js];var wb=[Iw,ys,ys,ce,ys,ys,ys,ys,jf,Nr,de,Ef,ys,Iw,Iw,Iw];var xb=[XA,Td,og,vj,lf,gf,XA,XA];var yb=[jA,zn,dc,fo,ol,Ei,$o,Ih,ii,Zg,nj,of,$m,Rh,dg,Ew,Ew,df,Zj,eg,cm,Bp,Ue,ck,wg,cl,yf,el,ai,bl,xe,ql,xd,lg,xg,ti,Zm,Al,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA,jA];var zb=[xw];var Ab=[kw,Pd,zl,um,up,Bn,Si,kw];var Bb=[uA,Jh,Pm,Dx,Dx,uA,uA,uA];var Cb=[tB,vo,Pz,Hz,Hz,Kz,Up,Tp,Up,yx,tB,tB,tB,tB,tB,tB];var Db=[ov,Jd,pd,Zc];var Eb=[zv,lk,lk,zv];var Fb=[ky];var Gb=[Vu,_f,Lg,Vu];var Hb=[Bt,Fh];var Ib=[Rs,jm,jm,Rs];var Jb=[ZA,lq,pq,mq,Wn,sz,sz,Hu,Hu,wd,Zb,Tm,_n,gq,su,xn,zr,nl,hq,Fo,Ok,Bi,ZA,ZA,ZA,ZA,ZA,ZA,ZA,ZA,ZA,ZA];var Kb=[gA,xj,Qi,Ph,Em,Wk,Mm,Qn,Wj,ui,Dm,fm,lm,qg,Ag,gA];var Lb=[ws,ym,Nc,ws];var Mb=[jy,$s];var Nb=[ct,kc,Nl,ct];var Ob=[eB,Mt];var Pb=[Wr];var Qb=[Vw,ek,ek,Vw];var Rb=[zy,Oc];var Sb=[ft,od,Ff,ft];var Tb=[Zz,jc,Ou,Pe,Id,Qm,rm,Ou,Aj,pe,Zz,Zz,Zz,Zz,Zz,Zz];var Ub=[DA,by,Nn,by,wj,Gj,Mr,by,Fd,jd,Yi,Di,te,ot,ji,by,Yk,Yl,Ik,Pp,bi,ef,by,by,Ve,Hn,by,by,by,by,Bj,ci,so,mp,Co,Do,Pl,$t,_t,Ii,hi,af,hm,Sn,Dk,dm,dk,zh,_r,Ye,re,re,Ah,$h,nk,Yk,Yj,ho,Yk,_h,by,Uj,Sm,Um,Rm,nh,uk,Dr,rn,En,by,by,by,by,qd,by,by,by,by,Ci,sd,Zh,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA,DA];var Vb=[yB,nB,Sj,Pr];var Wb=[KA,ut,_q,jl,nc,Ys,KA,KA];var Xb=[dz,ei];var Yb=[Bz,Qe,Kv,Kv,Kv,Jf,vc,wf,Cr,rh,zf,Or,Bk,Aq,qs,Ek,Dc,fc,Af,rs,un,uj,un,yl,yo,Cg,Nf,se,Jr,qr,pg,xm,ml,oj,im,Rk,bk,th,Rd,Mh,Kg,uh,Or,ki,Lh,Ai,Nk,Kv,vi,Kv,Kv,ij,oj,vl,ll,ul,ri,yc,Wd,oe,Ig,Tl,wr,Qo,cg,Yc,_l,kj,yj,zf,Oe,bq,io,il,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz,Bz];return{_emscripten_bind_btCylinderShape___destroy___0:Kt,_emscripten_bind_btGeneric6DofConstraint_enableFeedback_1:Wv,_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_3:as,_emscripten_bind_btHeightfieldTerrainShape_getMargin_0:$u,_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1:Ev,_llvm_cttz_i32:Ip,_emscripten_bind_btCollisionObject_isActive_0:Bv,_emscripten_bind_btRotationalLimitMotor___destroy___0:Zy,_emscripten_bind_btRotationalLimitMotor_set_m_hiLimit_1:hy,_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1:iy,_emscripten_bind_btRotationalLimitMotor_needApplyTorques_0:Gs,_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4:ao,_emscripten_bind_btCapsuleShapeX_getMargin_0:$u,_emscripten_bind_Node_set_m_n_1:hr,_emscripten_bind_btCompoundShape_getMargin_0:$u,_emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1:Wq,_emscripten_bind_btContactSolverInfo___destroy___0:Zy,_emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1:Fv,_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0:Cz,_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0:wy,_emscripten_bind_btQuaternion_setX_1:By,_emscripten_bind_btCylinderShapeZ_getMargin_0:$u,_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0:aA,_emscripten_bind_btQuaternion_setZ_1:gy,_emscripten_bind_btCollisionObject_getUserIndex_0:Oy,_emscripten_bind_btCapsuleShapeZ_getMargin_0:$u,_emscripten_bind_btSoftBodyWorldInfo_set_water_density_1:hy,_emscripten_bind_btKinematicCharacterController_setMaxSlope_1:Lt,_emscripten_bind_btQuadWord_z_0:dA,_emscripten_bind_btSoftBody_setCcdMotionThreshold_1:mw,_emscripten_bind_Material___destroy___0:Zy,_emscripten_bind_btSoftBodyWorldInfo_get_m_maxDisplacement_0:aA,_emscripten_bind_btSoftBody_rotate_1:ak,_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0:kx,_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0:tx,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1:ju,_emscripten_bind_btSoftRigidDynamicsWorld___destroy___0:Kt,_emscripten_bind_btSoftRigidDynamicsWorld_removeConstraint_1:tt,_emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0:Cz,_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0:zw,_emscripten_bind_btCollisionDispatcher___destroy___0:Kt,_emscripten_bind_btRigidBody_applyCentralImpulse_1:Mn,_emscripten_bind_btConvexHullShape_getMargin_0:$u,_emscripten_bind_btDefaultMotionState_getWorldTransform_1:Xt,_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1:Ms,_emscripten_bind_btRaycastVehicle_getNumWheels_0:qy,_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3:gs,_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2:bs,_emscripten_bind_btSoftRigidDynamicsWorld_addAction_1:cu,_emscripten_bind_btDynamicsWorld_rayTest_3:As,_emscripten_bind_Config_set_kSR_SPLT_CL_1:ox,_emscripten_bind_btQuadWord_x_0:tA,_emscripten_bind_Config_get_diterations_0:az,_emscripten_bind_btCollisionObject_isKinematicObject_0:Sw,_emscripten_bind_btSoftRigidDynamicsWorld_removeSoftBody_1:Ki,_emscripten_bind_ConvexResultCallback___destroy___0:Kt,_emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1:Eq,_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1:Dq,_emscripten_bind_btSoftBody_isKinematicObject_0:Sw,_emscripten_bind_btRigidBody_getCenterOfMassTransform_0:Xz,_emscripten_bind_btGhostObject_isKinematicObject_0:Sw,_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5:Pj,_emscripten_bind_btCapsuleShape___destroy___0:Kt,_emscripten_bind_btCollisionObject_activate_1:pr,_emscripten_bind_btCollisionObject_activate_0:Rr,_emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_2:Ns,_emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_1:rt,_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1:Zx,_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1:mk,_emscripten_bind_btVector3_setX_1:By,_emscripten_bind_btCollisionConfiguration___destroy___0:Kt,_emscripten_bind_btCapsuleShapeZ_setMargin_1:vu,_emscripten_bind_btHingeConstraint_enableFeedback_1:Wv,_emscripten_bind_btSphereShape___destroy___0:Kt,_emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1:Yt,_emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1:Vn,_emscripten_bind_btManifoldPoint_set_m_localPointB_1:Zq,_emscripten_bind_btVector3_setZ_1:gy,_emscripten_bind_btRotationalLimitMotor_get_m_loLimit_0:tA,_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1:Lu,_emscripten_bind_btTypedConstraint_enableFeedback_1:Wv,_emscripten_bind_btQuaternion_setValue_4:Gr,_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1:dw,_emscripten_bind_btSoftBody_transform_1:fv,_emscripten_bind_LocalShapeInfo___destroy___0:Zy,_emscripten_bind_btSoftBody_appendAnchor_4:Kd,_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0:tA,_emscripten_bind_btPoint2PointConstraint_get_m_setting_0:Ly,_emscripten_bind_btQuadWord_setY_1:hy,_emscripten_bind_btRigidBody_setUserPointer_1:Gw,_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1:jv,_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0:Xz,_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3:Zr,_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0:ch,_emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0:tk,_emscripten_bind_btCylinderShape_setMargin_1:vu,_emscripten_bind_btCollisionWorld___destroy___0:Kt,_emscripten_bind_btSoftBodyWorldInfo_get_m_broadphase_0:Fx,_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0:Py,_emscripten_bind_btBoxShape_btBoxShape_1:sh,_emscripten_bind_btPersistentManifold_getBody1_0:ry,_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1:dw,_emscripten_bind_RaycastInfo_set_m_isInContact_1:jw,_emscripten_bind_btKinematicCharacterController_setGravity_1:wm,_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5:lo,_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3:Jo,_emscripten_bind_btQuaternion_setY_1:hy,_emscripten_bind_btSoftRigidDynamicsWorld_removeAction_1:Vt,_emscripten_bind_btWheelInfo_get_m_rollInfluence_0:Tx,_emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1:iy,_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1:Yt,_emscripten_bind_tNodeArray_size_0:Vz,_emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1:iy,_emscripten_bind_btRigidBody_getUserIndex_0:Oy,_emscripten_bind_btDynamicsWorld_getDispatchInfo_0:uz,_emscripten_bind_btCompoundShape_removeChildShapeByIndex_1:hu,_emscripten_bind_btSoftBody_appendFace_4:Fs,_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2:Ck,_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1:Mk,_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1:Hq,_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1:nv,_emscripten_bind_btQuaternion_setEuler_3:tn,_emscripten_bind_btBoxShape_getMargin_0:$u,_emscripten_bind_btPairCachingGhostObject___destroy___0:Kt,_emscripten_bind_btPairCachingGhostObject_setUserPointer_1:Gw,_emscripten_bind_btPairCachingGhostObject_activate_0:Rr,_emscripten_bind_btPairCachingGhostObject_activate_1:pr,_emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0:wv,_emscripten_bind_btSoftBody_setUserPointer_1:Gw,_emscripten_bind_btDynamicsWorld_getDispatcher_0:xy,_emscripten_bind_btSoftBody_setMass_2:ns,_emscripten_bind_btConeShape_btConeShape_2:El,_emscripten_bind_btDynamicsWorld___destroy___0:Kt,_emscripten_bind_Config_get_kCHR_0:Gz,_emscripten_bind_btPairCachingGhostObject_forceActivationState_1:hw,_emscripten_bind_btDefaultMotionState___destroy___0:Kt,_emscripten_bind_btDispatcherInfo_get_m_stepCount_0:Vz,_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1:_u,_emscripten_bind_btQuadWord_setW_1:Zx,_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0:Tw,_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2:nm,_emscripten_bind_LocalShapeInfo_set_m_shapePart_1:Lw,_emscripten_bind_btRigidBody_setLinearFactor_1:bn,_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1:zu,_emscripten_bind_btSoftRigidDynamicsWorld_setGravity_1:Jt,_emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0:sx,_emscripten_bind_btWheelInfo_get_m_engineForce_0:ly,_emscripten_bind_Config_get_kSR_SPLT_CL_0:Vy,_emscripten_bind_btRaycastVehicle_setSteeringValue_2:lt,_emscripten_bind_btPoint2PointConstraint___destroy___0:Kt,_emscripten_bind_btSoftBody_getUserPointer_0:Ky,_emscripten_bind_btCollisionShape_setMargin_1:vu,_emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1:Pn,_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2:Ns,_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1:rt,_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1:Du,_emscripten_bind_Config_get_kVCF_0:eA,_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1:fu,_malloc:ic,_emscripten_bind_btDispatcherInfo_get_m_useEpa_0:vx,_emscripten_bind_btGeneric6DofSpringConstraint_getRotationalLimitMotor_1:kv,_emscripten_bind_btTransform_btTransform_2:fn,_emscripten_bind_btTransform_btTransform_0:Zp,_emscripten_bind_btPairCachingGhostObject_getUserIndex_0:Oy,_emscripten_bind_Config_set_kVC_1:Wx,_emscripten_bind_btVector3_op_sub_1:Uq,_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1:tw,_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1:Zv,_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1:sv,_emscripten_bind_btSoftBody_appendNode_2:Sc,_emscripten_bind_btCollisionObject_setActivationState_1:qt,_emscripten_bind_btPersistentManifold___destroy___0:uu,_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0:dA,_emscripten_bind_btCylinderShapeZ___destroy___0:Kt,_emscripten_bind_btMatrix3x3___destroy___0:Zy,_emscripten_bind_btDiscreteDynamicsWorld_addVehicle_1:Gt,_emscripten_bind_ConvexResultCallback_hasHit_0:Vx,_emscripten_bind_btCollisionShape_calculateLocalInertia_2:_s,_emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1:iy,_emscripten_bind_Config_set_kPR_1:Xx,_emscripten_bind_btCollisionWorld_convexSweepTest_5:Oq,_emscripten_bind_btVector3_length_0:Tr,_emscripten_bind_btSoftBody_set_m_materials_1:Mi,_emscripten_enum_PHY_ScalarType_PHY_UCHAR:kB,_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1:$q,_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2:_s,_emscripten_bind_btConstraintSetting_set_m_damping_1:hy,_emscripten_bind_btVehicleRaycaster___destroy___0:Kt,_emscripten_bind_btSoftBody_set_m_cfg_1:Vh,_emscripten_bind_btRigidBody_setCcdMotionThreshold_1:mw,_emscripten_bind_btConvexHullShape_setMargin_1:vu,_emscripten_bind_btRigidBody_applyForce_2:Lk,_emscripten_bind_btConeShapeZ_calculateLocalInertia_2:_s,_emscripten_bind_btConstraintSetting_set_m_tau_1:By,_emscripten_bind_btConvexHullShape_calculateLocalInertia_2:_s,___uremdi3:er,_emscripten_bind_RaycastInfo_get_m_contactPointWS_0:Rz,_emscripten_bind_btSoftBody_setCollisionFlags_1:vw,_emscripten_bind_btSphereShape_calculateLocalInertia_2:_s,_emscripten_bind_btSoftBody_appendMaterial_0:Xw,_emscripten_bind_btVector4_normalize_0:Yp,_emscripten_bind_btSoftRigidDynamicsWorld_getSolverInfo_0:sk,_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1:st,_emscripten_bind_btSoftBody_setTotalMass_2:fh,_emscripten_bind_LocalConvexResult_LocalConvexResult_5:Ul,_emscripten_bind_btGhostObject_setFriction_1:Ot,_emscripten_bind_btCollisionWorld_rayTest_3:As,_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1:fw,_emscripten_bind_btCylinderShapeZ_setMargin_1:vu,_emscripten_bind_btRigidBody_setFriction_1:Ot,_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1:Sq,_emscripten_bind_btGhostObject_setWorldTransform_1:Xk,_emscripten_bind_btSoftRigidDynamicsWorld_addVehicle_1:Gt,_emscripten_bind_btRotationalLimitMotor_get_m_targetVelocity_0:dA,_emscripten_bind_btManifoldPoint_getAppliedImpulse_0:Jx,_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1:wt,_emscripten_bind_btConvexHullShape___destroy___0:Kt,_emscripten_bind_RaycastInfo_set_m_suspensionLength_1:Yx,_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0:yy,_emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0:oy,_emscripten_bind_btSoftBodyWorldInfo_get_m_dispatcher_0:Ex,_emscripten_bind_btKinematicCharacterController_jump_0:Hr,_emscripten_bind_btCollisionObject_getUserPointer_0:Ky,_emscripten_bind_btWheelInfo_set_m_raycastInfo_1:Ar,_emscripten_bind_btSoftBody_generateClusters_1:Ju,_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1:Wt,_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1:Yt,_emscripten_bind_btRigidBody_upcast_1:pv,_emscripten_bind_btCollisionObject_getWorldTransform_0:Xz,_emscripten_bind_btVector4_setZ_1:gy,_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1:Pq,___cxa_can_catch:Xp,_emscripten_bind_btTransform_getBasis_0:AA,_emscripten_bind_btPairCachingGhostObject_setFriction_1:Ot,_emscripten_bind_Config_set_kSRHR_CL_1:Bx,_emscripten_bind_btCollisionDispatcher_getNumManifolds_0:Mu,_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1:Vv,_emscripten_bind_ClosestRayResultCallback___destroy___0:Kt,_emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2:du,_emscripten_bind_btCylinderShapeX_setMargin_1:vu,_emscripten_bind_btQuadWord_w_0:aA,_emscripten_bind_Node___destroy___0:Zy,_emscripten_bind_btDynamicsWorld_contactTest_2:_m,_emscripten_bind_btDiscreteDynamicsWorld_contactTest_2:_m,_emscripten_bind_btKinematicCharacterController_setUp_1:Zk,_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2:_s,_emscripten_bind_btTransform_setOrigin_1:dr,_emscripten_bind_btCompoundShape_getNumChildShapes_0:Ux,_emscripten_bind_btSoftBodyWorldInfo_set_m_broadphase_1:Pv,_emscripten_bind_btGhostObject_btGhostObject_0:Th,_emscripten_bind_tNodeArray___destroy___0:yp,_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2:Hl,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1:wu,_emscripten_bind_btManifoldPoint_set_m_localPointA_1:gr,_emscripten_bind_LocalConvexResult___destroy___0:Zy,_emscripten_bind_btVector3_dot_1:ss,_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0:aA,_emscripten_bind_btVector4_op_add_1:Vq,_emscripten_bind_btWheelInfo___destroy___0:Zy,_emscripten_bind_btSoftRigidDynamicsWorld_getSoftBodyArray_0:uy,_emscripten_bind_btTransform_setRotation_1:Pu,_emscripten_bind_Config_set_kSHR_1:Ox,_emscripten_bind_btPoint2PointConstraint_enableFeedback_1:Wv,_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1:lv,_emscripten_bind_btAxisSweep3_btAxisSweep3_2:lp,_emscripten_bind_btAxisSweep3_btAxisSweep3_3:Po,_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1:gy,_emscripten_bind_btVector3_setY_1:hy,_emscripten_bind_btAxisSweep3_btAxisSweep3_4:Bo,_emscripten_bind_btAxisSweep3_btAxisSweep3_5:ro,_emscripten_bind_btQuadWord_setX_1:By,_emscripten_bind_tMaterialArray___destroy___0:yp,_emscripten_bind_btSoftBodyHelpers_CreateRope_5:wh,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0:Tu,_emscripten_bind_Config_set_piterations_1:_w,_emscripten_bind_btOverlappingPairCache___destroy___0:Kt,_emscripten_bind_btRigidBody_setUserIndex_1:Ow,_emscripten_bind_Material_get_m_kAST_0:dA,_emscripten_bind_btConstraintSetting___destroy___0:Zy,_emscripten_bind_RayResultCallback___destroy___0:Kt,_emscripten_bind_RaycastInfo_get_m_contactNormalWS_0:AA,_emscripten_bind_btSoftBodyWorldInfo_get_water_density_0:eA,_emscripten_bind_btPersistentManifold_getBody0_0:sy,_emscripten_bind_btConeShapeX_btConeShapeX_2:Dl,_emscripten_bind_btQuaternion_z_0:dA,_emscripten_bind_btSoftBody_setCcdSweptSphereRadius_1:fw,_emscripten_bind_btConeTwistConstraint_enableFeedback_1:Wv,_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_0:Cm,_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1:Yt,_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0:eA,_emscripten_bind_btSoftBody_translate_1:am,_emscripten_bind_btSliderConstraint_setUpperLinLimit_1:bw,_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2:Fg,_emscripten_bind_btVector3_op_mul_1:Kr,_emscripten_bind_btConcaveShape___destroy___0:Kt,_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4:hg,_emscripten_bind_btQuaternion_x_0:tA,_emscripten_bind_btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_5:$e,_emscripten_bind_Config_set_timescale_1:xx,_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1:lr,_emscripten_bind_btConcaveShape_setLocalScaling_1:Yt,_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0:uz,_emscripten_bind_btConeShapeX_setLocalScaling_1:Yt,_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1:Xx,_emscripten_bind_btSoftBody_appendLink_4:Es,_emscripten_bind_btCylinderShapeZ_setLocalScaling_1:Yt,_emscripten_bind_btConvexHullShape_btConvexHullShape_0:xq,_emscripten_bind_btRotationalLimitMotor_set_m_maxMotorForce_1:Zx,_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1:nv,_emscripten_bind_btSoftBody_getTotalMass_0:Io,_emscripten_bind_btSoftRigidDynamicsWorld_removeCollisionObject_1:jt,_emscripten_bind_Config_get_kLF_0:Pz,_emscripten_bind_btGhostObject___destroy___0:Kt,_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_2:xs,_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_1:Zs,_emscripten_bind_btGhostObject_setContactProcessingThreshold_1:cw,_emscripten_bind_btSoftBodyHelpers_CreateFromConvexHull_4:mr,_emscripten_bind_btCollisionWorld_getBroadphase_0:yy,_emscripten_bind_btRaycastVehicle_updateWheelTransform_2:Lr,_emscripten_bind_btQuaternion___destroy___0:Zy,_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2:_s,_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2:sg,_emscripten_bind_Material_set_m_flags_1:mx,_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0:$g,_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1:zg,_emscripten_bind_Config_get_viterations_0:_y,_emscripten_bind_btKinematicCharacterController_canJump_0:tu,_emscripten_bind_btSoftBodyArray_at_1:ev,_emscripten_bind_btVector4_length_0:Tr,_emscripten_bind_btPairCachingGhostObject_setUserIndex_1:Ow,_emscripten_bind_btRigidBody_isActive_0:Bv,_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3:rk,_emscripten_bind_btMotionState_setWorldTransform_1:Pt,_emscripten_bind_btSoftRigidDynamicsWorld_getDispatcher_0:xy,_emscripten_bind_btCylinderShape_setLocalScaling_1:Yt,_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0:Xz,_emscripten_bind_btCompoundShape_calculateLocalInertia_2:_s,_emscripten_bind_btCollisionWorld_getDispatchInfo_0:uz,_emscripten_enum_PHY_ScalarType_PHY_DOUBLE:jB,_emscripten_bind_btRigidBody_setCollisionShape_1:Xt,_emscripten_bind_btSoftBody_appendTetra_5:Cf,_emscripten_bind_btConeShapeX___destroy___0:Kt,_emscripten_bind_btCollisionObject_getCollisionFlags_0:wy,_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1:vv,_emscripten_bind_btConeTwistConstraint_enableMotor_1:Mv,_emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1:Jq,_emscripten_bind_btSoftBody_checkLink_2:Vl,_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3:Xr,_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4:Zn,_emscripten_bind_btVector3_normalize_0:Yp,_emscripten_bind_btPairCachingGhostObject_setRestitution_1:It,_emscripten_bind_Config_set_kAHR_1:ny,_emscripten_bind_btGeneric6DofConstraint_getRotationalLimitMotor_1:kv,_emscripten_bind_btBroadphaseInterface___destroy___0:Kt,_emscripten_bind_btSoftRigidDynamicsWorld_rayTest_3:As,_emscripten_bind_Config_get_kSRHR_CL_0:nz,_emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0:Pz,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1:Fu,_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1:cw,_emscripten_bind_btCompoundShape___destroy___0:Kt,_emscripten_bind_btHingeConstraint_setMotorTarget_2:Vj,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0:hv,_emscripten_bind_btCapsuleShapeX_setMargin_1:vu,_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0:Kt,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1:mu,_emscripten_bind_btRigidBody_getCollisionFlags_0:wy,_emscripten_bind_btCollisionShape_setLocalScaling_1:Yt,_emscripten_bind_Config_get_piterations_0:$y,_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0:My,_emscripten_bind_btMatrix3x3_setEulerZYX_3:qm,_emscripten_bind_btRigidBody_setRollingFriction_1:yt,_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0:Gz,_emscripten_bind_btRigidBody_getUserPointer_0:Ky,_emscripten_bind_Config_get_kSHR_0:Ez,_emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2:_s,_emscripten_bind_btRigidBody_setMotionState_1:Br,_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0:Yw,_emscripten_bind_btCollisionWorld_getDispatcher_0:xy,_emscripten_bind_btVector4_dot_1:ss,_emscripten_bind_btCollisionObject_setRollingFriction_1:yt,_emscripten_bind_Config_set_kSK_SPLT_CL_1:px,_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1:lv,_emscripten_bind_btTriangleMesh_btTriangleMesh_1:vq,_i64Subtract:Ds,_emscripten_bind_btCylinderShapeX_getMargin_0:$u,_emscripten_bind_btRigidBody_setDamping_2:An,_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0:Uw,_emscripten_bind_btGhostObject_setCollisionFlags_1:vw,_emscripten_bind_btMatrix3x3_getRotation_1:Qu,_emscripten_bind_btWheelInfo_set_m_engineForce_1:yw,_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1:pu,_emscripten_bind_btPersistentManifold_getNumContacts_0:Gx,_emscripten_bind_btCylinderShapeX_setLocalScaling_1:Yt,_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0:Wp,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0:uv,_emscripten_bind_btCompoundShape_setLocalScaling_1:Yt,_emscripten_bind_btOverlappingPairCallback___destroy___0:Kt,_emscripten_bind_btDynamicsWorld_convexSweepTest_5:Oq,_emscripten_bind_btCylinderShape_calculateLocalInertia_2:_s,_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1:fw,_emscripten_bind_btRigidBody_getCollisionShape_0:vy,_emscripten_bind_btRigidBody_setContactProcessingThreshold_1:cw,_emscripten_bind_btRigidBody_getLinearVelocity_0:xz,_emscripten_bind_btRigidBody_applyImpulse_2:Ut,_emscripten_bind_btConcaveShape_calculateLocalInertia_2:_s,_emscripten_bind_RaycastInfo_get_m_groundObject_0:$y,_emscripten_bind_btRigidBody_setWorldTransform_1:Xk,_emscripten_bind_btRigidBody_setAngularVelocity_1:Op,_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3:_j,_emscripten_bind_Config_get_kDP_0:dA,_emscripten_bind_btConvexShape_setLocalScaling_1:Yt,_emscripten_bind_Config_get_collisions_0:hz,_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2:_s,_emscripten_bind_btVector4_setX_1:By,_emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_0:em,_emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_1:Kl,_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1:cw,_emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1:Eq,_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0:Yw,_emscripten_bind_RayResultCallback_hasHit_0:Nx,_emscripten_bind_btSoftBody_isActive_0:Bv,_bitshift64Shl:cs,_emscripten_bind_Config___destroy___0:Hk,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0:Su,_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0:dA,_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1:yu,_emscripten_bind_btQuaternion_normalize_0:Ao,_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0:uz,_emscripten_bind_btQuadWord_setZ_1:gy,_emscripten_bind_btConeShapeZ_setLocalScaling_1:Yt,_emscripten_bind_Config_get_kPR_0:Nz,_emscripten_bind_btGeneric6DofSpringConstraint___destroy___0:Kt,_emscripten_bind_btConvexTriangleMeshShape___destroy___0:Kt,_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1:Zx,_emscripten_bind_Material_set_m_kAST_1:gy,_emscripten_bind_btGhostObject_setRollingFriction_1:yt,_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1:op,___muldi3:rr,_emscripten_bind_btRigidBody_getAngularVelocity_0:tz,_emscripten_bind_btCompoundShape_btCompoundShape_0:Gq,_emscripten_bind_btCompoundShape_btCompoundShape_1:uq,_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1:tt,_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2:Uk,_emscripten_bind_btSphereShape_getMargin_0:$u,_emscripten_bind_btCollisionObject_setAnisotropicFriction_2:ko,_emscripten_bind_btHingeConstraint_setAngularOnly_1:Rv,_emscripten_bind_btSoftRigidDynamicsWorld_contactTest_2:_m,_emscripten_bind_Config_get_kDG_0:aA,_emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2:ko,_emscripten_bind_Node_get_m_x_0:EA,_emscripten_bind_btSoftBodyArray_size_0:Vz,_emscripten_bind_ClosestRayResultCallback_hasHit_0:Nx,_emscripten_bind_btCompoundShape_addChildShape_2:Ed,_emscripten_bind_btDispatcher___destroy___0:Kt,_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0:eA,_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1:By,_llvm_bswap_i16:sA,_emscripten_bind_btDiscreteDynamicsWorld___destroy___0:Kt,_emscripten_bind_btConvexShape___destroy___0:Kt,_memmove:rp,_emscripten_bind_btWheelInfo_set_m_worldTransform_1:dl,_emscripten_bind_btCapsuleShapeX_setLocalScaling_1:Yt,_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1:vw,_emscripten_bind_btSoftBody_getCollisionFlags_0:wy,_emscripten_enum_PHY_ScalarType_PHY_INTEGER:iB,_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_1:no,_emscripten_bind_btCollisionObject_setRestitution_1:It,_emscripten_bind_btRigidBody_applyCentralForce_1:wo,_emscripten_bind_btSoftBodyWorldInfo_set_m_gravity_1:Xq,_emscripten_bind_LocalConvexResult_get_m_hitFraction_0:Fz,_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0:fx,_emscripten_bind_btQuaternion_w_0:aA,_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0:Nw,_emscripten_bind_btTransform_getRotation_0:Lo,_emscripten_bind_Config_set_kSKHR_CL_1:Cx,_emscripten_bind_btHingeConstraint_btHingeConstraint_6:eo,_emscripten_bind_btHingeConstraint_btHingeConstraint_7:On,_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0:EA,_emscripten_bind_btHingeConstraint_btHingeConstraint_5:bg,_emscripten_bind_btHingeConstraint_btHingeConstraint_2:wp,_emscripten_bind_btHingeConstraint_btHingeConstraint_3:bp,_emscripten_bind_RaycastInfo___destroy___0:Zy,_emscripten_bind_btSoftBody_setWorldTransform_1:Xk,_emscripten_bind_btBoxShape_setMargin_1:vu,_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0:Kx,_emscripten_bind_btVector4_y_0:eA,_emscripten_bind_Config_get_kSK_SPLT_CL_0:Wy,_emscripten_bind_btTypedConstraint___destroy___0:Kt,_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1:pp,_emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1:Pn,_emscripten_bind_btConeTwistConstraint_setDamping_1:ow,_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1:Et,_emscripten_bind_Config_set_collisions_1:ax,_emscripten_bind_btQuaternion_btQuaternion_4:cp,_emscripten_bind_btSoftRigidDynamicsWorld_getBroadphase_0:yy,_emscripten_bind_btSoftBody_getCollisionShape_0:vy,_emscripten_bind_btSphereShape_btSphereShape_1:an,_emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0:jx,_emscripten_bind_btQuaternion_y_0:eA,_emscripten_bind_btCollisionWorld_addCollisionObject_1:nt,_emscripten_bind_btCollisionWorld_addCollisionObject_2:Ls,_emscripten_bind_btCollisionWorld_addCollisionObject_3:as,_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1:bv,_emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1:iy,_emscripten_bind_btSoftBodyHelpers_CreateEllipsoid_4:Vg,_emscripten_bind_RaycastInfo_get_m_isInContact_0:wx,_emscripten_bind_Config_set_kKHR_1:Px,_emscripten_bind_btHeightfieldTerrainShape_setMargin_1:vu,_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0:Nw,_emscripten_bind_btCapsuleShape_setMargin_1:vu,_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1:Dp,_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7:wq,_emscripten_bind_btCollisionObject_setUserPointer_1:Gw,_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0:mj,_emscripten_bind_btActionInterface___destroy___0:Kt,_emscripten_bind_btSoftBody_generateClusters_2:eu,_emscripten_bind_btDefaultMotionState_setWorldTransform_1:Pt,_emscripten_bind_btCollisionWorld_contactTest_2:_m,_emscripten_bind_RayResultCallback_get_m_collisionObject_0:Mx,_emscripten_bind_btPoint2PointConstraint_getPivotInA_0:Sy,_emscripten_bind_Config_get_kAHR_0:Hz,_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0:Hx,_emscripten_bind_btVector4_setY_1:hy,_emscripten_bind_btCompoundShape_setMargin_1:vu,_emscripten_bind_btGhostObject_setRestitution_1:It,_emscripten_bind_btDynamicsWorld_addCollisionObject_1:nt,_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0:Mw,_emscripten_bind_btDynamicsWorld_addCollisionObject_3:as,_emscripten_bind_btDynamicsWorld_addCollisionObject_2:Ls,_emscripten_bind_btSoftRigidDynamicsWorld_getGravity_0:to,_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0:xy,_emscripten_bind_btSoftBody_scale_1:Ie,_emscripten_bind_btHeightfieldTerrainShape___destroy___0:Kt,_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0:Yy,_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0:lx,_emscripten_bind_Config_get_kVC_0:Mz,_emscripten_bind_btVector4_op_mul_1:Kr,_emscripten_bind_btCylinderShape_btCylinderShape_1:kq,_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1:Nv,_emscripten_bind_Material_get_m_kVST_0:aA,_emscripten_bind_Config_set_kVCF_1:hy,_emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_3:gs,_emscripten_bind_btGhostObject_getUserIndex_0:Oy,_emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_1:Ms,_emscripten_bind_btSoftBody_setRestitution_1:It,_emscripten_bind_btVector3___destroy___0:uu,_bitshift64Lshr:ps,_emscripten_bind_btRigidBody_setAngularFactor_1:Sp,_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2:_s,_emscripten_bind_btWheelInfo_set_m_steering_1:Jw,_emscripten_bind_btMotionState_getWorldTransform_1:Xt,_emscripten_bind_btDynamicsWorld_getSolverInfo_0:wk,_emscripten_bind_btRotationalLimitMotor_get_m_enableMotor_0:ww,_emscripten_bind_Config_get_kMT_0:Oz,_emscripten_bind_btDynamicsWorld_getBroadphase_0:yy,_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1:Qx,_emscripten_bind_Config_get_timescale_0:fz,_emscripten_bind_btVector3_x_0:tA,___cxa_is_pointer_type:Cu,_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3:Wi,_emscripten_bind_btCollisionObject_getCollisionShape_0:vy,_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4:Li,_emscripten_bind_btManifoldPoint___destroy___0:Zy,_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1:Xu,_emscripten_bind_btVector3_z_0:dA,_emscripten_bind_btGhostObject_setUserIndex_1:Ow,_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1:fl,_emscripten_bind_ClosestConvexResultCallback___destroy___0:Kt,_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0:Zy,_emscripten_bind_btCollisionObject_setFriction_1:Ot,_emscripten_bind_btQuadWord_y_0:eA,_emscripten_bind_btDefaultCollisionConfiguration___destroy___0:Kt,_emscripten_bind_btRigidBody_setMassProps_2:Nj,_emscripten_bind_btRotationalLimitMotor_set_m_enableMotor_1:mv,_emscripten_bind_btVector3_setValue_3:fs,_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1:mw,_emscripten_bind_RaycastInfo_get_m_suspensionLength_0:Oz,_emscripten_bind_btGhostObject_getCollisionFlags_0:wy,_emscripten_bind_btCapsuleShapeX___destroy___0:Kt,_emscripten_bind_Config_set_kDG_1:Zx,_emscripten_bind_btRigidBody_setActivationState_1:qt,_emscripten_bind_btRigidBody_updateInertiaTensor_0:Hj,_emscripten_bind_btHingeConstraint_setLimit_4:Dn,_emscripten_bind_btHingeConstraint_setLimit_5:vn,_emscripten_bind_btSoftBodyWorldInfo_btSoftBodyWorldInfo_0:Sl,_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0:Ww,_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1:Hv,_emscripten_bind_btConeShape_setLocalScaling_1:Yt,_emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1:iy,_emscripten_bind_Config_get_citerations_0:bz,_emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0:Pz,_emscripten_bind_btGhostObject_getCollisionShape_0:vy,_emscripten_bind_Config_get_kSSHR_CL_0:mz,_emscripten_bind_btBoxShape___destroy___0:Kt,_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0:ex,_emscripten_bind_btPersistentManifold_getContactPoint_1:Qv,_emscripten_bind_btVector3_btVector3_0:nr,_emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0:Pz,_emscripten_bind_btConeShapeX_calculateLocalInertia_2:_s,_emscripten_bind_RaycastInfo_set_m_groundObject_1:_w,_emscripten_bind_btGhostObject_activate_1:pr,_emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2:Kq,_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0:Yy,_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0:pA,_emscripten_bind_btDefaultSoftBodySolver_btDefaultSoftBodySolver_0:sn,_emscripten_bind_btSphereShape_setMargin_1:vu,_emscripten_bind_btSoftBody_get_m_cfg_0:qA,_emscripten_bind_btCollisionObject_setUserIndex_1:Ow,_emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1:ou,_emscripten_bind_btSliderConstraint_setUpperAngLimit_1:nq,_emscripten_bind_btDynamicsWorld_contactPairTest_3:xr,_emscripten_bind_btCollisionWorld_getPairCache_0:vt,_emscripten_bind_btConeTwistConstraint_setMotorTarget_1:fi,_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1:Cq,_emscripten_bind_btWheelInfo_set_m_rollInfluence_1:qw,_emscripten_bind_btRigidBody_getWorldTransform_0:Xz,_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0:Yn,_emscripten_bind_btGhostObject_forceActivationState_1:hw,_emscripten_bind_btSoftBodyHelpers_CreateFromTriMesh_5:le,_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0:ip,_emscripten_bind_VoidPtr___destroy___0:Zy,_emscripten_bind_btSliderConstraint_setLowerAngLimit_1:oq,_emscripten_bind_btSoftBody_get_m_materials_0:Wz,_emscripten_bind_btRotationalLimitMotor_isLimited_0:Xv,_emscripten_bind_RaycastInfo_set_m_contactPointWS_1:Zq,_emscripten_bind_RayResultCallback_set_m_collisionObject_1:dw,_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0:ty,_emscripten_bind_btSoftBody_setContactProcessingThreshold_1:cw,_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0:ux,_emscripten_bind_Config_get_kDF_0:Qz,_emscripten_bind_btWheelInfo_get_m_steering_0:Ay,_emscripten_bind_btConstraintSetting_get_m_tau_0:tA,_emscripten_bind_btSliderConstraint___destroy___0:Kt,_emscripten_bind_btCollisionObject_setCollisionShape_1:Xt,_emscripten_bind_btCollisionShape___destroy___0:Kt,_emscripten_bind_btMatrix3x3_getRow_1:_p,_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0:eA,_emscripten_bind_btTriangleMesh_addTriangle_4:jn,_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0:Mx,_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0:sx,_emscripten_bind_btSoftBody_getUserIndex_0:Oy,_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1:Xt,_emscripten_bind_btKinematicCharacterController_warp_1:Ft,_emscripten_bind_btAxisSweep3___destroy___0:Kt,_emscripten_bind_btSoftBody_getWorldTransform_0:Xz,___muldsi3:sp,_emscripten_bind_btTriangleMesh___destroy___0:Kt,_emscripten_bind_btKinematicCharacterController_preStep_1:zt,_emscripten_bind_btRaycastVehicle_applyEngineForce_2:mt,_emscripten_bind_btRaycastVehicle_setBrake_2:Dt,_emscripten_bind_ConcreteContactResultCallback___destroy___0:Kt,_emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1:$q,_emscripten_bind_btCollisionObject___destroy___0:Kt,_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1:gy,_emscripten_bind_btRigidBody_applyTorqueImpulse_1:bm,_emscripten_bind_btTriangleMeshShape_setLocalScaling_1:Yt,_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1:Eu,_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1:Is,_emscripten_bind_btDispatcherInfo_set_m_timeStep_1:By,_emscripten_bind_btVector3_btVector3_3:Jp,_emscripten_bind_RaycastInfo_set_m_contactNormalWS_1:gr,_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1:tv,_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0:uo,_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0:Rx,_emscripten_bind_btCollisionShape_getMargin_0:$u,_emscripten_bind_btSoftBodyWorldInfo_set_water_offset_1:gy,_emscripten_bind_btRigidBody_isKinematicObject_0:Sw,_emscripten_bind_RaycastInfo_get_m_hardPointWS_0:Dz,_emscripten_bind_btConeTwistConstraint___destroy___0:Kt,_emscripten_bind_btQuadWord___destroy___0:Zy,_emscripten_bind_btSoftRigidDynamicsWorld_contactPairTest_3:xr,_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1:Nq,_emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2:gu,_emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0:ez,_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0:ez,_emscripten_bind_btSoftBody_setUserIndex_1:Ow,_emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1:iy,_emscripten_bind_btSoftBody_setCollisionShape_1:Xt,_emscripten_bind_btGhostObject_setAnisotropicFriction_2:ko,_emscripten_bind_btConstraintSolver___destroy___0:Kt,_emscripten_bind_btDbvtBroadphase___destroy___0:Kt,_emscripten_bind_btCapsuleShape_btCapsuleShape_2:pm,_emscripten_bind_btRotationalLimitMotor_get_m_maxMotorForce_0:aA,_emscripten_bind_btSoftBody_setRollingFriction_1:yt,_emscripten_bind_btGhostObject_activate_0:Rr,_emscripten_bind_btCapsuleShape_setLocalScaling_1:Yt,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0:Jv,_emscripten_bind_btRigidBody_setAnisotropicFriction_2:ko,_emscripten_bind_btSoftBody_btSoftBody_4:Ro,_emscripten_bind_btSoftBody_activate_0:Rr,_emscripten_bind_btSoftBodyWorldInfo_set_air_density_1:By,_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1:hy,_emscripten_bind_btVector3_op_add_1:Vq,_emscripten_bind_btPersistentManifold_btPersistentManifold_0:kl,_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0:Mw,_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2:xl,_emscripten_bind_btVector4___destroy___0:uu,_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0:Sw,_emscripten_bind_btConstraintSetting_get_m_damping_0:eA,_emscripten_bind_tNodeArray_at_1:ew,_i64Add:Ct,_emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1:qv,_emscripten_bind_btSoftBodyHelpers_CreatePatchUV_10:Sd,_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1:mw,_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0:Km,_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1:Go,_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3:Gm,_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0:Dv,_emscripten_bind_btPoint2PointConstraint_getPivotInB_0:Ry,_emscripten_bind_btKinematicCharacterController_playerStep_2:Ps,_emscripten_bind_btDispatcherInfo___destroy___0:Zy,_emscripten_bind_btCapsuleShape_getMargin_0:$u,_emscripten_bind_btCylinderShape_getMargin_0:$u,_emscripten_bind_btStaticPlaneShape_setLocalScaling_1:Yt,_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2:_s,_emscripten_bind_btVector4_setValue_4:Gr,_emscripten_bind_ContactResultCallback_addSingleResult_7:wq,_emscripten_bind_btGhostObject_getWorldTransform_0:Xz,_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0:vt,_emscripten_bind_LocalConvexResult_set_m_hitFraction_1:Px,_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2:_s,_emscripten_bind_btDispatcherInfo_get_m_timeStep_0:tA,_emscripten_bind_btConvexTriangleMeshShape_setMargin_1:vu,_emscripten_bind_btWheelInfo_get_m_frictionSlip_0:fy,_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1:hy,_emscripten_bind_btBoxShape_calculateLocalInertia_2:_s,_emscripten_bind_btMotionState___destroy___0:Kt,_emscripten_bind_btCollisionObject_setCollisionFlags_1:vw,_emscripten_bind_btPairCachingGhostObject_setActivationState_1:qt,_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1:Zs,_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2:xs,_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3:as,_emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1:Wv,_emscripten_bind_Config_set_kSSHR_CL_1:Ax,_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1:st,_emscripten_bind_btVector4_op_sub_1:Uq,_emscripten_bind_btSoftBodyWorldInfo___destroy___0:jp,_emscripten_bind_btConvexTriangleMeshShape_getMargin_0:$u,_emscripten_bind_btSoftBodySolver___destroy___0:Kt,_emscripten_bind_Node_get_m_n_0:CA,_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1:nw,_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1:Xk,_emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0:Pz,_emscripten_bind_btConeTwistConstraint_setAngularOnly_1:Cv,_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1:fw,_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4:Mj,_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2:sj,_emscripten_bind_btGhostObject_getNumOverlappingObjects_0:ux,_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration___destroy___0:Kt,_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1:bv,_emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88:cB,_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1:xu,_emscripten_bind_btRigidBodyConstructionInfo___destroy___0:Zy,_emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1:iy,_sbrk:mo,_emscripten_bind_btPoint2PointConstraint_setPivotA_1:Rq,_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1:Iq,_memcpy:Lm,_emscripten_bind_Config_get_maxvolume_0:Kz,_emscripten_bind_btCapsuleShape_calculateLocalInertia_2:_s,_emscripten_bind_btRigidBody___destroy___0:Kt,_emscripten_bind_btVector3_y_0:eA,_emscripten_bind_btDispatcherInfo_set_m_useEpa_1:iw,_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0:Nz,_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2:gp,_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3:Oo,_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0:Vz,_emscripten_bind_Config_set_kDF_1:_x,_emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9:yg,_emscripten_bind_btSoftBody_activate_1:pr,_emscripten_bind_btConeShapeZ_btConeShapeZ_2:Cl,_emscripten_bind_btGhostObject_setCollisionShape_1:Xt,_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1:_x,_emscripten_bind_btQuaternion_setW_1:Zx,_emscripten_bind_btPairCachingGhostObject_setRollingFriction_1:yt,_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1:Jt,_emscripten_bind_btGhostObject_isActive_0:Bv,_emscripten_bind_btVector4_z_0:dA,_emscripten_bind_btCollisionObject_forceActivationState_1:hw,_emscripten_bind_btKinematicCharacterController_onGround_0:Nu,_emscripten_bind_btRaycastVehicle_getWheelInfo_1:Uu,_emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0:Pz,_emscripten_bind_btConeTwistConstraint_setLimit_2:dq,_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1:av,_emscripten_bind_btSoftBodyWorldInfo_get_water_normal_0:Rz,_emscripten_bind_Node_set_m_x_1:lr,_emscripten_bind_btSoftBody_setFriction_1:Ot,_emscripten_bind_btRigidBody_setSleepingThresholds_2:Rt,_emscripten_bind_btSoftBody_upcast_1:Lv,_emscripten_bind_btCollisionObject_setWorldTransform_1:Xk,_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0:Vz,_emscripten_bind_btSoftBodyWorldInfo_set_m_dispatcher_1:Ov,_emscripten_bind_btStridingMeshInterface___destroy___0:Kt,_emscripten_bind_btSoftBody_setActivationState_1:qt,_emscripten_bind_btManifoldPoint_get_m_localPointA_0:AA,_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0:Cw,_emscripten_bind_btSoftBodyHelpers_CreatePatch_9:qe,_emscripten_bind_btDispatcher_getNumManifolds_0:Mu,_emscripten_bind_btConvexShape_setMargin_1:vu,_emscripten_bind_btSoftBody_get_m_nodes_0:hA,_emscripten_bind_btSoftBody___destroy___0:Kt,_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0:Iv,_emscripten_bind_btRigidBody_activate_1:pr,_emscripten_bind_btRigidBody_activate_0:Rr,_emscripten_bind_btRaycastVehicle___destroy___0:Kt,_emscripten_bind_btSoftBodyWorldInfo_get_m_gravity_0:kz,_emscripten_bind_btGhostObject_setActivationState_1:qt,_emscripten_bind_btSoftBodyArray___destroy___0:yp,_emscripten_bind_Material_set_m_kLST_1:hy,_emscripten_bind_tMaterialArray_size_0:Vz,_emscripten_bind_btCollisionWorld_contactPairTest_3:xr,_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0:Kw,_emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1:Yv,_emscripten_bind_Config_get_kSS_SPLT_CL_0:Uy,_emscripten_bind_btCylinderShapeX___destroy___0:Kt,_emscripten_bind_btSoftRigidDynamicsWorld_getWorldInfo_0:xz,_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0:pA,_emscripten_bind_ContactResultCallback___destroy___0:Kt,_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0:iv,_emscripten_bind_btSoftBody_setAnisotropicFriction_2:ko,_emscripten_bind_btConstraintSetting_btConstraintSetting_0:hp,_emscripten_bind_btRigidBody_getMotionState_0:Gy,_emscripten_bind_btKinematicCharacterController_getGhostObject_0:Mx,_emscripten_bind_btRigidBody_btRigidBody_1:Hh,_emscripten_bind_btTriangleMeshShape___destroy___0:Kt,_emscripten_bind_btKinematicCharacterController_setWalkDirection_1:it,_emscripten_bind_btDynamicsWorld_removeAction_1:Vt,_emscripten_bind_btRigidBody_applyTorque_1:zo,_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0:Hw,_emscripten_bind_btTransform_setIdentity_0:dn,_emscripten_bind_btSoftBodyWorldInfo_get_air_density_0:tA,_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1:Tq,_emscripten_bind_btRotationalLimitMotor_get_m_hiLimit_0:eA,_emscripten_bind_btGhostObject_setUserPointer_1:Gw,_emscripten_bind_btKinematicCharacterController_getGravity_0:dp,___udivmoddi4:Ne,_emscripten_enum_PHY_ScalarType_PHY_SHORT:lB,_emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0:Pz,_emscripten_bind_btDiscreteDynamicsWorld_addAction_1:cu,_emscripten_bind_btHingeConstraint_btHingeConstraint_4:fg,_emscripten_bind_LocalShapeInfo_get_m_shapePart_0:My,_emscripten_bind_btConeShape_calculateLocalInertia_2:_s,_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2:_s,_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1:av,_llvm_bswap_i32:lw,_emscripten_bind_btSoftRigidDynamicsWorld_removeRigidBody_1:wt,___udivdi3:Sv,_emscripten_bind_btSphereShape_setLocalScaling_1:Yt,_emscripten_bind_btVector4_w_0:aA,_emscripten_bind_btWheelInfo_get_m_worldTransform_0:rz,_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0:Ty,_emscripten_bind_btBvhTriangleMeshShape___destroy___0:Kt,_emscripten_bind_Config_set_citerations_1:bx,_emscripten_bind_btSoftBody_checkFace_3:Kk,_emscripten_bind_Config_get_kSKHR_CL_0:oz,_free:Rc,_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0:Dz,_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1:hy,_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1:tt,_emscripten_bind_btSoftBodyHelpers_btSoftBodyHelpers_0:Np,_emscripten_bind_Config_set_diterations_1:$w,_emscripten_bind_btGeneric6DofConstraint___destroy___0:Kt,_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_1:Et,_emscripten_bind_btVector4_btVector4_4:Cp,_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_3:Zr,_emscripten_bind_btVector4_x_0:tA,_emscripten_bind_Config_set_kDP_1:gy,_emscripten_bind_btGhostObject_getUserPointer_0:Ky,_emscripten_bind_btConvexHullShape_addPoint_1:Bu,_emscripten_bind_btConvexHullShape_addPoint_2:St,_emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0:Pz,_emscripten_bind_Config_set_kMT_1:Yx,_emscripten_bind_btTransform_getOrigin_0:pA,_emscripten_bind_Config_get_kKHR_0:Fz,_emscripten_bind_Material_get_m_kLST_0:eA,_emscripten_bind_btHingeConstraint___destroy___0:Kt,_emscripten_bind_btPairCachingGhostObject_getUserPointer_0:Ky,_emscripten_bind_btSoftBody_set_m_nodes_1:gh,_emscripten_bind_Config_set_viterations_1:Zw,_emscripten_bind_btConvexShape_calculateLocalInertia_2:_s,_memset:yn,_emscripten_bind_btKinematicCharacterController___destroy___0:Kt,_emscripten_bind_btConvexHullShape_setLocalScaling_1:Yt,_emscripten_bind_btTriangleMesh_btTriangleMesh_0:Mq,_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0:vy,_emscripten_bind_btTriangleMesh_btTriangleMesh_2:$p,_emscripten_bind_btTransform___destroy___0:Zy,_emscripten_bind_btWheelInfo_set_m_frictionSlip_1:uw,_emscripten_bind_btSoftBodyHelpers___destroy___0:Zy,_emscripten_bind_btHingeConstraint_enableAngularMotor_3:Yr,_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1:dr,_emscripten_bind_btRigidBody_setCenterOfMassTransform_1:Qt,_emscripten_bind_btManifoldPoint_get_m_localPointB_0:Rz,_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3:xr,_emscripten_bind_btSliderConstraint_setLowerLinLimit_1:cw,_emscripten_bind_btPoint2PointConstraint_set_m_setting_1:vr,_emscripten_bind_btRotationalLimitMotor_set_m_loLimit_1:By,_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1:fw,_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0:ey,_emscripten_bind_btRigidBody_setLinearVelocity_1:Qp,_emscripten_bind_btVehicleTuning_btVehicleTuning_0:Jn,_emscripten_bind_Config_set_maxvolume_1:cy,_emscripten_bind_btDefaultSoftBodySolver___destroy___0:Kt,_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1:ar,_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0:Uw,_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1:Av,_emscripten_bind_btDynamicsWorld_addAction_1:cu,_emscripten_bind_btDiscreteDynamicsWorld_removeAction_1:Vt,_emscripten_bind_btSoftBodyWorldInfo_set_m_maxDisplacement_1:Zx,_emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_2:bs,_emscripten_bind_btDefaultVehicleRaycaster___destroy___0:Kt,_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1:gv,_emscripten_bind_btQuaternion_setEulerZYX_3:pn,_emscripten_bind_Config_set_kLF_1:iy,_emscripten_bind_btSoftRigidDynamicsWorld_removeVehicle_1:At,_emscripten_enum_PHY_ScalarType_PHY_FLOAT:mB,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1:Ku,_emscripten_bind_Config_set_kSS_SPLT_CL_1:nx,_emscripten_bind_btSoftBody_forceActivationState_1:hw,_emscripten_bind_btDiscreteDynamicsWorld_removeVehicle_1:At,_emscripten_bind_btKinematicCharacterController_setFallSpeed_1:_x,_emscripten_bind_Material_get_m_flags_0:lz,_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0:Rw,_emscripten_bind_ClosestConvexResultCallback_hasHit_0:Vx,_emscripten_bind_btCapsuleShapeZ___destroy___0:Kt,_emscripten_bind_btRaycastVehicle_getRigidBody_0:py,_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0:zx,_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0:Mx,_emscripten_bind_btTriangleMesh_addTriangle_3:qn,_emscripten_bind_btGhostObject_getOverlappingObject_1:xu,_emscripten_bind_btSoftRigidDynamicsWorld_getPairCache_0:vt,_emscripten_bind_btSoftRigidDynamicsWorld_getDispatchInfo_0:uz,_emscripten_bind_btSoftBodyWorldInfo_set_water_normal_1:Zq,_emscripten_bind_btCompoundShape_getChildShape_1:qu,_emscripten_bind_btRigidBody_setCollisionFlags_1:vw,_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1:Gv,_emscripten_bind_Config_set_kCHR_1:Qx,_emscripten_bind_btConeShape___destroy___0:Kt,_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2:om,_emscripten_bind_btSoftRigidDynamicsWorld_addSoftBody_3:gj,_emscripten_bind_btSliderConstraint_btSliderConstraint_5:cf,_emscripten_bind_btSliderConstraint_btSliderConstraint_3:fe,_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0:Qz,_emscripten_bind_RaycastInfo_set_m_hardPointWS_1:ar,_emscripten_bind_btRigidBody_forceActivationState_1:hw,_emscripten_bind_btPoint2PointConstraint_setPivotB_1:Qq,_emscripten_bind_btManifoldPoint_getDistance_0:fz,_emscripten_bind_btGhostPairCallback___destroy___0:Kt,_emscripten_bind_btTransform_setFromOpenGLMatrix_1:gm,_emscripten_bind_btKinematicCharacterController_getMaxSlope_0:Ez,_emscripten_bind_btSliderConstraint_enableFeedback_1:Wv,_emscripten_bind_btRaycastVehicle_addWheel_7:Nd,_emscripten_bind_btPairCachingGhostObject_isActive_0:Bv,_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1:nw,_emscripten_bind_btStaticPlaneShape___destroy___0:Kt,_emscripten_bind_btHingeConstraint_enableMotor_1:gw,_emscripten_bind_btDispatcherInfo_set_m_stepCount_1:nw,_emscripten_bind_btBoxShape_setLocalScaling_1:Yt,_emscripten_bind_btConeShapeZ___destroy___0:Kt,_emscripten_bind_btDynamicsWorld_getPairCache_0:vt,_emscripten_bind_btSoftRigidDynamicsWorld_convexSweepTest_5:Oq,_emscripten_bind_btRotationalLimitMotor_set_m_targetVelocity_1:gy,_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5:Oq,_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2:os,_emscripten_bind_btRigidBody_setRestitution_1:It,_emscripten_bind_btVector4_btVector4_0:nr,_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0:Dw,_emscripten_bind_btGhostObject_setCcdMotionThreshold_1:mw,_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1:Uv,_emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1:Fq,_emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1:Fq,_emscripten_bind_tMaterialArray_at_1:ev,_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1:Lw,_emscripten_bind_Material_set_m_kVST_1:Zx,_emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1:Vn,_emscripten_bind_btSoftBodyWorldInfo_get_water_offset_0:dA,_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3:As,_emscripten_bind_btWheelInfo_get_m_raycastInfo_0:AA,_emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0:Aw,_emscripten_bind_btConvexShape_getMargin_0:$u,_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0:ir,_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1:Px,_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1:Wq,_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0:Pz,__GLOBAL__sub_I_btConeTwistConstraint_cpp:Zu,runPostSets:Cs,stackAlloc:dv,stackSave:wB,stackRestore:qB,establishStackSpace:wz,setThrew:dx,setTempRet0:sB,getTempRet0:vB,dynCall_viiiii:Vs,dynCall_vid:Lx,dynCall_vi:Yz,dynCall_viiidii:ms,dynCall_vii:hx,dynCall_iiiiiiiiiii:Lp,dynCall_ii:Ny,dynCall_viidi:ku,dynCall_viddiii:vs,dynCall_vidii:lu,dynCall_iiiii:xt,dynCall_vidi:rv,dynCall_diiiiiiii:Yq,dynCall_viiiiddddiid:Rp,dynCall_diiiii:Ks,dynCall_vidd:aw,dynCall_iiii:Au,dynCall_viiiiid:ls,dynCall_viiiiii:Vr,dynCall_iiid:Ru,dynCall_di:jz,dynCall_iiiiiii:Fr,dynCall_diiidii:Qr,dynCall_viidii:et,dynCall_viiiiiii:tr,dynCall_viiiiiiiii:zq,dynCall_viiiiiiiiii:Vp,dynCall_iii:pw,dynCall_diii:Iu,dynCall_diiiiiiiiii:Mp,dynCall_viiiid:dt,dynCall_diiiiiiiii:tq,dynCall_did:ix,dynCall_viiiidddddidi:Ap,dynCall_diidii:Ts,dynCall_diiii:Ht,dynCall_iiiiiiiiii:qq,dynCall_viiid:iu,dynCall_viii:Wu,dynCall_v:hB,dynCall_viid:yv,dynCall_iidid:bu,dynCall_viiii:Tt}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _emscripten_bind_btCylinderShape___destroy___0=Module["_emscripten_bind_btCylinderShape___destroy___0"]=asm["_emscripten_bind_btCylinderShape___destroy___0"];var _emscripten_bind_btGeneric6DofConstraint_enableFeedback_1=Module["_emscripten_bind_btGeneric6DofConstraint_enableFeedback_1"]=asm["_emscripten_bind_btGeneric6DofConstraint_enableFeedback_1"];var _emscripten_bind_btGhostObject___destroy___0=Module["_emscripten_bind_btGhostObject___destroy___0"]=asm["_emscripten_bind_btGhostObject___destroy___0"];var _emscripten_bind_btPoint2PointConstraint_set_m_setting_1=Module["_emscripten_bind_btPoint2PointConstraint_set_m_setting_1"]=asm["_emscripten_bind_btPoint2PointConstraint_set_m_setting_1"];var _emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1=Module["_emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1"]=asm["_emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1"];var _emscripten_bind_btDispatcherInfo_set_m_useContinuous_1=Module["_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1"];var _emscripten_bind_btKinematicCharacterController_setWalkDirection_1=Module["_emscripten_bind_btKinematicCharacterController_setWalkDirection_1"]=asm["_emscripten_bind_btKinematicCharacterController_setWalkDirection_1"];var _emscripten_bind_btCollisionObject_isActive_0=Module["_emscripten_bind_btCollisionObject_isActive_0"]=asm["_emscripten_bind_btCollisionObject_isActive_0"];var _emscripten_bind_btRotationalLimitMotor___destroy___0=Module["_emscripten_bind_btRotationalLimitMotor___destroy___0"]=asm["_emscripten_bind_btRotationalLimitMotor___destroy___0"];var _emscripten_bind_btDynamicsWorld_removeAction_1=Module["_emscripten_bind_btDynamicsWorld_removeAction_1"]=asm["_emscripten_bind_btDynamicsWorld_removeAction_1"];var _emscripten_bind_btVehicleTuning_set_m_frictionSlip_1=Module["_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1"];var _emscripten_bind_btQuaternion_w_0=Module["_emscripten_bind_btQuaternion_w_0"]=asm["_emscripten_bind_btQuaternion_w_0"];var _emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4=Module["_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"];var _emscripten_bind_btCapsuleShapeX_getMargin_0=Module["_emscripten_bind_btCapsuleShapeX_getMargin_0"]=asm["_emscripten_bind_btCapsuleShapeX_getMargin_0"];var _emscripten_bind_Node_set_m_n_1=Module["_emscripten_bind_Node_set_m_n_1"]=asm["_emscripten_bind_Node_set_m_n_1"];var _emscripten_bind_btCompoundShape_getMargin_0=Module["_emscripten_bind_btCompoundShape_getMargin_0"]=asm["_emscripten_bind_btCompoundShape_getMargin_0"];var _emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1=Module["_emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1"]=asm["_emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1"];var _emscripten_bind_btRigidBody_setUserPointer_1=Module["_emscripten_bind_btRigidBody_setUserPointer_1"]=asm["_emscripten_bind_btRigidBody_setUserPointer_1"];var _emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0"];var _emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1=Module["_emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1"]=asm["_emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1"];var _emscripten_bind_btQuaternion_setX_1=Module["_emscripten_bind_btQuaternion_setX_1"]=asm["_emscripten_bind_btQuaternion_setX_1"];var _emscripten_bind_btCylinderShapeZ_getMargin_0=Module["_emscripten_bind_btCylinderShapeZ_getMargin_0"]=asm["_emscripten_bind_btCylinderShapeZ_getMargin_0"];var _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0=Module["_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0"];var _emscripten_bind_btQuaternion_setZ_1=Module["_emscripten_bind_btQuaternion_setZ_1"]=asm["_emscripten_bind_btQuaternion_setZ_1"];var _emscripten_bind_btCollisionObject_getUserIndex_0=Module["_emscripten_bind_btCollisionObject_getUserIndex_0"]=asm["_emscripten_bind_btCollisionObject_getUserIndex_0"];var _emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0=Module["_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0"];var _emscripten_bind_btSoftBodyWorldInfo_set_water_density_1=Module["_emscripten_bind_btSoftBodyWorldInfo_set_water_density_1"]=asm["_emscripten_bind_btSoftBodyWorldInfo_set_water_density_1"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0"];var _emscripten_bind_btKinematicCharacterController_setMaxSlope_1=Module["_emscripten_bind_btKinematicCharacterController_setMaxSlope_1"]=asm["_emscripten_bind_btKinematicCharacterController_setMaxSlope_1"];var _emscripten_bind_btQuadWord_z_0=Module["_emscripten_bind_btQuadWord_z_0"]=asm["_emscripten_bind_btQuadWord_z_0"];var _emscripten_bind_btSoftBody_setCcdMotionThreshold_1=Module["_emscripten_bind_btSoftBody_setCcdMotionThreshold_1"]=asm["_emscripten_bind_btSoftBody_setCcdMotionThreshold_1"];var _emscripten_bind_Material___destroy___0=Module["_emscripten_bind_Material___destroy___0"]=asm["_emscripten_bind_Material___destroy___0"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_2=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_2"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_2"];var _emscripten_bind_btSoftBody_rotate_1=Module["_emscripten_bind_btSoftBody_rotate_1"]=asm["_emscripten_bind_btSoftBody_rotate_1"];var _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0=Module["_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0"]=asm["_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0"];var _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0=Module["_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0"]=asm["_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0"];var _emscripten_bind_btVector4_setY_1=Module["_emscripten_bind_btVector4_setY_1"]=asm["_emscripten_bind_btVector4_setY_1"];var _emscripten_enum_PHY_ScalarType_PHY_UCHAR=Module["_emscripten_enum_PHY_ScalarType_PHY_UCHAR"]=asm["_emscripten_enum_PHY_ScalarType_PHY_UCHAR"];var _emscripten_bind_btQuaternion_setW_1=Module["_emscripten_bind_btQuaternion_setW_1"]=asm["_emscripten_bind_btQuaternion_setW_1"];var _emscripten_bind_btSoftRigidDynamicsWorld___destroy___0=Module["_emscripten_bind_btSoftRigidDynamicsWorld___destroy___0"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld___destroy___0"];var _emscripten_bind_btSoftRigidDynamicsWorld_removeConstraint_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_removeConstraint_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_removeConstraint_1"];var _emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0=Module["_emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0"]=asm["_emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0"];var _emscripten_bind_btCollisionDispatcher___destroy___0=Module["_emscripten_bind_btCollisionDispatcher___destroy___0"]=asm["_emscripten_bind_btCollisionDispatcher___destroy___0"];var _emscripten_bind_btRigidBody_applyCentralImpulse_1=Module["_emscripten_bind_btRigidBody_applyCentralImpulse_1"]=asm["_emscripten_bind_btRigidBody_applyCentralImpulse_1"];var _emscripten_bind_btConvexHullShape_getMargin_0=Module["_emscripten_bind_btConvexHullShape_getMargin_0"]=asm["_emscripten_bind_btConvexHullShape_getMargin_0"];var _emscripten_bind_btDefaultMotionState_getWorldTransform_1=Module["_emscripten_bind_btDefaultMotionState_getWorldTransform_1"]=asm["_emscripten_bind_btDefaultMotionState_getWorldTransform_1"];var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1"];var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3"];var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2=Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2"];var _emscripten_bind_btSoftRigidDynamicsWorld_addAction_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addAction_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addAction_1"];var _emscripten_bind_btDynamicsWorld_rayTest_3=Module["_emscripten_bind_btDynamicsWorld_rayTest_3"]=asm["_emscripten_bind_btDynamicsWorld_rayTest_3"];var _emscripten_bind_Config_set_kSR_SPLT_CL_1=Module["_emscripten_bind_Config_set_kSR_SPLT_CL_1"]=asm["_emscripten_bind_Config_set_kSR_SPLT_CL_1"];var _emscripten_bind_btQuadWord_x_0=Module["_emscripten_bind_btQuadWord_x_0"]=asm["_emscripten_bind_btQuadWord_x_0"];var _emscripten_bind_Config_get_diterations_0=Module["_emscripten_bind_Config_get_diterations_0"]=asm["_emscripten_bind_Config_get_diterations_0"];var _emscripten_bind_btCollisionObject_isKinematicObject_0=Module["_emscripten_bind_btCollisionObject_isKinematicObject_0"]=asm["_emscripten_bind_btCollisionObject_isKinematicObject_0"];var _emscripten_bind_btSoftRigidDynamicsWorld_removeSoftBody_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_removeSoftBody_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_removeSoftBody_1"];var _emscripten_bind_btSphereShape___destroy___0=Module["_emscripten_bind_btSphereShape___destroy___0"]=asm["_emscripten_bind_btSphereShape___destroy___0"];var _emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1=Module["_emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1"];var _emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1"];var _emscripten_bind_btSoftBody_isKinematicObject_0=Module["_emscripten_bind_btSoftBody_isKinematicObject_0"]=asm["_emscripten_bind_btSoftBody_isKinematicObject_0"];var _emscripten_bind_btRigidBody_getCenterOfMassTransform_0=Module["_emscripten_bind_btRigidBody_getCenterOfMassTransform_0"]=asm["_emscripten_bind_btRigidBody_getCenterOfMassTransform_0"];var _emscripten_bind_btTransform_setIdentity_0=Module["_emscripten_bind_btTransform_setIdentity_0"]=asm["_emscripten_bind_btTransform_setIdentity_0"];var _emscripten_bind_btGhostObject_isKinematicObject_0=Module["_emscripten_bind_btGhostObject_isKinematicObject_0"]=asm["_emscripten_bind_btGhostObject_isKinematicObject_0"];var _emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5=Module["_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5"];var _emscripten_bind_btCapsuleShape___destroy___0=Module["_emscripten_bind_btCapsuleShape___destroy___0"]=asm["_emscripten_bind_btCapsuleShape___destroy___0"];var _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1=Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"]=asm["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"];var _emscripten_bind_btCollisionObject_activate_1=Module["_emscripten_bind_btCollisionObject_activate_1"]=asm["_emscripten_bind_btCollisionObject_activate_1"];var _emscripten_bind_btCollisionObject_activate_0=Module["_emscripten_bind_btCollisionObject_activate_0"]=asm["_emscripten_bind_btCollisionObject_activate_0"];var _emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_2=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_2"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_2"];var _emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_1"];var _emscripten_bind_Config_set_kSSHR_CL_1=Module["_emscripten_bind_Config_set_kSSHR_CL_1"]=asm["_emscripten_bind_Config_set_kSSHR_CL_1"];var _emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1=Module["_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1"];var _emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1=Module["_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1"]=asm["_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1"];var _emscripten_bind_btVector3_setX_1=Module["_emscripten_bind_btVector3_setX_1"]=asm["_emscripten_bind_btVector3_setX_1"];var _emscripten_bind_btCollisionConfiguration___destroy___0=Module["_emscripten_bind_btCollisionConfiguration___destroy___0"]=asm["_emscripten_bind_btCollisionConfiguration___destroy___0"];var _emscripten_bind_btCapsuleShapeZ_setMargin_1=Module["_emscripten_bind_btCapsuleShapeZ_setMargin_1"]=asm["_emscripten_bind_btCapsuleShapeZ_setMargin_1"];var _emscripten_bind_btHingeConstraint_enableFeedback_1=Module["_emscripten_bind_btHingeConstraint_enableFeedback_1"]=asm["_emscripten_bind_btHingeConstraint_enableFeedback_1"];var _emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1=Module["_emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1"]=asm["_emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1"];var _emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1=Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1"];var _emscripten_bind_Config_set_kMT_1=Module["_emscripten_bind_Config_set_kMT_1"]=asm["_emscripten_bind_Config_set_kMT_1"];var _emscripten_bind_btManifoldPoint_set_m_localPointB_1=Module["_emscripten_bind_btManifoldPoint_set_m_localPointB_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_localPointB_1"];var _emscripten_bind_btVector3_setZ_1=Module["_emscripten_bind_btVector3_setZ_1"]=asm["_emscripten_bind_btVector3_setZ_1"];var _emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1=Module["_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1"]=asm["_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1"];var _emscripten_bind_btQuaternion_setValue_4=Module["_emscripten_bind_btQuaternion_setValue_4"]=asm["_emscripten_bind_btQuaternion_setValue_4"];var _emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1=Module["_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1"];var _emscripten_bind_btSoftBody_transform_1=Module["_emscripten_bind_btSoftBody_transform_1"]=asm["_emscripten_bind_btSoftBody_transform_1"];var _emscripten_bind_LocalShapeInfo___destroy___0=Module["_emscripten_bind_LocalShapeInfo___destroy___0"]=asm["_emscripten_bind_LocalShapeInfo___destroy___0"];var _emscripten_bind_btSoftBody_appendAnchor_4=Module["_emscripten_bind_btSoftBody_appendAnchor_4"]=asm["_emscripten_bind_btSoftBody_appendAnchor_4"];var _emscripten_bind_btPoint2PointConstraint_get_m_setting_0=Module["_emscripten_bind_btPoint2PointConstraint_get_m_setting_0"]=asm["_emscripten_bind_btPoint2PointConstraint_get_m_setting_0"];var _emscripten_bind_btQuadWord_setY_1=Module["_emscripten_bind_btQuadWord_setY_1"]=asm["_emscripten_bind_btQuadWord_setY_1"];var _emscripten_bind_btRigidBody_isKinematicObject_0=Module["_emscripten_bind_btRigidBody_isKinematicObject_0"]=asm["_emscripten_bind_btRigidBody_isKinematicObject_0"];var _emscripten_bind_ContactResultCallback_addSingleResult_7=Module["_emscripten_bind_ContactResultCallback_addSingleResult_7"]=asm["_emscripten_bind_ContactResultCallback_addSingleResult_7"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1"];var _emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0=Module["_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0"]=asm["_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0"];var _emscripten_bind_btSliderConstraint_btSliderConstraint_5=Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_5"]=asm["_emscripten_bind_btSliderConstraint_btSliderConstraint_5"];var _emscripten_bind_btConeTwistConstraint_setDamping_1=Module["_emscripten_bind_btConeTwistConstraint_setDamping_1"]=asm["_emscripten_bind_btConeTwistConstraint_setDamping_1"];var _emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0=Module["_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0"]=asm["_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0"];var _emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0"];var _emscripten_bind_btCylinderShape_setMargin_1=Module["_emscripten_bind_btCylinderShape_setMargin_1"]=asm["_emscripten_bind_btCylinderShape_setMargin_1"];var _emscripten_bind_btCollisionWorld___destroy___0=Module["_emscripten_bind_btCollisionWorld___destroy___0"]=asm["_emscripten_bind_btCollisionWorld___destroy___0"];var _emscripten_bind_btSoftBodyWorldInfo_get_m_broadphase_0=Module["_emscripten_bind_btSoftBodyWorldInfo_get_m_broadphase_0"]=asm["_emscripten_bind_btSoftBodyWorldInfo_get_m_broadphase_0"];var _emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0=Module["_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0"];var _emscripten_bind_btBoxShape_btBoxShape_1=Module["_emscripten_bind_btBoxShape_btBoxShape_1"]=asm["_emscripten_bind_btBoxShape_btBoxShape_1"];var _emscripten_bind_btPersistentManifold_getBody1_0=Module["_emscripten_bind_btPersistentManifold_getBody1_0"]=asm["_emscripten_bind_btPersistentManifold_getBody1_0"];var _emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1"];var _emscripten_bind_RaycastInfo_set_m_isInContact_1=Module["_emscripten_bind_RaycastInfo_set_m_isInContact_1"]=asm["_emscripten_bind_RaycastInfo_set_m_isInContact_1"];var _emscripten_bind_btKinematicCharacterController_setGravity_1=Module["_emscripten_bind_btKinematicCharacterController_setGravity_1"]=asm["_emscripten_bind_btKinematicCharacterController_setGravity_1"];var _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5=Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5"]=asm["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5"];var _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3=Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3"]=asm["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3"];var _emscripten_bind_LocalShapeInfo_get_m_shapePart_0=Module["_emscripten_bind_LocalShapeInfo_get_m_shapePart_0"]=asm["_emscripten_bind_LocalShapeInfo_get_m_shapePart_0"];var __GLOBAL__sub_I_btConeTwistConstraint_cpp=Module["__GLOBAL__sub_I_btConeTwistConstraint_cpp"]=asm["__GLOBAL__sub_I_btConeTwistConstraint_cpp"];var _emscripten_bind_btSoftRigidDynamicsWorld_removeAction_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_removeAction_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_removeAction_1"];var _emscripten_bind_btWheelInfo_get_m_rollInfluence_0=Module["_emscripten_bind_btWheelInfo_get_m_rollInfluence_0"]=asm["_emscripten_bind_btWheelInfo_get_m_rollInfluence_0"];var _emscripten_bind_btVector4_setValue_4=Module["_emscripten_bind_btVector4_setValue_4"]=asm["_emscripten_bind_btVector4_setValue_4"];var _emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1=Module["_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1"]=asm["_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1"];var _emscripten_bind_tNodeArray_size_0=Module["_emscripten_bind_tNodeArray_size_0"]=asm["_emscripten_bind_tNodeArray_size_0"];var _emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1=Module["_emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1"]=asm["_emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1"];var _emscripten_bind_btDynamicsWorld_getDispatchInfo_0=Module["_emscripten_bind_btDynamicsWorld_getDispatchInfo_0"]=asm["_emscripten_bind_btDynamicsWorld_getDispatchInfo_0"];var _emscripten_bind_btCompoundShape_removeChildShapeByIndex_1=Module["_emscripten_bind_btCompoundShape_removeChildShapeByIndex_1"]=asm["_emscripten_bind_btCompoundShape_removeChildShapeByIndex_1"];var _emscripten_bind_btVector3_length_0=Module["_emscripten_bind_btVector3_length_0"]=asm["_emscripten_bind_btVector3_length_0"];var _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2=Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"]=asm["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"];var _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1=Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"]=asm["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"];var _emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1"];var _emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1=Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1"]=asm["_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1"];var _emscripten_bind_btQuaternion_setEuler_3=Module["_emscripten_bind_btQuaternion_setEuler_3"]=asm["_emscripten_bind_btQuaternion_setEuler_3"];var _emscripten_bind_btBoxShape_getMargin_0=Module["_emscripten_bind_btBoxShape_getMargin_0"]=asm["_emscripten_bind_btBoxShape_getMargin_0"];var _emscripten_bind_btPairCachingGhostObject___destroy___0=Module["_emscripten_bind_btPairCachingGhostObject___destroy___0"]=asm["_emscripten_bind_btPairCachingGhostObject___destroy___0"];var _emscripten_bind_btPairCachingGhostObject_setUserPointer_1=Module["_emscripten_bind_btPairCachingGhostObject_setUserPointer_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setUserPointer_1"];var _emscripten_bind_btDynamicsWorld_addCollisionObject_3=Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_3"]=asm["_emscripten_bind_btDynamicsWorld_addCollisionObject_3"];var _emscripten_bind_btPairCachingGhostObject_activate_0=Module["_emscripten_bind_btPairCachingGhostObject_activate_0"]=asm["_emscripten_bind_btPairCachingGhostObject_activate_0"];var _emscripten_bind_btPairCachingGhostObject_activate_1=Module["_emscripten_bind_btPairCachingGhostObject_activate_1"]=asm["_emscripten_bind_btPairCachingGhostObject_activate_1"];var _emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0=Module["_emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0"]=asm["_emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0"];var _emscripten_bind_btSoftBody_setUserPointer_1=Module["_emscripten_bind_btSoftBody_setUserPointer_1"]=asm["_emscripten_bind_btSoftBody_setUserPointer_1"];var _emscripten_bind_btSoftBody_setMass_2=Module["_emscripten_bind_btSoftBody_setMass_2"]=asm["_emscripten_bind_btSoftBody_setMass_2"];var _emscripten_bind_Config_get_kCHR_0=Module["_emscripten_bind_Config_get_kCHR_0"]=asm["_emscripten_bind_Config_get_kCHR_0"];var _emscripten_bind_btPairCachingGhostObject_forceActivationState_1=Module["_emscripten_bind_btPairCachingGhostObject_forceActivationState_1"]=asm["_emscripten_bind_btPairCachingGhostObject_forceActivationState_1"];var _emscripten_bind_btDefaultMotionState___destroy___0=Module["_emscripten_bind_btDefaultMotionState___destroy___0"]=asm["_emscripten_bind_btDefaultMotionState___destroy___0"];var _emscripten_bind_btDispatcherInfo_get_m_stepCount_0=Module["_emscripten_bind_btDispatcherInfo_get_m_stepCount_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_stepCount_0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1"];var _emscripten_bind_btQuadWord_setW_1=Module["_emscripten_bind_btQuadWord_setW_1"]=asm["_emscripten_bind_btQuadWord_setW_1"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0"];var _emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2=Module["_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2"]=asm["_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2"];var _emscripten_bind_LocalShapeInfo_set_m_shapePart_1=Module["_emscripten_bind_LocalShapeInfo_set_m_shapePart_1"]=asm["_emscripten_bind_LocalShapeInfo_set_m_shapePart_1"];var _emscripten_bind_btRotationalLimitMotor_get_m_maxMotorForce_0=Module["_emscripten_bind_btRotationalLimitMotor_get_m_maxMotorForce_0"]=asm["_emscripten_bind_btRotationalLimitMotor_get_m_maxMotorForce_0"];var _emscripten_bind_btRigidBody_setLinearFactor_1=Module["_emscripten_bind_btRigidBody_setLinearFactor_1"]=asm["_emscripten_bind_btRigidBody_setLinearFactor_1"];var _emscripten_bind_btCompoundShape_getChildShape_1=Module["_emscripten_bind_btCompoundShape_getChildShape_1"]=asm["_emscripten_bind_btCompoundShape_getChildShape_1"];var _emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1=Module["_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1"];var _emscripten_bind_btSoftRigidDynamicsWorld_setGravity_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_setGravity_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_setGravity_1"];var _emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0=Module["_emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0"]=asm["_emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0"];var _emscripten_bind_btWheelInfo_get_m_engineForce_0=Module["_emscripten_bind_btWheelInfo_get_m_engineForce_0"]=asm["_emscripten_bind_btWheelInfo_get_m_engineForce_0"];var _emscripten_bind_Config_get_kSR_SPLT_CL_0=Module["_emscripten_bind_Config_get_kSR_SPLT_CL_0"]=asm["_emscripten_bind_Config_get_kSR_SPLT_CL_0"];var _emscripten_bind_btRaycastVehicle_setSteeringValue_2=Module["_emscripten_bind_btRaycastVehicle_setSteeringValue_2"]=asm["_emscripten_bind_btRaycastVehicle_setSteeringValue_2"];var _emscripten_bind_btPoint2PointConstraint___destroy___0=Module["_emscripten_bind_btPoint2PointConstraint___destroy___0"]=asm["_emscripten_bind_btPoint2PointConstraint___destroy___0"];var _emscripten_bind_btSoftBody_getUserPointer_0=Module["_emscripten_bind_btSoftBody_getUserPointer_0"]=asm["_emscripten_bind_btSoftBody_getUserPointer_0"];var _emscripten_bind_btCollisionShape_setMargin_1=Module["_emscripten_bind_btCollisionShape_setMargin_1"]=asm["_emscripten_bind_btCollisionShape_setMargin_1"];var _emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1=Module["_emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1"]=asm["_emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1"];var _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2=Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2"];var _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"];var _emscripten_bind_Config_get_kVCF_0=Module["_emscripten_bind_Config_get_kVCF_0"]=asm["_emscripten_bind_Config_get_kVCF_0"];var _malloc=Module["_malloc"]=asm["_malloc"];var _emscripten_bind_btDispatcherInfo_get_m_useEpa_0=Module["_emscripten_bind_btDispatcherInfo_get_m_useEpa_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_useEpa_0"];var _emscripten_bind_btGeneric6DofSpringConstraint_getRotationalLimitMotor_1=Module["_emscripten_bind_btGeneric6DofSpringConstraint_getRotationalLimitMotor_1"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_getRotationalLimitMotor_1"];var _emscripten_bind_btTransform_btTransform_2=Module["_emscripten_bind_btTransform_btTransform_2"]=asm["_emscripten_bind_btTransform_btTransform_2"];var _emscripten_bind_btTransform_btTransform_0=Module["_emscripten_bind_btTransform_btTransform_0"]=asm["_emscripten_bind_btTransform_btTransform_0"];var _emscripten_bind_btPairCachingGhostObject_getUserIndex_0=Module["_emscripten_bind_btPairCachingGhostObject_getUserIndex_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getUserIndex_0"];var _emscripten_bind_Config_set_kVC_1=Module["_emscripten_bind_Config_set_kVC_1"]=asm["_emscripten_bind_Config_set_kVC_1"];var _emscripten_bind_btVector3_op_sub_1=Module["_emscripten_bind_btVector3_op_sub_1"]=asm["_emscripten_bind_btVector3_op_sub_1"];var _emscripten_bind_btWheelInfo_set_m_wheelsRadius_1=Module["_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1"]=asm["_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1"];var _emscripten_bind_RaycastInfo_set_m_hardPointWS_1=Module["_emscripten_bind_RaycastInfo_set_m_hardPointWS_1"]=asm["_emscripten_bind_RaycastInfo_set_m_hardPointWS_1"];var _emscripten_bind_btDispatcherInfo_set_m_enableSPU_1=Module["_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1"];var _emscripten_bind_btRaycastVehicle_setCoordinateSystem_3=Module["_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3"]=asm["_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3"];var _emscripten_bind_btSoftBody_appendNode_2=Module["_emscripten_bind_btSoftBody_appendNode_2"]=asm["_emscripten_bind_btSoftBody_appendNode_2"];var _emscripten_bind_btCollisionObject_setActivationState_1=Module["_emscripten_bind_btCollisionObject_setActivationState_1"]=asm["_emscripten_bind_btCollisionObject_setActivationState_1"];var _emscripten_bind_btPersistentManifold___destroy___0=Module["_emscripten_bind_btPersistentManifold___destroy___0"]=asm["_emscripten_bind_btPersistentManifold___destroy___0"];var _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0=Module["_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0"]=asm["_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0"];var _emscripten_bind_btCylinderShapeZ___destroy___0=Module["_emscripten_bind_btCylinderShapeZ___destroy___0"]=asm["_emscripten_bind_btCylinderShapeZ___destroy___0"];var _emscripten_bind_btMatrix3x3___destroy___0=Module["_emscripten_bind_btMatrix3x3___destroy___0"]=asm["_emscripten_bind_btMatrix3x3___destroy___0"];var _emscripten_bind_btDiscreteDynamicsWorld_addVehicle_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_addVehicle_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addVehicle_1"];var _emscripten_bind_ConvexResultCallback_hasHit_0=Module["_emscripten_bind_ConvexResultCallback_hasHit_0"]=asm["_emscripten_bind_ConvexResultCallback_hasHit_0"];var _emscripten_bind_btCollisionShape_calculateLocalInertia_2=Module["_emscripten_bind_btCollisionShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btCollisionShape_calculateLocalInertia_2"];var _emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1=Module["_emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1"];var _emscripten_bind_Config_set_kPR_1=Module["_emscripten_bind_Config_set_kPR_1"]=asm["_emscripten_bind_Config_set_kPR_1"];var _emscripten_bind_btCollisionWorld_convexSweepTest_5=Module["_emscripten_bind_btCollisionWorld_convexSweepTest_5"]=asm["_emscripten_bind_btCollisionWorld_convexSweepTest_5"];var _emscripten_bind_btSoftBody_set_m_materials_1=Module["_emscripten_bind_btSoftBody_set_m_materials_1"]=asm["_emscripten_bind_btSoftBody_set_m_materials_1"];var _emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1"];var _emscripten_bind_btRigidBody_upcast_1=Module["_emscripten_bind_btRigidBody_upcast_1"]=asm["_emscripten_bind_btRigidBody_upcast_1"];var _emscripten_bind_btConstraintSetting_set_m_damping_1=Module["_emscripten_bind_btConstraintSetting_set_m_damping_1"]=asm["_emscripten_bind_btConstraintSetting_set_m_damping_1"];var _emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1=Module["_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1"]=asm["_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1"];var _emscripten_bind_btRigidBody_setCcdMotionThreshold_1=Module["_emscripten_bind_btRigidBody_setCcdMotionThreshold_1"]=asm["_emscripten_bind_btRigidBody_setCcdMotionThreshold_1"];var _emscripten_bind_btConvexHullShape_setMargin_1=Module["_emscripten_bind_btConvexHullShape_setMargin_1"]=asm["_emscripten_bind_btConvexHullShape_setMargin_1"];var _emscripten_bind_btRigidBody_applyForce_2=Module["_emscripten_bind_btRigidBody_applyForce_2"]=asm["_emscripten_bind_btRigidBody_applyForce_2"];var _emscripten_bind_btConeShapeZ_calculateLocalInertia_2=Module["_emscripten_bind_btConeShapeZ_calculateLocalInertia_2"]=asm["_emscripten_bind_btConeShapeZ_calculateLocalInertia_2"];var _emscripten_bind_btConstraintSetting_set_m_tau_1=Module["_emscripten_bind_btConstraintSetting_set_m_tau_1"]=asm["_emscripten_bind_btConstraintSetting_set_m_tau_1"];var _emscripten_bind_btConvexHullShape_calculateLocalInertia_2=Module["_emscripten_bind_btConvexHullShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConvexHullShape_calculateLocalInertia_2"];var ___uremdi3=Module["___uremdi3"]=asm["___uremdi3"];var _emscripten_bind_RaycastInfo_get_m_contactPointWS_0=Module["_emscripten_bind_RaycastInfo_get_m_contactPointWS_0"]=asm["_emscripten_bind_RaycastInfo_get_m_contactPointWS_0"];var _emscripten_bind_btSoftBody_setCollisionFlags_1=Module["_emscripten_bind_btSoftBody_setCollisionFlags_1"]=asm["_emscripten_bind_btSoftBody_setCollisionFlags_1"];var _emscripten_bind_btSphereShape_calculateLocalInertia_2=Module["_emscripten_bind_btSphereShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btSphereShape_calculateLocalInertia_2"];var _emscripten_bind_Config_set_maxvolume_1=Module["_emscripten_bind_Config_set_maxvolume_1"]=asm["_emscripten_bind_Config_set_maxvolume_1"];var _emscripten_bind_btSoftRigidDynamicsWorld_getSolverInfo_0=Module["_emscripten_bind_btSoftRigidDynamicsWorld_getSolverInfo_0"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_getSolverInfo_0"];var _emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1=Module["_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1"]=asm["_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1"];var _emscripten_bind_btSoftBody_setTotalMass_2=Module["_emscripten_bind_btSoftBody_setTotalMass_2"]=asm["_emscripten_bind_btSoftBody_setTotalMass_2"];var _emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0"];var _emscripten_bind_btGhostObject_setFriction_1=Module["_emscripten_bind_btGhostObject_setFriction_1"]=asm["_emscripten_bind_btGhostObject_setFriction_1"];var _emscripten_bind_btPairCachingGhostObject_getWorldTransform_0=Module["_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0"];var _emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1=Module["_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1"]=asm["_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1"];var _emscripten_bind_btCylinderShapeZ_setMargin_1=Module["_emscripten_bind_btCylinderShapeZ_setMargin_1"]=asm["_emscripten_bind_btCylinderShapeZ_setMargin_1"];var _emscripten_bind_btRigidBody_setFriction_1=Module["_emscripten_bind_btRigidBody_setFriction_1"]=asm["_emscripten_bind_btRigidBody_setFriction_1"];var _emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1=Module["_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1"];var _emscripten_bind_btGhostObject_setWorldTransform_1=Module["_emscripten_bind_btGhostObject_setWorldTransform_1"]=asm["_emscripten_bind_btGhostObject_setWorldTransform_1"];var _emscripten_bind_btSoftRigidDynamicsWorld_addVehicle_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addVehicle_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addVehicle_1"];var _emscripten_bind_btRotationalLimitMotor_get_m_targetVelocity_0=Module["_emscripten_bind_btRotationalLimitMotor_get_m_targetVelocity_0"]=asm["_emscripten_bind_btRotationalLimitMotor_get_m_targetVelocity_0"];var _emscripten_bind_btManifoldPoint_getAppliedImpulse_0=Module["_emscripten_bind_btManifoldPoint_getAppliedImpulse_0"]=asm["_emscripten_bind_btManifoldPoint_getAppliedImpulse_0"];var _emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1"];var _emscripten_bind_btConvexHullShape___destroy___0=Module["_emscripten_bind_btConvexHullShape___destroy___0"]=asm["_emscripten_bind_btConvexHullShape___destroy___0"];var _emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0"];var _emscripten_bind_btDiscreteDynamicsWorld_addAction_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_addAction_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addAction_1"];var _emscripten_bind_btVector4_setX_1=Module["_emscripten_bind_btVector4_setX_1"]=asm["_emscripten_bind_btVector4_setX_1"];var _emscripten_bind_btKinematicCharacterController_jump_0=Module["_emscripten_bind_btKinematicCharacterController_jump_0"]=asm["_emscripten_bind_btKinematicCharacterController_jump_0"];var _emscripten_bind_btCollisionObject_getUserPointer_0=Module["_emscripten_bind_btCollisionObject_getUserPointer_0"]=asm["_emscripten_bind_btCollisionObject_getUserPointer_0"];var _emscripten_bind_btWheelInfo_set_m_raycastInfo_1=Module["_emscripten_bind_btWheelInfo_set_m_raycastInfo_1"]=asm["_emscripten_bind_btWheelInfo_set_m_raycastInfo_1"];var _emscripten_bind_btCollisionWorld_contactTest_2=Module["_emscripten_bind_btCollisionWorld_contactTest_2"]=asm["_emscripten_bind_btCollisionWorld_contactTest_2"];var _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1=Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1"]=asm["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1"];var _emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1=Module["_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1"]=asm["_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1"];var _emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2=Module["_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2"]=asm["_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2"];var _emscripten_bind_btTransform_setOrigin_1=Module["_emscripten_bind_btTransform_setOrigin_1"]=asm["_emscripten_bind_btTransform_setOrigin_1"];var _emscripten_bind_btVector4_setZ_1=Module["_emscripten_bind_btVector4_setZ_1"]=asm["_emscripten_bind_btVector4_setZ_1"];var _emscripten_bind_btQuadWord_y_0=Module["_emscripten_bind_btQuadWord_y_0"]=asm["_emscripten_bind_btQuadWord_y_0"];var _emscripten_bind_btTransform_getBasis_0=Module["_emscripten_bind_btTransform_getBasis_0"]=asm["_emscripten_bind_btTransform_getBasis_0"];var _emscripten_bind_btPairCachingGhostObject_setFriction_1=Module["_emscripten_bind_btPairCachingGhostObject_setFriction_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setFriction_1"];var _emscripten_bind_Config_set_kSRHR_CL_1=Module["_emscripten_bind_Config_set_kSRHR_CL_1"]=asm["_emscripten_bind_Config_set_kSRHR_CL_1"];var _emscripten_bind_btCollisionDispatcher_getNumManifolds_0=Module["_emscripten_bind_btCollisionDispatcher_getNumManifolds_0"]=asm["_emscripten_bind_btCollisionDispatcher_getNumManifolds_0"];var _emscripten_bind_btVehicleRaycaster___destroy___0=Module["_emscripten_bind_btVehicleRaycaster___destroy___0"]=asm["_emscripten_bind_btVehicleRaycaster___destroy___0"];var _emscripten_bind_ClosestRayResultCallback___destroy___0=Module["_emscripten_bind_ClosestRayResultCallback___destroy___0"]=asm["_emscripten_bind_ClosestRayResultCallback___destroy___0"];var _emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0"];var _emscripten_bind_btCylinderShapeX_setMargin_1=Module["_emscripten_bind_btCylinderShapeX_setMargin_1"]=asm["_emscripten_bind_btCylinderShapeX_setMargin_1"];var _emscripten_bind_btQuadWord_w_0=Module["_emscripten_bind_btQuadWord_w_0"]=asm["_emscripten_bind_btQuadWord_w_0"];var _emscripten_bind_Node___destroy___0=Module["_emscripten_bind_Node___destroy___0"]=asm["_emscripten_bind_Node___destroy___0"];var _emscripten_bind_btAxisSweep3___destroy___0=Module["_emscripten_bind_btAxisSweep3___destroy___0"]=asm["_emscripten_bind_btAxisSweep3___destroy___0"];var _emscripten_bind_btDiscreteDynamicsWorld_contactTest_2=Module["_emscripten_bind_btDiscreteDynamicsWorld_contactTest_2"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_contactTest_2"];var _emscripten_bind_btKinematicCharacterController_setUp_1=Module["_emscripten_bind_btKinematicCharacterController_setUp_1"]=asm["_emscripten_bind_btKinematicCharacterController_setUp_1"];var _emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2=Module["_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2"];var _emscripten_bind_btCompoundShape_getNumChildShapes_0=Module["_emscripten_bind_btCompoundShape_getNumChildShapes_0"]=asm["_emscripten_bind_btCompoundShape_getNumChildShapes_0"];var _emscripten_bind_btSoftBodyWorldInfo_set_m_broadphase_1=Module["_emscripten_bind_btSoftBodyWorldInfo_set_m_broadphase_1"]=asm["_emscripten_bind_btSoftBodyWorldInfo_set_m_broadphase_1"];var _emscripten_bind_btGhostObject_btGhostObject_0=Module["_emscripten_bind_btGhostObject_btGhostObject_0"]=asm["_emscripten_bind_btGhostObject_btGhostObject_0"];var _emscripten_bind_btConeShape_btConeShape_2=Module["_emscripten_bind_btConeShape_btConeShape_2"]=asm["_emscripten_bind_btConeShape_btConeShape_2"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1"];var _emscripten_bind_btManifoldPoint_set_m_localPointA_1=Module["_emscripten_bind_btManifoldPoint_set_m_localPointA_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_localPointA_1"];var _emscripten_bind_btCapsuleShapeX_setMargin_1=Module["_emscripten_bind_btCapsuleShapeX_setMargin_1"]=asm["_emscripten_bind_btCapsuleShapeX_setMargin_1"];var _emscripten_bind_btVector3_dot_1=Module["_emscripten_bind_btVector3_dot_1"]=asm["_emscripten_bind_btVector3_dot_1"];var _emscripten_bind_btGhostObject_getUserPointer_0=Module["_emscripten_bind_btGhostObject_getUserPointer_0"]=asm["_emscripten_bind_btGhostObject_getUserPointer_0"];var _emscripten_bind_btVector4_op_add_1=Module["_emscripten_bind_btVector4_op_add_1"]=asm["_emscripten_bind_btVector4_op_add_1"];var _emscripten_bind_btWheelInfo___destroy___0=Module["_emscripten_bind_btWheelInfo___destroy___0"]=asm["_emscripten_bind_btWheelInfo___destroy___0"];var _emscripten_bind_btSoftRigidDynamicsWorld_getSoftBodyArray_0=Module["_emscripten_bind_btSoftRigidDynamicsWorld_getSoftBodyArray_0"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_getSoftBodyArray_0"];var _emscripten_bind_btTransform_setRotation_1=Module["_emscripten_bind_btTransform_setRotation_1"]=asm["_emscripten_bind_btTransform_setRotation_1"];var _emscripten_bind_Config_set_kSHR_1=Module["_emscripten_bind_Config_set_kSHR_1"]=asm["_emscripten_bind_Config_set_kSHR_1"];var _emscripten_bind_btPoint2PointConstraint_enableFeedback_1=Module["_emscripten_bind_btPoint2PointConstraint_enableFeedback_1"]=asm["_emscripten_bind_btPoint2PointConstraint_enableFeedback_1"];var _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1"];var _emscripten_bind_btAxisSweep3_btAxisSweep3_2=Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_2"]=asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_2"];var _emscripten_bind_btAxisSweep3_btAxisSweep3_3=Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_3"]=asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_3"];var _emscripten_bind_btDynamicsWorld___destroy___0=Module["_emscripten_bind_btDynamicsWorld___destroy___0"]=asm["_emscripten_bind_btDynamicsWorld___destroy___0"];var _emscripten_bind_btVector3_setY_1=Module["_emscripten_bind_btVector3_setY_1"]=asm["_emscripten_bind_btVector3_setY_1"];var _emscripten_bind_btAxisSweep3_btAxisSweep3_4=Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_4"]=asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_4"];var _emscripten_bind_btAxisSweep3_btAxisSweep3_5=Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_5"]=asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_5"];var _emscripten_bind_btQuadWord_setX_1=Module["_emscripten_bind_btQuadWord_setX_1"]=asm["_emscripten_bind_btQuadWord_setX_1"];var _emscripten_bind_tMaterialArray___destroy___0=Module["_emscripten_bind_tMaterialArray___destroy___0"]=asm["_emscripten_bind_tMaterialArray___destroy___0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0"];var _emscripten_bind_Config_set_piterations_1=Module["_emscripten_bind_Config_set_piterations_1"]=asm["_emscripten_bind_Config_set_piterations_1"];var _emscripten_bind_btOverlappingPairCache___destroy___0=Module["_emscripten_bind_btOverlappingPairCache___destroy___0"]=asm["_emscripten_bind_btOverlappingPairCache___destroy___0"];var _emscripten_bind_btRigidBody_setUserIndex_1=Module["_emscripten_bind_btRigidBody_setUserIndex_1"]=asm["_emscripten_bind_btRigidBody_setUserIndex_1"];var _emscripten_bind_Material_get_m_kAST_0=Module["_emscripten_bind_Material_get_m_kAST_0"]=asm["_emscripten_bind_Material_get_m_kAST_0"];var _emscripten_bind_btConstraintSetting___destroy___0=Module["_emscripten_bind_btConstraintSetting___destroy___0"]=asm["_emscripten_bind_btConstraintSetting___destroy___0"];var _emscripten_bind_RayResultCallback___destroy___0=Module["_emscripten_bind_RayResultCallback___destroy___0"]=asm["_emscripten_bind_RayResultCallback___destroy___0"];var _emscripten_bind_RaycastInfo_get_m_contactNormalWS_0=Module["_emscripten_bind_RaycastInfo_get_m_contactNormalWS_0"]=asm["_emscripten_bind_RaycastInfo_get_m_contactNormalWS_0"];var _emscripten_bind_btSoftBodyWorldInfo_get_water_density_0=Module["_emscripten_bind_btSoftBodyWorldInfo_get_water_density_0"]=asm["_emscripten_bind_btSoftBodyWorldInfo_get_water_density_0"];var _emscripten_bind_btPersistentManifold_getBody0_0=Module["_emscripten_bind_btPersistentManifold_getBody0_0"]=asm["_emscripten_bind_btPersistentManifold_getBody0_0"];var _emscripten_bind_btConeShapeX_btConeShapeX_2=Module["_emscripten_bind_btConeShapeX_btConeShapeX_2"]=asm["_emscripten_bind_btConeShapeX_btConeShapeX_2"];var _emscripten_bind_btSoftBody_setCcdSweptSphereRadius_1=Module["_emscripten_bind_btSoftBody_setCcdSweptSphereRadius_1"]=asm["_emscripten_bind_btSoftBody_setCcdSweptSphereRadius_1"];var _emscripten_bind_btConeTwistConstraint_enableFeedback_1=Module["_emscripten_bind_btConeTwistConstraint_enableFeedback_1"]=asm["_emscripten_bind_btConeTwistConstraint_enableFeedback_1"];var _emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_0=Module["_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_0"]=asm["_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_0"];var _emscripten_bind_btCapsuleShapeZ_setLocalScaling_1=Module["_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1"]=asm["_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1"];var _emscripten_bind_Config_get_piterations_0=Module["_emscripten_bind_Config_get_piterations_0"]=asm["_emscripten_bind_Config_get_piterations_0"];var _emscripten_bind_btSoftBody_translate_1=Module["_emscripten_bind_btSoftBody_translate_1"]=asm["_emscripten_bind_btSoftBody_translate_1"];var _emscripten_bind_btSliderConstraint_setUpperLinLimit_1=Module["_emscripten_bind_btSliderConstraint_setUpperLinLimit_1"]=asm["_emscripten_bind_btSliderConstraint_setUpperLinLimit_1"];var _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2=Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2"]=asm["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2"];var _emscripten_bind_btVector3_op_mul_1=Module["_emscripten_bind_btVector3_op_mul_1"]=asm["_emscripten_bind_btVector3_op_mul_1"];var _emscripten_bind_btConcaveShape___destroy___0=Module["_emscripten_bind_btConcaveShape___destroy___0"]=asm["_emscripten_bind_btConcaveShape___destroy___0"];var _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4=Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4"]=asm["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4"];var _emscripten_bind_btQuaternion_x_0=Module["_emscripten_bind_btQuaternion_x_0"]=asm["_emscripten_bind_btQuaternion_x_0"];var _emscripten_bind_btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_5=Module["_emscripten_bind_btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_5"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_5"];var _emscripten_bind_Config_set_timescale_1=Module["_emscripten_bind_Config_set_timescale_1"]=asm["_emscripten_bind_Config_set_timescale_1"];var _emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1=Module["_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1"];var _emscripten_bind_btConcaveShape_setLocalScaling_1=Module["_emscripten_bind_btConcaveShape_setLocalScaling_1"]=asm["_emscripten_bind_btConcaveShape_setLocalScaling_1"];var _emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0"];var _emscripten_bind_btConeShapeX_setLocalScaling_1=Module["_emscripten_bind_btConeShapeX_setLocalScaling_1"]=asm["_emscripten_bind_btConeShapeX_setLocalScaling_1"];var _emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1=Module["_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1"]=asm["_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1"];var _emscripten_bind_btSoftBody_appendLink_4=Module["_emscripten_bind_btSoftBody_appendLink_4"]=asm["_emscripten_bind_btSoftBody_appendLink_4"];var _emscripten_bind_btQuaternion_z_0=Module["_emscripten_bind_btQuaternion_z_0"]=asm["_emscripten_bind_btQuaternion_z_0"];var _emscripten_bind_btConvexHullShape_btConvexHullShape_0=Module["_emscripten_bind_btConvexHullShape_btConvexHullShape_0"]=asm["_emscripten_bind_btConvexHullShape_btConvexHullShape_0"];var _emscripten_bind_btRotationalLimitMotor_set_m_maxMotorForce_1=Module["_emscripten_bind_btRotationalLimitMotor_set_m_maxMotorForce_1"]=asm["_emscripten_bind_btRotationalLimitMotor_set_m_maxMotorForce_1"];var _emscripten_bind_btConstraintSetting_get_m_damping_0=Module["_emscripten_bind_btConstraintSetting_get_m_damping_0"]=asm["_emscripten_bind_btConstraintSetting_get_m_damping_0"];var _emscripten_bind_btSoftRigidDynamicsWorld_removeCollisionObject_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_removeCollisionObject_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_removeCollisionObject_1"];var _emscripten_bind_Config_get_kLF_0=Module["_emscripten_bind_Config_get_kLF_0"]=asm["_emscripten_bind_Config_get_kLF_0"];var _emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_3=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_3"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_3"];var _emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_2=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_2"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_2"];var _emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_1"];var _emscripten_bind_btGhostObject_setContactProcessingThreshold_1=Module["_emscripten_bind_btGhostObject_setContactProcessingThreshold_1"]=asm["_emscripten_bind_btGhostObject_setContactProcessingThreshold_1"];var _emscripten_bind_btSoftBodyHelpers_CreateFromConvexHull_4=Module["_emscripten_bind_btSoftBodyHelpers_CreateFromConvexHull_4"]=asm["_emscripten_bind_btSoftBodyHelpers_CreateFromConvexHull_4"];var _emscripten_bind_btCollisionWorld_getBroadphase_0=Module["_emscripten_bind_btCollisionWorld_getBroadphase_0"]=asm["_emscripten_bind_btCollisionWorld_getBroadphase_0"];var _emscripten_bind_btRaycastVehicle_updateWheelTransform_2=Module["_emscripten_bind_btRaycastVehicle_updateWheelTransform_2"]=asm["_emscripten_bind_btRaycastVehicle_updateWheelTransform_2"];var _emscripten_bind_btDispatcherInfo_set_m_stepCount_1=Module["_emscripten_bind_btDispatcherInfo_set_m_stepCount_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_stepCount_1"];var _emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1=Module["_emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1"]=asm["_emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1"];var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_2=Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2"]=asm["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2"];var _emscripten_bind_Material_set_m_flags_1=Module["_emscripten_bind_Material_set_m_flags_1"]=asm["_emscripten_bind_Material_set_m_flags_1"];var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_0=Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0"]=asm["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0"];var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_1=Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1"]=asm["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1"];var _emscripten_bind_Config_get_viterations_0=Module["_emscripten_bind_Config_get_viterations_0"]=asm["_emscripten_bind_Config_get_viterations_0"];var _emscripten_bind_btKinematicCharacterController_canJump_0=Module["_emscripten_bind_btKinematicCharacterController_canJump_0"]=asm["_emscripten_bind_btKinematicCharacterController_canJump_0"];var _emscripten_bind_btSoftBodyArray_at_1=Module["_emscripten_bind_btSoftBodyArray_at_1"]=asm["_emscripten_bind_btSoftBodyArray_at_1"];var _emscripten_bind_btPairCachingGhostObject_setUserIndex_1=Module["_emscripten_bind_btPairCachingGhostObject_setUserIndex_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setUserIndex_1"];var _emscripten_bind_btRigidBody_isActive_0=Module["_emscripten_bind_btRigidBody_isActive_0"]=asm["_emscripten_bind_btRigidBody_isActive_0"];var _emscripten_bind_btRaycastVehicle_btRaycastVehicle_3=Module["_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3"]=asm["_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3"];var _emscripten_bind_btMotionState_setWorldTransform_1=Module["_emscripten_bind_btMotionState_setWorldTransform_1"]=asm["_emscripten_bind_btMotionState_setWorldTransform_1"];var _emscripten_bind_btSoftRigidDynamicsWorld_getDispatcher_0=Module["_emscripten_bind_btSoftRigidDynamicsWorld_getDispatcher_0"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_getDispatcher_0"];var _emscripten_bind_btCylinderShape_setLocalScaling_1=Module["_emscripten_bind_btCylinderShape_setLocalScaling_1"]=asm["_emscripten_bind_btCylinderShape_setLocalScaling_1"];var _emscripten_bind_btCollisionWorld_rayTest_3=Module["_emscripten_bind_btCollisionWorld_rayTest_3"]=asm["_emscripten_bind_btCollisionWorld_rayTest_3"];var _emscripten_bind_btCompoundShape_calculateLocalInertia_2=Module["_emscripten_bind_btCompoundShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btCompoundShape_calculateLocalInertia_2"];var _emscripten_bind_btCollisionWorld_getDispatchInfo_0=Module["_emscripten_bind_btCollisionWorld_getDispatchInfo_0"]=asm["_emscripten_bind_btCollisionWorld_getDispatchInfo_0"];var _emscripten_bind_btRigidBody_setCollisionShape_1=Module["_emscripten_bind_btRigidBody_setCollisionShape_1"]=asm["_emscripten_bind_btRigidBody_setCollisionShape_1"];var _emscripten_bind_btSoftBody_appendTetra_5=Module["_emscripten_bind_btSoftBody_appendTetra_5"]=asm["_emscripten_bind_btSoftBody_appendTetra_5"];var _emscripten_bind_btConeShapeX___destroy___0=Module["_emscripten_bind_btConeShapeX___destroy___0"]=asm["_emscripten_bind_btConeShapeX___destroy___0"];var _emscripten_bind_btCollisionObject_getCollisionFlags_0=Module["_emscripten_bind_btCollisionObject_getCollisionFlags_0"]=asm["_emscripten_bind_btCollisionObject_getCollisionFlags_0"];var _emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1=Module["_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1"];var _emscripten_bind_btConeTwistConstraint_enableMotor_1=Module["_emscripten_bind_btConeTwistConstraint_enableMotor_1"]=asm["_emscripten_bind_btConeTwistConstraint_enableMotor_1"];var _emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1=Module["_emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1"]=asm["_emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1"];var _emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1=Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1"]=asm["_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1"];var _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0=Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"]=asm["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"];var _emscripten_bind_btPairCachingGhostObject_setRestitution_1=Module["_emscripten_bind_btPairCachingGhostObject_setRestitution_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setRestitution_1"];var _emscripten_bind_Config_set_kAHR_1=Module["_emscripten_bind_Config_set_kAHR_1"]=asm["_emscripten_bind_Config_set_kAHR_1"];var _emscripten_bind_btHeightfieldTerrainShape_getMargin_0=Module["_emscripten_bind_btHeightfieldTerrainShape_getMargin_0"]=asm["_emscripten_bind_btHeightfieldTerrainShape_getMargin_0"];var _emscripten_bind_ConvexResultCallback___destroy___0=Module["_emscripten_bind_ConvexResultCallback___destroy___0"]=asm["_emscripten_bind_ConvexResultCallback___destroy___0"];var _emscripten_bind_btSoftRigidDynamicsWorld_rayTest_3=Module["_emscripten_bind_btSoftRigidDynamicsWorld_rayTest_3"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_rayTest_3"];var _emscripten_bind_Config_get_kSRHR_CL_0=Module["_emscripten_bind_Config_get_kSRHR_CL_0"]=asm["_emscripten_bind_Config_get_kSRHR_CL_0"];var _emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0=Module["_emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0"]=asm["_emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1"];var _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3=Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3"]=asm["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3"];var _emscripten_bind_btCollisionObject_setContactProcessingThreshold_1=Module["_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1"]=asm["_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1"];var _emscripten_bind_btCompoundShape___destroy___0=Module["_emscripten_bind_btCompoundShape___destroy___0"]=asm["_emscripten_bind_btCompoundShape___destroy___0"];var _emscripten_bind_btHingeConstraint_setMotorTarget_2=Module["_emscripten_bind_btHingeConstraint_setMotorTarget_2"]=asm["_emscripten_bind_btHingeConstraint_setMotorTarget_2"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0"];var _emscripten_bind_LocalConvexResult___destroy___0=Module["_emscripten_bind_LocalConvexResult___destroy___0"]=asm["_emscripten_bind_LocalConvexResult___destroy___0"];var _emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0=Module["_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0"]=asm["_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0"];var _emscripten_bind_btSoftBodyHelpers_CreateRope_5=Module["_emscripten_bind_btSoftBodyHelpers_CreateRope_5"]=asm["_emscripten_bind_btSoftBodyHelpers_CreateRope_5"];var _emscripten_bind_btRigidBody_getCollisionFlags_0=Module["_emscripten_bind_btRigidBody_getCollisionFlags_0"]=asm["_emscripten_bind_btRigidBody_getCollisionFlags_0"];var _emscripten_bind_btCollisionShape_setLocalScaling_1=Module["_emscripten_bind_btCollisionShape_setLocalScaling_1"]=asm["_emscripten_bind_btCollisionShape_setLocalScaling_1"];var _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0"];var _emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0=Module["_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0"];var _emscripten_bind_btMatrix3x3_setEulerZYX_3=Module["_emscripten_bind_btMatrix3x3_setEulerZYX_3"]=asm["_emscripten_bind_btMatrix3x3_setEulerZYX_3"];var _emscripten_bind_btSoftBody_getTotalMass_0=Module["_emscripten_bind_btSoftBody_getTotalMass_0"]=asm["_emscripten_bind_btSoftBody_getTotalMass_0"];var _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0=Module["_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0"];var _emscripten_bind_btRigidBody_getUserPointer_0=Module["_emscripten_bind_btRigidBody_getUserPointer_0"]=asm["_emscripten_bind_btRigidBody_getUserPointer_0"];var _emscripten_bind_Config_get_kSHR_0=Module["_emscripten_bind_Config_get_kSHR_0"]=asm["_emscripten_bind_Config_get_kSHR_0"];var _emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2=Module["_emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2"];var _emscripten_bind_btRigidBody_setMotionState_1=Module["_emscripten_bind_btRigidBody_setMotionState_1"]=asm["_emscripten_bind_btRigidBody_setMotionState_1"];var _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0=Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0"]=asm["_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0"];var _emscripten_bind_btCollisionWorld_getDispatcher_0=Module["_emscripten_bind_btCollisionWorld_getDispatcher_0"]=asm["_emscripten_bind_btCollisionWorld_getDispatcher_0"];var _emscripten_bind_btVector4_dot_1=Module["_emscripten_bind_btVector4_dot_1"]=asm["_emscripten_bind_btVector4_dot_1"];var _emscripten_bind_btSoftBody_forceActivationState_1=Module["_emscripten_bind_btSoftBody_forceActivationState_1"]=asm["_emscripten_bind_btSoftBody_forceActivationState_1"];var _emscripten_bind_btCollisionObject_setRollingFriction_1=Module["_emscripten_bind_btCollisionObject_setRollingFriction_1"]=asm["_emscripten_bind_btCollisionObject_setRollingFriction_1"];var _emscripten_bind_Config_set_kSK_SPLT_CL_1=Module["_emscripten_bind_Config_set_kSK_SPLT_CL_1"]=asm["_emscripten_bind_Config_set_kSK_SPLT_CL_1"];var _emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1=Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1"]=asm["_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1"];var _emscripten_bind_btPairCachingGhostObject_getCollisionShape_0=Module["_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _emscripten_bind_btCylinderShapeX_getMargin_0=Module["_emscripten_bind_btCylinderShapeX_getMargin_0"]=asm["_emscripten_bind_btCylinderShapeX_getMargin_0"];var _emscripten_bind_btRigidBody_setDamping_2=Module["_emscripten_bind_btRigidBody_setDamping_2"]=asm["_emscripten_bind_btRigidBody_setDamping_2"];var _emscripten_bind_btDynamicsWorld_getDispatcher_0=Module["_emscripten_bind_btDynamicsWorld_getDispatcher_0"]=asm["_emscripten_bind_btDynamicsWorld_getDispatcher_0"];var _emscripten_bind_btGhostObject_setCollisionFlags_1=Module["_emscripten_bind_btGhostObject_setCollisionFlags_1"]=asm["_emscripten_bind_btGhostObject_setCollisionFlags_1"];var _emscripten_bind_btMatrix3x3_getRotation_1=Module["_emscripten_bind_btMatrix3x3_getRotation_1"]=asm["_emscripten_bind_btMatrix3x3_getRotation_1"];var _emscripten_bind_btWheelInfo_set_m_engineForce_1=Module["_emscripten_bind_btWheelInfo_set_m_engineForce_1"]=asm["_emscripten_bind_btWheelInfo_set_m_engineForce_1"];var _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1=Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1"]=asm["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1"];var _emscripten_bind_btPersistentManifold_getNumContacts_0=Module["_emscripten_bind_btPersistentManifold_getNumContacts_0"]=asm["_emscripten_bind_btPersistentManifold_getNumContacts_0"];var _emscripten_bind_btCylinderShapeX_setLocalScaling_1=Module["_emscripten_bind_btCylinderShapeX_setLocalScaling_1"]=asm["_emscripten_bind_btCylinderShapeX_setLocalScaling_1"];var _emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0=Module["_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0"]=asm["_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0"];var _emscripten_bind_btSoftBodyHelpers_btSoftBodyHelpers_0=Module["_emscripten_bind_btSoftBodyHelpers_btSoftBodyHelpers_0"]=asm["_emscripten_bind_btSoftBodyHelpers_btSoftBodyHelpers_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0"];var _emscripten_bind_btCompoundShape_setLocalScaling_1=Module["_emscripten_bind_btCompoundShape_setLocalScaling_1"]=asm["_emscripten_bind_btCompoundShape_setLocalScaling_1"];var _emscripten_bind_btOverlappingPairCallback___destroy___0=Module["_emscripten_bind_btOverlappingPairCallback___destroy___0"]=asm["_emscripten_bind_btOverlappingPairCallback___destroy___0"];var _emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0=Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0"];var _emscripten_bind_tNodeArray___destroy___0=Module["_emscripten_bind_tNodeArray___destroy___0"]=asm["_emscripten_bind_tNodeArray___destroy___0"];var _emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1=Module["_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1"];var _emscripten_bind_btHingeConstraint_enableAngularMotor_3=Module["_emscripten_bind_btHingeConstraint_enableAngularMotor_3"]=asm["_emscripten_bind_btHingeConstraint_enableAngularMotor_3"];var _emscripten_bind_btRigidBody_setContactProcessingThreshold_1=Module["_emscripten_bind_btRigidBody_setContactProcessingThreshold_1"]=asm["_emscripten_bind_btRigidBody_setContactProcessingThreshold_1"];var _emscripten_bind_btRigidBody_getLinearVelocity_0=Module["_emscripten_bind_btRigidBody_getLinearVelocity_0"]=asm["_emscripten_bind_btRigidBody_getLinearVelocity_0"];var _emscripten_bind_btRigidBody_applyImpulse_2=Module["_emscripten_bind_btRigidBody_applyImpulse_2"]=asm["_emscripten_bind_btRigidBody_applyImpulse_2"];var _emscripten_bind_btConcaveShape_calculateLocalInertia_2=Module["_emscripten_bind_btConcaveShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConcaveShape_calculateLocalInertia_2"];var _emscripten_bind_RaycastInfo_get_m_groundObject_0=Module["_emscripten_bind_RaycastInfo_get_m_groundObject_0"]=asm["_emscripten_bind_RaycastInfo_get_m_groundObject_0"];var _emscripten_bind_btRigidBody_setWorldTransform_1=Module["_emscripten_bind_btRigidBody_setWorldTransform_1"]=asm["_emscripten_bind_btRigidBody_setWorldTransform_1"];var _emscripten_bind_btRigidBody_setAngularVelocity_1=Module["_emscripten_bind_btRigidBody_setAngularVelocity_1"]=asm["_emscripten_bind_btRigidBody_setAngularVelocity_1"];var _emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3=Module["_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3"];var _emscripten_bind_Config_get_kDP_0=Module["_emscripten_bind_Config_get_kDP_0"]=asm["_emscripten_bind_Config_get_kDP_0"];var _emscripten_bind_btConvexShape_setLocalScaling_1=Module["_emscripten_bind_btConvexShape_setLocalScaling_1"]=asm["_emscripten_bind_btConvexShape_setLocalScaling_1"];var _emscripten_bind_Config_get_collisions_0=Module["_emscripten_bind_Config_get_collisions_0"]=asm["_emscripten_bind_Config_get_collisions_0"];var _emscripten_bind_Node_get_m_n_0=Module["_emscripten_bind_Node_get_m_n_0"]=asm["_emscripten_bind_Node_get_m_n_0"];var _emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2=Module["_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2"];var ___udivdi3=Module["___udivdi3"]=asm["___udivdi3"];var _emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_0=Module["_emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_0"]=asm["_emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_0"];var _emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_1=Module["_emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_1"]=asm["_emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_1"];var _emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1=Module["_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1"];var _emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1=Module["_emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1"]=asm["_emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1"];var _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0"];var _emscripten_bind_RayResultCallback_hasHit_0=Module["_emscripten_bind_RayResultCallback_hasHit_0"]=asm["_emscripten_bind_RayResultCallback_hasHit_0"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var _emscripten_bind_Config___destroy___0=Module["_emscripten_bind_Config___destroy___0"]=asm["_emscripten_bind_Config___destroy___0"];var _emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1=Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1"];var _emscripten_bind_btRaycastVehicle_getWheelTransformWS_1=Module["_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1"]=asm["_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1"];var _emscripten_bind_btQuaternion_normalize_0=Module["_emscripten_bind_btQuaternion_normalize_0"]=asm["_emscripten_bind_btQuaternion_normalize_0"];var _emscripten_bind_btQuaternion___destroy___0=Module["_emscripten_bind_btQuaternion___destroy___0"]=asm["_emscripten_bind_btQuaternion___destroy___0"];var _emscripten_bind_btWheelInfo_get_m_frictionSlip_0=Module["_emscripten_bind_btWheelInfo_get_m_frictionSlip_0"]=asm["_emscripten_bind_btWheelInfo_get_m_frictionSlip_0"];var _emscripten_bind_btConeShapeZ_setLocalScaling_1=Module["_emscripten_bind_btConeShapeZ_setLocalScaling_1"]=asm["_emscripten_bind_btConeShapeZ_setLocalScaling_1"];var _emscripten_bind_btSoftBodyWorldInfo_get_m_dispatcher_0=Module["_emscripten_bind_btSoftBodyWorldInfo_get_m_dispatcher_0"]=asm["_emscripten_bind_btSoftBodyWorldInfo_get_m_dispatcher_0"];var _emscripten_bind_btGeneric6DofSpringConstraint___destroy___0=Module["_emscripten_bind_btGeneric6DofSpringConstraint___destroy___0"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint___destroy___0"];var _emscripten_bind_btRaycastVehicle_getNumWheels_0=Module["_emscripten_bind_btRaycastVehicle_getNumWheels_0"]=asm["_emscripten_bind_btRaycastVehicle_getNumWheels_0"];var _emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1=Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1"];var _emscripten_bind_Material_set_m_kAST_1=Module["_emscripten_bind_Material_set_m_kAST_1"]=asm["_emscripten_bind_Material_set_m_kAST_1"];var _emscripten_bind_btGhostObject_setRollingFriction_1=Module["_emscripten_bind_btGhostObject_setRollingFriction_1"]=asm["_emscripten_bind_btGhostObject_setRollingFriction_1"];var _emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1=Module["_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1"]=asm["_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1"];var ___muldi3=Module["___muldi3"]=asm["___muldi3"];var _emscripten_bind_btSoftBodyArray___destroy___0=Module["_emscripten_bind_btSoftBodyArray___destroy___0"]=asm["_emscripten_bind_btSoftBodyArray___destroy___0"];var _emscripten_bind_btCompoundShape_btCompoundShape_0=Module["_emscripten_bind_btCompoundShape_btCompoundShape_0"]=asm["_emscripten_bind_btCompoundShape_btCompoundShape_0"];var _emscripten_bind_btCompoundShape_btCompoundShape_1=Module["_emscripten_bind_btCompoundShape_btCompoundShape_1"]=asm["_emscripten_bind_btCompoundShape_btCompoundShape_1"];var _emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1=Module["_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1"]=asm["_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1"];var _emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2=Module["_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2"]=asm["_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2"];var _emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1=Module["_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1"];var _emscripten_bind_btSoftBody_checkLink_2=Module["_emscripten_bind_btSoftBody_checkLink_2"]=asm["_emscripten_bind_btSoftBody_checkLink_2"];var _emscripten_bind_btSoftBody_getCollisionShape_0=Module["_emscripten_bind_btSoftBody_getCollisionShape_0"]=asm["_emscripten_bind_btSoftBody_getCollisionShape_0"];var _emscripten_bind_Config_get_kDG_0=Module["_emscripten_bind_Config_get_kDG_0"]=asm["_emscripten_bind_Config_get_kDG_0"];var _emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2=Module["_emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2"]=asm["_emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2"];var _emscripten_bind_Node_get_m_x_0=Module["_emscripten_bind_Node_get_m_x_0"]=asm["_emscripten_bind_Node_get_m_x_0"];var _emscripten_bind_btCollisionObject_getWorldTransform_0=Module["_emscripten_bind_btCollisionObject_getWorldTransform_0"]=asm["_emscripten_bind_btCollisionObject_getWorldTransform_0"];var _emscripten_bind_ClosestRayResultCallback_hasHit_0=Module["_emscripten_bind_ClosestRayResultCallback_hasHit_0"]=asm["_emscripten_bind_ClosestRayResultCallback_hasHit_0"];var _emscripten_bind_btCompoundShape_addChildShape_2=Module["_emscripten_bind_btCompoundShape_addChildShape_2"]=asm["_emscripten_bind_btCompoundShape_addChildShape_2"];var _emscripten_bind_btDispatcher___destroy___0=Module["_emscripten_bind_btDispatcher___destroy___0"]=asm["_emscripten_bind_btDispatcher___destroy___0"];var _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0=Module["_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0"];var _llvm_bswap_i16=Module["_llvm_bswap_i16"]=asm["_llvm_bswap_i16"];var _emscripten_bind_btDiscreteDynamicsWorld___destroy___0=Module["_emscripten_bind_btDiscreteDynamicsWorld___destroy___0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld___destroy___0"];var _emscripten_bind_btConvexShape___destroy___0=Module["_emscripten_bind_btConvexShape___destroy___0"]=asm["_emscripten_bind_btConvexShape___destroy___0"];var _memmove=Module["_memmove"]=asm["_memmove"];var _emscripten_bind_btWheelInfo_set_m_worldTransform_1=Module["_emscripten_bind_btWheelInfo_set_m_worldTransform_1"]=asm["_emscripten_bind_btWheelInfo_set_m_worldTransform_1"];var _emscripten_bind_btCapsuleShapeX_setLocalScaling_1=Module["_emscripten_bind_btCapsuleShapeX_setLocalScaling_1"]=asm["_emscripten_bind_btCapsuleShapeX_setLocalScaling_1"];var _emscripten_bind_btSoftBody_getCollisionFlags_0=Module["_emscripten_bind_btSoftBody_getCollisionFlags_0"]=asm["_emscripten_bind_btSoftBody_getCollisionFlags_0"];var _emscripten_bind_btCollisionObject_setRestitution_1=Module["_emscripten_bind_btCollisionObject_setRestitution_1"]=asm["_emscripten_bind_btCollisionObject_setRestitution_1"];var _emscripten_bind_btRigidBody_applyCentralForce_1=Module["_emscripten_bind_btRigidBody_applyCentralForce_1"]=asm["_emscripten_bind_btRigidBody_applyCentralForce_1"];var _emscripten_bind_btSoftBodyWorldInfo_set_m_gravity_1=Module["_emscripten_bind_btSoftBodyWorldInfo_set_m_gravity_1"]=asm["_emscripten_bind_btSoftBodyWorldInfo_set_m_gravity_1"];var _emscripten_bind_LocalConvexResult_get_m_hitFraction_0=Module["_emscripten_bind_LocalConvexResult_get_m_hitFraction_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_hitFraction_0"];var _emscripten_bind_btDispatcherInfo_get_m_enableSPU_0=Module["_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0"];var _emscripten_bind_btRotationalLimitMotor_needApplyTorques_0=Module["_emscripten_bind_btRotationalLimitMotor_needApplyTorques_0"]=asm["_emscripten_bind_btRotationalLimitMotor_needApplyTorques_0"];var _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0=Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0"]=asm["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0"];var _emscripten_bind_btTransform_getRotation_0=Module["_emscripten_bind_btTransform_getRotation_0"]=asm["_emscripten_bind_btTransform_getRotation_0"];var _emscripten_bind_Config_set_kSKHR_CL_1=Module["_emscripten_bind_Config_set_kSKHR_CL_1"]=asm["_emscripten_bind_Config_set_kSKHR_CL_1"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_6=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_6"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_6"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_7=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_7"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_7"];var _emscripten_bind_btCapsuleShapeZ_getMargin_0=Module["_emscripten_bind_btCapsuleShapeZ_getMargin_0"]=asm["_emscripten_bind_btCapsuleShapeZ_getMargin_0"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_5=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_5"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_5"];var _emscripten_bind_btSoftBodyWorldInfo_get_m_maxDisplacement_0=Module["_emscripten_bind_btSoftBodyWorldInfo_get_m_maxDisplacement_0"]=asm["_emscripten_bind_btSoftBodyWorldInfo_get_m_maxDisplacement_0"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_3=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_3"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_3"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1"];var _emscripten_bind_btSoftBody_setWorldTransform_1=Module["_emscripten_bind_btSoftBody_setWorldTransform_1"]=asm["_emscripten_bind_btSoftBody_setWorldTransform_1"];var _emscripten_bind_btBoxShape_setMargin_1=Module["_emscripten_bind_btBoxShape_setMargin_1"]=asm["_emscripten_bind_btBoxShape_setMargin_1"];var _emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0"];var _emscripten_bind_Config_get_kSK_SPLT_CL_0=Module["_emscripten_bind_Config_get_kSK_SPLT_CL_0"]=asm["_emscripten_bind_Config_get_kSK_SPLT_CL_0"];var _emscripten_bind_btTypedConstraint___destroy___0=Module["_emscripten_bind_btTypedConstraint___destroy___0"]=asm["_emscripten_bind_btTypedConstraint___destroy___0"];var _emscripten_bind_btCylinderShapeX_btCylinderShapeX_1=Module["_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1"]=asm["_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1"];var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2=Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2"];var _emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1=Module["_emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1"];var _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3"];var _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1"];var _emscripten_bind_Config_set_collisions_1=Module["_emscripten_bind_Config_set_collisions_1"]=asm["_emscripten_bind_Config_set_collisions_1"];var _emscripten_bind_btQuaternion_btQuaternion_4=Module["_emscripten_bind_btQuaternion_btQuaternion_4"]=asm["_emscripten_bind_btQuaternion_btQuaternion_4"];var _emscripten_bind_btSoftRigidDynamicsWorld_getBroadphase_0=Module["_emscripten_bind_btSoftRigidDynamicsWorld_getBroadphase_0"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_getBroadphase_0"];var _emscripten_bind_btDiscreteDynamicsWorld_removeAction_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_removeAction_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_removeAction_1"];var _emscripten_bind_btSphereShape_btSphereShape_1=Module["_emscripten_bind_btSphereShape_btSphereShape_1"]=asm["_emscripten_bind_btSphereShape_btSphereShape_1"];var _emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0=Module["_emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0"]=asm["_emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0"];var _emscripten_bind_btQuaternion_y_0=Module["_emscripten_bind_btQuaternion_y_0"]=asm["_emscripten_bind_btQuaternion_y_0"];var _emscripten_bind_btCollisionWorld_addCollisionObject_1=Module["_emscripten_bind_btCollisionWorld_addCollisionObject_1"]=asm["_emscripten_bind_btCollisionWorld_addCollisionObject_1"];var _emscripten_bind_btCollisionWorld_addCollisionObject_2=Module["_emscripten_bind_btCollisionWorld_addCollisionObject_2"]=asm["_emscripten_bind_btCollisionWorld_addCollisionObject_2"];var _emscripten_bind_btCollisionWorld_addCollisionObject_3=Module["_emscripten_bind_btCollisionWorld_addCollisionObject_3"]=asm["_emscripten_bind_btCollisionWorld_addCollisionObject_3"];var _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1"];var _emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1=Module["_emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1"]=asm["_emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1"];var _emscripten_bind_btSoftBodyHelpers_CreateEllipsoid_4=Module["_emscripten_bind_btSoftBodyHelpers_CreateEllipsoid_4"]=asm["_emscripten_bind_btSoftBodyHelpers_CreateEllipsoid_4"];var _emscripten_bind_RaycastInfo_get_m_isInContact_0=Module["_emscripten_bind_RaycastInfo_get_m_isInContact_0"]=asm["_emscripten_bind_RaycastInfo_get_m_isInContact_0"];var _emscripten_bind_Config_set_kKHR_1=Module["_emscripten_bind_Config_set_kKHR_1"]=asm["_emscripten_bind_Config_set_kKHR_1"];var _emscripten_bind_btHeightfieldTerrainShape_setMargin_1=Module["_emscripten_bind_btHeightfieldTerrainShape_setMargin_1"]=asm["_emscripten_bind_btHeightfieldTerrainShape_setMargin_1"];var _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0"];var _emscripten_bind_btCapsuleShape_setMargin_1=Module["_emscripten_bind_btCapsuleShape_setMargin_1"]=asm["_emscripten_bind_btCapsuleShape_setMargin_1"];var _emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1=Module["_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1"]=asm["_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1"];var _emscripten_bind_btDynamicsWorld_contactTest_2=Module["_emscripten_bind_btDynamicsWorld_contactTest_2"]=asm["_emscripten_bind_btDynamicsWorld_contactTest_2"];var _emscripten_bind_btCollisionObject_setUserPointer_1=Module["_emscripten_bind_btCollisionObject_setUserPointer_1"]=asm["_emscripten_bind_btCollisionObject_setUserPointer_1"];var _emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0=Module["_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"]=asm["_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"];var _emscripten_bind_btActionInterface___destroy___0=Module["_emscripten_bind_btActionInterface___destroy___0"]=asm["_emscripten_bind_btActionInterface___destroy___0"];var _emscripten_bind_btSoftBody_generateClusters_2=Module["_emscripten_bind_btSoftBody_generateClusters_2"]=asm["_emscripten_bind_btSoftBody_generateClusters_2"];var _emscripten_bind_btDefaultMotionState_setWorldTransform_1=Module["_emscripten_bind_btDefaultMotionState_setWorldTransform_1"]=asm["_emscripten_bind_btDefaultMotionState_setWorldTransform_1"];var _emscripten_bind_btSoftBody_generateClusters_1=Module["_emscripten_bind_btSoftBody_generateClusters_1"]=asm["_emscripten_bind_btSoftBody_generateClusters_1"];var _emscripten_bind_RayResultCallback_get_m_collisionObject_0=Module["_emscripten_bind_RayResultCallback_get_m_collisionObject_0"]=asm["_emscripten_bind_RayResultCallback_get_m_collisionObject_0"];var _emscripten_bind_btPoint2PointConstraint_getPivotInA_0=Module["_emscripten_bind_btPoint2PointConstraint_getPivotInA_0"]=asm["_emscripten_bind_btPoint2PointConstraint_getPivotInA_0"];var _emscripten_bind_Config_get_kAHR_0=Module["_emscripten_bind_Config_get_kAHR_0"]=asm["_emscripten_bind_Config_get_kAHR_0"];var _emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2=Module["_emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2"];var _emscripten_bind_btCylinderShape_calculateLocalInertia_2=Module["_emscripten_bind_btCylinderShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btCylinderShape_calculateLocalInertia_2"];var _emscripten_bind_btCompoundShape_setMargin_1=Module["_emscripten_bind_btCompoundShape_setMargin_1"]=asm["_emscripten_bind_btCompoundShape_setMargin_1"];var _emscripten_bind_ClosestConvexResultCallback___destroy___0=Module["_emscripten_bind_ClosestConvexResultCallback___destroy___0"]=asm["_emscripten_bind_ClosestConvexResultCallback___destroy___0"];var _emscripten_bind_btDynamicsWorld_addCollisionObject_1=Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_1"]=asm["_emscripten_bind_btDynamicsWorld_addCollisionObject_1"];var _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0"];var ___cxa_can_catch=Module["___cxa_can_catch"]=asm["___cxa_can_catch"];var _emscripten_bind_btDynamicsWorld_addCollisionObject_2=Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_2"]=asm["_emscripten_bind_btDynamicsWorld_addCollisionObject_2"];var _emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0"];var _emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1=Module["_emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1"];var _emscripten_bind_btHeightfieldTerrainShape___destroy___0=Module["_emscripten_bind_btHeightfieldTerrainShape___destroy___0"]=asm["_emscripten_bind_btHeightfieldTerrainShape___destroy___0"];var _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0=Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0"]=asm["_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0"];var _emscripten_bind_Config_get_kVC_0=Module["_emscripten_bind_Config_get_kVC_0"]=asm["_emscripten_bind_Config_get_kVC_0"];var _emscripten_bind_btVector4_op_mul_1=Module["_emscripten_bind_btVector4_op_mul_1"]=asm["_emscripten_bind_btVector4_op_mul_1"];var _emscripten_bind_btCylinderShape_btCylinderShape_1=Module["_emscripten_bind_btCylinderShape_btCylinderShape_1"]=asm["_emscripten_bind_btCylinderShape_btCylinderShape_1"];var _emscripten_bind_btPairCachingGhostObject_setActivationState_1=Module["_emscripten_bind_btPairCachingGhostObject_setActivationState_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setActivationState_1"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1"];var _emscripten_bind_Material_get_m_kVST_0=Module["_emscripten_bind_Material_get_m_kVST_0"]=asm["_emscripten_bind_Material_get_m_kVST_0"];var _emscripten_bind_Config_set_kVCF_1=Module["_emscripten_bind_Config_set_kVCF_1"]=asm["_emscripten_bind_Config_set_kVCF_1"];var _emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_3=Module["_emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_3"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_3"];var _emscripten_bind_btGhostObject_getUserIndex_0=Module["_emscripten_bind_btGhostObject_getUserIndex_0"]=asm["_emscripten_bind_btGhostObject_getUserIndex_0"];var _emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_1"];var _emscripten_bind_btVector3___destroy___0=Module["_emscripten_bind_btVector3___destroy___0"]=asm["_emscripten_bind_btVector3___destroy___0"];var _emscripten_bind_RaycastInfo___destroy___0=Module["_emscripten_bind_RaycastInfo___destroy___0"]=asm["_emscripten_bind_RaycastInfo___destroy___0"];var _emscripten_bind_btRigidBody_setAngularFactor_1=Module["_emscripten_bind_btRigidBody_setAngularFactor_1"]=asm["_emscripten_bind_btRigidBody_setAngularFactor_1"];var _emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2=Module["_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2"]=asm["_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2"];var _emscripten_bind_btConeShapeZ_btConeShapeZ_2=Module["_emscripten_bind_btConeShapeZ_btConeShapeZ_2"]=asm["_emscripten_bind_btConeShapeZ_btConeShapeZ_2"];var _emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1=Module["_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1"]=asm["_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1"];var _emscripten_bind_btMotionState_getWorldTransform_1=Module["_emscripten_bind_btMotionState_getWorldTransform_1"]=asm["_emscripten_bind_btMotionState_getWorldTransform_1"];var _emscripten_bind_btDynamicsWorld_getSolverInfo_0=Module["_emscripten_bind_btDynamicsWorld_getSolverInfo_0"]=asm["_emscripten_bind_btDynamicsWorld_getSolverInfo_0"];var _emscripten_bind_btRotationalLimitMotor_get_m_enableMotor_0=Module["_emscripten_bind_btRotationalLimitMotor_get_m_enableMotor_0"]=asm["_emscripten_bind_btRotationalLimitMotor_get_m_enableMotor_0"];var _emscripten_bind_Config_get_kMT_0=Module["_emscripten_bind_Config_get_kMT_0"]=asm["_emscripten_bind_Config_get_kMT_0"];var _emscripten_bind_btDynamicsWorld_getBroadphase_0=Module["_emscripten_bind_btDynamicsWorld_getBroadphase_0"]=asm["_emscripten_bind_btDynamicsWorld_getBroadphase_0"];var _emscripten_bind_btSphereShape_getMargin_0=Module["_emscripten_bind_btSphereShape_getMargin_0"]=asm["_emscripten_bind_btSphereShape_getMargin_0"];var _emscripten_bind_Config_get_timescale_0=Module["_emscripten_bind_Config_get_timescale_0"]=asm["_emscripten_bind_Config_get_timescale_0"];var _emscripten_bind_btVector3_x_0=Module["_emscripten_bind_btVector3_x_0"]=asm["_emscripten_bind_btVector3_x_0"];var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=asm["___cxa_is_pointer_type"];var _emscripten_bind_btConvexTriangleMeshShape___destroy___0=Module["_emscripten_bind_btConvexTriangleMeshShape___destroy___0"]=asm["_emscripten_bind_btConvexTriangleMeshShape___destroy___0"];var _emscripten_bind_btCollisionObject_getCollisionShape_0=Module["_emscripten_bind_btCollisionObject_getCollisionShape_0"]=asm["_emscripten_bind_btCollisionObject_getCollisionShape_0"];var _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4=Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"];var _emscripten_bind_btManifoldPoint___destroy___0=Module["_emscripten_bind_btManifoldPoint___destroy___0"]=asm["_emscripten_bind_btManifoldPoint___destroy___0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1"];var _emscripten_bind_btVector4_length_0=Module["_emscripten_bind_btVector4_length_0"]=asm["_emscripten_bind_btVector4_length_0"];var _emscripten_bind_btGhostObject_setUserIndex_1=Module["_emscripten_bind_btGhostObject_setUserIndex_1"]=asm["_emscripten_bind_btGhostObject_setUserIndex_1"];var _emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1=Module["_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1"]=asm["_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1"];var _emscripten_bind_btGhostObject_setRestitution_1=Module["_emscripten_bind_btGhostObject_setRestitution_1"]=asm["_emscripten_bind_btGhostObject_setRestitution_1"];var _emscripten_bind_btConeTwistConstraint_setAngularOnly_1=Module["_emscripten_bind_btConeTwistConstraint_setAngularOnly_1"]=asm["_emscripten_bind_btConeTwistConstraint_setAngularOnly_1"];var _emscripten_bind_btCollisionObject_setFriction_1=Module["_emscripten_bind_btCollisionObject_setFriction_1"]=asm["_emscripten_bind_btCollisionObject_setFriction_1"];var _emscripten_bind_btDefaultCollisionConfiguration___destroy___0=Module["_emscripten_bind_btDefaultCollisionConfiguration___destroy___0"]=asm["_emscripten_bind_btDefaultCollisionConfiguration___destroy___0"];var _emscripten_bind_btRigidBody_setMassProps_2=Module["_emscripten_bind_btRigidBody_setMassProps_2"]=asm["_emscripten_bind_btRigidBody_setMassProps_2"];var _emscripten_bind_btRotationalLimitMotor_set_m_enableMotor_1=Module["_emscripten_bind_btRotationalLimitMotor_set_m_enableMotor_1"]=asm["_emscripten_bind_btRotationalLimitMotor_set_m_enableMotor_1"];var _emscripten_bind_btVector3_setValue_3=Module["_emscripten_bind_btVector3_setValue_3"]=asm["_emscripten_bind_btVector3_setValue_3"];var _emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1=Module["_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1"];var _emscripten_bind_RaycastInfo_get_m_suspensionLength_0=Module["_emscripten_bind_RaycastInfo_get_m_suspensionLength_0"]=asm["_emscripten_bind_RaycastInfo_get_m_suspensionLength_0"];var _emscripten_bind_btGhostObject_getCollisionFlags_0=Module["_emscripten_bind_btGhostObject_getCollisionFlags_0"]=asm["_emscripten_bind_btGhostObject_getCollisionFlags_0"];var _emscripten_bind_btCapsuleShapeX___destroy___0=Module["_emscripten_bind_btCapsuleShapeX___destroy___0"]=asm["_emscripten_bind_btCapsuleShapeX___destroy___0"];var _emscripten_bind_Config_set_kDG_1=Module["_emscripten_bind_Config_set_kDG_1"]=asm["_emscripten_bind_Config_set_kDG_1"];var _emscripten_bind_Material_get_m_flags_0=Module["_emscripten_bind_Material_get_m_flags_0"]=asm["_emscripten_bind_Material_get_m_flags_0"];var _emscripten_bind_btHingeConstraint_setLimit_4=Module["_emscripten_bind_btHingeConstraint_setLimit_4"]=asm["_emscripten_bind_btHingeConstraint_setLimit_4"];var _emscripten_bind_btHingeConstraint_setLimit_5=Module["_emscripten_bind_btHingeConstraint_setLimit_5"]=asm["_emscripten_bind_btHingeConstraint_setLimit_5"];var _emscripten_bind_btSoftBodyWorldInfo_btSoftBodyWorldInfo_0=Module["_emscripten_bind_btSoftBodyWorldInfo_btSoftBodyWorldInfo_0"]=asm["_emscripten_bind_btSoftBodyWorldInfo_btSoftBodyWorldInfo_0"];var _emscripten_bind_btDefaultVehicleRaycaster___destroy___0=Module["_emscripten_bind_btDefaultVehicleRaycaster___destroy___0"]=asm["_emscripten_bind_btDefaultVehicleRaycaster___destroy___0"];var _emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1=Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1"]=asm["_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1"];var _emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1=Module["_emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1"]=asm["_emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1"];var _emscripten_bind_btSoftBody_scale_1=Module["_emscripten_bind_btSoftBody_scale_1"]=asm["_emscripten_bind_btSoftBody_scale_1"];var _emscripten_bind_Config_get_citerations_0=Module["_emscripten_bind_Config_get_citerations_0"]=asm["_emscripten_bind_Config_get_citerations_0"];var _emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0=Module["_emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0"]=asm["_emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0"];var _emscripten_bind_btGhostObject_getCollisionShape_0=Module["_emscripten_bind_btGhostObject_getCollisionShape_0"]=asm["_emscripten_bind_btGhostObject_getCollisionShape_0"];var _emscripten_bind_btCollisionObject_setAnisotropicFriction_2=Module["_emscripten_bind_btCollisionObject_setAnisotropicFriction_2"]=asm["_emscripten_bind_btCollisionObject_setAnisotropicFriction_2"];var _emscripten_bind_btBoxShape___destroy___0=Module["_emscripten_bind_btBoxShape___destroy___0"]=asm["_emscripten_bind_btBoxShape___destroy___0"];var _emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0=Module["_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0"]=asm["_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0"];var _emscripten_bind_btPersistentManifold_getContactPoint_1=Module["_emscripten_bind_btPersistentManifold_getContactPoint_1"]=asm["_emscripten_bind_btPersistentManifold_getContactPoint_1"];var _emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0=Module["_emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0"];var _emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1=Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1"]=asm["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1"];var _emscripten_bind_RaycastInfo_set_m_groundObject_1=Module["_emscripten_bind_RaycastInfo_set_m_groundObject_1"]=asm["_emscripten_bind_RaycastInfo_set_m_groundObject_1"];var _emscripten_bind_btGhostObject_activate_1=Module["_emscripten_bind_btGhostObject_activate_1"]=asm["_emscripten_bind_btGhostObject_activate_1"];var _emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2=Module["_emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2"];var _emscripten_bind_btManifoldPoint_getPositionWorldOnB_0=Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0"]=asm["_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0"];var _emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0=Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0"];var _emscripten_bind_btDefaultSoftBodySolver_btDefaultSoftBodySolver_0=Module["_emscripten_bind_btDefaultSoftBodySolver_btDefaultSoftBodySolver_0"]=asm["_emscripten_bind_btDefaultSoftBodySolver_btDefaultSoftBodySolver_0"];var _emscripten_bind_btSphereShape_setMargin_1=Module["_emscripten_bind_btSphereShape_setMargin_1"]=asm["_emscripten_bind_btSphereShape_setMargin_1"];var _emscripten_bind_btSoftBody_get_m_cfg_0=Module["_emscripten_bind_btSoftBody_get_m_cfg_0"]=asm["_emscripten_bind_btSoftBody_get_m_cfg_0"];var _emscripten_bind_btCollisionObject_setUserIndex_1=Module["_emscripten_bind_btCollisionObject_setUserIndex_1"]=asm["_emscripten_bind_btCollisionObject_setUserIndex_1"];var _emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1=Module["_emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1"]=asm["_emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1"];var _emscripten_bind_btSliderConstraint_setUpperAngLimit_1=Module["_emscripten_bind_btSliderConstraint_setUpperAngLimit_1"]=asm["_emscripten_bind_btSliderConstraint_setUpperAngLimit_1"];var _emscripten_bind_btDynamicsWorld_contactPairTest_3=Module["_emscripten_bind_btDynamicsWorld_contactPairTest_3"]=asm["_emscripten_bind_btDynamicsWorld_contactPairTest_3"];var _emscripten_bind_btCollisionWorld_getPairCache_0=Module["_emscripten_bind_btCollisionWorld_getPairCache_0"]=asm["_emscripten_bind_btCollisionWorld_getPairCache_0"];var _emscripten_bind_btConeTwistConstraint_setMotorTarget_1=Module["_emscripten_bind_btConeTwistConstraint_setMotorTarget_1"]=asm["_emscripten_bind_btConeTwistConstraint_setMotorTarget_1"];var _emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1"];var _emscripten_bind_btWheelInfo_set_m_rollInfluence_1=Module["_emscripten_bind_btWheelInfo_set_m_rollInfluence_1"]=asm["_emscripten_bind_btWheelInfo_set_m_rollInfluence_1"];var _emscripten_bind_btGhostObject_setCcdMotionThreshold_1=Module["_emscripten_bind_btGhostObject_setCcdMotionThreshold_1"]=asm["_emscripten_bind_btGhostObject_setCcdMotionThreshold_1"];var _emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1=Module["_emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1"]=asm["_emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1"];var _emscripten_enum_PHY_ScalarType_PHY_INTEGER=Module["_emscripten_enum_PHY_ScalarType_PHY_INTEGER"]=asm["_emscripten_enum_PHY_ScalarType_PHY_INTEGER"];var _emscripten_bind_btSoftBodyHelpers_CreatePatchUV_10=Module["_emscripten_bind_btSoftBodyHelpers_CreatePatchUV_10"]=asm["_emscripten_bind_btSoftBodyHelpers_CreatePatchUV_10"];var _emscripten_bind_btGhostObject_forceActivationState_1=Module["_emscripten_bind_btGhostObject_forceActivationState_1"]=asm["_emscripten_bind_btGhostObject_forceActivationState_1"];var _emscripten_bind_btSoftBodyHelpers_CreateFromTriMesh_5=Module["_emscripten_bind_btSoftBodyHelpers_CreateFromTriMesh_5"]=asm["_emscripten_bind_btSoftBodyHelpers_CreateFromTriMesh_5"];var _emscripten_bind_btVector4_y_0=Module["_emscripten_bind_btVector4_y_0"]=asm["_emscripten_bind_btVector4_y_0"];var _emscripten_bind_VoidPtr___destroy___0=Module["_emscripten_bind_VoidPtr___destroy___0"]=asm["_emscripten_bind_VoidPtr___destroy___0"];var _emscripten_bind_RaycastInfo_set_m_contactNormalWS_1=Module["_emscripten_bind_RaycastInfo_set_m_contactNormalWS_1"]=asm["_emscripten_bind_RaycastInfo_set_m_contactNormalWS_1"];var _emscripten_bind_btSliderConstraint_setLowerAngLimit_1=Module["_emscripten_bind_btSliderConstraint_setLowerAngLimit_1"]=asm["_emscripten_bind_btSliderConstraint_setLowerAngLimit_1"];var _emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0"];var _emscripten_bind_RaycastInfo_set_m_contactPointWS_1=Module["_emscripten_bind_RaycastInfo_set_m_contactPointWS_1"]=asm["_emscripten_bind_RaycastInfo_set_m_contactPointWS_1"];var _emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2=Module["_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2"]=asm["_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2"];var _emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0"];var _emscripten_bind_btSoftBody_setContactProcessingThreshold_1=Module["_emscripten_bind_btSoftBody_setContactProcessingThreshold_1"]=asm["_emscripten_bind_btSoftBody_setContactProcessingThreshold_1"];var _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0=Module["_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0"];var _emscripten_bind_btSliderConstraint_enableFeedback_1=Module["_emscripten_bind_btSliderConstraint_enableFeedback_1"]=asm["_emscripten_bind_btSliderConstraint_enableFeedback_1"];var _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0=Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0"]=asm["_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0"];var _emscripten_enum_PHY_ScalarType_PHY_DOUBLE=Module["_emscripten_enum_PHY_ScalarType_PHY_DOUBLE"]=asm["_emscripten_enum_PHY_ScalarType_PHY_DOUBLE"];var _emscripten_bind_btConstraintSetting_get_m_tau_0=Module["_emscripten_bind_btConstraintSetting_get_m_tau_0"]=asm["_emscripten_bind_btConstraintSetting_get_m_tau_0"];var _emscripten_bind_btConeShape_setLocalScaling_1=Module["_emscripten_bind_btConeShape_setLocalScaling_1"]=asm["_emscripten_bind_btConeShape_setLocalScaling_1"];var _emscripten_bind_btCollisionObject_setCollisionShape_1=Module["_emscripten_bind_btCollisionObject_setCollisionShape_1"]=asm["_emscripten_bind_btCollisionObject_setCollisionShape_1"];var _emscripten_bind_btCollisionShape___destroy___0=Module["_emscripten_bind_btCollisionShape___destroy___0"]=asm["_emscripten_bind_btCollisionShape___destroy___0"];var _emscripten_bind_btMatrix3x3_getRow_1=Module["_emscripten_bind_btMatrix3x3_getRow_1"]=asm["_emscripten_bind_btMatrix3x3_getRow_1"];var _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0=Module["_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0"]=asm["_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0"];var _emscripten_bind_btSoftRigidDynamicsWorld_getPairCache_0=Module["_emscripten_bind_btSoftRigidDynamicsWorld_getPairCache_0"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_getPairCache_0"];var _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0=Module["_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0"];var _emscripten_bind_btSoftBody_getUserIndex_0=Module["_emscripten_bind_btSoftBody_getUserIndex_0"]=asm["_emscripten_bind_btSoftBody_getUserIndex_0"];var _emscripten_bind_btPairCachingGhostObject_setCollisionShape_1=Module["_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1"];var _emscripten_bind_btKinematicCharacterController_warp_1=Module["_emscripten_bind_btKinematicCharacterController_warp_1"]=asm["_emscripten_bind_btKinematicCharacterController_warp_1"];var _emscripten_bind_btContactSolverInfo___destroy___0=Module["_emscripten_bind_btContactSolverInfo___destroy___0"]=asm["_emscripten_bind_btContactSolverInfo___destroy___0"];var _emscripten_bind_btSoftBody_getWorldTransform_0=Module["_emscripten_bind_btSoftBody_getWorldTransform_0"]=asm["_emscripten_bind_btSoftBody_getWorldTransform_0"];var ___muldsi3=Module["___muldsi3"]=asm["___muldsi3"];var _emscripten_bind_btTriangleMesh___destroy___0=Module["_emscripten_bind_btTriangleMesh___destroy___0"]=asm["_emscripten_bind_btTriangleMesh___destroy___0"];var _emscripten_bind_btKinematicCharacterController_preStep_1=Module["_emscripten_bind_btKinematicCharacterController_preStep_1"]=asm["_emscripten_bind_btKinematicCharacterController_preStep_1"];var _emscripten_bind_btRaycastVehicle_applyEngineForce_2=Module["_emscripten_bind_btRaycastVehicle_applyEngineForce_2"]=asm["_emscripten_bind_btRaycastVehicle_applyEngineForce_2"];var _emscripten_bind_btBoxShape_calculateLocalInertia_2=Module["_emscripten_bind_btBoxShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btBoxShape_calculateLocalInertia_2"];var _emscripten_bind_btRaycastVehicle_setBrake_2=Module["_emscripten_bind_btRaycastVehicle_setBrake_2"]=asm["_emscripten_bind_btRaycastVehicle_setBrake_2"];var _emscripten_bind_ConcreteContactResultCallback___destroy___0=Module["_emscripten_bind_ConcreteContactResultCallback___destroy___0"]=asm["_emscripten_bind_ConcreteContactResultCallback___destroy___0"];var _emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1=Module["_emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1"]=asm["_emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1"];var _emscripten_bind_btCollisionObject___destroy___0=Module["_emscripten_bind_btCollisionObject___destroy___0"]=asm["_emscripten_bind_btCollisionObject___destroy___0"];var _emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1=Module["_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1"];var _emscripten_bind_btConvexTriangleMeshShape_setMargin_1=Module["_emscripten_bind_btConvexTriangleMeshShape_setMargin_1"]=asm["_emscripten_bind_btConvexTriangleMeshShape_setMargin_1"];var _emscripten_bind_Config_get_kSSHR_CL_0=Module["_emscripten_bind_Config_get_kSSHR_CL_0"]=asm["_emscripten_bind_Config_get_kSSHR_CL_0"];var _emscripten_bind_btRotationalLimitMotor_isLimited_0=Module["_emscripten_bind_btRotationalLimitMotor_isLimited_0"]=asm["_emscripten_bind_btRotationalLimitMotor_isLimited_0"];var _emscripten_bind_btDispatcherInfo_set_m_timeStep_1=Module["_emscripten_bind_btDispatcherInfo_set_m_timeStep_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_timeStep_1"];var _emscripten_bind_btVector3_btVector3_3=Module["_emscripten_bind_btVector3_btVector3_3"]=asm["_emscripten_bind_btVector3_btVector3_3"];var _emscripten_bind_btVector3_btVector3_0=Module["_emscripten_bind_btVector3_btVector3_0"]=asm["_emscripten_bind_btVector3_btVector3_0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1"];var _emscripten_bind_btDiscreteDynamicsWorld_getGravity_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0"];var _emscripten_bind_btVector3_z_0=Module["_emscripten_bind_btVector3_z_0"]=asm["_emscripten_bind_btVector3_z_0"];var _emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0"];var _emscripten_bind_btCollisionShape_getMargin_0=Module["_emscripten_bind_btCollisionShape_getMargin_0"]=asm["_emscripten_bind_btCollisionShape_getMargin_0"];var _emscripten_bind_btSoftBodyWorldInfo_set_water_offset_1=Module["_emscripten_bind_btSoftBodyWorldInfo_set_water_offset_1"]=asm["_emscripten_bind_btSoftBodyWorldInfo_set_water_offset_1"];var _emscripten_bind_btBroadphaseInterface___destroy___0=Module["_emscripten_bind_btBroadphaseInterface___destroy___0"]=asm["_emscripten_bind_btBroadphaseInterface___destroy___0"];var _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0=Module["_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0"];var _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7=Module["_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7"]=asm["_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7"];var _emscripten_bind_RaycastInfo_get_m_hardPointWS_0=Module["_emscripten_bind_RaycastInfo_get_m_hardPointWS_0"]=asm["_emscripten_bind_RaycastInfo_get_m_hardPointWS_0"];var _emscripten_bind_btConeTwistConstraint___destroy___0=Module["_emscripten_bind_btConeTwistConstraint___destroy___0"]=asm["_emscripten_bind_btConeTwistConstraint___destroy___0"];var _emscripten_bind_btQuadWord___destroy___0=Module["_emscripten_bind_btQuadWord___destroy___0"]=asm["_emscripten_bind_btQuadWord___destroy___0"];var _emscripten_bind_btSoftRigidDynamicsWorld_contactPairTest_3=Module["_emscripten_bind_btSoftRigidDynamicsWorld_contactPairTest_3"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_contactPairTest_3"];var _emscripten_bind_btQuaternion_setEulerZYX_3=Module["_emscripten_bind_btQuaternion_setEulerZYX_3"]=asm["_emscripten_bind_btQuaternion_setEulerZYX_3"];var _emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1"];var _emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2=Module["_emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2"];var _emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0=Module["_emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0"]=asm["_emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0"];var _emscripten_bind_btRigidBody_setCenterOfMassTransform_1=Module["_emscripten_bind_btRigidBody_setCenterOfMassTransform_1"]=asm["_emscripten_bind_btRigidBody_setCenterOfMassTransform_1"];var _emscripten_bind_btSoftBody_setUserIndex_1=Module["_emscripten_bind_btSoftBody_setUserIndex_1"]=asm["_emscripten_bind_btSoftBody_setUserIndex_1"];var _emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0=Module["_emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0"]=asm["_emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0"];var _emscripten_bind_btSoftBody_setCollisionShape_1=Module["_emscripten_bind_btSoftBody_setCollisionShape_1"]=asm["_emscripten_bind_btSoftBody_setCollisionShape_1"];var _emscripten_bind_btGhostObject_setAnisotropicFriction_2=Module["_emscripten_bind_btGhostObject_setAnisotropicFriction_2"]=asm["_emscripten_bind_btGhostObject_setAnisotropicFriction_2"];var _emscripten_bind_btConstraintSolver___destroy___0=Module["_emscripten_bind_btConstraintSolver___destroy___0"]=asm["_emscripten_bind_btConstraintSolver___destroy___0"];var _emscripten_bind_btSoftBody_isActive_0=Module["_emscripten_bind_btSoftBody_isActive_0"]=asm["_emscripten_bind_btSoftBody_isActive_0"];var _emscripten_bind_btCapsuleShape_btCapsuleShape_2=Module["_emscripten_bind_btCapsuleShape_btCapsuleShape_2"]=asm["_emscripten_bind_btCapsuleShape_btCapsuleShape_2"];var _emscripten_bind_btTypedConstraint_enableFeedback_1=Module["_emscripten_bind_btTypedConstraint_enableFeedback_1"]=asm["_emscripten_bind_btTypedConstraint_enableFeedback_1"];var _emscripten_bind_btSoftBody_setRollingFriction_1=Module["_emscripten_bind_btSoftBody_setRollingFriction_1"]=asm["_emscripten_bind_btSoftBody_setRollingFriction_1"];var _emscripten_bind_btGhostObject_activate_0=Module["_emscripten_bind_btGhostObject_activate_0"]=asm["_emscripten_bind_btGhostObject_activate_0"];var _emscripten_bind_btGeneric6DofConstraint_getRotationalLimitMotor_1=Module["_emscripten_bind_btGeneric6DofConstraint_getRotationalLimitMotor_1"]=asm["_emscripten_bind_btGeneric6DofConstraint_getRotationalLimitMotor_1"];var _emscripten_bind_btConstraintSetting_btConstraintSetting_0=Module["_emscripten_bind_btConstraintSetting_btConstraintSetting_0"]=asm["_emscripten_bind_btConstraintSetting_btConstraintSetting_0"];var _emscripten_bind_btCapsuleShape_setLocalScaling_1=Module["_emscripten_bind_btCapsuleShape_setLocalScaling_1"]=asm["_emscripten_bind_btCapsuleShape_setLocalScaling_1"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0"];var _emscripten_bind_btRigidBody_setAnisotropicFriction_2=Module["_emscripten_bind_btRigidBody_setAnisotropicFriction_2"]=asm["_emscripten_bind_btRigidBody_setAnisotropicFriction_2"];var _emscripten_bind_btSoftBody_btSoftBody_4=Module["_emscripten_bind_btSoftBody_btSoftBody_4"]=asm["_emscripten_bind_btSoftBody_btSoftBody_4"];var _emscripten_bind_btTriangleMeshShape_setLocalScaling_1=Module["_emscripten_bind_btTriangleMeshShape_setLocalScaling_1"]=asm["_emscripten_bind_btTriangleMeshShape_setLocalScaling_1"];var _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3=Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"];var _emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1=Module["_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1"]=asm["_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1"];var _emscripten_bind_btVector3_op_add_1=Module["_emscripten_bind_btVector3_op_add_1"]=asm["_emscripten_bind_btVector3_op_add_1"];var _emscripten_bind_btPersistentManifold_btPersistentManifold_0=Module["_emscripten_bind_btPersistentManifold_btPersistentManifold_0"]=asm["_emscripten_bind_btPersistentManifold_btPersistentManifold_0"];var _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0=Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0"]=asm["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0"];var _emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2=Module["_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2"]=asm["_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2"];var _emscripten_bind_btVector4___destroy___0=Module["_emscripten_bind_btVector4___destroy___0"]=asm["_emscripten_bind_btVector4___destroy___0"];var _emscripten_bind_btPairCachingGhostObject_isKinematicObject_0=Module["_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0"]=asm["_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0"];var _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1"];var _emscripten_bind_tNodeArray_at_1=Module["_emscripten_bind_tNodeArray_at_1"]=asm["_emscripten_bind_tNodeArray_at_1"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2=Module["_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0"];var _emscripten_bind_btCollisionObject_setCcdMotionThreshold_1=Module["_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1"]=asm["_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1"];var _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4=Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4"]=asm["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4"];var _emscripten_bind_btSoftBody_set_m_cfg_1=Module["_emscripten_bind_btSoftBody_set_m_cfg_1"]=asm["_emscripten_bind_btSoftBody_set_m_cfg_1"];var _emscripten_bind_btQuadWord_setZ_1=Module["_emscripten_bind_btQuadWord_setZ_1"]=asm["_emscripten_bind_btQuadWord_setZ_1"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"];var _emscripten_bind_btPoint2PointConstraint_getPivotInB_0=Module["_emscripten_bind_btPoint2PointConstraint_getPivotInB_0"]=asm["_emscripten_bind_btPoint2PointConstraint_getPivotInB_0"];var _emscripten_bind_btKinematicCharacterController_playerStep_2=Module["_emscripten_bind_btKinematicCharacterController_playerStep_2"]=asm["_emscripten_bind_btKinematicCharacterController_playerStep_2"];var _emscripten_bind_btDispatcherInfo___destroy___0=Module["_emscripten_bind_btDispatcherInfo___destroy___0"]=asm["_emscripten_bind_btDispatcherInfo___destroy___0"];var _emscripten_bind_btCapsuleShape_getMargin_0=Module["_emscripten_bind_btCapsuleShape_getMargin_0"]=asm["_emscripten_bind_btCapsuleShape_getMargin_0"];var _emscripten_bind_btCylinderShape_getMargin_0=Module["_emscripten_bind_btCylinderShape_getMargin_0"]=asm["_emscripten_bind_btCylinderShape_getMargin_0"];var _emscripten_bind_btSoftBodyArray_size_0=Module["_emscripten_bind_btSoftBodyArray_size_0"]=asm["_emscripten_bind_btSoftBodyArray_size_0"];var _emscripten_bind_btStaticPlaneShape_setLocalScaling_1=Module["_emscripten_bind_btStaticPlaneShape_setLocalScaling_1"]=asm["_emscripten_bind_btStaticPlaneShape_setLocalScaling_1"];var _emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2=Module["_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2"];var _emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0"];var _emscripten_bind_btGhostObject_getWorldTransform_0=Module["_emscripten_bind_btGhostObject_getWorldTransform_0"]=asm["_emscripten_bind_btGhostObject_getWorldTransform_0"];var _emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0"];var _emscripten_bind_LocalConvexResult_set_m_hitFraction_1=Module["_emscripten_bind_LocalConvexResult_set_m_hitFraction_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_hitFraction_1"];var _emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2=Module["_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2"]=asm["_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2"];var _emscripten_bind_btDispatcherInfo_get_m_timeStep_0=Module["_emscripten_bind_btDispatcherInfo_get_m_timeStep_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_timeStep_0"];var _emscripten_bind_btHingeConstraint_setAngularOnly_1=Module["_emscripten_bind_btHingeConstraint_setAngularOnly_1"]=asm["_emscripten_bind_btHingeConstraint_setAngularOnly_1"];var _emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1=Module["_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1"];var _emscripten_bind_btConstraintSetting_set_m_impulseClamp_1=Module["_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1"]=asm["_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1"];var _emscripten_bind_btMotionState___destroy___0=Module["_emscripten_bind_btMotionState___destroy___0"]=asm["_emscripten_bind_btMotionState___destroy___0"];var _emscripten_bind_btCollisionObject_setCollisionFlags_1=Module["_emscripten_bind_btCollisionObject_setCollisionFlags_1"]=asm["_emscripten_bind_btCollisionObject_setCollisionFlags_1"];var _emscripten_bind_Config_get_kPR_0=Module["_emscripten_bind_Config_get_kPR_0"]=asm["_emscripten_bind_Config_get_kPR_0"];var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1"];var _emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1=Module["_emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1"]=asm["_emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1"];var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3"];var _emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1=Module["_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1"]=asm["_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1"];var _emscripten_bind_RaycastInfo_set_m_suspensionLength_1=Module["_emscripten_bind_RaycastInfo_set_m_suspensionLength_1"]=asm["_emscripten_bind_RaycastInfo_set_m_suspensionLength_1"];var _emscripten_bind_btDispatcher_getManifoldByIndexInternal_1=Module["_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1"]=asm["_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1"];var _emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1=Module["_emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1"]=asm["_emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1"];var _emscripten_bind_btSoftBodyWorldInfo___destroy___0=Module["_emscripten_bind_btSoftBodyWorldInfo___destroy___0"]=asm["_emscripten_bind_btSoftBodyWorldInfo___destroy___0"];var _emscripten_bind_btConvexTriangleMeshShape_getMargin_0=Module["_emscripten_bind_btConvexTriangleMeshShape_getMargin_0"]=asm["_emscripten_bind_btConvexTriangleMeshShape_getMargin_0"];var _emscripten_bind_btSoftBodySolver___destroy___0=Module["_emscripten_bind_btSoftBodySolver___destroy___0"]=asm["_emscripten_bind_btSoftBodySolver___destroy___0"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var _emscripten_bind_btWheelInfo_set_m_steering_1=Module["_emscripten_bind_btWheelInfo_set_m_steering_1"]=asm["_emscripten_bind_btWheelInfo_set_m_steering_1"];var _emscripten_bind_Node_set_m_x_1=Module["_emscripten_bind_Node_set_m_x_1"]=asm["_emscripten_bind_Node_set_m_x_1"];var _emscripten_bind_btPairCachingGhostObject_setWorldTransform_1=Module["_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1"];var _emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0=Module["_emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0"]=asm["_emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0"];var _emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0=Module["_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0"]=asm["_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0"];var _emscripten_bind_btConeShape___destroy___0=Module["_emscripten_bind_btConeShape___destroy___0"]=asm["_emscripten_bind_btConeShape___destroy___0"];var _emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1=Module["_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1"]=asm["_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1"];var _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4=Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4"]=asm["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4"];var _emscripten_bind_btConeTwistConstraint_setLimit_2=Module["_emscripten_bind_btConeTwistConstraint_setLimit_2"]=asm["_emscripten_bind_btConeTwistConstraint_setLimit_2"];var _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2=Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2"]=asm["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2"];var _emscripten_bind_btKinematicCharacterController_setJumpSpeed_1=Module["_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1"]=asm["_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1"];var _emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration___destroy___0=Module["_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration___destroy___0"]=asm["_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration___destroy___0"];var _emscripten_bind_btConeShapeX_calculateLocalInertia_2=Module["_emscripten_bind_btConeShapeX_calculateLocalInertia_2"]=asm["_emscripten_bind_btConeShapeX_calculateLocalInertia_2"];var _emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88=Module["_emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88"]=asm["_emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88"];var _emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1=Module["_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1"]=asm["_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1"];var _emscripten_bind_btGhostObject_getNumOverlappingObjects_0=Module["_emscripten_bind_btGhostObject_getNumOverlappingObjects_0"]=asm["_emscripten_bind_btGhostObject_getNumOverlappingObjects_0"];var _emscripten_bind_btRigidBodyConstructionInfo___destroy___0=Module["_emscripten_bind_btRigidBodyConstructionInfo___destroy___0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo___destroy___0"];var _emscripten_bind_btRigidBody_getWorldTransform_0=Module["_emscripten_bind_btRigidBody_getWorldTransform_0"]=asm["_emscripten_bind_btRigidBody_getWorldTransform_0"];var _sbrk=Module["_sbrk"]=asm["_sbrk"];var _emscripten_bind_btPoint2PointConstraint_setPivotA_1=Module["_emscripten_bind_btPoint2PointConstraint_setPivotA_1"]=asm["_emscripten_bind_btPoint2PointConstraint_setPivotA_1"];var _emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _emscripten_bind_Config_get_maxvolume_0=Module["_emscripten_bind_Config_get_maxvolume_0"]=asm["_emscripten_bind_Config_get_maxvolume_0"];var _emscripten_bind_btCapsuleShape_calculateLocalInertia_2=Module["_emscripten_bind_btCapsuleShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btCapsuleShape_calculateLocalInertia_2"];var _emscripten_bind_btSoftRigidDynamicsWorld_getGravity_0=Module["_emscripten_bind_btSoftRigidDynamicsWorld_getGravity_0"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_getGravity_0"];var _emscripten_bind_btVector3_y_0=Module["_emscripten_bind_btVector3_y_0"]=asm["_emscripten_bind_btVector3_y_0"];var _emscripten_bind_btDispatcherInfo_set_m_useEpa_1=Module["_emscripten_bind_btDispatcherInfo_set_m_useEpa_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_useEpa_1"];var _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0=Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0"];var _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2=Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"]=asm["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"];var _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3=Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"]=asm["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"];var _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0=Module["_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0"]=asm["_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0"];var _emscripten_bind_Config_set_kDF_1=Module["_emscripten_bind_Config_set_kDF_1"]=asm["_emscripten_bind_Config_set_kDF_1"];var _emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9=Module["_emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9"]=asm["_emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9"];var _emscripten_bind_btSoftBody_activate_1=Module["_emscripten_bind_btSoftBody_activate_1"]=asm["_emscripten_bind_btSoftBody_activate_1"];var _emscripten_bind_btSoftBody_activate_0=Module["_emscripten_bind_btSoftBody_activate_0"]=asm["_emscripten_bind_btSoftBody_activate_0"];var _emscripten_bind_btGhostObject_setCollisionShape_1=Module["_emscripten_bind_btGhostObject_setCollisionShape_1"]=asm["_emscripten_bind_btGhostObject_setCollisionShape_1"];var _emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1=Module["_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1"];var _emscripten_bind_btRigidBody_setRollingFriction_1=Module["_emscripten_bind_btRigidBody_setRollingFriction_1"]=asm["_emscripten_bind_btRigidBody_setRollingFriction_1"];var _emscripten_bind_btPairCachingGhostObject_setRollingFriction_1=Module["_emscripten_bind_btPairCachingGhostObject_setRollingFriction_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setRollingFriction_1"];var _emscripten_bind_btDiscreteDynamicsWorld_setGravity_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1"];var _emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1=Module["_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1"];var _emscripten_bind_btVector4_z_0=Module["_emscripten_bind_btVector4_z_0"]=asm["_emscripten_bind_btVector4_z_0"];var _emscripten_bind_btCollisionObject_forceActivationState_1=Module["_emscripten_bind_btCollisionObject_forceActivationState_1"]=asm["_emscripten_bind_btCollisionObject_forceActivationState_1"];var _emscripten_bind_btKinematicCharacterController_onGround_0=Module["_emscripten_bind_btKinematicCharacterController_onGround_0"]=asm["_emscripten_bind_btKinematicCharacterController_onGround_0"];var _emscripten_bind_btRaycastVehicle_getWheelInfo_1=Module["_emscripten_bind_btRaycastVehicle_getWheelInfo_1"]=asm["_emscripten_bind_btRaycastVehicle_getWheelInfo_1"];var _emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0=Module["_emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0"]=asm["_emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0"];var _emscripten_bind_btSoftBody_appendFace_4=Module["_emscripten_bind_btSoftBody_appendFace_4"]=asm["_emscripten_bind_btSoftBody_appendFace_4"];var _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1"];var _emscripten_bind_btSoftBodyWorldInfo_get_water_normal_0=Module["_emscripten_bind_btSoftBodyWorldInfo_get_water_normal_0"]=asm["_emscripten_bind_btSoftBodyWorldInfo_get_water_normal_0"];var _emscripten_bind_btVector3_normalize_0=Module["_emscripten_bind_btVector3_normalize_0"]=asm["_emscripten_bind_btVector3_normalize_0"];var _emscripten_bind_btSoftBody_setFriction_1=Module["_emscripten_bind_btSoftBody_setFriction_1"]=asm["_emscripten_bind_btSoftBody_setFriction_1"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var _emscripten_bind_btRigidBody_setSleepingThresholds_2=Module["_emscripten_bind_btRigidBody_setSleepingThresholds_2"]=asm["_emscripten_bind_btRigidBody_setSleepingThresholds_2"];var _emscripten_bind_btSoftBody_upcast_1=Module["_emscripten_bind_btSoftBody_upcast_1"]=asm["_emscripten_bind_btSoftBody_upcast_1"];var _emscripten_bind_btCollisionObject_setWorldTransform_1=Module["_emscripten_bind_btCollisionObject_setWorldTransform_1"]=asm["_emscripten_bind_btCollisionObject_setWorldTransform_1"];var _emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0=Module["_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0"];var _emscripten_bind_btSoftBodyWorldInfo_set_m_dispatcher_1=Module["_emscripten_bind_btSoftBodyWorldInfo_set_m_dispatcher_1"]=asm["_emscripten_bind_btSoftBodyWorldInfo_set_m_dispatcher_1"];var _emscripten_bind_btConvexHullShape_setLocalScaling_1=Module["_emscripten_bind_btConvexHullShape_setLocalScaling_1"]=asm["_emscripten_bind_btConvexHullShape_setLocalScaling_1"];var _emscripten_bind_btStridingMeshInterface___destroy___0=Module["_emscripten_bind_btStridingMeshInterface___destroy___0"]=asm["_emscripten_bind_btStridingMeshInterface___destroy___0"];var _emscripten_bind_btSoftBody_setActivationState_1=Module["_emscripten_bind_btSoftBody_setActivationState_1"]=asm["_emscripten_bind_btSoftBody_setActivationState_1"];var _emscripten_bind_btRigidBody_getUserIndex_0=Module["_emscripten_bind_btRigidBody_getUserIndex_0"]=asm["_emscripten_bind_btRigidBody_getUserIndex_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0"];var _emscripten_bind_btSoftBodyHelpers_CreatePatch_9=Module["_emscripten_bind_btSoftBodyHelpers_CreatePatch_9"]=asm["_emscripten_bind_btSoftBodyHelpers_CreatePatch_9"];var _emscripten_bind_btDispatcher_getNumManifolds_0=Module["_emscripten_bind_btDispatcher_getNumManifolds_0"]=asm["_emscripten_bind_btDispatcher_getNumManifolds_0"];var _emscripten_bind_btConvexShape_setMargin_1=Module["_emscripten_bind_btConvexShape_setMargin_1"]=asm["_emscripten_bind_btConvexShape_setMargin_1"];var _emscripten_bind_btSoftBody_get_m_nodes_0=Module["_emscripten_bind_btSoftBody_get_m_nodes_0"]=asm["_emscripten_bind_btSoftBody_get_m_nodes_0"];var _emscripten_bind_btSoftBody___destroy___0=Module["_emscripten_bind_btSoftBody___destroy___0"]=asm["_emscripten_bind_btSoftBody___destroy___0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"];var _emscripten_bind_btRigidBody_activate_1=Module["_emscripten_bind_btRigidBody_activate_1"]=asm["_emscripten_bind_btRigidBody_activate_1"];var _emscripten_bind_btRigidBody_activate_0=Module["_emscripten_bind_btRigidBody_activate_0"]=asm["_emscripten_bind_btRigidBody_activate_0"];var _emscripten_bind_btRaycastVehicle___destroy___0=Module["_emscripten_bind_btRaycastVehicle___destroy___0"]=asm["_emscripten_bind_btRaycastVehicle___destroy___0"];var _emscripten_bind_btSoftBodyWorldInfo_get_m_gravity_0=Module["_emscripten_bind_btSoftBodyWorldInfo_get_m_gravity_0"]=asm["_emscripten_bind_btSoftBodyWorldInfo_get_m_gravity_0"];var _emscripten_bind_Material_set_m_kVST_1=Module["_emscripten_bind_Material_set_m_kVST_1"]=asm["_emscripten_bind_Material_set_m_kVST_1"];var _emscripten_bind_btGhostObject_setActivationState_1=Module["_emscripten_bind_btGhostObject_setActivationState_1"]=asm["_emscripten_bind_btGhostObject_setActivationState_1"];var _emscripten_bind_Material_set_m_kLST_1=Module["_emscripten_bind_Material_set_m_kLST_1"]=asm["_emscripten_bind_Material_set_m_kLST_1"];var _emscripten_bind_tMaterialArray_size_0=Module["_emscripten_bind_tMaterialArray_size_0"]=asm["_emscripten_bind_tMaterialArray_size_0"];var _emscripten_bind_btCollisionWorld_contactPairTest_3=Module["_emscripten_bind_btCollisionWorld_contactPairTest_3"]=asm["_emscripten_bind_btCollisionWorld_contactPairTest_3"];var _emscripten_bind_btDispatcherInfo_get_m_useContinuous_0=Module["_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0"];var _emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1=Module["_emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1"]=asm["_emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1"];var _emscripten_bind_Config_get_kSS_SPLT_CL_0=Module["_emscripten_bind_Config_get_kSS_SPLT_CL_0"]=asm["_emscripten_bind_Config_get_kSS_SPLT_CL_0"];var _emscripten_bind_btCylinderShapeX___destroy___0=Module["_emscripten_bind_btCylinderShapeX___destroy___0"]=asm["_emscripten_bind_btCylinderShapeX___destroy___0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"];var _emscripten_bind_btRigidBody_updateInertiaTensor_0=Module["_emscripten_bind_btRigidBody_updateInertiaTensor_0"]=asm["_emscripten_bind_btRigidBody_updateInertiaTensor_0"];var _emscripten_bind_ContactResultCallback___destroy___0=Module["_emscripten_bind_ContactResultCallback___destroy___0"]=asm["_emscripten_bind_ContactResultCallback___destroy___0"];var _emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0=Module["_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0"];var _emscripten_bind_btSoftBody_setAnisotropicFriction_2=Module["_emscripten_bind_btSoftBody_setAnisotropicFriction_2"]=asm["_emscripten_bind_btSoftBody_setAnisotropicFriction_2"];var _emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1=Module["_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1"];var _emscripten_bind_btRigidBody_getMotionState_0=Module["_emscripten_bind_btRigidBody_getMotionState_0"]=asm["_emscripten_bind_btRigidBody_getMotionState_0"];var _emscripten_bind_btKinematicCharacterController_getGhostObject_0=Module["_emscripten_bind_btKinematicCharacterController_getGhostObject_0"]=asm["_emscripten_bind_btKinematicCharacterController_getGhostObject_0"];var _emscripten_bind_btRigidBody_btRigidBody_1=Module["_emscripten_bind_btRigidBody_btRigidBody_1"]=asm["_emscripten_bind_btRigidBody_btRigidBody_1"];var _emscripten_bind_btTriangleMeshShape___destroy___0=Module["_emscripten_bind_btTriangleMeshShape___destroy___0"]=asm["_emscripten_bind_btTriangleMeshShape___destroy___0"];var _llvm_cttz_i32=Module["_llvm_cttz_i32"]=asm["_llvm_cttz_i32"];var _emscripten_bind_btRotationalLimitMotor_set_m_hiLimit_1=Module["_emscripten_bind_btRotationalLimitMotor_set_m_hiLimit_1"]=asm["_emscripten_bind_btRotationalLimitMotor_set_m_hiLimit_1"];var _emscripten_bind_btRigidBody_applyTorque_1=Module["_emscripten_bind_btRigidBody_applyTorque_1"]=asm["_emscripten_bind_btRigidBody_applyTorque_1"];var _emscripten_bind_btManifoldPoint_get_m_localPointA_0=Module["_emscripten_bind_btManifoldPoint_get_m_localPointA_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_localPointA_0"];var _emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0=Module["_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"]=asm["_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"];var _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0=Module["_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0"];var _emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1=Module["_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1"];var _emscripten_bind_btRotationalLimitMotor_get_m_hiLimit_0=Module["_emscripten_bind_btRotationalLimitMotor_get_m_hiLimit_0"]=asm["_emscripten_bind_btRotationalLimitMotor_get_m_hiLimit_0"];var _emscripten_bind_btGhostObject_setUserPointer_1=Module["_emscripten_bind_btGhostObject_setUserPointer_1"]=asm["_emscripten_bind_btGhostObject_setUserPointer_1"];var _emscripten_bind_btKinematicCharacterController_getGravity_0=Module["_emscripten_bind_btKinematicCharacterController_getGravity_0"]=asm["_emscripten_bind_btKinematicCharacterController_getGravity_0"];var ___udivmoddi4=Module["___udivmoddi4"]=asm["___udivmoddi4"];var _emscripten_enum_PHY_ScalarType_PHY_SHORT=Module["_emscripten_enum_PHY_ScalarType_PHY_SHORT"]=asm["_emscripten_enum_PHY_ScalarType_PHY_SHORT"];var _emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0=Module["_emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0"]=asm["_emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0"];var _emscripten_bind_btRotationalLimitMotor_get_m_loLimit_0=Module["_emscripten_bind_btRotationalLimitMotor_get_m_loLimit_0"]=asm["_emscripten_bind_btRotationalLimitMotor_get_m_loLimit_0"];var _emscripten_bind_btVector4_normalize_0=Module["_emscripten_bind_btVector4_normalize_0"]=asm["_emscripten_bind_btVector4_normalize_0"];var _emscripten_bind_btQuaternion_setY_1=Module["_emscripten_bind_btQuaternion_setY_1"]=asm["_emscripten_bind_btQuaternion_setY_1"];var _emscripten_bind_btConeShape_calculateLocalInertia_2=Module["_emscripten_bind_btConeShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConeShape_calculateLocalInertia_2"];var _emscripten_bind_btCylinderShapeX_calculateLocalInertia_2=Module["_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2"]=asm["_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2"];var _emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1=Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1"]=asm["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1"];var _llvm_bswap_i32=Module["_llvm_bswap_i32"]=asm["_llvm_bswap_i32"];var _emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2=Module["_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2"]=asm["_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2"];var _emscripten_bind_btSphereShape_setLocalScaling_1=Module["_emscripten_bind_btSphereShape_setLocalScaling_1"]=asm["_emscripten_bind_btSphereShape_setLocalScaling_1"];var _emscripten_bind_btVector4_w_0=Module["_emscripten_bind_btVector4_w_0"]=asm["_emscripten_bind_btVector4_w_0"];var _emscripten_bind_btWheelInfo_get_m_worldTransform_0=Module["_emscripten_bind_btWheelInfo_get_m_worldTransform_0"]=asm["_emscripten_bind_btWheelInfo_get_m_worldTransform_0"];var _emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0=Module["_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0"];var _emscripten_bind_btBvhTriangleMeshShape___destroy___0=Module["_emscripten_bind_btBvhTriangleMeshShape___destroy___0"]=asm["_emscripten_bind_btBvhTriangleMeshShape___destroy___0"];var _emscripten_bind_Config_set_citerations_1=Module["_emscripten_bind_Config_set_citerations_1"]=asm["_emscripten_bind_Config_set_citerations_1"];var _emscripten_bind_btSoftBody_checkFace_3=Module["_emscripten_bind_btSoftBody_checkFace_3"]=asm["_emscripten_bind_btSoftBody_checkFace_3"];var _emscripten_bind_Config_get_kSKHR_CL_0=Module["_emscripten_bind_Config_get_kSKHR_CL_0"]=asm["_emscripten_bind_Config_get_kSKHR_CL_0"];var _emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0=Module["_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0"];var _free=Module["_free"]=asm["_free"];var _emscripten_bind_LocalConvexResult_LocalConvexResult_5=Module["_emscripten_bind_LocalConvexResult_LocalConvexResult_5"]=asm["_emscripten_bind_LocalConvexResult_LocalConvexResult_5"];var _emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1"];var _emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1"];var _emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0=Module["_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0"]=asm["_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0"];var _emscripten_bind_Config_set_diterations_1=Module["_emscripten_bind_Config_set_diterations_1"]=asm["_emscripten_bind_Config_set_diterations_1"];var _emscripten_bind_btGeneric6DofConstraint___destroy___0=Module["_emscripten_bind_btGeneric6DofConstraint___destroy___0"]=asm["_emscripten_bind_btGeneric6DofConstraint___destroy___0"];var _emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_1"];var _emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_3=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_3"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_3"];var _emscripten_bind_Config_set_kDP_1=Module["_emscripten_bind_Config_set_kDP_1"]=asm["_emscripten_bind_Config_set_kDP_1"];var _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0=Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0"];var _emscripten_bind_btConvexHullShape_addPoint_1=Module["_emscripten_bind_btConvexHullShape_addPoint_1"]=asm["_emscripten_bind_btConvexHullShape_addPoint_1"];var _emscripten_bind_btConvexHullShape_addPoint_2=Module["_emscripten_bind_btConvexHullShape_addPoint_2"]=asm["_emscripten_bind_btConvexHullShape_addPoint_2"];var _emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0=Module["_emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0"]=asm["_emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0"];var _emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_1=Module["_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_1"]=asm["_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_1"];var _emscripten_bind_btTransform_getOrigin_0=Module["_emscripten_bind_btTransform_getOrigin_0"]=asm["_emscripten_bind_btTransform_getOrigin_0"];var _emscripten_bind_Config_get_kKHR_0=Module["_emscripten_bind_Config_get_kKHR_0"]=asm["_emscripten_bind_Config_get_kKHR_0"];var _emscripten_bind_Material_get_m_kLST_0=Module["_emscripten_bind_Material_get_m_kLST_0"]=asm["_emscripten_bind_Material_get_m_kLST_0"];var _emscripten_bind_btHingeConstraint___destroy___0=Module["_emscripten_bind_btHingeConstraint___destroy___0"]=asm["_emscripten_bind_btHingeConstraint___destroy___0"];var _emscripten_bind_btPairCachingGhostObject_getUserPointer_0=Module["_emscripten_bind_btPairCachingGhostObject_getUserPointer_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getUserPointer_0"];var _emscripten_bind_btSoftBody_set_m_nodes_1=Module["_emscripten_bind_btSoftBody_set_m_nodes_1"]=asm["_emscripten_bind_btSoftBody_set_m_nodes_1"];var _emscripten_bind_btSoftBodyWorldInfo_set_air_density_1=Module["_emscripten_bind_btSoftBodyWorldInfo_set_air_density_1"]=asm["_emscripten_bind_btSoftBodyWorldInfo_set_air_density_1"];var _emscripten_bind_btDbvtBroadphase___destroy___0=Module["_emscripten_bind_btDbvtBroadphase___destroy___0"]=asm["_emscripten_bind_btDbvtBroadphase___destroy___0"];var _emscripten_bind_Config_set_viterations_1=Module["_emscripten_bind_Config_set_viterations_1"]=asm["_emscripten_bind_Config_set_viterations_1"];var _emscripten_bind_btConvexShape_calculateLocalInertia_2=Module["_emscripten_bind_btConvexShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConvexShape_calculateLocalInertia_2"];var _memset=Module["_memset"]=asm["_memset"];var _emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1=Module["_emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1"]=asm["_emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1"];var _emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0"];var _emscripten_bind_btTriangleMesh_btTriangleMesh_0=Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_0"]=asm["_emscripten_bind_btTriangleMesh_btTriangleMesh_0"];var _emscripten_bind_btTriangleMesh_btTriangleMesh_1=Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_1"]=asm["_emscripten_bind_btTriangleMesh_btTriangleMesh_1"];var _emscripten_bind_btTriangleMesh_btTriangleMesh_2=Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_2"]=asm["_emscripten_bind_btTriangleMesh_btTriangleMesh_2"];var _emscripten_bind_btWheelInfo_set_m_frictionSlip_1=Module["_emscripten_bind_btWheelInfo_set_m_frictionSlip_1"]=asm["_emscripten_bind_btWheelInfo_set_m_frictionSlip_1"];var _emscripten_bind_btSoftBodyHelpers___destroy___0=Module["_emscripten_bind_btSoftBodyHelpers___destroy___0"]=asm["_emscripten_bind_btSoftBodyHelpers___destroy___0"];var _emscripten_bind_btRigidBody_getCollisionShape_0=Module["_emscripten_bind_btRigidBody_getCollisionShape_0"]=asm["_emscripten_bind_btRigidBody_getCollisionShape_0"];var _emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1=Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1"];var _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0=Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0"]=asm["_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0"];var _emscripten_bind_btManifoldPoint_get_m_localPointB_0=Module["_emscripten_bind_btManifoldPoint_get_m_localPointB_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_localPointB_0"];var _emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3"];var _emscripten_bind_btSliderConstraint_setLowerLinLimit_1=Module["_emscripten_bind_btSliderConstraint_setLowerLinLimit_1"]=asm["_emscripten_bind_btSliderConstraint_setLowerLinLimit_1"];var _emscripten_bind_btRigidBody_getAngularVelocity_0=Module["_emscripten_bind_btRigidBody_getAngularVelocity_0"]=asm["_emscripten_bind_btRigidBody_getAngularVelocity_0"];var _emscripten_bind_btRotationalLimitMotor_set_m_loLimit_1=Module["_emscripten_bind_btRotationalLimitMotor_set_m_loLimit_1"]=asm["_emscripten_bind_btRotationalLimitMotor_set_m_loLimit_1"];var _emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1=Module["_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1"]=asm["_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1"];var _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0=Module["_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0"]=asm["_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0"];var _emscripten_bind_btRigidBody_setLinearVelocity_1=Module["_emscripten_bind_btRigidBody_setLinearVelocity_1"]=asm["_emscripten_bind_btRigidBody_setLinearVelocity_1"];var _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0=Module["_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0"];var _emscripten_bind_btVehicleTuning_btVehicleTuning_0=Module["_emscripten_bind_btVehicleTuning_btVehicleTuning_0"]=asm["_emscripten_bind_btVehicleTuning_btVehicleTuning_0"];var _emscripten_bind_RayResultCallback_set_m_collisionObject_1=Module["_emscripten_bind_RayResultCallback_set_m_collisionObject_1"]=asm["_emscripten_bind_RayResultCallback_set_m_collisionObject_1"];var _emscripten_bind_btDefaultSoftBodySolver___destroy___0=Module["_emscripten_bind_btDefaultSoftBodySolver___destroy___0"]=asm["_emscripten_bind_btDefaultSoftBodySolver___destroy___0"];var _emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1"];var _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0"];var _emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1=Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1"]=asm["_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1"];var _emscripten_bind_btDynamicsWorld_addAction_1=Module["_emscripten_bind_btDynamicsWorld_addAction_1"]=asm["_emscripten_bind_btDynamicsWorld_addAction_1"];var _emscripten_bind_btSoftBody_appendMaterial_0=Module["_emscripten_bind_btSoftBody_appendMaterial_0"]=asm["_emscripten_bind_btSoftBody_appendMaterial_0"];var _emscripten_bind_btSoftBodyWorldInfo_set_m_maxDisplacement_1=Module["_emscripten_bind_btSoftBodyWorldInfo_set_m_maxDisplacement_1"]=asm["_emscripten_bind_btSoftBodyWorldInfo_set_m_maxDisplacement_1"];var _emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_2=Module["_emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_2"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_2"];var _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0=Module["_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0"];var _emscripten_bind_btSoftBodyWorldInfo_get_air_density_0=Module["_emscripten_bind_btSoftBodyWorldInfo_get_air_density_0"]=asm["_emscripten_bind_btSoftBodyWorldInfo_get_air_density_0"];var _emscripten_bind_btSoftBody_setRestitution_1=Module["_emscripten_bind_btSoftBody_setRestitution_1"]=asm["_emscripten_bind_btSoftBody_setRestitution_1"];var _emscripten_bind_Config_set_kLF_1=Module["_emscripten_bind_Config_set_kLF_1"]=asm["_emscripten_bind_Config_set_kLF_1"];var _emscripten_bind_btSoftRigidDynamicsWorld_removeVehicle_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_removeVehicle_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_removeVehicle_1"];var _emscripten_enum_PHY_ScalarType_PHY_FLOAT=Module["_emscripten_enum_PHY_ScalarType_PHY_FLOAT"]=asm["_emscripten_enum_PHY_ScalarType_PHY_FLOAT"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1"];var _emscripten_bind_Config_set_kSS_SPLT_CL_1=Module["_emscripten_bind_Config_set_kSS_SPLT_CL_1"]=asm["_emscripten_bind_Config_set_kSS_SPLT_CL_1"];var _emscripten_bind_btGhostObject_isActive_0=Module["_emscripten_bind_btGhostObject_isActive_0"]=asm["_emscripten_bind_btGhostObject_isActive_0"];var _emscripten_bind_btDiscreteDynamicsWorld_removeVehicle_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_removeVehicle_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_removeVehicle_1"];var _emscripten_bind_btKinematicCharacterController_setFallSpeed_1=Module["_emscripten_bind_btKinematicCharacterController_setFallSpeed_1"]=asm["_emscripten_bind_btKinematicCharacterController_setFallSpeed_1"];var _emscripten_bind_btRigidBody_setActivationState_1=Module["_emscripten_bind_btRigidBody_setActivationState_1"]=asm["_emscripten_bind_btRigidBody_setActivationState_1"];var _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0=Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0"]=asm["_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0"];var _emscripten_bind_ClosestConvexResultCallback_hasHit_0=Module["_emscripten_bind_ClosestConvexResultCallback_hasHit_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_hasHit_0"];var _emscripten_bind_btCapsuleShapeZ___destroy___0=Module["_emscripten_bind_btCapsuleShapeZ___destroy___0"]=asm["_emscripten_bind_btCapsuleShapeZ___destroy___0"];var _emscripten_bind_btRaycastVehicle_getRigidBody_0=Module["_emscripten_bind_btRaycastVehicle_getRigidBody_0"]=asm["_emscripten_bind_btRaycastVehicle_getRigidBody_0"];var _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0=Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0"]=asm["_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0"];var _emscripten_bind_btSoftBody_get_m_materials_0=Module["_emscripten_bind_btSoftBody_get_m_materials_0"]=asm["_emscripten_bind_btSoftBody_get_m_materials_0"];var _emscripten_bind_btTriangleMesh_addTriangle_3=Module["_emscripten_bind_btTriangleMesh_addTriangle_3"]=asm["_emscripten_bind_btTriangleMesh_addTriangle_3"];var _emscripten_bind_btGhostObject_getOverlappingObject_1=Module["_emscripten_bind_btGhostObject_getOverlappingObject_1"]=asm["_emscripten_bind_btGhostObject_getOverlappingObject_1"];var _emscripten_bind_btTriangleMesh_addTriangle_4=Module["_emscripten_bind_btTriangleMesh_addTriangle_4"]=asm["_emscripten_bind_btTriangleMesh_addTriangle_4"];var _emscripten_bind_btSoftRigidDynamicsWorld_getDispatchInfo_0=Module["_emscripten_bind_btSoftRigidDynamicsWorld_getDispatchInfo_0"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_getDispatchInfo_0"];var _emscripten_bind_btSoftBodyWorldInfo_set_water_normal_1=Module["_emscripten_bind_btSoftBodyWorldInfo_set_water_normal_1"]=asm["_emscripten_bind_btSoftBodyWorldInfo_set_water_normal_1"];var _emscripten_bind_Config_get_kDF_0=Module["_emscripten_bind_Config_get_kDF_0"]=asm["_emscripten_bind_Config_get_kDF_0"];var _emscripten_bind_btRigidBody_applyTorqueImpulse_1=Module["_emscripten_bind_btRigidBody_applyTorqueImpulse_1"]=asm["_emscripten_bind_btRigidBody_applyTorqueImpulse_1"];var _emscripten_bind_btRigidBody_setCollisionFlags_1=Module["_emscripten_bind_btRigidBody_setCollisionFlags_1"]=asm["_emscripten_bind_btRigidBody_setCollisionFlags_1"];var _emscripten_bind_btWheelInfo_get_m_steering_0=Module["_emscripten_bind_btWheelInfo_get_m_steering_0"]=asm["_emscripten_bind_btWheelInfo_get_m_steering_0"];var _emscripten_bind_btRigidBody___destroy___0=Module["_emscripten_bind_btRigidBody___destroy___0"]=asm["_emscripten_bind_btRigidBody___destroy___0"];var _emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1=Module["_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1"]=asm["_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1"];var _emscripten_bind_Config_set_kCHR_1=Module["_emscripten_bind_Config_set_kCHR_1"]=asm["_emscripten_bind_Config_set_kCHR_1"];var _emscripten_bind_btSoftRigidDynamicsWorld_contactTest_2=Module["_emscripten_bind_btSoftRigidDynamicsWorld_contactTest_2"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_contactTest_2"];var _emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2=Module["_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2"]=asm["_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2"];var _emscripten_bind_btSoftRigidDynamicsWorld_addSoftBody_3=Module["_emscripten_bind_btSoftRigidDynamicsWorld_addSoftBody_3"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_addSoftBody_3"];var _emscripten_bind_btSoftRigidDynamicsWorld_getWorldInfo_0=Module["_emscripten_bind_btSoftRigidDynamicsWorld_getWorldInfo_0"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_getWorldInfo_0"];var _emscripten_bind_btSliderConstraint_btSliderConstraint_3=Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_3"]=asm["_emscripten_bind_btSliderConstraint_btSliderConstraint_3"];var _emscripten_bind_btTransform___destroy___0=Module["_emscripten_bind_btTransform___destroy___0"]=asm["_emscripten_bind_btTransform___destroy___0"];var _emscripten_bind_btDynamicsWorld_convexSweepTest_5=Module["_emscripten_bind_btDynamicsWorld_convexSweepTest_5"]=asm["_emscripten_bind_btDynamicsWorld_convexSweepTest_5"];var _emscripten_bind_btSliderConstraint___destroy___0=Module["_emscripten_bind_btSliderConstraint___destroy___0"]=asm["_emscripten_bind_btSliderConstraint___destroy___0"];var _emscripten_bind_btRigidBody_forceActivationState_1=Module["_emscripten_bind_btRigidBody_forceActivationState_1"]=asm["_emscripten_bind_btRigidBody_forceActivationState_1"];var _emscripten_bind_btPoint2PointConstraint_setPivotB_1=Module["_emscripten_bind_btPoint2PointConstraint_setPivotB_1"]=asm["_emscripten_bind_btPoint2PointConstraint_setPivotB_1"];var _emscripten_bind_btManifoldPoint_getDistance_0=Module["_emscripten_bind_btManifoldPoint_getDistance_0"]=asm["_emscripten_bind_btManifoldPoint_getDistance_0"];var _emscripten_bind_btGhostPairCallback___destroy___0=Module["_emscripten_bind_btGhostPairCallback___destroy___0"]=asm["_emscripten_bind_btGhostPairCallback___destroy___0"];var _emscripten_bind_btTransform_setFromOpenGLMatrix_1=Module["_emscripten_bind_btTransform_setFromOpenGLMatrix_1"]=asm["_emscripten_bind_btTransform_setFromOpenGLMatrix_1"];var _emscripten_bind_btKinematicCharacterController_getMaxSlope_0=Module["_emscripten_bind_btKinematicCharacterController_getMaxSlope_0"]=asm["_emscripten_bind_btKinematicCharacterController_getMaxSlope_0"];var _emscripten_bind_btManifoldPoint_getPositionWorldOnA_0=Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0"]=asm["_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0"];var _emscripten_bind_btRaycastVehicle_addWheel_7=Module["_emscripten_bind_btRaycastVehicle_addWheel_7"]=asm["_emscripten_bind_btRaycastVehicle_addWheel_7"];var _emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1"];var _emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1=Module["_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1"];var _emscripten_bind_btStaticPlaneShape___destroy___0=Module["_emscripten_bind_btStaticPlaneShape___destroy___0"]=asm["_emscripten_bind_btStaticPlaneShape___destroy___0"];var _emscripten_bind_btHingeConstraint_enableMotor_1=Module["_emscripten_bind_btHingeConstraint_enableMotor_1"]=asm["_emscripten_bind_btHingeConstraint_enableMotor_1"];var _emscripten_bind_btCylinderShapeZ_setLocalScaling_1=Module["_emscripten_bind_btCylinderShapeZ_setLocalScaling_1"]=asm["_emscripten_bind_btCylinderShapeZ_setLocalScaling_1"];var _emscripten_bind_btBoxShape_setLocalScaling_1=Module["_emscripten_bind_btBoxShape_setLocalScaling_1"]=asm["_emscripten_bind_btBoxShape_setLocalScaling_1"];var _emscripten_bind_btConeShapeZ___destroy___0=Module["_emscripten_bind_btConeShapeZ___destroy___0"]=asm["_emscripten_bind_btConeShapeZ___destroy___0"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_4=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_4"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_4"];var _emscripten_bind_btDynamicsWorld_getPairCache_0=Module["_emscripten_bind_btDynamicsWorld_getPairCache_0"]=asm["_emscripten_bind_btDynamicsWorld_getPairCache_0"];var _emscripten_bind_btSoftRigidDynamicsWorld_convexSweepTest_5=Module["_emscripten_bind_btSoftRigidDynamicsWorld_convexSweepTest_5"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_convexSweepTest_5"];var _emscripten_bind_btRotationalLimitMotor_set_m_targetVelocity_1=Module["_emscripten_bind_btRotationalLimitMotor_set_m_targetVelocity_1"]=asm["_emscripten_bind_btRotationalLimitMotor_set_m_targetVelocity_1"];var _emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5=Module["_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5"];var _emscripten_bind_btSoftRigidDynamicsWorld_removeRigidBody_1=Module["_emscripten_bind_btSoftRigidDynamicsWorld_removeRigidBody_1"]=asm["_emscripten_bind_btSoftRigidDynamicsWorld_removeRigidBody_1"];var _emscripten_bind_btRigidBody_setRestitution_1=Module["_emscripten_bind_btRigidBody_setRestitution_1"]=asm["_emscripten_bind_btRigidBody_setRestitution_1"];var _emscripten_bind_btVector4_btVector4_0=Module["_emscripten_bind_btVector4_btVector4_0"]=asm["_emscripten_bind_btVector4_btVector4_0"];var _emscripten_bind_btVector4_x_0=Module["_emscripten_bind_btVector4_x_0"]=asm["_emscripten_bind_btVector4_x_0"];var _emscripten_bind_btVector4_btVector4_4=Module["_emscripten_bind_btVector4_btVector4_4"]=asm["_emscripten_bind_btVector4_btVector4_4"];var _emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1=Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1"]=asm["_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1"];var _emscripten_bind_btKinematicCharacterController___destroy___0=Module["_emscripten_bind_btKinematicCharacterController___destroy___0"]=asm["_emscripten_bind_btKinematicCharacterController___destroy___0"];var _emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1=Module["_emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1"];var _emscripten_bind_tMaterialArray_at_1=Module["_emscripten_bind_tMaterialArray_at_1"]=asm["_emscripten_bind_tMaterialArray_at_1"];var _emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1=Module["_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1"];var _emscripten_bind_btVector4_op_sub_1=Module["_emscripten_bind_btVector4_op_sub_1"]=asm["_emscripten_bind_btVector4_op_sub_1"];var _emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1=Module["_emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1"]=asm["_emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1"];var _emscripten_bind_btSoftBodyWorldInfo_get_water_offset_0=Module["_emscripten_bind_btSoftBodyWorldInfo_get_water_offset_0"]=asm["_emscripten_bind_btSoftBodyWorldInfo_get_water_offset_0"];var _emscripten_bind_btDiscreteDynamicsWorld_rayTest_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3"];var _emscripten_bind_btWheelInfo_get_m_raycastInfo_0=Module["_emscripten_bind_btWheelInfo_get_m_raycastInfo_0"]=asm["_emscripten_bind_btWheelInfo_get_m_raycastInfo_0"];var _emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0=Module["_emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0"]=asm["_emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0"];var _emscripten_bind_btConvexShape_getMargin_0=Module["_emscripten_bind_btConvexShape_getMargin_0"]=asm["_emscripten_bind_btConvexShape_getMargin_0"];var _emscripten_bind_btGhostPairCallback_btGhostPairCallback_0=Module["_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0"]=asm["_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0"];var _emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1=Module["_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1"]=asm["_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1"];var _emscripten_bind_btPairCachingGhostObject_isActive_0=Module["_emscripten_bind_btPairCachingGhostObject_isActive_0"]=asm["_emscripten_bind_btPairCachingGhostObject_isActive_0"];var _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0=Module["_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0"];var dynCall_viiiii=Module["dynCall_viiiii"]=asm["dynCall_viiiii"];var dynCall_vid=Module["dynCall_vid"]=asm["dynCall_vid"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_viiidii=Module["dynCall_viiidii"]=asm["dynCall_viiidii"];var dynCall_vii=Module["dynCall_vii"]=asm["dynCall_vii"];var dynCall_iiiiiiiiiii=Module["dynCall_iiiiiiiiiii"]=asm["dynCall_iiiiiiiiiii"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_viidi=Module["dynCall_viidi"]=asm["dynCall_viidi"];var dynCall_viddiii=Module["dynCall_viddiii"]=asm["dynCall_viddiii"];var dynCall_vidii=Module["dynCall_vidii"]=asm["dynCall_vidii"];var dynCall_iiiii=Module["dynCall_iiiii"]=asm["dynCall_iiiii"];var dynCall_vidi=Module["dynCall_vidi"]=asm["dynCall_vidi"];var dynCall_diiiiiiii=Module["dynCall_diiiiiiii"]=asm["dynCall_diiiiiiii"];var dynCall_viiiiddddiid=Module["dynCall_viiiiddddiid"]=asm["dynCall_viiiiddddiid"];var dynCall_diiiii=Module["dynCall_diiiii"]=asm["dynCall_diiiii"];var dynCall_vidd=Module["dynCall_vidd"]=asm["dynCall_vidd"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_viiiiid=Module["dynCall_viiiiid"]=asm["dynCall_viiiiid"];var dynCall_viiiiii=Module["dynCall_viiiiii"]=asm["dynCall_viiiiii"];var dynCall_iiid=Module["dynCall_iiid"]=asm["dynCall_iiid"];var dynCall_di=Module["dynCall_di"]=asm["dynCall_di"];var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=asm["dynCall_iiiiiii"];var dynCall_diiidii=Module["dynCall_diiidii"]=asm["dynCall_diiidii"];var dynCall_viidii=Module["dynCall_viidii"]=asm["dynCall_viidii"];var dynCall_viiiiiii=Module["dynCall_viiiiiii"]=asm["dynCall_viiiiiii"];var dynCall_viiiiiiiii=Module["dynCall_viiiiiiiii"]=asm["dynCall_viiiiiiiii"];var dynCall_viiiiiiiiii=Module["dynCall_viiiiiiiiii"]=asm["dynCall_viiiiiiiiii"];var dynCall_iii=Module["dynCall_iii"]=asm["dynCall_iii"];var dynCall_diii=Module["dynCall_diii"]=asm["dynCall_diii"];var dynCall_diiiiiiiiii=Module["dynCall_diiiiiiiiii"]=asm["dynCall_diiiiiiiiii"];var dynCall_viiiid=Module["dynCall_viiiid"]=asm["dynCall_viiiid"];var dynCall_diiiiiiiii=Module["dynCall_diiiiiiiii"]=asm["dynCall_diiiiiiiii"];var dynCall_did=Module["dynCall_did"]=asm["dynCall_did"];var dynCall_viiiidddddidi=Module["dynCall_viiiidddddidi"]=asm["dynCall_viiiidddddidi"];var dynCall_diidii=Module["dynCall_diidii"]=asm["dynCall_diidii"];var dynCall_diiii=Module["dynCall_diiii"]=asm["dynCall_diiii"];var dynCall_iiiiiiiiii=Module["dynCall_iiiiiiiiii"]=asm["dynCall_iiiiiiiiii"];var dynCall_viiid=Module["dynCall_viiid"]=asm["dynCall_viiid"];var dynCall_viii=Module["dynCall_viii"]=asm["dynCall_viii"];var dynCall_v=Module["dynCall_v"]=asm["dynCall_v"];var dynCall_viid=Module["dynCall_viid"]=asm["dynCall_viid"];var dynCall_iidid=Module["dynCall_iidid"]=asm["dynCall_iidid"];var dynCall_viiii=Module["dynCall_viiii"]=asm["dynCall_viiii"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.establishStackSpace=asm["establishStackSpace"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);try{var ret=Module["_main"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(Module["_main"]&&shouldRunNow)Module["callMain"](args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["exit"](status)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}Module["noExitRuntime"]=true;run();function WrapperObject(){}WrapperObject.prototype=Object.create(WrapperObject.prototype);WrapperObject.prototype.constructor=WrapperObject;WrapperObject.prototype.__class__=WrapperObject;WrapperObject.__cache__={};Module["WrapperObject"]=WrapperObject;function getCache(__class__){return(__class__||WrapperObject).__cache__}Module["getCache"]=getCache;function wrapPointer(ptr,__class__){var cache=getCache(__class__);var ret=cache[ptr];if(ret)return ret;ret=Object.create((__class__||WrapperObject).prototype);ret.ptr=ptr;return cache[ptr]=ret}Module["wrapPointer"]=wrapPointer;function castObject(obj,__class__){return wrapPointer(obj.ptr,__class__)}Module["castObject"]=castObject;Module["NULL"]=wrapPointer(0);function destroy(obj){if(!obj["__destroy__"])throw"Error: Cannot destroy object. (Did you create it yourself?)";obj["__destroy__"]();delete getCache(obj.__class__)[obj.ptr]}Module["destroy"]=destroy;function compare(obj1,obj2){return obj1.ptr===obj2.ptr}Module["compare"]=compare;function getPointer(obj){return obj.ptr}Module["getPointer"]=getPointer;function getClass(obj){return obj.__class__}Module["getClass"]=getClass;var ensureCache={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:(function(){if(this.needed){for(var i=0;i<this.temps.length;i++){Module["_free"](this.temps[i])}this.temps.length=0;Module["_free"](this.buffer);this.buffer=0;this.size+=this.needed;this.needed=0}if(!this.buffer){this.size+=128;this.buffer=Module["_malloc"](this.size);assert(this.buffer)}this.pos=0}),alloc:(function(array,view){assert(this.buffer);var bytes=view.BYTES_PER_ELEMENT;var len=array.length*bytes;len=len+7&-8;var ret;if(this.pos+len>=this.size){assert(len>0);this.needed+=len;ret=Module["_malloc"](len);this.temps.push(ret)}else{ret=this.buffer+this.pos;this.pos+=len}var retShifted=ret;switch(bytes){case 2:retShifted>>=1;break;case 4:retShifted>>=2;break;case 8:retShifted>>=3;break}for(var i=0;i<array.length;i++){view[retShifted+i]=array[i]}return ret})};function ensureInt32(value){if(typeof value==="object")return ensureCache.alloc(value,HEAP32);return value}function ensureFloat32(value){if(typeof value==="object")return ensureCache.alloc(value,HEAPF32);return value}function btCollisionWorld(){throw"cannot construct a btCollisionWorld, no constructor in IDL"}btCollisionWorld.prototype=Object.create(WrapperObject.prototype);btCollisionWorld.prototype.constructor=btCollisionWorld;btCollisionWorld.prototype.__class__=btCollisionWorld;btCollisionWorld.__cache__={};Module["btCollisionWorld"]=btCollisionWorld;btCollisionWorld.prototype["getDispatcher"]=btCollisionWorld.prototype.getDispatcher=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionWorld_getDispatcher_0(self),btDispatcher)});btCollisionWorld.prototype["rayTest"]=btCollisionWorld.prototype.rayTest=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btCollisionWorld_rayTest_3(self,arg0,arg1,arg2)});btCollisionWorld.prototype["getPairCache"]=btCollisionWorld.prototype.getPairCache=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionWorld_getPairCache_0(self),btOverlappingPairCache)});btCollisionWorld.prototype["getDispatchInfo"]=btCollisionWorld.prototype.getDispatchInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionWorld_getDispatchInfo_0(self),btDispatcherInfo)});btCollisionWorld.prototype["addCollisionObject"]=btCollisionWorld.prototype.addCollisionObject=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg1===undefined){_emscripten_bind_btCollisionWorld_addCollisionObject_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btCollisionWorld_addCollisionObject_2(self,arg0,arg1);return}_emscripten_bind_btCollisionWorld_addCollisionObject_3(self,arg0,arg1,arg2)});btCollisionWorld.prototype["getBroadphase"]=btCollisionWorld.prototype.getBroadphase=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionWorld_getBroadphase_0(self),btBroadphaseInterface)});btCollisionWorld.prototype["convexSweepTest"]=btCollisionWorld.prototype.convexSweepTest=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;_emscripten_bind_btCollisionWorld_convexSweepTest_5(self,arg0,arg1,arg2,arg3,arg4)});btCollisionWorld.prototype["contactPairTest"]=btCollisionWorld.prototype.contactPairTest=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btCollisionWorld_contactPairTest_3(self,arg0,arg1,arg2)});btCollisionWorld.prototype["contactTest"]=btCollisionWorld.prototype.contactTest=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCollisionWorld_contactTest_2(self,arg0,arg1)});btCollisionWorld.prototype["__destroy__"]=btCollisionWorld.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCollisionWorld___destroy___0(self)});function btCollisionShape(){throw"cannot construct a btCollisionShape, no constructor in IDL"}btCollisionShape.prototype=Object.create(WrapperObject.prototype);btCollisionShape.prototype.constructor=btCollisionShape;btCollisionShape.prototype.__class__=btCollisionShape;btCollisionShape.__cache__={};Module["btCollisionShape"]=btCollisionShape;btCollisionShape.prototype["setLocalScaling"]=btCollisionShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionShape_setLocalScaling_1(self,arg0)});btCollisionShape.prototype["calculateLocalInertia"]=btCollisionShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCollisionShape_calculateLocalInertia_2(self,arg0,arg1)});btCollisionShape.prototype["setMargin"]=btCollisionShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionShape_setMargin_1(self,arg0)});btCollisionShape.prototype["getMargin"]=btCollisionShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btCollisionShape_getMargin_0(self)});btCollisionShape.prototype["__destroy__"]=btCollisionShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCollisionShape___destroy___0(self)});function btCollisionObject(){throw"cannot construct a btCollisionObject, no constructor in IDL"}btCollisionObject.prototype=Object.create(WrapperObject.prototype);btCollisionObject.prototype.constructor=btCollisionObject;btCollisionObject.prototype.__class__=btCollisionObject;btCollisionObject.__cache__={};Module["btCollisionObject"]=btCollisionObject;btCollisionObject.prototype["setAnisotropicFriction"]=btCollisionObject.prototype.setAnisotropicFriction=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCollisionObject_setAnisotropicFriction_2(self,arg0,arg1)});btCollisionObject.prototype["getCollisionShape"]=btCollisionObject.prototype.getCollisionShape=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionObject_getCollisionShape_0(self),btCollisionShape)});btCollisionObject.prototype["setContactProcessingThreshold"]=btCollisionObject.prototype.setContactProcessingThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1(self,arg0)});btCollisionObject.prototype["setActivationState"]=btCollisionObject.prototype.setActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setActivationState_1(self,arg0)});btCollisionObject.prototype["forceActivationState"]=btCollisionObject.prototype.forceActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_forceActivationState_1(self,arg0)});btCollisionObject.prototype["activate"]=btCollisionObject.prototype.activate=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg0===undefined){_emscripten_bind_btCollisionObject_activate_0(self);return}_emscripten_bind_btCollisionObject_activate_1(self,arg0)});btCollisionObject.prototype["isActive"]=btCollisionObject.prototype.isActive=(function(){var self=this.ptr;return!!_emscripten_bind_btCollisionObject_isActive_0(self)});btCollisionObject.prototype["isKinematicObject"]=btCollisionObject.prototype.isKinematicObject=(function(){var self=this.ptr;return!!_emscripten_bind_btCollisionObject_isKinematicObject_0(self)});btCollisionObject.prototype["setRestitution"]=btCollisionObject.prototype.setRestitution=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setRestitution_1(self,arg0)});btCollisionObject.prototype["setFriction"]=btCollisionObject.prototype.setFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setFriction_1(self,arg0)});btCollisionObject.prototype["setRollingFriction"]=btCollisionObject.prototype.setRollingFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setRollingFriction_1(self,arg0)});btCollisionObject.prototype["getWorldTransform"]=btCollisionObject.prototype.getWorldTransform=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionObject_getWorldTransform_0(self),btTransform)});btCollisionObject.prototype["getCollisionFlags"]=btCollisionObject.prototype.getCollisionFlags=(function(){var self=this.ptr;return _emscripten_bind_btCollisionObject_getCollisionFlags_0(self)});btCollisionObject.prototype["setCollisionFlags"]=btCollisionObject.prototype.setCollisionFlags=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setCollisionFlags_1(self,arg0)});btCollisionObject.prototype["setWorldTransform"]=btCollisionObject.prototype.setWorldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setWorldTransform_1(self,arg0)});btCollisionObject.prototype["setCollisionShape"]=btCollisionObject.prototype.setCollisionShape=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setCollisionShape_1(self,arg0)});btCollisionObject.prototype["setCcdMotionThreshold"]=btCollisionObject.prototype.setCcdMotionThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1(self,arg0)});btCollisionObject.prototype["setCcdSweptSphereRadius"]=btCollisionObject.prototype.setCcdSweptSphereRadius=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1(self,arg0)});btCollisionObject.prototype["getUserIndex"]=btCollisionObject.prototype.getUserIndex=(function(){var self=this.ptr;return _emscripten_bind_btCollisionObject_getUserIndex_0(self)});btCollisionObject.prototype["setUserIndex"]=btCollisionObject.prototype.setUserIndex=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setUserIndex_1(self,arg0)});btCollisionObject.prototype["getUserPointer"]=btCollisionObject.prototype.getUserPointer=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionObject_getUserPointer_0(self),VoidPtr)});btCollisionObject.prototype["setUserPointer"]=btCollisionObject.prototype.setUserPointer=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCollisionObject_setUserPointer_1(self,arg0)});btCollisionObject.prototype["__destroy__"]=btCollisionObject.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCollisionObject___destroy___0(self)});function btDynamicsWorld(){throw"cannot construct a btDynamicsWorld, no constructor in IDL"}btDynamicsWorld.prototype=Object.create(btCollisionWorld.prototype);btDynamicsWorld.prototype.constructor=btDynamicsWorld;btDynamicsWorld.prototype.__class__=btDynamicsWorld;btDynamicsWorld.__cache__={};Module["btDynamicsWorld"]=btDynamicsWorld;btDynamicsWorld.prototype["addAction"]=btDynamicsWorld.prototype.addAction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDynamicsWorld_addAction_1(self,arg0)});btDynamicsWorld.prototype["removeAction"]=btDynamicsWorld.prototype.removeAction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDynamicsWorld_removeAction_1(self,arg0)});btDynamicsWorld.prototype["getSolverInfo"]=btDynamicsWorld.prototype.getSolverInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDynamicsWorld_getSolverInfo_0(self),btContactSolverInfo)});btDynamicsWorld.prototype["getDispatcher"]=btDynamicsWorld.prototype.getDispatcher=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDynamicsWorld_getDispatcher_0(self),btDispatcher)});btDynamicsWorld.prototype["rayTest"]=btDynamicsWorld.prototype.rayTest=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btDynamicsWorld_rayTest_3(self,arg0,arg1,arg2)});btDynamicsWorld.prototype["getPairCache"]=btDynamicsWorld.prototype.getPairCache=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDynamicsWorld_getPairCache_0(self),btOverlappingPairCache)});btDynamicsWorld.prototype["getDispatchInfo"]=btDynamicsWorld.prototype.getDispatchInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDynamicsWorld_getDispatchInfo_0(self),btDispatcherInfo)});btDynamicsWorld.prototype["addCollisionObject"]=btDynamicsWorld.prototype.addCollisionObject=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg1===undefined){_emscripten_bind_btDynamicsWorld_addCollisionObject_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btDynamicsWorld_addCollisionObject_2(self,arg0,arg1);return}_emscripten_bind_btDynamicsWorld_addCollisionObject_3(self,arg0,arg1,arg2)});btDynamicsWorld.prototype["getBroadphase"]=btDynamicsWorld.prototype.getBroadphase=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDynamicsWorld_getBroadphase_0(self),btBroadphaseInterface)});btDynamicsWorld.prototype["convexSweepTest"]=btDynamicsWorld.prototype.convexSweepTest=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;_emscripten_bind_btDynamicsWorld_convexSweepTest_5(self,arg0,arg1,arg2,arg3,arg4)});btDynamicsWorld.prototype["contactPairTest"]=btDynamicsWorld.prototype.contactPairTest=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btDynamicsWorld_contactPairTest_3(self,arg0,arg1,arg2)});btDynamicsWorld.prototype["contactTest"]=btDynamicsWorld.prototype.contactTest=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btDynamicsWorld_contactTest_2(self,arg0,arg1)});btDynamicsWorld.prototype["__destroy__"]=btDynamicsWorld.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDynamicsWorld___destroy___0(self)});function btTypedConstraint(){throw"cannot construct a btTypedConstraint, no constructor in IDL"}btTypedConstraint.prototype=Object.create(WrapperObject.prototype);btTypedConstraint.prototype.constructor=btTypedConstraint;btTypedConstraint.prototype.__class__=btTypedConstraint;btTypedConstraint.__cache__={};Module["btTypedConstraint"]=btTypedConstraint;btTypedConstraint.prototype["enableFeedback"]=btTypedConstraint.prototype.enableFeedback=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btTypedConstraint_enableFeedback_1(self,arg0)});btTypedConstraint.prototype["getBreakingImpulseThreshold"]=btTypedConstraint.prototype.getBreakingImpulseThreshold=(function(){var self=this.ptr;return _emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0(self)});btTypedConstraint.prototype["setBreakingImpulseThreshold"]=btTypedConstraint.prototype.setBreakingImpulseThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1(self,arg0)});btTypedConstraint.prototype["__destroy__"]=btTypedConstraint.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btTypedConstraint___destroy___0(self)});function btConcaveShape(){throw"cannot construct a btConcaveShape, no constructor in IDL"}btConcaveShape.prototype=Object.create(btCollisionShape.prototype);btConcaveShape.prototype.constructor=btConcaveShape;btConcaveShape.prototype.__class__=btConcaveShape;btConcaveShape.__cache__={};Module["btConcaveShape"]=btConcaveShape;btConcaveShape.prototype["setLocalScaling"]=btConcaveShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConcaveShape_setLocalScaling_1(self,arg0)});btConcaveShape.prototype["calculateLocalInertia"]=btConcaveShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btConcaveShape_calculateLocalInertia_2(self,arg0,arg1)});btConcaveShape.prototype["__destroy__"]=btConcaveShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConcaveShape___destroy___0(self)});function btCapsuleShape(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;this.ptr=_emscripten_bind_btCapsuleShape_btCapsuleShape_2(arg0,arg1);getCache(btCapsuleShape)[this.ptr]=this}btCapsuleShape.prototype=Object.create(btCollisionShape.prototype);btCapsuleShape.prototype.constructor=btCapsuleShape;btCapsuleShape.prototype.__class__=btCapsuleShape;btCapsuleShape.__cache__={};Module["btCapsuleShape"]=btCapsuleShape;btCapsuleShape.prototype["setMargin"]=btCapsuleShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCapsuleShape_setMargin_1(self,arg0)});btCapsuleShape.prototype["getMargin"]=btCapsuleShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btCapsuleShape_getMargin_0(self)});btCapsuleShape.prototype["setLocalScaling"]=btCapsuleShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCapsuleShape_setLocalScaling_1(self,arg0)});btCapsuleShape.prototype["calculateLocalInertia"]=btCapsuleShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCapsuleShape_calculateLocalInertia_2(self,arg0,arg1)});btCapsuleShape.prototype["__destroy__"]=btCapsuleShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCapsuleShape___destroy___0(self)});function btDefaultCollisionConfiguration(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg0===undefined){this.ptr=_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0();getCache(btDefaultCollisionConfiguration)[this.ptr]=this;return}this.ptr=_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1(arg0);getCache(btDefaultCollisionConfiguration)[this.ptr]=this}btDefaultCollisionConfiguration.prototype=Object.create(WrapperObject.prototype);btDefaultCollisionConfiguration.prototype.constructor=btDefaultCollisionConfiguration;btDefaultCollisionConfiguration.prototype.__class__=btDefaultCollisionConfiguration;btDefaultCollisionConfiguration.__cache__={};Module["btDefaultCollisionConfiguration"]=btDefaultCollisionConfiguration;btDefaultCollisionConfiguration.prototype["__destroy__"]=btDefaultCollisionConfiguration.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDefaultCollisionConfiguration___destroy___0(self)});function ConvexResultCallback(){throw"cannot construct a ConvexResultCallback, no constructor in IDL"}ConvexResultCallback.prototype=Object.create(WrapperObject.prototype);ConvexResultCallback.prototype.constructor=ConvexResultCallback;ConvexResultCallback.prototype.__class__=ConvexResultCallback;ConvexResultCallback.__cache__={};Module["ConvexResultCallback"]=ConvexResultCallback;ConvexResultCallback.prototype["hasHit"]=ConvexResultCallback.prototype.hasHit=(function(){var self=this.ptr;return!!_emscripten_bind_ConvexResultCallback_hasHit_0(self)});ConvexResultCallback.prototype["get_m_collisionFilterGroup"]=ConvexResultCallback.prototype.get_m_collisionFilterGroup=(function(){var self=this.ptr;return _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0(self)});ConvexResultCallback.prototype["set_m_collisionFilterGroup"]=ConvexResultCallback.prototype.set_m_collisionFilterGroup=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1(self,arg0)});ConvexResultCallback.prototype["get_m_collisionFilterMask"]=ConvexResultCallback.prototype.get_m_collisionFilterMask=(function(){var self=this.ptr;return _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0(self)});ConvexResultCallback.prototype["set_m_collisionFilterMask"]=ConvexResultCallback.prototype.set_m_collisionFilterMask=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1(self,arg0)});ConvexResultCallback.prototype["get_m_closestHitFraction"]=ConvexResultCallback.prototype.get_m_closestHitFraction=(function(){var self=this.ptr;return _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0(self)});ConvexResultCallback.prototype["set_m_closestHitFraction"]=ConvexResultCallback.prototype.set_m_closestHitFraction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1(self,arg0)});ConvexResultCallback.prototype["__destroy__"]=ConvexResultCallback.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_ConvexResultCallback___destroy___0(self)});function btTriangleMeshShape(){throw"cannot construct a btTriangleMeshShape, no constructor in IDL"}btTriangleMeshShape.prototype=Object.create(btConcaveShape.prototype);btTriangleMeshShape.prototype.constructor=btTriangleMeshShape;btTriangleMeshShape.prototype.__class__=btTriangleMeshShape;btTriangleMeshShape.__cache__={};Module["btTriangleMeshShape"]=btTriangleMeshShape;btTriangleMeshShape.prototype["setLocalScaling"]=btTriangleMeshShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btTriangleMeshShape_setLocalScaling_1(self,arg0)});btTriangleMeshShape.prototype["calculateLocalInertia"]=btTriangleMeshShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2(self,arg0,arg1)});btTriangleMeshShape.prototype["__destroy__"]=btTriangleMeshShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btTriangleMeshShape___destroy___0(self)});function btGhostObject(){this.ptr=_emscripten_bind_btGhostObject_btGhostObject_0();getCache(btGhostObject)[this.ptr]=this}btGhostObject.prototype=Object.create(btCollisionObject.prototype);btGhostObject.prototype.constructor=btGhostObject;btGhostObject.prototype.__class__=btGhostObject;btGhostObject.__cache__={};Module["btGhostObject"]=btGhostObject;btGhostObject.prototype["getNumOverlappingObjects"]=btGhostObject.prototype.getNumOverlappingObjects=(function(){var self=this.ptr;return _emscripten_bind_btGhostObject_getNumOverlappingObjects_0(self)});btGhostObject.prototype["getOverlappingObject"]=btGhostObject.prototype.getOverlappingObject=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btGhostObject_getOverlappingObject_1(self,arg0),btCollisionObject)});btGhostObject.prototype["setAnisotropicFriction"]=btGhostObject.prototype.setAnisotropicFriction=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btGhostObject_setAnisotropicFriction_2(self,arg0,arg1)});btGhostObject.prototype["getCollisionShape"]=btGhostObject.prototype.getCollisionShape=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btGhostObject_getCollisionShape_0(self),btCollisionShape)});btGhostObject.prototype["setContactProcessingThreshold"]=btGhostObject.prototype.setContactProcessingThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setContactProcessingThreshold_1(self,arg0)});btGhostObject.prototype["setActivationState"]=btGhostObject.prototype.setActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setActivationState_1(self,arg0)});btGhostObject.prototype["forceActivationState"]=btGhostObject.prototype.forceActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_forceActivationState_1(self,arg0)});btGhostObject.prototype["activate"]=btGhostObject.prototype.activate=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg0===undefined){_emscripten_bind_btGhostObject_activate_0(self);return}_emscripten_bind_btGhostObject_activate_1(self,arg0)});btGhostObject.prototype["isActive"]=btGhostObject.prototype.isActive=(function(){var self=this.ptr;return!!_emscripten_bind_btGhostObject_isActive_0(self)});btGhostObject.prototype["isKinematicObject"]=btGhostObject.prototype.isKinematicObject=(function(){var self=this.ptr;return!!_emscripten_bind_btGhostObject_isKinematicObject_0(self)});btGhostObject.prototype["setRestitution"]=btGhostObject.prototype.setRestitution=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setRestitution_1(self,arg0)});btGhostObject.prototype["setFriction"]=btGhostObject.prototype.setFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setFriction_1(self,arg0)});btGhostObject.prototype["setRollingFriction"]=btGhostObject.prototype.setRollingFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setRollingFriction_1(self,arg0)});btGhostObject.prototype["getWorldTransform"]=btGhostObject.prototype.getWorldTransform=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btGhostObject_getWorldTransform_0(self),btTransform)});btGhostObject.prototype["getCollisionFlags"]=btGhostObject.prototype.getCollisionFlags=(function(){var self=this.ptr;return _emscripten_bind_btGhostObject_getCollisionFlags_0(self)});btGhostObject.prototype["setCollisionFlags"]=btGhostObject.prototype.setCollisionFlags=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setCollisionFlags_1(self,arg0)});btGhostObject.prototype["setWorldTransform"]=btGhostObject.prototype.setWorldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setWorldTransform_1(self,arg0)});btGhostObject.prototype["setCollisionShape"]=btGhostObject.prototype.setCollisionShape=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setCollisionShape_1(self,arg0)});btGhostObject.prototype["setCcdMotionThreshold"]=btGhostObject.prototype.setCcdMotionThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setCcdMotionThreshold_1(self,arg0)});btGhostObject.prototype["setCcdSweptSphereRadius"]=btGhostObject.prototype.setCcdSweptSphereRadius=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1(self,arg0)});btGhostObject.prototype["getUserIndex"]=btGhostObject.prototype.getUserIndex=(function(){var self=this.ptr;return _emscripten_bind_btGhostObject_getUserIndex_0(self)});btGhostObject.prototype["setUserIndex"]=btGhostObject.prototype.setUserIndex=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setUserIndex_1(self,arg0)});btGhostObject.prototype["getUserPointer"]=btGhostObject.prototype.getUserPointer=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btGhostObject_getUserPointer_0(self),VoidPtr)});btGhostObject.prototype["setUserPointer"]=btGhostObject.prototype.setUserPointer=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGhostObject_setUserPointer_1(self,arg0)});btGhostObject.prototype["__destroy__"]=btGhostObject.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btGhostObject___destroy___0(self)});function btConeShape(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;this.ptr=_emscripten_bind_btConeShape_btConeShape_2(arg0,arg1);getCache(btConeShape)[this.ptr]=this}btConeShape.prototype=Object.create(btCollisionShape.prototype);btConeShape.prototype.constructor=btConeShape;btConeShape.prototype.__class__=btConeShape;btConeShape.__cache__={};Module["btConeShape"]=btConeShape;btConeShape.prototype["setLocalScaling"]=btConeShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeShape_setLocalScaling_1(self,arg0)});btConeShape.prototype["calculateLocalInertia"]=btConeShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btConeShape_calculateLocalInertia_2(self,arg0,arg1)});btConeShape.prototype["__destroy__"]=btConeShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConeShape___destroy___0(self)});function btActionInterface(){throw"cannot construct a btActionInterface, no constructor in IDL"}btActionInterface.prototype=Object.create(WrapperObject.prototype);btActionInterface.prototype.constructor=btActionInterface;btActionInterface.prototype.__class__=btActionInterface;btActionInterface.__cache__={};Module["btActionInterface"]=btActionInterface;btActionInterface.prototype["__destroy__"]=btActionInterface.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btActionInterface___destroy___0(self)});function btVector3(arg0,arg1,arg2){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg0===undefined){this.ptr=_emscripten_bind_btVector3_btVector3_0();getCache(btVector3)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btVector3_btVector3_1(arg0);getCache(btVector3)[this.ptr]=this;return}if(arg2===undefined){this.ptr=_emscripten_bind_btVector3_btVector3_2(arg0,arg1);getCache(btVector3)[this.ptr]=this;return}this.ptr=_emscripten_bind_btVector3_btVector3_3(arg0,arg1,arg2);getCache(btVector3)[this.ptr]=this}btVector3.prototype=Object.create(WrapperObject.prototype);btVector3.prototype.constructor=btVector3;btVector3.prototype.__class__=btVector3;btVector3.__cache__={};Module["btVector3"]=btVector3;btVector3.prototype["length"]=btVector3.prototype.length=(function(){var self=this.ptr;return _emscripten_bind_btVector3_length_0(self)});btVector3.prototype["x"]=btVector3.prototype.x=(function(){var self=this.ptr;return _emscripten_bind_btVector3_x_0(self)});btVector3.prototype["y"]=btVector3.prototype.y=(function(){var self=this.ptr;return _emscripten_bind_btVector3_y_0(self)});btVector3.prototype["z"]=btVector3.prototype.z=(function(){var self=this.ptr;return _emscripten_bind_btVector3_z_0(self)});btVector3.prototype["setX"]=btVector3.prototype.setX=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVector3_setX_1(self,arg0)});btVector3.prototype["setY"]=btVector3.prototype.setY=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVector3_setY_1(self,arg0)});btVector3.prototype["setZ"]=btVector3.prototype.setZ=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVector3_setZ_1(self,arg0)});btVector3.prototype["setValue"]=btVector3.prototype.setValue=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btVector3_setValue_3(self,arg0,arg1,arg2)});btVector3.prototype["normalize"]=btVector3.prototype.normalize=(function(){var self=this.ptr;_emscripten_bind_btVector3_normalize_0(self)});btVector3.prototype["dot"]=btVector3.prototype.dot=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return _emscripten_bind_btVector3_dot_1(self,arg0)});btVector3.prototype["op_mul"]=btVector3.prototype.op_mul=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btVector3_op_mul_1(self,arg0),btVector3)});btVector3.prototype["op_add"]=btVector3.prototype.op_add=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btVector3_op_add_1(self,arg0),btVector3)});btVector3.prototype["op_sub"]=btVector3.prototype.op_sub=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btVector3_op_sub_1(self,arg0),btVector3)});btVector3.prototype["__destroy__"]=btVector3.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btVector3___destroy___0(self)});function btVehicleRaycaster(){throw"cannot construct a btVehicleRaycaster, no constructor in IDL"}btVehicleRaycaster.prototype=Object.create(WrapperObject.prototype);btVehicleRaycaster.prototype.constructor=btVehicleRaycaster;btVehicleRaycaster.prototype.__class__=btVehicleRaycaster;btVehicleRaycaster.__cache__={};Module["btVehicleRaycaster"]=btVehicleRaycaster;btVehicleRaycaster.prototype["__destroy__"]=btVehicleRaycaster.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btVehicleRaycaster___destroy___0(self)});function btQuadWord(){throw"cannot construct a btQuadWord, no constructor in IDL"}btQuadWord.prototype=Object.create(WrapperObject.prototype);btQuadWord.prototype.constructor=btQuadWord;btQuadWord.prototype.__class__=btQuadWord;btQuadWord.__cache__={};Module["btQuadWord"]=btQuadWord;btQuadWord.prototype["x"]=btQuadWord.prototype.x=(function(){var self=this.ptr;return _emscripten_bind_btQuadWord_x_0(self)});btQuadWord.prototype["y"]=btQuadWord.prototype.y=(function(){var self=this.ptr;return _emscripten_bind_btQuadWord_y_0(self)});btQuadWord.prototype["z"]=btQuadWord.prototype.z=(function(){var self=this.ptr;return _emscripten_bind_btQuadWord_z_0(self)});btQuadWord.prototype["w"]=btQuadWord.prototype.w=(function(){var self=this.ptr;return _emscripten_bind_btQuadWord_w_0(self)});btQuadWord.prototype["setX"]=btQuadWord.prototype.setX=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btQuadWord_setX_1(self,arg0)});btQuadWord.prototype["setY"]=btQuadWord.prototype.setY=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btQuadWord_setY_1(self,arg0)});btQuadWord.prototype["setZ"]=btQuadWord.prototype.setZ=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btQuadWord_setZ_1(self,arg0)});btQuadWord.prototype["setW"]=btQuadWord.prototype.setW=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btQuadWord_setW_1(self,arg0)});btQuadWord.prototype["__destroy__"]=btQuadWord.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btQuadWord___destroy___0(self)});function btCylinderShape(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;this.ptr=_emscripten_bind_btCylinderShape_btCylinderShape_1(arg0);getCache(btCylinderShape)[this.ptr]=this}btCylinderShape.prototype=Object.create(btCollisionShape.prototype);btCylinderShape.prototype.constructor=btCylinderShape;btCylinderShape.prototype.__class__=btCylinderShape;btCylinderShape.__cache__={};Module["btCylinderShape"]=btCylinderShape;btCylinderShape.prototype["setMargin"]=btCylinderShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCylinderShape_setMargin_1(self,arg0)});btCylinderShape.prototype["getMargin"]=btCylinderShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btCylinderShape_getMargin_0(self)});btCylinderShape.prototype["setLocalScaling"]=btCylinderShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCylinderShape_setLocalScaling_1(self,arg0)});btCylinderShape.prototype["calculateLocalInertia"]=btCylinderShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCylinderShape_calculateLocalInertia_2(self,arg0,arg1)});btCylinderShape.prototype["__destroy__"]=btCylinderShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCylinderShape___destroy___0(self)});function btDiscreteDynamicsWorld(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;this.ptr=_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4(arg0,arg1,arg2,arg3);getCache(btDiscreteDynamicsWorld)[this.ptr]=this}btDiscreteDynamicsWorld.prototype=Object.create(btDynamicsWorld.prototype);btDiscreteDynamicsWorld.prototype.constructor=btDiscreteDynamicsWorld;btDiscreteDynamicsWorld.prototype.__class__=btDiscreteDynamicsWorld;btDiscreteDynamicsWorld.__cache__={};Module["btDiscreteDynamicsWorld"]=btDiscreteDynamicsWorld;btDiscreteDynamicsWorld.prototype["setGravity"]=btDiscreteDynamicsWorld.prototype.setGravity=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1(self,arg0)});btDiscreteDynamicsWorld.prototype["getGravity"]=btDiscreteDynamicsWorld.prototype.getGravity=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0(self),btVector3)});btDiscreteDynamicsWorld.prototype["addRigidBody"]=btDiscreteDynamicsWorld.prototype.addRigidBody=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg1===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_2(self,arg0,arg1);return}_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["removeRigidBody"]=btDiscreteDynamicsWorld.prototype.removeRigidBody=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1(self,arg0)});btDiscreteDynamicsWorld.prototype["addVehicle"]=btDiscreteDynamicsWorld.prototype.addVehicle=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDiscreteDynamicsWorld_addVehicle_1(self,arg0)});btDiscreteDynamicsWorld.prototype["removeVehicle"]=btDiscreteDynamicsWorld.prototype.removeVehicle=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDiscreteDynamicsWorld_removeVehicle_1(self,arg0)});btDiscreteDynamicsWorld.prototype["addConstraint"]=btDiscreteDynamicsWorld.prototype.addConstraint=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg1===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1(self,arg0);return}_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2(self,arg0,arg1)});btDiscreteDynamicsWorld.prototype["removeConstraint"]=btDiscreteDynamicsWorld.prototype.removeConstraint=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1(self,arg0)});btDiscreteDynamicsWorld.prototype["stepSimulation"]=btDiscreteDynamicsWorld.prototype.stepSimulation=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg1===undefined){return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1(self,arg0)}if(arg2===undefined){return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2(self,arg0,arg1)}return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["getDispatcher"]=btDiscreteDynamicsWorld.prototype.getDispatcher=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0(self),btDispatcher)});btDiscreteDynamicsWorld.prototype["rayTest"]=btDiscreteDynamicsWorld.prototype.rayTest=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["getPairCache"]=btDiscreteDynamicsWorld.prototype.getPairCache=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0(self),btOverlappingPairCache)});btDiscreteDynamicsWorld.prototype["getDispatchInfo"]=btDiscreteDynamicsWorld.prototype.getDispatchInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0(self),btDispatcherInfo)});btDiscreteDynamicsWorld.prototype["addCollisionObject"]=btDiscreteDynamicsWorld.prototype.addCollisionObject=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg1===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2(self,arg0,arg1);return}_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["getBroadphase"]=btDiscreteDynamicsWorld.prototype.getBroadphase=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0(self),btBroadphaseInterface)});btDiscreteDynamicsWorld.prototype["convexSweepTest"]=btDiscreteDynamicsWorld.prototype.convexSweepTest=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5(self,arg0,arg1,arg2,arg3,arg4)});btDiscreteDynamicsWorld.prototype["contactPairTest"]=btDiscreteDynamicsWorld.prototype.contactPairTest=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["contactTest"]=btDiscreteDynamicsWorld.prototype.contactTest=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btDiscreteDynamicsWorld_contactTest_2(self,arg0,arg1)});btDiscreteDynamicsWorld.prototype["addAction"]=btDiscreteDynamicsWorld.prototype.addAction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDiscreteDynamicsWorld_addAction_1(self,arg0)});btDiscreteDynamicsWorld.prototype["removeAction"]=btDiscreteDynamicsWorld.prototype.removeAction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDiscreteDynamicsWorld_removeAction_1(self,arg0)});btDiscreteDynamicsWorld.prototype["getSolverInfo"]=btDiscreteDynamicsWorld.prototype.getSolverInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0(self),btContactSolverInfo)});btDiscreteDynamicsWorld.prototype["__destroy__"]=btDiscreteDynamicsWorld.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDiscreteDynamicsWorld___destroy___0(self)});function btConvexShape(){throw"cannot construct a btConvexShape, no constructor in IDL"}btConvexShape.prototype=Object.create(btCollisionShape.prototype);btConvexShape.prototype.constructor=btConvexShape;btConvexShape.prototype.__class__=btConvexShape;btConvexShape.__cache__={};Module["btConvexShape"]=btConvexShape;btConvexShape.prototype["setLocalScaling"]=btConvexShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConvexShape_setLocalScaling_1(self,arg0)});btConvexShape.prototype["calculateLocalInertia"]=btConvexShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btConvexShape_calculateLocalInertia_2(self,arg0,arg1)});btConvexShape.prototype["setMargin"]=btConvexShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConvexShape_setMargin_1(self,arg0)});btConvexShape.prototype["getMargin"]=btConvexShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btConvexShape_getMargin_0(self)});btConvexShape.prototype["__destroy__"]=btConvexShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConvexShape___destroy___0(self)});function btDispatcher(){throw"cannot construct a btDispatcher, no constructor in IDL"}btDispatcher.prototype=Object.create(WrapperObject.prototype);btDispatcher.prototype.constructor=btDispatcher;btDispatcher.prototype.__class__=btDispatcher;btDispatcher.__cache__={};Module["btDispatcher"]=btDispatcher;btDispatcher.prototype["getNumManifolds"]=btDispatcher.prototype.getNumManifolds=(function(){var self=this.ptr;return _emscripten_bind_btDispatcher_getNumManifolds_0(self)});btDispatcher.prototype["getManifoldByIndexInternal"]=btDispatcher.prototype.getManifoldByIndexInternal=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1(self,arg0),btPersistentManifold)});btDispatcher.prototype["__destroy__"]=btDispatcher.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDispatcher___destroy___0(self)});function btGeneric6DofConstraint(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg3===undefined){this.ptr=_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3(arg0,arg1,arg2);getCache(btGeneric6DofConstraint)[this.ptr]=this;return}if(arg4===undefined){this.ptr=_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_4(arg0,arg1,arg2,arg3);getCache(btGeneric6DofConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5(arg0,arg1,arg2,arg3,arg4);getCache(btGeneric6DofConstraint)[this.ptr]=this}btGeneric6DofConstraint.prototype=Object.create(btTypedConstraint.prototype);btGeneric6DofConstraint.prototype.constructor=btGeneric6DofConstraint;btGeneric6DofConstraint.prototype.__class__=btGeneric6DofConstraint;btGeneric6DofConstraint.__cache__={};Module["btGeneric6DofConstraint"]=btGeneric6DofConstraint;btGeneric6DofConstraint.prototype["setLinearLowerLimit"]=btGeneric6DofConstraint.prototype.setLinearLowerLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1(self,arg0)});btGeneric6DofConstraint.prototype["setLinearUpperLimit"]=btGeneric6DofConstraint.prototype.setLinearUpperLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1(self,arg0)});btGeneric6DofConstraint.prototype["setAngularLowerLimit"]=btGeneric6DofConstraint.prototype.setAngularLowerLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1(self,arg0)});btGeneric6DofConstraint.prototype["setAngularUpperLimit"]=btGeneric6DofConstraint.prototype.setAngularUpperLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1(self,arg0)});btGeneric6DofConstraint.prototype["getRotationalLimitMotor"]=btGeneric6DofConstraint.prototype.getRotationalLimitMotor=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btGeneric6DofConstraint_getRotationalLimitMotor_1(self,arg0),btRotationalLimitMotor)});btGeneric6DofConstraint.prototype["enableFeedback"]=btGeneric6DofConstraint.prototype.enableFeedback=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofConstraint_enableFeedback_1(self,arg0)});btGeneric6DofConstraint.prototype["getBreakingImpulseThreshold"]=btGeneric6DofConstraint.prototype.getBreakingImpulseThreshold=(function(){var self=this.ptr;return _emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0(self)});btGeneric6DofConstraint.prototype["setBreakingImpulseThreshold"]=btGeneric6DofConstraint.prototype.setBreakingImpulseThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1(self,arg0)});btGeneric6DofConstraint.prototype["__destroy__"]=btGeneric6DofConstraint.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btGeneric6DofConstraint___destroy___0(self)});function btStridingMeshInterface(){throw"cannot construct a btStridingMeshInterface, no constructor in IDL"}btStridingMeshInterface.prototype=Object.create(WrapperObject.prototype);btStridingMeshInterface.prototype.constructor=btStridingMeshInterface;btStridingMeshInterface.prototype.__class__=btStridingMeshInterface;btStridingMeshInterface.__cache__={};Module["btStridingMeshInterface"]=btStridingMeshInterface;btStridingMeshInterface.prototype["__destroy__"]=btStridingMeshInterface.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btStridingMeshInterface___destroy___0(self)});function btMotionState(){throw"cannot construct a btMotionState, no constructor in IDL"}btMotionState.prototype=Object.create(WrapperObject.prototype);btMotionState.prototype.constructor=btMotionState;btMotionState.prototype.__class__=btMotionState;btMotionState.__cache__={};Module["btMotionState"]=btMotionState;btMotionState.prototype["getWorldTransform"]=btMotionState.prototype.getWorldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btMotionState_getWorldTransform_1(self,arg0)});btMotionState.prototype["setWorldTransform"]=btMotionState.prototype.setWorldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btMotionState_setWorldTransform_1(self,arg0)});btMotionState.prototype["__destroy__"]=btMotionState.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btMotionState___destroy___0(self)});function ContactResultCallback(){throw"cannot construct a ContactResultCallback, no constructor in IDL"}ContactResultCallback.prototype=Object.create(WrapperObject.prototype);ContactResultCallback.prototype.constructor=ContactResultCallback;ContactResultCallback.prototype.__class__=ContactResultCallback;ContactResultCallback.__cache__={};Module["ContactResultCallback"]=ContactResultCallback;ContactResultCallback.prototype["addSingleResult"]=ContactResultCallback.prototype.addSingleResult=(function(arg0,arg1,arg2,arg3,arg4,arg5,arg6){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg5&&typeof arg5==="object")arg5=arg5.ptr;if(arg6&&typeof arg6==="object")arg6=arg6.ptr;return _emscripten_bind_ContactResultCallback_addSingleResult_7(self,arg0,arg1,arg2,arg3,arg4,arg5,arg6)});ContactResultCallback.prototype["__destroy__"]=ContactResultCallback.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_ContactResultCallback___destroy___0(self)});function btSoftBodySolver(){throw"cannot construct a btSoftBodySolver, no constructor in IDL"}btSoftBodySolver.prototype=Object.create(WrapperObject.prototype);btSoftBodySolver.prototype.constructor=btSoftBodySolver;btSoftBodySolver.prototype.__class__=btSoftBodySolver;btSoftBodySolver.__cache__={};Module["btSoftBodySolver"]=btSoftBodySolver;btSoftBodySolver.prototype["__destroy__"]=btSoftBodySolver.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSoftBodySolver___destroy___0(self)});function RayResultCallback(){throw"cannot construct a RayResultCallback, no constructor in IDL"}RayResultCallback.prototype=Object.create(WrapperObject.prototype);RayResultCallback.prototype.constructor=RayResultCallback;RayResultCallback.prototype.__class__=RayResultCallback;RayResultCallback.__cache__={};Module["RayResultCallback"]=RayResultCallback;RayResultCallback.prototype["hasHit"]=RayResultCallback.prototype.hasHit=(function(){var self=this.ptr;return!!_emscripten_bind_RayResultCallback_hasHit_0(self)});RayResultCallback.prototype["get_m_collisionFilterGroup"]=RayResultCallback.prototype.get_m_collisionFilterGroup=(function(){var self=this.ptr;return _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0(self)});RayResultCallback.prototype["set_m_collisionFilterGroup"]=RayResultCallback.prototype.set_m_collisionFilterGroup=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1(self,arg0)});RayResultCallback.prototype["get_m_collisionFilterMask"]=RayResultCallback.prototype.get_m_collisionFilterMask=(function(){var self=this.ptr;return _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0(self)});RayResultCallback.prototype["set_m_collisionFilterMask"]=RayResultCallback.prototype.set_m_collisionFilterMask=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1(self,arg0)});RayResultCallback.prototype["get_m_collisionObject"]=RayResultCallback.prototype.get_m_collisionObject=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_RayResultCallback_get_m_collisionObject_0(self),btCollisionObject)});RayResultCallback.prototype["set_m_collisionObject"]=RayResultCallback.prototype.set_m_collisionObject=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RayResultCallback_set_m_collisionObject_1(self,arg0)});RayResultCallback.prototype["__destroy__"]=RayResultCallback.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_RayResultCallback___destroy___0(self)});function btMatrix3x3(){throw"cannot construct a btMatrix3x3, no constructor in IDL"}btMatrix3x3.prototype=Object.create(WrapperObject.prototype);btMatrix3x3.prototype.constructor=btMatrix3x3;btMatrix3x3.prototype.__class__=btMatrix3x3;btMatrix3x3.__cache__={};Module["btMatrix3x3"]=btMatrix3x3;btMatrix3x3.prototype["setEulerZYX"]=btMatrix3x3.prototype.setEulerZYX=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btMatrix3x3_setEulerZYX_3(self,arg0,arg1,arg2)});btMatrix3x3.prototype["getRotation"]=btMatrix3x3.prototype.getRotation=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btMatrix3x3_getRotation_1(self,arg0)});btMatrix3x3.prototype["getRow"]=btMatrix3x3.prototype.getRow=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btMatrix3x3_getRow_1(self,arg0),btVector3)});btMatrix3x3.prototype["__destroy__"]=btMatrix3x3.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btMatrix3x3___destroy___0(self)});function btDispatcherInfo(){throw"cannot construct a btDispatcherInfo, no constructor in IDL"}btDispatcherInfo.prototype=Object.create(WrapperObject.prototype);btDispatcherInfo.prototype.constructor=btDispatcherInfo;btDispatcherInfo.prototype.__class__=btDispatcherInfo;btDispatcherInfo.__cache__={};Module["btDispatcherInfo"]=btDispatcherInfo;btDispatcherInfo.prototype["get_m_timeStep"]=btDispatcherInfo.prototype.get_m_timeStep=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_timeStep_0(self)});btDispatcherInfo.prototype["set_m_timeStep"]=btDispatcherInfo.prototype.set_m_timeStep=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_timeStep_1(self,arg0)});btDispatcherInfo.prototype["get_m_stepCount"]=btDispatcherInfo.prototype.get_m_stepCount=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_stepCount_0(self)});btDispatcherInfo.prototype["set_m_stepCount"]=btDispatcherInfo.prototype.set_m_stepCount=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_stepCount_1(self,arg0)});btDispatcherInfo.prototype["get_m_dispatchFunc"]=btDispatcherInfo.prototype.get_m_dispatchFunc=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0(self)});btDispatcherInfo.prototype["set_m_dispatchFunc"]=btDispatcherInfo.prototype.set_m_dispatchFunc=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1(self,arg0)});btDispatcherInfo.prototype["get_m_timeOfImpact"]=btDispatcherInfo.prototype.get_m_timeOfImpact=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0(self)});btDispatcherInfo.prototype["set_m_timeOfImpact"]=btDispatcherInfo.prototype.set_m_timeOfImpact=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1(self,arg0)});btDispatcherInfo.prototype["get_m_useContinuous"]=btDispatcherInfo.prototype.get_m_useContinuous=(function(){var self=this.ptr;return!!_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0(self)});btDispatcherInfo.prototype["set_m_useContinuous"]=btDispatcherInfo.prototype.set_m_useContinuous=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1(self,arg0)});btDispatcherInfo.prototype["get_m_enableSatConvex"]=btDispatcherInfo.prototype.get_m_enableSatConvex=(function(){var self=this.ptr;return!!_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0(self)});btDispatcherInfo.prototype["set_m_enableSatConvex"]=btDispatcherInfo.prototype.set_m_enableSatConvex=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1(self,arg0)});btDispatcherInfo.prototype["get_m_enableSPU"]=btDispatcherInfo.prototype.get_m_enableSPU=(function(){var self=this.ptr;return!!_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0(self)});btDispatcherInfo.prototype["set_m_enableSPU"]=btDispatcherInfo.prototype.set_m_enableSPU=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1(self,arg0)});btDispatcherInfo.prototype["get_m_useEpa"]=btDispatcherInfo.prototype.get_m_useEpa=(function(){var self=this.ptr;return!!_emscripten_bind_btDispatcherInfo_get_m_useEpa_0(self)});btDispatcherInfo.prototype["set_m_useEpa"]=btDispatcherInfo.prototype.set_m_useEpa=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_useEpa_1(self,arg0)});btDispatcherInfo.prototype["get_m_allowedCcdPenetration"]=btDispatcherInfo.prototype.get_m_allowedCcdPenetration=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0(self)});btDispatcherInfo.prototype["set_m_allowedCcdPenetration"]=btDispatcherInfo.prototype.set_m_allowedCcdPenetration=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1(self,arg0)});btDispatcherInfo.prototype["get_m_useConvexConservativeDistanceUtil"]=btDispatcherInfo.prototype.get_m_useConvexConservativeDistanceUtil=(function(){var self=this.ptr;return!!_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0(self)});btDispatcherInfo.prototype["set_m_useConvexConservativeDistanceUtil"]=btDispatcherInfo.prototype.set_m_useConvexConservativeDistanceUtil=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1(self,arg0)});btDispatcherInfo.prototype["get_m_convexConservativeDistanceThreshold"]=btDispatcherInfo.prototype.get_m_convexConservativeDistanceThreshold=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0(self)});btDispatcherInfo.prototype["set_m_convexConservativeDistanceThreshold"]=btDispatcherInfo.prototype.set_m_convexConservativeDistanceThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1(self,arg0)});btDispatcherInfo.prototype["__destroy__"]=btDispatcherInfo.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDispatcherInfo___destroy___0(self)});function Material(){throw"cannot construct a Material, no constructor in IDL"}Material.prototype=Object.create(WrapperObject.prototype);Material.prototype.constructor=Material;Material.prototype.__class__=Material;Material.__cache__={};Module["Material"]=Material;Material.prototype["get_m_kLST"]=Material.prototype.get_m_kLST=(function(){var self=this.ptr;return _emscripten_bind_Material_get_m_kLST_0(self)});Material.prototype["set_m_kLST"]=Material.prototype.set_m_kLST=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Material_set_m_kLST_1(self,arg0)});Material.prototype["get_m_kAST"]=Material.prototype.get_m_kAST=(function(){var self=this.ptr;return _emscripten_bind_Material_get_m_kAST_0(self)});Material.prototype["set_m_kAST"]=Material.prototype.set_m_kAST=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Material_set_m_kAST_1(self,arg0)});Material.prototype["get_m_kVST"]=Material.prototype.get_m_kVST=(function(){var self=this.ptr;return _emscripten_bind_Material_get_m_kVST_0(self)});Material.prototype["set_m_kVST"]=Material.prototype.set_m_kVST=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Material_set_m_kVST_1(self,arg0)});Material.prototype["get_m_flags"]=Material.prototype.get_m_flags=(function(){var self=this.ptr;return _emscripten_bind_Material_get_m_flags_0(self)});Material.prototype["set_m_flags"]=Material.prototype.set_m_flags=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Material_set_m_flags_1(self,arg0)});Material.prototype["__destroy__"]=Material.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_Material___destroy___0(self)});function btConvexTriangleMeshShape(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg1===undefined){this.ptr=_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1(arg0);getCache(btConvexTriangleMeshShape)[this.ptr]=this;return}this.ptr=_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2(arg0,arg1);getCache(btConvexTriangleMeshShape)[this.ptr]=this}btConvexTriangleMeshShape.prototype=Object.create(btConvexShape.prototype);btConvexTriangleMeshShape.prototype.constructor=btConvexTriangleMeshShape;btConvexTriangleMeshShape.prototype.__class__=btConvexTriangleMeshShape;btConvexTriangleMeshShape.__cache__={};Module["btConvexTriangleMeshShape"]=btConvexTriangleMeshShape;btConvexTriangleMeshShape.prototype["setLocalScaling"]=btConvexTriangleMeshShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1(self,arg0)});btConvexTriangleMeshShape.prototype["calculateLocalInertia"]=btConvexTriangleMeshShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2(self,arg0,arg1)});btConvexTriangleMeshShape.prototype["setMargin"]=btConvexTriangleMeshShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConvexTriangleMeshShape_setMargin_1(self,arg0)});btConvexTriangleMeshShape.prototype["getMargin"]=btConvexTriangleMeshShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btConvexTriangleMeshShape_getMargin_0(self)});btConvexTriangleMeshShape.prototype["__destroy__"]=btConvexTriangleMeshShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConvexTriangleMeshShape___destroy___0(self)});function btBroadphaseInterface(){throw"cannot construct a btBroadphaseInterface, no constructor in IDL"}btBroadphaseInterface.prototype=Object.create(WrapperObject.prototype);btBroadphaseInterface.prototype.constructor=btBroadphaseInterface;btBroadphaseInterface.prototype.__class__=btBroadphaseInterface;btBroadphaseInterface.__cache__={};Module["btBroadphaseInterface"]=btBroadphaseInterface;btBroadphaseInterface.prototype["__destroy__"]=btBroadphaseInterface.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btBroadphaseInterface___destroy___0(self)});function btRigidBodyConstructionInfo(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg3===undefined){this.ptr=_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3(arg0,arg1,arg2);getCache(btRigidBodyConstructionInfo)[this.ptr]=this;return}this.ptr=_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4(arg0,arg1,arg2,arg3);getCache(btRigidBodyConstructionInfo)[this.ptr]=this}btRigidBodyConstructionInfo.prototype=Object.create(WrapperObject.prototype);btRigidBodyConstructionInfo.prototype.constructor=btRigidBodyConstructionInfo;btRigidBodyConstructionInfo.prototype.__class__=btRigidBodyConstructionInfo;btRigidBodyConstructionInfo.__cache__={};Module["btRigidBodyConstructionInfo"]=btRigidBodyConstructionInfo;btRigidBodyConstructionInfo.prototype["get_m_linearDamping"]=btRigidBodyConstructionInfo.prototype.get_m_linearDamping=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0(self)});btRigidBodyConstructionInfo.prototype["set_m_linearDamping"]=btRigidBodyConstructionInfo.prototype.set_m_linearDamping=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_angularDamping"]=btRigidBodyConstructionInfo.prototype.get_m_angularDamping=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0(self)});btRigidBodyConstructionInfo.prototype["set_m_angularDamping"]=btRigidBodyConstructionInfo.prototype.set_m_angularDamping=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_friction"]=btRigidBodyConstructionInfo.prototype.get_m_friction=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0(self)});btRigidBodyConstructionInfo.prototype["set_m_friction"]=btRigidBodyConstructionInfo.prototype.set_m_friction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_rollingFriction"]=btRigidBodyConstructionInfo.prototype.get_m_rollingFriction=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0(self)});btRigidBodyConstructionInfo.prototype["set_m_rollingFriction"]=btRigidBodyConstructionInfo.prototype.set_m_rollingFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_restitution"]=btRigidBodyConstructionInfo.prototype.get_m_restitution=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0(self)});btRigidBodyConstructionInfo.prototype["set_m_restitution"]=btRigidBodyConstructionInfo.prototype.set_m_restitution=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_linearSleepingThreshold"]=btRigidBodyConstructionInfo.prototype.get_m_linearSleepingThreshold=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0(self)});btRigidBodyConstructionInfo.prototype["set_m_linearSleepingThreshold"]=btRigidBodyConstructionInfo.prototype.set_m_linearSleepingThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_angularSleepingThreshold"]=btRigidBodyConstructionInfo.prototype.get_m_angularSleepingThreshold=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0(self)});btRigidBodyConstructionInfo.prototype["set_m_angularSleepingThreshold"]=btRigidBodyConstructionInfo.prototype.set_m_angularSleepingThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalDamping"]=btRigidBodyConstructionInfo.prototype.get_m_additionalDamping=(function(){var self=this.ptr;return!!_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalDamping"]=btRigidBodyConstructionInfo.prototype.set_m_additionalDamping=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalDampingFactor"]=btRigidBodyConstructionInfo.prototype.get_m_additionalDampingFactor=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalDampingFactor"]=btRigidBodyConstructionInfo.prototype.set_m_additionalDampingFactor=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalLinearDampingThresholdSqr"]=btRigidBodyConstructionInfo.prototype.get_m_additionalLinearDampingThresholdSqr=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalLinearDampingThresholdSqr"]=btRigidBodyConstructionInfo.prototype.set_m_additionalLinearDampingThresholdSqr=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalAngularDampingThresholdSqr"]=btRigidBodyConstructionInfo.prototype.get_m_additionalAngularDampingThresholdSqr=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalAngularDampingThresholdSqr"]=btRigidBodyConstructionInfo.prototype.set_m_additionalAngularDampingThresholdSqr=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalAngularDampingFactor"]=btRigidBodyConstructionInfo.prototype.get_m_additionalAngularDampingFactor=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalAngularDampingFactor"]=btRigidBodyConstructionInfo.prototype.set_m_additionalAngularDampingFactor=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1(self,arg0)});btRigidBodyConstructionInfo.prototype["__destroy__"]=btRigidBodyConstructionInfo.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btRigidBodyConstructionInfo___destroy___0(self)});function btCollisionConfiguration(){throw"cannot construct a btCollisionConfiguration, no constructor in IDL"}btCollisionConfiguration.prototype=Object.create(WrapperObject.prototype);btCollisionConfiguration.prototype.constructor=btCollisionConfiguration;btCollisionConfiguration.prototype.__class__=btCollisionConfiguration;btCollisionConfiguration.__cache__={};Module["btCollisionConfiguration"]=btCollisionConfiguration;btCollisionConfiguration.prototype["__destroy__"]=btCollisionConfiguration.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCollisionConfiguration___destroy___0(self)});function btPersistentManifold(){this.ptr=_emscripten_bind_btPersistentManifold_btPersistentManifold_0();getCache(btPersistentManifold)[this.ptr]=this}btPersistentManifold.prototype=Object.create(WrapperObject.prototype);btPersistentManifold.prototype.constructor=btPersistentManifold;btPersistentManifold.prototype.__class__=btPersistentManifold;btPersistentManifold.__cache__={};Module["btPersistentManifold"]=btPersistentManifold;btPersistentManifold.prototype["getBody0"]=btPersistentManifold.prototype.getBody0=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPersistentManifold_getBody0_0(self),btCollisionObject)});btPersistentManifold.prototype["getBody1"]=btPersistentManifold.prototype.getBody1=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPersistentManifold_getBody1_0(self),btCollisionObject)});btPersistentManifold.prototype["getNumContacts"]=btPersistentManifold.prototype.getNumContacts=(function(){var self=this.ptr;return _emscripten_bind_btPersistentManifold_getNumContacts_0(self)});btPersistentManifold.prototype["getContactPoint"]=btPersistentManifold.prototype.getContactPoint=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btPersistentManifold_getContactPoint_1(self,arg0),btManifoldPoint)});btPersistentManifold.prototype["__destroy__"]=btPersistentManifold.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btPersistentManifold___destroy___0(self)});function btCompoundShape(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg0===undefined){this.ptr=_emscripten_bind_btCompoundShape_btCompoundShape_0();getCache(btCompoundShape)[this.ptr]=this;return}this.ptr=_emscripten_bind_btCompoundShape_btCompoundShape_1(arg0);getCache(btCompoundShape)[this.ptr]=this}btCompoundShape.prototype=Object.create(btCollisionShape.prototype);btCompoundShape.prototype.constructor=btCompoundShape;btCompoundShape.prototype.__class__=btCompoundShape;btCompoundShape.__cache__={};Module["btCompoundShape"]=btCompoundShape;btCompoundShape.prototype["addChildShape"]=btCompoundShape.prototype.addChildShape=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCompoundShape_addChildShape_2(self,arg0,arg1)});btCompoundShape.prototype["removeChildShapeByIndex"]=btCompoundShape.prototype.removeChildShapeByIndex=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCompoundShape_removeChildShapeByIndex_1(self,arg0)});btCompoundShape.prototype["getNumChildShapes"]=btCompoundShape.prototype.getNumChildShapes=(function(){var self=this.ptr;return _emscripten_bind_btCompoundShape_getNumChildShapes_0(self)});btCompoundShape.prototype["getChildShape"]=btCompoundShape.prototype.getChildShape=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btCompoundShape_getChildShape_1(self,arg0),btCollisionShape)});btCompoundShape.prototype["setMargin"]=btCompoundShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCompoundShape_setMargin_1(self,arg0)});btCompoundShape.prototype["getMargin"]=btCompoundShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btCompoundShape_getMargin_0(self)});btCompoundShape.prototype["setLocalScaling"]=btCompoundShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCompoundShape_setLocalScaling_1(self,arg0)});btCompoundShape.prototype["calculateLocalInertia"]=btCompoundShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCompoundShape_calculateLocalInertia_2(self,arg0,arg1)});btCompoundShape.prototype["__destroy__"]=btCompoundShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCompoundShape___destroy___0(self)});function ClosestConvexResultCallback(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;this.ptr=_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2(arg0,arg1);getCache(ClosestConvexResultCallback)[this.ptr]=this}ClosestConvexResultCallback.prototype=Object.create(ConvexResultCallback.prototype);ClosestConvexResultCallback.prototype.constructor=ClosestConvexResultCallback;ClosestConvexResultCallback.prototype.__class__=ClosestConvexResultCallback;ClosestConvexResultCallback.__cache__={};Module["ClosestConvexResultCallback"]=ClosestConvexResultCallback;ClosestConvexResultCallback.prototype["hasHit"]=ClosestConvexResultCallback.prototype.hasHit=(function(){var self=this.ptr;return!!_emscripten_bind_ClosestConvexResultCallback_hasHit_0(self)});ClosestConvexResultCallback.prototype["get_m_convexFromWorld"]=ClosestConvexResultCallback.prototype.get_m_convexFromWorld=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0(self),btVector3)});ClosestConvexResultCallback.prototype["set_m_convexFromWorld"]=ClosestConvexResultCallback.prototype.set_m_convexFromWorld=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_convexToWorld"]=ClosestConvexResultCallback.prototype.get_m_convexToWorld=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0(self),btVector3)});ClosestConvexResultCallback.prototype["set_m_convexToWorld"]=ClosestConvexResultCallback.prototype.set_m_convexToWorld=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_hitNormalWorld"]=ClosestConvexResultCallback.prototype.get_m_hitNormalWorld=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0(self),btVector3)});ClosestConvexResultCallback.prototype["set_m_hitNormalWorld"]=ClosestConvexResultCallback.prototype.set_m_hitNormalWorld=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_hitPointWorld"]=ClosestConvexResultCallback.prototype.get_m_hitPointWorld=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0(self),btVector3)});ClosestConvexResultCallback.prototype["set_m_hitPointWorld"]=ClosestConvexResultCallback.prototype.set_m_hitPointWorld=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_collisionFilterGroup"]=ClosestConvexResultCallback.prototype.get_m_collisionFilterGroup=(function(){var self=this.ptr;return _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0(self)});ClosestConvexResultCallback.prototype["set_m_collisionFilterGroup"]=ClosestConvexResultCallback.prototype.set_m_collisionFilterGroup=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_collisionFilterMask"]=ClosestConvexResultCallback.prototype.get_m_collisionFilterMask=(function(){var self=this.ptr;return _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0(self)});ClosestConvexResultCallback.prototype["set_m_collisionFilterMask"]=ClosestConvexResultCallback.prototype.set_m_collisionFilterMask=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_closestHitFraction"]=ClosestConvexResultCallback.prototype.get_m_closestHitFraction=(function(){var self=this.ptr;return _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0(self)});ClosestConvexResultCallback.prototype["set_m_closestHitFraction"]=ClosestConvexResultCallback.prototype.set_m_closestHitFraction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1(self,arg0)});ClosestConvexResultCallback.prototype["__destroy__"]=ClosestConvexResultCallback.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_ClosestConvexResultCallback___destroy___0(self)});function tMaterialArray(){throw"cannot construct a tMaterialArray, no constructor in IDL"}tMaterialArray.prototype=Object.create(WrapperObject.prototype);tMaterialArray.prototype.constructor=tMaterialArray;tMaterialArray.prototype.__class__=tMaterialArray;tMaterialArray.__cache__={};Module["tMaterialArray"]=tMaterialArray;tMaterialArray.prototype["size"]=tMaterialArray.prototype.size=(function(){var self=this.ptr;return _emscripten_bind_tMaterialArray_size_0(self)});tMaterialArray.prototype["at"]=tMaterialArray.prototype.at=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_tMaterialArray_at_1(self,arg0),Material)});tMaterialArray.prototype["__destroy__"]=tMaterialArray.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_tMaterialArray___destroy___0(self)});function btDefaultVehicleRaycaster(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;this.ptr=_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1(arg0);getCache(btDefaultVehicleRaycaster)[this.ptr]=this}btDefaultVehicleRaycaster.prototype=Object.create(btVehicleRaycaster.prototype);btDefaultVehicleRaycaster.prototype.constructor=btDefaultVehicleRaycaster;btDefaultVehicleRaycaster.prototype.__class__=btDefaultVehicleRaycaster;btDefaultVehicleRaycaster.__cache__={};Module["btDefaultVehicleRaycaster"]=btDefaultVehicleRaycaster;btDefaultVehicleRaycaster.prototype["__destroy__"]=btDefaultVehicleRaycaster.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDefaultVehicleRaycaster___destroy___0(self)});function btConstraintSetting(){this.ptr=_emscripten_bind_btConstraintSetting_btConstraintSetting_0();getCache(btConstraintSetting)[this.ptr]=this}btConstraintSetting.prototype=Object.create(WrapperObject.prototype);btConstraintSetting.prototype.constructor=btConstraintSetting;btConstraintSetting.prototype.__class__=btConstraintSetting;btConstraintSetting.__cache__={};Module["btConstraintSetting"]=btConstraintSetting;btConstraintSetting.prototype["get_m_tau"]=btConstraintSetting.prototype.get_m_tau=(function(){var self=this.ptr;return _emscripten_bind_btConstraintSetting_get_m_tau_0(self)});btConstraintSetting.prototype["set_m_tau"]=btConstraintSetting.prototype.set_m_tau=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConstraintSetting_set_m_tau_1(self,arg0)});btConstraintSetting.prototype["get_m_damping"]=btConstraintSetting.prototype.get_m_damping=(function(){var self=this.ptr;return _emscripten_bind_btConstraintSetting_get_m_damping_0(self)});btConstraintSetting.prototype["set_m_damping"]=btConstraintSetting.prototype.set_m_damping=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConstraintSetting_set_m_damping_1(self,arg0)});btConstraintSetting.prototype["get_m_impulseClamp"]=btConstraintSetting.prototype.get_m_impulseClamp=(function(){var self=this.ptr;return _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0(self)});btConstraintSetting.prototype["set_m_impulseClamp"]=btConstraintSetting.prototype.set_m_impulseClamp=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1(self,arg0)});btConstraintSetting.prototype["__destroy__"]=btConstraintSetting.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConstraintSetting___destroy___0(self)});function LocalShapeInfo(){throw"cannot construct a LocalShapeInfo, no constructor in IDL"}LocalShapeInfo.prototype=Object.create(WrapperObject.prototype);LocalShapeInfo.prototype.constructor=LocalShapeInfo;LocalShapeInfo.prototype.__class__=LocalShapeInfo;LocalShapeInfo.__cache__={};Module["LocalShapeInfo"]=LocalShapeInfo;LocalShapeInfo.prototype["get_m_shapePart"]=LocalShapeInfo.prototype.get_m_shapePart=(function(){var self=this.ptr;return _emscripten_bind_LocalShapeInfo_get_m_shapePart_0(self)});LocalShapeInfo.prototype["set_m_shapePart"]=LocalShapeInfo.prototype.set_m_shapePart=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_LocalShapeInfo_set_m_shapePart_1(self,arg0)});LocalShapeInfo.prototype["get_m_triangleIndex"]=LocalShapeInfo.prototype.get_m_triangleIndex=(function(){var self=this.ptr;return _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0(self)});LocalShapeInfo.prototype["set_m_triangleIndex"]=LocalShapeInfo.prototype.set_m_triangleIndex=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1(self,arg0)});LocalShapeInfo.prototype["__destroy__"]=LocalShapeInfo.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_LocalShapeInfo___destroy___0(self)});function btRigidBody(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;this.ptr=_emscripten_bind_btRigidBody_btRigidBody_1(arg0);getCache(btRigidBody)[this.ptr]=this}btRigidBody.prototype=Object.create(btCollisionObject.prototype);btRigidBody.prototype.constructor=btRigidBody;btRigidBody.prototype.__class__=btRigidBody;btRigidBody.__cache__={};Module["btRigidBody"]=btRigidBody;btRigidBody.prototype["getCenterOfMassTransform"]=btRigidBody.prototype.getCenterOfMassTransform=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getCenterOfMassTransform_0(self),btTransform)});btRigidBody.prototype["setCenterOfMassTransform"]=btRigidBody.prototype.setCenterOfMassTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setCenterOfMassTransform_1(self,arg0)});btRigidBody.prototype["setSleepingThresholds"]=btRigidBody.prototype.setSleepingThresholds=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRigidBody_setSleepingThresholds_2(self,arg0,arg1)});btRigidBody.prototype["setDamping"]=btRigidBody.prototype.setDamping=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRigidBody_setDamping_2(self,arg0,arg1)});btRigidBody.prototype["setMassProps"]=btRigidBody.prototype.setMassProps=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRigidBody_setMassProps_2(self,arg0,arg1)});btRigidBody.prototype["setLinearFactor"]=btRigidBody.prototype.setLinearFactor=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setLinearFactor_1(self,arg0)});btRigidBody.prototype["applyTorque"]=btRigidBody.prototype.applyTorque=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_applyTorque_1(self,arg0)});btRigidBody.prototype["applyForce"]=btRigidBody.prototype.applyForce=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRigidBody_applyForce_2(self,arg0,arg1)});btRigidBody.prototype["applyCentralForce"]=btRigidBody.prototype.applyCentralForce=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_applyCentralForce_1(self,arg0)});btRigidBody.prototype["applyTorqueImpulse"]=btRigidBody.prototype.applyTorqueImpulse=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_applyTorqueImpulse_1(self,arg0)});btRigidBody.prototype["applyImpulse"]=btRigidBody.prototype.applyImpulse=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRigidBody_applyImpulse_2(self,arg0,arg1)});btRigidBody.prototype["applyCentralImpulse"]=btRigidBody.prototype.applyCentralImpulse=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_applyCentralImpulse_1(self,arg0)});btRigidBody.prototype["updateInertiaTensor"]=btRigidBody.prototype.updateInertiaTensor=(function(){var self=this.ptr;_emscripten_bind_btRigidBody_updateInertiaTensor_0(self)});btRigidBody.prototype["getLinearVelocity"]=btRigidBody.prototype.getLinearVelocity=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getLinearVelocity_0(self),btVector3)});btRigidBody.prototype["getAngularVelocity"]=btRigidBody.prototype.getAngularVelocity=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getAngularVelocity_0(self),btVector3)});btRigidBody.prototype["setLinearVelocity"]=btRigidBody.prototype.setLinearVelocity=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setLinearVelocity_1(self,arg0)});btRigidBody.prototype["setAngularVelocity"]=btRigidBody.prototype.setAngularVelocity=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setAngularVelocity_1(self,arg0)});btRigidBody.prototype["getMotionState"]=btRigidBody.prototype.getMotionState=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getMotionState_0(self),btMotionState)});btRigidBody.prototype["setMotionState"]=btRigidBody.prototype.setMotionState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setMotionState_1(self,arg0)});btRigidBody.prototype["setAngularFactor"]=btRigidBody.prototype.setAngularFactor=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setAngularFactor_1(self,arg0)});btRigidBody.prototype["upcast"]=btRigidBody.prototype.upcast=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btRigidBody_upcast_1(self,arg0),btRigidBody)});btRigidBody.prototype["setAnisotropicFriction"]=btRigidBody.prototype.setAnisotropicFriction=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRigidBody_setAnisotropicFriction_2(self,arg0,arg1)});btRigidBody.prototype["getCollisionShape"]=btRigidBody.prototype.getCollisionShape=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getCollisionShape_0(self),btCollisionShape)});btRigidBody.prototype["setContactProcessingThreshold"]=btRigidBody.prototype.setContactProcessingThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setContactProcessingThreshold_1(self,arg0)});btRigidBody.prototype["setActivationState"]=btRigidBody.prototype.setActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setActivationState_1(self,arg0)});btRigidBody.prototype["forceActivationState"]=btRigidBody.prototype.forceActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_forceActivationState_1(self,arg0)});btRigidBody.prototype["activate"]=btRigidBody.prototype.activate=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg0===undefined){_emscripten_bind_btRigidBody_activate_0(self);return}_emscripten_bind_btRigidBody_activate_1(self,arg0)});btRigidBody.prototype["isActive"]=btRigidBody.prototype.isActive=(function(){var self=this.ptr;return!!_emscripten_bind_btRigidBody_isActive_0(self)});btRigidBody.prototype["isKinematicObject"]=btRigidBody.prototype.isKinematicObject=(function(){var self=this.ptr;return!!_emscripten_bind_btRigidBody_isKinematicObject_0(self)});btRigidBody.prototype["setRestitution"]=btRigidBody.prototype.setRestitution=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setRestitution_1(self,arg0)});btRigidBody.prototype["setFriction"]=btRigidBody.prototype.setFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setFriction_1(self,arg0)});btRigidBody.prototype["setRollingFriction"]=btRigidBody.prototype.setRollingFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setRollingFriction_1(self,arg0)});btRigidBody.prototype["getWorldTransform"]=btRigidBody.prototype.getWorldTransform=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getWorldTransform_0(self),btTransform)});btRigidBody.prototype["getCollisionFlags"]=btRigidBody.prototype.getCollisionFlags=(function(){var self=this.ptr;return _emscripten_bind_btRigidBody_getCollisionFlags_0(self)});btRigidBody.prototype["setCollisionFlags"]=btRigidBody.prototype.setCollisionFlags=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setCollisionFlags_1(self,arg0)});btRigidBody.prototype["setWorldTransform"]=btRigidBody.prototype.setWorldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setWorldTransform_1(self,arg0)});btRigidBody.prototype["setCollisionShape"]=btRigidBody.prototype.setCollisionShape=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setCollisionShape_1(self,arg0)});btRigidBody.prototype["setCcdMotionThreshold"]=btRigidBody.prototype.setCcdMotionThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setCcdMotionThreshold_1(self,arg0)});btRigidBody.prototype["setCcdSweptSphereRadius"]=btRigidBody.prototype.setCcdSweptSphereRadius=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1(self,arg0)});btRigidBody.prototype["getUserIndex"]=btRigidBody.prototype.getUserIndex=(function(){var self=this.ptr;return _emscripten_bind_btRigidBody_getUserIndex_0(self)});btRigidBody.prototype["setUserIndex"]=btRigidBody.prototype.setUserIndex=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setUserIndex_1(self,arg0)});btRigidBody.prototype["getUserPointer"]=btRigidBody.prototype.getUserPointer=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getUserPointer_0(self),VoidPtr)});btRigidBody.prototype["setUserPointer"]=btRigidBody.prototype.setUserPointer=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRigidBody_setUserPointer_1(self,arg0)});btRigidBody.prototype["__destroy__"]=btRigidBody.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btRigidBody___destroy___0(self)});function btDbvtBroadphase(){this.ptr=_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0();getCache(btDbvtBroadphase)[this.ptr]=this}btDbvtBroadphase.prototype=Object.create(WrapperObject.prototype);btDbvtBroadphase.prototype.constructor=btDbvtBroadphase;btDbvtBroadphase.prototype.__class__=btDbvtBroadphase;btDbvtBroadphase.__cache__={};Module["btDbvtBroadphase"]=btDbvtBroadphase;btDbvtBroadphase.prototype["__destroy__"]=btDbvtBroadphase.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDbvtBroadphase___destroy___0(self)});function btDefaultSoftBodySolver(){this.ptr=_emscripten_bind_btDefaultSoftBodySolver_btDefaultSoftBodySolver_0();getCache(btDefaultSoftBodySolver)[this.ptr]=this}btDefaultSoftBodySolver.prototype=Object.create(btSoftBodySolver.prototype);btDefaultSoftBodySolver.prototype.constructor=btDefaultSoftBodySolver;btDefaultSoftBodySolver.prototype.__class__=btDefaultSoftBodySolver;btDefaultSoftBodySolver.__cache__={};Module["btDefaultSoftBodySolver"]=btDefaultSoftBodySolver;btDefaultSoftBodySolver.prototype["__destroy__"]=btDefaultSoftBodySolver.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDefaultSoftBodySolver___destroy___0(self)});function btKinematicCharacterController(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg3===undefined){this.ptr=_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3(arg0,arg1,arg2);getCache(btKinematicCharacterController)[this.ptr]=this;return}this.ptr=_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4(arg0,arg1,arg2,arg3);getCache(btKinematicCharacterController)[this.ptr]=this}btKinematicCharacterController.prototype=Object.create(btActionInterface.prototype);btKinematicCharacterController.prototype.constructor=btKinematicCharacterController;btKinematicCharacterController.prototype.__class__=btKinematicCharacterController;btKinematicCharacterController.__cache__={};Module["btKinematicCharacterController"]=btKinematicCharacterController;btKinematicCharacterController.prototype["setUp"]=btKinematicCharacterController.prototype.setUp=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_setUp_1(self,arg0)});btKinematicCharacterController.prototype["setWalkDirection"]=btKinematicCharacterController.prototype.setWalkDirection=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_setWalkDirection_1(self,arg0)});btKinematicCharacterController.prototype["setVelocityForTimeInterval"]=btKinematicCharacterController.prototype.setVelocityForTimeInterval=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2(self,arg0,arg1)});btKinematicCharacterController.prototype["warp"]=btKinematicCharacterController.prototype.warp=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_warp_1(self,arg0)});btKinematicCharacterController.prototype["preStep"]=btKinematicCharacterController.prototype.preStep=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_preStep_1(self,arg0)});btKinematicCharacterController.prototype["playerStep"]=btKinematicCharacterController.prototype.playerStep=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btKinematicCharacterController_playerStep_2(self,arg0,arg1)});btKinematicCharacterController.prototype["setFallSpeed"]=btKinematicCharacterController.prototype.setFallSpeed=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_setFallSpeed_1(self,arg0)});btKinematicCharacterController.prototype["setJumpSpeed"]=btKinematicCharacterController.prototype.setJumpSpeed=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1(self,arg0)});btKinematicCharacterController.prototype["setMaxJumpHeight"]=btKinematicCharacterController.prototype.setMaxJumpHeight=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1(self,arg0)});btKinematicCharacterController.prototype["canJump"]=btKinematicCharacterController.prototype.canJump=(function(){var self=this.ptr;return!!_emscripten_bind_btKinematicCharacterController_canJump_0(self)});btKinematicCharacterController.prototype["jump"]=btKinematicCharacterController.prototype.jump=(function(){var self=this.ptr;_emscripten_bind_btKinematicCharacterController_jump_0(self)});btKinematicCharacterController.prototype["setGravity"]=btKinematicCharacterController.prototype.setGravity=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_setGravity_1(self,arg0)});btKinematicCharacterController.prototype["getGravity"]=btKinematicCharacterController.prototype.getGravity=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btKinematicCharacterController_getGravity_0(self),btVector3)});btKinematicCharacterController.prototype["setMaxSlope"]=btKinematicCharacterController.prototype.setMaxSlope=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_setMaxSlope_1(self,arg0)});btKinematicCharacterController.prototype["getMaxSlope"]=btKinematicCharacterController.prototype.getMaxSlope=(function(){var self=this.ptr;return _emscripten_bind_btKinematicCharacterController_getMaxSlope_0(self)});btKinematicCharacterController.prototype["getGhostObject"]=btKinematicCharacterController.prototype.getGhostObject=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btKinematicCharacterController_getGhostObject_0(self),btPairCachingGhostObject)});btKinematicCharacterController.prototype["setUseGhostSweepTest"]=btKinematicCharacterController.prototype.setUseGhostSweepTest=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1(self,arg0)});btKinematicCharacterController.prototype["onGround"]=btKinematicCharacterController.prototype.onGround=(function(){var self=this.ptr;return!!_emscripten_bind_btKinematicCharacterController_onGround_0(self)});btKinematicCharacterController.prototype["__destroy__"]=btKinematicCharacterController.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btKinematicCharacterController___destroy___0(self)});function btAxisSweep3(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg2===undefined){this.ptr=_emscripten_bind_btAxisSweep3_btAxisSweep3_2(arg0,arg1);getCache(btAxisSweep3)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btAxisSweep3_btAxisSweep3_3(arg0,arg1,arg2);getCache(btAxisSweep3)[this.ptr]=this;return}if(arg4===undefined){this.ptr=_emscripten_bind_btAxisSweep3_btAxisSweep3_4(arg0,arg1,arg2,arg3);getCache(btAxisSweep3)[this.ptr]=this;return}this.ptr=_emscripten_bind_btAxisSweep3_btAxisSweep3_5(arg0,arg1,arg2,arg3,arg4);getCache(btAxisSweep3)[this.ptr]=this}btAxisSweep3.prototype=Object.create(WrapperObject.prototype);btAxisSweep3.prototype.constructor=btAxisSweep3;btAxisSweep3.prototype.__class__=btAxisSweep3;btAxisSweep3.__cache__={};Module["btAxisSweep3"]=btAxisSweep3;btAxisSweep3.prototype["__destroy__"]=btAxisSweep3.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btAxisSweep3___destroy___0(self)});function btSoftBodyWorldInfo(){this.ptr=_emscripten_bind_btSoftBodyWorldInfo_btSoftBodyWorldInfo_0();getCache(btSoftBodyWorldInfo)[this.ptr]=this}btSoftBodyWorldInfo.prototype=Object.create(WrapperObject.prototype);btSoftBodyWorldInfo.prototype.constructor=btSoftBodyWorldInfo;btSoftBodyWorldInfo.prototype.__class__=btSoftBodyWorldInfo;btSoftBodyWorldInfo.__cache__={};Module["btSoftBodyWorldInfo"]=btSoftBodyWorldInfo;btSoftBodyWorldInfo.prototype["get_air_density"]=btSoftBodyWorldInfo.prototype.get_air_density=(function(){var self=this.ptr;return _emscripten_bind_btSoftBodyWorldInfo_get_air_density_0(self)});btSoftBodyWorldInfo.prototype["set_air_density"]=btSoftBodyWorldInfo.prototype.set_air_density=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBodyWorldInfo_set_air_density_1(self,arg0)});btSoftBodyWorldInfo.prototype["get_water_density"]=btSoftBodyWorldInfo.prototype.get_water_density=(function(){var self=this.ptr;return _emscripten_bind_btSoftBodyWorldInfo_get_water_density_0(self)});btSoftBodyWorldInfo.prototype["set_water_density"]=btSoftBodyWorldInfo.prototype.set_water_density=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBodyWorldInfo_set_water_density_1(self,arg0)});btSoftBodyWorldInfo.prototype["get_water_offset"]=btSoftBodyWorldInfo.prototype.get_water_offset=(function(){var self=this.ptr;return _emscripten_bind_btSoftBodyWorldInfo_get_water_offset_0(self)});btSoftBodyWorldInfo.prototype["set_water_offset"]=btSoftBodyWorldInfo.prototype.set_water_offset=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBodyWorldInfo_set_water_offset_1(self,arg0)});btSoftBodyWorldInfo.prototype["get_m_maxDisplacement"]=btSoftBodyWorldInfo.prototype.get_m_maxDisplacement=(function(){var self=this.ptr;return _emscripten_bind_btSoftBodyWorldInfo_get_m_maxDisplacement_0(self)});btSoftBodyWorldInfo.prototype["set_m_maxDisplacement"]=btSoftBodyWorldInfo.prototype.set_m_maxDisplacement=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBodyWorldInfo_set_m_maxDisplacement_1(self,arg0)});btSoftBodyWorldInfo.prototype["get_water_normal"]=btSoftBodyWorldInfo.prototype.get_water_normal=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBodyWorldInfo_get_water_normal_0(self),btVector3)});btSoftBodyWorldInfo.prototype["set_water_normal"]=btSoftBodyWorldInfo.prototype.set_water_normal=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBodyWorldInfo_set_water_normal_1(self,arg0)});btSoftBodyWorldInfo.prototype["get_m_broadphase"]=btSoftBodyWorldInfo.prototype.get_m_broadphase=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBodyWorldInfo_get_m_broadphase_0(self),btBroadphaseInterface)});btSoftBodyWorldInfo.prototype["set_m_broadphase"]=btSoftBodyWorldInfo.prototype.set_m_broadphase=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBodyWorldInfo_set_m_broadphase_1(self,arg0)});btSoftBodyWorldInfo.prototype["get_m_dispatcher"]=btSoftBodyWorldInfo.prototype.get_m_dispatcher=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBodyWorldInfo_get_m_dispatcher_0(self),btDispatcher)});btSoftBodyWorldInfo.prototype["set_m_dispatcher"]=btSoftBodyWorldInfo.prototype.set_m_dispatcher=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBodyWorldInfo_set_m_dispatcher_1(self,arg0)});btSoftBodyWorldInfo.prototype["get_m_gravity"]=btSoftBodyWorldInfo.prototype.get_m_gravity=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBodyWorldInfo_get_m_gravity_0(self),btVector3)});btSoftBodyWorldInfo.prototype["set_m_gravity"]=btSoftBodyWorldInfo.prototype.set_m_gravity=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBodyWorldInfo_set_m_gravity_1(self,arg0)});btSoftBodyWorldInfo.prototype["__destroy__"]=btSoftBodyWorldInfo.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSoftBodyWorldInfo___destroy___0(self)});function btConeTwistConstraint(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg2===undefined){this.ptr=_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2(arg0,arg1);getCache(btConeTwistConstraint)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_3(arg0,arg1,arg2);getCache(btConeTwistConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4(arg0,arg1,arg2,arg3);getCache(btConeTwistConstraint)[this.ptr]=this}btConeTwistConstraint.prototype=Object.create(btTypedConstraint.prototype);btConeTwistConstraint.prototype.constructor=btConeTwistConstraint;btConeTwistConstraint.prototype.__class__=btConeTwistConstraint;btConeTwistConstraint.__cache__={};Module["btConeTwistConstraint"]=btConeTwistConstraint;btConeTwistConstraint.prototype["setLimit"]=btConeTwistConstraint.prototype.setLimit=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btConeTwistConstraint_setLimit_2(self,arg0,arg1)});btConeTwistConstraint.prototype["setAngularOnly"]=btConeTwistConstraint.prototype.setAngularOnly=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeTwistConstraint_setAngularOnly_1(self,arg0)});btConeTwistConstraint.prototype["setDamping"]=btConeTwistConstraint.prototype.setDamping=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeTwistConstraint_setDamping_1(self,arg0)});btConeTwistConstraint.prototype["enableMotor"]=btConeTwistConstraint.prototype.enableMotor=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeTwistConstraint_enableMotor_1(self,arg0)});btConeTwistConstraint.prototype["setMaxMotorImpulse"]=btConeTwistConstraint.prototype.setMaxMotorImpulse=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1(self,arg0)});btConeTwistConstraint.prototype["setMaxMotorImpulseNormalized"]=btConeTwistConstraint.prototype.setMaxMotorImpulseNormalized=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1(self,arg0)});btConeTwistConstraint.prototype["setMotorTarget"]=btConeTwistConstraint.prototype.setMotorTarget=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeTwistConstraint_setMotorTarget_1(self,arg0)});btConeTwistConstraint.prototype["setMotorTargetInConstraintSpace"]=btConeTwistConstraint.prototype.setMotorTargetInConstraintSpace=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1(self,arg0)});btConeTwistConstraint.prototype["enableFeedback"]=btConeTwistConstraint.prototype.enableFeedback=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeTwistConstraint_enableFeedback_1(self,arg0)});btConeTwistConstraint.prototype["getBreakingImpulseThreshold"]=btConeTwistConstraint.prototype.getBreakingImpulseThreshold=(function(){var self=this.ptr;return _emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0(self)});btConeTwistConstraint.prototype["setBreakingImpulseThreshold"]=btConeTwistConstraint.prototype.setBreakingImpulseThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1(self,arg0)});btConeTwistConstraint.prototype["__destroy__"]=btConeTwistConstraint.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConeTwistConstraint___destroy___0(self)});function btHingeConstraint(arg0,arg1,arg2,arg3,arg4,arg5,arg6){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg5&&typeof arg5==="object")arg5=arg5.ptr;if(arg6&&typeof arg6==="object")arg6=arg6.ptr;if(arg2===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_2(arg0,arg1);getCache(btHingeConstraint)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_3(arg0,arg1,arg2);getCache(btHingeConstraint)[this.ptr]=this;return}if(arg4===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_4(arg0,arg1,arg2,arg3);getCache(btHingeConstraint)[this.ptr]=this;return}if(arg5===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_5(arg0,arg1,arg2,arg3,arg4);getCache(btHingeConstraint)[this.ptr]=this;return}if(arg6===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_6(arg0,arg1,arg2,arg3,arg4,arg5);getCache(btHingeConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_7(arg0,arg1,arg2,arg3,arg4,arg5,arg6);getCache(btHingeConstraint)[this.ptr]=this}btHingeConstraint.prototype=Object.create(btTypedConstraint.prototype);btHingeConstraint.prototype.constructor=btHingeConstraint;btHingeConstraint.prototype.__class__=btHingeConstraint;btHingeConstraint.__cache__={};Module["btHingeConstraint"]=btHingeConstraint;btHingeConstraint.prototype["setLimit"]=btHingeConstraint.prototype.setLimit=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg4===undefined){_emscripten_bind_btHingeConstraint_setLimit_4(self,arg0,arg1,arg2,arg3);return}_emscripten_bind_btHingeConstraint_setLimit_5(self,arg0,arg1,arg2,arg3,arg4)});btHingeConstraint.prototype["enableAngularMotor"]=btHingeConstraint.prototype.enableAngularMotor=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btHingeConstraint_enableAngularMotor_3(self,arg0,arg1,arg2)});btHingeConstraint.prototype["setAngularOnly"]=btHingeConstraint.prototype.setAngularOnly=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btHingeConstraint_setAngularOnly_1(self,arg0)});btHingeConstraint.prototype["enableMotor"]=btHingeConstraint.prototype.enableMotor=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btHingeConstraint_enableMotor_1(self,arg0)});btHingeConstraint.prototype["setMaxMotorImpulse"]=btHingeConstraint.prototype.setMaxMotorImpulse=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1(self,arg0)});btHingeConstraint.prototype["setMotorTarget"]=btHingeConstraint.prototype.setMotorTarget=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btHingeConstraint_setMotorTarget_2(self,arg0,arg1)});btHingeConstraint.prototype["enableFeedback"]=btHingeConstraint.prototype.enableFeedback=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btHingeConstraint_enableFeedback_1(self,arg0)});btHingeConstraint.prototype["getBreakingImpulseThreshold"]=btHingeConstraint.prototype.getBreakingImpulseThreshold=(function(){var self=this.ptr;return _emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0(self)});btHingeConstraint.prototype["setBreakingImpulseThreshold"]=btHingeConstraint.prototype.setBreakingImpulseThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1(self,arg0)});btHingeConstraint.prototype["__destroy__"]=btHingeConstraint.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btHingeConstraint___destroy___0(self)});function btRotationalLimitMotor(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg0===undefined){this.ptr=_emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_0();getCache(btRotationalLimitMotor)[this.ptr]=this;return}this.ptr=_emscripten_bind_btRotationalLimitMotor_btRotationalLimitMotor_1(arg0);getCache(btRotationalLimitMotor)[this.ptr]=this}btRotationalLimitMotor.prototype=Object.create(WrapperObject.prototype);btRotationalLimitMotor.prototype.constructor=btRotationalLimitMotor;btRotationalLimitMotor.prototype.__class__=btRotationalLimitMotor;btRotationalLimitMotor.__cache__={};Module["btRotationalLimitMotor"]=btRotationalLimitMotor;btRotationalLimitMotor.prototype["isLimited"]=btRotationalLimitMotor.prototype.isLimited=(function(){var self=this.ptr;return!!_emscripten_bind_btRotationalLimitMotor_isLimited_0(self)});btRotationalLimitMotor.prototype["needApplyTorques"]=btRotationalLimitMotor.prototype.needApplyTorques=(function(){var self=this.ptr;return!!_emscripten_bind_btRotationalLimitMotor_needApplyTorques_0(self)});btRotationalLimitMotor.prototype["get_m_loLimit"]=btRotationalLimitMotor.prototype.get_m_loLimit=(function(){var self=this.ptr;return _emscripten_bind_btRotationalLimitMotor_get_m_loLimit_0(self)});btRotationalLimitMotor.prototype["set_m_loLimit"]=btRotationalLimitMotor.prototype.set_m_loLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRotationalLimitMotor_set_m_loLimit_1(self,arg0)});btRotationalLimitMotor.prototype["get_m_hiLimit"]=btRotationalLimitMotor.prototype.get_m_hiLimit=(function(){var self=this.ptr;return _emscripten_bind_btRotationalLimitMotor_get_m_hiLimit_0(self)});btRotationalLimitMotor.prototype["set_m_hiLimit"]=btRotationalLimitMotor.prototype.set_m_hiLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRotationalLimitMotor_set_m_hiLimit_1(self,arg0)});btRotationalLimitMotor.prototype["get_m_targetVelocity"]=btRotationalLimitMotor.prototype.get_m_targetVelocity=(function(){var self=this.ptr;return _emscripten_bind_btRotationalLimitMotor_get_m_targetVelocity_0(self)});btRotationalLimitMotor.prototype["set_m_targetVelocity"]=btRotationalLimitMotor.prototype.set_m_targetVelocity=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRotationalLimitMotor_set_m_targetVelocity_1(self,arg0)});btRotationalLimitMotor.prototype["get_m_maxMotorForce"]=btRotationalLimitMotor.prototype.get_m_maxMotorForce=(function(){var self=this.ptr;return _emscripten_bind_btRotationalLimitMotor_get_m_maxMotorForce_0(self)});btRotationalLimitMotor.prototype["set_m_maxMotorForce"]=btRotationalLimitMotor.prototype.set_m_maxMotorForce=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRotationalLimitMotor_set_m_maxMotorForce_1(self,arg0)});btRotationalLimitMotor.prototype["get_m_enableMotor"]=btRotationalLimitMotor.prototype.get_m_enableMotor=(function(){var self=this.ptr;return!!_emscripten_bind_btRotationalLimitMotor_get_m_enableMotor_0(self)});btRotationalLimitMotor.prototype["set_m_enableMotor"]=btRotationalLimitMotor.prototype.set_m_enableMotor=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btRotationalLimitMotor_set_m_enableMotor_1(self,arg0)});btRotationalLimitMotor.prototype["__destroy__"]=btRotationalLimitMotor.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btRotationalLimitMotor___destroy___0(self)});function btConeShapeZ(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;this.ptr=_emscripten_bind_btConeShapeZ_btConeShapeZ_2(arg0,arg1);getCache(btConeShapeZ)[this.ptr]=this}btConeShapeZ.prototype=Object.create(btConeShape.prototype);btConeShapeZ.prototype.constructor=btConeShapeZ;btConeShapeZ.prototype.__class__=btConeShapeZ;btConeShapeZ.__cache__={};Module["btConeShapeZ"]=btConeShapeZ;btConeShapeZ.prototype["setLocalScaling"]=btConeShapeZ.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeShapeZ_setLocalScaling_1(self,arg0)});btConeShapeZ.prototype["calculateLocalInertia"]=btConeShapeZ.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btConeShapeZ_calculateLocalInertia_2(self,arg0,arg1)});btConeShapeZ.prototype["__destroy__"]=btConeShapeZ.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConeShapeZ___destroy___0(self)});function btConeShapeX(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;this.ptr=_emscripten_bind_btConeShapeX_btConeShapeX_2(arg0,arg1);getCache(btConeShapeX)[this.ptr]=this}btConeShapeX.prototype=Object.create(btConeShape.prototype);btConeShapeX.prototype.constructor=btConeShapeX;btConeShapeX.prototype.__class__=btConeShapeX;btConeShapeX.__cache__={};Module["btConeShapeX"]=btConeShapeX;btConeShapeX.prototype["setLocalScaling"]=btConeShapeX.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConeShapeX_setLocalScaling_1(self,arg0)});btConeShapeX.prototype["calculateLocalInertia"]=btConeShapeX.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btConeShapeX_calculateLocalInertia_2(self,arg0,arg1)});btConeShapeX.prototype["__destroy__"]=btConeShapeX.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConeShapeX___destroy___0(self)});function btTriangleMesh(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg0===undefined){this.ptr=_emscripten_bind_btTriangleMesh_btTriangleMesh_0();getCache(btTriangleMesh)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btTriangleMesh_btTriangleMesh_1(arg0);getCache(btTriangleMesh)[this.ptr]=this;return}this.ptr=_emscripten_bind_btTriangleMesh_btTriangleMesh_2(arg0,arg1);getCache(btTriangleMesh)[this.ptr]=this}btTriangleMesh.prototype=Object.create(btStridingMeshInterface.prototype);btTriangleMesh.prototype.constructor=btTriangleMesh;btTriangleMesh.prototype.__class__=btTriangleMesh;btTriangleMesh.__cache__={};Module["btTriangleMesh"]=btTriangleMesh;btTriangleMesh.prototype["addTriangle"]=btTriangleMesh.prototype.addTriangle=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg3===undefined){_emscripten_bind_btTriangleMesh_addTriangle_3(self,arg0,arg1,arg2);return}_emscripten_bind_btTriangleMesh_addTriangle_4(self,arg0,arg1,arg2,arg3)});btTriangleMesh.prototype["__destroy__"]=btTriangleMesh.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btTriangleMesh___destroy___0(self)});function btConvexHullShape(){this.ptr=_emscripten_bind_btConvexHullShape_btConvexHullShape_0();getCache(btConvexHullShape)[this.ptr]=this}btConvexHullShape.prototype=Object.create(btCollisionShape.prototype);btConvexHullShape.prototype.constructor=btConvexHullShape;btConvexHullShape.prototype.__class__=btConvexHullShape;btConvexHullShape.__cache__={};Module["btConvexHullShape"]=btConvexHullShape;btConvexHullShape.prototype["addPoint"]=btConvexHullShape.prototype.addPoint=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg1===undefined){_emscripten_bind_btConvexHullShape_addPoint_1(self,arg0);return}_emscripten_bind_btConvexHullShape_addPoint_2(self,arg0,arg1)});btConvexHullShape.prototype["setMargin"]=btConvexHullShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConvexHullShape_setMargin_1(self,arg0)});btConvexHullShape.prototype["getMargin"]=btConvexHullShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btConvexHullShape_getMargin_0(self)});btConvexHullShape.prototype["setLocalScaling"]=btConvexHullShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btConvexHullShape_setLocalScaling_1(self,arg0)});btConvexHullShape.prototype["calculateLocalInertia"]=btConvexHullShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btConvexHullShape_calculateLocalInertia_2(self,arg0,arg1)});btConvexHullShape.prototype["__destroy__"]=btConvexHullShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConvexHullShape___destroy___0(self)});function btVehicleTuning(){this.ptr=_emscripten_bind_btVehicleTuning_btVehicleTuning_0();getCache(btVehicleTuning)[this.ptr]=this}btVehicleTuning.prototype=Object.create(WrapperObject.prototype);btVehicleTuning.prototype.constructor=btVehicleTuning;btVehicleTuning.prototype.__class__=btVehicleTuning;btVehicleTuning.__cache__={};Module["btVehicleTuning"]=btVehicleTuning;btVehicleTuning.prototype["get_m_suspensionStiffness"]=btVehicleTuning.prototype.get_m_suspensionStiffness=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0(self)});btVehicleTuning.prototype["set_m_suspensionStiffness"]=btVehicleTuning.prototype.set_m_suspensionStiffness=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1(self,arg0)});btVehicleTuning.prototype["get_m_suspensionCompression"]=btVehicleTuning.prototype.get_m_suspensionCompression=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0(self)});btVehicleTuning.prototype["set_m_suspensionCompression"]=btVehicleTuning.prototype.set_m_suspensionCompression=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1(self,arg0)});btVehicleTuning.prototype["get_m_suspensionDamping"]=btVehicleTuning.prototype.get_m_suspensionDamping=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0(self)});btVehicleTuning.prototype["set_m_suspensionDamping"]=btVehicleTuning.prototype.set_m_suspensionDamping=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1(self,arg0)});btVehicleTuning.prototype["get_m_maxSuspensionTravelCm"]=btVehicleTuning.prototype.get_m_maxSuspensionTravelCm=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0(self)});btVehicleTuning.prototype["set_m_maxSuspensionTravelCm"]=btVehicleTuning.prototype.set_m_maxSuspensionTravelCm=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1(self,arg0)});btVehicleTuning.prototype["get_m_frictionSlip"]=btVehicleTuning.prototype.get_m_frictionSlip=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0(self)});btVehicleTuning.prototype["set_m_frictionSlip"]=btVehicleTuning.prototype.set_m_frictionSlip=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1(self,arg0)});btVehicleTuning.prototype["get_m_maxSuspensionForce"]=btVehicleTuning.prototype.get_m_maxSuspensionForce=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0(self)});btVehicleTuning.prototype["set_m_maxSuspensionForce"]=btVehicleTuning.prototype.set_m_maxSuspensionForce=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1(self,arg0)});function btCollisionObjectWrapper(){throw"cannot construct a btCollisionObjectWrapper, no constructor in IDL"}btCollisionObjectWrapper.prototype=Object.create(WrapperObject.prototype);btCollisionObjectWrapper.prototype.constructor=btCollisionObjectWrapper;btCollisionObjectWrapper.prototype.__class__=btCollisionObjectWrapper;btCollisionObjectWrapper.__cache__={};Module["btCollisionObjectWrapper"]=btCollisionObjectWrapper;function btDefaultMotionState(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg0===undefined){this.ptr=_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0();getCache(btDefaultMotionState)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1(arg0);getCache(btDefaultMotionState)[this.ptr]=this;return}this.ptr=_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2(arg0,arg1);getCache(btDefaultMotionState)[this.ptr]=this}btDefaultMotionState.prototype=Object.create(btMotionState.prototype);btDefaultMotionState.prototype.constructor=btDefaultMotionState;btDefaultMotionState.prototype.__class__=btDefaultMotionState;btDefaultMotionState.__cache__={};Module["btDefaultMotionState"]=btDefaultMotionState;btDefaultMotionState.prototype["getWorldTransform"]=btDefaultMotionState.prototype.getWorldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDefaultMotionState_getWorldTransform_1(self,arg0)});btDefaultMotionState.prototype["setWorldTransform"]=btDefaultMotionState.prototype.setWorldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDefaultMotionState_setWorldTransform_1(self,arg0)});btDefaultMotionState.prototype["get_m_graphicsWorldTrans"]=btDefaultMotionState.prototype.get_m_graphicsWorldTrans=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0(self),btTransform)});btDefaultMotionState.prototype["set_m_graphicsWorldTrans"]=btDefaultMotionState.prototype.set_m_graphicsWorldTrans=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1(self,arg0)});btDefaultMotionState.prototype["__destroy__"]=btDefaultMotionState.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDefaultMotionState___destroy___0(self)});function btWheelInfo(){throw"cannot construct a btWheelInfo, no constructor in IDL"}btWheelInfo.prototype=Object.create(WrapperObject.prototype);btWheelInfo.prototype.constructor=btWheelInfo;btWheelInfo.prototype.__class__=btWheelInfo;btWheelInfo.__cache__={};Module["btWheelInfo"]=btWheelInfo;btWheelInfo.prototype["get_m_worldTransform"]=btWheelInfo.prototype.get_m_worldTransform=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btWheelInfo_get_m_worldTransform_0(self),btTransform)});btWheelInfo.prototype["set_m_worldTransform"]=btWheelInfo.prototype.set_m_worldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_worldTransform_1(self,arg0)});btWheelInfo.prototype["get_m_suspensionStiffness"]=btWheelInfo.prototype.get_m_suspensionStiffness=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0(self)});btWheelInfo.prototype["set_m_suspensionStiffness"]=btWheelInfo.prototype.set_m_suspensionStiffness=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1(self,arg0)});btWheelInfo.prototype["get_m_frictionSlip"]=btWheelInfo.prototype.get_m_frictionSlip=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_frictionSlip_0(self)});btWheelInfo.prototype["set_m_frictionSlip"]=btWheelInfo.prototype.set_m_frictionSlip=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_frictionSlip_1(self,arg0)});btWheelInfo.prototype["get_m_engineForce"]=btWheelInfo.prototype.get_m_engineForce=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_engineForce_0(self)});btWheelInfo.prototype["set_m_engineForce"]=btWheelInfo.prototype.set_m_engineForce=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_engineForce_1(self,arg0)});btWheelInfo.prototype["get_m_rollInfluence"]=btWheelInfo.prototype.get_m_rollInfluence=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_rollInfluence_0(self)});btWheelInfo.prototype["set_m_rollInfluence"]=btWheelInfo.prototype.set_m_rollInfluence=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_rollInfluence_1(self,arg0)});btWheelInfo.prototype["get_m_suspensionRestLength1"]=btWheelInfo.prototype.get_m_suspensionRestLength1=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0(self)});btWheelInfo.prototype["set_m_suspensionRestLength1"]=btWheelInfo.prototype.set_m_suspensionRestLength1=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1(self,arg0)});btWheelInfo.prototype["get_m_wheelsRadius"]=btWheelInfo.prototype.get_m_wheelsRadius=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0(self)});btWheelInfo.prototype["set_m_wheelsRadius"]=btWheelInfo.prototype.set_m_wheelsRadius=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1(self,arg0)});btWheelInfo.prototype["get_m_wheelsDampingCompression"]=btWheelInfo.prototype.get_m_wheelsDampingCompression=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0(self)});btWheelInfo.prototype["set_m_wheelsDampingCompression"]=btWheelInfo.prototype.set_m_wheelsDampingCompression=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1(self,arg0)});btWheelInfo.prototype["get_m_wheelsDampingRelaxation"]=btWheelInfo.prototype.get_m_wheelsDampingRelaxation=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0(self)});btWheelInfo.prototype["set_m_wheelsDampingRelaxation"]=btWheelInfo.prototype.set_m_wheelsDampingRelaxation=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1(self,arg0)});btWheelInfo.prototype["get_m_steering"]=btWheelInfo.prototype.get_m_steering=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_steering_0(self)});btWheelInfo.prototype["set_m_steering"]=btWheelInfo.prototype.set_m_steering=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_steering_1(self,arg0)});btWheelInfo.prototype["get_m_maxSuspensionForce"]=btWheelInfo.prototype.get_m_maxSuspensionForce=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0(self)});btWheelInfo.prototype["set_m_maxSuspensionForce"]=btWheelInfo.prototype.set_m_maxSuspensionForce=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1(self,arg0)});btWheelInfo.prototype["get_m_maxSuspensionTravelCm"]=btWheelInfo.prototype.get_m_maxSuspensionTravelCm=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0(self)});btWheelInfo.prototype["set_m_maxSuspensionTravelCm"]=btWheelInfo.prototype.set_m_maxSuspensionTravelCm=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1(self,arg0)});btWheelInfo.prototype["get_m_wheelsSuspensionForce"]=btWheelInfo.prototype.get_m_wheelsSuspensionForce=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0(self)});btWheelInfo.prototype["set_m_wheelsSuspensionForce"]=btWheelInfo.prototype.set_m_wheelsSuspensionForce=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1(self,arg0)});btWheelInfo.prototype["get_m_bIsFrontWheel"]=btWheelInfo.prototype.get_m_bIsFrontWheel=(function(){var self=this.ptr;return!!_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0(self)});btWheelInfo.prototype["set_m_bIsFrontWheel"]=btWheelInfo.prototype.set_m_bIsFrontWheel=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1(self,arg0)});btWheelInfo.prototype["get_m_raycastInfo"]=btWheelInfo.prototype.get_m_raycastInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btWheelInfo_get_m_raycastInfo_0(self),RaycastInfo)});btWheelInfo.prototype["set_m_raycastInfo"]=btWheelInfo.prototype.set_m_raycastInfo=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_raycastInfo_1(self,arg0)});btWheelInfo.prototype["get_m_chassisConnectionPointCS"]=btWheelInfo.prototype.get_m_chassisConnectionPointCS=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0(self),btVector3)});btWheelInfo.prototype["set_m_chassisConnectionPointCS"]=btWheelInfo.prototype.set_m_chassisConnectionPointCS=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1(self,arg0)});btWheelInfo.prototype["__destroy__"]=btWheelInfo.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btWheelInfo___destroy___0(self)});function btVector4(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg0===undefined){this.ptr=_emscripten_bind_btVector4_btVector4_0();getCache(btVector4)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btVector4_btVector4_1(arg0);getCache(btVector4)[this.ptr]=this;return}if(arg2===undefined){this.ptr=_emscripten_bind_btVector4_btVector4_2(arg0,arg1);getCache(btVector4)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btVector4_btVector4_3(arg0,arg1,arg2);getCache(btVector4)[this.ptr]=this;return}this.ptr=_emscripten_bind_btVector4_btVector4_4(arg0,arg1,arg2,arg3);getCache(btVector4)[this.ptr]=this}btVector4.prototype=Object.create(btVector3.prototype);btVector4.prototype.constructor=btVector4;btVector4.prototype.__class__=btVector4;btVector4.__cache__={};Module["btVector4"]=btVector4;btVector4.prototype["w"]=btVector4.prototype.w=(function(){var self=this.ptr;return _emscripten_bind_btVector4_w_0(self)});btVector4.prototype["setValue"]=btVector4.prototype.setValue=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;_emscripten_bind_btVector4_setValue_4(self,arg0,arg1,arg2,arg3)});btVector4.prototype["length"]=btVector4.prototype.length=(function(){var self=this.ptr;return _emscripten_bind_btVector4_length_0(self)});btVector4.prototype["x"]=btVector4.prototype.x=(function(){var self=this.ptr;return _emscripten_bind_btVector4_x_0(self)});btVector4.prototype["y"]=btVector4.prototype.y=(function(){var self=this.ptr;return _emscripten_bind_btVector4_y_0(self)});btVector4.prototype["z"]=btVector4.prototype.z=(function(){var self=this.ptr;return _emscripten_bind_btVector4_z_0(self)});btVector4.prototype["setX"]=btVector4.prototype.setX=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVector4_setX_1(self,arg0)});btVector4.prototype["setY"]=btVector4.prototype.setY=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVector4_setY_1(self,arg0)});btVector4.prototype["setZ"]=btVector4.prototype.setZ=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btVector4_setZ_1(self,arg0)});btVector4.prototype["normalize"]=btVector4.prototype.normalize=(function(){var self=this.ptr;_emscripten_bind_btVector4_normalize_0(self)});btVector4.prototype["dot"]=btVector4.prototype.dot=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return _emscripten_bind_btVector4_dot_1(self,arg0)});btVector4.prototype["op_mul"]=btVector4.prototype.op_mul=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btVector4_op_mul_1(self,arg0),btVector3)});btVector4.prototype["op_add"]=btVector4.prototype.op_add=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btVector4_op_add_1(self,arg0),btVector3)});btVector4.prototype["op_sub"]=btVector4.prototype.op_sub=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btVector4_op_sub_1(self,arg0),btVector3)});btVector4.prototype["__destroy__"]=btVector4.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btVector4___destroy___0(self)});function btDefaultCollisionConstructionInfo(){this.ptr=_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0();getCache(btDefaultCollisionConstructionInfo)[this.ptr]=this}btDefaultCollisionConstructionInfo.prototype=Object.create(WrapperObject.prototype);btDefaultCollisionConstructionInfo.prototype.constructor=btDefaultCollisionConstructionInfo;btDefaultCollisionConstructionInfo.prototype.__class__=btDefaultCollisionConstructionInfo;btDefaultCollisionConstructionInfo.__cache__={};Module["btDefaultCollisionConstructionInfo"]=btDefaultCollisionConstructionInfo;btDefaultCollisionConstructionInfo.prototype["__destroy__"]=btDefaultCollisionConstructionInfo.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0(self)});function btConstraintSolver(){throw"cannot construct a btConstraintSolver, no constructor in IDL"}btConstraintSolver.prototype=Object.create(WrapperObject.prototype);btConstraintSolver.prototype.constructor=btConstraintSolver;btConstraintSolver.prototype.__class__=btConstraintSolver;btConstraintSolver.__cache__={};Module["btConstraintSolver"]=btConstraintSolver;btConstraintSolver.prototype["__destroy__"]=btConstraintSolver.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btConstraintSolver___destroy___0(self)});function btRaycastVehicle(arg0,arg1,arg2){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;this.ptr=_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3(arg0,arg1,arg2);getCache(btRaycastVehicle)[this.ptr]=this}btRaycastVehicle.prototype=Object.create(btActionInterface.prototype);btRaycastVehicle.prototype.constructor=btRaycastVehicle;btRaycastVehicle.prototype.__class__=btRaycastVehicle;btRaycastVehicle.__cache__={};Module["btRaycastVehicle"]=btRaycastVehicle;btRaycastVehicle.prototype["applyEngineForce"]=btRaycastVehicle.prototype.applyEngineForce=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRaycastVehicle_applyEngineForce_2(self,arg0,arg1)});btRaycastVehicle.prototype["setSteeringValue"]=btRaycastVehicle.prototype.setSteeringValue=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRaycastVehicle_setSteeringValue_2(self,arg0,arg1)});btRaycastVehicle.prototype["getWheelTransformWS"]=btRaycastVehicle.prototype.getWheelTransformWS=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1(self,arg0),btTransform)});btRaycastVehicle.prototype["updateWheelTransform"]=btRaycastVehicle.prototype.updateWheelTransform=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRaycastVehicle_updateWheelTransform_2(self,arg0,arg1)});btRaycastVehicle.prototype["addWheel"]=btRaycastVehicle.prototype.addWheel=(function(arg0,arg1,arg2,arg3,arg4,arg5,arg6){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg5&&typeof arg5==="object")arg5=arg5.ptr;if(arg6&&typeof arg6==="object")arg6=arg6.ptr;return wrapPointer(_emscripten_bind_btRaycastVehicle_addWheel_7(self,arg0,arg1,arg2,arg3,arg4,arg5,arg6),btWheelInfo)});btRaycastVehicle.prototype["getNumWheels"]=btRaycastVehicle.prototype.getNumWheels=(function(){var self=this.ptr;return _emscripten_bind_btRaycastVehicle_getNumWheels_0(self)});btRaycastVehicle.prototype["getRigidBody"]=btRaycastVehicle.prototype.getRigidBody=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRaycastVehicle_getRigidBody_0(self),btRigidBody)});btRaycastVehicle.prototype["getWheelInfo"]=btRaycastVehicle.prototype.getWheelInfo=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btRaycastVehicle_getWheelInfo_1(self,arg0),btWheelInfo)});btRaycastVehicle.prototype["setBrake"]=btRaycastVehicle.prototype.setBrake=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btRaycastVehicle_setBrake_2(self,arg0,arg1)});btRaycastVehicle.prototype["setCoordinateSystem"]=btRaycastVehicle.prototype.setCoordinateSystem=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3(self,arg0,arg1,arg2)});btRaycastVehicle.prototype["getCurrentSpeedKmHour"]=btRaycastVehicle.prototype.getCurrentSpeedKmHour=(function(){var self=this.ptr;return _emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0(self)});btRaycastVehicle.prototype["__destroy__"]=btRaycastVehicle.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btRaycastVehicle___destroy___0(self)});function btCylinderShapeX(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;this.ptr=_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1(arg0);getCache(btCylinderShapeX)[this.ptr]=this}btCylinderShapeX.prototype=Object.create(btCylinderShape.prototype);btCylinderShapeX.prototype.constructor=btCylinderShapeX;btCylinderShapeX.prototype.__class__=btCylinderShapeX;btCylinderShapeX.__cache__={};Module["btCylinderShapeX"]=btCylinderShapeX;btCylinderShapeX.prototype["setMargin"]=btCylinderShapeX.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCylinderShapeX_setMargin_1(self,arg0)});btCylinderShapeX.prototype["getMargin"]=btCylinderShapeX.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btCylinderShapeX_getMargin_0(self)});btCylinderShapeX.prototype["setLocalScaling"]=btCylinderShapeX.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCylinderShapeX_setLocalScaling_1(self,arg0)});btCylinderShapeX.prototype["calculateLocalInertia"]=btCylinderShapeX.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2(self,arg0,arg1)});btCylinderShapeX.prototype["__destroy__"]=btCylinderShapeX.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCylinderShapeX___destroy___0(self)});function btCylinderShapeZ(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;this.ptr=_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1(arg0);getCache(btCylinderShapeZ)[this.ptr]=this}btCylinderShapeZ.prototype=Object.create(btCylinderShape.prototype);btCylinderShapeZ.prototype.constructor=btCylinderShapeZ;btCylinderShapeZ.prototype.__class__=btCylinderShapeZ;btCylinderShapeZ.__cache__={};Module["btCylinderShapeZ"]=btCylinderShapeZ;btCylinderShapeZ.prototype["setMargin"]=btCylinderShapeZ.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCylinderShapeZ_setMargin_1(self,arg0)});btCylinderShapeZ.prototype["getMargin"]=btCylinderShapeZ.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btCylinderShapeZ_getMargin_0(self)});btCylinderShapeZ.prototype["setLocalScaling"]=btCylinderShapeZ.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCylinderShapeZ_setLocalScaling_1(self,arg0)});btCylinderShapeZ.prototype["calculateLocalInertia"]=btCylinderShapeZ.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2(self,arg0,arg1)});btCylinderShapeZ.prototype["__destroy__"]=btCylinderShapeZ.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCylinderShapeZ___destroy___0(self)});function btSequentialImpulseConstraintSolver(){this.ptr=_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0();getCache(btSequentialImpulseConstraintSolver)[this.ptr]=this}btSequentialImpulseConstraintSolver.prototype=Object.create(WrapperObject.prototype);btSequentialImpulseConstraintSolver.prototype.constructor=btSequentialImpulseConstraintSolver;btSequentialImpulseConstraintSolver.prototype.__class__=btSequentialImpulseConstraintSolver;btSequentialImpulseConstraintSolver.__cache__={};Module["btSequentialImpulseConstraintSolver"]=btSequentialImpulseConstraintSolver;btSequentialImpulseConstraintSolver.prototype["__destroy__"]=btSequentialImpulseConstraintSolver.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0(self)});function RaycastInfo(){throw"cannot construct a RaycastInfo, no constructor in IDL"}RaycastInfo.prototype=Object.create(WrapperObject.prototype);RaycastInfo.prototype.constructor=RaycastInfo;RaycastInfo.prototype.__class__=RaycastInfo;RaycastInfo.__cache__={};Module["RaycastInfo"]=RaycastInfo;RaycastInfo.prototype["get_m_contactNormalWS"]=RaycastInfo.prototype.get_m_contactNormalWS=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_RaycastInfo_get_m_contactNormalWS_0(self),btVector3)});RaycastInfo.prototype["set_m_contactNormalWS"]=RaycastInfo.prototype.set_m_contactNormalWS=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RaycastInfo_set_m_contactNormalWS_1(self,arg0)});RaycastInfo.prototype["get_m_contactPointWS"]=RaycastInfo.prototype.get_m_contactPointWS=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_RaycastInfo_get_m_contactPointWS_0(self),btVector3)});RaycastInfo.prototype["set_m_contactPointWS"]=RaycastInfo.prototype.set_m_contactPointWS=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RaycastInfo_set_m_contactPointWS_1(self,arg0)});RaycastInfo.prototype["get_m_suspensionLength"]=RaycastInfo.prototype.get_m_suspensionLength=(function(){var self=this.ptr;return _emscripten_bind_RaycastInfo_get_m_suspensionLength_0(self)});RaycastInfo.prototype["set_m_suspensionLength"]=RaycastInfo.prototype.set_m_suspensionLength=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RaycastInfo_set_m_suspensionLength_1(self,arg0)});RaycastInfo.prototype["get_m_hardPointWS"]=RaycastInfo.prototype.get_m_hardPointWS=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_RaycastInfo_get_m_hardPointWS_0(self),btVector3)});RaycastInfo.prototype["set_m_hardPointWS"]=RaycastInfo.prototype.set_m_hardPointWS=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RaycastInfo_set_m_hardPointWS_1(self,arg0)});RaycastInfo.prototype["get_m_wheelDirectionWS"]=RaycastInfo.prototype.get_m_wheelDirectionWS=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0(self),btVector3)});RaycastInfo.prototype["set_m_wheelDirectionWS"]=RaycastInfo.prototype.set_m_wheelDirectionWS=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1(self,arg0)});RaycastInfo.prototype["get_m_wheelAxleWS"]=RaycastInfo.prototype.get_m_wheelAxleWS=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0(self),btVector3)});RaycastInfo.prototype["set_m_wheelAxleWS"]=RaycastInfo.prototype.set_m_wheelAxleWS=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1(self,arg0)});RaycastInfo.prototype["get_m_isInContact"]=RaycastInfo.prototype.get_m_isInContact=(function(){var self=this.ptr;return!!_emscripten_bind_RaycastInfo_get_m_isInContact_0(self)});RaycastInfo.prototype["set_m_isInContact"]=RaycastInfo.prototype.set_m_isInContact=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RaycastInfo_set_m_isInContact_1(self,arg0)});RaycastInfo.prototype["get_m_groundObject"]=RaycastInfo.prototype.get_m_groundObject=(function(){var self=this.ptr;return _emscripten_bind_RaycastInfo_get_m_groundObject_0(self)});RaycastInfo.prototype["set_m_groundObject"]=RaycastInfo.prototype.set_m_groundObject=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_RaycastInfo_set_m_groundObject_1(self,arg0)});RaycastInfo.prototype["__destroy__"]=RaycastInfo.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_RaycastInfo___destroy___0(self)});function tNodeArray(){throw"cannot construct a tNodeArray, no constructor in IDL"}tNodeArray.prototype=Object.create(WrapperObject.prototype);tNodeArray.prototype.constructor=tNodeArray;tNodeArray.prototype.__class__=tNodeArray;tNodeArray.__cache__={};Module["tNodeArray"]=tNodeArray;tNodeArray.prototype["size"]=tNodeArray.prototype.size=(function(){var self=this.ptr;return _emscripten_bind_tNodeArray_size_0(self)});tNodeArray.prototype["at"]=tNodeArray.prototype.at=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_tNodeArray_at_1(self,arg0),Node)});tNodeArray.prototype["__destroy__"]=tNodeArray.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_tNodeArray___destroy___0(self)});function btSoftBody(arg0,arg1,arg2,arg3){ensureCache.prepare();if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(typeof arg3=="object"){arg3=ensureFloat32(arg3)}this.ptr=_emscripten_bind_btSoftBody_btSoftBody_4(arg0,arg1,arg2,arg3);getCache(btSoftBody)[this.ptr]=this}btSoftBody.prototype=Object.create(btCollisionObject.prototype);btSoftBody.prototype.constructor=btSoftBody;btSoftBody.prototype.__class__=btSoftBody;btSoftBody.__cache__={};Module["btSoftBody"]=btSoftBody;btSoftBody.prototype["checkLink"]=btSoftBody.prototype.checkLink=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;return!!_emscripten_bind_btSoftBody_checkLink_2(self,arg0,arg1)});btSoftBody.prototype["checkFace"]=btSoftBody.prototype.checkFace=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;return!!_emscripten_bind_btSoftBody_checkFace_3(self,arg0,arg1,arg2)});btSoftBody.prototype["appendMaterial"]=btSoftBody.prototype.appendMaterial=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBody_appendMaterial_0(self),Material)});btSoftBody.prototype["appendNode"]=btSoftBody.prototype.appendNode=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btSoftBody_appendNode_2(self,arg0,arg1)});btSoftBody.prototype["appendLink"]=btSoftBody.prototype.appendLink=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;_emscripten_bind_btSoftBody_appendLink_4(self,arg0,arg1,arg2,arg3)});btSoftBody.prototype["appendFace"]=btSoftBody.prototype.appendFace=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;_emscripten_bind_btSoftBody_appendFace_4(self,arg0,arg1,arg2,arg3)});btSoftBody.prototype["appendTetra"]=btSoftBody.prototype.appendTetra=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;_emscripten_bind_btSoftBody_appendTetra_5(self,arg0,arg1,arg2,arg3,arg4)});btSoftBody.prototype["appendAnchor"]=btSoftBody.prototype.appendAnchor=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;_emscripten_bind_btSoftBody_appendAnchor_4(self,arg0,arg1,arg2,arg3)});btSoftBody.prototype["getTotalMass"]=btSoftBody.prototype.getTotalMass=(function(){var self=this.ptr;return _emscripten_bind_btSoftBody_getTotalMass_0(self)});btSoftBody.prototype["setTotalMass"]=btSoftBody.prototype.setTotalMass=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btSoftBody_setTotalMass_2(self,arg0,arg1)});btSoftBody.prototype["setMass"]=btSoftBody.prototype.setMass=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btSoftBody_setMass_2(self,arg0,arg1)});btSoftBody.prototype["transform"]=btSoftBody.prototype.transform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_transform_1(self,arg0)});btSoftBody.prototype["translate"]=btSoftBody.prototype.translate=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_translate_1(self,arg0)});btSoftBody.prototype["rotate"]=btSoftBody.prototype.rotate=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_rotate_1(self,arg0)});btSoftBody.prototype["scale"]=btSoftBody.prototype.scale=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_scale_1(self,arg0)});btSoftBody.prototype["generateClusters"]=btSoftBody.prototype.generateClusters=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg1===undefined){return _emscripten_bind_btSoftBody_generateClusters_1(self,arg0)}return _emscripten_bind_btSoftBody_generateClusters_2(self,arg0,arg1)});btSoftBody.prototype["upcast"]=btSoftBody.prototype.upcast=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btSoftBody_upcast_1(self,arg0),btSoftBody)});btSoftBody.prototype["setAnisotropicFriction"]=btSoftBody.prototype.setAnisotropicFriction=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btSoftBody_setAnisotropicFriction_2(self,arg0,arg1)});btSoftBody.prototype["getCollisionShape"]=btSoftBody.prototype.getCollisionShape=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBody_getCollisionShape_0(self),btCollisionShape)});btSoftBody.prototype["setContactProcessingThreshold"]=btSoftBody.prototype.setContactProcessingThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setContactProcessingThreshold_1(self,arg0)});btSoftBody.prototype["setActivationState"]=btSoftBody.prototype.setActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setActivationState_1(self,arg0)});btSoftBody.prototype["forceActivationState"]=btSoftBody.prototype.forceActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_forceActivationState_1(self,arg0)});btSoftBody.prototype["activate"]=btSoftBody.prototype.activate=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg0===undefined){_emscripten_bind_btSoftBody_activate_0(self);return}_emscripten_bind_btSoftBody_activate_1(self,arg0)});btSoftBody.prototype["isActive"]=btSoftBody.prototype.isActive=(function(){var self=this.ptr;return!!_emscripten_bind_btSoftBody_isActive_0(self)});btSoftBody.prototype["isKinematicObject"]=btSoftBody.prototype.isKinematicObject=(function(){var self=this.ptr;return!!_emscripten_bind_btSoftBody_isKinematicObject_0(self)});btSoftBody.prototype["setRestitution"]=btSoftBody.prototype.setRestitution=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setRestitution_1(self,arg0)});btSoftBody.prototype["setFriction"]=btSoftBody.prototype.setFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setFriction_1(self,arg0)});btSoftBody.prototype["setRollingFriction"]=btSoftBody.prototype.setRollingFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setRollingFriction_1(self,arg0)});btSoftBody.prototype["getWorldTransform"]=btSoftBody.prototype.getWorldTransform=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBody_getWorldTransform_0(self),btTransform)});btSoftBody.prototype["getCollisionFlags"]=btSoftBody.prototype.getCollisionFlags=(function(){var self=this.ptr;return _emscripten_bind_btSoftBody_getCollisionFlags_0(self)});btSoftBody.prototype["setCollisionFlags"]=btSoftBody.prototype.setCollisionFlags=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setCollisionFlags_1(self,arg0)});btSoftBody.prototype["setWorldTransform"]=btSoftBody.prototype.setWorldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setWorldTransform_1(self,arg0)});btSoftBody.prototype["setCollisionShape"]=btSoftBody.prototype.setCollisionShape=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setCollisionShape_1(self,arg0)});btSoftBody.prototype["setCcdMotionThreshold"]=btSoftBody.prototype.setCcdMotionThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setCcdMotionThreshold_1(self,arg0)});btSoftBody.prototype["setCcdSweptSphereRadius"]=btSoftBody.prototype.setCcdSweptSphereRadius=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setCcdSweptSphereRadius_1(self,arg0)});btSoftBody.prototype["getUserIndex"]=btSoftBody.prototype.getUserIndex=(function(){var self=this.ptr;return _emscripten_bind_btSoftBody_getUserIndex_0(self)});btSoftBody.prototype["setUserIndex"]=btSoftBody.prototype.setUserIndex=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setUserIndex_1(self,arg0)});btSoftBody.prototype["getUserPointer"]=btSoftBody.prototype.getUserPointer=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBody_getUserPointer_0(self),VoidPtr)});btSoftBody.prototype["setUserPointer"]=btSoftBody.prototype.setUserPointer=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_setUserPointer_1(self,arg0)});btSoftBody.prototype["get_m_cfg"]=btSoftBody.prototype.get_m_cfg=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBody_get_m_cfg_0(self),Config)});btSoftBody.prototype["set_m_cfg"]=btSoftBody.prototype.set_m_cfg=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_set_m_cfg_1(self,arg0)});btSoftBody.prototype["get_m_nodes"]=btSoftBody.prototype.get_m_nodes=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBody_get_m_nodes_0(self),tNodeArray)});btSoftBody.prototype["set_m_nodes"]=btSoftBody.prototype.set_m_nodes=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_set_m_nodes_1(self,arg0)});btSoftBody.prototype["get_m_materials"]=btSoftBody.prototype.get_m_materials=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftBody_get_m_materials_0(self),tMaterialArray)});btSoftBody.prototype["set_m_materials"]=btSoftBody.prototype.set_m_materials=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftBody_set_m_materials_1(self,arg0)});btSoftBody.prototype["__destroy__"]=btSoftBody.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSoftBody___destroy___0(self)});function btHeightfieldTerrainShape(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg5&&typeof arg5==="object")arg5=arg5.ptr;if(arg6&&typeof arg6==="object")arg6=arg6.ptr;if(arg7&&typeof arg7==="object")arg7=arg7.ptr;if(arg8&&typeof arg8==="object")arg8=arg8.ptr;this.ptr=_emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);getCache(btHeightfieldTerrainShape)[this.ptr]=this}btHeightfieldTerrainShape.prototype=Object.create(btConcaveShape.prototype);btHeightfieldTerrainShape.prototype.constructor=btHeightfieldTerrainShape;btHeightfieldTerrainShape.prototype.__class__=btHeightfieldTerrainShape;btHeightfieldTerrainShape.__cache__={};Module["btHeightfieldTerrainShape"]=btHeightfieldTerrainShape;btHeightfieldTerrainShape.prototype["setMargin"]=btHeightfieldTerrainShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btHeightfieldTerrainShape_setMargin_1(self,arg0)});btHeightfieldTerrainShape.prototype["getMargin"]=btHeightfieldTerrainShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btHeightfieldTerrainShape_getMargin_0(self)});btHeightfieldTerrainShape.prototype["setLocalScaling"]=btHeightfieldTerrainShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1(self,arg0)});btHeightfieldTerrainShape.prototype["calculateLocalInertia"]=btHeightfieldTerrainShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2(self,arg0,arg1)});btHeightfieldTerrainShape.prototype["__destroy__"]=btHeightfieldTerrainShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btHeightfieldTerrainShape___destroy___0(self)});function Config(){throw"cannot construct a Config, no constructor in IDL"}Config.prototype=Object.create(WrapperObject.prototype);Config.prototype.constructor=Config;Config.prototype.__class__=Config;Config.__cache__={};Module["Config"]=Config;Config.prototype["get_kVCF"]=Config.prototype.get_kVCF=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kVCF_0(self)});Config.prototype["set_kVCF"]=Config.prototype.set_kVCF=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kVCF_1(self,arg0)});Config.prototype["get_kDP"]=Config.prototype.get_kDP=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kDP_0(self)});Config.prototype["set_kDP"]=Config.prototype.set_kDP=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kDP_1(self,arg0)});Config.prototype["get_kDG"]=Config.prototype.get_kDG=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kDG_0(self)});Config.prototype["set_kDG"]=Config.prototype.set_kDG=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kDG_1(self,arg0)});Config.prototype["get_kLF"]=Config.prototype.get_kLF=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kLF_0(self)});Config.prototype["set_kLF"]=Config.prototype.set_kLF=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kLF_1(self,arg0)});Config.prototype["get_kPR"]=Config.prototype.get_kPR=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kPR_0(self)});Config.prototype["set_kPR"]=Config.prototype.set_kPR=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kPR_1(self,arg0)});Config.prototype["get_kVC"]=Config.prototype.get_kVC=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kVC_0(self)});Config.prototype["set_kVC"]=Config.prototype.set_kVC=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kVC_1(self,arg0)});Config.prototype["get_kDF"]=Config.prototype.get_kDF=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kDF_0(self)});Config.prototype["set_kDF"]=Config.prototype.set_kDF=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kDF_1(self,arg0)});Config.prototype["get_kMT"]=Config.prototype.get_kMT=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kMT_0(self)});Config.prototype["set_kMT"]=Config.prototype.set_kMT=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kMT_1(self,arg0)});Config.prototype["get_kCHR"]=Config.prototype.get_kCHR=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kCHR_0(self)});Config.prototype["set_kCHR"]=Config.prototype.set_kCHR=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kCHR_1(self,arg0)});Config.prototype["get_kKHR"]=Config.prototype.get_kKHR=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kKHR_0(self)});Config.prototype["set_kKHR"]=Config.prototype.set_kKHR=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kKHR_1(self,arg0)});Config.prototype["get_kSHR"]=Config.prototype.get_kSHR=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kSHR_0(self)});Config.prototype["set_kSHR"]=Config.prototype.set_kSHR=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kSHR_1(self,arg0)});Config.prototype["get_kAHR"]=Config.prototype.get_kAHR=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kAHR_0(self)});Config.prototype["set_kAHR"]=Config.prototype.set_kAHR=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kAHR_1(self,arg0)});Config.prototype["get_kSRHR_CL"]=Config.prototype.get_kSRHR_CL=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kSRHR_CL_0(self)});Config.prototype["set_kSRHR_CL"]=Config.prototype.set_kSRHR_CL=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kSRHR_CL_1(self,arg0)});Config.prototype["get_kSKHR_CL"]=Config.prototype.get_kSKHR_CL=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kSKHR_CL_0(self)});Config.prototype["set_kSKHR_CL"]=Config.prototype.set_kSKHR_CL=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kSKHR_CL_1(self,arg0)});Config.prototype["get_kSSHR_CL"]=Config.prototype.get_kSSHR_CL=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kSSHR_CL_0(self)});Config.prototype["set_kSSHR_CL"]=Config.prototype.set_kSSHR_CL=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kSSHR_CL_1(self,arg0)});Config.prototype["get_kSR_SPLT_CL"]=Config.prototype.get_kSR_SPLT_CL=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kSR_SPLT_CL_0(self)});Config.prototype["set_kSR_SPLT_CL"]=Config.prototype.set_kSR_SPLT_CL=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kSR_SPLT_CL_1(self,arg0)});Config.prototype["get_kSK_SPLT_CL"]=Config.prototype.get_kSK_SPLT_CL=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kSK_SPLT_CL_0(self)});Config.prototype["set_kSK_SPLT_CL"]=Config.prototype.set_kSK_SPLT_CL=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kSK_SPLT_CL_1(self,arg0)});Config.prototype["get_kSS_SPLT_CL"]=Config.prototype.get_kSS_SPLT_CL=(function(){var self=this.ptr;return _emscripten_bind_Config_get_kSS_SPLT_CL_0(self)});Config.prototype["set_kSS_SPLT_CL"]=Config.prototype.set_kSS_SPLT_CL=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_kSS_SPLT_CL_1(self,arg0)});Config.prototype["get_maxvolume"]=Config.prototype.get_maxvolume=(function(){var self=this.ptr;return _emscripten_bind_Config_get_maxvolume_0(self)});Config.prototype["set_maxvolume"]=Config.prototype.set_maxvolume=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_maxvolume_1(self,arg0)});Config.prototype["get_timescale"]=Config.prototype.get_timescale=(function(){var self=this.ptr;return _emscripten_bind_Config_get_timescale_0(self)});Config.prototype["set_timescale"]=Config.prototype.set_timescale=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_timescale_1(self,arg0)});Config.prototype["get_viterations"]=Config.prototype.get_viterations=(function(){var self=this.ptr;return _emscripten_bind_Config_get_viterations_0(self)});Config.prototype["set_viterations"]=Config.prototype.set_viterations=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_viterations_1(self,arg0)});Config.prototype["get_piterations"]=Config.prototype.get_piterations=(function(){var self=this.ptr;return _emscripten_bind_Config_get_piterations_0(self)});Config.prototype["set_piterations"]=Config.prototype.set_piterations=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_piterations_1(self,arg0)});Config.prototype["get_diterations"]=Config.prototype.get_diterations=(function(){var self=this.ptr;return _emscripten_bind_Config_get_diterations_0(self)});Config.prototype["set_diterations"]=Config.prototype.set_diterations=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_diterations_1(self,arg0)});Config.prototype["get_citerations"]=Config.prototype.get_citerations=(function(){var self=this.ptr;return _emscripten_bind_Config_get_citerations_0(self)});Config.prototype["set_citerations"]=Config.prototype.set_citerations=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_citerations_1(self,arg0)});Config.prototype["get_collisions"]=Config.prototype.get_collisions=(function(){var self=this.ptr;return _emscripten_bind_Config_get_collisions_0(self)});Config.prototype["set_collisions"]=Config.prototype.set_collisions=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Config_set_collisions_1(self,arg0)});Config.prototype["__destroy__"]=Config.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_Config___destroy___0(self)});function Node(){throw"cannot construct a Node, no constructor in IDL"}Node.prototype=Object.create(WrapperObject.prototype);Node.prototype.constructor=Node;Node.prototype.__class__=Node;Node.__cache__={};Module["Node"]=Node;Node.prototype["get_m_x"]=Node.prototype.get_m_x=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_Node_get_m_x_0(self),btVector3)});Node.prototype["set_m_x"]=Node.prototype.set_m_x=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Node_set_m_x_1(self,arg0)});Node.prototype["get_m_n"]=Node.prototype.get_m_n=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_Node_get_m_n_0(self),btVector3)});Node.prototype["set_m_n"]=Node.prototype.set_m_n=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_Node_set_m_n_1(self,arg0)});Node.prototype["__destroy__"]=Node.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_Node___destroy___0(self)});function btGhostPairCallback(){this.ptr=_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0();getCache(btGhostPairCallback)[this.ptr]=this}btGhostPairCallback.prototype=Object.create(WrapperObject.prototype);btGhostPairCallback.prototype.constructor=btGhostPairCallback;btGhostPairCallback.prototype.__class__=btGhostPairCallback;btGhostPairCallback.__cache__={};Module["btGhostPairCallback"]=btGhostPairCallback;btGhostPairCallback.prototype["__destroy__"]=btGhostPairCallback.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btGhostPairCallback___destroy___0(self)});function btOverlappingPairCallback(){throw"cannot construct a btOverlappingPairCallback, no constructor in IDL"}btOverlappingPairCallback.prototype=Object.create(WrapperObject.prototype);btOverlappingPairCallback.prototype.constructor=btOverlappingPairCallback;btOverlappingPairCallback.prototype.__class__=btOverlappingPairCallback;btOverlappingPairCallback.__cache__={};Module["btOverlappingPairCallback"]=btOverlappingPairCallback;btOverlappingPairCallback.prototype["__destroy__"]=btOverlappingPairCallback.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btOverlappingPairCallback___destroy___0(self)});function btCollisionDispatcher(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;this.ptr=_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1(arg0);getCache(btCollisionDispatcher)[this.ptr]=this}btCollisionDispatcher.prototype=Object.create(btDispatcher.prototype);btCollisionDispatcher.prototype.constructor=btCollisionDispatcher;btCollisionDispatcher.prototype.__class__=btCollisionDispatcher;btCollisionDispatcher.__cache__={};Module["btCollisionDispatcher"]=btCollisionDispatcher;btCollisionDispatcher.prototype["getNumManifolds"]=btCollisionDispatcher.prototype.getNumManifolds=(function(){var self=this.ptr;return _emscripten_bind_btCollisionDispatcher_getNumManifolds_0(self)});btCollisionDispatcher.prototype["getManifoldByIndexInternal"]=btCollisionDispatcher.prototype.getManifoldByIndexInternal=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1(self,arg0),btPersistentManifold)});btCollisionDispatcher.prototype["__destroy__"]=btCollisionDispatcher.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCollisionDispatcher___destroy___0(self)});function btSoftBodyArray(){throw"cannot construct a btSoftBodyArray, no constructor in IDL"}btSoftBodyArray.prototype=Object.create(WrapperObject.prototype);btSoftBodyArray.prototype.constructor=btSoftBodyArray;btSoftBodyArray.prototype.__class__=btSoftBodyArray;btSoftBodyArray.__cache__={};Module["btSoftBodyArray"]=btSoftBodyArray;btSoftBodyArray.prototype["size"]=btSoftBodyArray.prototype.size=(function(){var self=this.ptr;return _emscripten_bind_btSoftBodyArray_size_0(self)});btSoftBodyArray.prototype["at"]=btSoftBodyArray.prototype.at=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btSoftBodyArray_at_1(self,arg0),btSoftBody)});btSoftBodyArray.prototype["__destroy__"]=btSoftBodyArray.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSoftBodyArray___destroy___0(self)});function btStaticPlaneShape(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;this.ptr=_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2(arg0,arg1);getCache(btStaticPlaneShape)[this.ptr]=this}btStaticPlaneShape.prototype=Object.create(btConcaveShape.prototype);btStaticPlaneShape.prototype.constructor=btStaticPlaneShape;btStaticPlaneShape.prototype.__class__=btStaticPlaneShape;btStaticPlaneShape.__cache__={};Module["btStaticPlaneShape"]=btStaticPlaneShape;btStaticPlaneShape.prototype["setLocalScaling"]=btStaticPlaneShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btStaticPlaneShape_setLocalScaling_1(self,arg0)});btStaticPlaneShape.prototype["calculateLocalInertia"]=btStaticPlaneShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2(self,arg0,arg1)});btStaticPlaneShape.prototype["__destroy__"]=btStaticPlaneShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btStaticPlaneShape___destroy___0(self)});function btOverlappingPairCache(){throw"cannot construct a btOverlappingPairCache, no constructor in IDL"}btOverlappingPairCache.prototype=Object.create(WrapperObject.prototype);btOverlappingPairCache.prototype.constructor=btOverlappingPairCache;btOverlappingPairCache.prototype.__class__=btOverlappingPairCache;btOverlappingPairCache.__cache__={};Module["btOverlappingPairCache"]=btOverlappingPairCache;btOverlappingPairCache.prototype["setInternalGhostPairCallback"]=btOverlappingPairCache.prototype.setInternalGhostPairCallback=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1(self,arg0)});btOverlappingPairCache.prototype["__destroy__"]=btOverlappingPairCache.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btOverlappingPairCache___destroy___0(self)});function btSoftRigidDynamicsWorld(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;this.ptr=_emscripten_bind_btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_5(arg0,arg1,arg2,arg3,arg4);getCache(btSoftRigidDynamicsWorld)[this.ptr]=this}btSoftRigidDynamicsWorld.prototype=Object.create(btDiscreteDynamicsWorld.prototype);btSoftRigidDynamicsWorld.prototype.constructor=btSoftRigidDynamicsWorld;btSoftRigidDynamicsWorld.prototype.__class__=btSoftRigidDynamicsWorld;btSoftRigidDynamicsWorld.__cache__={};Module["btSoftRigidDynamicsWorld"]=btSoftRigidDynamicsWorld;btSoftRigidDynamicsWorld.prototype["addSoftBody"]=btSoftRigidDynamicsWorld.prototype.addSoftBody=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_addSoftBody_3(self,arg0,arg1,arg2)});btSoftRigidDynamicsWorld.prototype["removeSoftBody"]=btSoftRigidDynamicsWorld.prototype.removeSoftBody=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_removeSoftBody_1(self,arg0)});btSoftRigidDynamicsWorld.prototype["removeCollisionObject"]=btSoftRigidDynamicsWorld.prototype.removeCollisionObject=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_removeCollisionObject_1(self,arg0)});btSoftRigidDynamicsWorld.prototype["getWorldInfo"]=btSoftRigidDynamicsWorld.prototype.getWorldInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftRigidDynamicsWorld_getWorldInfo_0(self),btSoftBodyWorldInfo)});btSoftRigidDynamicsWorld.prototype["getSoftBodyArray"]=btSoftRigidDynamicsWorld.prototype.getSoftBodyArray=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftRigidDynamicsWorld_getSoftBodyArray_0(self),btSoftBodyArray)});btSoftRigidDynamicsWorld.prototype["getDispatcher"]=btSoftRigidDynamicsWorld.prototype.getDispatcher=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftRigidDynamicsWorld_getDispatcher_0(self),btDispatcher)});btSoftRigidDynamicsWorld.prototype["rayTest"]=btSoftRigidDynamicsWorld.prototype.rayTest=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_rayTest_3(self,arg0,arg1,arg2)});btSoftRigidDynamicsWorld.prototype["getPairCache"]=btSoftRigidDynamicsWorld.prototype.getPairCache=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftRigidDynamicsWorld_getPairCache_0(self),btOverlappingPairCache)});btSoftRigidDynamicsWorld.prototype["getDispatchInfo"]=btSoftRigidDynamicsWorld.prototype.getDispatchInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftRigidDynamicsWorld_getDispatchInfo_0(self),btDispatcherInfo)});btSoftRigidDynamicsWorld.prototype["addCollisionObject"]=btSoftRigidDynamicsWorld.prototype.addCollisionObject=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg1===undefined){_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_2(self,arg0,arg1);return}_emscripten_bind_btSoftRigidDynamicsWorld_addCollisionObject_3(self,arg0,arg1,arg2)});btSoftRigidDynamicsWorld.prototype["getBroadphase"]=btSoftRigidDynamicsWorld.prototype.getBroadphase=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftRigidDynamicsWorld_getBroadphase_0(self),btBroadphaseInterface)});btSoftRigidDynamicsWorld.prototype["convexSweepTest"]=btSoftRigidDynamicsWorld.prototype.convexSweepTest=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_convexSweepTest_5(self,arg0,arg1,arg2,arg3,arg4)});btSoftRigidDynamicsWorld.prototype["contactPairTest"]=btSoftRigidDynamicsWorld.prototype.contactPairTest=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_contactPairTest_3(self,arg0,arg1,arg2)});btSoftRigidDynamicsWorld.prototype["contactTest"]=btSoftRigidDynamicsWorld.prototype.contactTest=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_contactTest_2(self,arg0,arg1)});btSoftRigidDynamicsWorld.prototype["setGravity"]=btSoftRigidDynamicsWorld.prototype.setGravity=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_setGravity_1(self,arg0)});btSoftRigidDynamicsWorld.prototype["getGravity"]=btSoftRigidDynamicsWorld.prototype.getGravity=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftRigidDynamicsWorld_getGravity_0(self),btVector3)});btSoftRigidDynamicsWorld.prototype["addRigidBody"]=btSoftRigidDynamicsWorld.prototype.addRigidBody=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg1===undefined){_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_2(self,arg0,arg1);return}_emscripten_bind_btSoftRigidDynamicsWorld_addRigidBody_3(self,arg0,arg1,arg2)});btSoftRigidDynamicsWorld.prototype["removeRigidBody"]=btSoftRigidDynamicsWorld.prototype.removeRigidBody=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_removeRigidBody_1(self,arg0)});btSoftRigidDynamicsWorld.prototype["addVehicle"]=btSoftRigidDynamicsWorld.prototype.addVehicle=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_addVehicle_1(self,arg0)});btSoftRigidDynamicsWorld.prototype["removeVehicle"]=btSoftRigidDynamicsWorld.prototype.removeVehicle=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_removeVehicle_1(self,arg0)});btSoftRigidDynamicsWorld.prototype["addConstraint"]=btSoftRigidDynamicsWorld.prototype.addConstraint=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg1===undefined){_emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_1(self,arg0);return}_emscripten_bind_btSoftRigidDynamicsWorld_addConstraint_2(self,arg0,arg1)});btSoftRigidDynamicsWorld.prototype["removeConstraint"]=btSoftRigidDynamicsWorld.prototype.removeConstraint=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_removeConstraint_1(self,arg0)});btSoftRigidDynamicsWorld.prototype["stepSimulation"]=btSoftRigidDynamicsWorld.prototype.stepSimulation=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg1===undefined){return _emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_1(self,arg0)}if(arg2===undefined){return _emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_2(self,arg0,arg1)}return _emscripten_bind_btSoftRigidDynamicsWorld_stepSimulation_3(self,arg0,arg1,arg2)});btSoftRigidDynamicsWorld.prototype["addAction"]=btSoftRigidDynamicsWorld.prototype.addAction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_addAction_1(self,arg0)});btSoftRigidDynamicsWorld.prototype["removeAction"]=btSoftRigidDynamicsWorld.prototype.removeAction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSoftRigidDynamicsWorld_removeAction_1(self,arg0)});btSoftRigidDynamicsWorld.prototype["getSolverInfo"]=btSoftRigidDynamicsWorld.prototype.getSolverInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btSoftRigidDynamicsWorld_getSolverInfo_0(self),btContactSolverInfo)});btSoftRigidDynamicsWorld.prototype["__destroy__"]=btSoftRigidDynamicsWorld.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSoftRigidDynamicsWorld___destroy___0(self)});function btTransform(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg0===undefined){this.ptr=_emscripten_bind_btTransform_btTransform_0();getCache(btTransform)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btTransform_btTransform_1(arg0);getCache(btTransform)[this.ptr]=this;return}this.ptr=_emscripten_bind_btTransform_btTransform_2(arg0,arg1);getCache(btTransform)[this.ptr]=this}btTransform.prototype=Object.create(WrapperObject.prototype);btTransform.prototype.constructor=btTransform;btTransform.prototype.__class__=btTransform;btTransform.__cache__={};Module["btTransform"]=btTransform;btTransform.prototype["setIdentity"]=btTransform.prototype.setIdentity=(function(){var self=this.ptr;_emscripten_bind_btTransform_setIdentity_0(self)});btTransform.prototype["setOrigin"]=btTransform.prototype.setOrigin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btTransform_setOrigin_1(self,arg0)});btTransform.prototype["setRotation"]=btTransform.prototype.setRotation=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btTransform_setRotation_1(self,arg0)});btTransform.prototype["getOrigin"]=btTransform.prototype.getOrigin=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btTransform_getOrigin_0(self),btVector3)});btTransform.prototype["getRotation"]=btTransform.prototype.getRotation=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btTransform_getRotation_0(self),btQuaternion)});btTransform.prototype["getBasis"]=btTransform.prototype.getBasis=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btTransform_getBasis_0(self),btMatrix3x3)});btTransform.prototype["setFromOpenGLMatrix"]=btTransform.prototype.setFromOpenGLMatrix=(function(arg0){var self=this.ptr;ensureCache.prepare();if(typeof arg0=="object"){arg0=ensureFloat32(arg0)}_emscripten_bind_btTransform_setFromOpenGLMatrix_1(self,arg0)});btTransform.prototype["__destroy__"]=btTransform.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btTransform___destroy___0(self)});function ClosestRayResultCallback(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;this.ptr=_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2(arg0,arg1);getCache(ClosestRayResultCallback)[this.ptr]=this}ClosestRayResultCallback.prototype=Object.create(RayResultCallback.prototype);ClosestRayResultCallback.prototype.constructor=ClosestRayResultCallback;ClosestRayResultCallback.prototype.__class__=ClosestRayResultCallback;ClosestRayResultCallback.__cache__={};Module["ClosestRayResultCallback"]=ClosestRayResultCallback;ClosestRayResultCallback.prototype["hasHit"]=ClosestRayResultCallback.prototype.hasHit=(function(){var self=this.ptr;return!!_emscripten_bind_ClosestRayResultCallback_hasHit_0(self)});ClosestRayResultCallback.prototype["get_m_rayFromWorld"]=ClosestRayResultCallback.prototype.get_m_rayFromWorld=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0(self),btVector3)});ClosestRayResultCallback.prototype["set_m_rayFromWorld"]=ClosestRayResultCallback.prototype.set_m_rayFromWorld=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_rayToWorld"]=ClosestRayResultCallback.prototype.get_m_rayToWorld=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0(self),btVector3)});ClosestRayResultCallback.prototype["set_m_rayToWorld"]=ClosestRayResultCallback.prototype.set_m_rayToWorld=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_hitNormalWorld"]=ClosestRayResultCallback.prototype.get_m_hitNormalWorld=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0(self),btVector3)});ClosestRayResultCallback.prototype["set_m_hitNormalWorld"]=ClosestRayResultCallback.prototype.set_m_hitNormalWorld=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_hitPointWorld"]=ClosestRayResultCallback.prototype.get_m_hitPointWorld=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0(self),btVector3)});ClosestRayResultCallback.prototype["set_m_hitPointWorld"]=ClosestRayResultCallback.prototype.set_m_hitPointWorld=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_collisionFilterGroup"]=ClosestRayResultCallback.prototype.get_m_collisionFilterGroup=(function(){var self=this.ptr;return _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0(self)});ClosestRayResultCallback.prototype["set_m_collisionFilterGroup"]=ClosestRayResultCallback.prototype.set_m_collisionFilterGroup=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_collisionFilterMask"]=ClosestRayResultCallback.prototype.get_m_collisionFilterMask=(function(){var self=this.ptr;return _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0(self)});ClosestRayResultCallback.prototype["set_m_collisionFilterMask"]=ClosestRayResultCallback.prototype.set_m_collisionFilterMask=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_collisionObject"]=ClosestRayResultCallback.prototype.get_m_collisionObject=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0(self),btCollisionObject)});ClosestRayResultCallback.prototype["set_m_collisionObject"]=ClosestRayResultCallback.prototype.set_m_collisionObject=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1(self,arg0)});ClosestRayResultCallback.prototype["__destroy__"]=ClosestRayResultCallback.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_ClosestRayResultCallback___destroy___0(self)});function btSoftBodyRigidBodyCollisionConfiguration(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg0===undefined){this.ptr=_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_0();getCache(btSoftBodyRigidBodyCollisionConfiguration)[this.ptr]=this;return}this.ptr=_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_1(arg0);getCache(btSoftBodyRigidBodyCollisionConfiguration)[this.ptr]=this}btSoftBodyRigidBodyCollisionConfiguration.prototype=Object.create(btDefaultCollisionConfiguration.prototype);btSoftBodyRigidBodyCollisionConfiguration.prototype.constructor=btSoftBodyRigidBodyCollisionConfiguration;btSoftBodyRigidBodyCollisionConfiguration.prototype.__class__=btSoftBodyRigidBodyCollisionConfiguration;btSoftBodyRigidBodyCollisionConfiguration.__cache__={};Module["btSoftBodyRigidBodyCollisionConfiguration"]=btSoftBodyRigidBodyCollisionConfiguration;btSoftBodyRigidBodyCollisionConfiguration.prototype["__destroy__"]=btSoftBodyRigidBodyCollisionConfiguration.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSoftBodyRigidBodyCollisionConfiguration___destroy___0(self)});function ConcreteContactResultCallback(){this.ptr=_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0();getCache(ConcreteContactResultCallback)[this.ptr]=this}ConcreteContactResultCallback.prototype=Object.create(ContactResultCallback.prototype);ConcreteContactResultCallback.prototype.constructor=ConcreteContactResultCallback;ConcreteContactResultCallback.prototype.__class__=ConcreteContactResultCallback;ConcreteContactResultCallback.__cache__={};Module["ConcreteContactResultCallback"]=ConcreteContactResultCallback;ConcreteContactResultCallback.prototype["addSingleResult"]=ConcreteContactResultCallback.prototype.addSingleResult=(function(arg0,arg1,arg2,arg3,arg4,arg5,arg6){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg5&&typeof arg5==="object")arg5=arg5.ptr;if(arg6&&typeof arg6==="object")arg6=arg6.ptr;return _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7(self,arg0,arg1,arg2,arg3,arg4,arg5,arg6)});ConcreteContactResultCallback.prototype["__destroy__"]=ConcreteContactResultCallback.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_ConcreteContactResultCallback___destroy___0(self)});function btBvhTriangleMeshShape(arg0,arg1,arg2){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg2===undefined){this.ptr=_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2(arg0,arg1);getCache(btBvhTriangleMeshShape)[this.ptr]=this;return}this.ptr=_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3(arg0,arg1,arg2);getCache(btBvhTriangleMeshShape)[this.ptr]=this}btBvhTriangleMeshShape.prototype=Object.create(btTriangleMeshShape.prototype);btBvhTriangleMeshShape.prototype.constructor=btBvhTriangleMeshShape;btBvhTriangleMeshShape.prototype.__class__=btBvhTriangleMeshShape;btBvhTriangleMeshShape.__cache__={};Module["btBvhTriangleMeshShape"]=btBvhTriangleMeshShape;btBvhTriangleMeshShape.prototype["setLocalScaling"]=btBvhTriangleMeshShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1(self,arg0)});btBvhTriangleMeshShape.prototype["calculateLocalInertia"]=btBvhTriangleMeshShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2(self,arg0,arg1)});btBvhTriangleMeshShape.prototype["__destroy__"]=btBvhTriangleMeshShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btBvhTriangleMeshShape___destroy___0(self)});function btSliderConstraint(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg3===undefined){this.ptr=_emscripten_bind_btSliderConstraint_btSliderConstraint_3(arg0,arg1,arg2);getCache(btSliderConstraint)[this.ptr]=this;return}if(arg4===undefined){this.ptr=_emscripten_bind_btSliderConstraint_btSliderConstraint_4(arg0,arg1,arg2,arg3);getCache(btSliderConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btSliderConstraint_btSliderConstraint_5(arg0,arg1,arg2,arg3,arg4);getCache(btSliderConstraint)[this.ptr]=this}btSliderConstraint.prototype=Object.create(btTypedConstraint.prototype);btSliderConstraint.prototype.constructor=btSliderConstraint;btSliderConstraint.prototype.__class__=btSliderConstraint;btSliderConstraint.__cache__={};Module["btSliderConstraint"]=btSliderConstraint;btSliderConstraint.prototype["setLowerLinLimit"]=btSliderConstraint.prototype.setLowerLinLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSliderConstraint_setLowerLinLimit_1(self,arg0)});btSliderConstraint.prototype["setUpperLinLimit"]=btSliderConstraint.prototype.setUpperLinLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSliderConstraint_setUpperLinLimit_1(self,arg0)});btSliderConstraint.prototype["setLowerAngLimit"]=btSliderConstraint.prototype.setLowerAngLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSliderConstraint_setLowerAngLimit_1(self,arg0)});btSliderConstraint.prototype["setUpperAngLimit"]=btSliderConstraint.prototype.setUpperAngLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSliderConstraint_setUpperAngLimit_1(self,arg0)});btSliderConstraint.prototype["enableFeedback"]=btSliderConstraint.prototype.enableFeedback=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSliderConstraint_enableFeedback_1(self,arg0)});btSliderConstraint.prototype["getBreakingImpulseThreshold"]=btSliderConstraint.prototype.getBreakingImpulseThreshold=(function(){var self=this.ptr;return _emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0(self)});btSliderConstraint.prototype["setBreakingImpulseThreshold"]=btSliderConstraint.prototype.setBreakingImpulseThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1(self,arg0)});btSliderConstraint.prototype["__destroy__"]=btSliderConstraint.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSliderConstraint___destroy___0(self)});function btPairCachingGhostObject(){this.ptr=_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0();getCache(btPairCachingGhostObject)[this.ptr]=this}btPairCachingGhostObject.prototype=Object.create(btGhostObject.prototype);btPairCachingGhostObject.prototype.constructor=btPairCachingGhostObject;btPairCachingGhostObject.prototype.__class__=btPairCachingGhostObject;btPairCachingGhostObject.__cache__={};Module["btPairCachingGhostObject"]=btPairCachingGhostObject;btPairCachingGhostObject.prototype["setAnisotropicFriction"]=btPairCachingGhostObject.prototype.setAnisotropicFriction=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2(self,arg0,arg1)});btPairCachingGhostObject.prototype["getCollisionShape"]=btPairCachingGhostObject.prototype.getCollisionShape=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0(self),btCollisionShape)});btPairCachingGhostObject.prototype["setContactProcessingThreshold"]=btPairCachingGhostObject.prototype.setContactProcessingThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1(self,arg0)});btPairCachingGhostObject.prototype["setActivationState"]=btPairCachingGhostObject.prototype.setActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setActivationState_1(self,arg0)});btPairCachingGhostObject.prototype["forceActivationState"]=btPairCachingGhostObject.prototype.forceActivationState=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_forceActivationState_1(self,arg0)});btPairCachingGhostObject.prototype["activate"]=btPairCachingGhostObject.prototype.activate=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg0===undefined){_emscripten_bind_btPairCachingGhostObject_activate_0(self);return}_emscripten_bind_btPairCachingGhostObject_activate_1(self,arg0)});btPairCachingGhostObject.prototype["isActive"]=btPairCachingGhostObject.prototype.isActive=(function(){var self=this.ptr;return!!_emscripten_bind_btPairCachingGhostObject_isActive_0(self)});btPairCachingGhostObject.prototype["isKinematicObject"]=btPairCachingGhostObject.prototype.isKinematicObject=(function(){var self=this.ptr;return!!_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0(self)});btPairCachingGhostObject.prototype["setRestitution"]=btPairCachingGhostObject.prototype.setRestitution=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setRestitution_1(self,arg0)});btPairCachingGhostObject.prototype["setFriction"]=btPairCachingGhostObject.prototype.setFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setFriction_1(self,arg0)});btPairCachingGhostObject.prototype["setRollingFriction"]=btPairCachingGhostObject.prototype.setRollingFriction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setRollingFriction_1(self,arg0)});btPairCachingGhostObject.prototype["getWorldTransform"]=btPairCachingGhostObject.prototype.getWorldTransform=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0(self),btTransform)});btPairCachingGhostObject.prototype["getCollisionFlags"]=btPairCachingGhostObject.prototype.getCollisionFlags=(function(){var self=this.ptr;return _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0(self)});btPairCachingGhostObject.prototype["setCollisionFlags"]=btPairCachingGhostObject.prototype.setCollisionFlags=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1(self,arg0)});btPairCachingGhostObject.prototype["setWorldTransform"]=btPairCachingGhostObject.prototype.setWorldTransform=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1(self,arg0)});btPairCachingGhostObject.prototype["setCollisionShape"]=btPairCachingGhostObject.prototype.setCollisionShape=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1(self,arg0)});btPairCachingGhostObject.prototype["setCcdMotionThreshold"]=btPairCachingGhostObject.prototype.setCcdMotionThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1(self,arg0)});btPairCachingGhostObject.prototype["setCcdSweptSphereRadius"]=btPairCachingGhostObject.prototype.setCcdSweptSphereRadius=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1(self,arg0)});btPairCachingGhostObject.prototype["getUserIndex"]=btPairCachingGhostObject.prototype.getUserIndex=(function(){var self=this.ptr;return _emscripten_bind_btPairCachingGhostObject_getUserIndex_0(self)});btPairCachingGhostObject.prototype["setUserIndex"]=btPairCachingGhostObject.prototype.setUserIndex=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setUserIndex_1(self,arg0)});btPairCachingGhostObject.prototype["getUserPointer"]=btPairCachingGhostObject.prototype.getUserPointer=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getUserPointer_0(self),VoidPtr)});btPairCachingGhostObject.prototype["setUserPointer"]=btPairCachingGhostObject.prototype.setUserPointer=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPairCachingGhostObject_setUserPointer_1(self,arg0)});btPairCachingGhostObject.prototype["getNumOverlappingObjects"]=btPairCachingGhostObject.prototype.getNumOverlappingObjects=(function(){var self=this.ptr;return _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0(self)});btPairCachingGhostObject.prototype["getOverlappingObject"]=btPairCachingGhostObject.prototype.getOverlappingObject=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1(self,arg0),btCollisionObject)});btPairCachingGhostObject.prototype["__destroy__"]=btPairCachingGhostObject.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btPairCachingGhostObject___destroy___0(self)});function btManifoldPoint(){throw"cannot construct a btManifoldPoint, no constructor in IDL"}btManifoldPoint.prototype=Object.create(WrapperObject.prototype);btManifoldPoint.prototype.constructor=btManifoldPoint;btManifoldPoint.prototype.__class__=btManifoldPoint;btManifoldPoint.__cache__={};Module["btManifoldPoint"]=btManifoldPoint;btManifoldPoint.prototype["getPositionWorldOnA"]=btManifoldPoint.prototype.getPositionWorldOnA=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0(self),btVector3)});btManifoldPoint.prototype["getPositionWorldOnB"]=btManifoldPoint.prototype.getPositionWorldOnB=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0(self),btVector3)});btManifoldPoint.prototype["getAppliedImpulse"]=btManifoldPoint.prototype.getAppliedImpulse=(function(){var self=this.ptr;return _emscripten_bind_btManifoldPoint_getAppliedImpulse_0(self)});btManifoldPoint.prototype["getDistance"]=btManifoldPoint.prototype.getDistance=(function(){var self=this.ptr;return _emscripten_bind_btManifoldPoint_getDistance_0(self)});btManifoldPoint.prototype["get_m_localPointA"]=btManifoldPoint.prototype.get_m_localPointA=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_localPointA_0(self),btVector3)});btManifoldPoint.prototype["set_m_localPointA"]=btManifoldPoint.prototype.set_m_localPointA=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btManifoldPoint_set_m_localPointA_1(self,arg0)});btManifoldPoint.prototype["get_m_localPointB"]=btManifoldPoint.prototype.get_m_localPointB=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_localPointB_0(self),btVector3)});btManifoldPoint.prototype["set_m_localPointB"]=btManifoldPoint.prototype.set_m_localPointB=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btManifoldPoint_set_m_localPointB_1(self,arg0)});btManifoldPoint.prototype["get_m_positionWorldOnB"]=btManifoldPoint.prototype.get_m_positionWorldOnB=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0(self),btVector3)});btManifoldPoint.prototype["set_m_positionWorldOnB"]=btManifoldPoint.prototype.set_m_positionWorldOnB=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1(self,arg0)});btManifoldPoint.prototype["get_m_positionWorldOnA"]=btManifoldPoint.prototype.get_m_positionWorldOnA=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0(self),btVector3)});btManifoldPoint.prototype["set_m_positionWorldOnA"]=btManifoldPoint.prototype.set_m_positionWorldOnA=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1(self,arg0)});btManifoldPoint.prototype["get_m_normalWorldOnB"]=btManifoldPoint.prototype.get_m_normalWorldOnB=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0(self),btVector3)});btManifoldPoint.prototype["set_m_normalWorldOnB"]=btManifoldPoint.prototype.set_m_normalWorldOnB=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1(self,arg0)});btManifoldPoint.prototype["__destroy__"]=btManifoldPoint.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btManifoldPoint___destroy___0(self)});function btPoint2PointConstraint(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg2===undefined){this.ptr=_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2(arg0,arg1);getCache(btPoint2PointConstraint)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_3(arg0,arg1,arg2);getCache(btPoint2PointConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4(arg0,arg1,arg2,arg3);getCache(btPoint2PointConstraint)[this.ptr]=this}btPoint2PointConstraint.prototype=Object.create(btTypedConstraint.prototype);btPoint2PointConstraint.prototype.constructor=btPoint2PointConstraint;btPoint2PointConstraint.prototype.__class__=btPoint2PointConstraint;btPoint2PointConstraint.__cache__={};Module["btPoint2PointConstraint"]=btPoint2PointConstraint;btPoint2PointConstraint.prototype["setPivotA"]=btPoint2PointConstraint.prototype.setPivotA=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPoint2PointConstraint_setPivotA_1(self,arg0)});btPoint2PointConstraint.prototype["setPivotB"]=btPoint2PointConstraint.prototype.setPivotB=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPoint2PointConstraint_setPivotB_1(self,arg0)});btPoint2PointConstraint.prototype["getPivotInA"]=btPoint2PointConstraint.prototype.getPivotInA=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPoint2PointConstraint_getPivotInA_0(self),btVector3)});btPoint2PointConstraint.prototype["getPivotInB"]=btPoint2PointConstraint.prototype.getPivotInB=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPoint2PointConstraint_getPivotInB_0(self),btVector3)});btPoint2PointConstraint.prototype["enableFeedback"]=btPoint2PointConstraint.prototype.enableFeedback=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPoint2PointConstraint_enableFeedback_1(self,arg0)});btPoint2PointConstraint.prototype["getBreakingImpulseThreshold"]=btPoint2PointConstraint.prototype.getBreakingImpulseThreshold=(function(){var self=this.ptr;return _emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0(self)});btPoint2PointConstraint.prototype["setBreakingImpulseThreshold"]=btPoint2PointConstraint.prototype.setBreakingImpulseThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1(self,arg0)});btPoint2PointConstraint.prototype["get_m_setting"]=btPoint2PointConstraint.prototype.get_m_setting=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPoint2PointConstraint_get_m_setting_0(self),btConstraintSetting)});btPoint2PointConstraint.prototype["set_m_setting"]=btPoint2PointConstraint.prototype.set_m_setting=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btPoint2PointConstraint_set_m_setting_1(self,arg0)});btPoint2PointConstraint.prototype["__destroy__"]=btPoint2PointConstraint.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btPoint2PointConstraint___destroy___0(self)});function btSoftBodyHelpers(){this.ptr=_emscripten_bind_btSoftBodyHelpers_btSoftBodyHelpers_0();getCache(btSoftBodyHelpers)[this.ptr]=this}btSoftBodyHelpers.prototype=Object.create(WrapperObject.prototype);btSoftBodyHelpers.prototype.constructor=btSoftBodyHelpers;btSoftBodyHelpers.prototype.__class__=btSoftBodyHelpers;btSoftBodyHelpers.__cache__={};Module["btSoftBodyHelpers"]=btSoftBodyHelpers;btSoftBodyHelpers.prototype["CreateRope"]=btSoftBodyHelpers.prototype.CreateRope=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;return wrapPointer(_emscripten_bind_btSoftBodyHelpers_CreateRope_5(self,arg0,arg1,arg2,arg3,arg4),btSoftBody)});btSoftBodyHelpers.prototype["CreatePatch"]=btSoftBodyHelpers.prototype.CreatePatch=(function(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg5&&typeof arg5==="object")arg5=arg5.ptr;if(arg6&&typeof arg6==="object")arg6=arg6.ptr;if(arg7&&typeof arg7==="object")arg7=arg7.ptr;if(arg8&&typeof arg8==="object")arg8=arg8.ptr;return wrapPointer(_emscripten_bind_btSoftBodyHelpers_CreatePatch_9(self,arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8),btSoftBody)});btSoftBodyHelpers.prototype["CreatePatchUV"]=btSoftBodyHelpers.prototype.CreatePatchUV=(function(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9){var self=this.ptr;ensureCache.prepare();if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg5&&typeof arg5==="object")arg5=arg5.ptr;if(arg6&&typeof arg6==="object")arg6=arg6.ptr;if(arg7&&typeof arg7==="object")arg7=arg7.ptr;if(arg8&&typeof arg8==="object")arg8=arg8.ptr;if(typeof arg9=="object"){arg9=ensureFloat32(arg9)}return wrapPointer(_emscripten_bind_btSoftBodyHelpers_CreatePatchUV_10(self,arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9),btSoftBody)});btSoftBodyHelpers.prototype["CreateEllipsoid"]=btSoftBodyHelpers.prototype.CreateEllipsoid=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;return wrapPointer(_emscripten_bind_btSoftBodyHelpers_CreateEllipsoid_4(self,arg0,arg1,arg2,arg3),btSoftBody)});btSoftBodyHelpers.prototype["CreateFromTriMesh"]=btSoftBodyHelpers.prototype.CreateFromTriMesh=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;ensureCache.prepare();if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(typeof arg1=="object"){arg1=ensureFloat32(arg1)}if(typeof arg2=="object"){arg2=ensureInt32(arg2)}if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;return wrapPointer(_emscripten_bind_btSoftBodyHelpers_CreateFromTriMesh_5(self,arg0,arg1,arg2,arg3,arg4),btSoftBody)});btSoftBodyHelpers.prototype["CreateFromConvexHull"]=btSoftBodyHelpers.prototype.CreateFromConvexHull=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;return wrapPointer(_emscripten_bind_btSoftBodyHelpers_CreateFromConvexHull_4(self,arg0,arg1,arg2,arg3),btSoftBody)});btSoftBodyHelpers.prototype["__destroy__"]=btSoftBodyHelpers.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSoftBodyHelpers___destroy___0(self)});function VoidPtr(){throw"cannot construct a VoidPtr, no constructor in IDL"}VoidPtr.prototype=Object.create(WrapperObject.prototype);VoidPtr.prototype.constructor=VoidPtr;VoidPtr.prototype.__class__=VoidPtr;VoidPtr.__cache__={};Module["VoidPtr"]=VoidPtr;VoidPtr.prototype["__destroy__"]=VoidPtr.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_VoidPtr___destroy___0(self)});function btBoxShape(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;this.ptr=_emscripten_bind_btBoxShape_btBoxShape_1(arg0);getCache(btBoxShape)[this.ptr]=this}btBoxShape.prototype=Object.create(btCollisionShape.prototype);btBoxShape.prototype.constructor=btBoxShape;btBoxShape.prototype.__class__=btBoxShape;btBoxShape.__cache__={};Module["btBoxShape"]=btBoxShape;btBoxShape.prototype["setMargin"]=btBoxShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btBoxShape_setMargin_1(self,arg0)});btBoxShape.prototype["getMargin"]=btBoxShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btBoxShape_getMargin_0(self)});btBoxShape.prototype["setLocalScaling"]=btBoxShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btBoxShape_setLocalScaling_1(self,arg0)});btBoxShape.prototype["calculateLocalInertia"]=btBoxShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btBoxShape_calculateLocalInertia_2(self,arg0,arg1)});btBoxShape.prototype["__destroy__"]=btBoxShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btBoxShape___destroy___0(self)});function btCapsuleShapeX(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;this.ptr=_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2(arg0,arg1);getCache(btCapsuleShapeX)[this.ptr]=this}btCapsuleShapeX.prototype=Object.create(btCapsuleShape.prototype);btCapsuleShapeX.prototype.constructor=btCapsuleShapeX;btCapsuleShapeX.prototype.__class__=btCapsuleShapeX;btCapsuleShapeX.__cache__={};Module["btCapsuleShapeX"]=btCapsuleShapeX;btCapsuleShapeX.prototype["setMargin"]=btCapsuleShapeX.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCapsuleShapeX_setMargin_1(self,arg0)});btCapsuleShapeX.prototype["getMargin"]=btCapsuleShapeX.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btCapsuleShapeX_getMargin_0(self)});btCapsuleShapeX.prototype["setLocalScaling"]=btCapsuleShapeX.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCapsuleShapeX_setLocalScaling_1(self,arg0)});btCapsuleShapeX.prototype["calculateLocalInertia"]=btCapsuleShapeX.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2(self,arg0,arg1)});btCapsuleShapeX.prototype["__destroy__"]=btCapsuleShapeX.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCapsuleShapeX___destroy___0(self)});function btQuaternion(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;this.ptr=_emscripten_bind_btQuaternion_btQuaternion_4(arg0,arg1,arg2,arg3);getCache(btQuaternion)[this.ptr]=this}btQuaternion.prototype=Object.create(btQuadWord.prototype);btQuaternion.prototype.constructor=btQuaternion;btQuaternion.prototype.__class__=btQuaternion;btQuaternion.__cache__={};Module["btQuaternion"]=btQuaternion;btQuaternion.prototype["setValue"]=btQuaternion.prototype.setValue=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;_emscripten_bind_btQuaternion_setValue_4(self,arg0,arg1,arg2,arg3)});btQuaternion.prototype["setEulerZYX"]=btQuaternion.prototype.setEulerZYX=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btQuaternion_setEulerZYX_3(self,arg0,arg1,arg2)});btQuaternion.prototype["setEuler"]=btQuaternion.prototype.setEuler=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;_emscripten_bind_btQuaternion_setEuler_3(self,arg0,arg1,arg2)});btQuaternion.prototype["normalize"]=btQuaternion.prototype.normalize=(function(){var self=this.ptr;_emscripten_bind_btQuaternion_normalize_0(self)});btQuaternion.prototype["x"]=btQuaternion.prototype.x=(function(){var self=this.ptr;return _emscripten_bind_btQuaternion_x_0(self)});btQuaternion.prototype["y"]=btQuaternion.prototype.y=(function(){var self=this.ptr;return _emscripten_bind_btQuaternion_y_0(self)});btQuaternion.prototype["z"]=btQuaternion.prototype.z=(function(){var self=this.ptr;return _emscripten_bind_btQuaternion_z_0(self)});btQuaternion.prototype["w"]=btQuaternion.prototype.w=(function(){var self=this.ptr;return _emscripten_bind_btQuaternion_w_0(self)});btQuaternion.prototype["setX"]=btQuaternion.prototype.setX=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btQuaternion_setX_1(self,arg0)});btQuaternion.prototype["setY"]=btQuaternion.prototype.setY=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btQuaternion_setY_1(self,arg0)});btQuaternion.prototype["setZ"]=btQuaternion.prototype.setZ=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btQuaternion_setZ_1(self,arg0)});btQuaternion.prototype["setW"]=btQuaternion.prototype.setW=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btQuaternion_setW_1(self,arg0)});btQuaternion.prototype["__destroy__"]=btQuaternion.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btQuaternion___destroy___0(self)});function btCapsuleShapeZ(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;this.ptr=_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2(arg0,arg1);getCache(btCapsuleShapeZ)[this.ptr]=this}btCapsuleShapeZ.prototype=Object.create(btCapsuleShape.prototype);btCapsuleShapeZ.prototype.constructor=btCapsuleShapeZ;btCapsuleShapeZ.prototype.__class__=btCapsuleShapeZ;btCapsuleShapeZ.__cache__={};Module["btCapsuleShapeZ"]=btCapsuleShapeZ;btCapsuleShapeZ.prototype["setMargin"]=btCapsuleShapeZ.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCapsuleShapeZ_setMargin_1(self,arg0)});btCapsuleShapeZ.prototype["getMargin"]=btCapsuleShapeZ.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btCapsuleShapeZ_getMargin_0(self)});btCapsuleShapeZ.prototype["setLocalScaling"]=btCapsuleShapeZ.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1(self,arg0)});btCapsuleShapeZ.prototype["calculateLocalInertia"]=btCapsuleShapeZ.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2(self,arg0,arg1)});btCapsuleShapeZ.prototype["__destroy__"]=btCapsuleShapeZ.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btCapsuleShapeZ___destroy___0(self)});function btContactSolverInfo(){throw"cannot construct a btContactSolverInfo, no constructor in IDL"}btContactSolverInfo.prototype=Object.create(WrapperObject.prototype);btContactSolverInfo.prototype.constructor=btContactSolverInfo;btContactSolverInfo.prototype.__class__=btContactSolverInfo;btContactSolverInfo.__cache__={};Module["btContactSolverInfo"]=btContactSolverInfo;btContactSolverInfo.prototype["get_m_splitImpulse"]=btContactSolverInfo.prototype.get_m_splitImpulse=(function(){var self=this.ptr;return!!_emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0(self)});btContactSolverInfo.prototype["set_m_splitImpulse"]=btContactSolverInfo.prototype.set_m_splitImpulse=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1(self,arg0)});btContactSolverInfo.prototype["get_m_splitImpulsePenetrationThreshold"]=btContactSolverInfo.prototype.get_m_splitImpulsePenetrationThreshold=(function(){var self=this.ptr;return _emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0(self)});btContactSolverInfo.prototype["set_m_splitImpulsePenetrationThreshold"]=btContactSolverInfo.prototype.set_m_splitImpulsePenetrationThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1(self,arg0)});btContactSolverInfo.prototype["__destroy__"]=btContactSolverInfo.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btContactSolverInfo___destroy___0(self)});function btGeneric6DofSpringConstraint(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;if(arg3===undefined){this.ptr=_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3(arg0,arg1,arg2);getCache(btGeneric6DofSpringConstraint)[this.ptr]=this;return}if(arg4===undefined){this.ptr=_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_4(arg0,arg1,arg2,arg3);getCache(btGeneric6DofSpringConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5(arg0,arg1,arg2,arg3,arg4);getCache(btGeneric6DofSpringConstraint)[this.ptr]=this}btGeneric6DofSpringConstraint.prototype=Object.create(btGeneric6DofConstraint.prototype);btGeneric6DofSpringConstraint.prototype.constructor=btGeneric6DofSpringConstraint;btGeneric6DofSpringConstraint.prototype.__class__=btGeneric6DofSpringConstraint;btGeneric6DofSpringConstraint.__cache__={};Module["btGeneric6DofSpringConstraint"]=btGeneric6DofSpringConstraint;btGeneric6DofSpringConstraint.prototype["enableSpring"]=btGeneric6DofSpringConstraint.prototype.enableSpring=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2(self,arg0,arg1)});btGeneric6DofSpringConstraint.prototype["setStiffness"]=btGeneric6DofSpringConstraint.prototype.setStiffness=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2(self,arg0,arg1)});btGeneric6DofSpringConstraint.prototype["setDamping"]=btGeneric6DofSpringConstraint.prototype.setDamping=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2(self,arg0,arg1)});btGeneric6DofSpringConstraint.prototype["setLinearLowerLimit"]=btGeneric6DofSpringConstraint.prototype.setLinearLowerLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1(self,arg0)});btGeneric6DofSpringConstraint.prototype["setLinearUpperLimit"]=btGeneric6DofSpringConstraint.prototype.setLinearUpperLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1(self,arg0)});btGeneric6DofSpringConstraint.prototype["setAngularLowerLimit"]=btGeneric6DofSpringConstraint.prototype.setAngularLowerLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1(self,arg0)});btGeneric6DofSpringConstraint.prototype["setAngularUpperLimit"]=btGeneric6DofSpringConstraint.prototype.setAngularUpperLimit=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1(self,arg0)});btGeneric6DofSpringConstraint.prototype["getRotationalLimitMotor"]=btGeneric6DofSpringConstraint.prototype.getRotationalLimitMotor=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;return wrapPointer(_emscripten_bind_btGeneric6DofSpringConstraint_getRotationalLimitMotor_1(self,arg0),btRotationalLimitMotor)});btGeneric6DofSpringConstraint.prototype["enableFeedback"]=btGeneric6DofSpringConstraint.prototype.enableFeedback=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1(self,arg0)});btGeneric6DofSpringConstraint.prototype["getBreakingImpulseThreshold"]=btGeneric6DofSpringConstraint.prototype.getBreakingImpulseThreshold=(function(){var self=this.ptr;return _emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0(self)});btGeneric6DofSpringConstraint.prototype["setBreakingImpulseThreshold"]=btGeneric6DofSpringConstraint.prototype.setBreakingImpulseThreshold=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1(self,arg0)});btGeneric6DofSpringConstraint.prototype["__destroy__"]=btGeneric6DofSpringConstraint.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btGeneric6DofSpringConstraint___destroy___0(self)});function btSphereShape(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;this.ptr=_emscripten_bind_btSphereShape_btSphereShape_1(arg0);getCache(btSphereShape)[this.ptr]=this}btSphereShape.prototype=Object.create(btCollisionShape.prototype);btSphereShape.prototype.constructor=btSphereShape;btSphereShape.prototype.__class__=btSphereShape;btSphereShape.__cache__={};Module["btSphereShape"]=btSphereShape;btSphereShape.prototype["setMargin"]=btSphereShape.prototype.setMargin=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSphereShape_setMargin_1(self,arg0)});btSphereShape.prototype["getMargin"]=btSphereShape.prototype.getMargin=(function(){var self=this.ptr;return _emscripten_bind_btSphereShape_getMargin_0(self)});btSphereShape.prototype["setLocalScaling"]=btSphereShape.prototype.setLocalScaling=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_btSphereShape_setLocalScaling_1(self,arg0)});btSphereShape.prototype["calculateLocalInertia"]=btSphereShape.prototype.calculateLocalInertia=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;_emscripten_bind_btSphereShape_calculateLocalInertia_2(self,arg0,arg1)});btSphereShape.prototype["__destroy__"]=btSphereShape.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_btSphereShape___destroy___0(self)});function LocalConvexResult(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;if(arg1&&typeof arg1==="object")arg1=arg1.ptr;if(arg2&&typeof arg2==="object")arg2=arg2.ptr;if(arg3&&typeof arg3==="object")arg3=arg3.ptr;if(arg4&&typeof arg4==="object")arg4=arg4.ptr;this.ptr=_emscripten_bind_LocalConvexResult_LocalConvexResult_5(arg0,arg1,arg2,arg3,arg4);getCache(LocalConvexResult)[this.ptr]=this}LocalConvexResult.prototype=Object.create(WrapperObject.prototype);LocalConvexResult.prototype.constructor=LocalConvexResult;LocalConvexResult.prototype.__class__=LocalConvexResult;LocalConvexResult.__cache__={};Module["LocalConvexResult"]=LocalConvexResult;LocalConvexResult.prototype["get_m_hitCollisionObject"]=LocalConvexResult.prototype.get_m_hitCollisionObject=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0(self),btCollisionObject)});LocalConvexResult.prototype["set_m_hitCollisionObject"]=LocalConvexResult.prototype.set_m_hitCollisionObject=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1(self,arg0)});LocalConvexResult.prototype["get_m_localShapeInfo"]=LocalConvexResult.prototype.get_m_localShapeInfo=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0(self),LocalShapeInfo)});LocalConvexResult.prototype["set_m_localShapeInfo"]=LocalConvexResult.prototype.set_m_localShapeInfo=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1(self,arg0)});LocalConvexResult.prototype["get_m_hitNormalLocal"]=LocalConvexResult.prototype.get_m_hitNormalLocal=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0(self),btVector3)});LocalConvexResult.prototype["set_m_hitNormalLocal"]=LocalConvexResult.prototype.set_m_hitNormalLocal=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1(self,arg0)});LocalConvexResult.prototype["get_m_hitPointLocal"]=LocalConvexResult.prototype.get_m_hitPointLocal=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0(self),btVector3)});LocalConvexResult.prototype["set_m_hitPointLocal"]=LocalConvexResult.prototype.set_m_hitPointLocal=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1(self,arg0)});LocalConvexResult.prototype["get_m_hitFraction"]=LocalConvexResult.prototype.get_m_hitFraction=(function(){var self=this.ptr;return _emscripten_bind_LocalConvexResult_get_m_hitFraction_0(self)});LocalConvexResult.prototype["set_m_hitFraction"]=LocalConvexResult.prototype.set_m_hitFraction=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;_emscripten_bind_LocalConvexResult_set_m_hitFraction_1(self,arg0)});LocalConvexResult.prototype["__destroy__"]=LocalConvexResult.prototype.__destroy__=(function(){var self=this.ptr;_emscripten_bind_LocalConvexResult___destroy___0(self)});((function(){function setupEnums(){Module["PHY_FLOAT"]=_emscripten_enum_PHY_ScalarType_PHY_FLOAT();Module["PHY_DOUBLE"]=_emscripten_enum_PHY_ScalarType_PHY_DOUBLE();Module["PHY_INTEGER"]=_emscripten_enum_PHY_ScalarType_PHY_INTEGER();Module["PHY_SHORT"]=_emscripten_enum_PHY_ScalarType_PHY_SHORT();Module["PHY_FIXEDPOINT88"]=_emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88();Module["PHY_UCHAR"]=_emscripten_enum_PHY_ScalarType_PHY_UCHAR()}if(Module["calledRun"])setupEnums();else addOnPreMain(setupEnums)}))();this["Ammo"]=Module





  return AmmoLib;
};

module.exports = AmmoLib();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__decorators__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__extend__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transformData__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__loaders__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__loadMaterial__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__texture__ = __webpack_require__(9);
/* unused harmony namespace reexport */
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__extend__["a"]; });
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */







/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ exports["a"] = $wrap;
/* unused harmony export $extend */
/* unused harmony export $define */
/* unused harmony export $defaults */
function $wrap(target) {
  var _proto = target.prototype || target.__proto__;

  return {
    onCallConstructor: function onCallConstructor(callback) {
      _proto.callConstructor = function (old) {
        return function (scope) {
          old(scope);
          callback(scope);
        };
      }(_proto.callConstructor);
    },
    onCallWrap: function onCallWrap(callback) {
      _proto.callWrap = function (old) {
        return function (scope) {
          for (var _len = arguments.length, tags = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            tags[_key - 1] = arguments[_key];
          }

          old.apply(undefined, [scope].concat(tags));
          callback.apply(undefined, [scope].concat(tags));
        };
      }(_proto.callWrap);
    },
    onCallAddTo: function onCallAddTo(callback) {
      _proto.callAddTo = function (old) {
        return function (scope) {
          old(scope);
          callback(scope);
        };
      }(_proto.callAddTo);
    },
    onCallCopy: function onCallCopy(callback) {
      _proto.callCopy = function (old) {
        return function (scope) {
          old(scope);
          callback(scope);
        };
      }(_proto.callCopy);
    }
  };
}

function $extend(target, obj) {
  var _proto = target.prototype || target.__proto__;
  Object.assign(_proto, obj);
}

function $define(target, obj) {
  for (var key in obj) {
    var value = obj[key];
    var _proto = target.prototype || target.__proto__;

    value.configurable = true;

    Object.defineProperty(_proto, key, value);
  }
}

function $defaults(target, obj) {
  var defs = target.defaults || {};
  target.defaults = Object.assign(defs, obj);
  target.params = Object.assign(defs, obj);
}

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ComponentUtils__ = __webpack_require__(6);
/* unused harmony export deprecate */


var deprecate = function deprecate(version) {
  return function (target, name, descriptor) {
    if (descriptor && typeof descriptor.value === 'function') {
      return {
        writable: descriptor.writable,
        configurable: descriptor.configurable,
        enumerable: descriptor.enumerable,
        value: function depricationWrapper() {
          console.warn('Method ' + name + '() is deprecated since v' + version, [target]);
          return descriptor.value.apply(this, arguments);
        }
      };
    } else {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__ComponentUtils__["a" /* $wrap */])(target).onCallConstructor(function () {
        console.warn('Class WHS.' + target.name + ' is deprecated since v' + version, [target]);
      });
    }
  };
};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_three__);
/* unused harmony export loadMaterial */


var loadMaterial = function loadMaterial() {
  var material = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (material instanceof __WEBPACK_IMPORTED_MODULE_0_three__["Material"]) return material;else {
    var materialThree = void 0;

    var params = Object.assign({}, material);

    delete params.kind;
    delete params.useCustomMaterial;
    delete params.useVertexColors;

    switch (material.kind) {
      case 'basic':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["MeshBasicMaterial"](params);
        break;

      case 'linebasic':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["LineBasicMaterial"](params);
        break;

      case 'linedashed':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["LineDashedMaterial"](params);
        break;

      case 'material':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["Material"](params);
        break;

      case 'depth':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["MeshDepthMaterial"](params);
        break;

      case 'face':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["MeshFaceMaterial"](params);
        break;

      case 'lambert':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["MeshLambertMaterial"](params);
        break;

      case 'normal':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["MeshNormalMaterial"](params);
        break;

      case 'phong':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["MeshPhongMaterial"](params);
        break;

      case 'points':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["PointsMaterial"](params);
        break;

      case 'standard':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["MeshStandardMaterial"](params);
        break;

      case 'pointcloud':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["PointCloudMaterial"](params);
        break;

      case 'rawshader':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["RawShaderMaterial"](params);
        break;

      case 'shader':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["ShaderMaterial"](params);
        break;

      case 'spritecanvas':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["SpriteCanvasMaterial"](params);
        break;

      case 'sprite':
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["SpriteMaterial"](params);
        break;

      default:
        materialThree = new __WEBPACK_IMPORTED_MODULE_0_three__["MeshBasicMaterial"](params);
        break;
    }

    return materialThree;
  }
};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_three___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_three__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__loaders__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__extend__ = __webpack_require__(1);
/* unused harmony export texture */





var texture = function texture(url) {
  var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var texture = __WEBPACK_IMPORTED_MODULE_1__loaders__["a" /* TextureLoader */].load(url);

  if (repeat) {
    var opt = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__extend__["a" /* extend */])(repeat, {
      offset: {
        x: 0,
        y: 0
      },
      repeat: {
        x: 1,
        y: 1
      }
    });

    texture.wrapS = texture.wrapT = __WEBPACK_IMPORTED_MODULE_0_three__["RepeatWrapping"];

    texture.offset.set(opt.offset.x, opt.offset.y);
    texture.repeat.set(opt.repeat.x, opt.repeat.y);

    texture.magFilter = __WEBPACK_IMPORTED_MODULE_0_three__["NearestFilter"];
    texture.minFilter = __WEBPACK_IMPORTED_MODULE_0_three__["LinearMipMapLinearFilter"];
  }

  return texture;
};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* unused harmony export instruct */
/* unused harmony export transformData */
/* unused harmony export toArray */


var instruct = function instruct(array, instArray) {
  var tempObject = {};

  for (var i = 0, max = instArray.length; i < max; i++) {
    var guide = instArray[i];

    tempObject[guide] = array[i];
  }

  return tempObject;
};

var transformData = function transformData(object, instructions) {
  for (var key in instructions) {
    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_lodash__["isArray"])(object[key])) object[key] = instruct(object[key], instructions[key]);else if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_lodash__["isObject"])(object[key]) && !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_lodash__["isArray"])(instructions[key])) object[key] = transformData(object[key], instructions[key]);
  }

  return object;
};

var toArray = function toArray(object, instruction) {
  var tempArray = [];

  for (var i = 0, max = instruction.length; i < max; i++) {
    var guide = instruction[i];

    tempArray[i] = object[guide];
  }

  return tempArray;
};

/***/ },
/* 11 */
/***/ function(module, exports) {

console.log("I'm `fs` modules");


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.2';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array of at least `200` elements
     * and any iteratees accept only one argument. The heuristic for whether a
     * section qualifies for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
          (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      value = Object(value);
      return (symToStringTag && symToStringTag in value)
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      object = Object(object);
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 &&
              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(15)(module)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 14 */
/***/ function(module, exports) {

var g;

// This works in non-strict mode
g = (function() { return this; })();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ },
/* 15 */
/***/ function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			configurable: false,
			get: function() { return module.l; }
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			configurable: false,
			get: function() { return module.i; }
		});
		module.webpackPolyfill = 1;
	}
	return module;
}


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ammonext__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ammonext___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ammonext__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_index__ = __webpack_require__(5);



var transferableMessage = self.webkitPostMessage || self.postMessage,


// enum
MESSAGE_TYPES = {
  WORLDREPORT: 0,
  COLLISIONREPORT: 1,
  VEHICLEREPORT: 2,
  CONSTRAINTREPORT: 3,
  SOFTREPORT: 4
};

// temp variables
var _object = void 0,
    _vector = void 0,
    _transform = void 0,
    _transform_pos = void 0,
    _softbody_enabled = false,
    last_simulation_duration = 0,
    _num_objects = 0,
    _num_rigidbody_objects = 0,
    _num_softbody_objects = 0,
    _num_wheels = 0,
    _num_constraints = 0,
    _softbody_report_size = 0,


// world variables
fixedTimeStep = void 0,
    // used when calling stepSimulation
last_simulation_time = void 0,
    world = void 0,
    _vec3_1 = void 0,
    _vec3_2 = void 0,
    _vec3_3 = void 0,
    _quat = void 0;

// private cache
var public_functions = {},
    _objects = [],
    _vehicles = [],
    _constraints = [],
    _objects_ammo = {},
    _object_shapes = {},


// The following objects are to track objects that ammo.js doesn't clean
// up. All are cleaned up when they're corresponding body is destroyed.
// Unfortunately, it's very difficult to get at these objects from the
// body, so we have to track them ourselves.
_motion_states = {},

// Don't need to worry about it for cached shapes.
_noncached_shapes = {},

// A body with a compound shape always has a regular shape as well, so we
// have track them separately.
_compound_shapes = {};

// object reporting
var REPORT_CHUNKSIZE = void 0,
    // report array is increased in increments of this chunk size
worldreport = void 0,
    softreport = void 0,
    collisionreport = void 0,
    vehiclereport = void 0,
    constraintreport = void 0;

var WORLDREPORT_ITEMSIZE = 14,
    // how many float values each reported item needs
COLLISIONREPORT_ITEMSIZE = 5,
    // one float for each object id, and a Vec3 contact normal
VEHICLEREPORT_ITEMSIZE = 9,
    // vehicle id, wheel index, 3 for position, 4 for rotation
CONSTRAINTREPORT_ITEMSIZE = 6; // constraint id, offset object, offset, applied impulse

var ab = new ArrayBuffer(1);

transferableMessage(ab, [ab]);
var SUPPORT_TRANSFERABLE = ab.byteLength === 0;

var getShapeFromCache = function getShapeFromCache(cache_key) {
  if (_object_shapes[cache_key] !== undefined) return _object_shapes[cache_key];

  return null;
};

var setShapeCache = function setShapeCache(cache_key, shape) {
  _object_shapes[cache_key] = shape;
};

var createShape = function createShape(description) {
  var shape = void 0;

  _transform.setIdentity();
  switch (description.type) {
    case 'plane':
      {
        var cache_key = 'plane_' + description.normal.x + '_' + description.normal.y + '_' + description.normal.z;

        if ((shape = getShapeFromCache(cache_key)) === null) {
          _vec3_1.setX(description.normal.x);
          _vec3_1.setY(description.normal.y);
          _vec3_1.setZ(description.normal.z);
          shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btStaticPlaneShape(_vec3_1, 0);
          setShapeCache(cache_key, shape);
        }

        break;
      }
    case 'box':
      {
        var _cache_key = 'box_' + description.width + '_' + description.height + '_' + description.depth;

        if ((shape = getShapeFromCache(_cache_key)) === null) {
          _vec3_1.setX(description.width / 2);
          _vec3_1.setY(description.height / 2);
          _vec3_1.setZ(description.depth / 2);
          shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btBoxShape(_vec3_1);
          setShapeCache(_cache_key, shape);
        }

        break;
      }
    case 'sphere':
      {
        var _cache_key2 = 'sphere_' + description.radius;

        if ((shape = getShapeFromCache(_cache_key2)) === null) {
          shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btSphereShape(description.radius);
          setShapeCache(_cache_key2, shape);
        }

        break;
      }
    case 'cylinder':
      {
        var _cache_key3 = 'cylinder_' + description.width + '_' + description.height + '_' + description.depth;

        if ((shape = getShapeFromCache(_cache_key3)) === null) {
          _vec3_1.setX(description.width / 2);
          _vec3_1.setY(description.height / 2);
          _vec3_1.setZ(description.depth / 2);
          shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btCylinderShape(_vec3_1);
          setShapeCache(_cache_key3, shape);
        }

        break;
      }
    case 'capsule':
      {
        var _cache_key4 = 'capsule_' + description.radius + '_' + description.height;

        if ((shape = getShapeFromCache(_cache_key4)) === null) {
          // In Bullet, capsule height excludes the end spheres
          shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btCapsuleShape(description.radius, description.height - 2 * description.radius);
          setShapeCache(_cache_key4, shape);
        }

        break;
      }
    case 'cone':
      {
        var _cache_key5 = 'cone_' + description.radius + '_' + description.height;

        if ((shape = getShapeFromCache(_cache_key5)) === null) {
          shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btConeShape(description.radius, description.height);
          setShapeCache(_cache_key5, shape);
        }

        break;
      }
    case 'concave':
      {
        var triangle_mesh = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTriangleMesh();
        if (!description.data.length) return false;
        var data = description.data;

        for (var i = 0; i < data.length / 9; i++) {
          _vec3_1.setX(data[i * 9]);
          _vec3_1.setY(data[i * 9 + 1]);
          _vec3_1.setZ(data[i * 9 + 2]);

          _vec3_2.setX(data[i * 9 + 3]);
          _vec3_2.setY(data[i * 9 + 4]);
          _vec3_2.setZ(data[i * 9 + 5]);

          _vec3_3.setX(data[i * 9 + 6]);
          _vec3_3.setY(data[i * 9 + 7]);
          _vec3_3.setZ(data[i * 9 + 8]);

          triangle_mesh.addTriangle(_vec3_1, _vec3_2, _vec3_3, false);
        }

        shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btBvhTriangleMeshShape(triangle_mesh, true, true);

        _noncached_shapes[description.id] = shape;

        break;
      }
    case 'convex':
      {
        shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btConvexHullShape();
        var _data = description.data;

        for (var _i = 0; _i < _data.length / 3; _i++) {
          _vec3_1.setX(_data[_i * 3]);
          _vec3_1.setY(_data[_i * 3 + 1]);
          _vec3_1.setZ(_data[_i * 3 + 2]);

          shape.addPoint(_vec3_1);
        }

        _noncached_shapes[description.id] = shape;

        break;
      }
    case 'heightfield':
      {
        var xpts = description.xpts,
            ypts = description.ypts,
            points = description.points,
            ptr = __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a._malloc(4 * xpts * ypts);

        for (var _i2 = 0, p = 0, p2 = 0; _i2 < xpts; _i2++) {
          for (var j = 0; j < ypts; j++) {
            __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.HEAPF32[ptr + p2 >> 2] = points[p];

            p++;
            p2 += 4;
          }
        }

        shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btHeightfieldTerrainShape(description.xpts, description.ypts, ptr, 1, -description.absMaxHeight, description.absMaxHeight, 2, 'PHY_FLOAT', false);

        _vec3_1.setX(description.xsize / (description.xpts - 1));
        _vec3_1.setY(description.ysize / (description.ypts - 1));
        _vec3_1.setZ(1);

        shape.setLocalScaling(_vec3_1);
        _noncached_shapes[description.id] = shape;
        break;
      }
    default:
      // Not recognized
      return;
  }

  return shape;
};

var createSoftBody = function createSoftBody(description) {
  var body = void 0;

  var softBodyHelpers = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btSoftBodyHelpers();

  switch (description.type) {
    case 'softTrimesh':
      {
        if (!description.aVertices.length) return false;

        body = softBodyHelpers.CreateFromTriMesh(world.getWorldInfo(), description.aVertices, description.aIndices, description.aIndices.length / 3, true);

        break;
      }
    case 'softClothMesh':
      {
        var cr = description.corners;

        body = softBodyHelpers.CreatePatch(world.getWorldInfo(), new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVector3(cr[0], cr[1], cr[2]), new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVector3(cr[3], cr[4], cr[5]), new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVector3(cr[6], cr[7], cr[8]), new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVector3(cr[9], cr[10], cr[11]), description.segments[0], description.segments[1], 0, true);

        break;
      }
    case 'softRopeMesh':
      {
        var data = description.data;

        body = softBodyHelpers.CreateRope(world.getWorldInfo(), new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVector3(data[0], data[1], data[2]), new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVector3(data[3], data[4], data[5]), data[6] - 1, 0);

        break;
      }
    default:
      // Not recognized
      return;
  }

  return body;
};

public_functions.init = function () {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  _transform = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTransform();
  _transform_pos = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTransform();
  _vec3_1 = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVector3(0, 0, 0);
  _vec3_2 = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVector3(0, 0, 0);
  _vec3_3 = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVector3(0, 0, 0);
  _quat = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btQuaternion(0, 0, 0, 0);

  REPORT_CHUNKSIZE = params.reportsize || 50;

  if (SUPPORT_TRANSFERABLE) {
    // Transferable messages are supported, take advantage of them with TypedArrays
    worldreport = new Float32Array(2 + REPORT_CHUNKSIZE * WORLDREPORT_ITEMSIZE); // message id + # of objects to report + chunk size * # of values per object
    collisionreport = new Float32Array(2 + REPORT_CHUNKSIZE * COLLISIONREPORT_ITEMSIZE); // message id + # of collisions to report + chunk size * # of values per object
    vehiclereport = new Float32Array(2 + REPORT_CHUNKSIZE * VEHICLEREPORT_ITEMSIZE); // message id + # of vehicles to report + chunk size * # of values per object
    constraintreport = new Float32Array(2 + REPORT_CHUNKSIZE * CONSTRAINTREPORT_ITEMSIZE); // message id + # of constraints to report + chunk size * # of values per object
  } else {
    // Transferable messages are not supported, send data as normal arrays
    worldreport = [];
    collisionreport = [];
    vehiclereport = [];
    constraintreport = [];
  }

  worldreport[0] = MESSAGE_TYPES.WORLDREPORT;
  collisionreport[0] = MESSAGE_TYPES.COLLISIONREPORT;
  vehiclereport[0] = MESSAGE_TYPES.VEHICLEREPORT;
  constraintreport[0] = MESSAGE_TYPES.CONSTRAINTREPORT;

  var collisionConfiguration = params.whs.softbody ? new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btSoftBodyRigidBodyCollisionConfiguration() : new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btDefaultCollisionConfiguration(),
      dispatcher = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btCollisionDispatcher(collisionConfiguration),
      solver = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btSequentialImpulseConstraintSolver();

  var broadphase = void 0;

  if (!params.broadphase) params.broadphase = { type: 'dynamic' };
  if (params.broadphase.type === 'sweepprune') {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_index__["a" /* extend */])(params.broadphase, {
      aabbmin: {
        x: -50,
        y: -50,
        z: -50
      },

      aabbmax: {
        x: 50,
        y: 50,
        z: 50
      }
    });
  }

  switch (params.broadphase.type) {
    case 'sweepprune':
      _vec3_1.setX(params.broadphase.aabbmin.x);
      _vec3_1.setY(params.broadphase.aabbmin.y);
      _vec3_1.setZ(params.broadphase.aabbmin.z);

      _vec3_2.setX(params.broadphase.aabbmax.x);
      _vec3_2.setY(params.broadphase.aabbmax.y);
      _vec3_2.setZ(params.broadphase.aabbmax.z);

      broadphase = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btAxisSweep3(_vec3_1, _vec3_2);

      break;
    case 'dynamic':
    default:
      broadphase = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btDbvtBroadphase();
      break;
  }

  world = params.whs.softbody ? new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btSoftRigidDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration, new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btDefaultSoftBodySolver()) : new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);
  fixedTimeStep = params.fixedTimeStep;

  if (params.whs.softbody) _softbody_enabled = true;

  transferableMessage({ cmd: 'worldReady' });
};

public_functions.setFixedTimeStep = function (description) {
  fixedTimeStep = description;
};

public_functions.setGravity = function (description) {
  _vec3_1.setX(description.x);
  _vec3_1.setY(description.y);
  _vec3_1.setZ(description.z);
  world.setGravity(_vec3_1);
};

public_functions.appendAnchor = function (description) {
  _objects[description.obj].appendAnchor(description.node, _objects[description.obj2], description.collisionBetweenLinkedBodies, description.influence);
};

public_functions.addObject = function (description) {
  var body = void 0,
      motionState = void 0;

  if (description.type.indexOf('soft') !== -1) {
    body = createSoftBody(description);

    var sbConfig = body.get_m_cfg(),
        physParams = description.params;

    if (physParams.viterations) sbConfig.set_viterations(physParams.viterations);
    if (physParams.piterations) sbConfig.set_piterations(physParams.piterations);
    if (physParams.diterations) sbConfig.set_diterations(physParams.diterations);
    if (physParams.citerations) sbConfig.set_citerations(physParams.citerations);
    sbConfig.set_collisions(0x11);
    sbConfig.set_kDF(physParams.friction);
    sbConfig.set_kDP(physParams.damping);
    if (physParams.pressure) sbConfig.set_kPR(physParams.pressure);
    if (physParams.drag) sbConfig.set_kDG(physParams.drag);
    if (physParams.lift) sbConfig.set_kLF(physParams.lift);
    if (physParams.anchorHardness) sbConfig.set_kAHR(physParams.anchorHardness);
    if (physParams.rigidHardness) sbConfig.set_kCHR(physParams.rigidHardness);

    if (physParams.klst) body.get_m_materials().at(0).set_m_kLST(physParams.klst);
    if (physParams.kast) body.get_m_materials().at(0).set_m_kAST(physParams.kast);
    if (physParams.kvst) body.get_m_materials().at(0).set_m_kVST(physParams.kvst);

    __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.castObject(body, __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btCollisionObject).getCollisionShape().setMargin(physParams.margin ? physParams.margin : 0.1);
    body.setActivationState(physParams.state || 4);
    body.type = 0; // SoftBody.
    if (description.type === 'softRopeMesh') body.rope = true;

    _transform.setIdentity();

    _vec3_1.setX(description.position.x);
    _vec3_1.setY(description.position.y);
    _vec3_1.setZ(description.position.z);
    _transform.setOrigin(_vec3_1);

    _quat.setX(description.rotation.x);
    _quat.setY(description.rotation.y);
    _quat.setZ(description.rotation.z);
    _quat.setW(description.rotation.w);
    _transform.setRotation(_quat);

    body.transform(_transform);

    body.setTotalMass(description.mass, false);
    world.addSoftBody(body, 1, -1);
    _softbody_report_size += body.get_m_nodes().size();
    _num_softbody_objects++;
  } else {
    var _physParams = description.params;
    var shape = createShape(description);

    if (!shape) return;

    // If there are children then this is a compound shape
    if (description.children) {
      var compound_shape = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btCompoundShape();
      compound_shape.addChildShape(_transform, shape);

      for (var i = 0; i < description.children.length; i++) {
        var _child = description.children[i];

        var trans = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTransform();
        trans.setIdentity();

        _vec3_1.setX(_child.position_offset.x);
        _vec3_1.setY(_child.position_offset.y);
        _vec3_1.setZ(_child.position_offset.z);
        trans.setOrigin(_vec3_1);

        _quat.setX(_child.rotation.x);
        _quat.setY(_child.rotation.y);
        _quat.setZ(_child.rotation.z);
        _quat.setW(_child.rotation.w);
        trans.setRotation(_quat);

        shape = createShape(description.children[i]);
        compound_shape.addChildShape(trans, shape);
        __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(trans);
      }

      shape = compound_shape;
      _compound_shapes[description.id] = shape;
    }

    _vec3_1.setX(0);
    _vec3_1.setY(0);
    _vec3_1.setZ(0);
    shape.calculateLocalInertia(description.mass, _vec3_1);

    _transform.setIdentity();

    _vec3_2.setX(description.position.x);
    _vec3_2.setY(description.position.y);
    _vec3_2.setZ(description.position.z);
    _transform.setOrigin(_vec3_2);

    _quat.setX(description.rotation.x);
    _quat.setY(description.rotation.y);
    _quat.setZ(description.rotation.z);
    _quat.setW(description.rotation.w);
    _transform.setRotation(_quat);

    motionState = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btDefaultMotionState(_transform); // #TODO: btDefaultMotionState supports center of mass offset as second argument - implement
    var rbInfo = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btRigidBodyConstructionInfo(description.mass, motionState, shape, _vec3_1);

    rbInfo.set_m_friction(_physParams.friction);
    rbInfo.set_m_restitution(_physParams.restitution);
    rbInfo.set_m_linearDamping(_physParams.damping);
    rbInfo.set_m_angularDamping(_physParams.damping);

    body = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btRigidBody(rbInfo);
    __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.castObject(body, __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btCollisionObject).getCollisionShape().setMargin(_physParams.margin ? _physParams.margin : 0);
    body.setActivationState(_physParams.state || 4);
    __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(rbInfo);

    if (typeof description.collision_flags !== 'undefined') body.setCollisionFlags(description.collision_flags);

    if (description.group && description.mask) world.addRigidBody(body, description.group, description.mask);else world.addRigidBody(body);
    body.type = 1; // RigidBody.
    _num_rigidbody_objects++;
  }

  body.activate();

  body.id = description.id;
  _objects[body.id] = body;
  _motion_states[body.id] = motionState;

  _objects_ammo[body.a === undefined ? body.ptr : body.a] = body.id;
  _num_objects++;

  transferableMessage({ cmd: 'objectReady', params: body.id });
};

public_functions.addVehicle = function (description) {
  var vehicle_tuning = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVehicleTuning();

  vehicle_tuning.set_m_suspensionStiffness(description.suspension_stiffness);
  vehicle_tuning.set_m_suspensionCompression(description.suspension_compression);
  vehicle_tuning.set_m_suspensionDamping(description.suspension_damping);
  vehicle_tuning.set_m_maxSuspensionTravelCm(description.max_suspension_travel);
  vehicle_tuning.set_m_maxSuspensionForce(description.max_suspension_force);

  var vehicle = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btRaycastVehicle(vehicle_tuning, _objects[description.rigidBody], new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btDefaultVehicleRaycaster(world));

  vehicle.tuning = vehicle_tuning;
  _objects[description.rigidBody].setActivationState(4);
  vehicle.setCoordinateSystem(0, 1, 2);

  world.addVehicle(vehicle);
  _vehicles[description.id] = vehicle;
};
public_functions.removeVehicle = function (description) {
  _vehicles[description.id] = null;
};

public_functions.addWheel = function (description) {
  if (_vehicles[description.id] !== undefined) {
    var tuning = _vehicles[description.id].tuning;
    if (description.tuning !== undefined) {
      tuning = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btVehicleTuning();
      tuning.set_m_suspensionStiffness(description.tuning.suspension_stiffness);
      tuning.set_m_suspensionCompression(description.tuning.suspension_compression);
      tuning.set_m_suspensionDamping(description.tuning.suspension_damping);
      tuning.set_m_maxSuspensionTravelCm(description.tuning.max_suspension_travel);
      tuning.set_m_maxSuspensionForce(description.tuning.max_suspension_force);
    }

    _vec3_1.setX(description.connection_point.x);
    _vec3_1.setY(description.connection_point.y);
    _vec3_1.setZ(description.connection_point.z);

    _vec3_2.setX(description.wheel_direction.x);
    _vec3_2.setY(description.wheel_direction.y);
    _vec3_2.setZ(description.wheel_direction.z);

    _vec3_3.setX(description.wheel_axle.x);
    _vec3_3.setY(description.wheel_axle.y);
    _vec3_3.setZ(description.wheel_axle.z);

    _vehicles[description.id].addWheel(_vec3_1, _vec3_2, _vec3_3, description.suspension_rest_length, description.wheel_radius, tuning, description.is_front_wheel);
  }

  _num_wheels++;

  if (SUPPORT_TRANSFERABLE) {
    vehiclereport = new Float32Array(1 + _num_wheels * VEHICLEREPORT_ITEMSIZE); // message id & ( # of objects to report * # of values per object )
    vehiclereport[0] = MESSAGE_TYPES.VEHICLEREPORT;
  } else vehiclereport = [MESSAGE_TYPES.VEHICLEREPORT];
};

public_functions.setSteering = function (details) {
  if (_vehicles[details.id] !== undefined) _vehicles[details.id].setSteeringValue(details.steering, details.wheel);
};

public_functions.setBrake = function (details) {
  if (_vehicles[details.id] !== undefined) _vehicles[details.id].setBrake(details.brake, details.wheel);
};

public_functions.applyEngineForce = function (details) {
  if (_vehicles[details.id] !== undefined) _vehicles[details.id].applyEngineForce(details.force, details.wheel);
};

public_functions.removeObject = function (details) {
  if (_objects[details.id].type === 0) {
    _num_softbody_objects--;
    _softbody_report_size -= _objects[details.id].get_m_nodes().size();
    world.removeSoftBody(_objects[details.id]);
  } else if (_objects[details.id].type === 1) {
    _num_rigidbody_objects--;
    world.removeRigidBody(_objects[details.id]);
    __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(_motion_states[details.id]);
  }

  __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(_objects[details.id]);
  if (_compound_shapes[details.id]) __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(_compound_shapes[details.id]);
  if (_noncached_shapes[details.id]) __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(_noncached_shapes[details.id]);

  _objects_ammo[_objects[details.id].a === undefined ? _objects[details.id].a : _objects[details.id].ptr] = null;
  _objects[details.id] = null;
  _motion_states[details.id] = null;

  if (_compound_shapes[details.id]) _compound_shapes[details.id] = null;
  if (_noncached_shapes[details.id]) _noncached_shapes[details.id] = null;
  _num_objects--;
};

public_functions.updateTransform = function (details) {
  _object = _objects[details.id];

  if (_object.type === 1) {
    _object.getMotionState().getWorldTransform(_transform);

    if (details.pos) {
      _vec3_1.setX(details.pos.x);
      _vec3_1.setY(details.pos.y);
      _vec3_1.setZ(details.pos.z);
      _transform.setOrigin(_vec3_1);
    }

    if (details.quat) {
      _quat.setX(details.quat.x);
      _quat.setY(details.quat.y);
      _quat.setZ(details.quat.z);
      _quat.setW(details.quat.w);
      _transform.setRotation(_quat);
    }

    _object.setWorldTransform(_transform);
    _object.activate();
  } else if (_object.type === 0) {
    _object.getWorldTransform(_transform);

    if (details.pos) {
      _vec3_1.setX(details.pos.x);
      _vec3_1.setY(details.pos.y);
      _vec3_1.setZ(details.pos.z);
      _transform.setOrigin(_vec3_1);
    }

    if (details.quat) {
      _quat.setX(details.quat.x);
      _quat.setY(details.quat.y);
      _quat.setZ(details.quat.z);
      _quat.setW(details.quat.w);
      _transform.setRotation(_quat);
    }

    _object.transform(_transform);
  }
};

public_functions.updateMass = function (details) {
  // #TODO: changing a static object into dynamic is buggy
  _object = _objects[details.id];

  // Per http://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?p=&f=9&t=3663#p13816
  world.removeRigidBody(_object);

  _vec3_1.setX(0);
  _vec3_1.setY(0);
  _vec3_1.setZ(0);

  _object.setMassProps(details.mass, _vec3_1);
  world.addRigidBody(_object);
  _object.activate();
};

public_functions.applyCentralImpulse = function (details) {
  _vec3_1.setX(details.x);
  _vec3_1.setY(details.y);
  _vec3_1.setZ(details.z);

  _objects[details.id].applyCentralImpulse(_vec3_1);
  _objects[details.id].activate();
};

public_functions.applyImpulse = function (details) {
  _vec3_1.setX(details.impulse_x);
  _vec3_1.setY(details.impulse_y);
  _vec3_1.setZ(details.impulse_z);

  _vec3_2.setX(details.x);
  _vec3_2.setY(details.y);
  _vec3_2.setZ(details.z);

  _objects[details.id].applyImpulse(_vec3_1, _vec3_2);
  _objects[details.id].activate();
};

public_functions.applyTorque = function (details) {
  _vec3_1.setX(details.torque_x);
  _vec3_1.setY(details.torque_y);
  _vec3_1.setZ(details.torque_z);

  _objects[details.id].applyTorque(_vec3_1);
  _objects[details.id].activate();
};

public_functions.applyCentralForce = function (details) {
  _vec3_1.setX(details.x);
  _vec3_1.setY(details.y);
  _vec3_1.setZ(details.z);

  _objects[details.id].applyCentralForce(_vec3_1);
  _objects[details.id].activate();
};

public_functions.applyForce = function (details) {
  _vec3_1.setX(details.force_x);
  _vec3_1.setY(details.force_y);
  _vec3_1.setZ(details.force_z);

  _vec3_2.setX(details.x);
  _vec3_2.setY(details.y);
  _vec3_2.setZ(details.z);

  _objects[details.id].applyForce(_vec3_1, _vec3_2);
  _objects[details.id].activate();
};

public_functions.onSimulationResume = function () {
  last_simulation_time = Date.now();
};

public_functions.setAngularVelocity = function (details) {
  _vec3_1.setX(details.x);
  _vec3_1.setY(details.y);
  _vec3_1.setZ(details.z);

  _objects[details.id].setAngularVelocity(_vec3_1);
  _objects[details.id].activate();
};

public_functions.setLinearVelocity = function (details) {
  _vec3_1.setX(details.x);
  _vec3_1.setY(details.y);
  _vec3_1.setZ(details.z);

  _objects[details.id].setLinearVelocity(_vec3_1);
  _objects[details.id].activate();
};

public_functions.setAngularFactor = function (details) {
  _vec3_1.setX(details.x);
  _vec3_1.setY(details.y);
  _vec3_1.setZ(details.z);

  _objects[details.id].setAngularFactor(_vec3_1);
};

public_functions.setLinearFactor = function (details) {
  _vec3_1.setX(details.x);
  _vec3_1.setY(details.y);
  _vec3_1.setZ(details.z);

  _objects[details.id].setLinearFactor(_vec3_1);
};

public_functions.setDamping = function (details) {
  _objects[details.id].setDamping(details.linear, details.angular);
};

public_functions.setCcdMotionThreshold = function (details) {
  _objects[details.id].setCcdMotionThreshold(details.threshold);
};

public_functions.setCcdSweptSphereRadius = function (details) {
  _objects[details.id].setCcdSweptSphereRadius(details.radius);
};

public_functions.addConstraint = function (details) {
  var constraint = void 0;

  switch (details.type) {

    case 'point':
      {
        if (details.objectb === undefined) {
          _vec3_1.setX(details.positiona.x);
          _vec3_1.setY(details.positiona.y);
          _vec3_1.setZ(details.positiona.z);

          constraint = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btPoint2PointConstraint(_objects[details.objecta], _vec3_1);
        } else {
          _vec3_1.setX(details.positiona.x);
          _vec3_1.setY(details.positiona.y);
          _vec3_1.setZ(details.positiona.z);

          _vec3_2.setX(details.positionb.x);
          _vec3_2.setY(details.positionb.y);
          _vec3_2.setZ(details.positionb.z);

          constraint = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btPoint2PointConstraint(_objects[details.objecta], _objects[details.objectb], _vec3_1, _vec3_2);
        }
        break;
      }
    case 'hinge':
      {
        if (details.objectb === undefined) {
          _vec3_1.setX(details.positiona.x);
          _vec3_1.setY(details.positiona.y);
          _vec3_1.setZ(details.positiona.z);

          _vec3_2.setX(details.axis.x);
          _vec3_2.setY(details.axis.y);
          _vec3_2.setZ(details.axis.z);

          constraint = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btHingeConstraint(_objects[details.objecta], _vec3_1, _vec3_2);
        } else {
          _vec3_1.setX(details.positiona.x);
          _vec3_1.setY(details.positiona.y);
          _vec3_1.setZ(details.positiona.z);

          _vec3_2.setX(details.positionb.x);
          _vec3_2.setY(details.positionb.y);
          _vec3_2.setZ(details.positionb.z);

          _vec3_3.setX(details.axis.x);
          _vec3_3.setY(details.axis.y);
          _vec3_3.setZ(details.axis.z);

          constraint = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btHingeConstraint(_objects[details.objecta], _objects[details.objectb], _vec3_1, _vec3_2, _vec3_3, _vec3_3);
        }
        break;
      }
    case 'slider':
      {
        var transformb = void 0;
        var transforma = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTransform();

        _vec3_1.setX(details.positiona.x);
        _vec3_1.setY(details.positiona.y);
        _vec3_1.setZ(details.positiona.z);

        transforma.setOrigin(_vec3_1);

        var rotation = transforma.getRotation();
        rotation.setEuler(details.axis.x, details.axis.y, details.axis.z);
        transforma.setRotation(rotation);

        if (details.objectb) {
          transformb = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTransform();

          _vec3_2.setX(details.positionb.x);
          _vec3_2.setY(details.positionb.y);
          _vec3_2.setZ(details.positionb.z);

          transformb.setOrigin(_vec3_2);

          rotation = transformb.getRotation();
          rotation.setEuler(details.axis.x, details.axis.y, details.axis.z);
          transformb.setRotation(rotation);

          constraint = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btSliderConstraint(_objects[details.objecta], _objects[details.objectb], transforma, transformb, true);
        } else {
          constraint = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btSliderConstraint(_objects[details.objecta], transforma, true);
        }

        constraint.ta = transforma;
        constraint.tb = transformb;

        __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(transforma);
        if (transformb !== undefined) __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(transformb);

        break;
      }
    case 'conetwist':
      {
        var _transforma = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTransform();
        _transforma.setIdentity();

        var _transformb = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTransform();
        _transformb.setIdentity();

        _vec3_1.setX(details.positiona.x);
        _vec3_1.setY(details.positiona.y);
        _vec3_1.setZ(details.positiona.z);

        _vec3_2.setX(details.positionb.x);
        _vec3_2.setY(details.positionb.y);
        _vec3_2.setZ(details.positionb.z);

        _transforma.setOrigin(_vec3_1);
        _transformb.setOrigin(_vec3_2);

        var _rotation = _transforma.getRotation();
        _rotation.setEulerZYX(-details.axisa.z, -details.axisa.y, -details.axisa.x);
        _transforma.setRotation(_rotation);

        _rotation = _transformb.getRotation();
        _rotation.setEulerZYX(-details.axisb.z, -details.axisb.y, -details.axisb.x);
        _transformb.setRotation(_rotation);

        constraint = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btConeTwistConstraint(_objects[details.objecta], _objects[details.objectb], _transforma, _transformb);

        constraint.setLimit(Math.PI, 0, Math.PI);

        constraint.ta = _transforma;
        constraint.tb = _transformb;

        __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(_transforma);
        __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(_transformb);

        break;
      }
    case 'dof':
      {
        var _transformb2 = void 0;

        var _transforma2 = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTransform();
        _transforma2.setIdentity();

        _vec3_1.setX(details.positiona.x);
        _vec3_1.setY(details.positiona.y);
        _vec3_1.setZ(details.positiona.z);

        _transforma2.setOrigin(_vec3_1);

        var _rotation2 = _transforma2.getRotation();
        _rotation2.setEulerZYX(-details.axisa.z, -details.axisa.y, -details.axisa.x);
        _transforma2.setRotation(_rotation2);

        if (details.objectb) {
          _transformb2 = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btTransform();
          _transformb2.setIdentity();

          _vec3_2.setX(details.positionb.x);
          _vec3_2.setY(details.positionb.y);
          _vec3_2.setZ(details.positionb.z);

          _transformb2.setOrigin(_vec3_2);

          _rotation2 = _transformb2.getRotation();
          _rotation2.setEulerZYX(-details.axisb.z, -details.axisb.y, -details.axisb.x);
          _transformb2.setRotation(_rotation2);

          constraint = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btGeneric6DofConstraint(_objects[details.objecta], _objects[details.objectb], _transforma2, _transformb2, true);
        } else {
          constraint = new __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.btGeneric6DofConstraint(_objects[details.objecta], _transforma2, true);
        }

        constraint.ta = _transforma2;
        constraint.tb = _transformb2;

        __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(_transforma2);
        if (_transformb2 !== undefined) __WEBPACK_IMPORTED_MODULE_0_ammonext___default.a.destroy(_transformb2);

        break;
      }
    default:
      return;
  }

  world.addConstraint(constraint);

  constraint.a = _objects[details.objecta];
  constraint.b = _objects[details.objectb];

  constraint.enableFeedback();
  _constraints[details.id] = constraint;
  _num_constraints++;

  if (SUPPORT_TRANSFERABLE) {
    constraintreport = new Float32Array(1 + _num_constraints * CONSTRAINTREPORT_ITEMSIZE); // message id & ( # of objects to report * # of values per object )
    constraintreport[0] = MESSAGE_TYPES.CONSTRAINTREPORT;
  } else constraintreport = [MESSAGE_TYPES.CONSTRAINTREPORT];
};

public_functions.removeConstraint = function (details) {
  var constraint = _constraints[details.id];

  if (constraint !== undefined) {
    world.removeConstraint(constraint);
    _constraints[details.id] = null;
    _num_constraints--;
  }
};

public_functions.constraint_setBreakingImpulseThreshold = function (details) {
  var constraint = _constraints[details.id];
  if (constraint !== undefind) constraint.setBreakingImpulseThreshold(details.threshold);
};

public_functions.simulate = function () {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (world) {
    if (params.timeStep && params.timeStep < fixedTimeStep) params.timeStep = fixedTimeStep;

    params.maxSubSteps = params.maxSubSteps || Math.ceil(params.timeStep / fixedTimeStep); // If maxSubSteps is not defined, keep the simulation fully up to date

    world.stepSimulation(params.timeStep, params.maxSubSteps, fixedTimeStep);

    if (_vehicles.length > 0) reportVehicles();
    reportCollisions();
    if (_constraints.length > 0) reportConstraints();
    reportWorld();
    if (_softbody_enabled) reportWorld_softbodies();
  }
};

// Constraint functions
public_functions.hinge_setLimits = function (params) {
  _constraints[params.constraint].setLimit(params.low, params.high, 0, params.bias_factor, params.relaxation_factor);
};

public_functions.hinge_enableAngularMotor = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.enableAngularMotor(true, params.velocity, params.acceleration);
  constraint.a.activate();
  if (constraint.b) constraint.b.activate();
};

public_functions.hinge_disableMotor = function (params) {
  _constraints[params.constraint].enableMotor(false);
  if (constraint.b) constraint.b.activate();
};

public_functions.slider_setLimits = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.setLowerLinLimit(params.lin_lower || 0);
  constraint.setUpperLinLimit(params.lin_upper || 0);

  constraint.setLowerAngLimit(params.ang_lower || 0);
  constraint.setUpperAngLimit(params.ang_upper || 0);
};

public_functions.slider_setRestitution = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.setSoftnessLimLin(params.linear || 0);
  constraint.setSoftnessLimAng(params.angular || 0);
};

public_functions.slider_enableLinearMotor = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.setTargetLinMotorVelocity(params.velocity);
  constraint.setMaxLinMotorForce(params.acceleration);
  constraint.setPoweredLinMotor(true);
  constraint.a.activate();
  if (constraint.b) constraint.b.activate();
};

public_functions.slider_disableLinearMotor = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.setPoweredLinMotor(false);
  if (constraint.b) constraint.b.activate();
};

public_functions.slider_enableAngularMotor = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.setTargetAngMotorVelocity(params.velocity);
  constraint.setMaxAngMotorForce(params.acceleration);
  constraint.setPoweredAngMotor(true);
  constraint.a.activate();
  if (constraint.b) constraint.b.activate();
};

public_functions.slider_disableAngularMotor = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.setPoweredAngMotor(false);
  constraint.a.activate();
  if (constraint.b) constraint.b.activate();
};

public_functions.conetwist_setLimit = function (params) {
  _constraints[params.constraint].setLimit(params.z, params.y, params.x); // ZYX order
};

public_functions.conetwist_enableMotor = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.enableMotor(true);
  constraint.a.activate();
  constraint.b.activate();
};

public_functions.conetwist_setMaxMotorImpulse = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.setMaxMotorImpulse(params.max_impulse);
  constraint.a.activate();
  constraint.b.activate();
};

public_functions.conetwist_setMotorTarget = function (params) {
  var constraint = _constraints[params.constraint];

  _quat.setX(params.x);
  _quat.setY(params.y);
  _quat.setZ(params.z);
  _quat.setW(params.w);

  constraint.setMotorTarget(_quat);

  constraint.a.activate();
  constraint.b.activate();
};

public_functions.conetwist_disableMotor = function (params) {
  var constraint = _constraints[params.constraint];
  constraint.enableMotor(false);
  constraint.a.activate();
  constraint.b.activate();
};

public_functions.dof_setLinearLowerLimit = function (params) {
  var constraint = _constraints[params.constraint];

  _vec3_1.setX(params.x);
  _vec3_1.setY(params.y);
  _vec3_1.setZ(params.z);

  constraint.setLinearLowerLimit(_vec3_1);
  constraint.a.activate();

  if (constraint.b) constraint.b.activate();
};

public_functions.dof_setLinearUpperLimit = function (params) {
  var constraint = _constraints[params.constraint];

  _vec3_1.setX(params.x);
  _vec3_1.setY(params.y);
  _vec3_1.setZ(params.z);

  constraint.setLinearUpperLimit(_vec3_1);
  constraint.a.activate();

  if (constraint.b) constraint.b.activate();
};

public_functions.dof_setAngularLowerLimit = function (params) {
  var constraint = _constraints[params.constraint];

  _vec3_1.setX(params.x);
  _vec3_1.setY(params.y);
  _vec3_1.setZ(params.z);

  constraint.setAngularLowerLimit(_vec3_1);
  constraint.a.activate();

  if (constraint.b) constraint.b.activate();
};

public_functions.dof_setAngularUpperLimit = function (params) {
  var constraint = _constraints[params.constraint];

  _vec3_1.setX(params.x);
  _vec3_1.setY(params.y);
  _vec3_1.setZ(params.z);

  constraint.setAngularUpperLimit(_vec3_1);
  constraint.a.activate();

  if (constraint.b) constraint.b.activate();
};

public_functions.dof_enableAngularMotor = function (params) {
  var constraint = _constraints[params.constraint];

  var motor = constraint.getRotationalLimitMotor(params.which);
  motor.set_m_enableMotor(true);
  constraint.a.activate();

  if (constraint.b) constraint.b.activate();
};

public_functions.dof_configureAngularMotor = function (params) {
  var constraint = _constraints[params.constraint],
      motor = constraint.getRotationalLimitMotor(params.which);

  motor.set_m_loLimit(params.low_angle);
  motor.set_m_hiLimit(params.high_angle);
  motor.set_m_targetVelocity(params.velocity);
  motor.set_m_maxMotorForce(params.max_force);
  constraint.a.activate();

  if (constraint.b) constraint.b.activate();
};

public_functions.dof_disableAngularMotor = function (params) {
  var constraint = _constraints[params.constraint],
      motor = constraint.getRotationalLimitMotor(params.which);

  motor.set_m_enableMotor(false);
  constraint.a.activate();

  if (constraint.b) constraint.b.activate();
};

var reportWorld = function reportWorld() {
  if (SUPPORT_TRANSFERABLE && worldreport.length < 2 + _num_rigidbody_objects * WORLDREPORT_ITEMSIZE) {
    worldreport = new Float32Array(2 // message id & # objects in report
    + Math.ceil(_num_rigidbody_objects / REPORT_CHUNKSIZE) * REPORT_CHUNKSIZE * WORLDREPORT_ITEMSIZE // # of values needed * item size
    );

    worldreport[0] = MESSAGE_TYPES.WORLDREPORT;
  }

  worldreport[1] = _num_rigidbody_objects; // record how many objects we're reporting on

  {
    var i = 0,
        index = _objects.length;

    while (index--) {
      var object = _objects[index];

      if (object && object.type === 1) {
        // RigidBodies.
        // #TODO: we can't use center of mass transform when center of mass can change,
        //        but getMotionState().getWorldTransform() screws up on objects that have been moved
        // object.getMotionState().getWorldTransform( transform );
        // object.getMotionState().getWorldTransform(_transform);

        var transform = object.getCenterOfMassTransform();
        var origin = transform.getOrigin();
        var rotation = transform.getRotation();

        // add values to report
        var offset = 2 + i++ * WORLDREPORT_ITEMSIZE;

        worldreport[offset] = object.id;

        worldreport[offset + 1] = origin.x();
        worldreport[offset + 2] = origin.y();
        worldreport[offset + 3] = origin.z();

        worldreport[offset + 4] = rotation.x();
        worldreport[offset + 5] = rotation.y();
        worldreport[offset + 6] = rotation.z();
        worldreport[offset + 7] = rotation.w();

        _vector = object.getLinearVelocity();
        worldreport[offset + 8] = _vector.x();
        worldreport[offset + 9] = _vector.y();
        worldreport[offset + 10] = _vector.z();

        _vector = object.getAngularVelocity();
        worldreport[offset + 11] = _vector.x();
        worldreport[offset + 12] = _vector.y();
        worldreport[offset + 13] = _vector.z();
      }
    }
  }

  if (SUPPORT_TRANSFERABLE) transferableMessage(worldreport.buffer, [worldreport.buffer]);else transferableMessage(worldreport);
};

var reportWorld_softbodies = function reportWorld_softbodies() {
  // TODO: Add SUPPORTTRANSFERABLE.

  softreport = new Float32Array(2 // message id & # objects in report
  + _num_softbody_objects * 2 + _softbody_report_size * 6);

  softreport[0] = MESSAGE_TYPES.SOFTREPORT;
  softreport[1] = _num_softbody_objects; // record how many objects we're reporting on

  {
    var offset = 2,
        index = _objects.length;

    while (index--) {
      var object = _objects[index];

      if (object && object.type === 0) {
        // SoftBodies.
        var size = object.get_m_nodes().size();

        softreport[offset] = object.id;
        softreport[offset + 1] = size; // Vertices ammount.

        var offsetVert = offset + 2;

        if (object.rope === true) {
          for (var i = 0; i < size; i++) {
            var node = object.get_m_nodes().at(i);
            var vert = node.get_m_x();
            var off = offsetVert + i * 3;

            softreport[off] = vert.x();
            softreport[off + 1] = vert.y();
            softreport[off + 2] = vert.z();
          }
        } else {
          for (var _i3 = 0; _i3 < size; _i3++) {
            var _node = object.get_m_nodes().at(_i3);
            var _vert = _node.get_m_x();
            var normal = _node.get_m_n();
            var _off = offsetVert + _i3 * 6;

            softreport[_off] = _vert.x();
            softreport[_off + 1] = _vert.y();
            softreport[_off + 2] = _vert.z();

            softreport[_off + 3] = normal.x();
            softreport[_off + 4] = normal.y();
            softreport[_off + 5] = normal.z();
          }
        }

        offset += size * 6 + 2;
      }
    }
  }

  // if (SUPPORT_TRANSFERABLE) transferableMessage(softreport.buffer, [softreport.buffer]);
  // else transferableMessage(softreport);
  transferableMessage(softreport);
};

var reportCollisions = function reportCollisions() {
  var dp = world.getDispatcher(),
      num = dp.getNumManifolds();
  // _collided = false;

  if (SUPPORT_TRANSFERABLE) {
    if (collisionreport.length < 2 + num * COLLISIONREPORT_ITEMSIZE) {
      collisionreport = new Float32Array(2 // message id & # objects in report
      + Math.ceil(_num_objects / REPORT_CHUNKSIZE) * REPORT_CHUNKSIZE * COLLISIONREPORT_ITEMSIZE // # of values needed * item size
      );
      collisionreport[0] = MESSAGE_TYPES.COLLISIONREPORT;
    }
  }

  collisionreport[1] = 0; // how many collisions we're reporting on

  for (var i = 0; i < num; i++) {
    var manifold = dp.getManifoldByIndexInternal(i),
        num_contacts = manifold.getNumContacts();

    if (num_contacts === 0) continue;

    for (var j = 0; j < num_contacts; j++) {
      var pt = manifold.getContactPoint(j);

      // if ( pt.getDistance() < 0 ) {
      var offset = 2 + collisionreport[1]++ * COLLISIONREPORT_ITEMSIZE;
      collisionreport[offset] = _objects_ammo[manifold.getBody0().ptr];
      collisionreport[offset + 1] = _objects_ammo[manifold.getBody1().ptr];

      _vector = pt.get_m_normalWorldOnB();
      collisionreport[offset + 2] = _vector.x();
      collisionreport[offset + 3] = _vector.y();
      collisionreport[offset + 4] = _vector.z();
      break;
      // }
      // transferableMessage(_objects_ammo);
    }
  }

  if (SUPPORT_TRANSFERABLE) transferableMessage(collisionreport.buffer, [collisionreport.buffer]);else transferableMessage(collisionreport);
};

var reportVehicles = function reportVehicles() {
  if (SUPPORT_TRANSFERABLE) {
    if (vehiclereport.length < 2 + _num_wheels * VEHICLEREPORT_ITEMSIZE) {
      vehiclereport = new Float32Array(2 // message id & # objects in report
      + Math.ceil(_num_wheels / REPORT_CHUNKSIZE) * REPORT_CHUNKSIZE * VEHICLEREPORT_ITEMSIZE // # of values needed * item size
      );
      vehiclereport[0] = MESSAGE_TYPES.VEHICLEREPORT;
    }
  }

  {
    var i = 0,
        j = 0,
        index = _vehicles.length;

    while (index--) {
      if (_vehicles[index]) {
        var vehicle = _vehicles[index];

        for (j = 0; j < vehicle.getNumWheels(); j++) {
          // vehicle.updateWheelTransform( j, true );
          // transform = vehicle.getWheelTransformWS( j );
          var transform = vehicle.getWheelInfo(j).get_m_worldTransform();

          var origin = transform.getOrigin();
          var rotation = transform.getRotation();

          // add values to report
          var offset = 1 + i++ * VEHICLEREPORT_ITEMSIZE;

          vehiclereport[offset] = index;
          vehiclereport[offset + 1] = j;

          vehiclereport[offset + 2] = origin.x();
          vehiclereport[offset + 3] = origin.y();
          vehiclereport[offset + 4] = origin.z();

          vehiclereport[offset + 5] = rotation.x();
          vehiclereport[offset + 6] = rotation.y();
          vehiclereport[offset + 7] = rotation.z();
          vehiclereport[offset + 8] = rotation.w();
        }
      }
    }

    if (SUPPORT_TRANSFERABLE && j !== 0) transferableMessage(vehiclereport.buffer, [vehiclereport.buffer]);else if (j !== 0) transferableMessage(vehiclereport);
  }
};

var reportConstraints = function reportConstraints() {
  if (SUPPORT_TRANSFERABLE) {
    if (constraintreport.length < 2 + _num_constraints * CONSTRAINTREPORT_ITEMSIZE) {
      constraintreport = new Float32Array(2 // message id & # objects in report
      + Math.ceil(_num_constraints / REPORT_CHUNKSIZE) * REPORT_CHUNKSIZE * CONSTRAINTREPORT_ITEMSIZE // # of values needed * item size
      );
      constraintreport[0] = MESSAGE_TYPES.CONSTRAINTREPORT;
    }
  }

  {
    var offset = 0,
        i = 0,
        index = _constraints.lenght;

    while (index--) {
      if (_constraints[index]) {
        var _constraint = _constraints[index];
        var offset_body = _constraint.a;
        var transform = _constraint.ta;
        var origin = transform.getOrigin();

        // add values to report
        offset = 1 + i++ * CONSTRAINTREPORT_ITEMSIZE;

        constraintreport[offset] = index;
        constraintreport[offset + 1] = offset_body.id;
        constraintreport[offset + 2] = origin.x;
        constraintreport[offset + 3] = origin.y;
        constraintreport[offset + 4] = origin.z;
        constraintreport[offset + 5] = _constraint.getBreakingImpulseThreshold();
      }
    }

    if (SUPPORT_TRANSFERABLE && i !== 0) transferableMessage(constraintreport.buffer, [constraintreport.buffer]);else if (i !== 0) transferableMessage(constraintreport);
  }
};

self.onmessage = function (event) {
  if (event.data instanceof Float32Array) {
    // transferable object
    switch (event.data[0]) {
      case MESSAGE_TYPES.WORLDREPORT:
        {
          worldreport = new Float32Array(event.data);
          break;
        }
      case MESSAGE_TYPES.COLLISIONREPORT:
        {
          collisionreport = new Float32Array(event.data);
          break;
        }
      case MESSAGE_TYPES.VEHICLEREPORT:
        {
          vehiclereport = new Float32Array(event.data);
          break;
        }
      case MESSAGE_TYPES.CONSTRAINTREPORT:
        {
          constraintreport = new Float32Array(event.data);
          break;
        }
      default:
    }

    return;
  } else if (event.data.cmd && public_functions[event.data.cmd]) public_functions[event.data.cmd](event.data.params);
};

/***/ }
/******/ ]);
//# sourceMappingURL=18c993f4d6bae174fee6.worker.js.map